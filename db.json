{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/images/jenkinsSshAgent密钥截图.png","path":"images/jenkinsSshAgent密钥截图.png","modified":0,"renderable":0},{"_id":"themes/next/source/404.html","path":"404.html","modified":0,"renderable":1},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"source/404.html","hash":"b74e38e322d86183d8865cd8dce465058e879e9c","modified":1534493403919},{"_id":"source/50x.html","hash":"8413224eff40fb061121ab49bcf6e983edb5279b","modified":1535074230506},{"_id":"source/CNAME","hash":"39eb61b069515d58e1797472f44f0f975c49083f","modified":1534493403919},{"_id":"source/tools.html","hash":"40c2680f03375953e6771e2f22b881f9787885a8","modified":1534493403927},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1534493403927},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1534493403927},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1534493403927},{"_id":"themes/next/.gitignore","hash":"0b5c2ffd41f66eb1849d6426ba8cf9649eeed329","modified":1534493403927},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1534493403927},{"_id":"themes/next/.javascript_ignore","hash":"8a224b381155f10e6eb132a4d815c5b52962a9d1","modified":1534493403927},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1534493403927},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1534493403927},{"_id":"themes/next/.travis.yml","hash":"d60d4a5375fea23d53b2156b764a99b2e56fa660","modified":1534493403927},{"_id":"themes/next/LICENSE","hash":"f293bcfcdc06c0b77ba13570bb8af55eb5c059fd","modified":1534493403927},{"_id":"themes/next/README.cn.md","hash":"5d8af3d8de8d3926126a738519e97c8442b0effe","modified":1534493403927},{"_id":"themes/next/README.md","hash":"44b28d995681a7c48bfe3d0577d6203812d07e59","modified":1534493403927},{"_id":"themes/next/_config.yml","hash":"4df0710509730d2248d60d11c5eea9e738d049cc","modified":1534493403927},{"_id":"themes/next/bower.json","hash":"0674f11d3d514e087a176da0e1d85c2286aa5fba","modified":1534493403927},{"_id":"themes/next/gulpfile.coffee","hash":"031bffc483e417b20e90eceb6cf358e7596d2e69","modified":1534493403927},{"_id":"themes/next/package.json","hash":"511445f34412fb0a0caa17ae135b2a78f7a4e932","modified":1534493403927},{"_id":"source/_drafts/linux-find笔记.md","hash":"08eb001897af789285d9781e9a040d132f978d75","modified":1538185041720},{"_id":"source/_drafts/reactor笔记.md","hash":"25365eb49da4c207c3515facc020d645064cabc9","modified":1535956613512},{"_id":"source/_drafts/深入理解jvm阅读笔记-垃圾收集.md","hash":"7fa3d5b057d3fb6ce41bf021a5e7a7537a83173e","modified":1534493403919},{"_id":"source/about/index.md","hash":"a058bbd34ada47afb01c9be3d76cf8a9ac1c6695","modified":1534493403927},{"_id":"source/categories/index.md","hash":"0d17f3b6c21161104efca8b2e6e13fd1030c6bc2","modified":1534493403927},{"_id":"source/images/jenkinsSshAgent密钥截图.png","hash":"ad262bfd04e503686ac5c11a9b3702cade67bed4","modified":1534493403927},{"_id":"source/project/index.md","hash":"75a9ed250e67f6f1162dda3b8a4797502b3ec562","modified":1534493403927},{"_id":"source/tags/index.md","hash":"77721396a062dbbf057928d85f95eb1cb0e9e222","modified":1534493403927},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"3b5eafd32abb718e56ccf8d1cee0607ad8ce611d","modified":1534493403927},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"352093a1b210c72136687fd2eee649244cee402c","modified":1534493403927},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"902f627155a65099e0a37842ff396a58d0dc306f","modified":1534493403927},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1534493403927},{"_id":"themes/next/languages/de.yml","hash":"057e7df11ddeb1c8c15a5d7c5ff29430d725ec6b","modified":1534493403927},{"_id":"themes/next/languages/default.yml","hash":"44ef3f26917f467459326c2c8be2f73e4d947f35","modified":1534493403927},{"_id":"themes/next/languages/en.yml","hash":"7e680d9bb8f3a3a9d1ba1c9d312b3d257183dded","modified":1534493403927},{"_id":"themes/next/languages/fr-FR.yml","hash":"7e4eb7011b8feee641cfb11c6e73180b0ded1c0f","modified":1534493403927},{"_id":"themes/next/languages/id.yml","hash":"b5de1ea66dd9ef54cac9a1440eaa4e3f5fc011f5","modified":1534493403927},{"_id":"themes/next/languages/it.yml","hash":"aa595f2bda029f73ef7bfa104b4c55c3f4e9fb4c","modified":1534493403927},{"_id":"themes/next/languages/ja.yml","hash":"3c76e16fd19b262864475faa6854b718bc08c4d8","modified":1534493403927},{"_id":"themes/next/languages/ko.yml","hash":"ea5b46056e73ebcee121d5551627af35cbffc900","modified":1534493403927},{"_id":"themes/next/languages/nl-NL.yml","hash":"edca4f3598857dbc3cbf19ed412213329b6edd47","modified":1534493403927},{"_id":"themes/next/languages/pt-BR.yml","hash":"b1694ae766ed90277bcc4daca4b1cfa19cdcb72b","modified":1534493403927},{"_id":"themes/next/languages/pt.yml","hash":"44b61f2d085b827b507909a0b8f8ce31c6ef5d04","modified":1534493403927},{"_id":"themes/next/languages/ru.yml","hash":"98ec6f0b7183282e11cffc7ff586ceb82400dd75","modified":1534493403927},{"_id":"themes/next/languages/vi.yml","hash":"fd08d3c8d2c62965a98ac420fdaf95e54c25d97c","modified":1534493403927},{"_id":"themes/next/languages/zh-Hans.yml","hash":"b3e4fe51ec57aebee5bf19e2264a14d4fdcccdce","modified":1534493403927},{"_id":"themes/next/languages/zh-hk.yml","hash":"9396f41ae76e4fef99b257c93c7354e661f6e0fa","modified":1534493403927},{"_id":"themes/next/languages/zh-tw.yml","hash":"50b71abb3ecc0686f9739e179e2f829cd074ecd9","modified":1534493403927},{"_id":"themes/next/layout/_layout.swig","hash":"da0929166674ea637e0ad454f85ad0d7bac4aff2","modified":1534493403927},{"_id":"themes/next/layout/archive.swig","hash":"f0a8225feafd971419837cdb4bcfec98a4a59b2f","modified":1534493403927},{"_id":"themes/next/layout/category.swig","hash":"4472255f4a3e3dd6d79201523a9526dcabdfbf18","modified":1534493403927},{"_id":"themes/next/layout/index.swig","hash":"783611349c941848a0e26ee2f1dc44dd14879bd1","modified":1534493403927},{"_id":"themes/next/layout/page.swig","hash":"969caaee05bdea725e99016eb63d810893a73e99","modified":1534493403927},{"_id":"themes/next/layout/post.swig","hash":"b3589a8e46288a10d20e41c7a5985d2493725aec","modified":1534493403927},{"_id":"themes/next/layout/schedule.swig","hash":"d86f8de4e118f8c4d778b285c140474084a271db","modified":1534493403927},{"_id":"themes/next/layout/tag.swig","hash":"7e0a7d7d832883eddb1297483ad22c184e4368de","modified":1534493403927},{"_id":"themes/next/scripts/merge-configs.js","hash":"81e86717ecfb775986b945d17f0a4ba27532ef07","modified":1534493403927},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1534493403927},{"_id":"themes/next/source/404.html","hash":"b74e38e322d86183d8865cd8dce465058e879e9c","modified":1534493403927},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1534493403943},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1534493403943},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1534493403943},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1534493403931},{"_id":"source/_drafts/CI、CD/devops笔记之常用工具选择.md","hash":"38bc72e178c0bb8231d86a4120626f3f3aba881d","modified":1534493403919},{"_id":"source/_posts/java/guava-Collections笔记.md","hash":"b475fd116330b99976ce0f8225ba4aeb53c98d0c","modified":1534493403919},{"_id":"source/_posts/java/guava-basic笔记.md","hash":"66141219d8ade446394c88dc67a04bf043f68101","modified":1534493403919},{"_id":"source/_posts/java/guava-cache笔记.md","hash":"3c410f6e9a0d8e27f4d3fddf135af3543b4c36b8","modified":1534493403919},{"_id":"source/_posts/java/java注解及自定义注解.md","hash":"0a84c8ed935b71037f63c6ef4085d3dd1f6a76b5","modified":1534493403919},{"_id":"source/_posts/java/jdk8-time笔记.md","hash":"326e571a3f65b1b16c66ffa1c25b188d08ff3319","modified":1534493403923},{"_id":"source/_posts/java/jdk8笔记总结.md","hash":"8a421097aa3fddd77e8faac0bfe4fb14c92dd81d","modified":1534493403923},{"_id":"source/_posts/java/poi和jxl操作office.md","hash":"ff8278bbea5e74462573843e032878f4e5563308","modified":1534493403923},{"_id":"source/_posts/java/stream集合操作符笔记.md","hash":"ec099354f02257d9ca930f6020ca4f2f186cef33","modified":1534493403923},{"_id":"source/_posts/java/webservice三要素.md","hash":"b9bedfadac3e00f4a80ee926dabc4d0be287e8bd","modified":1534493403923},{"_id":"source/_posts/java/xml与json区别及其适用范围.md","hash":"a455d084467baa47f1486ecad83ca0e332ae77af","modified":1534493403923},{"_id":"source/_posts/java/为何重写eq必须重写hashCode.md","hash":"4e705a07698110531e4c20f2007e1080a9ff87f9","modified":1534493403923},{"_id":"source/_posts/java/使用非英文语言开发java.md","hash":"a85ad2d76eb41ce814301345646a6c95ae04c3b0","modified":1534493403923},{"_id":"source/_posts/java/常用json解析框架对比.md","hash":"dedfad10c64d05cf976247ca8c8e3b605e5de247","modified":1534493403923},{"_id":"source/_posts/java/深入理解jvm阅读笔记-内存区域划分.md","hash":"c23236bee696f69534ec91aad109a870ce5716a3","modified":1534493403923},{"_id":"source/_posts/java/自定义jsp标签的两种方式(java-bean+tld、tag).md","hash":"188f0453569a8bdd4a22232c1ecfde9e22c58ba0","modified":1534493403923},{"_id":"source/_posts/linux/dockerfile关键字笔记.md","hash":"f921171379134b9d809e5fbbad776305a9fc04ed","modified":1535957686328},{"_id":"source/_posts/linux/docker容器启动之后马上关闭问题解决办法笔记.md","hash":"0e0ba9235b839873d5dacdb61cb122f1426c70d3","modified":1534493403923},{"_id":"source/_posts/linux/docker环境下rocketmq重复消费问题.md","hash":"f13ea1816b4cb5a18bfa7805497c9d135f305325","modified":1534493403923},{"_id":"source/_posts/linux/docker配置daemon.json(加速、http访问私服仓库).md","hash":"4ea6dfa57adaef17fc630339bb3d1cc6761f7e39","modified":1534493403923},{"_id":"source/_posts/linux/es-kibana-filebeat采集docker日志实战.md","hash":"af5fc83708803648a0948968a5ef96ce926308a4","modified":1534493403923},{"_id":"source/_posts/linux/iptables笔记.md","hash":"c623b8c2cd08d6554d2b4ad8a0439a1d774176ff","modified":1534493403923},{"_id":"source/_posts/linux/linux-alias--别名使用.md","hash":"6b85d500b517a107d1ab4298a50cfb750e11a8a8","modified":1536733788014},{"_id":"source/_posts/linux/linux-history笔记.md","hash":"03b1ed6f3361e9d25f612aa5d3b5746328b47222","modified":1536736877787},{"_id":"source/_posts/linux/linux-ln连接笔记.md","hash":"e313dbd2ff463298f7d502bc4fd3581f45b957ab","modified":1538188153000},{"_id":"source/_posts/linux/linux-read笔记.md","hash":"f6482b45fdcb25501f54350e0094d254e210b72a","modified":1536806915945},{"_id":"source/_posts/linux/linux-shell脚本入参笔记.md","hash":"ebf186745163bb5bd792f1dec3d5962c91e875cc","modified":1538188123632},{"_id":"source/_posts/linux/linux-xargs笔记.md","hash":"c29aeadc2e07b0405414b4f751b1e7c15db0b70d","modified":1536739389928},{"_id":"source/_posts/linux/linux操作文本命令.md","hash":"e76e234799ab6a9d0a45d5ae11b805d1e2b66eaa","modified":1534493403923},{"_id":"source/_posts/linux/linux简单命令笔记.md","hash":"7dc1b1d7cf56c1055a9810caddd434e8c1a390f7","modified":1536816892013},{"_id":"source/_posts/linux/linux解压windows下中文文件乱码.md","hash":"611e151906342d629aa31a3ed0b7b4bfb0355319","modified":1534493403923},{"_id":"source/_posts/linux/linux通过ss翻墙.md","hash":"eb594097d887187370404ea8b98b622764f5a729","modified":1534493403923},{"_id":"source/_posts/linux/使用docker快速搭建ssServer.md","hash":"66b082c442455d126746b7e104b82716a13a9875","modified":1534493403923},{"_id":"source/_posts/linux/前端包管理工具-npm-切换源(aliyun)方法.md","hash":"1f0456c3bd417b0ab61992d20608009217637dbc","modified":1534493403923},{"_id":"source/_posts/linux/强大的linux终端分屏工具tmux.md","hash":"23569d0ba447cec953acb3ee096c02e1e7739dab","modified":1536733176860},{"_id":"source/_posts/linux/树莓派吃土笔记(一)-组装运行.md","hash":"467a3d4147eb8f2fb90f4830bb510af689d0b958","modified":1534493403923},{"_id":"source/_posts/linux/树莓派吃土笔记(三)-vnc桌面链接.md","hash":"bf211812197b8a75f37a3fd3d07c04816f863488","modified":1534493403923},{"_id":"source/_posts/linux/树莓派吃土笔记(二)-启动wifi模块.md","hash":"a929f0627cd3966292db5395c956e81869d12578","modified":1534493403923},{"_id":"source/_posts/spring/eureka-client多网卡配置笔记.md","hash":"a66985e314e802e8c188af7cd9c1de8bb261f50b","modified":1535007855154},{"_id":"source/_posts/spring/spirng-cloud笔记目录.md","hash":"af72296caf5ca73510fd2fdf11af8a30add7f1ec","modified":1534493403923},{"_id":"source/_posts/spring/spring-bean加载顺序解决办法笔记.md","hash":"756004298383eea856f1f2570153621e1b829e67","modified":1534493403923},{"_id":"source/_posts/spring/spring-boot-actuator笔记.md","hash":"0e49fcc6d83f164110a57a71fcb8bff0a6b46dca","modified":1534493403923},{"_id":"source/_posts/spring/spring-boot-cache使用实战.md","hash":"53c565fb8f9b03382e668a1b3f64a3e9bba1646f","modified":1534493403923},{"_id":"source/_posts/spring/spring-boot定时器Schedule模块笔记.md","hash":"4fd18bc33cc6814705fe4b42dcca50e1e669fc44","modified":1541752600019},{"_id":"source/_posts/spring/spring-boot打包成docker-image.md","hash":"2cc783f2f1e5548c0a3b3b1a624b333dc5856b4f","modified":1534493403923},{"_id":"source/_posts/spring/spring-cloud-eureka笔记.md","hash":"c5a2472d9325f8b0d4088c41466d60436bf35a52","modified":1534493403923},{"_id":"source/_posts/spring/spring-cloud-ribbon笔记.md","hash":"f6f7d023368e80b3631a48fc4e749a09ffa6f2ed","modified":1534493403923},{"_id":"source/_posts/spring/spring-data-jpa自定义repository接口(统一扩展jpa使用方法).md","hash":"f60b2ab1232617172c9f988f59a99b11a95c48c3","modified":1534493403923},{"_id":"source/_posts/spring/spring-resource相关笔记.md","hash":"07028f029bcc953cdf616aa1c08244ef689c8dff","modified":1534493403923},{"_id":"source/_posts/spring/spring-操作bean的工具类(SpringBeanManager)笔记.md","hash":"86cee2e112212fb0f950593550b0c6c081ad30c9","modified":1538188490906},{"_id":"source/_posts/spring/springCloudConfigServer的git、svn版本实现及相关实战案例.md","hash":"e48737c001fd11d6df2f571e8774906c0c0989d7","modified":1534493403923},{"_id":"source/_posts/spring/springboot-mvc返回全局处理异常.md","hash":"b96f6c5d3fdd9939933d7d447b117625fdc23c40","modified":1534493403923},{"_id":"source/_posts/spring/springboot-mvc返回指定json格式数据.md","hash":"8d0f924fd17a2c5b5a9a01942b855ea2e09cd0b0","modified":1534493403923},{"_id":"source/_posts/spring/springboot-mvc配置笔记.md","hash":"f3a5991d8a4488968067dcb8cfc7ad08c277dafe","modified":1534493403923},{"_id":"source/_posts/spring/springboot-mvc配置自定义消息转换器.md","hash":"2171cc98461f1f7dec112607e8a034fe5a8471ac","modified":1534493403923},{"_id":"source/_posts/spring/springboot-thymeleaf模版实现类似jsp的sitemesh.md","hash":"788f894cfeffff2c3d59504d7d27fbfa329cd057","modified":1534493403923},{"_id":"source/_posts/spring/springboot-集成quartz笔记(支持groovy-script-job).md","hash":"a2fbb2636802ede406df9405274d7c2780d4cd6c","modified":1534493403923},{"_id":"source/_posts/spring/springboot入坑笔记(一)-helloworld.md","hash":"f649f1d6bcfef6c408fd9ed5338f62efaae659e2","modified":1534493403923},{"_id":"source/_posts/spring/springboot入坑笔记(三)-基于spring-boot(mvc、jpa、h2、thymeleaf)实例.md","hash":"f572e4f5eac3ca1eb8ff3680711ecc91f7ca191d","modified":1534493403923},{"_id":"source/_posts/spring/springboot入坑笔记(三)-自定义配置.md","hash":"9d60319ed248aaa7a94381399a93e801b1b8a0be","modified":1534493403923},{"_id":"source/_posts/spring/springboot入坑笔记(二)-排除依赖、覆盖依赖.md","hash":"994e391d0531e6ebcc9f06248c1d7b3b4f1a5792","modified":1534493403923},{"_id":"source/_posts/搬砖工具/git-lfs使用笔记.md","hash":"fa15cc921bdcd83279d4d5f3a2e4af2467440dce","modified":1534493403923},{"_id":"source/_posts/搬砖工具/idea常用插件.md","hash":"3d9a6716bd173bb453cfc9c0e55574336d864aa0","modified":1536044875717},{"_id":"source/_posts/搬砖工具/代码质量监控平台sonar使用笔记.md","hash":"31f813ffbffc5b07e679190148cacb821e4fe626","modified":1534493403923},{"_id":"source/_posts/搬砖工具/工作linux系统优化.md","hash":"e5dc45cd5fac0acab73ef9d86e27c93324ec9e0a","modified":1534493403923},{"_id":"source/_posts/综合应用/centos-docker环境搭建.md","hash":"d59260b9b922e9bec9ec45b7569b7fe6347c7a04","modified":1534493403923},{"_id":"source/_posts/综合应用/docker-compose配置笔记.md","hash":"6f075a417a88eb3749feab103d765b3b9fadd3fc","modified":1534493403923},{"_id":"source/_posts/综合应用/docker-swarm集群搭建.md","hash":"978a6897141c2f5014a31e52c572cec17bddea19","modified":1534493403923},{"_id":"source/_posts/综合应用/docker启动jenkins.md","hash":"5a743e059e8b10230e4a9a30005e5a2bb882f534","modified":1534493403923},{"_id":"source/_posts/综合应用/feign切换访问http接口的实现.md","hash":"170e470c46244f2c66492dbe5b090cc72ff90607","modified":1534493403923},{"_id":"source/_posts/综合应用/git-flow-笔记--（git流程和规范）.md","hash":"bc25db55ca2160d0507896a31caec86bcd4aaa5a","modified":1534493403923},{"_id":"source/_posts/综合应用/k8s集群日志采集方案选择.md","hash":"2ffa1d0fdf2c600bdb3fa1a7955c1ed3613fcd96","modified":1534493403923},{"_id":"source/_posts/综合应用/k8s集群暴露集群服务的各种方案的优劣.md","hash":"a3bf05941e8680110a11953c22c083f2d24bcded","modified":1534493403923},{"_id":"source/_posts/综合应用/log4j2通过socket发送日志到elk平台.md","hash":"c60daa0ec25c35c52c7fc9c4d66b99658210437a","modified":1534493403923},{"_id":"source/_posts/综合应用/maven+tomcamt远程部署javaweb项目.md","hash":"971668ba34160e0ad30d166648e7786bcb550453","modified":1534493403923},{"_id":"source/_posts/综合应用/minikube快速搭建k8s测试环境.md","hash":"0916b969fbe32db2ac84c15f8f185e513797c634","modified":1534493403923},{"_id":"source/_posts/综合应用/netty-传输手段笔记.md","hash":"a284e2cfaf1b90febe89172cf2d836cfb4b7f121","modified":1534493403923},{"_id":"source/_posts/综合应用/rancher搭建k8s集群-国内加速.md","hash":"3fda633789ebb99ef62e53c26d9c77232bcb9ca7","modified":1534493403923},{"_id":"source/_posts/综合应用/springboot-mvc消息转换器.md","hash":"059a14633274c83bbf0ee990448eefa81896ea37","modified":1534493403923},{"_id":"source/_posts/综合应用/win10-使用vbox安装虚拟机蓝屏解决版本.md","hash":"1f2e939ea15f6f4ad89db4045c6d5dcd9de2d27d","modified":1534493403923},{"_id":"source/_posts/综合应用/yaml语法笔记.md","hash":"3d90f1d17c03edd34e8f37cd1fbdca1951b68e1b","modified":1534493403923},{"_id":"source/_posts/综合应用/使用阿里云的oss-cdn搭建高速访问的静态博客.md","hash":"27537606ef5b2059bcb25c9d396399e503595de4","modified":1534493403923},{"_id":"source/_posts/综合应用/基于jenkins2-X和docker的集成的实例.md","hash":"627c25593ba68ba0d5006a1e0366752b395e10af","modified":1534493403923},{"_id":"source/_posts/综合应用/开发中乱码处理.md","hash":"d0b52ab2fdbd37732cd0c9b52232a1b32c8fb784","modified":1534493403923},{"_id":"source/_posts/综合应用/接口访问加密.md","hash":"654884ec0ced3746fdb472d38b399351f2126041","modified":1534493403923},{"_id":"source/_posts/综合应用/服务端推送技术及其实现(轮询、长链接、websocket).md","hash":"c17d0f80db028161a3bdb1019de227c9d9edbaa9","modified":1534493403923},{"_id":"source/_posts/综合应用/跨域笔记(jsonp、cors).md","hash":"bbcf87f28d6160fb92c38f4b1647b113cfd78460","modified":1534493403923},{"_id":"source/_posts/设计模式/设计模式(一)-六大基本原则.md","hash":"8ffd0111313228562f4a7e20796700801bdd9ed6","modified":1534493403923},{"_id":"source/_posts/设计模式/设计模式(二)-23种设计模式分类和基本概述.md","hash":"f75919be263c64225f84e3903eab5f5483763179","modified":1534493403923},{"_id":"source/_posts/设计模式/设计模式笔记(七)：创建型-原型模式.md","hash":"a94a458937839243e7f0329600ccc40eb5b759dc","modified":1534493403923},{"_id":"source/_posts/设计模式/设计模式笔记(三)：创建型-工厂模式.md","hash":"66bb9ae146b5b9010bd73b4cc7272ebdd82cfe90","modified":1534493403923},{"_id":"source/_posts/设计模式/设计模式笔记(九)：结构型-桥接模式.md","hash":"22ff415278c7604c56780925726063a79e0ab8eb","modified":1534493403923},{"_id":"source/_posts/设计模式/设计模式笔记(五)：创建型-单例模式.md","hash":"4e32db24295853d7ef3b64bd5434062ab491d399","modified":1534493403927},{"_id":"source/_posts/设计模式/设计模式笔记(八)：结构型-适配器模式.md","hash":"f9418baa97410265002efabb7b2f4ac059062591","modified":1534493403927},{"_id":"source/_posts/设计模式/设计模式笔记(六)：创建型-建造者模式.md","hash":"0e9d10553489d8c4749c5c6247ee93775dd9bde4","modified":1534493403927},{"_id":"source/_posts/设计模式/设计模式笔记(四)：创建型-抽象工厂模式.md","hash":"ea431bcfc1e7cbc1f9125ab88d95a1d2fe98b1fc","modified":1534493403927},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1534493403927},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1534493403927},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1534493403927},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"665a928604f99d2ba7dc4a4a9150178229568cc6","modified":1534493403927},{"_id":"themes/next/layout/_macro/post.swig","hash":"446a35a2cd389f8cfc3aa38973a9b44ad0740134","modified":1534493403927},{"_id":"themes/next/layout/_macro/reward.swig","hash":"56e8d8556cf474c56ae1bef9cb7bbd26554adb07","modified":1534493403927},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"6a54c3c85ff6b19d275827a327abbf4bd99b2ebf","modified":1534493403927},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"39852700e4084ecccffa6d4669168e5cc0514c9e","modified":1534493403927},{"_id":"themes/next/layout/_partials/comments.swig","hash":"4a6f5b1792b2e5262b7fdab9a716b3108e2f09c7","modified":1534493403927},{"_id":"themes/next/layout/_partials/footer.swig","hash":"8616c010751ffc2b0325653a305e5e4fd7d4e875","modified":1534493403927},{"_id":"themes/next/layout/_partials/head.swig","hash":"6b94fe8f3279daea5623c49ef4bb35917ba57510","modified":1534493403927},{"_id":"themes/next/layout/_partials/header.swig","hash":"ed042be6252848058c90109236ec988e392d91d4","modified":1534493403927},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1534493403927},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1534493403927},{"_id":"themes/next/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1534493403927},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1534493403927},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1534493403927},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"a266f96ad06ee87bdeae6e105a4b53cd587bbd04","modified":1534493403927},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1534493403927},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1534493403927},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1534493403927},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"5fe0447cc88a5a63b530cf0426f93c4634811876","modified":1534493403927},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1534493403927},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1534493403927},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"1ddb2336a1a19b47af3017047012c01ec5f54529","modified":1534493403927},{"_id":"themes/next/scripts/tags/button.js","hash":"d023f10a00077f47082b0517e2ad666e6e994f60","modified":1534493403927},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1534493403927},{"_id":"themes/next/scripts/tags/exturl.js","hash":"8d7e60f60779bde050d20fd76f6fdc36fc85e06d","modified":1534493403927},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1534493403927},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1534493403927},{"_id":"themes/next/scripts/tags/label.js","hash":"2f8f41a7316372f0d1ed6b51190dc4acd3e16fff","modified":1534493403927},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"eeeabede68cf263de9e6593ecf682f620da16f0a","modified":1534493403927},{"_id":"themes/next/scripts/tags/note.js","hash":"64de4e9d01cf3b491ffc7d53afdf148ee5ad9779","modified":1534493403927},{"_id":"themes/next/scripts/tags/tabs.js","hash":"5786545d51c38e8ca38d1bfc7dd9e946fc70a316","modified":1534493403927},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1534493403931},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1534493403931},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1534493403931},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1534493403931},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1534493403931},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1534493403931},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1534493403931},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1534493403931},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1534493403931},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1534493403931},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1534493403931},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1534493403931},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1534493403931},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1534493403931},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1534493403931},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1534493403931},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1534493403931},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1534493403931},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1534493403931},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1534493403927},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1534493403927},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1534493403931},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1534493403931},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1534493403931},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1534493403931},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1534493403931},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1534493403927},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1534493403927},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1534493403927},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1534493403927},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1534493403927},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1534493403927},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1534493403927},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1534493403927},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"048fd5e98149469f8c28c21ba3561a7a67952c9b","modified":1534493403927},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1534493403927},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1534493403927},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1534493403927},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"98df9d72e37dd071e882f2d5623c9d817815b139","modified":1534493403927},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1534493403927},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1534493403927},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"18e7bef8923d83ea42df6c97405e515a876cede4","modified":1534493403927},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1534493403927},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1534493403927},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"1cd01c6e92ab1913d48e556a92bb4f28b6dc4996","modified":1534493403927},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1534493403927},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"5e9bb24c750b49513d9a65799e832f07410002ac","modified":1534493403927},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"fc65b9c98a0a8ab43a5e7aabff6c5f03838e09c8","modified":1534493403927},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1534493403927},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1534493403927},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1534493403927},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1534493403927},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"c316758546dc9ba6c60cb4d852c17ca6bb6d6724","modified":1534493403927},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1534493403927},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"b1aa0ae8f5c649b066f2da15f2d7f0865f79ca44","modified":1534493403927},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1534493403927},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"aa0629277d751c55c6d973e7691bf84af9b17a60","modified":1534493403927},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"8a2e393d2e49f7bf560766d8a07cd461bf3fce4f","modified":1534493403927},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"fcabbb241f894c9a6309c44e126cf3e8fea81fd4","modified":1534493403927},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"8b6650f77fe0a824c8075b2659e0403e0c78a705","modified":1534493403927},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1534493403927},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"385c066af96bee30be2459dbec8aae1f15d382f5","modified":1534493403927},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1534493403927},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1534493403927},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"cab8beac5902530d167f0b8599abcbc93bd89b3f","modified":1534493403931},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1534493403931},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"9ab65361ba0a12a986edd103e56492644c2db0b8","modified":1534493403931},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"82f9055955920ed88a2ab6a20ab02169abb2c634","modified":1534493403931},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"99fbb4686ea9a3e03a4726ed7cf4d8f529034452","modified":1534493403931},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"be087dcc060e8179f7e7f60ab4feb65817bd3d9f","modified":1534493403931},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"f29165e36489a87ba32d17dddfd2720d84e3f3ec","modified":1534493403931},{"_id":"themes/next/source/css/_variables/base.styl","hash":"29c261fa6b4046322559074d75239c6b272fb8a3","modified":1534493403931},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1534493403931},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1534493403931},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1534493403931},{"_id":"themes/next/source/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1534493403931},{"_id":"themes/next/source/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1534493403931},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1534493403931},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1534493403931},{"_id":"themes/next/source/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1534493403931},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1534493403935},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1534493403935},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1534493403935},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1534493403935},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1534493403935},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1534493403935},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1534493403935},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1534493403935},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1534493403935},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1534493403935},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1534493403935},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1534493403935},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1534493403939},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1534493403939},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1534493403939},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1534493403939},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1534493403939},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1534493403939},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1534493403939},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1534493403939},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1534493403939},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1534493403939},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1534493403939},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1534493403939},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1534493403939},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1534493403939},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1534493403939},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1534493403939},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1534493403939},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1534493403939},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1534493403939},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1534493403939},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1534493403939},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1534493403939},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1534493403939},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1534493403939},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1534493403939},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1534493403939},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1534493403939},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1534493403943},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1534493403943},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1534493403943},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1534493403943},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1534493403943},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1534493403931},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1534493403931},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1534493403931},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1534493403939},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1534493403927},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1534493403927},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"4719ce717962663c5c33ef97b1119a0b3a4ecdc3","modified":1534493403927},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1534493403927},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"7e509c7c28c59f905b847304dd3d14d94b6f3b8e","modified":1534493403927},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1534493403927},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1534493403927},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"c5d48863f332ff8ce7c88dec2c893f709d7331d3","modified":1534493403931},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1534493403931},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1534493403931},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"f7c44b0ee46cf2cf82a4c9455ba8d8b55299976f","modified":1534493403931},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1534493403931},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"47a46583a1f3731157a3f53f80ed1ed5e2753e8e","modified":1534493403931},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1534493403931},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1534493403931},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1534493403931},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"18c3336ee3d09bd2da6a876e1336539f03d5a973","modified":1534493403931},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1534493403931},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1534493403931},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1534493403931},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1534493403931},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"3b25edfa187d1bbbd0d38b50dd013cef54758abf","modified":1534493403931},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1534493403931},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1534493403931},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1534493403931},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1534493403931},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"4aac01962520d60b03b23022ab601ad4bd19c08c","modified":1534493403931},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1534493403931},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1534493403931},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1534493403931},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"269a02414dfbd887541561b5b422e1042abadecb","modified":1534493403931},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1534493403931},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1534493403931},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"9d16fa3c14ed76b71229f022b63a02fd0f580958","modified":1534493403931},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1534493403931},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1534493403931},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1534493403931},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1534493403935},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1534493403935},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1534493403935},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1534493403935},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1534493403935},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1534493403935},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1534493403935},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1534493403935},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1534493403935},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1534493403935},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1534493403935},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1534493403935},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1534493403935},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1534493403935},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1534493403935},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1534493403943},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1534493403943},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1534493403935},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1534493403935},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1534493403939},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"7905a7f625702b45645d8be1268cb8af3f698c70","modified":1534493403927},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1534493403927},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1534493403927},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1534493403927},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1534493403927},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1534493403927},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1534493403927},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"25dc25f61a232f03ca72472b7852f882448ec185","modified":1534493403931},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1534493403931},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"f5aa2ba3bfffc15475e7e72a55b5c9d18609fdf5","modified":1534493403931},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1534493403931},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1534493403931},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1534493403931},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1534493403931},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1534493403931},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1534493403931},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1534493403931},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1534493403931},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"535b3b4f8cb1eec2558e094320e7dfb01f94c0e7","modified":1534493403931},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1534493403931},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"aea21141015ca8c409d8b33e3e34ec505f464e93","modified":1534493403931},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1534493403931},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"36332c8a91f089f545f3c3e8ea90d08aa4d6e60c","modified":1534493403931},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1534493403931},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1534493403931},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"d5a4e4fc17f1f7e7c3a61b52d8e2e9677e139de7","modified":1534493403931},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1534493403931},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"e4055a0d2cd2b0ad9dc55928e2f3e7bd4e499da3","modified":1534493403931},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"262debfd4442fa03d9919ceb88b948339df03fb0","modified":1534493403931},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"0a6c0efffdf18bddbc1d1238feaed282b09cd0fe","modified":1534493403931},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1534493403931},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"89dd4f8b1f1cce3ad46cf2256038472712387d02","modified":1534493403931},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1534493403931},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1534493403931},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1534493403931},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"12937cae17c96c74d5c58db6cb29de3b2dfa14a2","modified":1534493403931},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1534493403931},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"50305b6ad7d09d2ffa4854e39f41ec1f4fe984fd","modified":1534493403931},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1534493403931},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1534493403931},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1534493403931},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"37e951e734a252fe8a81f452b963df2ba90bfe90","modified":1534493403931},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1534493403931},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1534493403931},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"ee7528900578ef4753effe05b346381c40de5499","modified":1534493403931},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1534493403931},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1534493403931},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"ead0d0f2321dc71505788c7f689f92257cf14947","modified":1534493403931},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1534493403931},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1534493403931},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1534493403931},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1534493403931},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"34935b40237c074be5f5e8818c14ccfd802b7439","modified":1534493403931},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1534493403931},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1534493403931},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1534493403931},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"a5e3e6b4b4b814a9fe40b34d784fed67d6d977fa","modified":1534493403931},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"1ccfbd4d0f5754b2dc2719a91245c95f547a7652","modified":1534493403931},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1534493403931},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1534493403931},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1534493403931},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1534493403931},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1534493403931},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1534493403931},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1534493403931},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1534493403931},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1534493403935},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1534493403935},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1534493403935},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1534493403935},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1534493403935},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1534493403935},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1534493403935},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1534493403939},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1534493403943},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1534493403939},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1534493403939},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1534493403935},{"_id":"themes/next/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1534493403943},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1534493403939},{"_id":"public/images/jenkinsSshAgent密钥截图.png","hash":"99162c673fe757453051c011da2c86654742014a","modified":1541757000537},{"_id":"public/images/algolia_logo.svg","hash":"278ffcea4876b37657f2e192bda48c6bc7dd8784","modified":1541757000538},{"_id":"public/images/apple-touch-icon-next.png","hash":"b972160c147e9bec3a0f7432e6e80dfa92581b0b","modified":1541757000579},{"_id":"public/images/avatar.gif","hash":"2dbc3e2f2d624b2ca1afe6edc2ca17307f1950c8","modified":1541757000580},{"_id":"public/images/cc-by-nc-nd.svg","hash":"a001671db56914e9e85147ba7df8c35d9806e664","modified":1541757000580},{"_id":"public/images/cc-by-nc-sa.svg","hash":"716c8de2e05cf9bf7c6650856104a8fe5d2d5443","modified":1541757000580},{"_id":"public/images/cc-by-nc.svg","hash":"0d183dfe21e7b8f037c1572821386e309f147c50","modified":1541757000580},{"_id":"public/images/cc-by-nd.svg","hash":"3c57ccdb3762c8d6eb2669a65bbbc18c7bbd46a7","modified":1541757000580},{"_id":"public/images/cc-by-sa.svg","hash":"acb7a5ffef273b46e9353f869608ed13eb2825fe","modified":1541757000580},{"_id":"public/images/cc-by.svg","hash":"c72feca504a517f6f5aaade0205a0c1b71f16c5a","modified":1541757000580},{"_id":"public/images/cc-zero.svg","hash":"ae0a67df89e2c066f6ac836174224373af114f09","modified":1541757000580},{"_id":"public/images/favicon-16x16-next.png","hash":"5ee510e58b7b9e062a22da28ce1eb35a2f381021","modified":1541757000580},{"_id":"public/images/favicon-32x32-next.png","hash":"f88e49404e4c2a326e51ae65ea5b2375b5d5fde8","modified":1541757000580},{"_id":"public/images/logo.svg","hash":"d02fedf124aa26d4def2631bbccafa053653abd6","modified":1541757000580},{"_id":"public/images/quote-l.svg","hash":"48136591a60f3dc722d8f00b66e16de2aec3802f","modified":1541757000581},{"_id":"public/images/quote-r.svg","hash":"dc3f40e3409dd502478a8c6bb41c68d50bd71ca6","modified":1541757000581},{"_id":"public/images/searchicon.png","hash":"00eed611c73d736ddea861a92d8c91d44aefef5c","modified":1541757000581},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"d3e4776a07bf7aee7779e26892cb4076909840b3","modified":1541757000581},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"3494864c175935e45c6ae5e76c2cbe7c9d53c41a","modified":1541757000581},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"0183383be7d6a44a90af8666c3ceecab70c9a8a2","modified":1541757000581},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"2f3e392bd9ad92a3dd2a60d1968124f7dfc26e16","modified":1541757000581},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"048e85f7dbba1d88a4acb102159355ac0fa7414e","modified":1541757000581},{"_id":"public/atom.xml","hash":"7b10041cf40112c0a5ffa9bd12580ce69c2dcfbb","modified":1541757000581},{"_id":"public/search.xml","hash":"a31684e0129a32089f2d77ebc574fcd5beea64f6","modified":1541757000581},{"_id":"public/post-sitemap.xml","hash":"1e04c3e3a0e37ca0207232f92e0dc8c1ee818710","modified":1541757000582},{"_id":"public/page-sitemap.xml","hash":"09dbaea1840d2d5247303e15f51ac6d034a5ec40","modified":1541757000582},{"_id":"public/category-sitemap.xml","hash":"1d12fa9c3b9b75316299cf1fa6208d32a3c36682","modified":1541757000582},{"_id":"public/tag-sitemap.xml","hash":"85ee96a77716c81a1c7bac739f3ac885905ab1a1","modified":1541757000582},{"_id":"public/sitemap.xsl","hash":"4321fa69dc1b8811d32b7a1478e5603e038cea1a","modified":1541757000582},{"_id":"public/sitemap.xml","hash":"f9ab90b0b0ff266bd11d6ed38fbae71776dce1d2","modified":1541757000582},{"_id":"public/404.html","hash":"6770f4be77cd9b5a748e231f2a77276be2034391","modified":1541757000601},{"_id":"public/50x.html","hash":"55faa0ee581bff521da1c339dc1df288b0e9bb6c","modified":1541757000601},{"_id":"public/tools.html","hash":"50cb52d592868d9a80594e63035236191c756024","modified":1541757000601},{"_id":"public/about/index.html","hash":"3025d48dd15ca693809d017be79499eef4f5a29e","modified":1541757000601},{"_id":"public/categories/index.html","hash":"c19ddc56f16d4284f37fad6b45d7806eb5a48a1d","modified":1541757000601},{"_id":"public/project/index.html","hash":"53eddbbdbfee780ba84adf97ae673291315cf895","modified":1541757000601},{"_id":"public/tags/index.html","hash":"da4893c2ea8a8615fe62e839fa437b557e441506","modified":1541757000601},{"_id":"public/ming/93aa77f.html","hash":"557fe1d3d57ff2904501b4e534fe959f1e1e474b","modified":1541757000601},{"_id":"public/ming/fd3f4f09.html","hash":"4db81ddc240a73dddef502bfd1295724dc5ebf9a","modified":1541757000601},{"_id":"public/ming/35715976.html","hash":"44e3ddb4be46c786f70ea40e21b1d81605f54683","modified":1541757000601},{"_id":"public/ming/9e17b242.html","hash":"eb1b3786b02a3141cbdd5cc776703bb06953f959","modified":1541757000602},{"_id":"public/ming/1f5f60e8.html","hash":"7cc25986021b9d4b163b98c5863c6411e172c3b2","modified":1541757000602},{"_id":"public/ming/d7a6c3c1.html","hash":"31c171a8e8f97456b81bc5e7f3815f174e6eea5f","modified":1541757000602},{"_id":"public/ming/885dd8c4.html","hash":"ba35240e8c90e7e9a6c352890d172b290085909a","modified":1541757000602},{"_id":"public/ming/d0a7cd2b.html","hash":"9ddb1b7d98d3f66f4994e352eb3b3fdc4b1f8610","modified":1541757000602},{"_id":"public/ming/a44739e3.html","hash":"7a7e99733e8d5c67bfb555b03dc91d04ab3867bc","modified":1541757000602},{"_id":"public/ming/17f39e95.html","hash":"0d21a0f9d2b00a6f9903bfa18faeb0b0ea5b1b0c","modified":1541757000602},{"_id":"public/ming/fd97bf37.html","hash":"e7c0874e43b3ed560a0243cc267df61fa8cce614","modified":1541757000602},{"_id":"public/ming/7383a41.html","hash":"030c05982930d3bbd1894acd2a6c210c36bb9596","modified":1541757000602},{"_id":"public/ming/a29d9e52.html","hash":"7ac6fdb22226b5f7be0f6f884a56ed317d9fb7e8","modified":1541757000602},{"_id":"public/ming/c66acd17.html","hash":"70fade81c0afbf869964c1aeebfe68fd8a6e6fac","modified":1541757000603},{"_id":"public/ming/9c26946f.html","hash":"38663935a2290b427c212b98b63c4250c28333ca","modified":1541757000603},{"_id":"public/ming/68597cc5.html","hash":"4bfd00483c241826920fc5adda6ddc07cbf76d59","modified":1541757000603},{"_id":"public/ming/8dcd7b21.html","hash":"861d2ebd7448522181f7c0929bd61a181b864e34","modified":1541757000603},{"_id":"public/ming/8486f105.html","hash":"3b7b722e01c1281a6935de7272388a9212c0beaa","modified":1541757000603},{"_id":"public/ming/b83d1b10.html","hash":"f879de26432e8078f56557313debaea0aa03430d","modified":1541757000603},{"_id":"public/ming/47a3a555.html","hash":"140333fbd2f92f8f0d9867981e95f9388e1f1b33","modified":1541757000603},{"_id":"public/ming/fbab8e0.html","hash":"5f6d388b10e3d7c698be09abc214a169341e6c34","modified":1541757000603},{"_id":"public/ming/3174607.html","hash":"186e7236680982fd29d59b8f54238b96ffbc3d40","modified":1541757000603},{"_id":"public/ming/597b09c9.html","hash":"c90d3dbcf40fe72a12bb4271fabb5494a169305f","modified":1541757000603},{"_id":"public/ming/e855d436.html","hash":"438b94db2a1d49ef20f69d75998f5fe23aedf9bb","modified":1541757000603},{"_id":"public/ming/aef2102a.html","hash":"d0133ad88bd60271c5a51bb76cdcbf3606b06b87","modified":1541757000604},{"_id":"public/ming/d8147fe2.html","hash":"a941e925eef017b6e5bf36010eae7e6e1d3165cf","modified":1541757000604},{"_id":"public/ming/b52bf00b.html","hash":"aa7d45b8723148b78e8222d1672a86f7c0ef7490","modified":1541757000604},{"_id":"public/ming/7ced3fa5.html","hash":"576784eff1c632a8601e91862f1037f11909a106","modified":1541757000604},{"_id":"public/ming/c013ae57.html","hash":"09492d97cf639cc3a32c73b21ffd8d6071cd2c44","modified":1541757000604},{"_id":"public/ming/ba1e0f81.html","hash":"525d68c52a2eb44717e15f262fbccde3bef67109","modified":1541757000604},{"_id":"public/ming/5e5f86c0.html","hash":"e687f790a2a3e4558815fa802c98f74c1ce97524","modified":1541757000604},{"_id":"public/ming/4732d3fc.html","hash":"9a62768883e168d2b2f1f3f6e7249b1b294e57b8","modified":1541757000605},{"_id":"public/ming/3c3d59e1.html","hash":"e6a82bf9006cff6980682ff3ccc4229cf4a8c2f9","modified":1541757000605},{"_id":"public/ming/73f341d0.html","hash":"b9c02546b3304dc601c9a59f7130bd0e67705209","modified":1541757000605},{"_id":"public/ming/50d1ed2b.html","hash":"675076fcde5c0e7d0e4f4f6dff199ccc790f5676","modified":1541757000605},{"_id":"public/ming/1a1c1aa1.html","hash":"ad1b1d4466bb515d7fc048336b33dcff2b4c54fb","modified":1541757000605},{"_id":"public/ming/52ab603.html","hash":"538f8d72e2ff3e493456a6c42d0e0edc377d5827","modified":1541757000605},{"_id":"public/ming/dbafeaad.html","hash":"1e5830fa7add2105521c11f1e115a24077952abb","modified":1541757000605},{"_id":"public/ming/4c352ff0.html","hash":"dfa036d6348d0975995a930be68acd6742bea6fc","modified":1541757000605},{"_id":"public/ming/878fb6fb.html","hash":"7aded476c3e95c34c01d6cb287a7d4a2ceb95486","modified":1541757000605},{"_id":"public/ming/19f1b366.html","hash":"f6f645d8320b8ca24239b88fdd5fe7c769d360c2","modified":1541757000605},{"_id":"public/ming/d7cd3a26.html","hash":"0db2d1c521f7a187c3fe4f6cf75d6d492dedcd9d","modified":1541757000605},{"_id":"public/ming/bb781540.html","hash":"993ee001c0bad07744ad40464888b78670302b27","modified":1541757000605},{"_id":"public/ming/869ed45a.html","hash":"693515c7506734963b769564d67f582a28f5c1e3","modified":1541757000606},{"_id":"public/ming/ba648708.html","hash":"def6cbc98555350ee06626a17c016085dc3459f2","modified":1541757000606},{"_id":"public/ming/cdea8691.html","hash":"883dd97388aba4257d074f23e5cb7759d1094f44","modified":1541757000606},{"_id":"public/ming/de4fca49.html","hash":"c83b65e7c0c540a498a5af25801cf9d721386b7e","modified":1541757000607},{"_id":"public/ming/d9ddd520.html","hash":"b14401e3fb4ad0c6bf93eb090fb537861dc9a0a2","modified":1541757000607},{"_id":"public/ming/1d0e6366.html","hash":"d4f07ef0e3f7391c658648823e889eb8956a9ceb","modified":1541757000607},{"_id":"public/ming/64575eaf.html","hash":"2bf738a5396de591d5ba442467bbed0a3ba91f08","modified":1541757000607},{"_id":"public/ming/241784d.html","hash":"44403555eb6c472f059f606e0311677a198580e0","modified":1541757000607},{"_id":"public/ming/68619b43.html","hash":"db5f07e26d786c5fe81778cef6cd8e72644ba9d5","modified":1541757000607},{"_id":"public/ming/814d8f0a.html","hash":"15628be8141f8501e2582d639fd77bcc836b99a1","modified":1541757000607},{"_id":"public/ming/a365393a.html","hash":"29912da71fba2db3f8ed33f83ba7105f2eda0fc3","modified":1541757000607},{"_id":"public/ming/3022b6f9.html","hash":"ae6e4b294b02d66143341d476931fa25c4a5b6bd","modified":1541757000607},{"_id":"public/ming/478f654a.html","hash":"c5f1322a6ee7d28078d3fc1cbffa4abbd4a7cbc9","modified":1541757000608},{"_id":"public/ming/5bcc860.html","hash":"2e116fd5c599693e3a1c12876a112f7c63c22fd8","modified":1541757000608},{"_id":"public/ming/5f628b10.html","hash":"e78db236423d1db8e1ae2e3834984385295dd8fc","modified":1541757000608},{"_id":"public/ming/3e07ee0e.html","hash":"4a6ab96fd79e126e211abf2858e9e8fd4dcbf795","modified":1541757000608},{"_id":"public/ming/d3259856.html","hash":"c9b5a94f5e90f25e6c05209962580f894b585999","modified":1541757000608},{"_id":"public/ming/a451f549.html","hash":"8e9fa05bff7fed6b6c7cfc13f00a7ca0690a270f","modified":1541757000608},{"_id":"public/ming/c67df015.html","hash":"1270517f96a3ab68454e6c336a9fc2113dd07ba5","modified":1541757000608},{"_id":"public/ming/d61f2d28.html","hash":"3f85b849976cd72d4eee70fde825324dd94549cb","modified":1541757000608},{"_id":"public/ming/d7957e83.html","hash":"e39053cff63504fba021374595553ca1b77868dd","modified":1541757000608},{"_id":"public/ming/605805fa.html","hash":"a0cf1312efb67a82c1b65854db985a0e3c9795ed","modified":1541757000608},{"_id":"public/ming/e8ebc393.html","hash":"a2b0149457479f2cd3cd81569b6583f5c5e8b4a0","modified":1541757000608},{"_id":"public/ming/5e3a8086.html","hash":"615d78c5592442dd2bb7033c6e2852f4c0db273f","modified":1541757000608},{"_id":"public/ming/5dd0b5a6.html","hash":"2e0dc72364d91ed330e12badd92cd0e12094de55","modified":1541757000608},{"_id":"public/ming/958a34fe.html","hash":"a397e01572966ab53d94f16e43a547f3af2b702c","modified":1541757000609},{"_id":"public/ming/54c825bb.html","hash":"04d5ca132556475e36c9f30bc9cf7a488b6d66b6","modified":1541757000609},{"_id":"public/ming/5e68a67b.html","hash":"a7d12f80d77ecdacf2f8ac80eaccb57acfe93717","modified":1541757000609},{"_id":"public/ming/5e1b0665.html","hash":"36e4c8ec87eb9a005515d90d0daf79fe660f7f01","modified":1541757000609},{"_id":"public/ming/38475811.html","hash":"de5d3924ce5bc78093383735dea0caf9bd587d78","modified":1541757000609},{"_id":"public/ming/ae7599d.html","hash":"990687d16eb1660272740f0d67ffd68957f5a586","modified":1541757000609},{"_id":"public/ming/18dacc63.html","hash":"f2771ce7ddb46f4bc27e28d27dc2b192989f9ab2","modified":1541757000609},{"_id":"public/ming/5a9f0461.html","hash":"e2508b061c1f8c5d63b2037da4a63d2f583558d9","modified":1541757000609},{"_id":"public/ming/80d0f7f9.html","hash":"9644492976c79bac53767902776c03bdba0e971c","modified":1541757000609},{"_id":"public/ming/ca9f8bd1.html","hash":"8fced859235c71172044c17943086d2b93bfd4f4","modified":1541757000609},{"_id":"public/ming/b5989355.html","hash":"566c438b6aec0e6ec2acfeedf2de028bcde91d86","modified":1541757000610},{"_id":"public/ming/6cd7a67e.html","hash":"b45fb75d4b366bfa442ae3b3812fd565b23f7f9b","modified":1541757000610},{"_id":"public/ming/67fc4778.html","hash":"ba85a297e12ce42222c4c460769c57bd2fc48e8d","modified":1541757000610},{"_id":"public/ming/b2f1ab54.html","hash":"8a2cd63791f6f0ed773a6cc682cbf5ea81ca3d14","modified":1541757000610},{"_id":"public/ming/1be97d35.html","hash":"7349d7f0435659f699a54f6cddb6c44f7ff34ef9","modified":1541757000610},{"_id":"public/ming/5c7769e6.html","hash":"c2944ff4519afc0fc1a71f223f96fc7bed25c924","modified":1541757000610},{"_id":"public/ming/5624ab1d.html","hash":"d9103014147a7aac232d851a180739ff80b8cde3","modified":1541757000611},{"_id":"public/ming/409db0cf.html","hash":"7020093f62cc1e9a2b56b38f61b947bca51285e3","modified":1541757000611},{"_id":"public/ming/3ff0ec3c.html","hash":"3ac9df681216df4a3cc67689f508ebd3b1543b2f","modified":1541757000611},{"_id":"public/ming/dd01bc67.html","hash":"0c6d7037e1067cad4dce4fd5fd78b414f5de0c29","modified":1541757000611},{"_id":"public/ming/b7d64853.html","hash":"406b4854b220369f588749fc26c40480789a1313","modified":1541757000611},{"_id":"public/ming/4c838b91.html","hash":"8ceb673982a3009fff9b3d98a750c43c39287716","modified":1541757000611},{"_id":"public/ming/52f5e4f0.html","hash":"96ba4f4b4d883bf79bbe72602961e32aad8ad001","modified":1541757000611},{"_id":"public/ming/8634a6bb.html","hash":"297882b409ed6fd2da014fa756885954dff637f7","modified":1541757000611},{"_id":"public/ming/54bd928f.html","hash":"3378c700a403af6ecc85b93997cbe82ac34394a5","modified":1541757000611},{"_id":"public/ming/12183fd8.html","hash":"73f9ea35230b94b17d379a405d8c11b5aba9df7d","modified":1541757000611},{"_id":"public/ming/3a488ac5.html","hash":"68594803fc0c90ef2e87de776801fafc29c0fbff","modified":1541757000611},{"_id":"public/archives/index.html","hash":"79fc938816cf7fc837c1299ec58b7346488ff7eb","modified":1541757000611},{"_id":"public/archives/page/2/index.html","hash":"2678eae998e98be929152a34964aaf48720e3a94","modified":1541757000612},{"_id":"public/archives/page/3/index.html","hash":"ab92f6b461797db8a9a63ebf9df69c20672dacec","modified":1541757000617},{"_id":"public/archives/page/4/index.html","hash":"1e62a60d13e4d186881b5e7dfb0433b306439aab","modified":1541757000617},{"_id":"public/archives/page/5/index.html","hash":"09507cad1174abee533dbb0aaae1c4dfe1b32a79","modified":1541757000617},{"_id":"public/archives/page/6/index.html","hash":"49137247231c6eb23a03a256f44f86331b0afe02","modified":1541757000617},{"_id":"public/archives/page/7/index.html","hash":"1b852f5d8942d2af3fa08feceb1912bed42502f8","modified":1541757000618},{"_id":"public/archives/page/8/index.html","hash":"2206657689d56e47c5671c4747d3fb431a2b3162","modified":1541757000618},{"_id":"public/archives/page/9/index.html","hash":"cfc06dab365a3e8c8abbe887ef6eb8db375f2dc5","modified":1541757000618},{"_id":"public/archives/page/10/index.html","hash":"2a9538d191318b2618e8a90b950324cbbdbd747e","modified":1541757000618},{"_id":"public/archives/2017/index.html","hash":"9eaa5df3f71d49ed24bb53fc9f4f5ed4b39c015b","modified":1541757000618},{"_id":"public/archives/2017/page/2/index.html","hash":"6c154a44ee859f92f3f533a9050e9ba1f03c47d9","modified":1541757000618},{"_id":"public/archives/2017/page/3/index.html","hash":"9e286b851b8446dc6d47d4ed69c54d2845eb1052","modified":1541757000618},{"_id":"public/archives/2017/page/4/index.html","hash":"f1dd81db153192364a3839debea7537e5d5928d1","modified":1541757000618},{"_id":"public/archives/2017/page/5/index.html","hash":"6549119315f5a5f67fc05fa94e4640fd8a94afe9","modified":1541757000618},{"_id":"public/archives/2017/page/6/index.html","hash":"b291a1bbd068f5647e4a389156df54adb960a647","modified":1541757000618},{"_id":"public/archives/2017/page/7/index.html","hash":"391979c4ef6416c9c7f90d8a15cef1747f75ccf7","modified":1541757000618},{"_id":"public/archives/2017/10/index.html","hash":"e54095d37dc92dc2519fae8742d5ee76746a1eee","modified":1541757000618},{"_id":"public/archives/2017/11/index.html","hash":"f2305214060102e7e0f4db247f00a8fdaf2476d5","modified":1541757000618},{"_id":"public/archives/2017/11/page/2/index.html","hash":"f3510fa81988463b3a5e7a1851c09ee09087e9b1","modified":1541757000618},{"_id":"public/archives/2017/11/page/3/index.html","hash":"f9e70ecda43311691cc096ae74ef1b7ef1031ab7","modified":1541757000619},{"_id":"public/archives/2017/11/page/4/index.html","hash":"39429daf1608655f460979d3815934872a3518be","modified":1541757000619},{"_id":"public/archives/2017/11/page/5/index.html","hash":"14dc72a577ec080ac10d176c1750daee78b31eeb","modified":1541757000619},{"_id":"public/archives/2017/11/page/6/index.html","hash":"b84e88e52b8ae5647b71f2eb4ef6af1395630ef7","modified":1541757000619},{"_id":"public/archives/2017/11/page/7/index.html","hash":"db6c5962b149d32b5167c7f8523cea429acbef40","modified":1541757000619},{"_id":"public/archives/2018/index.html","hash":"1b09cf4d903073eefe3d997f06825bf233f2f05a","modified":1541757000619},{"_id":"public/archives/2018/page/2/index.html","hash":"dc4191e8d7f25eeb4bfe32dddb78fa1e75b01e4d","modified":1541757000619},{"_id":"public/archives/2018/page/3/index.html","hash":"9c9b6003b541680781a2750b8af4738fae69225b","modified":1541757000619},{"_id":"public/archives/2018/page/4/index.html","hash":"d7ea3a8b7c778a1c0377af4d6c8d6bd5c079f80b","modified":1541757000619},{"_id":"public/archives/2018/02/index.html","hash":"0333db1f830ddb2468f15c84ff3ff578a599887e","modified":1541757000619},{"_id":"public/archives/2018/03/index.html","hash":"f23161b2d8c0f734a13e60b76613ee08f7f03be6","modified":1541757000620},{"_id":"public/archives/2018/05/index.html","hash":"7c288280fda8f617a870123df676cb3c423d4ffd","modified":1541757000620},{"_id":"public/archives/2018/06/index.html","hash":"339b7068b5af185a3617e36814fe459c77cc6f55","modified":1541757000620},{"_id":"public/archives/2018/07/index.html","hash":"86073fa6b96b21eb364de9369dbf05eb4452c9b5","modified":1541757000620},{"_id":"public/archives/2018/08/index.html","hash":"4ad427283c79424d3fbc068895ddfad577028058","modified":1541757000620},{"_id":"public/archives/2018/09/index.html","hash":"7ef5e6d4d1f756055c66b22e41f469d764fe94e1","modified":1541757000620},{"_id":"public/archives/2018/11/index.html","hash":"9e1426335326a5ae5209a8e676fd9a340d06db4f","modified":1541757000620},{"_id":"public/categories/笔记/index.html","hash":"559984d4e00c4777806dd0ebaf4ad3b70e1347ef","modified":1541757000620},{"_id":"public/categories/笔记/page/2/index.html","hash":"9147177ee4a38d4cc2923b7ba610b1a6ec391e2c","modified":1541757000620},{"_id":"public/categories/笔记/page/3/index.html","hash":"d388309b0140bf2f6a998ed1507c789c69e6e5a9","modified":1541757000621},{"_id":"public/categories/笔记/page/4/index.html","hash":"43289dc21af7fd1f4531c0f6bcb61dbb26c22908","modified":1541757000621},{"_id":"public/categories/笔记/page/5/index.html","hash":"e544d64932526120bc1423e71d2d7d358e7ace65","modified":1541757000621},{"_id":"public/categories/笔记/page/6/index.html","hash":"f825efd27c34631f3403bb0043f8a9a6c22830fc","modified":1541757000621},{"_id":"public/categories/笔记/page/7/index.html","hash":"08e8d2c5249b9ce5f0c21dc381e8671c8bae917f","modified":1541757000621},{"_id":"public/categories/骚想法/index.html","hash":"52f7b37c9f2d5567f9c750871b7d43a63c1f4271","modified":1541757000621},{"_id":"public/categories/坑/index.html","hash":"0f6db86f0e1129ab9262730ee03bab041f87bc47","modified":1541757000621},{"_id":"public/categories/实战/index.html","hash":"0aba577eebf9ed476dff61e64765cbe931d13dc4","modified":1541757000621},{"_id":"public/categories/工具/index.html","hash":"90d3fc357e4914bf9aca2c4eb5735321b625e64b","modified":1541757000621},{"_id":"public/categories/docker/index.html","hash":"03b61586638e3c74cc51115adfb2ec4633435521","modified":1541757000621},{"_id":"public/categories/使用/index.html","hash":"5b9b0b4f7d36638ae917645ee291bedb75412a66","modified":1541757000621},{"_id":"public/categories/k8s/index.html","hash":"3e3c00262137785c78406dc179ffdfb524c762b0","modified":1541757000621},{"_id":"public/categories/实例/index.html","hash":"48f5289a0f579399612bde3ef395299a094100df","modified":1541757000622},{"_id":"public/index.html","hash":"961c2a4141ba87f9d88bda0707060c9c56d8073d","modified":1541757000622},{"_id":"public/page/2/index.html","hash":"5289e9bdd74a5e9970b6c6c74467f3400b23d474","modified":1541757000622},{"_id":"public/page/3/index.html","hash":"b9afa6d1d5e14dc1b008d4996cdb52f6affd2a5c","modified":1541757000622},{"_id":"public/page/4/index.html","hash":"968d0ac4e44156d6b60a6ad8dfddb1401f00d16c","modified":1541757000622},{"_id":"public/page/5/index.html","hash":"01096344c33bcfda15cb0dd43e56f1fb40415148","modified":1541757000622},{"_id":"public/page/6/index.html","hash":"13224e104c58b54529d21a5689c355645d1829b9","modified":1541757000622},{"_id":"public/page/7/index.html","hash":"a62a29dbff8f35e9f6c064ac6437d4a89061bf58","modified":1541757000622},{"_id":"public/page/8/index.html","hash":"32c06bf1ad10ae5bf8f8276f895a52ee02343bb9","modified":1541757000622},{"_id":"public/page/9/index.html","hash":"b37bbdec7dff773c37007225bf4a25ade2979fb2","modified":1541757000622},{"_id":"public/page/10/index.html","hash":"99856c2620c588908a13f2d12ba91936875ed0d5","modified":1541757000622},{"_id":"public/tags/linux/index.html","hash":"ea15b209dd33be68b8f99d73e49aba02c46a4758","modified":1541757000622},{"_id":"public/tags/linux/page/2/index.html","hash":"d6e93e44ee80fa17ad1c7fbbb2966ec293a52295","modified":1541757000623},{"_id":"public/tags/java/index.html","hash":"fd1c3b56e4cde7bad2174b5498c6b0e23200b2a0","modified":1541757000623},{"_id":"public/tags/java/page/2/index.html","hash":"06a2b68f75aa7fca65b6979ab18ad56792313c5b","modified":1541757000623},{"_id":"public/tags/jvm/index.html","hash":"085629754df97a5f03257e6ee7a2da57ae3b3a3c","modified":1541757000623},{"_id":"public/tags/guava/index.html","hash":"e54d96b1dce93b4f41405826b2a4b45482f85544","modified":1541757000623},{"_id":"public/tags/tools/index.html","hash":"d0b8993300cf33ddb46b3ca2382844c6c56ed8e2","modified":1541757000623},{"_id":"public/tags/java基础/index.html","hash":"1ea8b748a10f36cbcd2f7d6bf8af3e680a544391","modified":1541757000623},{"_id":"public/tags/web-service/index.html","hash":"b934d2d9cdca12fc73ccbd2e8e4fcc34357fde7b","modified":1541757000623},{"_id":"public/tags/xml/index.html","hash":"c057ed47e888e7af861c4170359f6f27d8d1306b","modified":1541757000625},{"_id":"public/tags/json/index.html","hash":"fe0f6970dd873356ee1bf4f081aeb30de32ca359","modified":1541757000625},{"_id":"public/tags/jsp/index.html","hash":"79f71015f8359d8f4f497b6e9ddc8669311f8a94","modified":1541757000625},{"_id":"public/tags/dockerfile/index.html","hash":"951bf544d38db3672876b70847a3572f2e2d9fb6","modified":1541757000625},{"_id":"public/tags/docker/index.html","hash":"a323594fef6a4e6abbae8147564385a3be84091a","modified":1541757000627},{"_id":"public/tags/docker/page/2/index.html","hash":"ae77af7158d1bec89c66f53b3c2d0da0d140fcd2","modified":1541757000627},{"_id":"public/tags/日志/index.html","hash":"bd355db63721e2d938e3bbd11f9933966e60209e","modified":1541757000627},{"_id":"public/tags/es/index.html","hash":"3b43ce8a971028e1f2c7da8be02f49f5cdc91f5b","modified":1541757000627},{"_id":"public/tags/kibana/index.html","hash":"caf65571162c17d749e2b2508aa4a379342f195a","modified":1541757000627},{"_id":"public/tags/filebeat/index.html","hash":"23781e15bf355a8880cdd497cf953d6352444e1b","modified":1541757000628},{"_id":"public/tags/shell/index.html","hash":"84fc32b75e604b5bd3b2907eb87f082aea2485cd","modified":1541757000628},{"_id":"public/tags/srping-cloud/index.html","hash":"237f6b7bc5afac40e79d5b077442c4abe38db40b","modified":1541757000628},{"_id":"public/tags/eureka/index.html","hash":"7ac11f630150403a9bdadec7c93698049f2a2e8f","modified":1541757000628},{"_id":"public/tags/swarm/index.html","hash":"b976d16f6354dc7a99235d5d822adf9562ab5ff0","modified":1541757000628},{"_id":"public/tags/spring/index.html","hash":"410d85326f4cb80cc421a01a5ef8e5f56708afce","modified":1541757000628},{"_id":"public/tags/spring/page/2/index.html","hash":"21a46fa369943d543d9b14224cbf2d771eb405d7","modified":1541757000628},{"_id":"public/tags/spring-boot/index.html","hash":"d93a2623b643b7fe30f5a5edc1505841b7aed84e","modified":1541757000628},{"_id":"public/tags/定时器/index.html","hash":"de3c0d344cd4f190b14dab37e296becfb3198d99","modified":1541757000628},{"_id":"public/tags/git-lfs/index.html","hash":"0bff82bb64483342fde85d2dd02e854f0f17d20e","modified":1541757000628},{"_id":"public/tags/github/index.html","hash":"83a5d7b6c97f9125ce33239aff12d526e4bb0508","modified":1541757000628},{"_id":"public/tags/代码质量/index.html","hash":"436dd6f9dbc724529aff26010c0b5f0152c52bb3","modified":1541757000628},{"_id":"public/tags/持续集成/index.html","hash":"f936b1513c9c5711c045512bdf9d9c931be18d56","modified":1541757000628},{"_id":"public/tags/spring-cloud-feign-http/index.html","hash":"a5f440596723dc329e9f5790e860c920b18f60fc","modified":1541757000628},{"_id":"public/tags/git/index.html","hash":"4cfaca637ebab28fd5fbac05cb1d038dde9eee77","modified":1541757000629},{"_id":"public/tags/k8s/index.html","hash":"c54b6b73e84c86038916574d8c886fc8022d0de5","modified":1541757000629},{"_id":"public/tags/日志采集/index.html","hash":"6022699b70c7e0e63be47b7a77548fb203891699","modified":1541757000629},{"_id":"public/tags/maven/index.html","hash":"b4e00aaeb0bfda9ee7a626d9e54db026bf87f1bd","modified":1541757000629},{"_id":"public/tags/tomcat/index.html","hash":"b3b094aa534112b334f9aace8585d9c6ffa04a90","modified":1541757000629},{"_id":"public/tags/rancher/index.html","hash":"de6c5e2c0d305b65c2301c151e48828a1bfe4ddb","modified":1541757000629},{"_id":"public/tags/mvc/index.html","hash":"1af5ad4227af7183ca18363302ccbeacec7cbe81","modified":1541757000629},{"_id":"public/tags/实战/index.html","hash":"67157ff3a96bc765571309fae218c977bc1584d2","modified":1541757000629},{"_id":"public/tags/messageConverter/index.html","hash":"31b1debde0f9dd2e1177c3d7eddad337057c4cb3","modified":1541757000629},{"_id":"public/tags/windows/index.html","hash":"9289552376d7ebeae54caf70586dc2ebb69e25db","modified":1541757000629},{"_id":"public/tags/vbox/index.html","hash":"f42df22a09302d5031d0664e45f728754ff64e21","modified":1541757000629},{"_id":"public/tags/yml、yaml/index.html","hash":"94f2f47b15ee523c66e8c207cd89afd60e4c56d9","modified":1541757000629},{"_id":"public/tags/乱码/index.html","hash":"2dfb5a311726713ff5995b4d1fa7f9f3b12989de","modified":1541757000629},{"_id":"public/tags/安全/index.html","hash":"9369d8c9c51d92fe5200d7e11f737c62d8932d2a","modified":1541757000629},{"_id":"public/tags/js/index.html","hash":"9fca31b2a6990ffe74bd2efea7a0e4a016718b47","modified":1541757000630},{"_id":"public/tags/服务端推送/index.html","hash":"bba04a0ae5efa9ce727d53a2e2ae2634c42fdec9","modified":1541757000630},{"_id":"public/tags/跨域/index.html","hash":"bf328c690d88615edd07a5a3683a2e2297ebe04e","modified":1541757000630},{"_id":"public/tags/设计模式/index.html","hash":"0aab80ee67b0b94fefcf30fe830e89bc3a94a2ec","modified":1541757000630},{"_id":"public/tags/jdk8/index.html","hash":"ee482a793a485699c3bcc930781420c02e3680bc","modified":1541757000630},{"_id":"public/tags/time/index.html","hash":"4b96c1a1ca6ecee1f44e49f97aee02f732da49cc","modified":1541757000630},{"_id":"public/tags/stream计算/index.html","hash":"3471d31a0966425d0907ef411695312047603485","modified":1541757000630},{"_id":"public/tags/cache/index.html","hash":"717f2864061bca33fb301fe33768bd132a43ff7c","modified":1541757000630},{"_id":"public/tags/redis/index.html","hash":"e088d4a1a6c699cce010efde5b8e73bb6e24a233","modified":1541757000630},{"_id":"public/tags/实用/index.html","hash":"78839e03343aac6bc9937b8573b3c71b53c54c6f","modified":1541757000630},{"_id":"public/tags/spring-cloud/index.html","hash":"2a451593076447b707812da8d46eae485c833fb6","modified":1541757000630},{"_id":"public/tags/分布式/index.html","hash":"be39ce2e1cc6fa4605f875f2680f428e13175ca0","modified":1541757000630},{"_id":"public/tags/quartz/index.html","hash":"a95937c70727362df0e428b8109c8b87cd1251c8","modified":1541757000631},{"_id":"public/tags/log4j2-socket-elk/index.html","hash":"be971eed4f287e3cf6a8892174a9cdfbfc87ee08","modified":1541757000631},{"_id":"public/tags/netty/index.html","hash":"07c91aafb2a65f6d10f5ac1b2334c73dc2593d30","modified":1541757000631},{"_id":"public/tags/传输协议/index.html","hash":"718fda6e21c717ee3b5cf1e11740cb4bbbc89bcd","modified":1541757000631},{"_id":"public/tags/cdn/index.html","hash":"143b1d13e91c4c69904d775154caa46fe350383c","modified":1541757000631},{"_id":"public/tags/oss/index.html","hash":"1f3315448965ccd75e8e5d70e2ff21d08f273ba6","modified":1541757000631},{"_id":"public/tags/http-https/index.html","hash":"498f2801e1113f38d2a8f8e8e590b39f21a0429c","modified":1541757000631},{"_id":"public/tags/阿里云/index.html","hash":"4a040b4f0d6b169483709f88df767889b628177e","modified":1541757000631},{"_id":"public/tags/jenkins/index.html","hash":"b7854f299fdd3ff989dbf552b81e2828b85c3707","modified":1541757000631},{"_id":"public/tags/groovy/index.html","hash":"2b128d263d26e4e2c5d64de8e462e8cd781a0f9b","modified":1541757000631},{"_id":"public/CNAME","hash":"39eb61b069515d58e1797472f44f0f975c49083f","modified":1541757000647},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1541757000647},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1541757000647},{"_id":"public/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1541757000647},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1541757000647},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1541757000648},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1541757000648},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1541757000648},{"_id":"public/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1541757000648},{"_id":"public/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1541757000648},{"_id":"public/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1541757000648},{"_id":"public/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1541757000648},{"_id":"public/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1541757000648},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1541757000648},{"_id":"public/css/main.css","hash":"14bec30df44b872086e515e20da1ec191b4167af","modified":1541757001594},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1541757001869},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1541757001869},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1541757001914},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1541757002015},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1541757002015},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1541757002016},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1541757002017},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1541757002018},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1541757002018},{"_id":"public/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1541757002018},{"_id":"public/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1541757002018},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1541757002018},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1541757002018},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1541757002018},{"_id":"public/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1541757002018},{"_id":"public/lib/fastclick/README.html","hash":"f95a739318e5af88ab67a285d6227b35388fbc7c","modified":1541757002018},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"d37e955270f95646ae5c3fe0e94703adc49c0266","modified":1541757002018},{"_id":"public/lib/jquery_lazyload/README.html","hash":"f51cc3d965bc40018cfbf31db06842826f46aaf5","modified":1541757002018},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1541757002018},{"_id":"public/lib/needsharebutton/needsharebutton.css","hash":"ee1ffc6d2703dd2c591e2f4d4ed55ff82cba64f1","modified":1541757002018},{"_id":"public/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1541757002018},{"_id":"public/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1541757002018},{"_id":"public/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1541757002018},{"_id":"public/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1541757002018},{"_id":"public/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1541757002018},{"_id":"public/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1541757002018},{"_id":"public/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1541757002019},{"_id":"public/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1541757002019},{"_id":"public/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1541757002019},{"_id":"public/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1541757002019},{"_id":"public/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1541757002019},{"_id":"public/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1541757002019},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1541757002019},{"_id":"public/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1541757002019},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1541757002019},{"_id":"public/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1541757002019},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"d8725c16f62525c75f61e49c8e8949de2f00efe0","modified":1541757002019},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1541757002019},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"cc3e2694d43f75ea3c808774d411ee7fd55861f3","modified":1541757002019},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1541757002019},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1541757002019},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"38d55280b8b9027774bee8a10cf3b033caa2337d","modified":1541757002019},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1541757002019},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1541757002020},{"_id":"public/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1541757002023},{"_id":"public/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1541757002122},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1541757002122},{"_id":"public/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1541757002123},{"_id":"public/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1541757002123},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1541757002123},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1541757002123},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1541757002123},{"_id":"public/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1541757002130},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1541757002151},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1541757002151},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1541757002152},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1541757002295},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1541757002295},{"_id":"public/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1541757002305},{"_id":"public/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1541757002479},{"_id":"public/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1541757002479},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1541757002479},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1541757002479},{"_id":"public/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1541757002479},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"f531d8edfb5d3178a7281d5d30d398fb3712d8f9","modified":1541757002479},{"_id":"public/lib/needsharebutton/font-embedded.css","hash":"6fb247aef33b385616e006a3888a0a339dab1581","modified":1541757002483},{"_id":"public/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1541757002576},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1541757002577},{"_id":"public/lib/Han/dist/han.css","hash":"609d161a976ce96b880f1d53c5932a11e6e82860","modified":1541757002578},{"_id":"public/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1541757002687},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1541757002994},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1541757003119},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1541757003127},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1541757003137}],"Category":[{"name":"笔记","_id":"cjo9uatpp0007mwczjld814n3"},{"name":"骚想法","_id":"cjo9uatxl001hmwczekd18wm5"},{"name":"坑","_id":"cjo9uatxq001pmwcz4ctmhtsf"},{"name":"实战","_id":"cjo9uatxv0023mwcze8h00x5g"},{"name":"工具","_id":"cjo9uatze005nmwczf9p9dt77"},{"name":"docker","_id":"cjo9uatzj005ymwcz7b4mndkm"},{"name":"使用","_id":"cjo9uatzq006lmwcznin95r31"},{"name":"k8s","_id":"cjo9uatzt006umwczhn8q9eiq"},{"name":"实例","_id":"cjo9uau3100bvmwcz39ri4scp"}],"Data":[],"Page":[{"_content":"<!DOCTYPE HTML>\n<html>\n<head>\n    <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n    <meta name=\"robots\" content=\"all\" />\n    <meta name=\"robots\" content=\"index,follow\"/>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"https://qzone.qq.com/gy/404/style/404style.css\">\n</head>\n<body>\n<script type=\"text/plain\" src=\"http://www.qq.com/404/search_children.js\"\n        charset=\"utf-8\" homePageUrl=\"/\"\n        homePageName=\"回到我的主页\">\n</script>\n<script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script>\n<script src=\"https://qzone.qq.com/gy/404/page.js\" charset=\"utf-8\"></script>\n</body>\n</html>","source":"404.html","raw":"<!DOCTYPE HTML>\n<html>\n<head>\n    <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n    <meta name=\"robots\" content=\"all\" />\n    <meta name=\"robots\" content=\"index,follow\"/>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"https://qzone.qq.com/gy/404/style/404style.css\">\n</head>\n<body>\n<script type=\"text/plain\" src=\"http://www.qq.com/404/search_children.js\"\n        charset=\"utf-8\" homePageUrl=\"/\"\n        homePageName=\"回到我的主页\">\n</script>\n<script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script>\n<script src=\"https://qzone.qq.com/gy/404/page.js\" charset=\"utf-8\"></script>\n</body>\n</html>","date":"2018-11-09T09:43:07.796Z","updated":"2018-08-17T08:10:03.919Z","path":"404.html","title":"","comments":1,"layout":"page","_id":"cjo9uatmw0000mwcz7puonp1p","content":"<!DOCTYPE HTML><html><head><meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"><meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\"><meta name=\"robots\" content=\"all\"><meta name=\"robots\" content=\"index,follow\"><link rel=\"stylesheet\" type=\"text/css\" href=\"https://qzone.qq.com/gy/404/style/404style.css\"></head><body><script type=\"text/plain\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homepageurl=\"/\" homepagename=\"回到我的主页\"></script><script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script><script src=\"https://qzone.qq.com/gy/404/page.js\" charset=\"utf-8\"></script></body></html>","site":{"data":{}},"excerpt":"","more":"<!DOCTYPE HTML><html><head><meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"><meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\"><meta name=\"robots\" content=\"all\"><meta name=\"robots\" content=\"index,follow\"><link rel=\"stylesheet\" type=\"text/css\" href=\"https://qzone.qq.com/gy/404/style/404style.css\"></head><body><script type=\"text/plain\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homepageurl=\"/\" homepagename=\"回到我的主页\"></script><script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script><script src=\"https://qzone.qq.com/gy/404/page.js\" charset=\"utf-8\"></script></body></html>"},{"_content":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>辣鸡</title>\n</head>\n<body>\n<h1>玩蛇皮？？？？？</h1>\n</body>\n</html>","source":"50x.html","raw":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>辣鸡</title>\n</head>\n<body>\n<h1>玩蛇皮？？？？？</h1>\n</body>\n</html>","date":"2018-11-09T09:43:07.796Z","updated":"2018-08-24T01:30:30.506Z","path":"50x.html","title":"","comments":1,"layout":"page","_id":"cjo9uatmz0001mwcz5cmv9lxq","content":"<!DOCTYPE html><html lang=\"en\"><head><meta charset=\"UTF-8\"><title>辣鸡</title></head><body><h1>玩蛇皮？？？？？</h1></body></html>","site":{"data":{}},"excerpt":"","more":"<!DOCTYPE html><html lang=\"en\"><head><meta charset=\"UTF-8\"><title>辣鸡</title></head><body><h1>玩蛇皮？？？？？</h1></body></html>"},{"_content":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>工具</title>\n</head>\n<body>\n\n</body>\n</html>","source":"tools.html","raw":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>工具</title>\n</head>\n<body>\n\n</body>\n</html>","date":"2018-11-09T09:43:07.796Z","updated":"2018-08-17T08:10:03.927Z","path":"tools.html","title":"","comments":1,"layout":"page","_id":"cjo9uatob0002mwczh1r8hhp2","content":"<!DOCTYPE html><html lang=\"en\"><head><meta charset=\"UTF-8\"><title>工具</title></head><body></body></html>","site":{"data":{}},"excerpt":"","more":"<!DOCTYPE html><html lang=\"en\"><head><meta charset=\"UTF-8\"><title>工具</title></head><body></body></html>"},{"title":"About","layout":"about","_content":"\n\n## author: ming \n## mail:181020580001@163.com\n\n\n","source":"about/index.md","raw":"---\ntitle: About\nlayout: about\n---\n\n\n## author: ming \n## mail:181020580001@163.com\n\n\n","date":"2018-11-09T09:43:07.796Z","updated":"2018-08-17T08:10:03.927Z","path":"about/index.html","comments":1,"_id":"cjo9uatpl0004mwcz058ykjv3","content":"<h2 id=\"author-ming\"><a href=\"#author-ming\" class=\"headerlink\" title=\"author: ming\"></a>author: ming</h2><h2 id=\"mail-181020580001-163-com\"><a href=\"#mail-181020580001-163-com\" class=\"headerlink\" title=\"mail:181020580001@163.com\"></a>mail:181020580001@163.com</h2>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"author-ming\"><a href=\"#author-ming\" class=\"headerlink\" title=\"author: ming\"></a>author: ming</h2><h2 id=\"mail-181020580001-163-com\"><a href=\"#mail-181020580001-163-com\" class=\"headerlink\" title=\"mail:181020580001@163.com\"></a>mail:181020580001@163.com</h2>"},{"title":"categories","date":"2018-02-07T02:13:16.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2018-02-07 10:13:16\ntype: \"categories\"\n---\n","updated":"2018-08-17T08:10:03.927Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cjo9uatpo0006mwczyukqbhr6","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Project","layout":"project","_content":"\nproject","source":"project/index.md","raw":"---\ntitle: Project\nlayout: project\n---\n\nproject","date":"2018-11-09T09:43:07.796Z","updated":"2018-08-17T08:10:03.927Z","path":"project/index.html","comments":1,"_id":"cjo9uatps000amwcz1mppeqro","content":"<p>project</p>","site":{"data":{}},"excerpt":"","more":"<p>project</p>"},{"title":"Tags","date":"2018-02-07T02:03:25.000Z","layout":"tags","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: Tags\ndate: 2018-02-07 10:03:25\nlayout: tags\ntype: \"tags\"\n---","updated":"2018-08-17T08:10:03.927Z","path":"tags/index.html","comments":1,"_id":"cjo9uatpt000bmwczddpe7jpv","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"linux-find笔记","comments":1,"abbrlink":"8f467268","date":"2018-09-13T06:31:28.000Z","_content":"#### 前言\nfind 搜索查询linux系统中的文件 \n\n#### 实例\n##### 根据名称搜索\n表达式格式\n```\nfind [path ....] -name [pattern]\n```\n##### 指定搜索的文件类型 \n表达式格式\n```\nfind [path...] -type [type类型枚举] -name [pattern]\n```\ntype类型枚举\n|枚举值|类型名称|\n|:----|:-----|\n|d|文件夹|\n|f|普通文件|\n|l|符号链接|\n|b|块设备|\n|c|字符设备|\n|p|管道文件|\n|s|socket套接字|\n##### 使用正则匹配文件名 查询\n表达式\n```\n#简单模式的正则\nfind [path...] -name [pattern]\n#复杂的正则\nfind [path...] -regex [pattern]\n```\n##### 根据用户用户组查询 \n```\nfind [path...] -user [用户名] -group [用户组名]\n```\n##### 按照权限搜索\n```\nfind [path...] -perm [权限数字组例如 777 ]\n```\n##### -exec使用 \n\n","source":"_drafts/linux-find笔记.md","raw":"---\ntitle: linux-find笔记\ncomments: true\ncategories: 笔记\ntags:\n  - linux\nabbrlink: 8f467268\ndate: 2018-09-13 14:31:28\n---\n#### 前言\nfind 搜索查询linux系统中的文件 \n\n#### 实例\n##### 根据名称搜索\n表达式格式\n```\nfind [path ....] -name [pattern]\n```\n##### 指定搜索的文件类型 \n表达式格式\n```\nfind [path...] -type [type类型枚举] -name [pattern]\n```\ntype类型枚举\n|枚举值|类型名称|\n|:----|:-----|\n|d|文件夹|\n|f|普通文件|\n|l|符号链接|\n|b|块设备|\n|c|字符设备|\n|p|管道文件|\n|s|socket套接字|\n##### 使用正则匹配文件名 查询\n表达式\n```\n#简单模式的正则\nfind [path...] -name [pattern]\n#复杂的正则\nfind [path...] -regex [pattern]\n```\n##### 根据用户用户组查询 \n```\nfind [path...] -user [用户名] -group [用户组名]\n```\n##### 按照权限搜索\n```\nfind [path...] -perm [权限数字组例如 777 ]\n```\n##### -exec使用 \n\n","slug":"linux-find笔记","published":0,"updated":"2018-09-29T01:37:21.720Z","layout":"post","photos":[],"link":"","_id":"cjo9uatpg0003mwczcck5ysjn","content":"<h4 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h4><p>find 搜索查询linux系统中的文件</p><h4 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h4><h5 id=\"根据名称搜索\"><a href=\"#根据名称搜索\" class=\"headerlink\" title=\"根据名称搜索\"></a>根据名称搜索</h5><p>表达式格式<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find [path ....] -name [pattern]</span><br></pre></td></tr></table></figure><p></p>\n<h5 id=\"指定搜索的文件类型\"><a href=\"#指定搜索的文件类型\" class=\"headerlink\" title=\"指定搜索的文件类型\"></a>指定搜索的文件类型</h5><p>表达式格式<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find [path...] -type [type类型枚举] -name [pattern]</span><br></pre></td></tr></table></figure><p></p>\n<p>type类型枚举<br>|枚举值|类型名称|<br>|:—-|:—–|<br>|d|文件夹|<br>|f|普通文件|<br>|l|符号链接|<br>|b|块设备|<br>|c|字符设备|<br>|p|管道文件|<br>|s|socket套接字|</p>\n<h5 id=\"使用正则匹配文件名-查询\"><a href=\"#使用正则匹配文件名-查询\" class=\"headerlink\" title=\"使用正则匹配文件名 查询\"></a>使用正则匹配文件名 查询</h5><p>表达式<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#简单模式的正则</span><br><span class=\"line\">find [path...] -name [pattern]</span><br><span class=\"line\">#复杂的正则</span><br><span class=\"line\">find [path...] -regex [pattern]</span><br></pre></td></tr></table></figure><p></p>\n<h5 id=\"根据用户用户组查询\"><a href=\"#根据用户用户组查询\" class=\"headerlink\" title=\"根据用户用户组查询\"></a>根据用户用户组查询</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find [path...] -user [用户名] -group [用户组名]</span><br></pre></td></tr></table></figure>\n<h5 id=\"按照权限搜索\"><a href=\"#按照权限搜索\" class=\"headerlink\" title=\"按照权限搜索\"></a>按照权限搜索</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find [path...] -perm [权限数字组例如 777 ]</span><br></pre></td></tr></table></figure>\n<h5 id=\"exec使用\"><a href=\"#exec使用\" class=\"headerlink\" title=\"-exec使用\"></a>-exec使用</h5>","site":{"data":{}},"excerpt":"","more":"<h4 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h4><p>find 搜索查询linux系统中的文件</p><h4 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h4><h5 id=\"根据名称搜索\"><a href=\"#根据名称搜索\" class=\"headerlink\" title=\"根据名称搜索\"></a>根据名称搜索</h5><p>表达式格式<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find [path ....] -name [pattern]</span><br></pre></td></tr></table></figure><p></p>\n<h5 id=\"指定搜索的文件类型\"><a href=\"#指定搜索的文件类型\" class=\"headerlink\" title=\"指定搜索的文件类型\"></a>指定搜索的文件类型</h5><p>表达式格式<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find [path...] -type [type类型枚举] -name [pattern]</span><br></pre></td></tr></table></figure><p></p>\n<p>type类型枚举<br>|枚举值|类型名称|<br>|:—-|:—–|<br>|d|文件夹|<br>|f|普通文件|<br>|l|符号链接|<br>|b|块设备|<br>|c|字符设备|<br>|p|管道文件|<br>|s|socket套接字|</p>\n<h5 id=\"使用正则匹配文件名-查询\"><a href=\"#使用正则匹配文件名-查询\" class=\"headerlink\" title=\"使用正则匹配文件名 查询\"></a>使用正则匹配文件名 查询</h5><p>表达式<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#简单模式的正则</span><br><span class=\"line\">find [path...] -name [pattern]</span><br><span class=\"line\">#复杂的正则</span><br><span class=\"line\">find [path...] -regex [pattern]</span><br></pre></td></tr></table></figure><p></p>\n<h5 id=\"根据用户用户组查询\"><a href=\"#根据用户用户组查询\" class=\"headerlink\" title=\"根据用户用户组查询\"></a>根据用户用户组查询</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find [path...] -user [用户名] -group [用户组名]</span><br></pre></td></tr></table></figure>\n<h5 id=\"按照权限搜索\"><a href=\"#按照权限搜索\" class=\"headerlink\" title=\"按照权限搜索\"></a>按照权限搜索</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find [path...] -perm [权限数字组例如 777 ]</span><br></pre></td></tr></table></figure>\n<h5 id=\"exec使用\"><a href=\"#exec使用\" class=\"headerlink\" title=\"-exec使用\"></a>-exec使用</h5>"},{"title":"reactor笔记","comments":1,"abbrlink":"c1740fbf","date":"2018-08-30T06:48:22.000Z","_content":"#### 前言\n现在对于系统的性能要求越来高  传统的spring 相关的功能 都快被vert.x之类的框架给压垮了    \n好在 spring 是个活泛的项目  在最新的版本中 spring 也提供了webflux 这种 响应式的套路 功能 也贴近于最新的需求   \n在java中 响应式编程的类库 第一个想到的肯定是rxjava  但是spring 社区 选择了 reactor 这种没有历史包袱  而且更加简单的方式去实现响应式编程   \nrxjava 用起来 其实也挺不错的 不过用的多的是在原生安卓上使用 服务端很少使用rxjava的    \n现在spring 提供了一种没有历史包袱的新套路 直接使用新套路 毕竟spring的选择值得信赖   \n\n#### 参考资料\nhttps://www.ibm.com/developerworks/cn/java/j-cn-with-reactor-response-encode/index.html \n\n#### Flux 、Mono对象\n* Flux\n表示 0->n个元素的异步序列\n序列有三种不同类型的消息  包含正常元素的消息(onNext())、序列结束的消息(onComplete())、序列出错的消息(onError()) \n\n|函数名|作用|备注|  \n|:----|:---|:--|   \n|just()|指定序列中所有元素 当flux发布所有元素后自动结束||\n|fromArray()|从数据创建flux|相似和作用的函数 从迭代器创建flux:fromIterable()、从stream集合创建flux:fromStream()|\n|empty()|创建没有元素的序列 只发布结束消息的序列||\n|error(Throwable)|创建一个只包含错误消息的序列||\n|never()|创建一个不包含任何消息通知的序列||\n|range(int start,int count)|创建一个从start开始到count个数量的integer对象序列|\n|\n\n\n* Mono\n表示 0或者1个元素的异步序列 \n序列有三种不同类型的消息  包含正常元素的消息(onNext())、序列结束的消息(onComplete())、序列出错的消息(onError()) \n\n\nFlux 和Mono 可以互相转化  \n\n\n\n \n","source":"_drafts/reactor笔记.md","raw":"---\ntitle: reactor笔记\ncomments: true\ncategories: 笔记\ntags:\n  - 反应式编程\n  - java\nabbrlink: c1740fbf\ndate: 2018-08-30 14:48:22\n---\n#### 前言\n现在对于系统的性能要求越来高  传统的spring 相关的功能 都快被vert.x之类的框架给压垮了    \n好在 spring 是个活泛的项目  在最新的版本中 spring 也提供了webflux 这种 响应式的套路 功能 也贴近于最新的需求   \n在java中 响应式编程的类库 第一个想到的肯定是rxjava  但是spring 社区 选择了 reactor 这种没有历史包袱  而且更加简单的方式去实现响应式编程   \nrxjava 用起来 其实也挺不错的 不过用的多的是在原生安卓上使用 服务端很少使用rxjava的    \n现在spring 提供了一种没有历史包袱的新套路 直接使用新套路 毕竟spring的选择值得信赖   \n\n#### 参考资料\nhttps://www.ibm.com/developerworks/cn/java/j-cn-with-reactor-response-encode/index.html \n\n#### Flux 、Mono对象\n* Flux\n表示 0->n个元素的异步序列\n序列有三种不同类型的消息  包含正常元素的消息(onNext())、序列结束的消息(onComplete())、序列出错的消息(onError()) \n\n|函数名|作用|备注|  \n|:----|:---|:--|   \n|just()|指定序列中所有元素 当flux发布所有元素后自动结束||\n|fromArray()|从数据创建flux|相似和作用的函数 从迭代器创建flux:fromIterable()、从stream集合创建flux:fromStream()|\n|empty()|创建没有元素的序列 只发布结束消息的序列||\n|error(Throwable)|创建一个只包含错误消息的序列||\n|never()|创建一个不包含任何消息通知的序列||\n|range(int start,int count)|创建一个从start开始到count个数量的integer对象序列|\n|\n\n\n* Mono\n表示 0或者1个元素的异步序列 \n序列有三种不同类型的消息  包含正常元素的消息(onNext())、序列结束的消息(onComplete())、序列出错的消息(onError()) \n\n\nFlux 和Mono 可以互相转化  \n\n\n\n \n","slug":"reactor笔记","published":0,"updated":"2018-09-03T06:36:53.512Z","layout":"post","photos":[],"link":"","_id":"cjo9uatpm0005mwczsgnfbx7x","content":"<h4 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h4><p>现在对于系统的性能要求越来高 传统的spring 相关的功能 都快被vert.x之类的框架给压垮了<br>好在 spring 是个活泛的项目 在最新的版本中 spring 也提供了webflux 这种 响应式的套路 功能 也贴近于最新的需求<br>在java中 响应式编程的类库 第一个想到的肯定是rxjava 但是spring 社区 选择了 reactor 这种没有历史包袱 而且更加简单的方式去实现响应式编程<br>rxjava 用起来 其实也挺不错的 不过用的多的是在原生安卓上使用 服务端很少使用rxjava的<br>现在spring 提供了一种没有历史包袱的新套路 直接使用新套路 毕竟spring的选择值得信赖</p><h4 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h4><p><a href=\"https://www.ibm.com/developerworks/cn/java/j-cn-with-reactor-response-encode/index.html\" target=\"_blank\" rel=\"noopener\">https://www.ibm.com/developerworks/cn/java/j-cn-with-reactor-response-encode/index.html</a></p><h4 id=\"Flux-、Mono对象\"><a href=\"#Flux-、Mono对象\" class=\"headerlink\" title=\"Flux 、Mono对象\"></a>Flux 、Mono对象</h4><ul><li>Flux<br>表示 0-&gt;n个元素的异步序列<br>序列有三种不同类型的消息 包含正常元素的消息(onNext())、序列结束的消息(onComplete())、序列出错的消息(onError())</li></ul><table><thead><tr><th style=\"text-align:left\">函数名</th><th style=\"text-align:left\">作用</th><th style=\"text-align:left\">备注</th></tr></thead><tbody><tr><td style=\"text-align:left\">just()</td><td style=\"text-align:left\">指定序列中所有元素 当flux发布所有元素后自动结束</td><td style=\"text-align:left\"></td></tr><tr><td style=\"text-align:left\">fromArray()</td><td style=\"text-align:left\">从数据创建flux</td><td style=\"text-align:left\">相似和作用的函数 从迭代器创建flux:fromIterable()、从stream集合创建flux:fromStream()</td></tr><tr><td style=\"text-align:left\">empty()</td><td style=\"text-align:left\">创建没有元素的序列 只发布结束消息的序列</td><td style=\"text-align:left\"></td></tr><tr><td style=\"text-align:left\">error(Throwable)</td><td style=\"text-align:left\">创建一个只包含错误消息的序列</td><td style=\"text-align:left\"></td></tr><tr><td style=\"text-align:left\">never()</td><td style=\"text-align:left\">创建一个不包含任何消息通知的序列</td><td style=\"text-align:left\"></td></tr><tr><td style=\"text-align:left\">range(int start,int count)</td><td style=\"text-align:left\">创建一个从start开始到count个数量的integer对象序列</td></tr><tr><td style=\"text-align:left\"></td></tr></tbody></table><ul><li>Mono<br>表示 0或者1个元素的异步序列<br>序列有三种不同类型的消息 包含正常元素的消息(onNext())、序列结束的消息(onComplete())、序列出错的消息(onError())</li></ul><p>Flux 和Mono 可以互相转化</p>","site":{"data":{}},"excerpt":"","more":"<h4 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h4><p>现在对于系统的性能要求越来高 传统的spring 相关的功能 都快被vert.x之类的框架给压垮了<br>好在 spring 是个活泛的项目 在最新的版本中 spring 也提供了webflux 这种 响应式的套路 功能 也贴近于最新的需求<br>在java中 响应式编程的类库 第一个想到的肯定是rxjava 但是spring 社区 选择了 reactor 这种没有历史包袱 而且更加简单的方式去实现响应式编程<br>rxjava 用起来 其实也挺不错的 不过用的多的是在原生安卓上使用 服务端很少使用rxjava的<br>现在spring 提供了一种没有历史包袱的新套路 直接使用新套路 毕竟spring的选择值得信赖</p><h4 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h4><p><a href=\"https://www.ibm.com/developerworks/cn/java/j-cn-with-reactor-response-encode/index.html\" target=\"_blank\" rel=\"noopener\">https://www.ibm.com/developerworks/cn/java/j-cn-with-reactor-response-encode/index.html</a></p><h4 id=\"Flux-、Mono对象\"><a href=\"#Flux-、Mono对象\" class=\"headerlink\" title=\"Flux 、Mono对象\"></a>Flux 、Mono对象</h4><ul><li>Flux<br>表示 0-&gt;n个元素的异步序列<br>序列有三种不同类型的消息 包含正常元素的消息(onNext())、序列结束的消息(onComplete())、序列出错的消息(onError())</li></ul><table><thead><tr><th style=\"text-align:left\">函数名</th><th style=\"text-align:left\">作用</th><th style=\"text-align:left\">备注</th></tr></thead><tbody><tr><td style=\"text-align:left\">just()</td><td style=\"text-align:left\">指定序列中所有元素 当flux发布所有元素后自动结束</td><td style=\"text-align:left\"></td></tr><tr><td style=\"text-align:left\">fromArray()</td><td style=\"text-align:left\">从数据创建flux</td><td style=\"text-align:left\">相似和作用的函数 从迭代器创建flux:fromIterable()、从stream集合创建flux:fromStream()</td></tr><tr><td style=\"text-align:left\">empty()</td><td style=\"text-align:left\">创建没有元素的序列 只发布结束消息的序列</td><td style=\"text-align:left\"></td></tr><tr><td style=\"text-align:left\">error(Throwable)</td><td style=\"text-align:left\">创建一个只包含错误消息的序列</td><td style=\"text-align:left\"></td></tr><tr><td style=\"text-align:left\">never()</td><td style=\"text-align:left\">创建一个不包含任何消息通知的序列</td><td style=\"text-align:left\"></td></tr><tr><td style=\"text-align:left\">range(int start,int count)</td><td style=\"text-align:left\">创建一个从start开始到count个数量的integer对象序列</td></tr><tr><td style=\"text-align:left\"></td></tr></tbody></table><ul><li>Mono<br>表示 0或者1个元素的异步序列<br>序列有三种不同类型的消息 包含正常元素的消息(onNext())、序列结束的消息(onComplete())、序列出错的消息(onError())</li></ul><p>Flux 和Mono 可以互相转化</p>"},{"title":"深入理解jvm阅读笔记-垃圾收集","comments":1,"abbrlink":"c4beb856","date":"2018-07-12T04:59:48.000Z","_content":"#### 前言 \n看完jvm对于内存的划分调用区分  其实大部分时候 我能需要调整的 也就是堆内存 和方法区  其他几个区域调整不多 \n因为堆内存、方法区 涉及到垃圾回收   方法区虽然没有要求虚拟机一定要有垃圾收集  其实也是有虚拟机可以对方法区回收的 例如HotSpot 的-Xnoclassgc参数   \n其它区域都是线程私有变量 当线程死亡的时候  随之消亡   \n垃圾收集(Garbage Collection ,GC) \n* 那些内存需要回收(怎么判度内存还需不需要使用)\n* 什么时候回收(什么时候把那些确定需要回收的内存回收)\n* 怎么回收(怎么回收影响最小)\n#### 判断对象是否可回收算法\n##### 引用计数法(Reference Counting) \n暂时没有java虚拟机采用这个方法   \n给对象添加一个引用计数器,当有引用的时候计数器+1, 当引用失效的时候 计数器-1 ,只要计数器=0 那么就是不可能再被引用  \n* 好处  \n实现简单、高效  \n* 坏处  \n无法解决对象互相循环引用 \n```\npackage com.ming;\n\n\npublic class Test {\n    @org.junit.Test\n    public void test() {\n        T1 t1 = new T1();\n        T2 t2 = new T2();\n        //此时 t1 计数器=1  t2 计数器=1 \n\n        t1.setT2(t2);\n        t2.setT1(t1);\n        //测试 t1 计数器=2  t2 计数器=2\n\n\n        t1 = null;\n        t2 = null;\n        //此时 t1 计数器=1  t2 计数器=1 \n        //如果是采用引用计数方式计算对象是否可回收 t1 t2 无法回收          \n        System.gc();\n    }\n\n}\n\nclass T1 {\n    private T2 t2;\n\n    public T2 getT2() {\n        return t2;\n    }\n\n    public void setT2(T2 t2) {\n        this.t2 = t2;\n    }\n}\n\nclass T2 {\n    private T1 t1;\n\n    public T1 getT1() {\n        return t1;\n    }\n\n    public void setT1(T1 t1) {\n        this.t1 = t1;\n    }\n}\n```\n##### 可达性分析算法(Reachability Analysis)\n主流虚拟机采用的方案     \n通过GC Roots 对象为起点   从起点开始向下搜索 搜索的链路称之为 引用链(Reference Chain) 当一个对象和GC Roots没有任何引用链路相连 那么这个对象不可用 可以回收 \n![对象是否存活可达性分析算法](http://asset.xujiuming.com/private-asset/jvm_%E5%AF%B9%E8%B1%A1%E5%8F%AF%E8%BE%BE%E6%80%A7%E7%AE%97%E6%B3%95.jpg)\n\njava中可以作为GC Roots 的对象:  \n* 虚拟机栈  \n* 方法区中类静态属性引用对象  \n* 方法区常量的引用对象  \n* 本地方法中引用对象   \n\n##### 引用类型\n* 强引用\n* 软引用\n* 弱引用\n* 虚引用\n\n|引用类型|gc回收时间|用途|生存时间|备注|\n|:-----|:--------|:--|:------|:---|\n|\n\n\n\n\n#### 垃圾收集算法\n\n\n#### HotSpot虚拟机算法实现 \n##### 垃圾收集器 种类 \n\n\n#### 内存分配和回收策略 \n\n\n\n\n\n\n#### 方法区回收 \n\n\n\n#### 总结 \n","source":"_drafts/深入理解jvm阅读笔记-垃圾收集.md","raw":"---\ntitle: 深入理解jvm阅读笔记-垃圾收集\ncomments: true\ncategories: 笔记\ntags:\n  - java\n  - jvm\nabbrlink: c4beb856\ndate: 2018-07-12 12:59:48\n---\n#### 前言 \n看完jvm对于内存的划分调用区分  其实大部分时候 我能需要调整的 也就是堆内存 和方法区  其他几个区域调整不多 \n因为堆内存、方法区 涉及到垃圾回收   方法区虽然没有要求虚拟机一定要有垃圾收集  其实也是有虚拟机可以对方法区回收的 例如HotSpot 的-Xnoclassgc参数   \n其它区域都是线程私有变量 当线程死亡的时候  随之消亡   \n垃圾收集(Garbage Collection ,GC) \n* 那些内存需要回收(怎么判度内存还需不需要使用)\n* 什么时候回收(什么时候把那些确定需要回收的内存回收)\n* 怎么回收(怎么回收影响最小)\n#### 判断对象是否可回收算法\n##### 引用计数法(Reference Counting) \n暂时没有java虚拟机采用这个方法   \n给对象添加一个引用计数器,当有引用的时候计数器+1, 当引用失效的时候 计数器-1 ,只要计数器=0 那么就是不可能再被引用  \n* 好处  \n实现简单、高效  \n* 坏处  \n无法解决对象互相循环引用 \n```\npackage com.ming;\n\n\npublic class Test {\n    @org.junit.Test\n    public void test() {\n        T1 t1 = new T1();\n        T2 t2 = new T2();\n        //此时 t1 计数器=1  t2 计数器=1 \n\n        t1.setT2(t2);\n        t2.setT1(t1);\n        //测试 t1 计数器=2  t2 计数器=2\n\n\n        t1 = null;\n        t2 = null;\n        //此时 t1 计数器=1  t2 计数器=1 \n        //如果是采用引用计数方式计算对象是否可回收 t1 t2 无法回收          \n        System.gc();\n    }\n\n}\n\nclass T1 {\n    private T2 t2;\n\n    public T2 getT2() {\n        return t2;\n    }\n\n    public void setT2(T2 t2) {\n        this.t2 = t2;\n    }\n}\n\nclass T2 {\n    private T1 t1;\n\n    public T1 getT1() {\n        return t1;\n    }\n\n    public void setT1(T1 t1) {\n        this.t1 = t1;\n    }\n}\n```\n##### 可达性分析算法(Reachability Analysis)\n主流虚拟机采用的方案     \n通过GC Roots 对象为起点   从起点开始向下搜索 搜索的链路称之为 引用链(Reference Chain) 当一个对象和GC Roots没有任何引用链路相连 那么这个对象不可用 可以回收 \n![对象是否存活可达性分析算法](http://asset.xujiuming.com/private-asset/jvm_%E5%AF%B9%E8%B1%A1%E5%8F%AF%E8%BE%BE%E6%80%A7%E7%AE%97%E6%B3%95.jpg)\n\njava中可以作为GC Roots 的对象:  \n* 虚拟机栈  \n* 方法区中类静态属性引用对象  \n* 方法区常量的引用对象  \n* 本地方法中引用对象   \n\n##### 引用类型\n* 强引用\n* 软引用\n* 弱引用\n* 虚引用\n\n|引用类型|gc回收时间|用途|生存时间|备注|\n|:-----|:--------|:--|:------|:---|\n|\n\n\n\n\n#### 垃圾收集算法\n\n\n#### HotSpot虚拟机算法实现 \n##### 垃圾收集器 种类 \n\n\n#### 内存分配和回收策略 \n\n\n\n\n\n\n#### 方法区回收 \n\n\n\n#### 总结 \n","slug":"深入理解jvm阅读笔记-垃圾收集","published":0,"updated":"2018-08-17T08:10:03.919Z","layout":"post","photos":[],"link":"","_id":"cjo9uatpr0009mwczbeplalkn","content":"<h4 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h4><p>看完jvm对于内存的划分调用区分 其实大部分时候 我能需要调整的 也就是堆内存 和方法区 其他几个区域调整不多<br>因为堆内存、方法区 涉及到垃圾回收 方法区虽然没有要求虚拟机一定要有垃圾收集 其实也是有虚拟机可以对方法区回收的 例如HotSpot 的-Xnoclassgc参数<br>其它区域都是线程私有变量 当线程死亡的时候 随之消亡<br>垃圾收集(Garbage Collection ,GC)</p><ul><li>那些内存需要回收(怎么判度内存还需不需要使用)</li><li>什么时候回收(什么时候把那些确定需要回收的内存回收)</li><li>怎么回收(怎么回收影响最小)<h4 id=\"判断对象是否可回收算法\"><a href=\"#判断对象是否可回收算法\" class=\"headerlink\" title=\"判断对象是否可回收算法\"></a>判断对象是否可回收算法</h4><h5 id=\"引用计数法-Reference-Counting\"><a href=\"#引用计数法-Reference-Counting\" class=\"headerlink\" title=\"引用计数法(Reference Counting)\"></a>引用计数法(Reference Counting)</h5>暂时没有java虚拟机采用这个方法<br>给对象添加一个引用计数器,当有引用的时候计数器+1, 当引用失效的时候 计数器-1 ,只要计数器=0 那么就是不可能再被引用</li><li>好处<br>实现简单、高效</li><li>坏处<br>无法解决对象互相循环引用<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.ming;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">public class Test &#123;</span><br><span class=\"line\">    @org.junit.Test</span><br><span class=\"line\">    public void test() &#123;</span><br><span class=\"line\">        T1 t1 = new T1();</span><br><span class=\"line\">        T2 t2 = new T2();</span><br><span class=\"line\">        //此时 t1 计数器=1  t2 计数器=1 </span><br><span class=\"line\"></span><br><span class=\"line\">        t1.setT2(t2);</span><br><span class=\"line\">        t2.setT1(t1);</span><br><span class=\"line\">        //测试 t1 计数器=2  t2 计数器=2</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        t1 = null;</span><br><span class=\"line\">        t2 = null;</span><br><span class=\"line\">        //此时 t1 计数器=1  t2 计数器=1 </span><br><span class=\"line\">        //如果是采用引用计数方式计算对象是否可回收 t1 t2 无法回收          </span><br><span class=\"line\">        System.gc();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class T1 &#123;</span><br><span class=\"line\">    private T2 t2;</span><br><span class=\"line\"></span><br><span class=\"line\">    public T2 getT2() &#123;</span><br><span class=\"line\">        return t2;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void setT2(T2 t2) &#123;</span><br><span class=\"line\">        this.t2 = t2;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class T2 &#123;</span><br><span class=\"line\">    private T1 t1;</span><br><span class=\"line\"></span><br><span class=\"line\">    public T1 getT1() &#123;</span><br><span class=\"line\">        return t1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void setT1(T1 t1) &#123;</span><br><span class=\"line\">        this.t1 = t1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h5 id=\"可达性分析算法-Reachability-Analysis\"><a href=\"#可达性分析算法-Reachability-Analysis\" class=\"headerlink\" title=\"可达性分析算法(Reachability Analysis)\"></a>可达性分析算法(Reachability Analysis)</h5><p>主流虚拟机采用的方案<br>通过GC Roots 对象为起点   从起点开始向下搜索 搜索的链路称之为 引用链(Reference Chain) 当一个对象和GC Roots没有任何引用链路相连 那么这个对象不可用 可以回收<br><img src=\"http://asset.xujiuming.com/private-asset/jvm_%E5%AF%B9%E8%B1%A1%E5%8F%AF%E8%BE%BE%E6%80%A7%E7%AE%97%E6%B3%95.jpg\" alt=\"对象是否存活可达性分析算法\"></p>\n<p>java中可以作为GC Roots 的对象:  </p>\n<ul>\n<li>虚拟机栈  </li>\n<li>方法区中类静态属性引用对象  </li>\n<li>方法区常量的引用对象  </li>\n<li>本地方法中引用对象   </li>\n</ul>\n<h5 id=\"引用类型\"><a href=\"#引用类型\" class=\"headerlink\" title=\"引用类型\"></a>引用类型</h5><ul>\n<li>强引用</li>\n<li>软引用</li>\n<li>弱引用</li>\n<li>虚引用</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">引用类型</th>\n<th style=\"text-align:left\">gc回收时间</th>\n<th style=\"text-align:left\">用途</th>\n<th style=\"text-align:left\">生存时间</th>\n<th style=\"text-align:left\">备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"></td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"垃圾收集算法\"><a href=\"#垃圾收集算法\" class=\"headerlink\" title=\"垃圾收集算法\"></a>垃圾收集算法</h4><h4 id=\"HotSpot虚拟机算法实现\"><a href=\"#HotSpot虚拟机算法实现\" class=\"headerlink\" title=\"HotSpot虚拟机算法实现\"></a>HotSpot虚拟机算法实现</h4><h5 id=\"垃圾收集器-种类\"><a href=\"#垃圾收集器-种类\" class=\"headerlink\" title=\"垃圾收集器 种类\"></a>垃圾收集器 种类</h5><h4 id=\"内存分配和回收策略\"><a href=\"#内存分配和回收策略\" class=\"headerlink\" title=\"内存分配和回收策略\"></a>内存分配和回收策略</h4><h4 id=\"方法区回收\"><a href=\"#方法区回收\" class=\"headerlink\" title=\"方法区回收\"></a>方法区回收</h4><h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4>","site":{"data":{}},"excerpt":"","more":"<h4 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h4><p>看完jvm对于内存的划分调用区分 其实大部分时候 我能需要调整的 也就是堆内存 和方法区 其他几个区域调整不多<br>因为堆内存、方法区 涉及到垃圾回收 方法区虽然没有要求虚拟机一定要有垃圾收集 其实也是有虚拟机可以对方法区回收的 例如HotSpot 的-Xnoclassgc参数<br>其它区域都是线程私有变量 当线程死亡的时候 随之消亡<br>垃圾收集(Garbage Collection ,GC)</p><ul><li>那些内存需要回收(怎么判度内存还需不需要使用)</li><li>什么时候回收(什么时候把那些确定需要回收的内存回收)</li><li>怎么回收(怎么回收影响最小)<h4 id=\"判断对象是否可回收算法\"><a href=\"#判断对象是否可回收算法\" class=\"headerlink\" title=\"判断对象是否可回收算法\"></a>判断对象是否可回收算法</h4><h5 id=\"引用计数法-Reference-Counting\"><a href=\"#引用计数法-Reference-Counting\" class=\"headerlink\" title=\"引用计数法(Reference Counting)\"></a>引用计数法(Reference Counting)</h5>暂时没有java虚拟机采用这个方法<br>给对象添加一个引用计数器,当有引用的时候计数器+1, 当引用失效的时候 计数器-1 ,只要计数器=0 那么就是不可能再被引用</li><li>好处<br>实现简单、高效</li><li>坏处<br>无法解决对象互相循环引用<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.ming;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">public class Test &#123;</span><br><span class=\"line\">    @org.junit.Test</span><br><span class=\"line\">    public void test() &#123;</span><br><span class=\"line\">        T1 t1 = new T1();</span><br><span class=\"line\">        T2 t2 = new T2();</span><br><span class=\"line\">        //此时 t1 计数器=1  t2 计数器=1 </span><br><span class=\"line\"></span><br><span class=\"line\">        t1.setT2(t2);</span><br><span class=\"line\">        t2.setT1(t1);</span><br><span class=\"line\">        //测试 t1 计数器=2  t2 计数器=2</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        t1 = null;</span><br><span class=\"line\">        t2 = null;</span><br><span class=\"line\">        //此时 t1 计数器=1  t2 计数器=1 </span><br><span class=\"line\">        //如果是采用引用计数方式计算对象是否可回收 t1 t2 无法回收          </span><br><span class=\"line\">        System.gc();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class T1 &#123;</span><br><span class=\"line\">    private T2 t2;</span><br><span class=\"line\"></span><br><span class=\"line\">    public T2 getT2() &#123;</span><br><span class=\"line\">        return t2;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void setT2(T2 t2) &#123;</span><br><span class=\"line\">        this.t2 = t2;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class T2 &#123;</span><br><span class=\"line\">    private T1 t1;</span><br><span class=\"line\"></span><br><span class=\"line\">    public T1 getT1() &#123;</span><br><span class=\"line\">        return t1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void setT1(T1 t1) &#123;</span><br><span class=\"line\">        this.t1 = t1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h5 id=\"可达性分析算法-Reachability-Analysis\"><a href=\"#可达性分析算法-Reachability-Analysis\" class=\"headerlink\" title=\"可达性分析算法(Reachability Analysis)\"></a>可达性分析算法(Reachability Analysis)</h5><p>主流虚拟机采用的方案<br>通过GC Roots 对象为起点   从起点开始向下搜索 搜索的链路称之为 引用链(Reference Chain) 当一个对象和GC Roots没有任何引用链路相连 那么这个对象不可用 可以回收<br><img src=\"http://asset.xujiuming.com/private-asset/jvm_%E5%AF%B9%E8%B1%A1%E5%8F%AF%E8%BE%BE%E6%80%A7%E7%AE%97%E6%B3%95.jpg\" alt=\"对象是否存活可达性分析算法\"></p>\n<p>java中可以作为GC Roots 的对象:  </p>\n<ul>\n<li>虚拟机栈  </li>\n<li>方法区中类静态属性引用对象  </li>\n<li>方法区常量的引用对象  </li>\n<li>本地方法中引用对象   </li>\n</ul>\n<h5 id=\"引用类型\"><a href=\"#引用类型\" class=\"headerlink\" title=\"引用类型\"></a>引用类型</h5><ul>\n<li>强引用</li>\n<li>软引用</li>\n<li>弱引用</li>\n<li>虚引用</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">引用类型</th>\n<th style=\"text-align:left\">gc回收时间</th>\n<th style=\"text-align:left\">用途</th>\n<th style=\"text-align:left\">生存时间</th>\n<th style=\"text-align:left\">备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"></td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"垃圾收集算法\"><a href=\"#垃圾收集算法\" class=\"headerlink\" title=\"垃圾收集算法\"></a>垃圾收集算法</h4><h4 id=\"HotSpot虚拟机算法实现\"><a href=\"#HotSpot虚拟机算法实现\" class=\"headerlink\" title=\"HotSpot虚拟机算法实现\"></a>HotSpot虚拟机算法实现</h4><h5 id=\"垃圾收集器-种类\"><a href=\"#垃圾收集器-种类\" class=\"headerlink\" title=\"垃圾收集器 种类\"></a>垃圾收集器 种类</h5><h4 id=\"内存分配和回收策略\"><a href=\"#内存分配和回收策略\" class=\"headerlink\" title=\"内存分配和回收策略\"></a>内存分配和回收策略</h4><h4 id=\"方法区回收\"><a href=\"#方法区回收\" class=\"headerlink\" title=\"方法区回收\"></a>方法区回收</h4><h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4>"},{"title":"devops笔记之常用工具选择","comments":1,"abbrlink":"b7c9aeb7","date":"2018-06-01T10:23:02.000Z","_content":"####前言  \ndevops ：DevOps（Development和Operations的组合词）是一种重视“软件开发人员（Dev）”和“IT运维技术人员（Ops）”之间沟通合作的文化、运动或惯例。透过自动化“软件交付”和“架构变更”的流程，来使得构建、测试、发布软件能够更加地快捷、频繁和可靠\n\n这个概念在 微服务架构流行后 就慢慢的发展起来了  主要是为了解决 微服务部署的规范和流程\n对devops实现的过程的分为 \n* 持续集成阶段     \n项目通过一些工具对部分功能实现快速集成到现有的环境上 \n例如通过工具加速代码发布、快速测试、快速验收\n达到快速的将代码集成到现有的环境中 快速的通过测试和验收阶段\n现在一般的公司在devops的路上 都是在这个阶段 \n* 持续交付阶段    \n在持续集成之上 做到能够快速将开发的代码应用到实际生产中  \n这个阶段主要是考验 从代码产出到生产运行中各个环节的 流程规范   \n如 什么样子的流程可以优化这个 代码的发布、测试到生产的效率  \n达到一个能够快速将代码变为实际的生产力的流程规范 \n少部分大公司能够走到这个 持续交付的阶段 \n* 持续部署   \n在持续交付之上 做到不经过或者少量的人工操作 将代码变为实际的生产力  \n极少数具有顶尖实力的大公司 可以做到 这个持续部署的阶段  \n\n在实现将代码快速转换为实际生产力的路上 \n肯定是需要大量的工具来替代人工的操作 \n\n在持续集成、持续交付阶段 还是能靠一些开源软件+规范来实现的\n持续部署 肯定是需要进行二次开发开源软件 并且公司具有很大的魄力才会走到第三阶段  \n\n在将代码转换成实际生产力大致需要下面几个阶段   \n\n代码产出 > 开发环境运行 > 提交到测试环境 > 测试验证并且提交到预发环境 > 产品验收并且决定是否发布生产 > 发布生产  \n#### 个人在实践 devops中使用的工具及其相关技术 \n* 项目管理 maven 或者gradle    \n从稳定性和团队人员接受程度较低的情况下 选择maven  \n如果高效和团队人员接受程度良好的情况下 选择gradle \n* 项目打包的软件包格式 \n大致上分为jar、war、linux系统软件包、docker\n不用说  docker和微服务是绝配 \n* 项目打包发布ci工具\n如果用git作为代码仓库 那么 gitlabCi 或者jenkins 都可以 \n如果是使用svn作为仓库 那么尽量选择jenkins \n* 软件自动化测试工具\n软件测试分为自动化测试和人肉测试 因为自动化测试肯定是没有人肉测试更加准确\n但是自动化测试 非常适合devops 没次发版替换环境 使用自动化测试脚本去测试ui和接口 \n可以直接在早期 测试出一些由于非业务导致的问题 减少人肉测试的工作量\n* 项目流程管理工具 \n\n \n  ","source":"_drafts/CI、CD/devops笔记之常用工具选择.md","raw":"---\ntitle: devops笔记之常用工具选择\ncomments: true\ncategories: 笔记\ntags: '-devops -tools'\nabbrlink: b7c9aeb7\ndate: 2018-06-01 18:23:02\n---\n####前言  \ndevops ：DevOps（Development和Operations的组合词）是一种重视“软件开发人员（Dev）”和“IT运维技术人员（Ops）”之间沟通合作的文化、运动或惯例。透过自动化“软件交付”和“架构变更”的流程，来使得构建、测试、发布软件能够更加地快捷、频繁和可靠\n\n这个概念在 微服务架构流行后 就慢慢的发展起来了  主要是为了解决 微服务部署的规范和流程\n对devops实现的过程的分为 \n* 持续集成阶段     \n项目通过一些工具对部分功能实现快速集成到现有的环境上 \n例如通过工具加速代码发布、快速测试、快速验收\n达到快速的将代码集成到现有的环境中 快速的通过测试和验收阶段\n现在一般的公司在devops的路上 都是在这个阶段 \n* 持续交付阶段    \n在持续集成之上 做到能够快速将开发的代码应用到实际生产中  \n这个阶段主要是考验 从代码产出到生产运行中各个环节的 流程规范   \n如 什么样子的流程可以优化这个 代码的发布、测试到生产的效率  \n达到一个能够快速将代码变为实际的生产力的流程规范 \n少部分大公司能够走到这个 持续交付的阶段 \n* 持续部署   \n在持续交付之上 做到不经过或者少量的人工操作 将代码变为实际的生产力  \n极少数具有顶尖实力的大公司 可以做到 这个持续部署的阶段  \n\n在实现将代码快速转换为实际生产力的路上 \n肯定是需要大量的工具来替代人工的操作 \n\n在持续集成、持续交付阶段 还是能靠一些开源软件+规范来实现的\n持续部署 肯定是需要进行二次开发开源软件 并且公司具有很大的魄力才会走到第三阶段  \n\n在将代码转换成实际生产力大致需要下面几个阶段   \n\n代码产出 > 开发环境运行 > 提交到测试环境 > 测试验证并且提交到预发环境 > 产品验收并且决定是否发布生产 > 发布生产  \n#### 个人在实践 devops中使用的工具及其相关技术 \n* 项目管理 maven 或者gradle    \n从稳定性和团队人员接受程度较低的情况下 选择maven  \n如果高效和团队人员接受程度良好的情况下 选择gradle \n* 项目打包的软件包格式 \n大致上分为jar、war、linux系统软件包、docker\n不用说  docker和微服务是绝配 \n* 项目打包发布ci工具\n如果用git作为代码仓库 那么 gitlabCi 或者jenkins 都可以 \n如果是使用svn作为仓库 那么尽量选择jenkins \n* 软件自动化测试工具\n软件测试分为自动化测试和人肉测试 因为自动化测试肯定是没有人肉测试更加准确\n但是自动化测试 非常适合devops 没次发版替换环境 使用自动化测试脚本去测试ui和接口 \n可以直接在早期 测试出一些由于非业务导致的问题 减少人肉测试的工作量\n* 项目流程管理工具 \n\n \n  ","slug":"CI、CD/devops笔记之常用工具选择","published":0,"updated":"2018-08-17T08:10:03.919Z","layout":"post","photos":[],"link":"","_id":"cjo9uatx0000qmwczo5htipib","content":"<p>####前言<br>devops ：DevOps（Development和Operations的组合词）是一种重视“软件开发人员（Dev）”和“IT运维技术人员（Ops）”之间沟通合作的文化、运动或惯例。透过自动化“软件交付”和“架构变更”的流程，来使得构建、测试、发布软件能够更加地快捷、频繁和可靠</p><p>这个概念在 微服务架构流行后 就慢慢的发展起来了 主要是为了解决 微服务部署的规范和流程<br>对devops实现的过程的分为</p><ul><li>持续集成阶段<br>项目通过一些工具对部分功能实现快速集成到现有的环境上<br>例如通过工具加速代码发布、快速测试、快速验收<br>达到快速的将代码集成到现有的环境中 快速的通过测试和验收阶段<br>现在一般的公司在devops的路上 都是在这个阶段</li><li>持续交付阶段<br>在持续集成之上 做到能够快速将开发的代码应用到实际生产中<br>这个阶段主要是考验 从代码产出到生产运行中各个环节的 流程规范<br>如 什么样子的流程可以优化这个 代码的发布、测试到生产的效率<br>达到一个能够快速将代码变为实际的生产力的流程规范<br>少部分大公司能够走到这个 持续交付的阶段</li><li>持续部署<br>在持续交付之上 做到不经过或者少量的人工操作 将代码变为实际的生产力<br>极少数具有顶尖实力的大公司 可以做到 这个持续部署的阶段</li></ul><p>在实现将代码快速转换为实际生产力的路上<br>肯定是需要大量的工具来替代人工的操作</p><p>在持续集成、持续交付阶段 还是能靠一些开源软件+规范来实现的<br>持续部署 肯定是需要进行二次开发开源软件 并且公司具有很大的魄力才会走到第三阶段</p><p>在将代码转换成实际生产力大致需要下面几个阶段</p><p>代码产出 &gt; 开发环境运行 &gt; 提交到测试环境 &gt; 测试验证并且提交到预发环境 &gt; 产品验收并且决定是否发布生产 &gt; 发布生产</p><h4 id=\"个人在实践-devops中使用的工具及其相关技术\"><a href=\"#个人在实践-devops中使用的工具及其相关技术\" class=\"headerlink\" title=\"个人在实践 devops中使用的工具及其相关技术\"></a>个人在实践 devops中使用的工具及其相关技术</h4><ul><li>项目管理 maven 或者gradle<br>从稳定性和团队人员接受程度较低的情况下 选择maven<br>如果高效和团队人员接受程度良好的情况下 选择gradle</li><li>项目打包的软件包格式<br>大致上分为jar、war、linux系统软件包、docker<br>不用说 docker和微服务是绝配</li><li>项目打包发布ci工具<br>如果用git作为代码仓库 那么 gitlabCi 或者jenkins 都可以<br>如果是使用svn作为仓库 那么尽量选择jenkins</li><li>软件自动化测试工具<br>软件测试分为自动化测试和人肉测试 因为自动化测试肯定是没有人肉测试更加准确<br>但是自动化测试 非常适合devops 没次发版替换环境 使用自动化测试脚本去测试ui和接口<br>可以直接在早期 测试出一些由于非业务导致的问题 减少人肉测试的工作量</li><li>项目流程管理工具</li></ul>","site":{"data":{}},"excerpt":"","more":"<p>####前言<br>devops ：DevOps（Development和Operations的组合词）是一种重视“软件开发人员（Dev）”和“IT运维技术人员（Ops）”之间沟通合作的文化、运动或惯例。透过自动化“软件交付”和“架构变更”的流程，来使得构建、测试、发布软件能够更加地快捷、频繁和可靠</p><p>这个概念在 微服务架构流行后 就慢慢的发展起来了 主要是为了解决 微服务部署的规范和流程<br>对devops实现的过程的分为</p><ul><li>持续集成阶段<br>项目通过一些工具对部分功能实现快速集成到现有的环境上<br>例如通过工具加速代码发布、快速测试、快速验收<br>达到快速的将代码集成到现有的环境中 快速的通过测试和验收阶段<br>现在一般的公司在devops的路上 都是在这个阶段</li><li>持续交付阶段<br>在持续集成之上 做到能够快速将开发的代码应用到实际生产中<br>这个阶段主要是考验 从代码产出到生产运行中各个环节的 流程规范<br>如 什么样子的流程可以优化这个 代码的发布、测试到生产的效率<br>达到一个能够快速将代码变为实际的生产力的流程规范<br>少部分大公司能够走到这个 持续交付的阶段</li><li>持续部署<br>在持续交付之上 做到不经过或者少量的人工操作 将代码变为实际的生产力<br>极少数具有顶尖实力的大公司 可以做到 这个持续部署的阶段</li></ul><p>在实现将代码快速转换为实际生产力的路上<br>肯定是需要大量的工具来替代人工的操作</p><p>在持续集成、持续交付阶段 还是能靠一些开源软件+规范来实现的<br>持续部署 肯定是需要进行二次开发开源软件 并且公司具有很大的魄力才会走到第三阶段</p><p>在将代码转换成实际生产力大致需要下面几个阶段</p><p>代码产出 &gt; 开发环境运行 &gt; 提交到测试环境 &gt; 测试验证并且提交到预发环境 &gt; 产品验收并且决定是否发布生产 &gt; 发布生产</p><h4 id=\"个人在实践-devops中使用的工具及其相关技术\"><a href=\"#个人在实践-devops中使用的工具及其相关技术\" class=\"headerlink\" title=\"个人在实践 devops中使用的工具及其相关技术\"></a>个人在实践 devops中使用的工具及其相关技术</h4><ul><li>项目管理 maven 或者gradle<br>从稳定性和团队人员接受程度较低的情况下 选择maven<br>如果高效和团队人员接受程度良好的情况下 选择gradle</li><li>项目打包的软件包格式<br>大致上分为jar、war、linux系统软件包、docker<br>不用说 docker和微服务是绝配</li><li>项目打包发布ci工具<br>如果用git作为代码仓库 那么 gitlabCi 或者jenkins 都可以<br>如果是使用svn作为仓库 那么尽量选择jenkins</li><li>软件自动化测试工具<br>软件测试分为自动化测试和人肉测试 因为自动化测试肯定是没有人肉测试更加准确<br>但是自动化测试 非常适合devops 没次发版替换环境 使用自动化测试脚本去测试ui和接口<br>可以直接在早期 测试出一些由于非业务导致的问题 减少人肉测试的工作量</li><li>项目流程管理工具</li></ul>"},{"title":"guava-collections笔记","abbrlink":"54bd928f","date":"2017-11-10T16:00:00.000Z","_content":"\n\n## guava 集合工具\n#### 不可变集合\n* 当对象被不可信的库调用时，不可变形式是安全的；\n* 不可变对象被多个线程调用时，不存在竞态条件问题\n* 不可变集合不需要考虑变化，因此可以节省时间和空间。所有不可变的集合都比它们的可变形式有更好的内存利用率（分析和测试细节）；\n* 不可变对象因为有固定不变，可以作为常量来安全使用\n```\nguava 不可变集合不接受null   如果需要可使用null使用jdk中的Collections.unmonifiableXXX（）\n```\n###### 创建不可变集合\n* copyOf ImmutableSet.copyOf(set);\n* of ImmutableSet.of(\"1\",\"2\");\n* Builder \n```\nImmutableSet.<Color>builder()\n            .addAll(WEBSAFE_COLORS)\n            .add(new Color(0, 191, 255))\n            .build();\n```\n有序的不可变集合 在构建的时候 就排序\n###### asList() 视图\n所有不可变集合提供 asList() 视图  方便的获取指定值   sortedSet.asList().get(k)从ImmutableSortedSet中读取第k个最小元素。\n\n###### 可变集合和不可变集合对照表\n\n|可变集合接口|属于JDK还是Guava|不可变版本|\n|------|---------|-------|\nCollection|JDK|ImmutableCollection\nList|JDK|ImmutableList\nSet|JDK|ImmutableSet\nSortedSet/NavigableSet|JDK|ImmutableSortedSet\nMap|JDK|ImmutableMap\nSortedMap|JDK|ImmutableSortedMap\nMultiset|Guava|ImmutableMultiset\nSortedMultiset|Guava|ImmutableSortedMultiset\nMultimap|Guava|ImmutableMultimap\nListMultimap|Guava|ImmutableListMultimap\nSetMultimap|Guava|ImmutableSetMultimap\nBiMap|Guava|ImmutableBiMap\nClassToInstanceMap|Guava|ImmutableClassToInstanceMap\nTable|Guava|ImmutableTable\n\n#### guava 新集合\n1: Multiset\n\n方法|描述\n|----|----|\ncount(E)|给定元素在Multiset中的计数\nelementSet()|Multiset中不重复元素的集合，类型为Set<E>\nentrySet()|和Map的entrySet类似，返回Set<Multiset.Entry<E>>，其中包含的Entry支持getElement()和getCount()方法\nadd(E, int)|增加给定元素在Multiset中的计数\nremove(E, int)|减少给定元素在Multiset中的计数\nsetCount(E, int)|设置给定元素在Multiset中的计数，不可以为负数\nsize()|返回集合元素的总个数（包括重复的元素）\n\n2:Multimap  单键多值map\n\n方法签名|描述|等价于\n|----|----|---|\nput(K, V)|添加键到单个值的映射|multimap.get(key).add(value)\nputAll(K, Iterable<V>)|依次添加键到多个值的映射|Iterables.addAll(multimap.get(key), values)\nremove(K, V)|移除键到值的映射；如果有这样的键值并成功移除，返回true。|multimap.get(key).remove(value)\nremoveAll(K)|清除键对应的所有值，返回的集合包含所有之前映射到K的值，但修改这个集合就不会影响Multimap了。|multimap.get(key).clear()\nreplaceValues(K, Iterable<V>)|清除键对应的所有值，并重新把key关联到Iterable中的每个元素。返回的集合包含所有之前映射到K的值。|multimap.get(key).clear(); Iterables.addAll(multimap.get(key), values)\n\n3: BiMap 双向映射map \n* 通过inverse() 反转键值对\n* 保证值是唯一的 values()返回是set\n* 键映射到已经存在的值 需要使用 forcePut\n\n4: Table => Map<R,Map<C,V>> ==》表格 Table<R,C,V>\n* rowMap()：用Map<R, Map<C, V>>表现Table<R, C, V>。同样的， rowKeySet()返回”行”的集合Set<R>。\n* row(r) ：用Map<C, V>返回给定”行”的所有列，对这个map进行的写操作也将写入Table中。\n* 类似的列访问方法：columnMap()、columnKeySet()、column(c)。（基于列的访问会比基于的行访问稍微低效点）\n* cellSet()：用元素类型为Table.Cell<R, C, V>的Set表现Table<R, C, V>。Cell类似于Map.Entry，但它是用行和列两个键区分的。\n\n5: CLassToInstanceMap 它的键是类型，而值是符合键所指类型的对象。\nMap<Class<? extends B>, B> ==》 ClassToInstanceMap<K,V>\n\n#### 集合扩展工具类\n1: Forwarding(装饰器)\n自定义集合的时候可以前后加一些操作　例如日志\n2: PeekingIterator(将jdk中的Iterator增强提供一个peek()方法)\n注意：Iterators.peekingIterator返回的PeekingIterator不支持在peek()操作之后调用remove()方法。\n```\n\tList<E> result = Lists.newArrayList();\n\tPeekingIterator<E> iter = Iterators.peekingIterator(source.iterator());\n\twhile (iter.hasNext()) {\n\t    E current = iter.next();\n\t    while (iter.hasNext() && iter.peek().equals(current)) {\n\t        //跳过重复的元素\n\t        iter.next();\n\t    }\n\t    result.add(current);\n\t}\n```\n3:AbstractIterator  AbstractSequentialIterator jdk8有更加强大的迭代器\nhttp://ifeve.com/google-guava-newcollectiontypes/\n#### 总结: guava工具包最出名应该就是集合的相关操作了 \n#### 1：提供不可变集合 来提升性能 但是这个用起来要注意 要确定后续肯定不会在向集合添加更新删除操作了，之前在项目中 调用dubbo服务的时候 用不可变集合 直接gg、\n####2：第二大的功能 应该就是他的一些变种集合类了  不过用的比较多的话 也就是table、Multimap  其他有用到 很少\n","source":"_posts/java/guava-Collections笔记.md","raw":"---\ntitle: guava-collections笔记\ncategories: 笔记\ntags:\n  - guava\n  - tools\nabbrlink: 54bd928f\ndate: 2017-11-11 00:00:00\n---\n\n\n## guava 集合工具\n#### 不可变集合\n* 当对象被不可信的库调用时，不可变形式是安全的；\n* 不可变对象被多个线程调用时，不存在竞态条件问题\n* 不可变集合不需要考虑变化，因此可以节省时间和空间。所有不可变的集合都比它们的可变形式有更好的内存利用率（分析和测试细节）；\n* 不可变对象因为有固定不变，可以作为常量来安全使用\n```\nguava 不可变集合不接受null   如果需要可使用null使用jdk中的Collections.unmonifiableXXX（）\n```\n###### 创建不可变集合\n* copyOf ImmutableSet.copyOf(set);\n* of ImmutableSet.of(\"1\",\"2\");\n* Builder \n```\nImmutableSet.<Color>builder()\n            .addAll(WEBSAFE_COLORS)\n            .add(new Color(0, 191, 255))\n            .build();\n```\n有序的不可变集合 在构建的时候 就排序\n###### asList() 视图\n所有不可变集合提供 asList() 视图  方便的获取指定值   sortedSet.asList().get(k)从ImmutableSortedSet中读取第k个最小元素。\n\n###### 可变集合和不可变集合对照表\n\n|可变集合接口|属于JDK还是Guava|不可变版本|\n|------|---------|-------|\nCollection|JDK|ImmutableCollection\nList|JDK|ImmutableList\nSet|JDK|ImmutableSet\nSortedSet/NavigableSet|JDK|ImmutableSortedSet\nMap|JDK|ImmutableMap\nSortedMap|JDK|ImmutableSortedMap\nMultiset|Guava|ImmutableMultiset\nSortedMultiset|Guava|ImmutableSortedMultiset\nMultimap|Guava|ImmutableMultimap\nListMultimap|Guava|ImmutableListMultimap\nSetMultimap|Guava|ImmutableSetMultimap\nBiMap|Guava|ImmutableBiMap\nClassToInstanceMap|Guava|ImmutableClassToInstanceMap\nTable|Guava|ImmutableTable\n\n#### guava 新集合\n1: Multiset\n\n方法|描述\n|----|----|\ncount(E)|给定元素在Multiset中的计数\nelementSet()|Multiset中不重复元素的集合，类型为Set<E>\nentrySet()|和Map的entrySet类似，返回Set<Multiset.Entry<E>>，其中包含的Entry支持getElement()和getCount()方法\nadd(E, int)|增加给定元素在Multiset中的计数\nremove(E, int)|减少给定元素在Multiset中的计数\nsetCount(E, int)|设置给定元素在Multiset中的计数，不可以为负数\nsize()|返回集合元素的总个数（包括重复的元素）\n\n2:Multimap  单键多值map\n\n方法签名|描述|等价于\n|----|----|---|\nput(K, V)|添加键到单个值的映射|multimap.get(key).add(value)\nputAll(K, Iterable<V>)|依次添加键到多个值的映射|Iterables.addAll(multimap.get(key), values)\nremove(K, V)|移除键到值的映射；如果有这样的键值并成功移除，返回true。|multimap.get(key).remove(value)\nremoveAll(K)|清除键对应的所有值，返回的集合包含所有之前映射到K的值，但修改这个集合就不会影响Multimap了。|multimap.get(key).clear()\nreplaceValues(K, Iterable<V>)|清除键对应的所有值，并重新把key关联到Iterable中的每个元素。返回的集合包含所有之前映射到K的值。|multimap.get(key).clear(); Iterables.addAll(multimap.get(key), values)\n\n3: BiMap 双向映射map \n* 通过inverse() 反转键值对\n* 保证值是唯一的 values()返回是set\n* 键映射到已经存在的值 需要使用 forcePut\n\n4: Table => Map<R,Map<C,V>> ==》表格 Table<R,C,V>\n* rowMap()：用Map<R, Map<C, V>>表现Table<R, C, V>。同样的， rowKeySet()返回”行”的集合Set<R>。\n* row(r) ：用Map<C, V>返回给定”行”的所有列，对这个map进行的写操作也将写入Table中。\n* 类似的列访问方法：columnMap()、columnKeySet()、column(c)。（基于列的访问会比基于的行访问稍微低效点）\n* cellSet()：用元素类型为Table.Cell<R, C, V>的Set表现Table<R, C, V>。Cell类似于Map.Entry，但它是用行和列两个键区分的。\n\n5: CLassToInstanceMap 它的键是类型，而值是符合键所指类型的对象。\nMap<Class<? extends B>, B> ==》 ClassToInstanceMap<K,V>\n\n#### 集合扩展工具类\n1: Forwarding(装饰器)\n自定义集合的时候可以前后加一些操作　例如日志\n2: PeekingIterator(将jdk中的Iterator增强提供一个peek()方法)\n注意：Iterators.peekingIterator返回的PeekingIterator不支持在peek()操作之后调用remove()方法。\n```\n\tList<E> result = Lists.newArrayList();\n\tPeekingIterator<E> iter = Iterators.peekingIterator(source.iterator());\n\twhile (iter.hasNext()) {\n\t    E current = iter.next();\n\t    while (iter.hasNext() && iter.peek().equals(current)) {\n\t        //跳过重复的元素\n\t        iter.next();\n\t    }\n\t    result.add(current);\n\t}\n```\n3:AbstractIterator  AbstractSequentialIterator jdk8有更加强大的迭代器\nhttp://ifeve.com/google-guava-newcollectiontypes/\n#### 总结: guava工具包最出名应该就是集合的相关操作了 \n#### 1：提供不可变集合 来提升性能 但是这个用起来要注意 要确定后续肯定不会在向集合添加更新删除操作了，之前在项目中 调用dubbo服务的时候 用不可变集合 直接gg、\n####2：第二大的功能 应该就是他的一些变种集合类了  不过用的比较多的话 也就是table、Multimap  其他有用到 很少\n","slug":"java/guava-Collections笔记","published":1,"updated":"2018-08-17T08:10:03.919Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjo9uatx2000rmwcz3mny8ssn","content":"<h2 id=\"guava-集合工具\"><a href=\"#guava-集合工具\" class=\"headerlink\" title=\"guava 集合工具\"></a>guava 集合工具</h2><h4 id=\"不可变集合\"><a href=\"#不可变集合\" class=\"headerlink\" title=\"不可变集合\"></a>不可变集合</h4><ul><li>当对象被不可信的库调用时，不可变形式是安全的；</li><li>不可变对象被多个线程调用时，不存在竞态条件问题</li><li>不可变集合不需要考虑变化，因此可以节省时间和空间。所有不可变的集合都比它们的可变形式有更好的内存利用率（分析和测试细节）；</li><li>不可变对象因为有固定不变，可以作为常量来安全使用<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">guava 不可变集合不接受null   如果需要可使用null使用jdk中的Collections.unmonifiableXXX（）</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h6 id=\"创建不可变集合\"><a href=\"#创建不可变集合\" class=\"headerlink\" title=\"创建不可变集合\"></a>创建不可变集合</h6><ul>\n<li>copyOf ImmutableSet.copyOf(set);</li>\n<li>of ImmutableSet.of(“1”,”2”);</li>\n<li>Builder <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ImmutableSet.&lt;Color&gt;builder()</span><br><span class=\"line\">            .addAll(WEBSAFE_COLORS)</span><br><span class=\"line\">            .add(new Color(0, 191, 255))</span><br><span class=\"line\">            .build();</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>有序的不可变集合 在构建的时候 就排序</p>\n<h6 id=\"asList-视图\"><a href=\"#asList-视图\" class=\"headerlink\" title=\"asList() 视图\"></a>asList() 视图</h6><p>所有不可变集合提供 asList() 视图  方便的获取指定值   sortedSet.asList().get(k)从ImmutableSortedSet中读取第k个最小元素。</p>\n<h6 id=\"可变集合和不可变集合对照表\"><a href=\"#可变集合和不可变集合对照表\" class=\"headerlink\" title=\"可变集合和不可变集合对照表\"></a>可变集合和不可变集合对照表</h6><table>\n<thead>\n<tr>\n<th>可变集合接口</th>\n<th>属于JDK还是Guava</th>\n<th>不可变版本</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td></td>\n</tr>\n</tbody>\n</table>\n<p>Collection|JDK|ImmutableCollection<br>List|JDK|ImmutableList<br>Set|JDK|ImmutableSet<br>SortedSet/NavigableSet|JDK|ImmutableSortedSet<br>Map|JDK|ImmutableMap<br>SortedMap|JDK|ImmutableSortedMap<br>Multiset|Guava|ImmutableMultiset<br>SortedMultiset|Guava|ImmutableSortedMultiset<br>Multimap|Guava|ImmutableMultimap<br>ListMultimap|Guava|ImmutableListMultimap<br>SetMultimap|Guava|ImmutableSetMultimap<br>BiMap|Guava|ImmutableBiMap<br>ClassToInstanceMap|Guava|ImmutableClassToInstanceMap<br>Table|Guava|ImmutableTable</p>\n<h4 id=\"guava-新集合\"><a href=\"#guava-新集合\" class=\"headerlink\" title=\"guava 新集合\"></a>guava 新集合</h4><p>1: Multiset</p>\n<p>方法|描述<br>|—-|—-|<br>count(E)|给定元素在Multiset中的计数<br>elementSet()|Multiset中不重复元素的集合，类型为Set<e><br>entrySet()|和Map的entrySet类似，返回Set&lt;Multiset.Entry<e>&gt;，其中包含的Entry支持getElement()和getCount()方法<br>add(E, int)|增加给定元素在Multiset中的计数<br>remove(E, int)|减少给定元素在Multiset中的计数<br>setCount(E, int)|设置给定元素在Multiset中的计数，不可以为负数<br>size()|返回集合元素的总个数（包括重复的元素）</e></e></p>\n<p>2:Multimap  单键多值map</p>\n<p>方法签名|描述|等价于<br>|—-|—-|—|<br>put(K, V)|添加键到单个值的映射|multimap.get(key).add(value)<br>putAll(K, Iterable<v>)|依次添加键到多个值的映射|Iterables.addAll(multimap.get(key), values)<br>remove(K, V)|移除键到值的映射；如果有这样的键值并成功移除，返回true。|multimap.get(key).remove(value)<br>removeAll(K)|清除键对应的所有值，返回的集合包含所有之前映射到K的值，但修改这个集合就不会影响Multimap了。|multimap.get(key).clear()<br>replaceValues(K, Iterable<v>)|清除键对应的所有值，并重新把key关联到Iterable中的每个元素。返回的集合包含所有之前映射到K的值。|multimap.get(key).clear(); Iterables.addAll(multimap.get(key), values)</v></v></p>\n<p>3: BiMap 双向映射map </p>\n<ul>\n<li>通过inverse() 反转键值对</li>\n<li>保证值是唯一的 values()返回是set</li>\n<li>键映射到已经存在的值 需要使用 forcePut</li>\n</ul>\n<p>4: Table =&gt; Map&lt;R,Map<c ,v=\"\">&gt; ==》表格 Table<r ,c,v=\"\"></r></c></p>\n<ul>\n<li>rowMap()：用Map&lt;R, Map<c ,=\"\" v=\"\">&gt;表现Table<r ,=\"\" c,=\"\" v=\"\">。同样的， rowKeySet()返回”行”的集合Set<r>。</r></r></c></li>\n<li>row(r) ：用Map<c ,=\"\" v=\"\">返回给定”行”的所有列，对这个map进行的写操作也将写入Table中。</c></li>\n<li>类似的列访问方法：columnMap()、columnKeySet()、column(c)。（基于列的访问会比基于的行访问稍微低效点）</li>\n<li>cellSet()：用元素类型为Table.Cell<r ,=\"\" c,=\"\" v=\"\">的Set表现Table<r ,=\"\" c,=\"\" v=\"\">。Cell类似于Map.Entry，但它是用行和列两个键区分的。</r></r></li>\n</ul>\n<p>5: CLassToInstanceMap 它的键是类型，而值是符合键所指类型的对象。<br>Map&lt;Class&lt;? extends B&gt;, B&gt; ==》 ClassToInstanceMap<k ,v=\"\"></k></p>\n<h4 id=\"集合扩展工具类\"><a href=\"#集合扩展工具类\" class=\"headerlink\" title=\"集合扩展工具类\"></a>集合扩展工具类</h4><p>1: Forwarding(装饰器)<br>自定义集合的时候可以前后加一些操作　例如日志<br>2: PeekingIterator(将jdk中的Iterator增强提供一个peek()方法)<br>注意：Iterators.peekingIterator返回的PeekingIterator不支持在peek()操作之后调用remove()方法。<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;E&gt; result = Lists.newArrayList();</span><br><span class=\"line\">PeekingIterator&lt;E&gt; iter = Iterators.peekingIterator(source.iterator());</span><br><span class=\"line\">while (iter.hasNext()) &#123;</span><br><span class=\"line\">    E current = iter.next();</span><br><span class=\"line\">    while (iter.hasNext() &amp;&amp; iter.peek().equals(current)) &#123;</span><br><span class=\"line\">        //跳过重复的元素</span><br><span class=\"line\">        iter.next();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    result.add(current);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p>\n<p>3:AbstractIterator  AbstractSequentialIterator jdk8有更加强大的迭代器<br><a href=\"http://ifeve.com/google-guava-newcollectiontypes/\" target=\"_blank\" rel=\"noopener\">http://ifeve.com/google-guava-newcollectiontypes/</a></p>\n<h4 id=\"总结-guava工具包最出名应该就是集合的相关操作了\"><a href=\"#总结-guava工具包最出名应该就是集合的相关操作了\" class=\"headerlink\" title=\"总结: guava工具包最出名应该就是集合的相关操作了\"></a>总结: guava工具包最出名应该就是集合的相关操作了</h4><h4 id=\"1：提供不可变集合-来提升性能-但是这个用起来要注意-要确定后续肯定不会在向集合添加更新删除操作了，之前在项目中-调用dubbo服务的时候-用不可变集合-直接gg、\"><a href=\"#1：提供不可变集合-来提升性能-但是这个用起来要注意-要确定后续肯定不会在向集合添加更新删除操作了，之前在项目中-调用dubbo服务的时候-用不可变集合-直接gg、\" class=\"headerlink\" title=\"1：提供不可变集合 来提升性能 但是这个用起来要注意 要确定后续肯定不会在向集合添加更新删除操作了，之前在项目中 调用dubbo服务的时候 用不可变集合 直接gg、\"></a>1：提供不可变集合 来提升性能 但是这个用起来要注意 要确定后续肯定不会在向集合添加更新删除操作了，之前在项目中 调用dubbo服务的时候 用不可变集合 直接gg、</h4><p>####2：第二大的功能 应该就是他的一些变种集合类了  不过用的比较多的话 也就是table、Multimap  其他有用到 很少</p>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"guava-集合工具\"><a href=\"#guava-集合工具\" class=\"headerlink\" title=\"guava 集合工具\"></a>guava 集合工具</h2><h4 id=\"不可变集合\"><a href=\"#不可变集合\" class=\"headerlink\" title=\"不可变集合\"></a>不可变集合</h4><ul><li>当对象被不可信的库调用时，不可变形式是安全的；</li><li>不可变对象被多个线程调用时，不存在竞态条件问题</li><li>不可变集合不需要考虑变化，因此可以节省时间和空间。所有不可变的集合都比它们的可变形式有更好的内存利用率（分析和测试细节）；</li><li>不可变对象因为有固定不变，可以作为常量来安全使用<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">guava 不可变集合不接受null   如果需要可使用null使用jdk中的Collections.unmonifiableXXX（）</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h6 id=\"创建不可变集合\"><a href=\"#创建不可变集合\" class=\"headerlink\" title=\"创建不可变集合\"></a>创建不可变集合</h6><ul>\n<li>copyOf ImmutableSet.copyOf(set);</li>\n<li>of ImmutableSet.of(“1”,”2”);</li>\n<li>Builder <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ImmutableSet.&lt;Color&gt;builder()</span><br><span class=\"line\">            .addAll(WEBSAFE_COLORS)</span><br><span class=\"line\">            .add(new Color(0, 191, 255))</span><br><span class=\"line\">            .build();</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>有序的不可变集合 在构建的时候 就排序</p>\n<h6 id=\"asList-视图\"><a href=\"#asList-视图\" class=\"headerlink\" title=\"asList() 视图\"></a>asList() 视图</h6><p>所有不可变集合提供 asList() 视图  方便的获取指定值   sortedSet.asList().get(k)从ImmutableSortedSet中读取第k个最小元素。</p>\n<h6 id=\"可变集合和不可变集合对照表\"><a href=\"#可变集合和不可变集合对照表\" class=\"headerlink\" title=\"可变集合和不可变集合对照表\"></a>可变集合和不可变集合对照表</h6><table>\n<thead>\n<tr>\n<th>可变集合接口</th>\n<th>属于JDK还是Guava</th>\n<th>不可变版本</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td></td>\n</tr>\n</tbody>\n</table>\n<p>Collection|JDK|ImmutableCollection<br>List|JDK|ImmutableList<br>Set|JDK|ImmutableSet<br>SortedSet/NavigableSet|JDK|ImmutableSortedSet<br>Map|JDK|ImmutableMap<br>SortedMap|JDK|ImmutableSortedMap<br>Multiset|Guava|ImmutableMultiset<br>SortedMultiset|Guava|ImmutableSortedMultiset<br>Multimap|Guava|ImmutableMultimap<br>ListMultimap|Guava|ImmutableListMultimap<br>SetMultimap|Guava|ImmutableSetMultimap<br>BiMap|Guava|ImmutableBiMap<br>ClassToInstanceMap|Guava|ImmutableClassToInstanceMap<br>Table|Guava|ImmutableTable</p>\n<h4 id=\"guava-新集合\"><a href=\"#guava-新集合\" class=\"headerlink\" title=\"guava 新集合\"></a>guava 新集合</h4><p>1: Multiset</p>\n<p>方法|描述<br>|—-|—-|<br>count(E)|给定元素在Multiset中的计数<br>elementSet()|Multiset中不重复元素的集合，类型为Set<e><br>entrySet()|和Map的entrySet类似，返回Set&lt;Multiset.Entry<e>&gt;，其中包含的Entry支持getElement()和getCount()方法<br>add(E, int)|增加给定元素在Multiset中的计数<br>remove(E, int)|减少给定元素在Multiset中的计数<br>setCount(E, int)|设置给定元素在Multiset中的计数，不可以为负数<br>size()|返回集合元素的总个数（包括重复的元素）</e></e></p>\n<p>2:Multimap  单键多值map</p>\n<p>方法签名|描述|等价于<br>|—-|—-|—|<br>put(K, V)|添加键到单个值的映射|multimap.get(key).add(value)<br>putAll(K, Iterable<v>)|依次添加键到多个值的映射|Iterables.addAll(multimap.get(key), values)<br>remove(K, V)|移除键到值的映射；如果有这样的键值并成功移除，返回true。|multimap.get(key).remove(value)<br>removeAll(K)|清除键对应的所有值，返回的集合包含所有之前映射到K的值，但修改这个集合就不会影响Multimap了。|multimap.get(key).clear()<br>replaceValues(K, Iterable<v>)|清除键对应的所有值，并重新把key关联到Iterable中的每个元素。返回的集合包含所有之前映射到K的值。|multimap.get(key).clear(); Iterables.addAll(multimap.get(key), values)</v></v></p>\n<p>3: BiMap 双向映射map </p>\n<ul>\n<li>通过inverse() 反转键值对</li>\n<li>保证值是唯一的 values()返回是set</li>\n<li>键映射到已经存在的值 需要使用 forcePut</li>\n</ul>\n<p>4: Table =&gt; Map&lt;R,Map<c ,v=\"\">&gt; ==》表格 Table<r ,c,v=\"\"></r></c></p>\n<ul>\n<li>rowMap()：用Map&lt;R, Map<c ,=\"\" v=\"\">&gt;表现Table<r ,=\"\" c,=\"\" v=\"\">。同样的， rowKeySet()返回”行”的集合Set<r>。</r></r></c></li>\n<li>row(r) ：用Map<c ,=\"\" v=\"\">返回给定”行”的所有列，对这个map进行的写操作也将写入Table中。</c></li>\n<li>类似的列访问方法：columnMap()、columnKeySet()、column(c)。（基于列的访问会比基于的行访问稍微低效点）</li>\n<li>cellSet()：用元素类型为Table.Cell<r ,=\"\" c,=\"\" v=\"\">的Set表现Table<r ,=\"\" c,=\"\" v=\"\">。Cell类似于Map.Entry，但它是用行和列两个键区分的。</r></r></li>\n</ul>\n<p>5: CLassToInstanceMap 它的键是类型，而值是符合键所指类型的对象。<br>Map&lt;Class&lt;? extends B&gt;, B&gt; ==》 ClassToInstanceMap<k ,v=\"\"></k></p>\n<h4 id=\"集合扩展工具类\"><a href=\"#集合扩展工具类\" class=\"headerlink\" title=\"集合扩展工具类\"></a>集合扩展工具类</h4><p>1: Forwarding(装饰器)<br>自定义集合的时候可以前后加一些操作　例如日志<br>2: PeekingIterator(将jdk中的Iterator增强提供一个peek()方法)<br>注意：Iterators.peekingIterator返回的PeekingIterator不支持在peek()操作之后调用remove()方法。<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;E&gt; result = Lists.newArrayList();</span><br><span class=\"line\">PeekingIterator&lt;E&gt; iter = Iterators.peekingIterator(source.iterator());</span><br><span class=\"line\">while (iter.hasNext()) &#123;</span><br><span class=\"line\">    E current = iter.next();</span><br><span class=\"line\">    while (iter.hasNext() &amp;&amp; iter.peek().equals(current)) &#123;</span><br><span class=\"line\">        //跳过重复的元素</span><br><span class=\"line\">        iter.next();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    result.add(current);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p>\n<p>3:AbstractIterator  AbstractSequentialIterator jdk8有更加强大的迭代器<br><a href=\"http://ifeve.com/google-guava-newcollectiontypes/\" target=\"_blank\" rel=\"noopener\">http://ifeve.com/google-guava-newcollectiontypes/</a></p>\n<h4 id=\"总结-guava工具包最出名应该就是集合的相关操作了\"><a href=\"#总结-guava工具包最出名应该就是集合的相关操作了\" class=\"headerlink\" title=\"总结: guava工具包最出名应该就是集合的相关操作了\"></a>总结: guava工具包最出名应该就是集合的相关操作了</h4><h4 id=\"1：提供不可变集合-来提升性能-但是这个用起来要注意-要确定后续肯定不会在向集合添加更新删除操作了，之前在项目中-调用dubbo服务的时候-用不可变集合-直接gg、\"><a href=\"#1：提供不可变集合-来提升性能-但是这个用起来要注意-要确定后续肯定不会在向集合添加更新删除操作了，之前在项目中-调用dubbo服务的时候-用不可变集合-直接gg、\" class=\"headerlink\" title=\"1：提供不可变集合 来提升性能 但是这个用起来要注意 要确定后续肯定不会在向集合添加更新删除操作了，之前在项目中 调用dubbo服务的时候 用不可变集合 直接gg、\"></a>1：提供不可变集合 来提升性能 但是这个用起来要注意 要确定后续肯定不会在向集合添加更新删除操作了，之前在项目中 调用dubbo服务的时候 用不可变集合 直接gg、</h4><p>####2：第二大的功能 应该就是他的一些变种集合类了  不过用的比较多的话 也就是table、Multimap  其他有用到 很少</p>"},{"title":"guava-basic笔记","abbrlink":"d9ddd520","date":"2017-11-10T16:00:00.000Z","_content":"\n\n##guava basic 基本工具\n#### 避免null optional  \n如果是jdk1.8以上直接使用optional  1.8以下需要使用guava basic工具包\n#### 前置检查 Preconditions\n|方法声明（不包括额外参数）|描述|检查失败时抛出的异常|\n|----|-----|------|\n|checkArgument(boolean)|检查boolean是否为true，用来检查传递给方法的参数。|IllegalArgumentException\n|checkNotNull(T)|检查value是否为null，该方法直接返回value，因此可以内嵌使用checkNotNull。|NullPointerException\n|checkState(boolean)|用来检查对象的某些状态。|IllegalStateException\n|checkElementIndex(int index, int size)|检查index作为索引值对某个列表、字符串或数组是否有效。index>=0 && index<size *|IndexOutOfBoundsException\n|checkPositionIndex(int index, int size)|检查index作为位置值对某个列表、字符串或数组是否有效。index>=0 && index<=size *|IndexOutOfBoundsException\n|checkPositionIndexes(int start, int end, int size)|检查[start, end]表示的位置范围对某个列表、字符串或数组是否有效*|IndexOutOfBoundsException\n#### object方法 Objects\njdk1.7 后提供了相应的方法 可以不用guava\n提供比较链 ComparisonChain \n#### 排序 Ordering\n排序器\n\n|方法|描述| \n|----|-----|\n|natural()|对可排序类型做自然排序，如数字按大小，日期按先后排序\n|usingToString()|按对象的字符串形式做字典排序[lexicographical ordering]\n|from(Comparator)|把给定的Comparator转化为排序器\n\n链式调用\n\n|方法|描述|\n|----|----|\nreverse()|获取语义相反的排序器\nnullsFirst()|使用当前排序器，但额外把null值排到最前面。\nnullsLast()|使用当前排序器，但额外把null值排到最后面。\ncompound(Comparator)|合成另一个比较器，以处理当前排序器中的相等情况。\nlexicographical()|基于处理类型T的排序器，返回该类型的可迭代对象Iterable<T>的排序器。\nonResultOf(Function)|对集合中元素调用Function，再按返回值用当前排序器排序。\n\n排序器\n\n|方法|描述|\n|----|----|\ngreatestOf(Iterable iterable, int k)|获取可迭代对象中最大的k个元素。|leastOf\nisOrdered(Iterable)|判断可迭代对象是否已按排序器排序：允许有排序值相等的元素。|isStrictlyOrdered\nsortedCopy(Iterable)|判断可迭代对象是否已严格按排序器排序：不允许排序值相等的元素。|immutableSortedCopy\nmin(E, E)|返回两个参数中最小的那个。如果相等，则返回第一个参数。|max(E, E)\nmin(E, E, E, E...)|返回多个参数中最小的那个。如果有超过一个参数都最小，则返回第一个最小的参数。|max(E, E, E, E...)\nmin(Iterable)|返回迭代器中最小的元素。如果可迭代对象中没有元素，则抛出NoSuchElementException。|max(Iterable), min(Iterator), max(Iterator)\n\n\n#### 总结: guava的基本工具类用的多的可能就是 Preconditions 来检查参数了     optional jdk8 已经包含了 比较的方法 也有   或者 jdk8中stream集合提供更加强大的  宝马都有了 还用个毛的guava的自行车\n","source":"_posts/java/guava-basic笔记.md","raw":"---\ntitle: guava-basic笔记\ncategories: 笔记\ntags:\n  - guava\n  - tools\nabbrlink: d9ddd520\ndate: 2017-11-11 00:00:00\n---\n\n\n##guava basic 基本工具\n#### 避免null optional  \n如果是jdk1.8以上直接使用optional  1.8以下需要使用guava basic工具包\n#### 前置检查 Preconditions\n|方法声明（不包括额外参数）|描述|检查失败时抛出的异常|\n|----|-----|------|\n|checkArgument(boolean)|检查boolean是否为true，用来检查传递给方法的参数。|IllegalArgumentException\n|checkNotNull(T)|检查value是否为null，该方法直接返回value，因此可以内嵌使用checkNotNull。|NullPointerException\n|checkState(boolean)|用来检查对象的某些状态。|IllegalStateException\n|checkElementIndex(int index, int size)|检查index作为索引值对某个列表、字符串或数组是否有效。index>=0 && index<size *|IndexOutOfBoundsException\n|checkPositionIndex(int index, int size)|检查index作为位置值对某个列表、字符串或数组是否有效。index>=0 && index<=size *|IndexOutOfBoundsException\n|checkPositionIndexes(int start, int end, int size)|检查[start, end]表示的位置范围对某个列表、字符串或数组是否有效*|IndexOutOfBoundsException\n#### object方法 Objects\njdk1.7 后提供了相应的方法 可以不用guava\n提供比较链 ComparisonChain \n#### 排序 Ordering\n排序器\n\n|方法|描述| \n|----|-----|\n|natural()|对可排序类型做自然排序，如数字按大小，日期按先后排序\n|usingToString()|按对象的字符串形式做字典排序[lexicographical ordering]\n|from(Comparator)|把给定的Comparator转化为排序器\n\n链式调用\n\n|方法|描述|\n|----|----|\nreverse()|获取语义相反的排序器\nnullsFirst()|使用当前排序器，但额外把null值排到最前面。\nnullsLast()|使用当前排序器，但额外把null值排到最后面。\ncompound(Comparator)|合成另一个比较器，以处理当前排序器中的相等情况。\nlexicographical()|基于处理类型T的排序器，返回该类型的可迭代对象Iterable<T>的排序器。\nonResultOf(Function)|对集合中元素调用Function，再按返回值用当前排序器排序。\n\n排序器\n\n|方法|描述|\n|----|----|\ngreatestOf(Iterable iterable, int k)|获取可迭代对象中最大的k个元素。|leastOf\nisOrdered(Iterable)|判断可迭代对象是否已按排序器排序：允许有排序值相等的元素。|isStrictlyOrdered\nsortedCopy(Iterable)|判断可迭代对象是否已严格按排序器排序：不允许排序值相等的元素。|immutableSortedCopy\nmin(E, E)|返回两个参数中最小的那个。如果相等，则返回第一个参数。|max(E, E)\nmin(E, E, E, E...)|返回多个参数中最小的那个。如果有超过一个参数都最小，则返回第一个最小的参数。|max(E, E, E, E...)\nmin(Iterable)|返回迭代器中最小的元素。如果可迭代对象中没有元素，则抛出NoSuchElementException。|max(Iterable), min(Iterator), max(Iterator)\n\n\n#### 总结: guava的基本工具类用的多的可能就是 Preconditions 来检查参数了     optional jdk8 已经包含了 比较的方法 也有   或者 jdk8中stream集合提供更加强大的  宝马都有了 还用个毛的guava的自行车\n","slug":"java/guava-basic笔记","published":1,"updated":"2018-08-17T08:10:03.919Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjo9uatx3000tmwcz985hphlm","content":"<p>##guava basic 基本工具</p><h4 id=\"避免null-optional\"><a href=\"#避免null-optional\" class=\"headerlink\" title=\"避免null optional\"></a>避免null optional</h4><p>如果是jdk1.8以上直接使用optional 1.8以下需要使用guava basic工具包</p><h4 id=\"前置检查-Preconditions\"><a href=\"#前置检查-Preconditions\" class=\"headerlink\" title=\"前置检查 Preconditions\"></a>前置检查 Preconditions</h4><table><thead><tr><th>方法声明（不包括额外参数）</th><th>描述</th><th>检查失败时抛出的异常</th></tr></thead><tbody><tr><td>checkArgument(boolean)</td><td>检查boolean是否为true，用来检查传递给方法的参数。</td><td>IllegalArgumentException</td></tr><tr><td>checkNotNull(T)</td><td>检查value是否为null，该方法直接返回value，因此可以内嵌使用checkNotNull。</td><td>NullPointerException</td></tr><tr><td>checkState(boolean)</td><td>用来检查对象的某些状态。</td><td>IllegalStateException</td></tr><tr><td>checkElementIndex(int index, int size)</td><td>检查index作为索引值对某个列表、字符串或数组是否有效。index&gt;=0 &amp;&amp; index&lt;size *</td><td>IndexOutOfBoundsException</td></tr><tr><td>checkPositionIndex(int index, int size)</td><td>检查index作为位置值对某个列表、字符串或数组是否有效。index&gt;=0 &amp;&amp; index&lt;=size *</td><td>IndexOutOfBoundsException</td></tr><tr><td>checkPositionIndexes(int start, int end, int size)</td><td>检查[start, end]表示的位置范围对某个列表、字符串或数组是否有效*</td><td>IndexOutOfBoundsException</td></tr></tbody></table><h4 id=\"object方法-Objects\"><a href=\"#object方法-Objects\" class=\"headerlink\" title=\"object方法 Objects\"></a>object方法 Objects</h4><p>jdk1.7 后提供了相应的方法 可以不用guava<br>提供比较链 ComparisonChain</p><h4 id=\"排序-Ordering\"><a href=\"#排序-Ordering\" class=\"headerlink\" title=\"排序 Ordering\"></a>排序 Ordering</h4><p>排序器</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>natural()</td><td>对可排序类型做自然排序，如数字按大小，日期按先后排序</td></tr><tr><td>usingToString()</td><td>按对象的字符串形式做字典排序[lexicographical ordering]</td></tr><tr><td>from(Comparator)</td><td>把给定的Comparator转化为排序器</td></tr></tbody></table><p>链式调用</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td></td></tr></tbody></table><p>reverse()|获取语义相反的排序器<br>nullsFirst()|使用当前排序器，但额外把null值排到最前面。<br>nullsLast()|使用当前排序器，但额外把null值排到最后面。<br>compound(Comparator)|合成另一个比较器，以处理当前排序器中的相等情况。<br>lexicographical()|基于处理类型T的排序器，返回该类型的可迭代对象Iterable<t>的排序器。<br>onResultOf(Function)|对集合中元素调用Function，再按返回值用当前排序器排序。</t></p><p>排序器</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td></td></tr></tbody></table><p>greatestOf(Iterable iterable, int k)|获取可迭代对象中最大的k个元素。|leastOf<br>isOrdered(Iterable)|判断可迭代对象是否已按排序器排序：允许有排序值相等的元素。|isStrictlyOrdered<br>sortedCopy(Iterable)|判断可迭代对象是否已严格按排序器排序：不允许排序值相等的元素。|immutableSortedCopy<br>min(E, E)|返回两个参数中最小的那个。如果相等，则返回第一个参数。|max(E, E)<br>min(E, E, E, E…)|返回多个参数中最小的那个。如果有超过一个参数都最小，则返回第一个最小的参数。|max(E, E, E, E…)<br>min(Iterable)|返回迭代器中最小的元素。如果可迭代对象中没有元素，则抛出NoSuchElementException。|max(Iterable), min(Iterator), max(Iterator)</p><h4 id=\"总结-guava的基本工具类用的多的可能就是-Preconditions-来检查参数了-optional-jdk8-已经包含了-比较的方法-也有-或者-jdk8中stream集合提供更加强大的-宝马都有了-还用个毛的guava的自行车\"><a href=\"#总结-guava的基本工具类用的多的可能就是-Preconditions-来检查参数了-optional-jdk8-已经包含了-比较的方法-也有-或者-jdk8中stream集合提供更加强大的-宝马都有了-还用个毛的guava的自行车\" class=\"headerlink\" title=\"总结: guava的基本工具类用的多的可能就是 Preconditions 来检查参数了     optional jdk8 已经包含了 比较的方法 也有   或者 jdk8中stream集合提供更加强大的  宝马都有了 还用个毛的guava的自行车\"></a>总结: guava的基本工具类用的多的可能就是 Preconditions 来检查参数了 optional jdk8 已经包含了 比较的方法 也有 或者 jdk8中stream集合提供更加强大的 宝马都有了 还用个毛的guava的自行车</h4>","site":{"data":{}},"excerpt":"","more":"<p>##guava basic 基本工具</p><h4 id=\"避免null-optional\"><a href=\"#避免null-optional\" class=\"headerlink\" title=\"避免null optional\"></a>避免null optional</h4><p>如果是jdk1.8以上直接使用optional 1.8以下需要使用guava basic工具包</p><h4 id=\"前置检查-Preconditions\"><a href=\"#前置检查-Preconditions\" class=\"headerlink\" title=\"前置检查 Preconditions\"></a>前置检查 Preconditions</h4><table><thead><tr><th>方法声明（不包括额外参数）</th><th>描述</th><th>检查失败时抛出的异常</th></tr></thead><tbody><tr><td>checkArgument(boolean)</td><td>检查boolean是否为true，用来检查传递给方法的参数。</td><td>IllegalArgumentException</td></tr><tr><td>checkNotNull(T)</td><td>检查value是否为null，该方法直接返回value，因此可以内嵌使用checkNotNull。</td><td>NullPointerException</td></tr><tr><td>checkState(boolean)</td><td>用来检查对象的某些状态。</td><td>IllegalStateException</td></tr><tr><td>checkElementIndex(int index, int size)</td><td>检查index作为索引值对某个列表、字符串或数组是否有效。index&gt;=0 &amp;&amp; index&lt;size *</td><td>IndexOutOfBoundsException</td></tr><tr><td>checkPositionIndex(int index, int size)</td><td>检查index作为位置值对某个列表、字符串或数组是否有效。index&gt;=0 &amp;&amp; index&lt;=size *</td><td>IndexOutOfBoundsException</td></tr><tr><td>checkPositionIndexes(int start, int end, int size)</td><td>检查[start, end]表示的位置范围对某个列表、字符串或数组是否有效*</td><td>IndexOutOfBoundsException</td></tr></tbody></table><h4 id=\"object方法-Objects\"><a href=\"#object方法-Objects\" class=\"headerlink\" title=\"object方法 Objects\"></a>object方法 Objects</h4><p>jdk1.7 后提供了相应的方法 可以不用guava<br>提供比较链 ComparisonChain</p><h4 id=\"排序-Ordering\"><a href=\"#排序-Ordering\" class=\"headerlink\" title=\"排序 Ordering\"></a>排序 Ordering</h4><p>排序器</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>natural()</td><td>对可排序类型做自然排序，如数字按大小，日期按先后排序</td></tr><tr><td>usingToString()</td><td>按对象的字符串形式做字典排序[lexicographical ordering]</td></tr><tr><td>from(Comparator)</td><td>把给定的Comparator转化为排序器</td></tr></tbody></table><p>链式调用</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td></td></tr></tbody></table><p>reverse()|获取语义相反的排序器<br>nullsFirst()|使用当前排序器，但额外把null值排到最前面。<br>nullsLast()|使用当前排序器，但额外把null值排到最后面。<br>compound(Comparator)|合成另一个比较器，以处理当前排序器中的相等情况。<br>lexicographical()|基于处理类型T的排序器，返回该类型的可迭代对象Iterable<t>的排序器。<br>onResultOf(Function)|对集合中元素调用Function，再按返回值用当前排序器排序。</t></p><p>排序器</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td></td></tr></tbody></table><p>greatestOf(Iterable iterable, int k)|获取可迭代对象中最大的k个元素。|leastOf<br>isOrdered(Iterable)|判断可迭代对象是否已按排序器排序：允许有排序值相等的元素。|isStrictlyOrdered<br>sortedCopy(Iterable)|判断可迭代对象是否已严格按排序器排序：不允许排序值相等的元素。|immutableSortedCopy<br>min(E, E)|返回两个参数中最小的那个。如果相等，则返回第一个参数。|max(E, E)<br>min(E, E, E, E…)|返回多个参数中最小的那个。如果有超过一个参数都最小，则返回第一个最小的参数。|max(E, E, E, E…)<br>min(Iterable)|返回迭代器中最小的元素。如果可迭代对象中没有元素，则抛出NoSuchElementException。|max(Iterable), min(Iterator), max(Iterator)</p><h4 id=\"总结-guava的基本工具类用的多的可能就是-Preconditions-来检查参数了-optional-jdk8-已经包含了-比较的方法-也有-或者-jdk8中stream集合提供更加强大的-宝马都有了-还用个毛的guava的自行车\"><a href=\"#总结-guava的基本工具类用的多的可能就是-Preconditions-来检查参数了-optional-jdk8-已经包含了-比较的方法-也有-或者-jdk8中stream集合提供更加强大的-宝马都有了-还用个毛的guava的自行车\" class=\"headerlink\" title=\"总结: guava的基本工具类用的多的可能就是 Preconditions 来检查参数了     optional jdk8 已经包含了 比较的方法 也有   或者 jdk8中stream集合提供更加强大的  宝马都有了 还用个毛的guava的自行车\"></a>总结: guava的基本工具类用的多的可能就是 Preconditions 来检查参数了 optional jdk8 已经包含了 比较的方法 也有 或者 jdk8中stream集合提供更加强大的 宝马都有了 还用个毛的guava的自行车</h4>"},{"title":"java注解笔记","abbrlink":"478f654a","date":"2017-11-10T16:00:00.000Z","_content":"\n##java定义的4个标准元数据注解:\n   1 @Target\n  2 @Retention\n  3 @Documented\n 4 @Inherited\n|名称 | 作用 | 取值 | 备注|\n|---------|:------|:-------|------|\n|@target | 用来说明annotation修饰对象范围 描述注解使用范围\n| 1.CONSTRUCTOR:用于描述构造器\n2.FIELD:用于描述域\n3.LOCAL_VARIABLE:用于描述局部变量\n4.METHOD:用于描述方法\n5.PACKAGE:用于描述包\n6.PARAMETER:用于描述参数\n7.TYPE:用于描述类、接口(包括注解类型) 或enum声明\n|在自定义注解时候 定义注解使用范围\n@Retention\n定义annotation保留时间长短 也就是生命周期\n1.SOURCE:在源文件中有效（即源文件保留）\n　　　　2.CLASS:在class文件中有效（即class保留）\n　　　　3.RUNTIME:在运行时有效（即运行时保留）\n用来定义注解生命周期\n@Documented\n标记注解 描述这个类型的注解是作为被标注的程序成员变量的公共api\n\n就是一个标记 例如javadoc的注解 可用被javadoc这样的工具进行操作生成文档\n@Inherited\n标记注解 描述某个被标注的类型是被继承的 如果使用此注解标记一个类 啦么这个注解将用于该类的子类\n当@Inherited annotation类型标注的annotation的Retention是RetentionPolicy.RUNTIME，则反射API增强了这种继承性。如果我们使用java.lang.reflect去查询一个@Inherited annotation类型的annotation时，反射代码检查将展开工作：检查class和其父类，直到发现指定的annotation类型被发现，或者到达类继承结构的顶层。\n\n定义注解格式 public @interface 注解名{定义内容}\n注解参数可支持类型：\n\t\t1.所有基本数据类型（int,float,boolean,byte,double,char,long,short)\n　　　　2.String类型\n　　　　3.Class类型\n　　　　4.enum类型\n　　　　5.Annotation类型\n　　　　6.以上所有类型的数组\n\nannotation类型的参数设定要求：\n\t\t第一,只能用public或默认(default)这两个访问权修饰.例如,String value();这里把方法设为defaul默认类型；　 　\n　　第二,参数成员只能用基本类型byte,short,char,int,long,float,double,boolean八种基本数据类型和 String,Enum,Class,annotations等数据类型,以及这一些类型的数组.例如,String value();这里的参数成员就为String;　　\n　　第三,如果只有一个参数成员,最好把参数名称设为\"value\",后加小括号.例:下面的例子FruitName注解就只有一个参数成员。\n\n\n注解元素必须有默认值 要么默认指定 要么注解时候指定。非基本类型的注解元素不能为null\n\n\n注解如果不处理 几乎和注释一样 所以需要注解处理器\n主要是通过反射来构建自定义注解处理器\n","source":"_posts/java/java注解及自定义注解.md","raw":"---\ntitle: java注解笔记\ncategories: 笔记\ntags:\n  - java基础\nabbrlink: 478f654a\ndate: 2017-11-11 00:00:00\n---\n\n##java定义的4个标准元数据注解:\n   1 @Target\n  2 @Retention\n  3 @Documented\n 4 @Inherited\n|名称 | 作用 | 取值 | 备注|\n|---------|:------|:-------|------|\n|@target | 用来说明annotation修饰对象范围 描述注解使用范围\n| 1.CONSTRUCTOR:用于描述构造器\n2.FIELD:用于描述域\n3.LOCAL_VARIABLE:用于描述局部变量\n4.METHOD:用于描述方法\n5.PACKAGE:用于描述包\n6.PARAMETER:用于描述参数\n7.TYPE:用于描述类、接口(包括注解类型) 或enum声明\n|在自定义注解时候 定义注解使用范围\n@Retention\n定义annotation保留时间长短 也就是生命周期\n1.SOURCE:在源文件中有效（即源文件保留）\n　　　　2.CLASS:在class文件中有效（即class保留）\n　　　　3.RUNTIME:在运行时有效（即运行时保留）\n用来定义注解生命周期\n@Documented\n标记注解 描述这个类型的注解是作为被标注的程序成员变量的公共api\n\n就是一个标记 例如javadoc的注解 可用被javadoc这样的工具进行操作生成文档\n@Inherited\n标记注解 描述某个被标注的类型是被继承的 如果使用此注解标记一个类 啦么这个注解将用于该类的子类\n当@Inherited annotation类型标注的annotation的Retention是RetentionPolicy.RUNTIME，则反射API增强了这种继承性。如果我们使用java.lang.reflect去查询一个@Inherited annotation类型的annotation时，反射代码检查将展开工作：检查class和其父类，直到发现指定的annotation类型被发现，或者到达类继承结构的顶层。\n\n定义注解格式 public @interface 注解名{定义内容}\n注解参数可支持类型：\n\t\t1.所有基本数据类型（int,float,boolean,byte,double,char,long,short)\n　　　　2.String类型\n　　　　3.Class类型\n　　　　4.enum类型\n　　　　5.Annotation类型\n　　　　6.以上所有类型的数组\n\nannotation类型的参数设定要求：\n\t\t第一,只能用public或默认(default)这两个访问权修饰.例如,String value();这里把方法设为defaul默认类型；　 　\n　　第二,参数成员只能用基本类型byte,short,char,int,long,float,double,boolean八种基本数据类型和 String,Enum,Class,annotations等数据类型,以及这一些类型的数组.例如,String value();这里的参数成员就为String;　　\n　　第三,如果只有一个参数成员,最好把参数名称设为\"value\",后加小括号.例:下面的例子FruitName注解就只有一个参数成员。\n\n\n注解元素必须有默认值 要么默认指定 要么注解时候指定。非基本类型的注解元素不能为null\n\n\n注解如果不处理 几乎和注释一样 所以需要注解处理器\n主要是通过反射来构建自定义注解处理器\n","slug":"java/java注解及自定义注解","published":1,"updated":"2018-08-17T08:10:03.919Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjo9uatx4000umwcznvbfbb7c","content":"<p>##java定义的4个标准元数据注解:<br>1 @Target<br>2 @Retention<br>3 @Documented<br>4 @Inherited<br>|名称 | 作用 | 取值 | 备注|<br>|———|:——|:——-|——|<br>|@target | 用来说明annotation修饰对象范围 描述注解使用范围<br>| 1.CONSTRUCTOR:用于描述构造器<br>2.FIELD:用于描述域<br>3.LOCAL_VARIABLE:用于描述局部变量<br>4.METHOD:用于描述方法<br>5.PACKAGE:用于描述包<br>6.PARAMETER:用于描述参数<br>7.TYPE:用于描述类、接口(包括注解类型) 或enum声明<br>|在自定义注解时候 定义注解使用范围<br>@Retention<br>定义annotation保留时间长短 也就是生命周期<br>1.SOURCE:在源文件中有效（即源文件保留）<br>　　　　2.CLASS:在class文件中有效（即class保留）<br>　　　　3.RUNTIME:在运行时有效（即运行时保留）<br>用来定义注解生命周期<br>@Documented<br>标记注解 描述这个类型的注解是作为被标注的程序成员变量的公共api</p><p>就是一个标记 例如javadoc的注解 可用被javadoc这样的工具进行操作生成文档<br>@Inherited<br>标记注解 描述某个被标注的类型是被继承的 如果使用此注解标记一个类 啦么这个注解将用于该类的子类<br>当@Inherited annotation类型标注的annotation的Retention是RetentionPolicy.RUNTIME，则反射API增强了这种继承性。如果我们使用java.lang.reflect去查询一个@Inherited annotation类型的annotation时，反射代码检查将展开工作：检查class和其父类，直到发现指定的annotation类型被发现，或者到达类继承结构的顶层。</p><p>定义注解格式 public @interface 注解名{定义内容}<br>注解参数可支持类型：<br>1.所有基本数据类型（int,float,boolean,byte,double,char,long,short)<br>　　　　2.String类型<br>　　　　3.Class类型<br>　　　　4.enum类型<br>　　　　5.Annotation类型<br>　　　　6.以上所有类型的数组</p><p>annotation类型的参数设定要求：<br>第一,只能用public或默认(default)这两个访问权修饰.例如,String value();这里把方法设为defaul默认类型；　 　<br>　　第二,参数成员只能用基本类型byte,short,char,int,long,float,double,boolean八种基本数据类型和 String,Enum,Class,annotations等数据类型,以及这一些类型的数组.例如,String value();这里的参数成员就为String;　　<br>　　第三,如果只有一个参数成员,最好把参数名称设为”value”,后加小括号.例:下面的例子FruitName注解就只有一个参数成员。</p><p>注解元素必须有默认值 要么默认指定 要么注解时候指定。非基本类型的注解元素不能为null</p><p>注解如果不处理 几乎和注释一样 所以需要注解处理器<br>主要是通过反射来构建自定义注解处理器</p>","site":{"data":{}},"excerpt":"","more":"<p>##java定义的4个标准元数据注解:<br>1 @Target<br>2 @Retention<br>3 @Documented<br>4 @Inherited<br>|名称 | 作用 | 取值 | 备注|<br>|———|:——|:——-|——|<br>|@target | 用来说明annotation修饰对象范围 描述注解使用范围<br>| 1.CONSTRUCTOR:用于描述构造器<br>2.FIELD:用于描述域<br>3.LOCAL_VARIABLE:用于描述局部变量<br>4.METHOD:用于描述方法<br>5.PACKAGE:用于描述包<br>6.PARAMETER:用于描述参数<br>7.TYPE:用于描述类、接口(包括注解类型) 或enum声明<br>|在自定义注解时候 定义注解使用范围<br>@Retention<br>定义annotation保留时间长短 也就是生命周期<br>1.SOURCE:在源文件中有效（即源文件保留）<br>　　　　2.CLASS:在class文件中有效（即class保留）<br>　　　　3.RUNTIME:在运行时有效（即运行时保留）<br>用来定义注解生命周期<br>@Documented<br>标记注解 描述这个类型的注解是作为被标注的程序成员变量的公共api</p><p>就是一个标记 例如javadoc的注解 可用被javadoc这样的工具进行操作生成文档<br>@Inherited<br>标记注解 描述某个被标注的类型是被继承的 如果使用此注解标记一个类 啦么这个注解将用于该类的子类<br>当@Inherited annotation类型标注的annotation的Retention是RetentionPolicy.RUNTIME，则反射API增强了这种继承性。如果我们使用java.lang.reflect去查询一个@Inherited annotation类型的annotation时，反射代码检查将展开工作：检查class和其父类，直到发现指定的annotation类型被发现，或者到达类继承结构的顶层。</p><p>定义注解格式 public @interface 注解名{定义内容}<br>注解参数可支持类型：<br>1.所有基本数据类型（int,float,boolean,byte,double,char,long,short)<br>　　　　2.String类型<br>　　　　3.Class类型<br>　　　　4.enum类型<br>　　　　5.Annotation类型<br>　　　　6.以上所有类型的数组</p><p>annotation类型的参数设定要求：<br>第一,只能用public或默认(default)这两个访问权修饰.例如,String value();这里把方法设为defaul默认类型；　 　<br>　　第二,参数成员只能用基本类型byte,short,char,int,long,float,double,boolean八种基本数据类型和 String,Enum,Class,annotations等数据类型,以及这一些类型的数组.例如,String value();这里的参数成员就为String;　　<br>　　第三,如果只有一个参数成员,最好把参数名称设为”value”,后加小括号.例:下面的例子FruitName注解就只有一个参数成员。</p><p>注解元素必须有默认值 要么默认指定 要么注解时候指定。非基本类型的注解元素不能为null</p><p>注解如果不处理 几乎和注释一样 所以需要注解处理器<br>主要是通过反射来构建自定义注解处理器</p>"},{"title":"java1.8笔记","abbrlink":"3e07ee0e","date":"2017-11-10T16:00:00.000Z","_content":"####最近一直在看 jdk8的书 觉得jdk8和之前的jdk变化还是挺大\n####主要多了如下一些东西\n####1:lambda表达式支持(方法引用 )\njdk8增加lambda表达式的支持 可以通过‘->’ 来传递代码片段   \n和匿名方法很像  但是有一点细微区别\njava.util.function包下 提供很多常用的function接口 \n方法引用其实也是lambda表达式的一种语法糖   \n####2:stream集合\n这种集合 主要是为了计算   一个是有多种操作符可以很轻松的实现一些数据操作、过滤、扁平化、收集等任务  \n如果条件合适 很方便的实现并行计算 转换成并行stream集合 \n####3:新的future实现(completableFuture)\n新增了一中新的future实现  相应的工具类中 提供很工厂方法去方便将普通任务包装成异步执行的 future任务  可以自定义线程池之类的 来根据不同的环境优化\n####4:新的time包\njdk8之前的时间包比较混乱 例如 java.util.Date java.sql.Date 各有各的地方 看起来贼混乱  jdk8 从新整理的time相关的类、包  提供对之前的java.util.Date这样的互相转换方法\n####5:interface default方法 \njava的提供的方法是一直演进的 一般像之前的方法提供兼容性都是从代码上进行兼容  一个是比较麻烦 二个是有点混乱  现在jdk8提供接口中default方法 可以很方便的去兼容之前的代码   但是这个dufault方法 是很麻烦的 各种实现、继承之间的规则变的比较复杂了 相当于换了一种方式实现了多继承  也会遇到其它支持多继承语言中的坑 例如 菱形继承\n####6: Optional \n这个是学习scala中的optional  可以通过它来实现优雅的防御性编程\n从设计上来说 是否用optional包装 可以用来表明这个值是否可以为null\noptional也提供map、flatmap、filter几种操作符 功能类似stream中的用法 其中flatmap用的比较多\n####7:优化自定义注解  \n主要是可重复注解\n#####总结:工作中使用上jdk8的代码 看起来还是蛮骚的  就是出问题 排查难度会上升一点 特别是lambda中出现问题    stream在做一些对集合中数据进行处理的时候 非常方便 性能也强  如果条件允许还可以很方便的使用并行stream集合、但是直接用并行流的话 效率比不上自己优化过线程池的多线程解决方案\n","source":"_posts/java/jdk8笔记总结.md","raw":"---\ntitle: java1.8笔记\ncategories: 笔记\ntags:\n  - java基础\nabbrlink: 3e07ee0e\ndate: 2017-11-11 00:00:00\n---\n####最近一直在看 jdk8的书 觉得jdk8和之前的jdk变化还是挺大\n####主要多了如下一些东西\n####1:lambda表达式支持(方法引用 )\njdk8增加lambda表达式的支持 可以通过‘->’ 来传递代码片段   \n和匿名方法很像  但是有一点细微区别\njava.util.function包下 提供很多常用的function接口 \n方法引用其实也是lambda表达式的一种语法糖   \n####2:stream集合\n这种集合 主要是为了计算   一个是有多种操作符可以很轻松的实现一些数据操作、过滤、扁平化、收集等任务  \n如果条件合适 很方便的实现并行计算 转换成并行stream集合 \n####3:新的future实现(completableFuture)\n新增了一中新的future实现  相应的工具类中 提供很工厂方法去方便将普通任务包装成异步执行的 future任务  可以自定义线程池之类的 来根据不同的环境优化\n####4:新的time包\njdk8之前的时间包比较混乱 例如 java.util.Date java.sql.Date 各有各的地方 看起来贼混乱  jdk8 从新整理的time相关的类、包  提供对之前的java.util.Date这样的互相转换方法\n####5:interface default方法 \njava的提供的方法是一直演进的 一般像之前的方法提供兼容性都是从代码上进行兼容  一个是比较麻烦 二个是有点混乱  现在jdk8提供接口中default方法 可以很方便的去兼容之前的代码   但是这个dufault方法 是很麻烦的 各种实现、继承之间的规则变的比较复杂了 相当于换了一种方式实现了多继承  也会遇到其它支持多继承语言中的坑 例如 菱形继承\n####6: Optional \n这个是学习scala中的optional  可以通过它来实现优雅的防御性编程\n从设计上来说 是否用optional包装 可以用来表明这个值是否可以为null\noptional也提供map、flatmap、filter几种操作符 功能类似stream中的用法 其中flatmap用的比较多\n####7:优化自定义注解  \n主要是可重复注解\n#####总结:工作中使用上jdk8的代码 看起来还是蛮骚的  就是出问题 排查难度会上升一点 特别是lambda中出现问题    stream在做一些对集合中数据进行处理的时候 非常方便 性能也强  如果条件允许还可以很方便的使用并行stream集合、但是直接用并行流的话 效率比不上自己优化过线程池的多线程解决方案\n","slug":"java/jdk8笔记总结","published":1,"updated":"2018-08-17T08:10:03.923Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjo9uatx6000wmwczymnb6tjh","content":"<p>####最近一直在看 jdk8的书 觉得jdk8和之前的jdk变化还是挺大</p><p>####主要多了如下一些东西</p><p>####1:lambda表达式支持(方法引用 )<br>jdk8增加lambda表达式的支持 可以通过‘-&gt;’ 来传递代码片段<br>和匿名方法很像 但是有一点细微区别<br>java.util.function包下 提供很多常用的function接口<br>方法引用其实也是lambda表达式的一种语法糖</p><p>####2:stream集合<br>这种集合 主要是为了计算 一个是有多种操作符可以很轻松的实现一些数据操作、过滤、扁平化、收集等任务<br>如果条件合适 很方便的实现并行计算 转换成并行stream集合</p><p>####3:新的future实现(completableFuture)<br>新增了一中新的future实现 相应的工具类中 提供很工厂方法去方便将普通任务包装成异步执行的 future任务 可以自定义线程池之类的 来根据不同的环境优化</p><p>####4:新的time包<br>jdk8之前的时间包比较混乱 例如 java.util.Date java.sql.Date 各有各的地方 看起来贼混乱 jdk8 从新整理的time相关的类、包 提供对之前的java.util.Date这样的互相转换方法</p><p>####5:interface default方法<br>java的提供的方法是一直演进的 一般像之前的方法提供兼容性都是从代码上进行兼容 一个是比较麻烦 二个是有点混乱 现在jdk8提供接口中default方法 可以很方便的去兼容之前的代码 但是这个dufault方法 是很麻烦的 各种实现、继承之间的规则变的比较复杂了 相当于换了一种方式实现了多继承 也会遇到其它支持多继承语言中的坑 例如 菱形继承</p><p>####6: Optional<br>这个是学习scala中的optional 可以通过它来实现优雅的防御性编程<br>从设计上来说 是否用optional包装 可以用来表明这个值是否可以为null<br>optional也提供map、flatmap、filter几种操作符 功能类似stream中的用法 其中flatmap用的比较多</p><p>####7:优化自定义注解<br>主要是可重复注解</p><p>#####总结:工作中使用上jdk8的代码 看起来还是蛮骚的 就是出问题 排查难度会上升一点 特别是lambda中出现问题 stream在做一些对集合中数据进行处理的时候 非常方便 性能也强 如果条件允许还可以很方便的使用并行stream集合、但是直接用并行流的话 效率比不上自己优化过线程池的多线程解决方案</p>","site":{"data":{}},"excerpt":"","more":"<p>####最近一直在看 jdk8的书 觉得jdk8和之前的jdk变化还是挺大</p><p>####主要多了如下一些东西</p><p>####1:lambda表达式支持(方法引用 )<br>jdk8增加lambda表达式的支持 可以通过‘-&gt;’ 来传递代码片段<br>和匿名方法很像 但是有一点细微区别<br>java.util.function包下 提供很多常用的function接口<br>方法引用其实也是lambda表达式的一种语法糖</p><p>####2:stream集合<br>这种集合 主要是为了计算 一个是有多种操作符可以很轻松的实现一些数据操作、过滤、扁平化、收集等任务<br>如果条件合适 很方便的实现并行计算 转换成并行stream集合</p><p>####3:新的future实现(completableFuture)<br>新增了一中新的future实现 相应的工具类中 提供很工厂方法去方便将普通任务包装成异步执行的 future任务 可以自定义线程池之类的 来根据不同的环境优化</p><p>####4:新的time包<br>jdk8之前的时间包比较混乱 例如 java.util.Date java.sql.Date 各有各的地方 看起来贼混乱 jdk8 从新整理的time相关的类、包 提供对之前的java.util.Date这样的互相转换方法</p><p>####5:interface default方法<br>java的提供的方法是一直演进的 一般像之前的方法提供兼容性都是从代码上进行兼容 一个是比较麻烦 二个是有点混乱 现在jdk8提供接口中default方法 可以很方便的去兼容之前的代码 但是这个dufault方法 是很麻烦的 各种实现、继承之间的规则变的比较复杂了 相当于换了一种方式实现了多继承 也会遇到其它支持多继承语言中的坑 例如 菱形继承</p><p>####6: Optional<br>这个是学习scala中的optional 可以通过它来实现优雅的防御性编程<br>从设计上来说 是否用optional包装 可以用来表明这个值是否可以为null<br>optional也提供map、flatmap、filter几种操作符 功能类似stream中的用法 其中flatmap用的比较多</p><p>####7:优化自定义注解<br>主要是可重复注解</p><p>#####总结:工作中使用上jdk8的代码 看起来还是蛮骚的 就是出问题 排查难度会上升一点 特别是lambda中出现问题 stream在做一些对集合中数据进行处理的时候 非常方便 性能也强 如果条件允许还可以很方便的使用并行stream集合、但是直接用并行流的话 效率比不上自己优化过线程池的多线程解决方案</p>"},{"title":"java操控excel相关(poi,jxl)笔记","abbrlink":"d3259856","date":"2017-11-10T16:00:00.000Z","_content":"\n\n1. [poi和jxl介绍](#m1)\n2. [poi和jxl操作excel不同点](#m2)\n3. [poi读写excel实例](#m3)\n4. [jxl读写excel实例](#m4)\n5. [poi读写word实例](#m5)\n6. [poi和jxl选择](#m6)\n\n<h3 id=\"m1\">1:poi和jxl介绍</h3>\n\n####    1.1:poi\n         poi是对所有office资源进行读写的一套工具包、属于apache开源组织。\n#### 1.2:jxl\n         jxl只能对excel进行操作的一套工具包。\n<h3 id=\"m2\">2:两者操作excel不同点</h3>\n\n         poi和jxl都是封装了对excel操作方法;\n         poi是把整个文件的属性都封装在HSSFWorkbook 中;\n         通过HSSFWorkbook来操作单个工作薄。然后通过工作薄来操作行;\n         在通过行来操控单元格。这样一级一级的分拆下来;\n         HSSFWorkbook---->HSSFSheet----->HSSFRow---->HSSFCell;\n         由于是基于HSSFWorkbook对象一步步创建起来的。所以不用把创建好的单元格添加进这个对象中、\n         如果需要对部分表格进行设置样式什么的。就可以创立HSSFCellStyle对象来进行设定样式;\n\n          jxl是把整个文件封装在Workbook相关对象中;\n          通过Workbook去创建sheet工作薄;但是和poi不一样的地方是\n          jxl是通过向sheet中使用label(单元格)来进行读取写入;\n          Workbook----->sheet------>label ;\n          jxl是先创建一个工作区域、然后区创立单元格、单元格包含这个单元格的位置、内容等信息;然后把这个单元格加入工作区;\n\n###3：poi读写excel文件的实例(代码中fileURL是你存放路径)\n```\n//写入\npublic void poiWriteExcel() {\n        //创建excel工作薄\n        HSSFWorkbook hssfWorkbook = new HSSFWorkbook();\n        //在里面创建一个sheet 名字为工作薄1\n        HSSFSheet hssfSheet = hssfWorkbook.createSheet(\"工作薄1\");\n        //在索引为o的位置创建行 也就是第一行\n        HSSFRow oneRow = hssfSheet.createRow(0);\n        //创建红色字体\n        HSSFFont font = hssfWorkbook.createFont();\n        font.setColor(HSSFFont.COLOR_RED);\n        //创建格式、\n        HSSFCellStyle cellStyle = hssfWorkbook.createCellStyle();\n        cellStyle.setFont(font);\n        //在第o行创建第一个单元格\n        HSSFCell cell = oneRow.createCell(0);\n        //使用单元格格式\n        cell.setCellStyle(cellStyle);\n        //在第一个单元格输入内容\n        cell.setCellValue(\"xu\");\n        //创建一个第十行\n        HSSFRow tenRow = hssfSheet.createRow(9);\n        //创建输出流\n        try {\n            FileOutputStream fileOutputStream = new FileOutputStream(fileURL + \"xianyu.xls\");\n            //存储工作博\n            hssfWorkbook.write(fileOutputStream);\n            fileOutputStream.flush();\n            fileOutputStream.close();\n        } catch (IOException e) {\n            System.out.println(\"无法写入\");\n            e.printStackTrace();\n        }\n    }\n\n//读取\npublic void poiReadExcel() {\n\n        HSSFWorkbook hssfWorkBook = null;\n        try {\n            hssfWorkBook = new HSSFWorkbook(new FileInputStream(fileURL + \"xianyu.xls\"));\n            //获取第一个工作薄\n            HSSFSheet hssfSheet = hssfWorkBook.getSheetAt(0);\n            //获取第一行\n            HSSFRow row = hssfSheet.getRow(0);\n            System.out.println(row.getCell(0));\n        } catch (IOException e) {\n            System.out.println(\"无法读取\");\n            e.printStackTrace();\n        }\n    }\n```\n###4:jxl读写excel\n```\n//写入\npublic void jxlWriteExcel() {\n        try {\n            //创建xls\n            WritableWorkbook wwb = Workbook.createWorkbook(\n                    new FileOutputStream(fileURL + \"xianyujxl.xls\"));\n            //添加工作薄\n            WritableSheet sheet = wwb.createSheet(\"工作薄1\", 0);\n            //添加单元格 Label(x,y,z) x=列 y=行 z=内容\n            Label label = new Label(0, 0, \"xu\");\n            //添加进工作薄\n            sheet.addCell(label);\n            // 写数据\n            wwb.write();\n            wwb.close();\n        } catch (IOException e) {\n            System.out.println(\"写入失败\");\n            e.printStackTrace();\n        } catch (WriteException e) {\n            e.printStackTrace();\n        }\n    }\n\n//读取\npublic void jxlReadExcel() {\n        try {\n            //获取excel\n            Workbook wb = Workbook.getWorkbook(\n                    new FileInputStream(fileURL + \"xianyujxl.xls\"));\n            //获取sheet工作薄\n            Sheet sheet = wb.getSheet(0);\n            System.out.println(sheet.getCell(0, 0).getContents());\n        } catch (IOException | BiffException e) {\n            e.printStackTrace();\n        }\n    }\n\n```\n###5:poi读写word\n```\n//写入\npublic void poiWriteWord() {\n        try {\n            //创建word文件\n            XWPFDocument xwpfDocument = new XWPFDocument();\n            //新建段落\n            XWPFParagraph xwpfP = xwpfDocument.createParagraph();\n            //创建文本\n            XWPFRun xwpfR = xwpfP.createRun();\n            xwpfR.setText(\"xu\");\n            xwpfDocument.write(new FileOutputStream(fileURL + \"xianyu.doc\"));\n        } catch (IOException e) {\n            System.out.println(\"无法写入\");\n            e.printStackTrace();\n        }\n    }\n\n//读取\npublic void poiReadWord() {\n        //获取doc对象\n        XWPFDocument xwpfDocument;\n        try {\n            xwpfDocument = new XWPFDocument(new FileInputStream(fileURL + \"xianyu.doc\"));\n            //获取段落并且遍历\n            xwpfDocument.getParagraphs().forEach(xwpfParagraph\n                    -> System.out.println(xwpfParagraph.getText()));\n        } catch (IOException e) {\n            System.out.println(\"无法读取\");\n            e.printStackTrace();\n        }\n    }\n```\n\n<h3 id=\"m6\">6：poi和jxl选择<h3>\n不用想了、肯定poi  因为jxl很久不更新了。poi现在是apache的项目、前景好、文档全\n","source":"_posts/java/poi和jxl操作office.md","raw":"---\ntitle: 'java操控excel相关(poi,jxl)笔记'\ncategories: 笔记\ntags:\n  - java\n  - tools\nabbrlink: d3259856\ndate: 2017-11-11 00:00:00\n---\n\n\n1. [poi和jxl介绍](#m1)\n2. [poi和jxl操作excel不同点](#m2)\n3. [poi读写excel实例](#m3)\n4. [jxl读写excel实例](#m4)\n5. [poi读写word实例](#m5)\n6. [poi和jxl选择](#m6)\n\n<h3 id=\"m1\">1:poi和jxl介绍</h3>\n\n####    1.1:poi\n         poi是对所有office资源进行读写的一套工具包、属于apache开源组织。\n#### 1.2:jxl\n         jxl只能对excel进行操作的一套工具包。\n<h3 id=\"m2\">2:两者操作excel不同点</h3>\n\n         poi和jxl都是封装了对excel操作方法;\n         poi是把整个文件的属性都封装在HSSFWorkbook 中;\n         通过HSSFWorkbook来操作单个工作薄。然后通过工作薄来操作行;\n         在通过行来操控单元格。这样一级一级的分拆下来;\n         HSSFWorkbook---->HSSFSheet----->HSSFRow---->HSSFCell;\n         由于是基于HSSFWorkbook对象一步步创建起来的。所以不用把创建好的单元格添加进这个对象中、\n         如果需要对部分表格进行设置样式什么的。就可以创立HSSFCellStyle对象来进行设定样式;\n\n          jxl是把整个文件封装在Workbook相关对象中;\n          通过Workbook去创建sheet工作薄;但是和poi不一样的地方是\n          jxl是通过向sheet中使用label(单元格)来进行读取写入;\n          Workbook----->sheet------>label ;\n          jxl是先创建一个工作区域、然后区创立单元格、单元格包含这个单元格的位置、内容等信息;然后把这个单元格加入工作区;\n\n###3：poi读写excel文件的实例(代码中fileURL是你存放路径)\n```\n//写入\npublic void poiWriteExcel() {\n        //创建excel工作薄\n        HSSFWorkbook hssfWorkbook = new HSSFWorkbook();\n        //在里面创建一个sheet 名字为工作薄1\n        HSSFSheet hssfSheet = hssfWorkbook.createSheet(\"工作薄1\");\n        //在索引为o的位置创建行 也就是第一行\n        HSSFRow oneRow = hssfSheet.createRow(0);\n        //创建红色字体\n        HSSFFont font = hssfWorkbook.createFont();\n        font.setColor(HSSFFont.COLOR_RED);\n        //创建格式、\n        HSSFCellStyle cellStyle = hssfWorkbook.createCellStyle();\n        cellStyle.setFont(font);\n        //在第o行创建第一个单元格\n        HSSFCell cell = oneRow.createCell(0);\n        //使用单元格格式\n        cell.setCellStyle(cellStyle);\n        //在第一个单元格输入内容\n        cell.setCellValue(\"xu\");\n        //创建一个第十行\n        HSSFRow tenRow = hssfSheet.createRow(9);\n        //创建输出流\n        try {\n            FileOutputStream fileOutputStream = new FileOutputStream(fileURL + \"xianyu.xls\");\n            //存储工作博\n            hssfWorkbook.write(fileOutputStream);\n            fileOutputStream.flush();\n            fileOutputStream.close();\n        } catch (IOException e) {\n            System.out.println(\"无法写入\");\n            e.printStackTrace();\n        }\n    }\n\n//读取\npublic void poiReadExcel() {\n\n        HSSFWorkbook hssfWorkBook = null;\n        try {\n            hssfWorkBook = new HSSFWorkbook(new FileInputStream(fileURL + \"xianyu.xls\"));\n            //获取第一个工作薄\n            HSSFSheet hssfSheet = hssfWorkBook.getSheetAt(0);\n            //获取第一行\n            HSSFRow row = hssfSheet.getRow(0);\n            System.out.println(row.getCell(0));\n        } catch (IOException e) {\n            System.out.println(\"无法读取\");\n            e.printStackTrace();\n        }\n    }\n```\n###4:jxl读写excel\n```\n//写入\npublic void jxlWriteExcel() {\n        try {\n            //创建xls\n            WritableWorkbook wwb = Workbook.createWorkbook(\n                    new FileOutputStream(fileURL + \"xianyujxl.xls\"));\n            //添加工作薄\n            WritableSheet sheet = wwb.createSheet(\"工作薄1\", 0);\n            //添加单元格 Label(x,y,z) x=列 y=行 z=内容\n            Label label = new Label(0, 0, \"xu\");\n            //添加进工作薄\n            sheet.addCell(label);\n            // 写数据\n            wwb.write();\n            wwb.close();\n        } catch (IOException e) {\n            System.out.println(\"写入失败\");\n            e.printStackTrace();\n        } catch (WriteException e) {\n            e.printStackTrace();\n        }\n    }\n\n//读取\npublic void jxlReadExcel() {\n        try {\n            //获取excel\n            Workbook wb = Workbook.getWorkbook(\n                    new FileInputStream(fileURL + \"xianyujxl.xls\"));\n            //获取sheet工作薄\n            Sheet sheet = wb.getSheet(0);\n            System.out.println(sheet.getCell(0, 0).getContents());\n        } catch (IOException | BiffException e) {\n            e.printStackTrace();\n        }\n    }\n\n```\n###5:poi读写word\n```\n//写入\npublic void poiWriteWord() {\n        try {\n            //创建word文件\n            XWPFDocument xwpfDocument = new XWPFDocument();\n            //新建段落\n            XWPFParagraph xwpfP = xwpfDocument.createParagraph();\n            //创建文本\n            XWPFRun xwpfR = xwpfP.createRun();\n            xwpfR.setText(\"xu\");\n            xwpfDocument.write(new FileOutputStream(fileURL + \"xianyu.doc\"));\n        } catch (IOException e) {\n            System.out.println(\"无法写入\");\n            e.printStackTrace();\n        }\n    }\n\n//读取\npublic void poiReadWord() {\n        //获取doc对象\n        XWPFDocument xwpfDocument;\n        try {\n            xwpfDocument = new XWPFDocument(new FileInputStream(fileURL + \"xianyu.doc\"));\n            //获取段落并且遍历\n            xwpfDocument.getParagraphs().forEach(xwpfParagraph\n                    -> System.out.println(xwpfParagraph.getText()));\n        } catch (IOException e) {\n            System.out.println(\"无法读取\");\n            e.printStackTrace();\n        }\n    }\n```\n\n<h3 id=\"m6\">6：poi和jxl选择<h3>\n不用想了、肯定poi  因为jxl很久不更新了。poi现在是apache的项目、前景好、文档全\n","slug":"java/poi和jxl操作office","published":1,"updated":"2018-08-17T08:10:03.923Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjo9uatx80010mwczeq15cnjb","content":"<ol><li><a href=\"#m1\">poi和jxl介绍</a></li><li><a href=\"#m2\">poi和jxl操作excel不同点</a></li><li><a href=\"#m3\">poi读写excel实例</a></li><li><a href=\"#m4\">jxl读写excel实例</a></li><li><a href=\"#m5\">poi读写word实例</a></li><li><a href=\"#m6\">poi和jxl选择</a></li></ol><h3 id=\"m1\">1:poi和jxl介绍</h3><h4 id=\"1-1-poi\"><a href=\"#1-1-poi\" class=\"headerlink\" title=\"1.1:poi\"></a>1.1:poi</h4><pre><code>poi是对所有office资源进行读写的一套工具包、属于apache开源组织。\n</code></pre><h4 id=\"1-2-jxl\"><a href=\"#1-2-jxl\" class=\"headerlink\" title=\"1.2:jxl\"></a>1.2:jxl</h4><pre><code>jxl只能对excel进行操作的一套工具包。\n</code></pre><h3 id=\"m2\">2:两者操作excel不同点</h3><pre><code>poi和jxl都是封装了对excel操作方法;\npoi是把整个文件的属性都封装在HSSFWorkbook 中;\n通过HSSFWorkbook来操作单个工作薄。然后通过工作薄来操作行;\n在通过行来操控单元格。这样一级一级的分拆下来;\nHSSFWorkbook----&gt;HSSFSheet-----&gt;HSSFRow----&gt;HSSFCell;\n由于是基于HSSFWorkbook对象一步步创建起来的。所以不用把创建好的单元格添加进这个对象中、\n如果需要对部分表格进行设置样式什么的。就可以创立HSSFCellStyle对象来进行设定样式;\n\n jxl是把整个文件封装在Workbook相关对象中;\n 通过Workbook去创建sheet工作薄;但是和poi不一样的地方是\n jxl是通过向sheet中使用label(单元格)来进行读取写入;\n Workbook-----&gt;sheet------&gt;label ;\n jxl是先创建一个工作区域、然后区创立单元格、单元格包含这个单元格的位置、内容等信息;然后把这个单元格加入工作区;\n</code></pre><p>###3：poi读写excel文件的实例(代码中fileURL是你存放路径)<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//写入</span><br><span class=\"line\">public void poiWriteExcel() &#123;</span><br><span class=\"line\">        //创建excel工作薄</span><br><span class=\"line\">        HSSFWorkbook hssfWorkbook = new HSSFWorkbook();</span><br><span class=\"line\">        //在里面创建一个sheet 名字为工作薄1</span><br><span class=\"line\">        HSSFSheet hssfSheet = hssfWorkbook.createSheet(&quot;工作薄1&quot;);</span><br><span class=\"line\">        //在索引为o的位置创建行 也就是第一行</span><br><span class=\"line\">        HSSFRow oneRow = hssfSheet.createRow(0);</span><br><span class=\"line\">        //创建红色字体</span><br><span class=\"line\">        HSSFFont font = hssfWorkbook.createFont();</span><br><span class=\"line\">        font.setColor(HSSFFont.COLOR_RED);</span><br><span class=\"line\">        //创建格式、</span><br><span class=\"line\">        HSSFCellStyle cellStyle = hssfWorkbook.createCellStyle();</span><br><span class=\"line\">        cellStyle.setFont(font);</span><br><span class=\"line\">        //在第o行创建第一个单元格</span><br><span class=\"line\">        HSSFCell cell = oneRow.createCell(0);</span><br><span class=\"line\">        //使用单元格格式</span><br><span class=\"line\">        cell.setCellStyle(cellStyle);</span><br><span class=\"line\">        //在第一个单元格输入内容</span><br><span class=\"line\">        cell.setCellValue(&quot;xu&quot;);</span><br><span class=\"line\">        //创建一个第十行</span><br><span class=\"line\">        HSSFRow tenRow = hssfSheet.createRow(9);</span><br><span class=\"line\">        //创建输出流</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            FileOutputStream fileOutputStream = new FileOutputStream(fileURL + &quot;xianyu.xls&quot;);</span><br><span class=\"line\">            //存储工作博</span><br><span class=\"line\">            hssfWorkbook.write(fileOutputStream);</span><br><span class=\"line\">            fileOutputStream.flush();</span><br><span class=\"line\">            fileOutputStream.close();</span><br><span class=\"line\">        &#125; catch (IOException e) &#123;</span><br><span class=\"line\">            System.out.println(&quot;无法写入&quot;);</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//读取</span><br><span class=\"line\">public void poiReadExcel() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        HSSFWorkbook hssfWorkBook = null;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            hssfWorkBook = new HSSFWorkbook(new FileInputStream(fileURL + &quot;xianyu.xls&quot;));</span><br><span class=\"line\">            //获取第一个工作薄</span><br><span class=\"line\">            HSSFSheet hssfSheet = hssfWorkBook.getSheetAt(0);</span><br><span class=\"line\">            //获取第一行</span><br><span class=\"line\">            HSSFRow row = hssfSheet.getRow(0);</span><br><span class=\"line\">            System.out.println(row.getCell(0));</span><br><span class=\"line\">        &#125; catch (IOException e) &#123;</span><br><span class=\"line\">            System.out.println(&quot;无法读取&quot;);</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure><p></p>\n<p>###4:jxl读写excel<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//写入</span><br><span class=\"line\">public void jxlWriteExcel() &#123;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            //创建xls</span><br><span class=\"line\">            WritableWorkbook wwb = Workbook.createWorkbook(</span><br><span class=\"line\">                    new FileOutputStream(fileURL + &quot;xianyujxl.xls&quot;));</span><br><span class=\"line\">            //添加工作薄</span><br><span class=\"line\">            WritableSheet sheet = wwb.createSheet(&quot;工作薄1&quot;, 0);</span><br><span class=\"line\">            //添加单元格 Label(x,y,z) x=列 y=行 z=内容</span><br><span class=\"line\">            Label label = new Label(0, 0, &quot;xu&quot;);</span><br><span class=\"line\">            //添加进工作薄</span><br><span class=\"line\">            sheet.addCell(label);</span><br><span class=\"line\">            // 写数据</span><br><span class=\"line\">            wwb.write();</span><br><span class=\"line\">            wwb.close();</span><br><span class=\"line\">        &#125; catch (IOException e) &#123;</span><br><span class=\"line\">            System.out.println(&quot;写入失败&quot;);</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; catch (WriteException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//读取</span><br><span class=\"line\">public void jxlReadExcel() &#123;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            //获取excel</span><br><span class=\"line\">            Workbook wb = Workbook.getWorkbook(</span><br><span class=\"line\">                    new FileInputStream(fileURL + &quot;xianyujxl.xls&quot;));</span><br><span class=\"line\">            //获取sheet工作薄</span><br><span class=\"line\">            Sheet sheet = wb.getSheet(0);</span><br><span class=\"line\">            System.out.println(sheet.getCell(0, 0).getContents());</span><br><span class=\"line\">        &#125; catch (IOException | BiffException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure><p></p>\n<p>###5:poi读写word<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//写入</span><br><span class=\"line\">public void poiWriteWord() &#123;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            //创建word文件</span><br><span class=\"line\">            XWPFDocument xwpfDocument = new XWPFDocument();</span><br><span class=\"line\">            //新建段落</span><br><span class=\"line\">            XWPFParagraph xwpfP = xwpfDocument.createParagraph();</span><br><span class=\"line\">            //创建文本</span><br><span class=\"line\">            XWPFRun xwpfR = xwpfP.createRun();</span><br><span class=\"line\">            xwpfR.setText(&quot;xu&quot;);</span><br><span class=\"line\">            xwpfDocument.write(new FileOutputStream(fileURL + &quot;xianyu.doc&quot;));</span><br><span class=\"line\">        &#125; catch (IOException e) &#123;</span><br><span class=\"line\">            System.out.println(&quot;无法写入&quot;);</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//读取</span><br><span class=\"line\">public void poiReadWord() &#123;</span><br><span class=\"line\">        //获取doc对象</span><br><span class=\"line\">        XWPFDocument xwpfDocument;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            xwpfDocument = new XWPFDocument(new FileInputStream(fileURL + &quot;xianyu.doc&quot;));</span><br><span class=\"line\">            //获取段落并且遍历</span><br><span class=\"line\">            xwpfDocument.getParagraphs().forEach(xwpfParagraph</span><br><span class=\"line\">                    -&gt; System.out.println(xwpfParagraph.getText()));</span><br><span class=\"line\">        &#125; catch (IOException e) &#123;</span><br><span class=\"line\">            System.out.println(&quot;无法读取&quot;);</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure><p></p>\n<p></p><h3 id=\"m6\">6：poi和jxl选择<h3><br>不用想了、肯定poi  因为jxl很久不更新了。poi现在是apache的项目、前景好、文档全<p></p></h3></h3>","site":{"data":{}},"excerpt":"","more":"<ol><li><a href=\"#m1\">poi和jxl介绍</a></li><li><a href=\"#m2\">poi和jxl操作excel不同点</a></li><li><a href=\"#m3\">poi读写excel实例</a></li><li><a href=\"#m4\">jxl读写excel实例</a></li><li><a href=\"#m5\">poi读写word实例</a></li><li><a href=\"#m6\">poi和jxl选择</a></li></ol><h3 id=\"m1\">1:poi和jxl介绍</h3><h4 id=\"1-1-poi\"><a href=\"#1-1-poi\" class=\"headerlink\" title=\"1.1:poi\"></a>1.1:poi</h4><pre><code>poi是对所有office资源进行读写的一套工具包、属于apache开源组织。\n</code></pre><h4 id=\"1-2-jxl\"><a href=\"#1-2-jxl\" class=\"headerlink\" title=\"1.2:jxl\"></a>1.2:jxl</h4><pre><code>jxl只能对excel进行操作的一套工具包。\n</code></pre><h3 id=\"m2\">2:两者操作excel不同点</h3><pre><code>poi和jxl都是封装了对excel操作方法;\npoi是把整个文件的属性都封装在HSSFWorkbook 中;\n通过HSSFWorkbook来操作单个工作薄。然后通过工作薄来操作行;\n在通过行来操控单元格。这样一级一级的分拆下来;\nHSSFWorkbook----&gt;HSSFSheet-----&gt;HSSFRow----&gt;HSSFCell;\n由于是基于HSSFWorkbook对象一步步创建起来的。所以不用把创建好的单元格添加进这个对象中、\n如果需要对部分表格进行设置样式什么的。就可以创立HSSFCellStyle对象来进行设定样式;\n\n jxl是把整个文件封装在Workbook相关对象中;\n 通过Workbook去创建sheet工作薄;但是和poi不一样的地方是\n jxl是通过向sheet中使用label(单元格)来进行读取写入;\n Workbook-----&gt;sheet------&gt;label ;\n jxl是先创建一个工作区域、然后区创立单元格、单元格包含这个单元格的位置、内容等信息;然后把这个单元格加入工作区;\n</code></pre><p>###3：poi读写excel文件的实例(代码中fileURL是你存放路径)<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//写入</span><br><span class=\"line\">public void poiWriteExcel() &#123;</span><br><span class=\"line\">        //创建excel工作薄</span><br><span class=\"line\">        HSSFWorkbook hssfWorkbook = new HSSFWorkbook();</span><br><span class=\"line\">        //在里面创建一个sheet 名字为工作薄1</span><br><span class=\"line\">        HSSFSheet hssfSheet = hssfWorkbook.createSheet(&quot;工作薄1&quot;);</span><br><span class=\"line\">        //在索引为o的位置创建行 也就是第一行</span><br><span class=\"line\">        HSSFRow oneRow = hssfSheet.createRow(0);</span><br><span class=\"line\">        //创建红色字体</span><br><span class=\"line\">        HSSFFont font = hssfWorkbook.createFont();</span><br><span class=\"line\">        font.setColor(HSSFFont.COLOR_RED);</span><br><span class=\"line\">        //创建格式、</span><br><span class=\"line\">        HSSFCellStyle cellStyle = hssfWorkbook.createCellStyle();</span><br><span class=\"line\">        cellStyle.setFont(font);</span><br><span class=\"line\">        //在第o行创建第一个单元格</span><br><span class=\"line\">        HSSFCell cell = oneRow.createCell(0);</span><br><span class=\"line\">        //使用单元格格式</span><br><span class=\"line\">        cell.setCellStyle(cellStyle);</span><br><span class=\"line\">        //在第一个单元格输入内容</span><br><span class=\"line\">        cell.setCellValue(&quot;xu&quot;);</span><br><span class=\"line\">        //创建一个第十行</span><br><span class=\"line\">        HSSFRow tenRow = hssfSheet.createRow(9);</span><br><span class=\"line\">        //创建输出流</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            FileOutputStream fileOutputStream = new FileOutputStream(fileURL + &quot;xianyu.xls&quot;);</span><br><span class=\"line\">            //存储工作博</span><br><span class=\"line\">            hssfWorkbook.write(fileOutputStream);</span><br><span class=\"line\">            fileOutputStream.flush();</span><br><span class=\"line\">            fileOutputStream.close();</span><br><span class=\"line\">        &#125; catch (IOException e) &#123;</span><br><span class=\"line\">            System.out.println(&quot;无法写入&quot;);</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//读取</span><br><span class=\"line\">public void poiReadExcel() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        HSSFWorkbook hssfWorkBook = null;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            hssfWorkBook = new HSSFWorkbook(new FileInputStream(fileURL + &quot;xianyu.xls&quot;));</span><br><span class=\"line\">            //获取第一个工作薄</span><br><span class=\"line\">            HSSFSheet hssfSheet = hssfWorkBook.getSheetAt(0);</span><br><span class=\"line\">            //获取第一行</span><br><span class=\"line\">            HSSFRow row = hssfSheet.getRow(0);</span><br><span class=\"line\">            System.out.println(row.getCell(0));</span><br><span class=\"line\">        &#125; catch (IOException e) &#123;</span><br><span class=\"line\">            System.out.println(&quot;无法读取&quot;);</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure><p></p>\n<p>###4:jxl读写excel<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//写入</span><br><span class=\"line\">public void jxlWriteExcel() &#123;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            //创建xls</span><br><span class=\"line\">            WritableWorkbook wwb = Workbook.createWorkbook(</span><br><span class=\"line\">                    new FileOutputStream(fileURL + &quot;xianyujxl.xls&quot;));</span><br><span class=\"line\">            //添加工作薄</span><br><span class=\"line\">            WritableSheet sheet = wwb.createSheet(&quot;工作薄1&quot;, 0);</span><br><span class=\"line\">            //添加单元格 Label(x,y,z) x=列 y=行 z=内容</span><br><span class=\"line\">            Label label = new Label(0, 0, &quot;xu&quot;);</span><br><span class=\"line\">            //添加进工作薄</span><br><span class=\"line\">            sheet.addCell(label);</span><br><span class=\"line\">            // 写数据</span><br><span class=\"line\">            wwb.write();</span><br><span class=\"line\">            wwb.close();</span><br><span class=\"line\">        &#125; catch (IOException e) &#123;</span><br><span class=\"line\">            System.out.println(&quot;写入失败&quot;);</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; catch (WriteException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//读取</span><br><span class=\"line\">public void jxlReadExcel() &#123;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            //获取excel</span><br><span class=\"line\">            Workbook wb = Workbook.getWorkbook(</span><br><span class=\"line\">                    new FileInputStream(fileURL + &quot;xianyujxl.xls&quot;));</span><br><span class=\"line\">            //获取sheet工作薄</span><br><span class=\"line\">            Sheet sheet = wb.getSheet(0);</span><br><span class=\"line\">            System.out.println(sheet.getCell(0, 0).getContents());</span><br><span class=\"line\">        &#125; catch (IOException | BiffException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure><p></p>\n<p>###5:poi读写word<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//写入</span><br><span class=\"line\">public void poiWriteWord() &#123;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            //创建word文件</span><br><span class=\"line\">            XWPFDocument xwpfDocument = new XWPFDocument();</span><br><span class=\"line\">            //新建段落</span><br><span class=\"line\">            XWPFParagraph xwpfP = xwpfDocument.createParagraph();</span><br><span class=\"line\">            //创建文本</span><br><span class=\"line\">            XWPFRun xwpfR = xwpfP.createRun();</span><br><span class=\"line\">            xwpfR.setText(&quot;xu&quot;);</span><br><span class=\"line\">            xwpfDocument.write(new FileOutputStream(fileURL + &quot;xianyu.doc&quot;));</span><br><span class=\"line\">        &#125; catch (IOException e) &#123;</span><br><span class=\"line\">            System.out.println(&quot;无法写入&quot;);</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//读取</span><br><span class=\"line\">public void poiReadWord() &#123;</span><br><span class=\"line\">        //获取doc对象</span><br><span class=\"line\">        XWPFDocument xwpfDocument;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            xwpfDocument = new XWPFDocument(new FileInputStream(fileURL + &quot;xianyu.doc&quot;));</span><br><span class=\"line\">            //获取段落并且遍历</span><br><span class=\"line\">            xwpfDocument.getParagraphs().forEach(xwpfParagraph</span><br><span class=\"line\">                    -&gt; System.out.println(xwpfParagraph.getText()));</span><br><span class=\"line\">        &#125; catch (IOException e) &#123;</span><br><span class=\"line\">            System.out.println(&quot;无法读取&quot;);</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure><p></p>\n<p></p><h3 id=\"m6\">6：poi和jxl选择<h3><br>不用想了、肯定poi  因为jxl很久不更新了。poi现在是apache的项目、前景好、文档全<p></p></h3></h3>"},{"title":"web service笔记","abbrlink":"a451f549","date":"2017-11-10T16:00:00.000Z","_content":"##web service 三要素 soap、wsdl、uddi\n###soap(Simple Object Access Protocol) 简单对象访问协议\nsoap是一种对象访问通信协议 基于xml的协议 用来访问结构化和固化的信息 \n\n主要特点 制定程序之间的通信、消息格式; 独立平台、语言;基于xml;允许绕过防火墙;w3c标准\n\n\n######soap消息是一个xml文档: \n必须包含Envelope元素 (标识此xml文档为soap消息)\n必须包含Body元素(包含所有调用和响应的信息)\n可选Header元素(头部信息)、Fault(处理此消息发生的错误信息)\n\n语法规则:\nsoap消息必须是xml\nsoap消息必须使用soap Envelope、soap Encoding 命名空间来保证规范\nsoap消息不能包含DTD\nsoap不能包含xml处理指令\n```\n<?xml version=\"1.0\">\n<soap:Envelope\nxmlns:soap=\"http://www.w3.org/2001/12/soap-envelope\"\nsoap:encodingStyle=\"http://www.w3.org/2001/12/soap-encoding\">\n\n<soap:Body>\n\n</soap:Body>\n</soap:Envelope>\n```\nsoap消息的xml文档 一般包含Header、Body、Fault等三个元素 具体直接查询w3c文档\n\n###wsdl(Web Services Description Language )网络服务描述语言\nwsdl也是xml文档 用来描述网络服务  不是w3c标准\n主要元素:\nportType：web service 执行的操作\nmessage：web service 使用消息\ntypes：web service使用数据类型\nbinding：web service 使用的通信协议\n\n######portType端口\n提供四种类型  \n客户端主动\nOne-way:接受消息 不返回  \nRequest-response：此服务接受请求返回响应  \n服务端主动  \nSolicit-response:此服务发送请求等待响应  \nNotiication：此服务发送一个请求 不等待响应  \n######Request-response类型\n```\n<message name=\"myRequest“>\n    <part name=\"param\" type=”xs:string\"/>\n</message>\n\n<message name=\"myResponse\">\n    <part name=\"value\" type=\"xs:string\"/>\n</message>\n\n<portType name=\"myService\">\n    <operation name=\"myRequestResponse>\n        <input message=\"myRequest\"/>\n        <output message=\"myResponse\"/>\n    </operation>\n</portType>\n```\n上述例子 一个服务myService 定义了一个名字是myRequestResponse的操作\nmyRequestResponse接受一个myRequest的输入消息，返回一个myResponse消息\n\n######binding（并不是特别明白 只知道是seb service 具体细节的 以后明白了在补上)\n###uddi(Universal Description, Discovery and Integration) 描述、发现、集成服务\n看的不是特别明白 感觉就是一个列表 这个列表 里面存在大量的wsdl等相关信息 用来提供给其他调用方看的\n\n##总结:web service 三要素 soap消息、wsdl、uddi soap定义了消息的格式xml文档、wsdl定义了服务调用的xml文档、uddi整理归纳wsdl等相关文档\n","source":"_posts/java/webservice三要素.md","raw":"---\ntitle: web service笔记\ncategories: 笔记\ntags:\n  - java\n  - web service\nabbrlink: a451f549\ndate: 2017-11-11 00:00:00\n---\n##web service 三要素 soap、wsdl、uddi\n###soap(Simple Object Access Protocol) 简单对象访问协议\nsoap是一种对象访问通信协议 基于xml的协议 用来访问结构化和固化的信息 \n\n主要特点 制定程序之间的通信、消息格式; 独立平台、语言;基于xml;允许绕过防火墙;w3c标准\n\n\n######soap消息是一个xml文档: \n必须包含Envelope元素 (标识此xml文档为soap消息)\n必须包含Body元素(包含所有调用和响应的信息)\n可选Header元素(头部信息)、Fault(处理此消息发生的错误信息)\n\n语法规则:\nsoap消息必须是xml\nsoap消息必须使用soap Envelope、soap Encoding 命名空间来保证规范\nsoap消息不能包含DTD\nsoap不能包含xml处理指令\n```\n<?xml version=\"1.0\">\n<soap:Envelope\nxmlns:soap=\"http://www.w3.org/2001/12/soap-envelope\"\nsoap:encodingStyle=\"http://www.w3.org/2001/12/soap-encoding\">\n\n<soap:Body>\n\n</soap:Body>\n</soap:Envelope>\n```\nsoap消息的xml文档 一般包含Header、Body、Fault等三个元素 具体直接查询w3c文档\n\n###wsdl(Web Services Description Language )网络服务描述语言\nwsdl也是xml文档 用来描述网络服务  不是w3c标准\n主要元素:\nportType：web service 执行的操作\nmessage：web service 使用消息\ntypes：web service使用数据类型\nbinding：web service 使用的通信协议\n\n######portType端口\n提供四种类型  \n客户端主动\nOne-way:接受消息 不返回  \nRequest-response：此服务接受请求返回响应  \n服务端主动  \nSolicit-response:此服务发送请求等待响应  \nNotiication：此服务发送一个请求 不等待响应  \n######Request-response类型\n```\n<message name=\"myRequest“>\n    <part name=\"param\" type=”xs:string\"/>\n</message>\n\n<message name=\"myResponse\">\n    <part name=\"value\" type=\"xs:string\"/>\n</message>\n\n<portType name=\"myService\">\n    <operation name=\"myRequestResponse>\n        <input message=\"myRequest\"/>\n        <output message=\"myResponse\"/>\n    </operation>\n</portType>\n```\n上述例子 一个服务myService 定义了一个名字是myRequestResponse的操作\nmyRequestResponse接受一个myRequest的输入消息，返回一个myResponse消息\n\n######binding（并不是特别明白 只知道是seb service 具体细节的 以后明白了在补上)\n###uddi(Universal Description, Discovery and Integration) 描述、发现、集成服务\n看的不是特别明白 感觉就是一个列表 这个列表 里面存在大量的wsdl等相关信息 用来提供给其他调用方看的\n\n##总结:web service 三要素 soap消息、wsdl、uddi soap定义了消息的格式xml文档、wsdl定义了服务调用的xml文档、uddi整理归纳wsdl等相关文档\n","slug":"java/webservice三要素","published":1,"updated":"2018-08-17T08:10:03.923Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjo9uatx90012mwcze46e3d22","content":"<p>##web service 三要素 soap、wsdl、uddi</p><p>###soap(Simple Object Access Protocol) 简单对象访问协议<br>soap是一种对象访问通信协议 基于xml的协议 用来访问结构化和固化的信息</p><p>主要特点 制定程序之间的通信、消息格式; 独立平台、语言;基于xml;允许绕过防火墙;w3c标准</p><p>######soap消息是一个xml文档:<br>必须包含Envelope元素 (标识此xml文档为soap消息)<br>必须包含Body元素(包含所有调用和响应的信息)<br>可选Header元素(头部信息)、Fault(处理此消息发生的错误信息)</p><p>语法规则:<br>soap消息必须是xml<br>soap消息必须使用soap Envelope、soap Encoding 命名空间来保证规范<br>soap消息不能包含DTD<br>soap不能包含xml处理指令<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=&quot;1.0&quot;&gt;</span><br><span class=\"line\">&lt;soap:Envelope</span><br><span class=\"line\">xmlns:soap=&quot;http://www.w3.org/2001/12/soap-envelope&quot;</span><br><span class=\"line\">soap:encodingStyle=&quot;http://www.w3.org/2001/12/soap-encoding&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;soap:Body&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/soap:Body&gt;</span><br><span class=\"line\">&lt;/soap:Envelope&gt;</span><br></pre></td></tr></table></figure><p></p>\n<p>soap消息的xml文档 一般包含Header、Body、Fault等三个元素 具体直接查询w3c文档</p>\n<p>###wsdl(Web Services Description Language )网络服务描述语言<br>wsdl也是xml文档 用来描述网络服务  不是w3c标准<br>主要元素:<br>portType：web service 执行的操作<br>message：web service 使用消息<br>types：web service使用数据类型<br>binding：web service 使用的通信协议</p>\n<p>######portType端口<br>提供四种类型<br>客户端主动<br>One-way:接受消息 不返回<br>Request-response：此服务接受请求返回响应<br>服务端主动<br>Solicit-response:此服务发送请求等待响应<br>Notiication：此服务发送一个请求 不等待响应  </p>\n<p>######Request-response类型<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;message name=&quot;myRequest“&gt;</span><br><span class=\"line\">    &lt;part name=&quot;param&quot; type=”xs:string&quot;/&gt;</span><br><span class=\"line\">&lt;/message&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;message name=&quot;myResponse&quot;&gt;</span><br><span class=\"line\">    &lt;part name=&quot;value&quot; type=&quot;xs:string&quot;/&gt;</span><br><span class=\"line\">&lt;/message&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;portType name=&quot;myService&quot;&gt;</span><br><span class=\"line\">    &lt;operation name=&quot;myRequestResponse&gt;</span><br><span class=\"line\">        &lt;input message=&quot;myRequest&quot;/&gt;</span><br><span class=\"line\">        &lt;output message=&quot;myResponse&quot;/&gt;</span><br><span class=\"line\">    &lt;/operation&gt;</span><br><span class=\"line\">&lt;/portType&gt;</span><br></pre></td></tr></table></figure><p></p>\n<p>上述例子 一个服务myService 定义了一个名字是myRequestResponse的操作<br>myRequestResponse接受一个myRequest的输入消息，返回一个myResponse消息</p>\n<p>######binding（并不是特别明白 只知道是seb service 具体细节的 以后明白了在补上)</p>\n<p>###uddi(Universal Description, Discovery and Integration) 描述、发现、集成服务<br>看的不是特别明白 感觉就是一个列表 这个列表 里面存在大量的wsdl等相关信息 用来提供给其他调用方看的</p>\n<p>##总结:web service 三要素 soap消息、wsdl、uddi soap定义了消息的格式xml文档、wsdl定义了服务调用的xml文档、uddi整理归纳wsdl等相关文档</p>","site":{"data":{}},"excerpt":"","more":"<p>##web service 三要素 soap、wsdl、uddi</p><p>###soap(Simple Object Access Protocol) 简单对象访问协议<br>soap是一种对象访问通信协议 基于xml的协议 用来访问结构化和固化的信息</p><p>主要特点 制定程序之间的通信、消息格式; 独立平台、语言;基于xml;允许绕过防火墙;w3c标准</p><p>######soap消息是一个xml文档:<br>必须包含Envelope元素 (标识此xml文档为soap消息)<br>必须包含Body元素(包含所有调用和响应的信息)<br>可选Header元素(头部信息)、Fault(处理此消息发生的错误信息)</p><p>语法规则:<br>soap消息必须是xml<br>soap消息必须使用soap Envelope、soap Encoding 命名空间来保证规范<br>soap消息不能包含DTD<br>soap不能包含xml处理指令<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=&quot;1.0&quot;&gt;</span><br><span class=\"line\">&lt;soap:Envelope</span><br><span class=\"line\">xmlns:soap=&quot;http://www.w3.org/2001/12/soap-envelope&quot;</span><br><span class=\"line\">soap:encodingStyle=&quot;http://www.w3.org/2001/12/soap-encoding&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;soap:Body&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/soap:Body&gt;</span><br><span class=\"line\">&lt;/soap:Envelope&gt;</span><br></pre></td></tr></table></figure><p></p>\n<p>soap消息的xml文档 一般包含Header、Body、Fault等三个元素 具体直接查询w3c文档</p>\n<p>###wsdl(Web Services Description Language )网络服务描述语言<br>wsdl也是xml文档 用来描述网络服务  不是w3c标准<br>主要元素:<br>portType：web service 执行的操作<br>message：web service 使用消息<br>types：web service使用数据类型<br>binding：web service 使用的通信协议</p>\n<p>######portType端口<br>提供四种类型<br>客户端主动<br>One-way:接受消息 不返回<br>Request-response：此服务接受请求返回响应<br>服务端主动<br>Solicit-response:此服务发送请求等待响应<br>Notiication：此服务发送一个请求 不等待响应  </p>\n<p>######Request-response类型<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;message name=&quot;myRequest“&gt;</span><br><span class=\"line\">    &lt;part name=&quot;param&quot; type=”xs:string&quot;/&gt;</span><br><span class=\"line\">&lt;/message&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;message name=&quot;myResponse&quot;&gt;</span><br><span class=\"line\">    &lt;part name=&quot;value&quot; type=&quot;xs:string&quot;/&gt;</span><br><span class=\"line\">&lt;/message&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;portType name=&quot;myService&quot;&gt;</span><br><span class=\"line\">    &lt;operation name=&quot;myRequestResponse&gt;</span><br><span class=\"line\">        &lt;input message=&quot;myRequest&quot;/&gt;</span><br><span class=\"line\">        &lt;output message=&quot;myResponse&quot;/&gt;</span><br><span class=\"line\">    &lt;/operation&gt;</span><br><span class=\"line\">&lt;/portType&gt;</span><br></pre></td></tr></table></figure><p></p>\n<p>上述例子 一个服务myService 定义了一个名字是myRequestResponse的操作<br>myRequestResponse接受一个myRequest的输入消息，返回一个myResponse消息</p>\n<p>######binding（并不是特别明白 只知道是seb service 具体细节的 以后明白了在补上)</p>\n<p>###uddi(Universal Description, Discovery and Integration) 描述、发现、集成服务<br>看的不是特别明白 感觉就是一个列表 这个列表 里面存在大量的wsdl等相关信息 用来提供给其他调用方看的</p>\n<p>##总结:web service 三要素 soap消息、wsdl、uddi soap定义了消息的格式xml文档、wsdl定义了服务调用的xml文档、uddi整理归纳wsdl等相关文档</p>"},{"title":"xml和json的区别及其使用范围笔记","abbrlink":"d61f2d28","date":"2017-11-10T16:00:00.000Z","_content":"\n###老是有人问我xml和json区别、 特写此篇记录来列出xml和json区别，懒得每次都解释、网络中很多博客都没提到关键的区别点 自述性、规范性;其他什么解析方法、啥啥的都不是最重要的最主要的就是xml能够由很强的自述性、规范性\n###相同点:\n```\n1:都是一种数据传输格式\n2:都和平台没有关系 xml和json都是对平台没有限制 只需要按照他们的规则进行解析即可\n3:只要是能序列化和反序列化的数据都能传输 例如图片完全可以转成二进制或者16进制字符串传输然后反序列化成图片 （不推荐这样玩 容易损坏）\n```\n###不同点:\n``` \n1:xml具有自述性 就是可以包含自我描述的元数据 例如<name type=\"string\">xianyu</name>\n这个就描述了name的值是xianyu类型是string\njson就无法这样直观的表述 这样就用来写配置及其方便、准确 \n用json也能写配置只要你不怕看的头疼\n2:xml具有很强的规范性 你可以自己制定xml schema 来制定规范 json则没有这样的规范 只能间接的通过额外的json来为json定义格式 不方便而且麻烦\n```\n##如何选择\n```\n1:当需要传输具有元数据的数据的时候就肯定要用xml，\n2:当需要节省流量、简化数据解析的时候要用json\n```\n##解析难度\n```\nxml有sax和dom两种解析方式 都差不多 \nsax是把xml模拟成一个流然后对其中需要的字段进行解析 这种方法不能修改\ndom是按照xml的元素结构进行解析 一般都是直接把xml加载到内存进行分析 可以修改 \n\njson就是把它当作字符串进行基于json格式的解析 \n```\n##总结:\n###xml和json都由各自适用的范围不能说那个替代那个 json在做数据传输方面比xml好一点 毕竟没xml冗杂，但是在传输那种能需要自述性、和严格规范的数据的时候xml是无可替代的 在做webservice的时候 两种都会用 \n","source":"_posts/java/xml与json区别及其适用范围.md","raw":"---\ntitle: xml和json的区别及其使用范围笔记\ncategories: 笔记\ntags:\n  - java\n  - xml\n  - json\nabbrlink: d61f2d28\ndate: 2017-11-11 00:00:00\n---\n\n###老是有人问我xml和json区别、 特写此篇记录来列出xml和json区别，懒得每次都解释、网络中很多博客都没提到关键的区别点 自述性、规范性;其他什么解析方法、啥啥的都不是最重要的最主要的就是xml能够由很强的自述性、规范性\n###相同点:\n```\n1:都是一种数据传输格式\n2:都和平台没有关系 xml和json都是对平台没有限制 只需要按照他们的规则进行解析即可\n3:只要是能序列化和反序列化的数据都能传输 例如图片完全可以转成二进制或者16进制字符串传输然后反序列化成图片 （不推荐这样玩 容易损坏）\n```\n###不同点:\n``` \n1:xml具有自述性 就是可以包含自我描述的元数据 例如<name type=\"string\">xianyu</name>\n这个就描述了name的值是xianyu类型是string\njson就无法这样直观的表述 这样就用来写配置及其方便、准确 \n用json也能写配置只要你不怕看的头疼\n2:xml具有很强的规范性 你可以自己制定xml schema 来制定规范 json则没有这样的规范 只能间接的通过额外的json来为json定义格式 不方便而且麻烦\n```\n##如何选择\n```\n1:当需要传输具有元数据的数据的时候就肯定要用xml，\n2:当需要节省流量、简化数据解析的时候要用json\n```\n##解析难度\n```\nxml有sax和dom两种解析方式 都差不多 \nsax是把xml模拟成一个流然后对其中需要的字段进行解析 这种方法不能修改\ndom是按照xml的元素结构进行解析 一般都是直接把xml加载到内存进行分析 可以修改 \n\njson就是把它当作字符串进行基于json格式的解析 \n```\n##总结:\n###xml和json都由各自适用的范围不能说那个替代那个 json在做数据传输方面比xml好一点 毕竟没xml冗杂，但是在传输那种能需要自述性、和严格规范的数据的时候xml是无可替代的 在做webservice的时候 两种都会用 \n","slug":"java/xml与json区别及其适用范围","published":1,"updated":"2018-08-17T08:10:03.923Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjo9uatxb0015mwcz463vtbt1","content":"<p>###老是有人问我xml和json区别、 特写此篇记录来列出xml和json区别，懒得每次都解释、网络中很多博客都没提到关键的区别点 自述性、规范性;其他什么解析方法、啥啥的都不是最重要的最主要的就是xml能够由很强的自述性、规范性</p><p>###相同点:<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1:都是一种数据传输格式</span><br><span class=\"line\">2:都和平台没有关系 xml和json都是对平台没有限制 只需要按照他们的规则进行解析即可</span><br><span class=\"line\">3:只要是能序列化和反序列化的数据都能传输 例如图片完全可以转成二进制或者16进制字符串传输然后反序列化成图片 （不推荐这样玩 容易损坏）</span><br></pre></td></tr></table></figure><p></p>\n<p>###不同点:<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1:xml具有自述性 就是可以包含自我描述的元数据 例如&lt;name type=&quot;string&quot;&gt;xianyu&lt;/name&gt;</span><br><span class=\"line\">这个就描述了name的值是xianyu类型是string</span><br><span class=\"line\">json就无法这样直观的表述 这样就用来写配置及其方便、准确 </span><br><span class=\"line\">用json也能写配置只要你不怕看的头疼</span><br><span class=\"line\">2:xml具有很强的规范性 你可以自己制定xml schema 来制定规范 json则没有这样的规范 只能间接的通过额外的json来为json定义格式 不方便而且麻烦</span><br></pre></td></tr></table></figure><p></p>\n<p>##如何选择<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1:当需要传输具有元数据的数据的时候就肯定要用xml，</span><br><span class=\"line\">2:当需要节省流量、简化数据解析的时候要用json</span><br></pre></td></tr></table></figure><p></p>\n<p>##解析难度<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xml有sax和dom两种解析方式 都差不多 </span><br><span class=\"line\">sax是把xml模拟成一个流然后对其中需要的字段进行解析 这种方法不能修改</span><br><span class=\"line\">dom是按照xml的元素结构进行解析 一般都是直接把xml加载到内存进行分析 可以修改 </span><br><span class=\"line\"></span><br><span class=\"line\">json就是把它当作字符串进行基于json格式的解析</span><br></pre></td></tr></table></figure><p></p>\n<p>##总结:</p>\n<p>###xml和json都由各自适用的范围不能说那个替代那个 json在做数据传输方面比xml好一点 毕竟没xml冗杂，但是在传输那种能需要自述性、和严格规范的数据的时候xml是无可替代的 在做webservice的时候 两种都会用</p>","site":{"data":{}},"excerpt":"","more":"<p>###老是有人问我xml和json区别、 特写此篇记录来列出xml和json区别，懒得每次都解释、网络中很多博客都没提到关键的区别点 自述性、规范性;其他什么解析方法、啥啥的都不是最重要的最主要的就是xml能够由很强的自述性、规范性</p><p>###相同点:<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1:都是一种数据传输格式</span><br><span class=\"line\">2:都和平台没有关系 xml和json都是对平台没有限制 只需要按照他们的规则进行解析即可</span><br><span class=\"line\">3:只要是能序列化和反序列化的数据都能传输 例如图片完全可以转成二进制或者16进制字符串传输然后反序列化成图片 （不推荐这样玩 容易损坏）</span><br></pre></td></tr></table></figure><p></p>\n<p>###不同点:<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1:xml具有自述性 就是可以包含自我描述的元数据 例如&lt;name type=&quot;string&quot;&gt;xianyu&lt;/name&gt;</span><br><span class=\"line\">这个就描述了name的值是xianyu类型是string</span><br><span class=\"line\">json就无法这样直观的表述 这样就用来写配置及其方便、准确 </span><br><span class=\"line\">用json也能写配置只要你不怕看的头疼</span><br><span class=\"line\">2:xml具有很强的规范性 你可以自己制定xml schema 来制定规范 json则没有这样的规范 只能间接的通过额外的json来为json定义格式 不方便而且麻烦</span><br></pre></td></tr></table></figure><p></p>\n<p>##如何选择<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1:当需要传输具有元数据的数据的时候就肯定要用xml，</span><br><span class=\"line\">2:当需要节省流量、简化数据解析的时候要用json</span><br></pre></td></tr></table></figure><p></p>\n<p>##解析难度<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xml有sax和dom两种解析方式 都差不多 </span><br><span class=\"line\">sax是把xml模拟成一个流然后对其中需要的字段进行解析 这种方法不能修改</span><br><span class=\"line\">dom是按照xml的元素结构进行解析 一般都是直接把xml加载到内存进行分析 可以修改 </span><br><span class=\"line\"></span><br><span class=\"line\">json就是把它当作字符串进行基于json格式的解析</span><br></pre></td></tr></table></figure><p></p>\n<p>##总结:</p>\n<p>###xml和json都由各自适用的范围不能说那个替代那个 json在做数据传输方面比xml好一点 毕竟没xml冗杂，但是在传输那种能需要自述性、和严格规范的数据的时候xml是无可替代的 在做webservice的时候 两种都会用</p>"},{"title":"重写eq 必须重写hashcode的必要性","abbrlink":"605805fa","date":"2017-11-10T16:00:00.000Z","_content":"\n重写eq 必须重写hashCode的原因\n之前唆代码 每次都单独重写 eq 方法 hashCode从来不重写 这次遇到一个 Set<T> 的内容比较  一直返回的不是理想的结果  \n查看源码 发现 其实 最开始是直接使用 == 方式比较 到最后才会用eq方法比较 \n然后顺手写了一波实例 \n```\n/**\n * @author ming\n * @date 2017-10-31 11:30\n */\npublic class Test {\n    @org.junit.Test\n    public void test() {\n        Set<A> aSet1 = new HashSet<>();\n        aSet1.add(new A(\"a\", 1));\n        Set<A> aSet2 = new HashSet<>();\n        aSet2.add(new A(\"a\", 1));\n        System.out.println(\"未重写 eq  和hashCode---------\");\n        System.out.println(aSet1.equals(aSet2));\n        System.out.println();\n\n        Set<B> bSet1 = new HashSet<>();\n        bSet1.add(new B(\"b\", 1));\n        Set<B> bSet2 = new HashSet<>();\n        bSet2.add(new B(\"b\", 1));\n        System.out.println(\"重写 eq ----------\");\n        System.out.println(bSet1.equals(bSet2));\n        System.out.println();\n\n        Set<C> cSet1 = new HashSet<>();\n        cSet1.add(new C(\"c\", 1));\n        Set<C> cSet2 = new HashSet<>();\n        cSet2.add(new C(\"c\", 1));\n        System.out.println(\"重写 hashCode ------\");\n        System.out.println(cSet1.equals(cSet2));\n        System.out.println();\n\n        Set<D> dSet1 = new HashSet<>();\n        dSet1.add(new D(\"d\", 1));\n        Set<D> dSet2 = new HashSet<>();\n        dSet2.add(new D(\"d\", 1));\n        System.out.println(\"重写 eq  和hashCode----\");\n        System.out.println(dSet1.equals(dSet2));\n    }\n\n}\n\n@Getter\n@Setter\n@NoArgsConstructor\n@AllArgsConstructor\nclass A {\n    private String aName;\n    private Integer aNum;\n\n}\n\n@Getter\n@Setter\n@NoArgsConstructor\n@AllArgsConstructor\nclass B {\n    private String bName;\n    private Integer bNum;\n\n    @Override\n    public boolean equals(Object o) {\n        if (this == o) return true;\n        if (o == null || getClass() != o.getClass()) return false;\n\n        B b = (B) o;\n\n        if (bName != null ? !bName.equals(b.bName) : b.bName != null) return false;\n        return bNum != null ? bNum.equals(b.bNum) : b.bNum == null;\n    }\n\n}\n\n@Getter\n@Setter\n@NoArgsConstructor\n@AllArgsConstructor\nclass C {\n    private String cName;\n    private Integer cNum;\n\n\n    @Override\n    public int hashCode() {\n        int result = cName != null ? cName.hashCode() : 0;\n        result = 31 * result + (cNum != null ? cNum.hashCode() : 0);\n        return result;\n    }\n\n}\n\n@Getter\n@Setter\n@NoArgsConstructor\n@AllArgsConstructor\nclass D {\n    private String dName;\n    private Integer dNum;\n\n    @Override\n    public boolean equals(Object o) {\n        if (this == o) return true;\n        if (o == null || getClass() != o.getClass()) return false;\n\n        D d = (D) o;\n\n        if (dName != null ? !dName.equals(d.dName) : d.dName != null) return false;\n        return dNum != null ? dNum.equals(d.dNum) : d.dNum == null;\n    }\n\n    @Override\n    public int hashCode() {\n        int result = dName != null ? dName.hashCode() : 0;\n        result = 31 * result + (dNum != null ? dNum.hashCode() : 0);\n        return result;\n    }\n}\n```\n此实例看出 对于比较对象是否相同来说 单纯的重写 eq或者 hashCode都是没卵用  \n很多方法底层是包含 == 和eq方法比较的 除非非常熟悉 只用单独写eq或者HashCode  \n否则 都应该重写 避免达不到预期结果\n","source":"_posts/java/为何重写eq必须重写hashCode.md","raw":"---\ntitle: 重写eq 必须重写hashcode的必要性\ncategories: 笔记\ntags:\n  - java基础\nabbrlink: 605805fa\ndate: 2017-11-11 00:00:00\n---\n\n重写eq 必须重写hashCode的原因\n之前唆代码 每次都单独重写 eq 方法 hashCode从来不重写 这次遇到一个 Set<T> 的内容比较  一直返回的不是理想的结果  \n查看源码 发现 其实 最开始是直接使用 == 方式比较 到最后才会用eq方法比较 \n然后顺手写了一波实例 \n```\n/**\n * @author ming\n * @date 2017-10-31 11:30\n */\npublic class Test {\n    @org.junit.Test\n    public void test() {\n        Set<A> aSet1 = new HashSet<>();\n        aSet1.add(new A(\"a\", 1));\n        Set<A> aSet2 = new HashSet<>();\n        aSet2.add(new A(\"a\", 1));\n        System.out.println(\"未重写 eq  和hashCode---------\");\n        System.out.println(aSet1.equals(aSet2));\n        System.out.println();\n\n        Set<B> bSet1 = new HashSet<>();\n        bSet1.add(new B(\"b\", 1));\n        Set<B> bSet2 = new HashSet<>();\n        bSet2.add(new B(\"b\", 1));\n        System.out.println(\"重写 eq ----------\");\n        System.out.println(bSet1.equals(bSet2));\n        System.out.println();\n\n        Set<C> cSet1 = new HashSet<>();\n        cSet1.add(new C(\"c\", 1));\n        Set<C> cSet2 = new HashSet<>();\n        cSet2.add(new C(\"c\", 1));\n        System.out.println(\"重写 hashCode ------\");\n        System.out.println(cSet1.equals(cSet2));\n        System.out.println();\n\n        Set<D> dSet1 = new HashSet<>();\n        dSet1.add(new D(\"d\", 1));\n        Set<D> dSet2 = new HashSet<>();\n        dSet2.add(new D(\"d\", 1));\n        System.out.println(\"重写 eq  和hashCode----\");\n        System.out.println(dSet1.equals(dSet2));\n    }\n\n}\n\n@Getter\n@Setter\n@NoArgsConstructor\n@AllArgsConstructor\nclass A {\n    private String aName;\n    private Integer aNum;\n\n}\n\n@Getter\n@Setter\n@NoArgsConstructor\n@AllArgsConstructor\nclass B {\n    private String bName;\n    private Integer bNum;\n\n    @Override\n    public boolean equals(Object o) {\n        if (this == o) return true;\n        if (o == null || getClass() != o.getClass()) return false;\n\n        B b = (B) o;\n\n        if (bName != null ? !bName.equals(b.bName) : b.bName != null) return false;\n        return bNum != null ? bNum.equals(b.bNum) : b.bNum == null;\n    }\n\n}\n\n@Getter\n@Setter\n@NoArgsConstructor\n@AllArgsConstructor\nclass C {\n    private String cName;\n    private Integer cNum;\n\n\n    @Override\n    public int hashCode() {\n        int result = cName != null ? cName.hashCode() : 0;\n        result = 31 * result + (cNum != null ? cNum.hashCode() : 0);\n        return result;\n    }\n\n}\n\n@Getter\n@Setter\n@NoArgsConstructor\n@AllArgsConstructor\nclass D {\n    private String dName;\n    private Integer dNum;\n\n    @Override\n    public boolean equals(Object o) {\n        if (this == o) return true;\n        if (o == null || getClass() != o.getClass()) return false;\n\n        D d = (D) o;\n\n        if (dName != null ? !dName.equals(d.dName) : d.dName != null) return false;\n        return dNum != null ? dNum.equals(d.dNum) : d.dNum == null;\n    }\n\n    @Override\n    public int hashCode() {\n        int result = dName != null ? dName.hashCode() : 0;\n        result = 31 * result + (dNum != null ? dNum.hashCode() : 0);\n        return result;\n    }\n}\n```\n此实例看出 对于比较对象是否相同来说 单纯的重写 eq或者 hashCode都是没卵用  \n很多方法底层是包含 == 和eq方法比较的 除非非常熟悉 只用单独写eq或者HashCode  \n否则 都应该重写 避免达不到预期结果\n","slug":"java/为何重写eq必须重写hashCode","published":1,"updated":"2018-08-17T08:10:03.923Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjo9uatxh0017mwczfum4qagi","content":"<p>重写eq 必须重写hashCode的原因<br>之前唆代码 每次都单独重写 eq 方法 hashCode从来不重写 这次遇到一个 Set<t>的内容比较 一直返回的不是理想的结果<br>查看源码 发现 其实 最开始是直接使用 == 方式比较 到最后才会用eq方法比较<br>然后顺手写了一波实例<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * @author ming</span><br><span class=\"line\"> * @date 2017-10-31 11:30</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class Test &#123;</span><br><span class=\"line\">    @org.junit.Test</span><br><span class=\"line\">    public void test() &#123;</span><br><span class=\"line\">        Set&lt;A&gt; aSet1 = new HashSet&lt;&gt;();</span><br><span class=\"line\">        aSet1.add(new A(&quot;a&quot;, 1));</span><br><span class=\"line\">        Set&lt;A&gt; aSet2 = new HashSet&lt;&gt;();</span><br><span class=\"line\">        aSet2.add(new A(&quot;a&quot;, 1));</span><br><span class=\"line\">        System.out.println(&quot;未重写 eq  和hashCode---------&quot;);</span><br><span class=\"line\">        System.out.println(aSet1.equals(aSet2));</span><br><span class=\"line\">        System.out.println();</span><br><span class=\"line\"></span><br><span class=\"line\">        Set&lt;B&gt; bSet1 = new HashSet&lt;&gt;();</span><br><span class=\"line\">        bSet1.add(new B(&quot;b&quot;, 1));</span><br><span class=\"line\">        Set&lt;B&gt; bSet2 = new HashSet&lt;&gt;();</span><br><span class=\"line\">        bSet2.add(new B(&quot;b&quot;, 1));</span><br><span class=\"line\">        System.out.println(&quot;重写 eq ----------&quot;);</span><br><span class=\"line\">        System.out.println(bSet1.equals(bSet2));</span><br><span class=\"line\">        System.out.println();</span><br><span class=\"line\"></span><br><span class=\"line\">        Set&lt;C&gt; cSet1 = new HashSet&lt;&gt;();</span><br><span class=\"line\">        cSet1.add(new C(&quot;c&quot;, 1));</span><br><span class=\"line\">        Set&lt;C&gt; cSet2 = new HashSet&lt;&gt;();</span><br><span class=\"line\">        cSet2.add(new C(&quot;c&quot;, 1));</span><br><span class=\"line\">        System.out.println(&quot;重写 hashCode ------&quot;);</span><br><span class=\"line\">        System.out.println(cSet1.equals(cSet2));</span><br><span class=\"line\">        System.out.println();</span><br><span class=\"line\"></span><br><span class=\"line\">        Set&lt;D&gt; dSet1 = new HashSet&lt;&gt;();</span><br><span class=\"line\">        dSet1.add(new D(&quot;d&quot;, 1));</span><br><span class=\"line\">        Set&lt;D&gt; dSet2 = new HashSet&lt;&gt;();</span><br><span class=\"line\">        dSet2.add(new D(&quot;d&quot;, 1));</span><br><span class=\"line\">        System.out.println(&quot;重写 eq  和hashCode----&quot;);</span><br><span class=\"line\">        System.out.println(dSet1.equals(dSet2));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@Getter</span><br><span class=\"line\">@Setter</span><br><span class=\"line\">@NoArgsConstructor</span><br><span class=\"line\">@AllArgsConstructor</span><br><span class=\"line\">class A &#123;</span><br><span class=\"line\">    private String aName;</span><br><span class=\"line\">    private Integer aNum;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@Getter</span><br><span class=\"line\">@Setter</span><br><span class=\"line\">@NoArgsConstructor</span><br><span class=\"line\">@AllArgsConstructor</span><br><span class=\"line\">class B &#123;</span><br><span class=\"line\">    private String bName;</span><br><span class=\"line\">    private Integer bNum;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public boolean equals(Object o) &#123;</span><br><span class=\"line\">        if (this == o) return true;</span><br><span class=\"line\">        if (o == null || getClass() != o.getClass()) return false;</span><br><span class=\"line\"></span><br><span class=\"line\">        B b = (B) o;</span><br><span class=\"line\"></span><br><span class=\"line\">        if (bName != null ? !bName.equals(b.bName) : b.bName != null) return false;</span><br><span class=\"line\">        return bNum != null ? bNum.equals(b.bNum) : b.bNum == null;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@Getter</span><br><span class=\"line\">@Setter</span><br><span class=\"line\">@NoArgsConstructor</span><br><span class=\"line\">@AllArgsConstructor</span><br><span class=\"line\">class C &#123;</span><br><span class=\"line\">    private String cName;</span><br><span class=\"line\">    private Integer cNum;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public int hashCode() &#123;</span><br><span class=\"line\">        int result = cName != null ? cName.hashCode() : 0;</span><br><span class=\"line\">        result = 31 * result + (cNum != null ? cNum.hashCode() : 0);</span><br><span class=\"line\">        return result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@Getter</span><br><span class=\"line\">@Setter</span><br><span class=\"line\">@NoArgsConstructor</span><br><span class=\"line\">@AllArgsConstructor</span><br><span class=\"line\">class D &#123;</span><br><span class=\"line\">    private String dName;</span><br><span class=\"line\">    private Integer dNum;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public boolean equals(Object o) &#123;</span><br><span class=\"line\">        if (this == o) return true;</span><br><span class=\"line\">        if (o == null || getClass() != o.getClass()) return false;</span><br><span class=\"line\"></span><br><span class=\"line\">        D d = (D) o;</span><br><span class=\"line\"></span><br><span class=\"line\">        if (dName != null ? !dName.equals(d.dName) : d.dName != null) return false;</span><br><span class=\"line\">        return dNum != null ? dNum.equals(d.dNum) : d.dNum == null;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public int hashCode() &#123;</span><br><span class=\"line\">        int result = dName != null ? dName.hashCode() : 0;</span><br><span class=\"line\">        result = 31 * result + (dNum != null ? dNum.hashCode() : 0);</span><br><span class=\"line\">        return result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></t></p>\n<p>此实例看出 对于比较对象是否相同来说 单纯的重写 eq或者 hashCode都是没卵用<br>很多方法底层是包含 == 和eq方法比较的 除非非常熟悉 只用单独写eq或者HashCode<br>否则 都应该重写 避免达不到预期结果</p>","site":{"data":{}},"excerpt":"","more":"<p>重写eq 必须重写hashCode的原因<br>之前唆代码 每次都单独重写 eq 方法 hashCode从来不重写 这次遇到一个 Set<t>的内容比较 一直返回的不是理想的结果<br>查看源码 发现 其实 最开始是直接使用 == 方式比较 到最后才会用eq方法比较<br>然后顺手写了一波实例<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * @author ming</span><br><span class=\"line\"> * @date 2017-10-31 11:30</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class Test &#123;</span><br><span class=\"line\">    @org.junit.Test</span><br><span class=\"line\">    public void test() &#123;</span><br><span class=\"line\">        Set&lt;A&gt; aSet1 = new HashSet&lt;&gt;();</span><br><span class=\"line\">        aSet1.add(new A(&quot;a&quot;, 1));</span><br><span class=\"line\">        Set&lt;A&gt; aSet2 = new HashSet&lt;&gt;();</span><br><span class=\"line\">        aSet2.add(new A(&quot;a&quot;, 1));</span><br><span class=\"line\">        System.out.println(&quot;未重写 eq  和hashCode---------&quot;);</span><br><span class=\"line\">        System.out.println(aSet1.equals(aSet2));</span><br><span class=\"line\">        System.out.println();</span><br><span class=\"line\"></span><br><span class=\"line\">        Set&lt;B&gt; bSet1 = new HashSet&lt;&gt;();</span><br><span class=\"line\">        bSet1.add(new B(&quot;b&quot;, 1));</span><br><span class=\"line\">        Set&lt;B&gt; bSet2 = new HashSet&lt;&gt;();</span><br><span class=\"line\">        bSet2.add(new B(&quot;b&quot;, 1));</span><br><span class=\"line\">        System.out.println(&quot;重写 eq ----------&quot;);</span><br><span class=\"line\">        System.out.println(bSet1.equals(bSet2));</span><br><span class=\"line\">        System.out.println();</span><br><span class=\"line\"></span><br><span class=\"line\">        Set&lt;C&gt; cSet1 = new HashSet&lt;&gt;();</span><br><span class=\"line\">        cSet1.add(new C(&quot;c&quot;, 1));</span><br><span class=\"line\">        Set&lt;C&gt; cSet2 = new HashSet&lt;&gt;();</span><br><span class=\"line\">        cSet2.add(new C(&quot;c&quot;, 1));</span><br><span class=\"line\">        System.out.println(&quot;重写 hashCode ------&quot;);</span><br><span class=\"line\">        System.out.println(cSet1.equals(cSet2));</span><br><span class=\"line\">        System.out.println();</span><br><span class=\"line\"></span><br><span class=\"line\">        Set&lt;D&gt; dSet1 = new HashSet&lt;&gt;();</span><br><span class=\"line\">        dSet1.add(new D(&quot;d&quot;, 1));</span><br><span class=\"line\">        Set&lt;D&gt; dSet2 = new HashSet&lt;&gt;();</span><br><span class=\"line\">        dSet2.add(new D(&quot;d&quot;, 1));</span><br><span class=\"line\">        System.out.println(&quot;重写 eq  和hashCode----&quot;);</span><br><span class=\"line\">        System.out.println(dSet1.equals(dSet2));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@Getter</span><br><span class=\"line\">@Setter</span><br><span class=\"line\">@NoArgsConstructor</span><br><span class=\"line\">@AllArgsConstructor</span><br><span class=\"line\">class A &#123;</span><br><span class=\"line\">    private String aName;</span><br><span class=\"line\">    private Integer aNum;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@Getter</span><br><span class=\"line\">@Setter</span><br><span class=\"line\">@NoArgsConstructor</span><br><span class=\"line\">@AllArgsConstructor</span><br><span class=\"line\">class B &#123;</span><br><span class=\"line\">    private String bName;</span><br><span class=\"line\">    private Integer bNum;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public boolean equals(Object o) &#123;</span><br><span class=\"line\">        if (this == o) return true;</span><br><span class=\"line\">        if (o == null || getClass() != o.getClass()) return false;</span><br><span class=\"line\"></span><br><span class=\"line\">        B b = (B) o;</span><br><span class=\"line\"></span><br><span class=\"line\">        if (bName != null ? !bName.equals(b.bName) : b.bName != null) return false;</span><br><span class=\"line\">        return bNum != null ? bNum.equals(b.bNum) : b.bNum == null;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@Getter</span><br><span class=\"line\">@Setter</span><br><span class=\"line\">@NoArgsConstructor</span><br><span class=\"line\">@AllArgsConstructor</span><br><span class=\"line\">class C &#123;</span><br><span class=\"line\">    private String cName;</span><br><span class=\"line\">    private Integer cNum;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public int hashCode() &#123;</span><br><span class=\"line\">        int result = cName != null ? cName.hashCode() : 0;</span><br><span class=\"line\">        result = 31 * result + (cNum != null ? cNum.hashCode() : 0);</span><br><span class=\"line\">        return result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@Getter</span><br><span class=\"line\">@Setter</span><br><span class=\"line\">@NoArgsConstructor</span><br><span class=\"line\">@AllArgsConstructor</span><br><span class=\"line\">class D &#123;</span><br><span class=\"line\">    private String dName;</span><br><span class=\"line\">    private Integer dNum;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public boolean equals(Object o) &#123;</span><br><span class=\"line\">        if (this == o) return true;</span><br><span class=\"line\">        if (o == null || getClass() != o.getClass()) return false;</span><br><span class=\"line\"></span><br><span class=\"line\">        D d = (D) o;</span><br><span class=\"line\"></span><br><span class=\"line\">        if (dName != null ? !dName.equals(d.dName) : d.dName != null) return false;</span><br><span class=\"line\">        return dNum != null ? dNum.equals(d.dNum) : d.dNum == null;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public int hashCode() &#123;</span><br><span class=\"line\">        int result = dName != null ? dName.hashCode() : 0;</span><br><span class=\"line\">        result = 31 * result + (dNum != null ? dNum.hashCode() : 0);</span><br><span class=\"line\">        return result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></t></p>\n<p>此实例看出 对于比较对象是否相同来说 单纯的重写 eq或者 hashCode都是没卵用<br>很多方法底层是包含 == 和eq方法比较的 除非非常熟悉 只用单独写eq或者HashCode<br>否则 都应该重写 避免达不到预期结果</p>"},{"title":"中文写java","abbrlink":"e8ebc393","date":"2017-11-10T16:00:00.000Z","_content":"\n###偶然间发现java底层是采用utf16做编码集的  突发奇想 既然是utf16做底层编码 拿起不是可以拿非英文开发   毕竟编译器可以识别中文那么肯定也可以编译中文\n###代码尝试：\n```\nclass  垃圾{\n  public void 一个垃圾方法(){\n      System.out.println(\"真的垃圾\");\n  }\n  public void 两个垃圾方法(String 垃圾参数){\n      System.out.println(\"第二个垃圾方法的垃圾参数:\"+垃圾参数);\n  }\n    public static void main(String[] args) {\n        垃圾 垃圾的实例=new 垃圾();\n        垃圾的实例.一个垃圾方法();\n        垃圾的实例.两个垃圾方法(\"啦等等单打独斗\");\n    }\n}\n```\n####总结:java真的贼几把神奇、这样看来几乎可以用任何utf16包含的语言去编写java了\n","source":"_posts/java/使用非英文语言开发java.md","raw":"---\ntitle: 中文写java\ncategories: 骚想法\ntags:\n  - java基础\nabbrlink: e8ebc393\ndate: 2017-11-11 00:00:00\n---\n\n###偶然间发现java底层是采用utf16做编码集的  突发奇想 既然是utf16做底层编码 拿起不是可以拿非英文开发   毕竟编译器可以识别中文那么肯定也可以编译中文\n###代码尝试：\n```\nclass  垃圾{\n  public void 一个垃圾方法(){\n      System.out.println(\"真的垃圾\");\n  }\n  public void 两个垃圾方法(String 垃圾参数){\n      System.out.println(\"第二个垃圾方法的垃圾参数:\"+垃圾参数);\n  }\n    public static void main(String[] args) {\n        垃圾 垃圾的实例=new 垃圾();\n        垃圾的实例.一个垃圾方法();\n        垃圾的实例.两个垃圾方法(\"啦等等单打独斗\");\n    }\n}\n```\n####总结:java真的贼几把神奇、这样看来几乎可以用任何utf16包含的语言去编写java了\n","slug":"java/使用非英文语言开发java","published":1,"updated":"2018-08-17T08:10:03.923Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjo9uatxi001amwcz4omk9np9","content":"<p>###偶然间发现java底层是采用utf16做编码集的 突发奇想 既然是utf16做底层编码 拿起不是可以拿非英文开发 毕竟编译器可以识别中文那么肯定也可以编译中文</p><p>###代码尝试：<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class  垃圾&#123;</span><br><span class=\"line\">  public void 一个垃圾方法()&#123;</span><br><span class=\"line\">      System.out.println(&quot;真的垃圾&quot;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  public void 两个垃圾方法(String 垃圾参数)&#123;</span><br><span class=\"line\">      System.out.println(&quot;第二个垃圾方法的垃圾参数:&quot;+垃圾参数);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        垃圾 垃圾的实例=new 垃圾();</span><br><span class=\"line\">        垃圾的实例.一个垃圾方法();</span><br><span class=\"line\">        垃圾的实例.两个垃圾方法(&quot;啦等等单打独斗&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p>\n<p>####总结:java真的贼几把神奇、这样看来几乎可以用任何utf16包含的语言去编写java了</p>","site":{"data":{}},"excerpt":"","more":"<p>###偶然间发现java底层是采用utf16做编码集的 突发奇想 既然是utf16做底层编码 拿起不是可以拿非英文开发 毕竟编译器可以识别中文那么肯定也可以编译中文</p><p>###代码尝试：<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class  垃圾&#123;</span><br><span class=\"line\">  public void 一个垃圾方法()&#123;</span><br><span class=\"line\">      System.out.println(&quot;真的垃圾&quot;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  public void 两个垃圾方法(String 垃圾参数)&#123;</span><br><span class=\"line\">      System.out.println(&quot;第二个垃圾方法的垃圾参数:&quot;+垃圾参数);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        垃圾 垃圾的实例=new 垃圾();</span><br><span class=\"line\">        垃圾的实例.一个垃圾方法();</span><br><span class=\"line\">        垃圾的实例.两个垃圾方法(&quot;啦等等单打独斗&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p>\n<p>####总结:java真的贼几把神奇、这样看来几乎可以用任何utf16包含的语言去编写java了</p>"},{"title":"jsp 自定义标签","abbrlink":"dd01bc67","date":"2017-11-10T16:00:00.000Z","_content":"###在做jsp项目中除了一些框架的标签如spring、jstl、shiro等标签 可能还需要自定义一些常用标签 如page等\n###自定义jsp标签有两种方式 \n1:java bean+ tld  \n ```\n 通过tld来调用java中的代码 这种写法 参考http://www.runoob.com/jsp/jsp-custom-tags.html\n ```\n2:tag文件\n```\n直接定义一个后缀为tag的文件 这种方式比 java bean+tld 简单方便 容易使用和定义\ntag文件头 如下设置   其他按照jsp使用即可 可以导入其他标签库、java代码、等\n//定义tag的编码集合\n<%@tag pageEncoding=\"UTF-8\" %>\n//定义一个名字为str 类型为string的必须元素\n<%@attribute name=\"str\" required=\"true\" type=\"java.lang.String\" %>\n//定义一个名字为flag 类型为boolean 的非必须元素\n<%@attribute name=\"flag\" required=\"false\" type=\"java.lang.Boolean\" %>\n。。。。。省略业务代码 这里就跟写jsp一样\n\n\n调用:\n在jsp头部加上这个标签所在的文件夹  是文件夹不是单个标签  \n<%--自定义的标签位置--%>\n<%@taglib prefix=\"tags\" tagdir=\"/WEB-INF/tags\" %>\n\n然后使用即可 例如实例代码文件名为 test.tag\n <tags:test str=\"test\"></tags:test>\n```\n","source":"_posts/java/自定义jsp标签的两种方式(java-bean+tld、tag).md","raw":"---\ntitle: jsp 自定义标签\ncategories: 笔记\ntags:\n  - java基础\n  - jsp\nabbrlink: dd01bc67\ndate: 2017-11-11 00:00:00\n---\n###在做jsp项目中除了一些框架的标签如spring、jstl、shiro等标签 可能还需要自定义一些常用标签 如page等\n###自定义jsp标签有两种方式 \n1:java bean+ tld  \n ```\n 通过tld来调用java中的代码 这种写法 参考http://www.runoob.com/jsp/jsp-custom-tags.html\n ```\n2:tag文件\n```\n直接定义一个后缀为tag的文件 这种方式比 java bean+tld 简单方便 容易使用和定义\ntag文件头 如下设置   其他按照jsp使用即可 可以导入其他标签库、java代码、等\n//定义tag的编码集合\n<%@tag pageEncoding=\"UTF-8\" %>\n//定义一个名字为str 类型为string的必须元素\n<%@attribute name=\"str\" required=\"true\" type=\"java.lang.String\" %>\n//定义一个名字为flag 类型为boolean 的非必须元素\n<%@attribute name=\"flag\" required=\"false\" type=\"java.lang.Boolean\" %>\n。。。。。省略业务代码 这里就跟写jsp一样\n\n\n调用:\n在jsp头部加上这个标签所在的文件夹  是文件夹不是单个标签  \n<%--自定义的标签位置--%>\n<%@taglib prefix=\"tags\" tagdir=\"/WEB-INF/tags\" %>\n\n然后使用即可 例如实例代码文件名为 test.tag\n <tags:test str=\"test\"></tags:test>\n```\n","slug":"java/自定义jsp标签的两种方式(java-bean+tld、tag)","published":1,"updated":"2018-08-17T08:10:03.923Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjo9uatxj001dmwczk3b4nq6d","content":"<p>###在做jsp项目中除了一些框架的标签如spring、jstl、shiro等标签 可能还需要自定义一些常用标签 如page等</p><p>###自定义jsp标签有两种方式<br>1:java bean+ tld<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">通过tld来调用java中的代码 这种写法 参考http://www.runoob.com/jsp/jsp-custom-tags.html</span><br></pre></td></tr></table></figure><p></p>\n<p>2:tag文件<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">直接定义一个后缀为tag的文件 这种方式比 java bean+tld 简单方便 容易使用和定义</span><br><span class=\"line\">tag文件头 如下设置   其他按照jsp使用即可 可以导入其他标签库、java代码、等</span><br><span class=\"line\">//定义tag的编码集合</span><br><span class=\"line\">&lt;%@tag pageEncoding=&quot;UTF-8&quot; %&gt;</span><br><span class=\"line\">//定义一个名字为str 类型为string的必须元素</span><br><span class=\"line\">&lt;%@attribute name=&quot;str&quot; required=&quot;true&quot; type=&quot;java.lang.String&quot; %&gt;</span><br><span class=\"line\">//定义一个名字为flag 类型为boolean 的非必须元素</span><br><span class=\"line\">&lt;%@attribute name=&quot;flag&quot; required=&quot;false&quot; type=&quot;java.lang.Boolean&quot; %&gt;</span><br><span class=\"line\">。。。。。省略业务代码 这里就跟写jsp一样</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">调用:</span><br><span class=\"line\">在jsp头部加上这个标签所在的文件夹  是文件夹不是单个标签  </span><br><span class=\"line\">&lt;%--自定义的标签位置--%&gt;</span><br><span class=\"line\">&lt;%@taglib prefix=&quot;tags&quot; tagdir=&quot;/WEB-INF/tags&quot; %&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">然后使用即可 例如实例代码文件名为 test.tag</span><br><span class=\"line\"> &lt;tags:test str=&quot;test&quot;&gt;&lt;/tags:test&gt;</span><br></pre></td></tr></table></figure><p></p>","site":{"data":{}},"excerpt":"","more":"<p>###在做jsp项目中除了一些框架的标签如spring、jstl、shiro等标签 可能还需要自定义一些常用标签 如page等</p><p>###自定义jsp标签有两种方式<br>1:java bean+ tld<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">通过tld来调用java中的代码 这种写法 参考http://www.runoob.com/jsp/jsp-custom-tags.html</span><br></pre></td></tr></table></figure><p></p>\n<p>2:tag文件<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">直接定义一个后缀为tag的文件 这种方式比 java bean+tld 简单方便 容易使用和定义</span><br><span class=\"line\">tag文件头 如下设置   其他按照jsp使用即可 可以导入其他标签库、java代码、等</span><br><span class=\"line\">//定义tag的编码集合</span><br><span class=\"line\">&lt;%@tag pageEncoding=&quot;UTF-8&quot; %&gt;</span><br><span class=\"line\">//定义一个名字为str 类型为string的必须元素</span><br><span class=\"line\">&lt;%@attribute name=&quot;str&quot; required=&quot;true&quot; type=&quot;java.lang.String&quot; %&gt;</span><br><span class=\"line\">//定义一个名字为flag 类型为boolean 的非必须元素</span><br><span class=\"line\">&lt;%@attribute name=&quot;flag&quot; required=&quot;false&quot; type=&quot;java.lang.Boolean&quot; %&gt;</span><br><span class=\"line\">。。。。。省略业务代码 这里就跟写jsp一样</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">调用:</span><br><span class=\"line\">在jsp头部加上这个标签所在的文件夹  是文件夹不是单个标签  </span><br><span class=\"line\">&lt;%--自定义的标签位置--%&gt;</span><br><span class=\"line\">&lt;%@taglib prefix=&quot;tags&quot; tagdir=&quot;/WEB-INF/tags&quot; %&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">然后使用即可 例如实例代码文件名为 test.tag</span><br><span class=\"line\"> &lt;tags:test str=&quot;test&quot;&gt;&lt;/tags:test&gt;</span><br></pre></td></tr></table></figure><p></p>"},{"title":"dockerfile关键字笔记","comments":1,"abbrlink":"a44739e3","date":"2018-09-03T02:47:11.000Z","_content":"#### 前言\n虽然经常写dockerfile 但是老是去官网查询 翻墙慢的一批  干脆 从官网上把常用的dockerfile关键字记录下来方便查询 \n参考地址:   \nhttps://docs.docker.com/engine/reference/builder/#parser-directives   \nhttps://yeasy.gitbooks.io/docker_practice/image/dockerfile/references.html    \n\n#### dockerfile 关键字  \n|关键字|作用|备注|  \n|:----|:--|:-------------------|  \n|FROM|指定基础镜像|指定dockerfile基于那个image构建，建议格式写全 registry/namespace/project:tag  或者 registry/namespace/project:tag  as  aliasName|\n|MAINTAINER|作者信息|用来标明这个dockerfile谁写的|\n|LABEL|标签|用来标明dockerfile的标签 可以使用Label代替Maintainer 最终都是在docker image基本信息中可以查看|\n|RUN|执行命令|执行一段命令 默认是/bin/sh 格式: RUN command 或者 RUN \\[\"command\" , \"param1\",\"param2\"]|\n|CMD|容器启动命令|提供启动容器时候的默认命令 和ENTRYPOINT配合使用 格式 CMD command param1 param2 或者 CMD \\[\"command\" , \"param1\",\"param2\"] |\n|ENTRYPOINT|入口|一般在制作一些执行就关闭的容器中会使用 配合CMD 使用更好 下面会专门说这个东西|\n|COPY|复制文件|build的时候复制文件到image中  可以使用通配符 只要复合go的filepath.Match规则就行 COPY source target 如果是从标准输出流构建 无法使用这个关键字|\n|ADD|添加文件|build的时候添加文件到image中 不仅仅局限于当前build上下文 可以来源于远程服务  ADD source target  注意: target如果带/ 那么会把target当成文件夹 内部文件名称自动推断 如果没有带/那么可能蒋target当成一个文件|\n|ENV|环境变量|指定build时候的环境变量 可以在启动的容器的时候 通过-e覆盖 格式ENV name=value ... |\n|ARG|构建参数|构建参数 只在构建的时候使用的参数 如果有ENV 那么ENV的相同名字的值始终覆盖arg的参数 |\n|VOLUME|定义外部可以挂载的数据卷|指定build的image那些目录可以启动的时候挂载到文件系统中 启动容器的时候使用 -v 绑定  格式 VOLUME \\[\"目录\"] |\n|EXPOSE|暴露端口|定义容器运行的时候监听的端口 启动容器的使用-p来绑定暴露端口 格式: EXPOSE 8080 或者 EXPOSE 8080/udp  如果不指定监听tcp还是udp 那么默认为tcp|\n|WORKDIR|工作目录|指定容器内部的工作目录 如果没有创建则自动创建 如果指定/ 使用的是绝对地址 如果不是/开头那么是在上一条workdir的路径的相对路径|\n|USER|指定执行用户|指定build或者启动的时候 用户   在RUN CMD ENTRYPONT执行的时候的用户|\n|HEALTHCHECK|健康检查|指定监测当前容器的健康监测的命令  基本上没用 因为很多时候 应用本身有健康监测机制|\n|ONBUILD|触发器|当存在ONBUILD关键字的镜像作为基础镜像的时候 当执行FROM完成之后 会执行 ONBUILD的命令 但是不影响当前镜像  用处也不怎么大 |\n|STOPSIGNAL|发送信号量到宿主机|该STOPSIGNAL指令设置将发送到容器的系统调用信号以退出。此信号可以是与内核的系统调用表中的位置匹配的有效无符号数，例如9，或SIGNAME格式的信号名，例如SIGKILL。 这个不太明白干啥的 看起来是和宿主机通过信号量交互的|\n|SHELL| 指定执行脚本的shell |指定RUN CMD ENTRYPOINT 执行命令的时候 使用的shell 例如 sh bash zsh  powershell 等 格式 SHELL zsh |\n\n#### 需要注意的套路\n#####  build环境选择  \n必须linux 内核版本高于3.10   \n不允许在windows上构建 容易出现坑爹的问题    \n#####   CMD 和ENTRYPOINT 区别联系   \n联系:   \n当存在ENTRYPOINT的时候 CMD成为了参数  ENTRYPOINT = ENTRYPOINT \\<CMD>\n区别:  \nCMD 就是单纯的执行一段shell  当要为 CMD添加参数的时候 只能选择全部覆盖CMD命令\n如果是ENTRYPOINT 那么可以直接在启动容器最后添加 参数  因为当入口是ENTRYPOINT的时候CMD就成为了ENTRYPOINT的参数   \n#####   ADD 和COPY的区别联系   \n联系:都是把文件添加到容器的image中   \n区别:     \nCOPY 只能读取当前构建的上下文 如果是从标准输出流构建 COPY无法使用  \nADD 可以使用远程服务的文件目录      \n\n#####   VOLUME挂载目录需要注意的     \n1: 如果宿主机是windows  不能挂载空目录、和c盘的目录   \n2: 在VOLUME之后的构建操作 都无法生效 要求 暴露挂载卷 必须在最后一步 声明    \n\n#####  构建镜像的注意点   \n1: 尽量选择 微缩基础镜像 例如alpine  减少镜像的体积\n2: 尽量不要打包无用的文件到镜像中 减少镜像的体积\n3: 尽量删除 各种编译、下载、安装过程中产生的缓存文件 减少镜像体积 \n4: 尽量使用分阶段构建镜像 一步步的扩展镜像功能  避免多层数镜像的产生\n5: 准确使用dockerfile的关键字 例如CMD 和ENTRYPOINT  、 COPY 和ADD\n#### 总结\ndockerfile的关键字 不多 基本上该考虑的场景 也都考虑的    ","source":"_posts/linux/dockerfile关键字笔记.md","raw":"---\ntitle: dockerfile关键字笔记\ncomments: true\ncategories: 笔记\ntags:\n  - dockerfile\nabbrlink: a44739e3\ndate: 2018-09-03 10:47:11\n---\n#### 前言\n虽然经常写dockerfile 但是老是去官网查询 翻墙慢的一批  干脆 从官网上把常用的dockerfile关键字记录下来方便查询 \n参考地址:   \nhttps://docs.docker.com/engine/reference/builder/#parser-directives   \nhttps://yeasy.gitbooks.io/docker_practice/image/dockerfile/references.html    \n\n#### dockerfile 关键字  \n|关键字|作用|备注|  \n|:----|:--|:-------------------|  \n|FROM|指定基础镜像|指定dockerfile基于那个image构建，建议格式写全 registry/namespace/project:tag  或者 registry/namespace/project:tag  as  aliasName|\n|MAINTAINER|作者信息|用来标明这个dockerfile谁写的|\n|LABEL|标签|用来标明dockerfile的标签 可以使用Label代替Maintainer 最终都是在docker image基本信息中可以查看|\n|RUN|执行命令|执行一段命令 默认是/bin/sh 格式: RUN command 或者 RUN \\[\"command\" , \"param1\",\"param2\"]|\n|CMD|容器启动命令|提供启动容器时候的默认命令 和ENTRYPOINT配合使用 格式 CMD command param1 param2 或者 CMD \\[\"command\" , \"param1\",\"param2\"] |\n|ENTRYPOINT|入口|一般在制作一些执行就关闭的容器中会使用 配合CMD 使用更好 下面会专门说这个东西|\n|COPY|复制文件|build的时候复制文件到image中  可以使用通配符 只要复合go的filepath.Match规则就行 COPY source target 如果是从标准输出流构建 无法使用这个关键字|\n|ADD|添加文件|build的时候添加文件到image中 不仅仅局限于当前build上下文 可以来源于远程服务  ADD source target  注意: target如果带/ 那么会把target当成文件夹 内部文件名称自动推断 如果没有带/那么可能蒋target当成一个文件|\n|ENV|环境变量|指定build时候的环境变量 可以在启动的容器的时候 通过-e覆盖 格式ENV name=value ... |\n|ARG|构建参数|构建参数 只在构建的时候使用的参数 如果有ENV 那么ENV的相同名字的值始终覆盖arg的参数 |\n|VOLUME|定义外部可以挂载的数据卷|指定build的image那些目录可以启动的时候挂载到文件系统中 启动容器的时候使用 -v 绑定  格式 VOLUME \\[\"目录\"] |\n|EXPOSE|暴露端口|定义容器运行的时候监听的端口 启动容器的使用-p来绑定暴露端口 格式: EXPOSE 8080 或者 EXPOSE 8080/udp  如果不指定监听tcp还是udp 那么默认为tcp|\n|WORKDIR|工作目录|指定容器内部的工作目录 如果没有创建则自动创建 如果指定/ 使用的是绝对地址 如果不是/开头那么是在上一条workdir的路径的相对路径|\n|USER|指定执行用户|指定build或者启动的时候 用户   在RUN CMD ENTRYPONT执行的时候的用户|\n|HEALTHCHECK|健康检查|指定监测当前容器的健康监测的命令  基本上没用 因为很多时候 应用本身有健康监测机制|\n|ONBUILD|触发器|当存在ONBUILD关键字的镜像作为基础镜像的时候 当执行FROM完成之后 会执行 ONBUILD的命令 但是不影响当前镜像  用处也不怎么大 |\n|STOPSIGNAL|发送信号量到宿主机|该STOPSIGNAL指令设置将发送到容器的系统调用信号以退出。此信号可以是与内核的系统调用表中的位置匹配的有效无符号数，例如9，或SIGNAME格式的信号名，例如SIGKILL。 这个不太明白干啥的 看起来是和宿主机通过信号量交互的|\n|SHELL| 指定执行脚本的shell |指定RUN CMD ENTRYPOINT 执行命令的时候 使用的shell 例如 sh bash zsh  powershell 等 格式 SHELL zsh |\n\n#### 需要注意的套路\n#####  build环境选择  \n必须linux 内核版本高于3.10   \n不允许在windows上构建 容易出现坑爹的问题    \n#####   CMD 和ENTRYPOINT 区别联系   \n联系:   \n当存在ENTRYPOINT的时候 CMD成为了参数  ENTRYPOINT = ENTRYPOINT \\<CMD>\n区别:  \nCMD 就是单纯的执行一段shell  当要为 CMD添加参数的时候 只能选择全部覆盖CMD命令\n如果是ENTRYPOINT 那么可以直接在启动容器最后添加 参数  因为当入口是ENTRYPOINT的时候CMD就成为了ENTRYPOINT的参数   \n#####   ADD 和COPY的区别联系   \n联系:都是把文件添加到容器的image中   \n区别:     \nCOPY 只能读取当前构建的上下文 如果是从标准输出流构建 COPY无法使用  \nADD 可以使用远程服务的文件目录      \n\n#####   VOLUME挂载目录需要注意的     \n1: 如果宿主机是windows  不能挂载空目录、和c盘的目录   \n2: 在VOLUME之后的构建操作 都无法生效 要求 暴露挂载卷 必须在最后一步 声明    \n\n#####  构建镜像的注意点   \n1: 尽量选择 微缩基础镜像 例如alpine  减少镜像的体积\n2: 尽量不要打包无用的文件到镜像中 减少镜像的体积\n3: 尽量删除 各种编译、下载、安装过程中产生的缓存文件 减少镜像体积 \n4: 尽量使用分阶段构建镜像 一步步的扩展镜像功能  避免多层数镜像的产生\n5: 准确使用dockerfile的关键字 例如CMD 和ENTRYPOINT  、 COPY 和ADD\n#### 总结\ndockerfile的关键字 不多 基本上该考虑的场景 也都考虑的    ","slug":"linux/dockerfile关键字笔记","published":1,"updated":"2018-09-03T06:54:46.328Z","layout":"post","photos":[],"link":"","_id":"cjo9uatxl001imwczt7wetfrf","content":"<h4 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h4><p>虽然经常写dockerfile 但是老是去官网查询 翻墙慢的一批 干脆 从官网上把常用的dockerfile关键字记录下来方便查询<br>参考地址:<br><a href=\"https://docs.docker.com/engine/reference/builder/#parser-directives\" target=\"_blank\" rel=\"noopener\">https://docs.docker.com/engine/reference/builder/#parser-directives</a><br><a href=\"https://yeasy.gitbooks.io/docker_practice/image/dockerfile/references.html\" target=\"_blank\" rel=\"noopener\">https://yeasy.gitbooks.io/docker_practice/image/dockerfile/references.html</a></p><h4 id=\"dockerfile-关键字\"><a href=\"#dockerfile-关键字\" class=\"headerlink\" title=\"dockerfile 关键字\"></a>dockerfile 关键字</h4><table><thead><tr><th style=\"text-align:left\">关键字</th><th style=\"text-align:left\">作用</th><th style=\"text-align:left\">备注</th></tr></thead><tbody><tr><td style=\"text-align:left\">FROM</td><td style=\"text-align:left\">指定基础镜像</td><td style=\"text-align:left\">指定dockerfile基于那个image构建，建议格式写全 registry/namespace/project:tag 或者 registry/namespace/project:tag as aliasName</td></tr><tr><td style=\"text-align:left\">MAINTAINER</td><td style=\"text-align:left\">作者信息</td><td style=\"text-align:left\">用来标明这个dockerfile谁写的</td></tr><tr><td style=\"text-align:left\">LABEL</td><td style=\"text-align:left\">标签</td><td style=\"text-align:left\">用来标明dockerfile的标签 可以使用Label代替Maintainer 最终都是在docker image基本信息中可以查看</td></tr><tr><td style=\"text-align:left\">RUN</td><td style=\"text-align:left\">执行命令</td><td style=\"text-align:left\">执行一段命令 默认是/bin/sh 格式: RUN command 或者 RUN [“command” , “param1”,”param2”]</td></tr><tr><td style=\"text-align:left\">CMD</td><td style=\"text-align:left\">容器启动命令</td><td style=\"text-align:left\">提供启动容器时候的默认命令 和ENTRYPOINT配合使用 格式 CMD command param1 param2 或者 CMD [“command” , “param1”,”param2”]</td></tr><tr><td style=\"text-align:left\">ENTRYPOINT</td><td style=\"text-align:left\">入口</td><td style=\"text-align:left\">一般在制作一些执行就关闭的容器中会使用 配合CMD 使用更好 下面会专门说这个东西</td></tr><tr><td style=\"text-align:left\">COPY</td><td style=\"text-align:left\">复制文件</td><td style=\"text-align:left\">build的时候复制文件到image中 可以使用通配符 只要复合go的filepath.Match规则就行 COPY source target 如果是从标准输出流构建 无法使用这个关键字</td></tr><tr><td style=\"text-align:left\">ADD</td><td style=\"text-align:left\">添加文件</td><td style=\"text-align:left\">build的时候添加文件到image中 不仅仅局限于当前build上下文 可以来源于远程服务 ADD source target 注意: target如果带/ 那么会把target当成文件夹 内部文件名称自动推断 如果没有带/那么可能蒋target当成一个文件</td></tr><tr><td style=\"text-align:left\">ENV</td><td style=\"text-align:left\">环境变量</td><td style=\"text-align:left\">指定build时候的环境变量 可以在启动的容器的时候 通过-e覆盖 格式ENV name=value …</td></tr><tr><td style=\"text-align:left\">ARG</td><td style=\"text-align:left\">构建参数</td><td style=\"text-align:left\">构建参数 只在构建的时候使用的参数 如果有ENV 那么ENV的相同名字的值始终覆盖arg的参数</td></tr><tr><td style=\"text-align:left\">VOLUME</td><td style=\"text-align:left\">定义外部可以挂载的数据卷</td><td style=\"text-align:left\">指定build的image那些目录可以启动的时候挂载到文件系统中 启动容器的时候使用 -v 绑定 格式 VOLUME [“目录”]</td></tr><tr><td style=\"text-align:left\">EXPOSE</td><td style=\"text-align:left\">暴露端口</td><td style=\"text-align:left\">定义容器运行的时候监听的端口 启动容器的使用-p来绑定暴露端口 格式: EXPOSE 8080 或者 EXPOSE 8080/udp 如果不指定监听tcp还是udp 那么默认为tcp</td></tr><tr><td style=\"text-align:left\">WORKDIR</td><td style=\"text-align:left\">工作目录</td><td style=\"text-align:left\">指定容器内部的工作目录 如果没有创建则自动创建 如果指定/ 使用的是绝对地址 如果不是/开头那么是在上一条workdir的路径的相对路径</td></tr><tr><td style=\"text-align:left\">USER</td><td style=\"text-align:left\">指定执行用户</td><td style=\"text-align:left\">指定build或者启动的时候 用户 在RUN CMD ENTRYPONT执行的时候的用户</td></tr><tr><td style=\"text-align:left\">HEALTHCHECK</td><td style=\"text-align:left\">健康检查</td><td style=\"text-align:left\">指定监测当前容器的健康监测的命令 基本上没用 因为很多时候 应用本身有健康监测机制</td></tr><tr><td style=\"text-align:left\">ONBUILD</td><td style=\"text-align:left\">触发器</td><td style=\"text-align:left\">当存在ONBUILD关键字的镜像作为基础镜像的时候 当执行FROM完成之后 会执行 ONBUILD的命令 但是不影响当前镜像 用处也不怎么大</td></tr><tr><td style=\"text-align:left\">STOPSIGNAL</td><td style=\"text-align:left\">发送信号量到宿主机</td><td style=\"text-align:left\">该STOPSIGNAL指令设置将发送到容器的系统调用信号以退出。此信号可以是与内核的系统调用表中的位置匹配的有效无符号数，例如9，或SIGNAME格式的信号名，例如SIGKILL。 这个不太明白干啥的 看起来是和宿主机通过信号量交互的</td></tr><tr><td style=\"text-align:left\">SHELL</td><td style=\"text-align:left\">指定执行脚本的shell</td><td style=\"text-align:left\">指定RUN CMD ENTRYPOINT 执行命令的时候 使用的shell 例如 sh bash zsh powershell 等 格式 SHELL zsh</td></tr></tbody></table><h4 id=\"需要注意的套路\"><a href=\"#需要注意的套路\" class=\"headerlink\" title=\"需要注意的套路\"></a>需要注意的套路</h4><h5 id=\"build环境选择\"><a href=\"#build环境选择\" class=\"headerlink\" title=\"build环境选择\"></a>build环境选择</h5><p>必须linux 内核版本高于3.10<br>不允许在windows上构建 容易出现坑爹的问题</p><h5 id=\"CMD-和ENTRYPOINT-区别联系\"><a href=\"#CMD-和ENTRYPOINT-区别联系\" class=\"headerlink\" title=\"CMD 和ENTRYPOINT 区别联系\"></a>CMD 和ENTRYPOINT 区别联系</h5><p>联系:<br>当存在ENTRYPOINT的时候 CMD成为了参数 ENTRYPOINT = ENTRYPOINT \\<cmd><br>区别:<br>CMD 就是单纯的执行一段shell 当要为 CMD添加参数的时候 只能选择全部覆盖CMD命令<br>如果是ENTRYPOINT 那么可以直接在启动容器最后添加 参数 因为当入口是ENTRYPOINT的时候CMD就成为了ENTRYPOINT的参数</cmd></p><h5 id=\"ADD-和COPY的区别联系\"><a href=\"#ADD-和COPY的区别联系\" class=\"headerlink\" title=\"ADD 和COPY的区别联系\"></a>ADD 和COPY的区别联系</h5><p>联系:都是把文件添加到容器的image中<br>区别:<br>COPY 只能读取当前构建的上下文 如果是从标准输出流构建 COPY无法使用<br>ADD 可以使用远程服务的文件目录</p><h5 id=\"VOLUME挂载目录需要注意的\"><a href=\"#VOLUME挂载目录需要注意的\" class=\"headerlink\" title=\"VOLUME挂载目录需要注意的\"></a>VOLUME挂载目录需要注意的</h5><p>1: 如果宿主机是windows 不能挂载空目录、和c盘的目录<br>2: 在VOLUME之后的构建操作 都无法生效 要求 暴露挂载卷 必须在最后一步 声明</p><h5 id=\"构建镜像的注意点\"><a href=\"#构建镜像的注意点\" class=\"headerlink\" title=\"构建镜像的注意点\"></a>构建镜像的注意点</h5><p>1: 尽量选择 微缩基础镜像 例如alpine 减少镜像的体积<br>2: 尽量不要打包无用的文件到镜像中 减少镜像的体积<br>3: 尽量删除 各种编译、下载、安装过程中产生的缓存文件 减少镜像体积<br>4: 尽量使用分阶段构建镜像 一步步的扩展镜像功能 避免多层数镜像的产生<br>5: 准确使用dockerfile的关键字 例如CMD 和ENTRYPOINT 、 COPY 和ADD</p><h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><p>dockerfile的关键字 不多 基本上该考虑的场景 也都考虑的</p>","site":{"data":{}},"excerpt":"","more":"<h4 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h4><p>虽然经常写dockerfile 但是老是去官网查询 翻墙慢的一批 干脆 从官网上把常用的dockerfile关键字记录下来方便查询<br>参考地址:<br><a href=\"https://docs.docker.com/engine/reference/builder/#parser-directives\" target=\"_blank\" rel=\"noopener\">https://docs.docker.com/engine/reference/builder/#parser-directives</a><br><a href=\"https://yeasy.gitbooks.io/docker_practice/image/dockerfile/references.html\" target=\"_blank\" rel=\"noopener\">https://yeasy.gitbooks.io/docker_practice/image/dockerfile/references.html</a></p><h4 id=\"dockerfile-关键字\"><a href=\"#dockerfile-关键字\" class=\"headerlink\" title=\"dockerfile 关键字\"></a>dockerfile 关键字</h4><table><thead><tr><th style=\"text-align:left\">关键字</th><th style=\"text-align:left\">作用</th><th style=\"text-align:left\">备注</th></tr></thead><tbody><tr><td style=\"text-align:left\">FROM</td><td style=\"text-align:left\">指定基础镜像</td><td style=\"text-align:left\">指定dockerfile基于那个image构建，建议格式写全 registry/namespace/project:tag 或者 registry/namespace/project:tag as aliasName</td></tr><tr><td style=\"text-align:left\">MAINTAINER</td><td style=\"text-align:left\">作者信息</td><td style=\"text-align:left\">用来标明这个dockerfile谁写的</td></tr><tr><td style=\"text-align:left\">LABEL</td><td style=\"text-align:left\">标签</td><td style=\"text-align:left\">用来标明dockerfile的标签 可以使用Label代替Maintainer 最终都是在docker image基本信息中可以查看</td></tr><tr><td style=\"text-align:left\">RUN</td><td style=\"text-align:left\">执行命令</td><td style=\"text-align:left\">执行一段命令 默认是/bin/sh 格式: RUN command 或者 RUN [“command” , “param1”,”param2”]</td></tr><tr><td style=\"text-align:left\">CMD</td><td style=\"text-align:left\">容器启动命令</td><td style=\"text-align:left\">提供启动容器时候的默认命令 和ENTRYPOINT配合使用 格式 CMD command param1 param2 或者 CMD [“command” , “param1”,”param2”]</td></tr><tr><td style=\"text-align:left\">ENTRYPOINT</td><td style=\"text-align:left\">入口</td><td style=\"text-align:left\">一般在制作一些执行就关闭的容器中会使用 配合CMD 使用更好 下面会专门说这个东西</td></tr><tr><td style=\"text-align:left\">COPY</td><td style=\"text-align:left\">复制文件</td><td style=\"text-align:left\">build的时候复制文件到image中 可以使用通配符 只要复合go的filepath.Match规则就行 COPY source target 如果是从标准输出流构建 无法使用这个关键字</td></tr><tr><td style=\"text-align:left\">ADD</td><td style=\"text-align:left\">添加文件</td><td style=\"text-align:left\">build的时候添加文件到image中 不仅仅局限于当前build上下文 可以来源于远程服务 ADD source target 注意: target如果带/ 那么会把target当成文件夹 内部文件名称自动推断 如果没有带/那么可能蒋target当成一个文件</td></tr><tr><td style=\"text-align:left\">ENV</td><td style=\"text-align:left\">环境变量</td><td style=\"text-align:left\">指定build时候的环境变量 可以在启动的容器的时候 通过-e覆盖 格式ENV name=value …</td></tr><tr><td style=\"text-align:left\">ARG</td><td style=\"text-align:left\">构建参数</td><td style=\"text-align:left\">构建参数 只在构建的时候使用的参数 如果有ENV 那么ENV的相同名字的值始终覆盖arg的参数</td></tr><tr><td style=\"text-align:left\">VOLUME</td><td style=\"text-align:left\">定义外部可以挂载的数据卷</td><td style=\"text-align:left\">指定build的image那些目录可以启动的时候挂载到文件系统中 启动容器的时候使用 -v 绑定 格式 VOLUME [“目录”]</td></tr><tr><td style=\"text-align:left\">EXPOSE</td><td style=\"text-align:left\">暴露端口</td><td style=\"text-align:left\">定义容器运行的时候监听的端口 启动容器的使用-p来绑定暴露端口 格式: EXPOSE 8080 或者 EXPOSE 8080/udp 如果不指定监听tcp还是udp 那么默认为tcp</td></tr><tr><td style=\"text-align:left\">WORKDIR</td><td style=\"text-align:left\">工作目录</td><td style=\"text-align:left\">指定容器内部的工作目录 如果没有创建则自动创建 如果指定/ 使用的是绝对地址 如果不是/开头那么是在上一条workdir的路径的相对路径</td></tr><tr><td style=\"text-align:left\">USER</td><td style=\"text-align:left\">指定执行用户</td><td style=\"text-align:left\">指定build或者启动的时候 用户 在RUN CMD ENTRYPONT执行的时候的用户</td></tr><tr><td style=\"text-align:left\">HEALTHCHECK</td><td style=\"text-align:left\">健康检查</td><td style=\"text-align:left\">指定监测当前容器的健康监测的命令 基本上没用 因为很多时候 应用本身有健康监测机制</td></tr><tr><td style=\"text-align:left\">ONBUILD</td><td style=\"text-align:left\">触发器</td><td style=\"text-align:left\">当存在ONBUILD关键字的镜像作为基础镜像的时候 当执行FROM完成之后 会执行 ONBUILD的命令 但是不影响当前镜像 用处也不怎么大</td></tr><tr><td style=\"text-align:left\">STOPSIGNAL</td><td style=\"text-align:left\">发送信号量到宿主机</td><td style=\"text-align:left\">该STOPSIGNAL指令设置将发送到容器的系统调用信号以退出。此信号可以是与内核的系统调用表中的位置匹配的有效无符号数，例如9，或SIGNAME格式的信号名，例如SIGKILL。 这个不太明白干啥的 看起来是和宿主机通过信号量交互的</td></tr><tr><td style=\"text-align:left\">SHELL</td><td style=\"text-align:left\">指定执行脚本的shell</td><td style=\"text-align:left\">指定RUN CMD ENTRYPOINT 执行命令的时候 使用的shell 例如 sh bash zsh powershell 等 格式 SHELL zsh</td></tr></tbody></table><h4 id=\"需要注意的套路\"><a href=\"#需要注意的套路\" class=\"headerlink\" title=\"需要注意的套路\"></a>需要注意的套路</h4><h5 id=\"build环境选择\"><a href=\"#build环境选择\" class=\"headerlink\" title=\"build环境选择\"></a>build环境选择</h5><p>必须linux 内核版本高于3.10<br>不允许在windows上构建 容易出现坑爹的问题</p><h5 id=\"CMD-和ENTRYPOINT-区别联系\"><a href=\"#CMD-和ENTRYPOINT-区别联系\" class=\"headerlink\" title=\"CMD 和ENTRYPOINT 区别联系\"></a>CMD 和ENTRYPOINT 区别联系</h5><p>联系:<br>当存在ENTRYPOINT的时候 CMD成为了参数 ENTRYPOINT = ENTRYPOINT \\<cmd><br>区别:<br>CMD 就是单纯的执行一段shell 当要为 CMD添加参数的时候 只能选择全部覆盖CMD命令<br>如果是ENTRYPOINT 那么可以直接在启动容器最后添加 参数 因为当入口是ENTRYPOINT的时候CMD就成为了ENTRYPOINT的参数</cmd></p><h5 id=\"ADD-和COPY的区别联系\"><a href=\"#ADD-和COPY的区别联系\" class=\"headerlink\" title=\"ADD 和COPY的区别联系\"></a>ADD 和COPY的区别联系</h5><p>联系:都是把文件添加到容器的image中<br>区别:<br>COPY 只能读取当前构建的上下文 如果是从标准输出流构建 COPY无法使用<br>ADD 可以使用远程服务的文件目录</p><h5 id=\"VOLUME挂载目录需要注意的\"><a href=\"#VOLUME挂载目录需要注意的\" class=\"headerlink\" title=\"VOLUME挂载目录需要注意的\"></a>VOLUME挂载目录需要注意的</h5><p>1: 如果宿主机是windows 不能挂载空目录、和c盘的目录<br>2: 在VOLUME之后的构建操作 都无法生效 要求 暴露挂载卷 必须在最后一步 声明</p><h5 id=\"构建镜像的注意点\"><a href=\"#构建镜像的注意点\" class=\"headerlink\" title=\"构建镜像的注意点\"></a>构建镜像的注意点</h5><p>1: 尽量选择 微缩基础镜像 例如alpine 减少镜像的体积<br>2: 尽量不要打包无用的文件到镜像中 减少镜像的体积<br>3: 尽量删除 各种编译、下载、安装过程中产生的缓存文件 减少镜像体积<br>4: 尽量使用分阶段构建镜像 一步步的扩展镜像功能 避免多层数镜像的产生<br>5: 准确使用dockerfile的关键字 例如CMD 和ENTRYPOINT 、 COPY 和ADD</p><h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><p>dockerfile的关键字 不多 基本上该考虑的场景 也都考虑的</p>"},{"title":"docker 运行秒退出解决办法","abbrlink":"52ab603","date":"2017-11-10T16:00:00.000Z","_content":"\n###在学习docker的时候 遇到一个坑  就是当docker容器中没有前台运行的程序的时候 docker会认为这个容器没有工作内容会自动关闭这个容器 \n解决方法:\n   在写dockerfile的时候 记得留一个在前台执行的任务  特别是在做那种一般在后台运行的服务 如mysql这样的 需要让他在前台运行 mysqld.service\n","source":"_posts/linux/docker容器启动之后马上关闭问题解决办法笔记.md","raw":"---\ntitle: docker 运行秒退出解决办法\ncategories: 坑\ntags:\n  - docker\nabbrlink: 52ab603\ndate: 2017-11-11 00:00:00\n---\n\n###在学习docker的时候 遇到一个坑  就是当docker容器中没有前台运行的程序的时候 docker会认为这个容器没有工作内容会自动关闭这个容器 \n解决方法:\n   在写dockerfile的时候 记得留一个在前台执行的任务  特别是在做那种一般在后台运行的服务 如mysql这样的 需要让他在前台运行 mysqld.service\n","slug":"linux/docker容器启动之后马上关闭问题解决办法笔记","published":1,"updated":"2018-08-17T08:10:03.923Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjo9uatxo001kmwcz7qnsktul","content":"<p>###在学习docker的时候 遇到一个坑 就是当docker容器中没有前台运行的程序的时候 docker会认为这个容器没有工作内容会自动关闭这个容器<br>解决方法:<br>在写dockerfile的时候 记得留一个在前台执行的任务 特别是在做那种一般在后台运行的服务 如mysql这样的 需要让他在前台运行 mysqld.service</p>","site":{"data":{}},"excerpt":"","more":"<p>###在学习docker的时候 遇到一个坑 就是当docker容器中没有前台运行的程序的时候 docker会认为这个容器没有工作内容会自动关闭这个容器<br>解决方法:<br>在写dockerfile的时候 记得留一个在前台执行的任务 特别是在做那种一般在后台运行的服务 如mysql这样的 需要让他在前台运行 mysqld.service</p>"},{"title":"rocketmq使用docker运行出现重复消费","abbrlink":"814d8f0a","date":"2017-11-10T16:00:00.000Z","_content":"\n##### 最近公司网docker切换 现在开发 测试环境切换  我们发现docker环境下 多节点的rocketmq存在一个重复消费的问题 一个消息 被多次消费了 \n\n-----------------------------------------------------------------------------------------\n\n@author 欢总\nrocketmq 版本 3.2.6\n问题描述：测试环境在docker内部署了两个mq consumer，集群消费模式下，消息理应被平均消费，实际情况是每条消息都被消费了两次。\n线上环境是同样的配置，没有出现这个问题。\n关掉dokcer内一个consumer节点，本地再启动一个节点，发现也是正常的。\n猜想是mq consumer instanceName引起的，如果instanceName一样会重复消费，因为集群消费模式是按instanceName做为唯一消费实例的。\n翻了下源码发现，如果没有指定instanceName默认会把pid做为instanceName\n```\nif (this.instanceName.equals(\"DEFAULT\")) {\n    this.instanceName = String.valueOf(UtilAll.getPid());\n}\npublic static int getPid() {\n    RuntimeMXBean runtime = ManagementFactory.getRuntimeMXBean();\n    String name = runtime.getName(); // format: \"pid@hostname\"\n    try {\n        return Integer.parseInt(name.substring(0, name.indexOf('@')));\n    }\n    catch (Exception e) {\n        return -1;\n    }\n}\n```\n查看dokcer内consumer的pid发现都是1（由于每台容器都是干净的，只跑一个程序，所以pid都是1），所以导致了重复消费，一般情况下跑在物理机上pid是不一样的（这里略坑，如果真碰巧一样就惨了），所以不会有问题。\n有两种解决方案：\n1.手动设置instanceName,使每个consumer节点instanceName不一样\n2.修改docker容器配置，使它运行时使用宿主机的pid\n\n####总结:这个问题 略坑  mmp 大佬果然厉害\n#### 一个是rocketmq 如果没有instanceName会使用pid 做instanceName\n####一个是 docker容器都是纯净的会导致pid相同\n","source":"_posts/linux/docker环境下rocketmq重复消费问题.md","raw":"---\ntitle: rocketmq使用docker运行出现重复消费\ncategories: 坑\ntags:\n  - docker\nabbrlink: 814d8f0a\ndate: 2017-11-11 00:00:00\n---\n\n##### 最近公司网docker切换 现在开发 测试环境切换  我们发现docker环境下 多节点的rocketmq存在一个重复消费的问题 一个消息 被多次消费了 \n\n-----------------------------------------------------------------------------------------\n\n@author 欢总\nrocketmq 版本 3.2.6\n问题描述：测试环境在docker内部署了两个mq consumer，集群消费模式下，消息理应被平均消费，实际情况是每条消息都被消费了两次。\n线上环境是同样的配置，没有出现这个问题。\n关掉dokcer内一个consumer节点，本地再启动一个节点，发现也是正常的。\n猜想是mq consumer instanceName引起的，如果instanceName一样会重复消费，因为集群消费模式是按instanceName做为唯一消费实例的。\n翻了下源码发现，如果没有指定instanceName默认会把pid做为instanceName\n```\nif (this.instanceName.equals(\"DEFAULT\")) {\n    this.instanceName = String.valueOf(UtilAll.getPid());\n}\npublic static int getPid() {\n    RuntimeMXBean runtime = ManagementFactory.getRuntimeMXBean();\n    String name = runtime.getName(); // format: \"pid@hostname\"\n    try {\n        return Integer.parseInt(name.substring(0, name.indexOf('@')));\n    }\n    catch (Exception e) {\n        return -1;\n    }\n}\n```\n查看dokcer内consumer的pid发现都是1（由于每台容器都是干净的，只跑一个程序，所以pid都是1），所以导致了重复消费，一般情况下跑在物理机上pid是不一样的（这里略坑，如果真碰巧一样就惨了），所以不会有问题。\n有两种解决方案：\n1.手动设置instanceName,使每个consumer节点instanceName不一样\n2.修改docker容器配置，使它运行时使用宿主机的pid\n\n####总结:这个问题 略坑  mmp 大佬果然厉害\n#### 一个是rocketmq 如果没有instanceName会使用pid 做instanceName\n####一个是 docker容器都是纯净的会导致pid相同\n","slug":"linux/docker环境下rocketmq重复消费问题","published":1,"updated":"2018-08-17T08:10:03.923Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjo9uatxq001mmwcz9c4zjvdp","content":"<h5 id=\"最近公司网docker切换-现在开发-测试环境切换-我们发现docker环境下-多节点的rocketmq存在一个重复消费的问题-一个消息-被多次消费了\"><a href=\"#最近公司网docker切换-现在开发-测试环境切换-我们发现docker环境下-多节点的rocketmq存在一个重复消费的问题-一个消息-被多次消费了\" class=\"headerlink\" title=\"最近公司网docker切换 现在开发 测试环境切换  我们发现docker环境下 多节点的rocketmq存在一个重复消费的问题 一个消息 被多次消费了\"></a>最近公司网docker切换 现在开发 测试环境切换 我们发现docker环境下 多节点的rocketmq存在一个重复消费的问题 一个消息 被多次消费了</h5><hr><p>@author 欢总<br>rocketmq 版本 3.2.6<br>问题描述：测试环境在docker内部署了两个mq consumer，集群消费模式下，消息理应被平均消费，实际情况是每条消息都被消费了两次。<br>线上环境是同样的配置，没有出现这个问题。<br>关掉dokcer内一个consumer节点，本地再启动一个节点，发现也是正常的。<br>猜想是mq consumer instanceName引起的，如果instanceName一样会重复消费，因为集群消费模式是按instanceName做为唯一消费实例的。<br>翻了下源码发现，如果没有指定instanceName默认会把pid做为instanceName<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if (this.instanceName.equals(&quot;DEFAULT&quot;)) &#123;</span><br><span class=\"line\">    this.instanceName = String.valueOf(UtilAll.getPid());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">public static int getPid() &#123;</span><br><span class=\"line\">    RuntimeMXBean runtime = ManagementFactory.getRuntimeMXBean();</span><br><span class=\"line\">    String name = runtime.getName(); // format: &quot;pid@hostname&quot;</span><br><span class=\"line\">    try &#123;</span><br><span class=\"line\">        return Integer.parseInt(name.substring(0, name.indexOf(&apos;@&apos;)));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    catch (Exception e) &#123;</span><br><span class=\"line\">        return -1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p>\n<p>查看dokcer内consumer的pid发现都是1（由于每台容器都是干净的，只跑一个程序，所以pid都是1），所以导致了重复消费，一般情况下跑在物理机上pid是不一样的（这里略坑，如果真碰巧一样就惨了），所以不会有问题。<br>有两种解决方案：<br>1.手动设置instanceName,使每个consumer节点instanceName不一样<br>2.修改docker容器配置，使它运行时使用宿主机的pid</p>\n<p>####总结:这个问题 略坑  mmp 大佬果然厉害</p>\n<h4 id=\"一个是rocketmq-如果没有instanceName会使用pid-做instanceName\"><a href=\"#一个是rocketmq-如果没有instanceName会使用pid-做instanceName\" class=\"headerlink\" title=\"一个是rocketmq 如果没有instanceName会使用pid 做instanceName\"></a>一个是rocketmq 如果没有instanceName会使用pid 做instanceName</h4><p>####一个是 docker容器都是纯净的会导致pid相同</p>","site":{"data":{}},"excerpt":"","more":"<h5 id=\"最近公司网docker切换-现在开发-测试环境切换-我们发现docker环境下-多节点的rocketmq存在一个重复消费的问题-一个消息-被多次消费了\"><a href=\"#最近公司网docker切换-现在开发-测试环境切换-我们发现docker环境下-多节点的rocketmq存在一个重复消费的问题-一个消息-被多次消费了\" class=\"headerlink\" title=\"最近公司网docker切换 现在开发 测试环境切换  我们发现docker环境下 多节点的rocketmq存在一个重复消费的问题 一个消息 被多次消费了\"></a>最近公司网docker切换 现在开发 测试环境切换 我们发现docker环境下 多节点的rocketmq存在一个重复消费的问题 一个消息 被多次消费了</h5><hr><p>@author 欢总<br>rocketmq 版本 3.2.6<br>问题描述：测试环境在docker内部署了两个mq consumer，集群消费模式下，消息理应被平均消费，实际情况是每条消息都被消费了两次。<br>线上环境是同样的配置，没有出现这个问题。<br>关掉dokcer内一个consumer节点，本地再启动一个节点，发现也是正常的。<br>猜想是mq consumer instanceName引起的，如果instanceName一样会重复消费，因为集群消费模式是按instanceName做为唯一消费实例的。<br>翻了下源码发现，如果没有指定instanceName默认会把pid做为instanceName<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if (this.instanceName.equals(&quot;DEFAULT&quot;)) &#123;</span><br><span class=\"line\">    this.instanceName = String.valueOf(UtilAll.getPid());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">public static int getPid() &#123;</span><br><span class=\"line\">    RuntimeMXBean runtime = ManagementFactory.getRuntimeMXBean();</span><br><span class=\"line\">    String name = runtime.getName(); // format: &quot;pid@hostname&quot;</span><br><span class=\"line\">    try &#123;</span><br><span class=\"line\">        return Integer.parseInt(name.substring(0, name.indexOf(&apos;@&apos;)));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    catch (Exception e) &#123;</span><br><span class=\"line\">        return -1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p>\n<p>查看dokcer内consumer的pid发现都是1（由于每台容器都是干净的，只跑一个程序，所以pid都是1），所以导致了重复消费，一般情况下跑在物理机上pid是不一样的（这里略坑，如果真碰巧一样就惨了），所以不会有问题。<br>有两种解决方案：<br>1.手动设置instanceName,使每个consumer节点instanceName不一样<br>2.修改docker容器配置，使它运行时使用宿主机的pid</p>\n<p>####总结:这个问题 略坑  mmp 大佬果然厉害</p>\n<h4 id=\"一个是rocketmq-如果没有instanceName会使用pid-做instanceName\"><a href=\"#一个是rocketmq-如果没有instanceName会使用pid-做instanceName\" class=\"headerlink\" title=\"一个是rocketmq 如果没有instanceName会使用pid 做instanceName\"></a>一个是rocketmq 如果没有instanceName会使用pid 做instanceName</h4><p>####一个是 docker容器都是纯净的会导致pid相同</p>"},{"title":"docker配置daemon.json(加速、http访问私服仓库)","abbrlink":"3022b6f9","date":"2017-11-10T16:00:00.000Z","_content":"#### daemon.json\ndaemon.json 在linux下呢一般在/etc/docker/daemon.json 目录 \n这个配置主要配置 docker守护进程的相关参数 例如代理、私服仓库、相关网络配置\n避免直接配置docker.service \n官方文档地址:https://docs.docker.com/engine/reference/commandline/dockerd/#examples \n参考国内博客:http://blog.51cto.com/nosmoking/1881034\n####常用配置 \n###### 1:aliyun的docker加速是可以个人申请一个加速节点的 以下是我自己的加速点做为实例\n当docker版本超过1.10的时候通过修改daemon配置文件/etc/docker/daemon.json来使用加速器：\n```\nsudo mkdir -p /etc/docker\nsudo tee /etc/docker/daemon.json <<-'EOF'\n{\n  \"registry-mirrors\": [\"https://o4omo0yw.mirror.aliyuncs.com\"]\n}\nEOF\nsudo systemctl daemon-reload\nsudo systemctl restart docker\n```\n###### 2：配置私服仓库地址\n这个配置 可以避免私服仓库没有https访问导致无法使用的问题 \n```\nsudo mkdir -p /etc/docker\nsudo tee /etc/docker/daemon.json <<-'EOF'\n{\n  \"insecure-registries\":[\"<private repository url>\"]\n}\nEOF\nsudo systemctl daemon-reload\nsudo systemctl restart docker\n```\n\n","source":"_posts/linux/docker配置daemon.json(加速、http访问私服仓库).md","raw":"---\ntitle: docker配置daemon.json(加速、http访问私服仓库)\ncategories: 实战\ntags:\n  - docker\nabbrlink: 3022b6f9\ndate: 2017-11-11 00:00:00\n---\n#### daemon.json\ndaemon.json 在linux下呢一般在/etc/docker/daemon.json 目录 \n这个配置主要配置 docker守护进程的相关参数 例如代理、私服仓库、相关网络配置\n避免直接配置docker.service \n官方文档地址:https://docs.docker.com/engine/reference/commandline/dockerd/#examples \n参考国内博客:http://blog.51cto.com/nosmoking/1881034\n####常用配置 \n###### 1:aliyun的docker加速是可以个人申请一个加速节点的 以下是我自己的加速点做为实例\n当docker版本超过1.10的时候通过修改daemon配置文件/etc/docker/daemon.json来使用加速器：\n```\nsudo mkdir -p /etc/docker\nsudo tee /etc/docker/daemon.json <<-'EOF'\n{\n  \"registry-mirrors\": [\"https://o4omo0yw.mirror.aliyuncs.com\"]\n}\nEOF\nsudo systemctl daemon-reload\nsudo systemctl restart docker\n```\n###### 2：配置私服仓库地址\n这个配置 可以避免私服仓库没有https访问导致无法使用的问题 \n```\nsudo mkdir -p /etc/docker\nsudo tee /etc/docker/daemon.json <<-'EOF'\n{\n  \"insecure-registries\":[\"<private repository url>\"]\n}\nEOF\nsudo systemctl daemon-reload\nsudo systemctl restart docker\n```\n\n","slug":"linux/docker配置daemon.json(加速、http访问私服仓库)","published":1,"updated":"2018-08-17T08:10:03.923Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjo9uatxq001qmwczl5tggrct","content":"<h4 id=\"daemon-json\"><a href=\"#daemon-json\" class=\"headerlink\" title=\"daemon.json\"></a>daemon.json</h4><p>daemon.json 在linux下呢一般在/etc/docker/daemon.json 目录<br>这个配置主要配置 docker守护进程的相关参数 例如代理、私服仓库、相关网络配置<br>避免直接配置docker.service<br>官方文档地址:<a href=\"https://docs.docker.com/engine/reference/commandline/dockerd/#examples\" target=\"_blank\" rel=\"noopener\">https://docs.docker.com/engine/reference/commandline/dockerd/#examples</a><br>参考国内博客:<a href=\"http://blog.51cto.com/nosmoking/1881034\" target=\"_blank\" rel=\"noopener\">http://blog.51cto.com/nosmoking/1881034</a></p><p>####常用配置</p><h6 id=\"1-aliyun的docker加速是可以个人申请一个加速节点的-以下是我自己的加速点做为实例\"><a href=\"#1-aliyun的docker加速是可以个人申请一个加速节点的-以下是我自己的加速点做为实例\" class=\"headerlink\" title=\"1:aliyun的docker加速是可以个人申请一个加速节点的 以下是我自己的加速点做为实例\"></a>1:aliyun的docker加速是可以个人申请一个加速节点的 以下是我自己的加速点做为实例</h6><p>当docker版本超过1.10的时候通过修改daemon配置文件/etc/docker/daemon.json来使用加速器：<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo mkdir -p /etc/docker</span><br><span class=\"line\">sudo tee /etc/docker/daemon.json &lt;&lt;-&apos;EOF&apos;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;registry-mirrors&quot;: [&quot;https://o4omo0yw.mirror.aliyuncs.com&quot;]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">EOF</span><br><span class=\"line\">sudo systemctl daemon-reload</span><br><span class=\"line\">sudo systemctl restart docker</span><br></pre></td></tr></table></figure><p></p>\n<h6 id=\"2：配置私服仓库地址\"><a href=\"#2：配置私服仓库地址\" class=\"headerlink\" title=\"2：配置私服仓库地址\"></a>2：配置私服仓库地址</h6><p>这个配置 可以避免私服仓库没有https访问导致无法使用的问题<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo mkdir -p /etc/docker</span><br><span class=\"line\">sudo tee /etc/docker/daemon.json &lt;&lt;-&apos;EOF&apos;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;insecure-registries&quot;:[&quot;&lt;private repository url&gt;&quot;]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">EOF</span><br><span class=\"line\">sudo systemctl daemon-reload</span><br><span class=\"line\">sudo systemctl restart docker</span><br></pre></td></tr></table></figure><p></p>","site":{"data":{}},"excerpt":"","more":"<h4 id=\"daemon-json\"><a href=\"#daemon-json\" class=\"headerlink\" title=\"daemon.json\"></a>daemon.json</h4><p>daemon.json 在linux下呢一般在/etc/docker/daemon.json 目录<br>这个配置主要配置 docker守护进程的相关参数 例如代理、私服仓库、相关网络配置<br>避免直接配置docker.service<br>官方文档地址:<a href=\"https://docs.docker.com/engine/reference/commandline/dockerd/#examples\" target=\"_blank\" rel=\"noopener\">https://docs.docker.com/engine/reference/commandline/dockerd/#examples</a><br>参考国内博客:<a href=\"http://blog.51cto.com/nosmoking/1881034\" target=\"_blank\" rel=\"noopener\">http://blog.51cto.com/nosmoking/1881034</a></p><p>####常用配置</p><h6 id=\"1-aliyun的docker加速是可以个人申请一个加速节点的-以下是我自己的加速点做为实例\"><a href=\"#1-aliyun的docker加速是可以个人申请一个加速节点的-以下是我自己的加速点做为实例\" class=\"headerlink\" title=\"1:aliyun的docker加速是可以个人申请一个加速节点的 以下是我自己的加速点做为实例\"></a>1:aliyun的docker加速是可以个人申请一个加速节点的 以下是我自己的加速点做为实例</h6><p>当docker版本超过1.10的时候通过修改daemon配置文件/etc/docker/daemon.json来使用加速器：<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo mkdir -p /etc/docker</span><br><span class=\"line\">sudo tee /etc/docker/daemon.json &lt;&lt;-&apos;EOF&apos;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;registry-mirrors&quot;: [&quot;https://o4omo0yw.mirror.aliyuncs.com&quot;]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">EOF</span><br><span class=\"line\">sudo systemctl daemon-reload</span><br><span class=\"line\">sudo systemctl restart docker</span><br></pre></td></tr></table></figure><p></p>\n<h6 id=\"2：配置私服仓库地址\"><a href=\"#2：配置私服仓库地址\" class=\"headerlink\" title=\"2：配置私服仓库地址\"></a>2：配置私服仓库地址</h6><p>这个配置 可以避免私服仓库没有https访问导致无法使用的问题<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo mkdir -p /etc/docker</span><br><span class=\"line\">sudo tee /etc/docker/daemon.json &lt;&lt;-&apos;EOF&apos;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;insecure-registries&quot;:[&quot;&lt;private repository url&gt;&quot;]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">EOF</span><br><span class=\"line\">sudo systemctl daemon-reload</span><br><span class=\"line\">sudo systemctl restart docker</span><br></pre></td></tr></table></figure><p></p>"},{"title":"es+kibana+filebeat采集docker日志实战","comments":1,"abbrlink":"7383a41","date":"2018-07-17T03:35:03.000Z","_content":"#### 前言\n最近看了看 docker 标准输出和标准错误的日志采集  \n发现 filebeat 可以直接监听 docker的启动结束等动作  并且几乎不需要配置什么 就可以很轻松的采集到node上的docker运行的日志 \n而且也可以直接接入 k8s的标准输出和错误日志  贯彻了 elastic 的简单粗暴的套路   \n\n#### 实战 \n##### 启动 elastic-search 和kibana\n这里直接使用docker 启动即可  如果是生产或者预发环境 建议使用官方的镜像作基础镜像在上面进行个性化优化  \n```\nsudo docker run -d -p 9200:9200 -p 5601:5601 --name es-kibana-test  nshou/elasticsearch-kibana\n```\n##### 安装filebeat \n这里使用下载压缩包方式安装 因为改配置简单  如果需要使用docker方式启动 改配置不是很方便 需要进行调整 这里只是作演示  就直接选择压缩包方式使用 \n```\n#https://www.elastic.co/downloads/beats/filebeat\nweget   https://artifacts.elastic.co/downloads/beats/filebeat/filebeat-6.3.1-linux-x86_64.tar.gz\nsudo zxvf ./filebeat-6.3.1-linux-x86_64.tar.gz\n```\n##### 修改filebeat配置\n先备份 默认的filebeat.yml\n```\nsudo cp ./filebeat.yml filebeat.yml.bak\n```\n修改安装目录中filebeat.yml 主要是修改 inputs的type  自动安装kibana的索引  和es地址  \n具体配置详情参考:https://www.elastic.co/docker-kubernetes-container-monitoring\n```\n#=========================== Filebeat inputs =============================\n\nfilebeat.inputs:\n - type: docker\n   containers.ids:\n           - '*'\n   processors:\n       - add_docker_metadata: ~\n\n\n#============================== Kibana =====================================\n\nsetup.kibana:\n  host: \"localhost:5601\"\n\n\n#================================ Outputs =====================================\n\n#-------------------------- Elasticsearch output ------------------------------\noutput.elasticsearch:\n  # Array of hosts to connect to.\n  hosts: [\"localhost:9200\"]\n\n```\n##### 启动并且根据配置自动安装filebeat 索引  \n```\n# 启动并且安装 filebeat \nsudo ./filebeat --setup -e \n```\n这个时候 在这台node上 所有docker的日志都会被filebeat采集起来并且发送到es上   \n\n产出日志后 直接在kibana上查看即可    \n\n#### 遇到的问题\n* kibana 建立读取索引的时候 报错 FORBIDDEN/12/index read-only / allow delete (api)]\n删除 索引的 只读权限即可     \n```\ncurl -XPUT -H \"Content-Type: application/json\" http://ip:9200/_all/_settings -d '{\"index.blocks.read_only_allow_delete\": null}'\n```\n\n#### 总结 \n由于 docker集群的日志采集比较操蛋 可能是多种不同的系统运行(例如java类应用、各种服务软件的日志之类的) 那么在日志格式上无法做到 统一 \n采用这种通过收集docker 的标准输出和错误输出 可以收集整个docker集群中的docker的日志  方便查看和管理 \n\n当然filebeat也支持直接和k8s集群接入  \n\n\n\n\n\n\n","source":"_posts/linux/es-kibana-filebeat采集docker日志实战.md","raw":"---\ntitle: es+kibana+filebeat采集docker日志实战\ncomments: true\ncategories: 实战\ntags:\n  - 日志\n  - es\n  - kibana\n  - filebeat\n  - docker\nabbrlink: 7383a41\ndate: 2018-07-17 11:35:03\n---\n#### 前言\n最近看了看 docker 标准输出和标准错误的日志采集  \n发现 filebeat 可以直接监听 docker的启动结束等动作  并且几乎不需要配置什么 就可以很轻松的采集到node上的docker运行的日志 \n而且也可以直接接入 k8s的标准输出和错误日志  贯彻了 elastic 的简单粗暴的套路   \n\n#### 实战 \n##### 启动 elastic-search 和kibana\n这里直接使用docker 启动即可  如果是生产或者预发环境 建议使用官方的镜像作基础镜像在上面进行个性化优化  \n```\nsudo docker run -d -p 9200:9200 -p 5601:5601 --name es-kibana-test  nshou/elasticsearch-kibana\n```\n##### 安装filebeat \n这里使用下载压缩包方式安装 因为改配置简单  如果需要使用docker方式启动 改配置不是很方便 需要进行调整 这里只是作演示  就直接选择压缩包方式使用 \n```\n#https://www.elastic.co/downloads/beats/filebeat\nweget   https://artifacts.elastic.co/downloads/beats/filebeat/filebeat-6.3.1-linux-x86_64.tar.gz\nsudo zxvf ./filebeat-6.3.1-linux-x86_64.tar.gz\n```\n##### 修改filebeat配置\n先备份 默认的filebeat.yml\n```\nsudo cp ./filebeat.yml filebeat.yml.bak\n```\n修改安装目录中filebeat.yml 主要是修改 inputs的type  自动安装kibana的索引  和es地址  \n具体配置详情参考:https://www.elastic.co/docker-kubernetes-container-monitoring\n```\n#=========================== Filebeat inputs =============================\n\nfilebeat.inputs:\n - type: docker\n   containers.ids:\n           - '*'\n   processors:\n       - add_docker_metadata: ~\n\n\n#============================== Kibana =====================================\n\nsetup.kibana:\n  host: \"localhost:5601\"\n\n\n#================================ Outputs =====================================\n\n#-------------------------- Elasticsearch output ------------------------------\noutput.elasticsearch:\n  # Array of hosts to connect to.\n  hosts: [\"localhost:9200\"]\n\n```\n##### 启动并且根据配置自动安装filebeat 索引  \n```\n# 启动并且安装 filebeat \nsudo ./filebeat --setup -e \n```\n这个时候 在这台node上 所有docker的日志都会被filebeat采集起来并且发送到es上   \n\n产出日志后 直接在kibana上查看即可    \n\n#### 遇到的问题\n* kibana 建立读取索引的时候 报错 FORBIDDEN/12/index read-only / allow delete (api)]\n删除 索引的 只读权限即可     \n```\ncurl -XPUT -H \"Content-Type: application/json\" http://ip:9200/_all/_settings -d '{\"index.blocks.read_only_allow_delete\": null}'\n```\n\n#### 总结 \n由于 docker集群的日志采集比较操蛋 可能是多种不同的系统运行(例如java类应用、各种服务软件的日志之类的) 那么在日志格式上无法做到 统一 \n采用这种通过收集docker 的标准输出和错误输出 可以收集整个docker集群中的docker的日志  方便查看和管理 \n\n当然filebeat也支持直接和k8s集群接入  \n\n\n\n\n\n\n","slug":"linux/es-kibana-filebeat采集docker日志实战","published":1,"updated":"2018-08-17T08:10:03.923Z","layout":"post","photos":[],"link":"","_id":"cjo9uatxr001umwcz5jtjgxwq","content":"<h4 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h4><p>最近看了看 docker 标准输出和标准错误的日志采集<br>发现 filebeat 可以直接监听 docker的启动结束等动作 并且几乎不需要配置什么 就可以很轻松的采集到node上的docker运行的日志<br>而且也可以直接接入 k8s的标准输出和错误日志 贯彻了 elastic 的简单粗暴的套路</p><h4 id=\"实战\"><a href=\"#实战\" class=\"headerlink\" title=\"实战\"></a>实战</h4><h5 id=\"启动-elastic-search-和kibana\"><a href=\"#启动-elastic-search-和kibana\" class=\"headerlink\" title=\"启动 elastic-search 和kibana\"></a>启动 elastic-search 和kibana</h5><p>这里直接使用docker 启动即可 如果是生产或者预发环境 建议使用官方的镜像作基础镜像在上面进行个性化优化<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo docker run -d -p 9200:9200 -p 5601:5601 --name es-kibana-test  nshou/elasticsearch-kibana</span><br></pre></td></tr></table></figure><p></p>\n<h5 id=\"安装filebeat\"><a href=\"#安装filebeat\" class=\"headerlink\" title=\"安装filebeat\"></a>安装filebeat</h5><p>这里使用下载压缩包方式安装 因为改配置简单  如果需要使用docker方式启动 改配置不是很方便 需要进行调整 这里只是作演示  就直接选择压缩包方式使用<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#https://www.elastic.co/downloads/beats/filebeat</span><br><span class=\"line\">weget   https://artifacts.elastic.co/downloads/beats/filebeat/filebeat-6.3.1-linux-x86_64.tar.gz</span><br><span class=\"line\">sudo zxvf ./filebeat-6.3.1-linux-x86_64.tar.gz</span><br></pre></td></tr></table></figure><p></p>\n<h5 id=\"修改filebeat配置\"><a href=\"#修改filebeat配置\" class=\"headerlink\" title=\"修改filebeat配置\"></a>修改filebeat配置</h5><p>先备份 默认的filebeat.yml<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo cp ./filebeat.yml filebeat.yml.bak</span><br></pre></td></tr></table></figure><p></p>\n<p>修改安装目录中filebeat.yml 主要是修改 inputs的type  自动安装kibana的索引  和es地址<br>具体配置详情参考:<a href=\"https://www.elastic.co/docker-kubernetes-container-monitoring\" target=\"_blank\" rel=\"noopener\">https://www.elastic.co/docker-kubernetes-container-monitoring</a><br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#=========================== Filebeat inputs =============================</span><br><span class=\"line\"></span><br><span class=\"line\">filebeat.inputs:</span><br><span class=\"line\"> - type: docker</span><br><span class=\"line\">   containers.ids:</span><br><span class=\"line\">           - &apos;*&apos;</span><br><span class=\"line\">   processors:</span><br><span class=\"line\">       - add_docker_metadata: ~</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#============================== Kibana =====================================</span><br><span class=\"line\"></span><br><span class=\"line\">setup.kibana:</span><br><span class=\"line\">  host: &quot;localhost:5601&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#================================ Outputs =====================================</span><br><span class=\"line\"></span><br><span class=\"line\">#-------------------------- Elasticsearch output ------------------------------</span><br><span class=\"line\">output.elasticsearch:</span><br><span class=\"line\">  # Array of hosts to connect to.</span><br><span class=\"line\">  hosts: [&quot;localhost:9200&quot;]</span><br></pre></td></tr></table></figure><p></p>\n<h5 id=\"启动并且根据配置自动安装filebeat-索引\"><a href=\"#启动并且根据配置自动安装filebeat-索引\" class=\"headerlink\" title=\"启动并且根据配置自动安装filebeat 索引\"></a>启动并且根据配置自动安装filebeat 索引</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 启动并且安装 filebeat </span><br><span class=\"line\">sudo ./filebeat --setup -e</span><br></pre></td></tr></table></figure>\n<p>这个时候 在这台node上 所有docker的日志都会被filebeat采集起来并且发送到es上   </p>\n<p>产出日志后 直接在kibana上查看即可    </p>\n<h4 id=\"遇到的问题\"><a href=\"#遇到的问题\" class=\"headerlink\" title=\"遇到的问题\"></a>遇到的问题</h4><ul>\n<li>kibana 建立读取索引的时候 报错 FORBIDDEN/12/index read-only / allow delete (api)]<br>删除 索引的 只读权限即可     <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -XPUT -H &quot;Content-Type: application/json&quot; http://ip:9200/_all/_settings -d &apos;&#123;&quot;index.blocks.read_only_allow_delete&quot;: null&#125;&apos;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><p>由于 docker集群的日志采集比较操蛋 可能是多种不同的系统运行(例如java类应用、各种服务软件的日志之类的) 那么在日志格式上无法做到 统一<br>采用这种通过收集docker 的标准输出和错误输出 可以收集整个docker集群中的docker的日志  方便查看和管理 </p>\n<p>当然filebeat也支持直接和k8s集群接入</p>","site":{"data":{}},"excerpt":"","more":"<h4 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h4><p>最近看了看 docker 标准输出和标准错误的日志采集<br>发现 filebeat 可以直接监听 docker的启动结束等动作 并且几乎不需要配置什么 就可以很轻松的采集到node上的docker运行的日志<br>而且也可以直接接入 k8s的标准输出和错误日志 贯彻了 elastic 的简单粗暴的套路</p><h4 id=\"实战\"><a href=\"#实战\" class=\"headerlink\" title=\"实战\"></a>实战</h4><h5 id=\"启动-elastic-search-和kibana\"><a href=\"#启动-elastic-search-和kibana\" class=\"headerlink\" title=\"启动 elastic-search 和kibana\"></a>启动 elastic-search 和kibana</h5><p>这里直接使用docker 启动即可 如果是生产或者预发环境 建议使用官方的镜像作基础镜像在上面进行个性化优化<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo docker run -d -p 9200:9200 -p 5601:5601 --name es-kibana-test  nshou/elasticsearch-kibana</span><br></pre></td></tr></table></figure><p></p>\n<h5 id=\"安装filebeat\"><a href=\"#安装filebeat\" class=\"headerlink\" title=\"安装filebeat\"></a>安装filebeat</h5><p>这里使用下载压缩包方式安装 因为改配置简单  如果需要使用docker方式启动 改配置不是很方便 需要进行调整 这里只是作演示  就直接选择压缩包方式使用<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#https://www.elastic.co/downloads/beats/filebeat</span><br><span class=\"line\">weget   https://artifacts.elastic.co/downloads/beats/filebeat/filebeat-6.3.1-linux-x86_64.tar.gz</span><br><span class=\"line\">sudo zxvf ./filebeat-6.3.1-linux-x86_64.tar.gz</span><br></pre></td></tr></table></figure><p></p>\n<h5 id=\"修改filebeat配置\"><a href=\"#修改filebeat配置\" class=\"headerlink\" title=\"修改filebeat配置\"></a>修改filebeat配置</h5><p>先备份 默认的filebeat.yml<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo cp ./filebeat.yml filebeat.yml.bak</span><br></pre></td></tr></table></figure><p></p>\n<p>修改安装目录中filebeat.yml 主要是修改 inputs的type  自动安装kibana的索引  和es地址<br>具体配置详情参考:<a href=\"https://www.elastic.co/docker-kubernetes-container-monitoring\" target=\"_blank\" rel=\"noopener\">https://www.elastic.co/docker-kubernetes-container-monitoring</a><br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#=========================== Filebeat inputs =============================</span><br><span class=\"line\"></span><br><span class=\"line\">filebeat.inputs:</span><br><span class=\"line\"> - type: docker</span><br><span class=\"line\">   containers.ids:</span><br><span class=\"line\">           - &apos;*&apos;</span><br><span class=\"line\">   processors:</span><br><span class=\"line\">       - add_docker_metadata: ~</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#============================== Kibana =====================================</span><br><span class=\"line\"></span><br><span class=\"line\">setup.kibana:</span><br><span class=\"line\">  host: &quot;localhost:5601&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#================================ Outputs =====================================</span><br><span class=\"line\"></span><br><span class=\"line\">#-------------------------- Elasticsearch output ------------------------------</span><br><span class=\"line\">output.elasticsearch:</span><br><span class=\"line\">  # Array of hosts to connect to.</span><br><span class=\"line\">  hosts: [&quot;localhost:9200&quot;]</span><br></pre></td></tr></table></figure><p></p>\n<h5 id=\"启动并且根据配置自动安装filebeat-索引\"><a href=\"#启动并且根据配置自动安装filebeat-索引\" class=\"headerlink\" title=\"启动并且根据配置自动安装filebeat 索引\"></a>启动并且根据配置自动安装filebeat 索引</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 启动并且安装 filebeat </span><br><span class=\"line\">sudo ./filebeat --setup -e</span><br></pre></td></tr></table></figure>\n<p>这个时候 在这台node上 所有docker的日志都会被filebeat采集起来并且发送到es上   </p>\n<p>产出日志后 直接在kibana上查看即可    </p>\n<h4 id=\"遇到的问题\"><a href=\"#遇到的问题\" class=\"headerlink\" title=\"遇到的问题\"></a>遇到的问题</h4><ul>\n<li>kibana 建立读取索引的时候 报错 FORBIDDEN/12/index read-only / allow delete (api)]<br>删除 索引的 只读权限即可     <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -XPUT -H &quot;Content-Type: application/json&quot; http://ip:9200/_all/_settings -d &apos;&#123;&quot;index.blocks.read_only_allow_delete&quot;: null&#125;&apos;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><p>由于 docker集群的日志采集比较操蛋 可能是多种不同的系统运行(例如java类应用、各种服务软件的日志之类的) 那么在日志格式上无法做到 统一<br>采用这种通过收集docker 的标准输出和错误输出 可以收集整个docker集群中的docker的日志  方便查看和管理 </p>\n<p>当然filebeat也支持直接和k8s集群接入</p>"},{"title":"iptables笔记","abbrlink":"5bcc860","date":"2017-11-10T16:00:00.000Z","_content":"##iptables linux上常用防火墙 \n参考地址：http://www.cnblogs.com/kevingrace/p/6265113.html\n#### iptables 和netfilter关系\nnetfilter 是linux内核中实现的包过滤的函数相关的东西\niptables 是一个管理防火墙的工具 真正实现防火墙的还是netfilter\n#### 语法\niptables (选项) (参数)\n#### 选项\nman iptables \n\n-t<表>：指定要操纵的表；  \n-A：向规则链中添加条目；   \n-D：从规则链中删除条目；   \n-I：向规则链中插入条目；   \n-R：替换规则链中的条目；   \n-L：显示规则链中已有的条目；   \n-F：清楚规则链中已有的条目；   \n-Z：清空规则链中的数据包计算器和字节计数器；   \n-X:删除规则链  \n-N：创建新的用户自定义规则链；   \n-P：定义规则链中的默认目标；   \n-h：显示帮助信息；   \n-p：指定要匹配的数据包协议类型；   \n-s：指定要匹配的数据包源ip地址；   \n-j<目标>：指定要跳转的目标；   \n-i<网络接口>：指定数据包进入本机的网络接口；   \n-o<网络接口>：指定数据包要离开本机所使用的网络接口。  \n\n```\niptables -t 表名 <-A/I/D/R> 规则链名 [规则号] <-i/o 网卡名> -p 协议名 <-s 源IP/源子网> --sport 源端口 <-d 目标IP/目标子网> --dport 目标端口 -j 动作\n\n```\n![iptables用法](http://upload-images.jianshu.io/upload_images/3905525-b576da7a2c520fbc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![iptables 参数](http://upload-images.jianshu.io/upload_images/3905525-7e8ee8a4829024de.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n####表名\n提供特定的功能 \n|名称|功能|备注| \n|:--|:--|:--|\n|raw|数据跟踪处理|网址过滤|\n|mangle|数据包修改，包重构|qds|\n|nat|地址转换,网络地址转换|网关路由|\n|filter|包过滤|防火墙规则|\n\n#### 链 名\n\n|名称|功能|备注|\n|:--|:--|:--|\n|INPUT|输入数据包|对输入数据包的规则|\n|OUTPUT|输出数据包|对输出数据包的规则|\n|FORWARD|转发数据包|对转发数据的规则|\n|PREROUTING|目标地址转换数据包|DANT|\n|POSTOUTING|源地址转换数据包|SNAT|\n\n#### 表 和 链的关系图\n![四表五链](http://upload-images.jianshu.io/upload_images/3905525-6ca6c7de7205562d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![请求流转流程图](http://upload-images.jianshu.io/upload_images/3905525-fc2f411c47c80d5a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![请求流转详情流程图](http://upload-images.jianshu.io/upload_images/3905525-d28fca015fec26d2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n####动作\n\n|名称|功能|备注|\n|:--|:--|:--|\n|ACCEPT|接受数据包|常用  打开某个端口接受数据|\n|DROP|丢弃数据包| 常用  禁止某个端口访问|\n|MATCH|匹配|符合某个ip 或者端口 |\n|REJECT|丢弃数据包 |可以向发送这个包的源主机发送错误消息|\n|TARGET| 指定动作 |说明如何处理这个数据包 接受 丢弃 拒绝|\n|JUMP|标识跳转到那个链上||\n|RULE|一个或者多个匹配及其对应目标||\n|REDIRECT|重定向、映射、透明代理||\n|SNAT|源地址转换||\n|DNAT|目标地址转换||\n|MASQUERADE|ip伪装|nat 用于adsl|\n|LOG|日志记录||\n\n####实例\n* 查看已有的iptables 规则\n```\n//查看iptables 列表 带数字 \niptables -L -n -v \n//查看iptables 以序号标记\niptables -L -n --line-numbers\n```\n* 清除已有的iptables 规则\n```\niptables -F   --flush ：清楚规则链中已有的条目；\niptables -X    --delete-chain  删除 规则链\niptables -Z    --flush ：清空规则链中的数据包计算器和字节计数器；   \n```\n*删除 INPUT中的序号为num的规则\n```\niptables -D INPUT num\n```\n*开放指定端口 就是接受数据包 \n```\n# 开启本地回环接口 运行本机访问本机\niptables -A INPUT -s 127.0.0.1 -j ACCEPT \n# 允许已建立或相关连的通行\niptables -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT\n#允许本机所有向外访问\niptables -A OUTPUT -j ACCEPT\n#允许 访问某个端口\niptables -A INPUT -p tcp  --dport 22 -j ACCEPT  允许访问 22端口\n# 禁止其他未允许的规则访问\niptables -A INPUT -j reject\n# 禁止其他未允许的转发数据包访问\niptables -A FORWARD -j reject\n```\n* 屏蔽ip \n```\n# 屏蔽单个ip\niptables -I INPUT -s 123.1.1.1 -j DROP\n# 屏蔽整个网段 123.0.0.0 - 123.255.255.254\niptables -I INPUT -s 123.0.0.0/8 -j DROP\n# 屏蔽123.1.0.0 - 123.1.255.254网段\niptables -I INPUT -s 123.1.0.0/16 -j DROP\n# 屏蔽 123.1.1.0 - 123.1.1.254网段\niptables -i INPUT -s 123.1.1.0/24 -j DROP \n```\n*\n*\n*\n","source":"_posts/linux/iptables笔记.md","raw":"---\ntitle: iptables笔记\ncategories: 笔记\ntags:\n  - linux\nabbrlink: 5bcc860\ndate: 2017-11-11 00:00:00\n---\n##iptables linux上常用防火墙 \n参考地址：http://www.cnblogs.com/kevingrace/p/6265113.html\n#### iptables 和netfilter关系\nnetfilter 是linux内核中实现的包过滤的函数相关的东西\niptables 是一个管理防火墙的工具 真正实现防火墙的还是netfilter\n#### 语法\niptables (选项) (参数)\n#### 选项\nman iptables \n\n-t<表>：指定要操纵的表；  \n-A：向规则链中添加条目；   \n-D：从规则链中删除条目；   \n-I：向规则链中插入条目；   \n-R：替换规则链中的条目；   \n-L：显示规则链中已有的条目；   \n-F：清楚规则链中已有的条目；   \n-Z：清空规则链中的数据包计算器和字节计数器；   \n-X:删除规则链  \n-N：创建新的用户自定义规则链；   \n-P：定义规则链中的默认目标；   \n-h：显示帮助信息；   \n-p：指定要匹配的数据包协议类型；   \n-s：指定要匹配的数据包源ip地址；   \n-j<目标>：指定要跳转的目标；   \n-i<网络接口>：指定数据包进入本机的网络接口；   \n-o<网络接口>：指定数据包要离开本机所使用的网络接口。  \n\n```\niptables -t 表名 <-A/I/D/R> 规则链名 [规则号] <-i/o 网卡名> -p 协议名 <-s 源IP/源子网> --sport 源端口 <-d 目标IP/目标子网> --dport 目标端口 -j 动作\n\n```\n![iptables用法](http://upload-images.jianshu.io/upload_images/3905525-b576da7a2c520fbc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![iptables 参数](http://upload-images.jianshu.io/upload_images/3905525-7e8ee8a4829024de.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n####表名\n提供特定的功能 \n|名称|功能|备注| \n|:--|:--|:--|\n|raw|数据跟踪处理|网址过滤|\n|mangle|数据包修改，包重构|qds|\n|nat|地址转换,网络地址转换|网关路由|\n|filter|包过滤|防火墙规则|\n\n#### 链 名\n\n|名称|功能|备注|\n|:--|:--|:--|\n|INPUT|输入数据包|对输入数据包的规则|\n|OUTPUT|输出数据包|对输出数据包的规则|\n|FORWARD|转发数据包|对转发数据的规则|\n|PREROUTING|目标地址转换数据包|DANT|\n|POSTOUTING|源地址转换数据包|SNAT|\n\n#### 表 和 链的关系图\n![四表五链](http://upload-images.jianshu.io/upload_images/3905525-6ca6c7de7205562d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![请求流转流程图](http://upload-images.jianshu.io/upload_images/3905525-fc2f411c47c80d5a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![请求流转详情流程图](http://upload-images.jianshu.io/upload_images/3905525-d28fca015fec26d2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n####动作\n\n|名称|功能|备注|\n|:--|:--|:--|\n|ACCEPT|接受数据包|常用  打开某个端口接受数据|\n|DROP|丢弃数据包| 常用  禁止某个端口访问|\n|MATCH|匹配|符合某个ip 或者端口 |\n|REJECT|丢弃数据包 |可以向发送这个包的源主机发送错误消息|\n|TARGET| 指定动作 |说明如何处理这个数据包 接受 丢弃 拒绝|\n|JUMP|标识跳转到那个链上||\n|RULE|一个或者多个匹配及其对应目标||\n|REDIRECT|重定向、映射、透明代理||\n|SNAT|源地址转换||\n|DNAT|目标地址转换||\n|MASQUERADE|ip伪装|nat 用于adsl|\n|LOG|日志记录||\n\n####实例\n* 查看已有的iptables 规则\n```\n//查看iptables 列表 带数字 \niptables -L -n -v \n//查看iptables 以序号标记\niptables -L -n --line-numbers\n```\n* 清除已有的iptables 规则\n```\niptables -F   --flush ：清楚规则链中已有的条目；\niptables -X    --delete-chain  删除 规则链\niptables -Z    --flush ：清空规则链中的数据包计算器和字节计数器；   \n```\n*删除 INPUT中的序号为num的规则\n```\niptables -D INPUT num\n```\n*开放指定端口 就是接受数据包 \n```\n# 开启本地回环接口 运行本机访问本机\niptables -A INPUT -s 127.0.0.1 -j ACCEPT \n# 允许已建立或相关连的通行\niptables -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT\n#允许本机所有向外访问\niptables -A OUTPUT -j ACCEPT\n#允许 访问某个端口\niptables -A INPUT -p tcp  --dport 22 -j ACCEPT  允许访问 22端口\n# 禁止其他未允许的规则访问\niptables -A INPUT -j reject\n# 禁止其他未允许的转发数据包访问\niptables -A FORWARD -j reject\n```\n* 屏蔽ip \n```\n# 屏蔽单个ip\niptables -I INPUT -s 123.1.1.1 -j DROP\n# 屏蔽整个网段 123.0.0.0 - 123.255.255.254\niptables -I INPUT -s 123.0.0.0/8 -j DROP\n# 屏蔽123.1.0.0 - 123.1.255.254网段\niptables -I INPUT -s 123.1.0.0/16 -j DROP\n# 屏蔽 123.1.1.0 - 123.1.1.254网段\niptables -i INPUT -s 123.1.1.0/24 -j DROP \n```\n*\n*\n*\n","slug":"linux/iptables笔记","published":1,"updated":"2018-08-17T08:10:03.923Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjo9uatxs001xmwcznl91w03e","content":"<p>##iptables linux上常用防火墙<br>参考地址：<a href=\"http://www.cnblogs.com/kevingrace/p/6265113.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/kevingrace/p/6265113.html</a></p><h4 id=\"iptables-和netfilter关系\"><a href=\"#iptables-和netfilter关系\" class=\"headerlink\" title=\"iptables 和netfilter关系\"></a>iptables 和netfilter关系</h4><p>netfilter 是linux内核中实现的包过滤的函数相关的东西<br>iptables 是一个管理防火墙的工具 真正实现防火墙的还是netfilter</p><h4 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h4><p>iptables (选项) (参数)</p><h4 id=\"选项\"><a href=\"#选项\" class=\"headerlink\" title=\"选项\"></a>选项</h4><p>man iptables</p><p>-t&lt;表&gt;：指定要操纵的表；<br>-A：向规则链中添加条目；<br>-D：从规则链中删除条目；<br>-I：向规则链中插入条目；<br>-R：替换规则链中的条目；<br>-L：显示规则链中已有的条目；<br>-F：清楚规则链中已有的条目；<br>-Z：清空规则链中的数据包计算器和字节计数器；<br>-X:删除规则链<br>-N：创建新的用户自定义规则链；<br>-P：定义规则链中的默认目标；<br>-h：显示帮助信息；<br>-p：指定要匹配的数据包协议类型；<br>-s：指定要匹配的数据包源ip地址；<br>-j&lt;目标&gt;：指定要跳转的目标；<br>-i&lt;网络接口&gt;：指定数据包进入本机的网络接口；<br>-o&lt;网络接口&gt;：指定数据包要离开本机所使用的网络接口。</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">iptables -t 表名 &lt;-A/I/D/R&gt; 规则链名 [规则号] &lt;-i/o 网卡名&gt; -p 协议名 &lt;-s 源IP/源子网&gt; --sport 源端口 &lt;-d 目标IP/目标子网&gt; --dport 目标端口 -j 动作</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/3905525-b576da7a2c520fbc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"iptables用法\"><br><img src=\"http://upload-images.jianshu.io/upload_images/3905525-7e8ee8a4829024de.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"iptables 参数\"></p>\n<p>####表名<br>提供特定的功能<br>|名称|功能|备注|<br>|:–|:–|:–|<br>|raw|数据跟踪处理|网址过滤|<br>|mangle|数据包修改，包重构|qds|<br>|nat|地址转换,网络地址转换|网关路由|<br>|filter|包过滤|防火墙规则|</p>\n<h4 id=\"链-名\"><a href=\"#链-名\" class=\"headerlink\" title=\"链 名\"></a>链 名</h4><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">名称</th>\n<th style=\"text-align:left\">功能</th>\n<th style=\"text-align:left\">备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">INPUT</td>\n<td style=\"text-align:left\">输入数据包</td>\n<td style=\"text-align:left\">对输入数据包的规则</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">OUTPUT</td>\n<td style=\"text-align:left\">输出数据包</td>\n<td style=\"text-align:left\">对输出数据包的规则</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">FORWARD</td>\n<td style=\"text-align:left\">转发数据包</td>\n<td style=\"text-align:left\">对转发数据的规则</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">PREROUTING</td>\n<td style=\"text-align:left\">目标地址转换数据包</td>\n<td style=\"text-align:left\">DANT</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">POSTOUTING</td>\n<td style=\"text-align:left\">源地址转换数据包</td>\n<td style=\"text-align:left\">SNAT</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"表-和-链的关系图\"><a href=\"#表-和-链的关系图\" class=\"headerlink\" title=\"表 和 链的关系图\"></a>表 和 链的关系图</h4><p><img src=\"http://upload-images.jianshu.io/upload_images/3905525-6ca6c7de7205562d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"四表五链\"><br><img src=\"http://upload-images.jianshu.io/upload_images/3905525-fc2f411c47c80d5a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"请求流转流程图\"><br><img src=\"http://upload-images.jianshu.io/upload_images/3905525-d28fca015fec26d2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"请求流转详情流程图\"></p>\n<p>####动作</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">名称</th>\n<th style=\"text-align:left\">功能</th>\n<th style=\"text-align:left\">备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">ACCEPT</td>\n<td style=\"text-align:left\">接受数据包</td>\n<td style=\"text-align:left\">常用  打开某个端口接受数据</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">DROP</td>\n<td style=\"text-align:left\">丢弃数据包</td>\n<td style=\"text-align:left\">常用  禁止某个端口访问</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">MATCH</td>\n<td style=\"text-align:left\">匹配</td>\n<td style=\"text-align:left\">符合某个ip 或者端口</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">REJECT</td>\n<td style=\"text-align:left\">丢弃数据包</td>\n<td style=\"text-align:left\">可以向发送这个包的源主机发送错误消息</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">TARGET</td>\n<td style=\"text-align:left\">指定动作</td>\n<td style=\"text-align:left\">说明如何处理这个数据包 接受 丢弃 拒绝</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">JUMP</td>\n<td style=\"text-align:left\">标识跳转到那个链上</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">RULE</td>\n<td style=\"text-align:left\">一个或者多个匹配及其对应目标</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">REDIRECT</td>\n<td style=\"text-align:left\">重定向、映射、透明代理</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">SNAT</td>\n<td style=\"text-align:left\">源地址转换</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">DNAT</td>\n<td style=\"text-align:left\">目标地址转换</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">MASQUERADE</td>\n<td style=\"text-align:left\">ip伪装</td>\n<td style=\"text-align:left\">nat 用于adsl</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">LOG</td>\n<td style=\"text-align:left\">日志记录</td>\n</tr>\n</tbody>\n</table>\n<p>####实例</p>\n<ul>\n<li><p>查看已有的iptables 规则</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//查看iptables 列表 带数字 </span><br><span class=\"line\">iptables -L -n -v </span><br><span class=\"line\">//查看iptables 以序号标记</span><br><span class=\"line\">iptables -L -n --line-numbers</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>清除已有的iptables 规则</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">iptables -F   --flush ：清楚规则链中已有的条目；</span><br><span class=\"line\">iptables -X    --delete-chain  删除 规则链</span><br><span class=\"line\">iptables -Z    --flush ：清空规则链中的数据包计算器和字节计数器；</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>*删除 INPUT中的序号为num的规则<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">iptables -D INPUT num</span><br></pre></td></tr></table></figure><p></p>\n<p>*开放指定端口 就是接受数据包<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 开启本地回环接口 运行本机访问本机</span><br><span class=\"line\">iptables -A INPUT -s 127.0.0.1 -j ACCEPT </span><br><span class=\"line\"># 允许已建立或相关连的通行</span><br><span class=\"line\">iptables -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT</span><br><span class=\"line\">#允许本机所有向外访问</span><br><span class=\"line\">iptables -A OUTPUT -j ACCEPT</span><br><span class=\"line\">#允许 访问某个端口</span><br><span class=\"line\">iptables -A INPUT -p tcp  --dport 22 -j ACCEPT  允许访问 22端口</span><br><span class=\"line\"># 禁止其他未允许的规则访问</span><br><span class=\"line\">iptables -A INPUT -j reject</span><br><span class=\"line\"># 禁止其他未允许的转发数据包访问</span><br><span class=\"line\">iptables -A FORWARD -j reject</span><br></pre></td></tr></table></figure><p></p>\n<ul>\n<li>屏蔽ip <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 屏蔽单个ip</span><br><span class=\"line\">iptables -I INPUT -s 123.1.1.1 -j DROP</span><br><span class=\"line\"># 屏蔽整个网段 123.0.0.0 - 123.255.255.254</span><br><span class=\"line\">iptables -I INPUT -s 123.0.0.0/8 -j DROP</span><br><span class=\"line\"># 屏蔽123.1.0.0 - 123.1.255.254网段</span><br><span class=\"line\">iptables -I INPUT -s 123.1.0.0/16 -j DROP</span><br><span class=\"line\"># 屏蔽 123.1.1.0 - 123.1.1.254网段</span><br><span class=\"line\">iptables -i INPUT -s 123.1.1.0/24 -j DROP</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><em>\n</em><br>*</p>","site":{"data":{}},"excerpt":"","more":"<p>##iptables linux上常用防火墙<br>参考地址：<a href=\"http://www.cnblogs.com/kevingrace/p/6265113.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/kevingrace/p/6265113.html</a></p><h4 id=\"iptables-和netfilter关系\"><a href=\"#iptables-和netfilter关系\" class=\"headerlink\" title=\"iptables 和netfilter关系\"></a>iptables 和netfilter关系</h4><p>netfilter 是linux内核中实现的包过滤的函数相关的东西<br>iptables 是一个管理防火墙的工具 真正实现防火墙的还是netfilter</p><h4 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h4><p>iptables (选项) (参数)</p><h4 id=\"选项\"><a href=\"#选项\" class=\"headerlink\" title=\"选项\"></a>选项</h4><p>man iptables</p><p>-t&lt;表&gt;：指定要操纵的表；<br>-A：向规则链中添加条目；<br>-D：从规则链中删除条目；<br>-I：向规则链中插入条目；<br>-R：替换规则链中的条目；<br>-L：显示规则链中已有的条目；<br>-F：清楚规则链中已有的条目；<br>-Z：清空规则链中的数据包计算器和字节计数器；<br>-X:删除规则链<br>-N：创建新的用户自定义规则链；<br>-P：定义规则链中的默认目标；<br>-h：显示帮助信息；<br>-p：指定要匹配的数据包协议类型；<br>-s：指定要匹配的数据包源ip地址；<br>-j&lt;目标&gt;：指定要跳转的目标；<br>-i&lt;网络接口&gt;：指定数据包进入本机的网络接口；<br>-o&lt;网络接口&gt;：指定数据包要离开本机所使用的网络接口。</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">iptables -t 表名 &lt;-A/I/D/R&gt; 规则链名 [规则号] &lt;-i/o 网卡名&gt; -p 协议名 &lt;-s 源IP/源子网&gt; --sport 源端口 &lt;-d 目标IP/目标子网&gt; --dport 目标端口 -j 动作</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/3905525-b576da7a2c520fbc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"iptables用法\"><br><img src=\"http://upload-images.jianshu.io/upload_images/3905525-7e8ee8a4829024de.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"iptables 参数\"></p>\n<p>####表名<br>提供特定的功能<br>|名称|功能|备注|<br>|:–|:–|:–|<br>|raw|数据跟踪处理|网址过滤|<br>|mangle|数据包修改，包重构|qds|<br>|nat|地址转换,网络地址转换|网关路由|<br>|filter|包过滤|防火墙规则|</p>\n<h4 id=\"链-名\"><a href=\"#链-名\" class=\"headerlink\" title=\"链 名\"></a>链 名</h4><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">名称</th>\n<th style=\"text-align:left\">功能</th>\n<th style=\"text-align:left\">备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">INPUT</td>\n<td style=\"text-align:left\">输入数据包</td>\n<td style=\"text-align:left\">对输入数据包的规则</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">OUTPUT</td>\n<td style=\"text-align:left\">输出数据包</td>\n<td style=\"text-align:left\">对输出数据包的规则</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">FORWARD</td>\n<td style=\"text-align:left\">转发数据包</td>\n<td style=\"text-align:left\">对转发数据的规则</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">PREROUTING</td>\n<td style=\"text-align:left\">目标地址转换数据包</td>\n<td style=\"text-align:left\">DANT</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">POSTOUTING</td>\n<td style=\"text-align:left\">源地址转换数据包</td>\n<td style=\"text-align:left\">SNAT</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"表-和-链的关系图\"><a href=\"#表-和-链的关系图\" class=\"headerlink\" title=\"表 和 链的关系图\"></a>表 和 链的关系图</h4><p><img src=\"http://upload-images.jianshu.io/upload_images/3905525-6ca6c7de7205562d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"四表五链\"><br><img src=\"http://upload-images.jianshu.io/upload_images/3905525-fc2f411c47c80d5a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"请求流转流程图\"><br><img src=\"http://upload-images.jianshu.io/upload_images/3905525-d28fca015fec26d2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"请求流转详情流程图\"></p>\n<p>####动作</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">名称</th>\n<th style=\"text-align:left\">功能</th>\n<th style=\"text-align:left\">备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">ACCEPT</td>\n<td style=\"text-align:left\">接受数据包</td>\n<td style=\"text-align:left\">常用  打开某个端口接受数据</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">DROP</td>\n<td style=\"text-align:left\">丢弃数据包</td>\n<td style=\"text-align:left\">常用  禁止某个端口访问</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">MATCH</td>\n<td style=\"text-align:left\">匹配</td>\n<td style=\"text-align:left\">符合某个ip 或者端口</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">REJECT</td>\n<td style=\"text-align:left\">丢弃数据包</td>\n<td style=\"text-align:left\">可以向发送这个包的源主机发送错误消息</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">TARGET</td>\n<td style=\"text-align:left\">指定动作</td>\n<td style=\"text-align:left\">说明如何处理这个数据包 接受 丢弃 拒绝</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">JUMP</td>\n<td style=\"text-align:left\">标识跳转到那个链上</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">RULE</td>\n<td style=\"text-align:left\">一个或者多个匹配及其对应目标</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">REDIRECT</td>\n<td style=\"text-align:left\">重定向、映射、透明代理</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">SNAT</td>\n<td style=\"text-align:left\">源地址转换</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">DNAT</td>\n<td style=\"text-align:left\">目标地址转换</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">MASQUERADE</td>\n<td style=\"text-align:left\">ip伪装</td>\n<td style=\"text-align:left\">nat 用于adsl</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">LOG</td>\n<td style=\"text-align:left\">日志记录</td>\n</tr>\n</tbody>\n</table>\n<p>####实例</p>\n<ul>\n<li><p>查看已有的iptables 规则</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//查看iptables 列表 带数字 </span><br><span class=\"line\">iptables -L -n -v </span><br><span class=\"line\">//查看iptables 以序号标记</span><br><span class=\"line\">iptables -L -n --line-numbers</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>清除已有的iptables 规则</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">iptables -F   --flush ：清楚规则链中已有的条目；</span><br><span class=\"line\">iptables -X    --delete-chain  删除 规则链</span><br><span class=\"line\">iptables -Z    --flush ：清空规则链中的数据包计算器和字节计数器；</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>*删除 INPUT中的序号为num的规则<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">iptables -D INPUT num</span><br></pre></td></tr></table></figure><p></p>\n<p>*开放指定端口 就是接受数据包<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 开启本地回环接口 运行本机访问本机</span><br><span class=\"line\">iptables -A INPUT -s 127.0.0.1 -j ACCEPT </span><br><span class=\"line\"># 允许已建立或相关连的通行</span><br><span class=\"line\">iptables -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT</span><br><span class=\"line\">#允许本机所有向外访问</span><br><span class=\"line\">iptables -A OUTPUT -j ACCEPT</span><br><span class=\"line\">#允许 访问某个端口</span><br><span class=\"line\">iptables -A INPUT -p tcp  --dport 22 -j ACCEPT  允许访问 22端口</span><br><span class=\"line\"># 禁止其他未允许的规则访问</span><br><span class=\"line\">iptables -A INPUT -j reject</span><br><span class=\"line\"># 禁止其他未允许的转发数据包访问</span><br><span class=\"line\">iptables -A FORWARD -j reject</span><br></pre></td></tr></table></figure><p></p>\n<ul>\n<li>屏蔽ip <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 屏蔽单个ip</span><br><span class=\"line\">iptables -I INPUT -s 123.1.1.1 -j DROP</span><br><span class=\"line\"># 屏蔽整个网段 123.0.0.0 - 123.255.255.254</span><br><span class=\"line\">iptables -I INPUT -s 123.0.0.0/8 -j DROP</span><br><span class=\"line\"># 屏蔽123.1.0.0 - 123.1.255.254网段</span><br><span class=\"line\">iptables -I INPUT -s 123.1.0.0/16 -j DROP</span><br><span class=\"line\"># 屏蔽 123.1.1.0 - 123.1.1.254网段</span><br><span class=\"line\">iptables -i INPUT -s 123.1.1.0/24 -j DROP</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><em>\n</em><br>*</p>"},{"title":"alias笔记","abbrlink":"d0a7cd2b","date":"2018-09-10T16:00:00.000Z","_content":"#### 前言\nlinux下面 有时候常用的命令太吉尔长了  命名别名是必须的\n\n#### 使用示例  \n有时候有些命令常用 例如 'ls -a'  'ps -aux' 这样的 如果每次输入全部 麻烦的很 通过设置别名 可以快速使用 \n##### 设定临时 alias  只能在当前shell可用 退出shell 失效\n```\nalias  asliasNname='命令'\n例如: alias psa = 'ps -aux'\n```\n##### 设定永久 alias  \n只需要吧 alias 加入 环境变量配置文件中即可 例如加入 全局环境变量/etc/profile 或者当前用户的环境变量配置中 例如～/.bashrc \n```\ntee -a /etc/profile\nalias psa='ps -aux'\n\n\n# ctrl +c  结束录入后 应用 环境变量\nsource /etc/profile\n```\n##### 查看别名 \n查看所有的别名\n```\nalias \n```\n查看指定的别名 \n```\nalias 别名 \n```\n##### 取消别名 \n```\nunalias 别名 \n```\n##### 强制执行命令本身   \n* 使用绝对路径执行命令 /xxx  \n* 切换到命令目录 ./xxx  \n* 使用反斜线 \\ xxx   \n#### 总结 \nlinux别名 可以将一些常用的 但是直接输入 比较长的命令封装起来  向文件追加内容 不一定用tee  echo >> 也是可以的 cat都行 不局限命令 能达成功能即可   \nalias 一定要使用 单引号''   \n","source":"_posts/linux/linux-alias--别名使用.md","raw":"---\ntitle: alias笔记\ncategories: 笔记\ntags:\n  - linux\nabbrlink: d0a7cd2b\ndate: 2018-09-11 00:00:00\n---\n#### 前言\nlinux下面 有时候常用的命令太吉尔长了  命名别名是必须的\n\n#### 使用示例  \n有时候有些命令常用 例如 'ls -a'  'ps -aux' 这样的 如果每次输入全部 麻烦的很 通过设置别名 可以快速使用 \n##### 设定临时 alias  只能在当前shell可用 退出shell 失效\n```\nalias  asliasNname='命令'\n例如: alias psa = 'ps -aux'\n```\n##### 设定永久 alias  \n只需要吧 alias 加入 环境变量配置文件中即可 例如加入 全局环境变量/etc/profile 或者当前用户的环境变量配置中 例如～/.bashrc \n```\ntee -a /etc/profile\nalias psa='ps -aux'\n\n\n# ctrl +c  结束录入后 应用 环境变量\nsource /etc/profile\n```\n##### 查看别名 \n查看所有的别名\n```\nalias \n```\n查看指定的别名 \n```\nalias 别名 \n```\n##### 取消别名 \n```\nunalias 别名 \n```\n##### 强制执行命令本身   \n* 使用绝对路径执行命令 /xxx  \n* 切换到命令目录 ./xxx  \n* 使用反斜线 \\ xxx   \n#### 总结 \nlinux别名 可以将一些常用的 但是直接输入 比较长的命令封装起来  向文件追加内容 不一定用tee  echo >> 也是可以的 cat都行 不局限命令 能达成功能即可   \nalias 一定要使用 单引号''   \n","slug":"linux/linux-alias--别名使用","published":1,"updated":"2018-09-12T06:29:48.014Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjo9uatxu0020mwczghhvy7x3","content":"<h4 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h4><p>linux下面 有时候常用的命令太吉尔长了 命名别名是必须的</p><h4 id=\"使用示例\"><a href=\"#使用示例\" class=\"headerlink\" title=\"使用示例\"></a>使用示例</h4><p>有时候有些命令常用 例如 ‘ls -a’ ‘ps -aux’ 这样的 如果每次输入全部 麻烦的很 通过设置别名 可以快速使用</p><h5 id=\"设定临时-alias-只能在当前shell可用-退出shell-失效\"><a href=\"#设定临时-alias-只能在当前shell可用-退出shell-失效\" class=\"headerlink\" title=\"设定临时 alias  只能在当前shell可用 退出shell 失效\"></a>设定临时 alias 只能在当前shell可用 退出shell 失效</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alias  asliasNname=&apos;命令&apos;</span><br><span class=\"line\">例如: alias psa = &apos;ps -aux&apos;</span><br></pre></td></tr></table></figure>\n<h5 id=\"设定永久-alias\"><a href=\"#设定永久-alias\" class=\"headerlink\" title=\"设定永久 alias\"></a>设定永久 alias</h5><p>只需要吧 alias 加入 环境变量配置文件中即可 例如加入 全局环境变量/etc/profile 或者当前用户的环境变量配置中 例如～/.bashrc<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tee -a /etc/profile</span><br><span class=\"line\">alias psa=&apos;ps -aux&apos;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># ctrl +c  结束录入后 应用 环境变量</span><br><span class=\"line\">source /etc/profile</span><br></pre></td></tr></table></figure><p></p>\n<h5 id=\"查看别名\"><a href=\"#查看别名\" class=\"headerlink\" title=\"查看别名\"></a>查看别名</h5><p>查看所有的别名<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alias</span><br></pre></td></tr></table></figure><p></p>\n<p>查看指定的别名<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alias 别名</span><br></pre></td></tr></table></figure><p></p>\n<h5 id=\"取消别名\"><a href=\"#取消别名\" class=\"headerlink\" title=\"取消别名\"></a>取消别名</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">unalias 别名</span><br></pre></td></tr></table></figure>\n<h5 id=\"强制执行命令本身\"><a href=\"#强制执行命令本身\" class=\"headerlink\" title=\"强制执行命令本身\"></a>强制执行命令本身</h5><ul>\n<li>使用绝对路径执行命令 /xxx  </li>\n<li>切换到命令目录 ./xxx  </li>\n<li>使用反斜线 \\ xxx   <h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4>linux别名 可以将一些常用的 但是直接输入 比较长的命令封装起来  向文件追加内容 不一定用tee  echo &gt;&gt; 也是可以的 cat都行 不局限命令 能达成功能即可<br>alias 一定要使用 单引号’’</li></ul>","site":{"data":{}},"excerpt":"","more":"<h4 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h4><p>linux下面 有时候常用的命令太吉尔长了 命名别名是必须的</p><h4 id=\"使用示例\"><a href=\"#使用示例\" class=\"headerlink\" title=\"使用示例\"></a>使用示例</h4><p>有时候有些命令常用 例如 ‘ls -a’ ‘ps -aux’ 这样的 如果每次输入全部 麻烦的很 通过设置别名 可以快速使用</p><h5 id=\"设定临时-alias-只能在当前shell可用-退出shell-失效\"><a href=\"#设定临时-alias-只能在当前shell可用-退出shell-失效\" class=\"headerlink\" title=\"设定临时 alias  只能在当前shell可用 退出shell 失效\"></a>设定临时 alias 只能在当前shell可用 退出shell 失效</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alias  asliasNname=&apos;命令&apos;</span><br><span class=\"line\">例如: alias psa = &apos;ps -aux&apos;</span><br></pre></td></tr></table></figure>\n<h5 id=\"设定永久-alias\"><a href=\"#设定永久-alias\" class=\"headerlink\" title=\"设定永久 alias\"></a>设定永久 alias</h5><p>只需要吧 alias 加入 环境变量配置文件中即可 例如加入 全局环境变量/etc/profile 或者当前用户的环境变量配置中 例如～/.bashrc<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tee -a /etc/profile</span><br><span class=\"line\">alias psa=&apos;ps -aux&apos;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># ctrl +c  结束录入后 应用 环境变量</span><br><span class=\"line\">source /etc/profile</span><br></pre></td></tr></table></figure><p></p>\n<h5 id=\"查看别名\"><a href=\"#查看别名\" class=\"headerlink\" title=\"查看别名\"></a>查看别名</h5><p>查看所有的别名<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alias</span><br></pre></td></tr></table></figure><p></p>\n<p>查看指定的别名<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alias 别名</span><br></pre></td></tr></table></figure><p></p>\n<h5 id=\"取消别名\"><a href=\"#取消别名\" class=\"headerlink\" title=\"取消别名\"></a>取消别名</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">unalias 别名</span><br></pre></td></tr></table></figure>\n<h5 id=\"强制执行命令本身\"><a href=\"#强制执行命令本身\" class=\"headerlink\" title=\"强制执行命令本身\"></a>强制执行命令本身</h5><ul>\n<li>使用绝对路径执行命令 /xxx  </li>\n<li>切换到命令目录 ./xxx  </li>\n<li>使用反斜线 \\ xxx   <h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4>linux别名 可以将一些常用的 但是直接输入 比较长的命令封装起来  向文件追加内容 不一定用tee  echo &gt;&gt; 也是可以的 cat都行 不局限命令 能达成功能即可<br>alias 一定要使用 单引号’’</li></ul>"},{"title":"linux-history笔记","comments":1,"abbrlink":"d7a6c3c1","date":"2018-09-12T06:30:20.000Z","_content":"#### 前言 \n查看 命令执行记录  重新执行历史命令 应该也是常规操作 \n之前都是 cat .bash_history 去看 根本没注意其他信息 现在统一记录一下笔记\n\n#### 历史记录的相关环境变量\n\n|变量名称|变量作用|备注|\n|:------|:-----|:---|\n|HISTTIMEFORMAT|显示历史命令执行时间|export HISTTIMEFORMAT='%F %T '  配置后才开始记录时间 之前的命令不记录时间|\n|HISTSIZE|内存中保存的历史记录个数|export HISTSIZE=100|\n|HISTFILESIZE|文件中保存的历史记录个数|export HISTFILESIZE=100|\n|HISTFILE|设置本地存储历史记录的文件名|export HISTFILE=~/xxxx|\n|HISTCONTROL|设置记录命令的重复条目或者忽略的配置 |export HISTCONTROL=erasedups (erasedups:清除整个命令中历史记录的重复条目,ignoredups:忽略记录命令历史中连续重复的命令,ignorespace:忽略记录空格开头的命令,ignoreboth:等同于ignoredups+ignorespace)|\n\n#### 操作历史执行命令\n##### 查看\n* history命令\n```\nhistory \n```\n* 查看历史执行命令的文件\n```\ncat ~/.bash_history\n```\n##### 删除\n```\n#清理内存中的\nhistory -c\n#使用内存中的历史记录填充 .bash_history文件的历史记录 或者直接清理这个.bash_history文件 \nhistory -w \n```\n#### 执行历史记录中的命令\n* 上下方向键  \n上下方向选择历史命令 回车执行  \n* !!  \n直接执行上一次的命令 回车执行   \n* !-1  \n直接执行上一次的命令 回车执行  \n* ctrl+p   \n直接执行上一次命令 回车执行 \n* !id  \n按照history显示的id 执行那一条历史命令    \n* ctrl+r  \n搜索命令 回车执行 左右方向命令微调     \n \n#### 总结 \n通过配置和历史命令相关的环境变量可以控制历史命令的生成和记录 在个人电脑上 意义不是很大   \n但是在服务器特别是生产机器上 不记录敏感操作的命令 是非常有必要的     \n一般是配置HISTCONTROL=ignorespace 然后输入敏感命令的之前 加个空格   来执行不需要记录的历史命令","source":"_posts/linux/linux-history笔记.md","raw":"---\ntitle: linux-history笔记\ncomments: true\ncategories: 笔记\ntags:\n  - linux\nabbrlink: d7a6c3c1\ndate: 2018-09-12 14:30:20\n---\n#### 前言 \n查看 命令执行记录  重新执行历史命令 应该也是常规操作 \n之前都是 cat .bash_history 去看 根本没注意其他信息 现在统一记录一下笔记\n\n#### 历史记录的相关环境变量\n\n|变量名称|变量作用|备注|\n|:------|:-----|:---|\n|HISTTIMEFORMAT|显示历史命令执行时间|export HISTTIMEFORMAT='%F %T '  配置后才开始记录时间 之前的命令不记录时间|\n|HISTSIZE|内存中保存的历史记录个数|export HISTSIZE=100|\n|HISTFILESIZE|文件中保存的历史记录个数|export HISTFILESIZE=100|\n|HISTFILE|设置本地存储历史记录的文件名|export HISTFILE=~/xxxx|\n|HISTCONTROL|设置记录命令的重复条目或者忽略的配置 |export HISTCONTROL=erasedups (erasedups:清除整个命令中历史记录的重复条目,ignoredups:忽略记录命令历史中连续重复的命令,ignorespace:忽略记录空格开头的命令,ignoreboth:等同于ignoredups+ignorespace)|\n\n#### 操作历史执行命令\n##### 查看\n* history命令\n```\nhistory \n```\n* 查看历史执行命令的文件\n```\ncat ~/.bash_history\n```\n##### 删除\n```\n#清理内存中的\nhistory -c\n#使用内存中的历史记录填充 .bash_history文件的历史记录 或者直接清理这个.bash_history文件 \nhistory -w \n```\n#### 执行历史记录中的命令\n* 上下方向键  \n上下方向选择历史命令 回车执行  \n* !!  \n直接执行上一次的命令 回车执行   \n* !-1  \n直接执行上一次的命令 回车执行  \n* ctrl+p   \n直接执行上一次命令 回车执行 \n* !id  \n按照history显示的id 执行那一条历史命令    \n* ctrl+r  \n搜索命令 回车执行 左右方向命令微调     \n \n#### 总结 \n通过配置和历史命令相关的环境变量可以控制历史命令的生成和记录 在个人电脑上 意义不是很大   \n但是在服务器特别是生产机器上 不记录敏感操作的命令 是非常有必要的     \n一般是配置HISTCONTROL=ignorespace 然后输入敏感命令的之前 加个空格   来执行不需要记录的历史命令","slug":"linux/linux-history笔记","published":1,"updated":"2018-09-12T07:21:17.787Z","layout":"post","photos":[],"link":"","_id":"cjo9uatxv0022mwczv4029mgm","content":"<h4 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h4><p>查看 命令执行记录 重新执行历史命令 应该也是常规操作<br>之前都是 cat .bash_history 去看 根本没注意其他信息 现在统一记录一下笔记</p><h4 id=\"历史记录的相关环境变量\"><a href=\"#历史记录的相关环境变量\" class=\"headerlink\" title=\"历史记录的相关环境变量\"></a>历史记录的相关环境变量</h4><table><thead><tr><th style=\"text-align:left\">变量名称</th><th style=\"text-align:left\">变量作用</th><th style=\"text-align:left\">备注</th></tr></thead><tbody><tr><td style=\"text-align:left\">HISTTIMEFORMAT</td><td style=\"text-align:left\">显示历史命令执行时间</td><td style=\"text-align:left\">export HISTTIMEFORMAT=’%F %T ‘ 配置后才开始记录时间 之前的命令不记录时间</td></tr><tr><td style=\"text-align:left\">HISTSIZE</td><td style=\"text-align:left\">内存中保存的历史记录个数</td><td style=\"text-align:left\">export HISTSIZE=100</td></tr><tr><td style=\"text-align:left\">HISTFILESIZE</td><td style=\"text-align:left\">文件中保存的历史记录个数</td><td style=\"text-align:left\">export HISTFILESIZE=100</td></tr><tr><td style=\"text-align:left\">HISTFILE</td><td style=\"text-align:left\">设置本地存储历史记录的文件名</td><td style=\"text-align:left\">export HISTFILE=~/xxxx</td></tr><tr><td style=\"text-align:left\">HISTCONTROL</td><td style=\"text-align:left\">设置记录命令的重复条目或者忽略的配置</td><td style=\"text-align:left\">export HISTCONTROL=erasedups (erasedups:清除整个命令中历史记录的重复条目,ignoredups:忽略记录命令历史中连续重复的命令,ignorespace:忽略记录空格开头的命令,ignoreboth:等同于ignoredups+ignorespace)</td></tr></tbody></table><h4 id=\"操作历史执行命令\"><a href=\"#操作历史执行命令\" class=\"headerlink\" title=\"操作历史执行命令\"></a>操作历史执行命令</h4><h5 id=\"查看\"><a href=\"#查看\" class=\"headerlink\" title=\"查看\"></a>查看</h5><ul><li><p>history命令</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">history</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看历史执行命令的文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat ~/.bash_history</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h5 id=\"删除\"><a href=\"#删除\" class=\"headerlink\" title=\"删除\"></a>删除</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#清理内存中的</span><br><span class=\"line\">history -c</span><br><span class=\"line\">#使用内存中的历史记录填充 .bash_history文件的历史记录 或者直接清理这个.bash_history文件 </span><br><span class=\"line\">history -w</span><br></pre></td></tr></table></figure>\n<h4 id=\"执行历史记录中的命令\"><a href=\"#执行历史记录中的命令\" class=\"headerlink\" title=\"执行历史记录中的命令\"></a>执行历史记录中的命令</h4><ul>\n<li>上下方向键<br>上下方向选择历史命令 回车执行  </li>\n<li>!!<br>直接执行上一次的命令 回车执行   </li>\n<li>!-1<br>直接执行上一次的命令 回车执行  </li>\n<li>ctrl+p<br>直接执行上一次命令 回车执行 </li>\n<li>!id<br>按照history显示的id 执行那一条历史命令    </li>\n<li>ctrl+r<br>搜索命令 回车执行 左右方向命令微调     </li>\n</ul>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><p>通过配置和历史命令相关的环境变量可以控制历史命令的生成和记录 在个人电脑上 意义不是很大<br>但是在服务器特别是生产机器上 不记录敏感操作的命令 是非常有必要的<br>一般是配置HISTCONTROL=ignorespace 然后输入敏感命令的之前 加个空格   来执行不需要记录的历史命令</p>","site":{"data":{}},"excerpt":"","more":"<h4 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h4><p>查看 命令执行记录 重新执行历史命令 应该也是常规操作<br>之前都是 cat .bash_history 去看 根本没注意其他信息 现在统一记录一下笔记</p><h4 id=\"历史记录的相关环境变量\"><a href=\"#历史记录的相关环境变量\" class=\"headerlink\" title=\"历史记录的相关环境变量\"></a>历史记录的相关环境变量</h4><table><thead><tr><th style=\"text-align:left\">变量名称</th><th style=\"text-align:left\">变量作用</th><th style=\"text-align:left\">备注</th></tr></thead><tbody><tr><td style=\"text-align:left\">HISTTIMEFORMAT</td><td style=\"text-align:left\">显示历史命令执行时间</td><td style=\"text-align:left\">export HISTTIMEFORMAT=’%F %T ‘ 配置后才开始记录时间 之前的命令不记录时间</td></tr><tr><td style=\"text-align:left\">HISTSIZE</td><td style=\"text-align:left\">内存中保存的历史记录个数</td><td style=\"text-align:left\">export HISTSIZE=100</td></tr><tr><td style=\"text-align:left\">HISTFILESIZE</td><td style=\"text-align:left\">文件中保存的历史记录个数</td><td style=\"text-align:left\">export HISTFILESIZE=100</td></tr><tr><td style=\"text-align:left\">HISTFILE</td><td style=\"text-align:left\">设置本地存储历史记录的文件名</td><td style=\"text-align:left\">export HISTFILE=~/xxxx</td></tr><tr><td style=\"text-align:left\">HISTCONTROL</td><td style=\"text-align:left\">设置记录命令的重复条目或者忽略的配置</td><td style=\"text-align:left\">export HISTCONTROL=erasedups (erasedups:清除整个命令中历史记录的重复条目,ignoredups:忽略记录命令历史中连续重复的命令,ignorespace:忽略记录空格开头的命令,ignoreboth:等同于ignoredups+ignorespace)</td></tr></tbody></table><h4 id=\"操作历史执行命令\"><a href=\"#操作历史执行命令\" class=\"headerlink\" title=\"操作历史执行命令\"></a>操作历史执行命令</h4><h5 id=\"查看\"><a href=\"#查看\" class=\"headerlink\" title=\"查看\"></a>查看</h5><ul><li><p>history命令</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">history</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看历史执行命令的文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat ~/.bash_history</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h5 id=\"删除\"><a href=\"#删除\" class=\"headerlink\" title=\"删除\"></a>删除</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#清理内存中的</span><br><span class=\"line\">history -c</span><br><span class=\"line\">#使用内存中的历史记录填充 .bash_history文件的历史记录 或者直接清理这个.bash_history文件 </span><br><span class=\"line\">history -w</span><br></pre></td></tr></table></figure>\n<h4 id=\"执行历史记录中的命令\"><a href=\"#执行历史记录中的命令\" class=\"headerlink\" title=\"执行历史记录中的命令\"></a>执行历史记录中的命令</h4><ul>\n<li>上下方向键<br>上下方向选择历史命令 回车执行  </li>\n<li>!!<br>直接执行上一次的命令 回车执行   </li>\n<li>!-1<br>直接执行上一次的命令 回车执行  </li>\n<li>ctrl+p<br>直接执行上一次命令 回车执行 </li>\n<li>!id<br>按照history显示的id 执行那一条历史命令    </li>\n<li>ctrl+r<br>搜索命令 回车执行 左右方向命令微调     </li>\n</ul>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><p>通过配置和历史命令相关的环境变量可以控制历史命令的生成和记录 在个人电脑上 意义不是很大<br>但是在服务器特别是生产机器上 不记录敏感操作的命令 是非常有必要的<br>一般是配置HISTCONTROL=ignorespace 然后输入敏感命令的之前 加个空格   来执行不需要记录的历史命令</p>"},{"title":"linux-ln连接笔记","comments":1,"abbrlink":"35715976","date":"2018-09-13T05:35:03.000Z","_content":"#### 前言 \n在linux中 任何软件、文件、文件夹 都可以看做是一块数据块   \n每个数据块都拥有自己的inode节点 可以是多个  当一块数据没有inode引用了 那么这个数据块就可以擦除了  \n那么在linux中 想要在任意地方去访问这个数据块 通过ln 命令建立软连接或者硬链接    \n* 软连接   \n建一个类似windows中的快捷方式的一个连接到数据块的inode上    \n调用路径是 软连接->inode>数据块   \n* 硬链接   \n直接建立一个对这个数据块的新inode 这个数据块的引用计数+1   \n调用路径 新inode>数据块    \n#### 实例\n##### 软连接\n建立软连接\n```\nls -s 源文件 软连接文件名\n```\n如果软连接的源文件 被删除了 那么这个软连接会变成红色   \n##### 硬链接 \n硬链接的inode数是一样的指向的是同一个数据块  \n建立硬链接\n```\nln 源文件  硬链接名称  \n```\n注意:\n* 硬链接不允许跨分区、跨文件系统建立 \n* 不允许对目录建立硬链接  必要的话需要通过root用户 ln -d  强行建立硬链接 \n#### ln -n选项 \n-n  --no-dereference 当做没有引用  配合 -f 强制更新软连接地址  \n文件a b \nc软连接指向a  这个时候要把c软连接指向到b  必须使用  ls -snf b c \n####  总结\n通过ln 对其他文件、目录建立方便使用的连接  大部分时候使用软连接就够了  \n","source":"_posts/linux/linux-ln连接笔记.md","raw":"---\ntitle: linux-ln连接笔记\ncomments: true\ncategories: 笔记\ntags:\n  - linux\nabbrlink: '35715976'\ndate: 2018-09-13 13:35:03\n---\n#### 前言 \n在linux中 任何软件、文件、文件夹 都可以看做是一块数据块   \n每个数据块都拥有自己的inode节点 可以是多个  当一块数据没有inode引用了 那么这个数据块就可以擦除了  \n那么在linux中 想要在任意地方去访问这个数据块 通过ln 命令建立软连接或者硬链接    \n* 软连接   \n建一个类似windows中的快捷方式的一个连接到数据块的inode上    \n调用路径是 软连接->inode>数据块   \n* 硬链接   \n直接建立一个对这个数据块的新inode 这个数据块的引用计数+1   \n调用路径 新inode>数据块    \n#### 实例\n##### 软连接\n建立软连接\n```\nls -s 源文件 软连接文件名\n```\n如果软连接的源文件 被删除了 那么这个软连接会变成红色   \n##### 硬链接 \n硬链接的inode数是一样的指向的是同一个数据块  \n建立硬链接\n```\nln 源文件  硬链接名称  \n```\n注意:\n* 硬链接不允许跨分区、跨文件系统建立 \n* 不允许对目录建立硬链接  必要的话需要通过root用户 ln -d  强行建立硬链接 \n#### ln -n选项 \n-n  --no-dereference 当做没有引用  配合 -f 强制更新软连接地址  \n文件a b \nc软连接指向a  这个时候要把c软连接指向到b  必须使用  ls -snf b c \n####  总结\n通过ln 对其他文件、目录建立方便使用的连接  大部分时候使用软连接就够了  \n","slug":"linux/linux-ln连接笔记","published":1,"updated":"2018-09-29T02:29:13.000Z","layout":"post","photos":[],"link":"","_id":"cjo9uatxw0027mwcz5qce06n6","content":"<h4 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h4><p>在linux中 任何软件、文件、文件夹 都可以看做是一块数据块<br>每个数据块都拥有自己的inode节点 可以是多个 当一块数据没有inode引用了 那么这个数据块就可以擦除了<br>那么在linux中 想要在任意地方去访问这个数据块 通过ln 命令建立软连接或者硬链接</p><ul><li>软连接<br>建一个类似windows中的快捷方式的一个连接到数据块的inode上<br>调用路径是 软连接-&gt;inode&gt;数据块</li><li>硬链接<br>直接建立一个对这个数据块的新inode 这个数据块的引用计数+1<br>调用路径 新inode&gt;数据块<h4 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h4><h5 id=\"软连接\"><a href=\"#软连接\" class=\"headerlink\" title=\"软连接\"></a>软连接</h5>建立软连接<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ls -s 源文件 软连接文件名</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>如果软连接的源文件 被删除了 那么这个软连接会变成红色   </p>\n<h5 id=\"硬链接\"><a href=\"#硬链接\" class=\"headerlink\" title=\"硬链接\"></a>硬链接</h5><p>硬链接的inode数是一样的指向的是同一个数据块<br>建立硬链接<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ln 源文件  硬链接名称</span><br></pre></td></tr></table></figure><p></p>\n<p>注意:</p>\n<ul>\n<li>硬链接不允许跨分区、跨文件系统建立 </li>\n<li>不允许对目录建立硬链接  必要的话需要通过root用户 ln -d  强行建立硬链接 <h4 id=\"ln-n选项\"><a href=\"#ln-n选项\" class=\"headerlink\" title=\"ln -n选项\"></a>ln -n选项</h4>-n  –no-dereference 当做没有引用  配合 -f 强制更新软连接地址<br>文件a b<br>c软连接指向a  这个时候要把c软连接指向到b  必须使用  ls -snf b c <h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4>通过ln 对其他文件、目录建立方便使用的连接  大部分时候使用软连接就够了</li></ul>","site":{"data":{}},"excerpt":"","more":"<h4 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h4><p>在linux中 任何软件、文件、文件夹 都可以看做是一块数据块<br>每个数据块都拥有自己的inode节点 可以是多个 当一块数据没有inode引用了 那么这个数据块就可以擦除了<br>那么在linux中 想要在任意地方去访问这个数据块 通过ln 命令建立软连接或者硬链接</p><ul><li>软连接<br>建一个类似windows中的快捷方式的一个连接到数据块的inode上<br>调用路径是 软连接-&gt;inode&gt;数据块</li><li>硬链接<br>直接建立一个对这个数据块的新inode 这个数据块的引用计数+1<br>调用路径 新inode&gt;数据块<h4 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h4><h5 id=\"软连接\"><a href=\"#软连接\" class=\"headerlink\" title=\"软连接\"></a>软连接</h5>建立软连接<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ls -s 源文件 软连接文件名</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>如果软连接的源文件 被删除了 那么这个软连接会变成红色   </p>\n<h5 id=\"硬链接\"><a href=\"#硬链接\" class=\"headerlink\" title=\"硬链接\"></a>硬链接</h5><p>硬链接的inode数是一样的指向的是同一个数据块<br>建立硬链接<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ln 源文件  硬链接名称</span><br></pre></td></tr></table></figure><p></p>\n<p>注意:</p>\n<ul>\n<li>硬链接不允许跨分区、跨文件系统建立 </li>\n<li>不允许对目录建立硬链接  必要的话需要通过root用户 ln -d  强行建立硬链接 <h4 id=\"ln-n选项\"><a href=\"#ln-n选项\" class=\"headerlink\" title=\"ln -n选项\"></a>ln -n选项</h4>-n  –no-dereference 当做没有引用  配合 -f 强制更新软连接地址<br>文件a b<br>c软连接指向a  这个时候要把c软连接指向到b  必须使用  ls -snf b c <h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4>通过ln 对其他文件、目录建立方便使用的连接  大部分时候使用软连接就够了</li></ul>"},{"title":"linux-read笔记","comments":1,"abbrlink":"9e17b242","date":"2018-09-12T08:46:08.000Z","_content":"#### 前言\nread 接收输入的数据 写脚本经常用的命令 \n之前都是瞎鸡儿用 从来没考虑仔细看看 文档  这次有时间 看看 记录下这篇笔记\n#### 实例\n##### 读取键盘输入 \n```\necho  '\n#!/bin/bash\necho \"请输入名字:\"\nread name\necho \"你的名字:$name\"\nexit 0 \n' > testRead.sh \nchmod +x ./testRead.sh \n./testRead.sh \n```\n1:带提示的read\n```\necho '\n#!/bin/bash\nread -p \"请输入名字:\" name \necho \"你的名字:$name\"\nexit 0\n' > testRead.sh \nchmod +x ./testRead.sh\n./testRead.sh\n```\n2:多个参数的read\n经过空格分割参数数量等于指定的变量数量\n```\necho '\n#!/bin/bash\nread -p \"请输入多个名字 空格分割:\" name1 name2\necho \"姓名1:$name1\"\necho \"姓名2:$name2\"\n' > testRead.sh\nchmod +x ./testRead.sh\n./testRead.sh\n```\n经过空格分割的参数小于指定的变量数量   \n当经过空格分割的参数小于指定的变量数量的时候 多余的变量为空  \n提示输入的时候 输入 'ming'   \n```\necho '\n#!/bin/bash\nread -p \"请输入多个名字:\" name1 name2\necho \"姓名1:$name1\"\necho \"姓名2:$name2\"\n' > testRead.sh\nchmod +x ./testRead.sh\n./testRead.sh\n```\n经过空格分割的参数大于指定变量的数量   \n当经过空格分割的参数大于指定变量的数量  超出部分的数据会赋值给最后一个变量   \n提示输入的时候 输入 'ming jiu xu'    \n```\necho '\n#!/bin/bash\nread -p \"请输入多个名字:\" name1  name2\necho \"姓名1:$name1\"\necho \"姓名2:$name2\"\n' > testRead.sh\nchmod +x ./testRead.sh\n./testRead.sh\n```\n3:使用内置的环境变量调用输入的数据   \n使用REPLY环境变量获取此次输入的数据  \n```\necho '\n#!/bin/bash\nread -p \"请输入多个名字:\" \necho \"姓名1:$REPLY\"\n' > testRead.sh\nchmod +x ./testRead.sh\n./testRead.sh\n```\n4:限制时间的read   \n使用 read 的-t参数来设定read等待时间    \n执行不进行操作等待5s后超时  \n```\necho '\n#!/bin/bash \nif read -t 5 -p \"请输入名字5s超时:\" name\nthen \n  echo \"姓名:$name\"\nelse\n  echo \"time out !!!!\"  \nfi \nexit 0   \n' > testRead.sh \nchmod +x ./testRead.sh\n./testRead.sh\n```\n5:输入敏感字符不显示在终端\n使用-s参数 不在终端显示输入的数据 \n```\necho '\n#!/bin/bash\nread -s -p \"请输入密码:\" pwd\necho \"$pwd\"\nexit 0 \n' > testRead.sh\nchmod +x ./testRead.sh\n./testRead.sh\n```\n##### 读取文件\n准备文件  \n```\necho 'nihao1\nnihao2\nnihao3' > test.txt\n```\n* 使用-u选项读取文件 \n```\necho '\n#!/bin/bash \nexec 3< test.txt \ncount = 0 \nwhile read -u 3 var \ndo \n  let count=$count+1 \n  echo \"test.txt第$count行:$var\"\ndone \necho \"结束\"\nexec 3<&-   \n' > readFile.sh\nchmod +x ./readFile.sh\n./readFile.sh \n```\n* 使用管道read 文件  \n需要注意 管道是新开启一个进程执行  那么 只有在管道的进程中 count =行数  \n```\necho '\n#!/bin/bash\ncount=0\ncat test.txt | while read var \ndo \n  let count=$count+1\n  echo \"第$count行:$var\"\ndone \necho \"结束\"  \nexit 0 \n' > readFile.sh \nchmod +x ./readFile.sh\n./readFile.sh \n```\n* 使用重定向\n```\necho '\n#!/bin/bash\ncount=0\nwhile read var \ndo \n  let count=$count+1\n  echo \"第$count行:$var\"\ndone  < test.txt \necho \"结束\"\nexit 0 \n' > readFile.sh\nchmod +x ./readFile.sh \n./readFile.sh \n```\n#### 注意   \n\\在linux常规操作中没有做任何特殊处理的话 它是表示续行符 read也是一样的 默认处理\\续行符 如果需要read 把所有的特殊符号都不进行处理 加上 -r选项  \n#### 总结  \n通过read 读取键盘输入或者文件 中的信息 是经常的操作     \n读取键盘的输入主要就考虑 是不是要有提示(-p) 是不是要设置超时时间(-t) 终端打不打印明文(-s)   \n读取文本的时候 主要考虑 是直接使用read读取 还是使用重定向还是管道去处理 当使用管道读取的时候 一定要注意 管道是新建一个进程去执行 变量不共享   \n不官是键盘还是读文本 如果不需要处理特殊字符 加上-r参数  ","source":"_posts/linux/linux-read笔记.md","raw":"---\ntitle: linux-read笔记\ncomments: true\ncategories: 笔记\ntags:\n  - linux\nabbrlink: 9e17b242\ndate: 2018-09-12 16:46:08\n---\n#### 前言\nread 接收输入的数据 写脚本经常用的命令 \n之前都是瞎鸡儿用 从来没考虑仔细看看 文档  这次有时间 看看 记录下这篇笔记\n#### 实例\n##### 读取键盘输入 \n```\necho  '\n#!/bin/bash\necho \"请输入名字:\"\nread name\necho \"你的名字:$name\"\nexit 0 \n' > testRead.sh \nchmod +x ./testRead.sh \n./testRead.sh \n```\n1:带提示的read\n```\necho '\n#!/bin/bash\nread -p \"请输入名字:\" name \necho \"你的名字:$name\"\nexit 0\n' > testRead.sh \nchmod +x ./testRead.sh\n./testRead.sh\n```\n2:多个参数的read\n经过空格分割参数数量等于指定的变量数量\n```\necho '\n#!/bin/bash\nread -p \"请输入多个名字 空格分割:\" name1 name2\necho \"姓名1:$name1\"\necho \"姓名2:$name2\"\n' > testRead.sh\nchmod +x ./testRead.sh\n./testRead.sh\n```\n经过空格分割的参数小于指定的变量数量   \n当经过空格分割的参数小于指定的变量数量的时候 多余的变量为空  \n提示输入的时候 输入 'ming'   \n```\necho '\n#!/bin/bash\nread -p \"请输入多个名字:\" name1 name2\necho \"姓名1:$name1\"\necho \"姓名2:$name2\"\n' > testRead.sh\nchmod +x ./testRead.sh\n./testRead.sh\n```\n经过空格分割的参数大于指定变量的数量   \n当经过空格分割的参数大于指定变量的数量  超出部分的数据会赋值给最后一个变量   \n提示输入的时候 输入 'ming jiu xu'    \n```\necho '\n#!/bin/bash\nread -p \"请输入多个名字:\" name1  name2\necho \"姓名1:$name1\"\necho \"姓名2:$name2\"\n' > testRead.sh\nchmod +x ./testRead.sh\n./testRead.sh\n```\n3:使用内置的环境变量调用输入的数据   \n使用REPLY环境变量获取此次输入的数据  \n```\necho '\n#!/bin/bash\nread -p \"请输入多个名字:\" \necho \"姓名1:$REPLY\"\n' > testRead.sh\nchmod +x ./testRead.sh\n./testRead.sh\n```\n4:限制时间的read   \n使用 read 的-t参数来设定read等待时间    \n执行不进行操作等待5s后超时  \n```\necho '\n#!/bin/bash \nif read -t 5 -p \"请输入名字5s超时:\" name\nthen \n  echo \"姓名:$name\"\nelse\n  echo \"time out !!!!\"  \nfi \nexit 0   \n' > testRead.sh \nchmod +x ./testRead.sh\n./testRead.sh\n```\n5:输入敏感字符不显示在终端\n使用-s参数 不在终端显示输入的数据 \n```\necho '\n#!/bin/bash\nread -s -p \"请输入密码:\" pwd\necho \"$pwd\"\nexit 0 \n' > testRead.sh\nchmod +x ./testRead.sh\n./testRead.sh\n```\n##### 读取文件\n准备文件  \n```\necho 'nihao1\nnihao2\nnihao3' > test.txt\n```\n* 使用-u选项读取文件 \n```\necho '\n#!/bin/bash \nexec 3< test.txt \ncount = 0 \nwhile read -u 3 var \ndo \n  let count=$count+1 \n  echo \"test.txt第$count行:$var\"\ndone \necho \"结束\"\nexec 3<&-   \n' > readFile.sh\nchmod +x ./readFile.sh\n./readFile.sh \n```\n* 使用管道read 文件  \n需要注意 管道是新开启一个进程执行  那么 只有在管道的进程中 count =行数  \n```\necho '\n#!/bin/bash\ncount=0\ncat test.txt | while read var \ndo \n  let count=$count+1\n  echo \"第$count行:$var\"\ndone \necho \"结束\"  \nexit 0 \n' > readFile.sh \nchmod +x ./readFile.sh\n./readFile.sh \n```\n* 使用重定向\n```\necho '\n#!/bin/bash\ncount=0\nwhile read var \ndo \n  let count=$count+1\n  echo \"第$count行:$var\"\ndone  < test.txt \necho \"结束\"\nexit 0 \n' > readFile.sh\nchmod +x ./readFile.sh \n./readFile.sh \n```\n#### 注意   \n\\在linux常规操作中没有做任何特殊处理的话 它是表示续行符 read也是一样的 默认处理\\续行符 如果需要read 把所有的特殊符号都不进行处理 加上 -r选项  \n#### 总结  \n通过read 读取键盘输入或者文件 中的信息 是经常的操作     \n读取键盘的输入主要就考虑 是不是要有提示(-p) 是不是要设置超时时间(-t) 终端打不打印明文(-s)   \n读取文本的时候 主要考虑 是直接使用read读取 还是使用重定向还是管道去处理 当使用管道读取的时候 一定要注意 管道是新建一个进程去执行 变量不共享   \n不官是键盘还是读文本 如果不需要处理特殊字符 加上-r参数  ","slug":"linux/linux-read笔记","published":1,"updated":"2018-09-13T02:48:35.945Z","layout":"post","photos":[],"link":"","_id":"cjo9uatxx002amwczfzpopnxl","content":"<h4 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h4><p>read 接收输入的数据 写脚本经常用的命令<br>之前都是瞎鸡儿用 从来没考虑仔细看看 文档 这次有时间 看看 记录下这篇笔记</p><h4 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h4><h5 id=\"读取键盘输入\"><a href=\"#读取键盘输入\" class=\"headerlink\" title=\"读取键盘输入\"></a>读取键盘输入</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo  &apos;</span><br><span class=\"line\">#!/bin/bash</span><br><span class=\"line\">echo &quot;请输入名字:&quot;</span><br><span class=\"line\">read name</span><br><span class=\"line\">echo &quot;你的名字:$name&quot;</span><br><span class=\"line\">exit 0 </span><br><span class=\"line\">&apos; &gt; testRead.sh </span><br><span class=\"line\">chmod +x ./testRead.sh </span><br><span class=\"line\">./testRead.sh</span><br></pre></td></tr></table></figure>\n<p>1:带提示的read<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo &apos;</span><br><span class=\"line\">#!/bin/bash</span><br><span class=\"line\">read -p &quot;请输入名字:&quot; name </span><br><span class=\"line\">echo &quot;你的名字:$name&quot;</span><br><span class=\"line\">exit 0</span><br><span class=\"line\">&apos; &gt; testRead.sh </span><br><span class=\"line\">chmod +x ./testRead.sh</span><br><span class=\"line\">./testRead.sh</span><br></pre></td></tr></table></figure><p></p>\n<p>2:多个参数的read<br>经过空格分割参数数量等于指定的变量数量<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo &apos;</span><br><span class=\"line\">#!/bin/bash</span><br><span class=\"line\">read -p &quot;请输入多个名字 空格分割:&quot; name1 name2</span><br><span class=\"line\">echo &quot;姓名1:$name1&quot;</span><br><span class=\"line\">echo &quot;姓名2:$name2&quot;</span><br><span class=\"line\">&apos; &gt; testRead.sh</span><br><span class=\"line\">chmod +x ./testRead.sh</span><br><span class=\"line\">./testRead.sh</span><br></pre></td></tr></table></figure><p></p>\n<p>经过空格分割的参数小于指定的变量数量<br>当经过空格分割的参数小于指定的变量数量的时候 多余的变量为空<br>提示输入的时候 输入 ‘ming’<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo &apos;</span><br><span class=\"line\">#!/bin/bash</span><br><span class=\"line\">read -p &quot;请输入多个名字:&quot; name1 name2</span><br><span class=\"line\">echo &quot;姓名1:$name1&quot;</span><br><span class=\"line\">echo &quot;姓名2:$name2&quot;</span><br><span class=\"line\">&apos; &gt; testRead.sh</span><br><span class=\"line\">chmod +x ./testRead.sh</span><br><span class=\"line\">./testRead.sh</span><br></pre></td></tr></table></figure><p></p>\n<p>经过空格分割的参数大于指定变量的数量<br>当经过空格分割的参数大于指定变量的数量  超出部分的数据会赋值给最后一个变量<br>提示输入的时候 输入 ‘ming jiu xu’<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo &apos;</span><br><span class=\"line\">#!/bin/bash</span><br><span class=\"line\">read -p &quot;请输入多个名字:&quot; name1  name2</span><br><span class=\"line\">echo &quot;姓名1:$name1&quot;</span><br><span class=\"line\">echo &quot;姓名2:$name2&quot;</span><br><span class=\"line\">&apos; &gt; testRead.sh</span><br><span class=\"line\">chmod +x ./testRead.sh</span><br><span class=\"line\">./testRead.sh</span><br></pre></td></tr></table></figure><p></p>\n<p>3:使用内置的环境变量调用输入的数据<br>使用REPLY环境变量获取此次输入的数据<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo &apos;</span><br><span class=\"line\">#!/bin/bash</span><br><span class=\"line\">read -p &quot;请输入多个名字:&quot; </span><br><span class=\"line\">echo &quot;姓名1:$REPLY&quot;</span><br><span class=\"line\">&apos; &gt; testRead.sh</span><br><span class=\"line\">chmod +x ./testRead.sh</span><br><span class=\"line\">./testRead.sh</span><br></pre></td></tr></table></figure><p></p>\n<p>4:限制时间的read<br>使用 read 的-t参数来设定read等待时间<br>执行不进行操作等待5s后超时<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo &apos;</span><br><span class=\"line\">#!/bin/bash </span><br><span class=\"line\">if read -t 5 -p &quot;请输入名字5s超时:&quot; name</span><br><span class=\"line\">then </span><br><span class=\"line\">  echo &quot;姓名:$name&quot;</span><br><span class=\"line\">else</span><br><span class=\"line\">  echo &quot;time out !!!!&quot;  </span><br><span class=\"line\">fi </span><br><span class=\"line\">exit 0   </span><br><span class=\"line\">&apos; &gt; testRead.sh </span><br><span class=\"line\">chmod +x ./testRead.sh</span><br><span class=\"line\">./testRead.sh</span><br></pre></td></tr></table></figure><p></p>\n<p>5:输入敏感字符不显示在终端<br>使用-s参数 不在终端显示输入的数据<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo &apos;</span><br><span class=\"line\">#!/bin/bash</span><br><span class=\"line\">read -s -p &quot;请输入密码:&quot; pwd</span><br><span class=\"line\">echo &quot;$pwd&quot;</span><br><span class=\"line\">exit 0 </span><br><span class=\"line\">&apos; &gt; testRead.sh</span><br><span class=\"line\">chmod +x ./testRead.sh</span><br><span class=\"line\">./testRead.sh</span><br></pre></td></tr></table></figure><p></p>\n<h5 id=\"读取文件\"><a href=\"#读取文件\" class=\"headerlink\" title=\"读取文件\"></a>读取文件</h5><p>准备文件<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo &apos;nihao1</span><br><span class=\"line\">nihao2</span><br><span class=\"line\">nihao3&apos; &gt; test.txt</span><br></pre></td></tr></table></figure><p></p>\n<ul>\n<li><p>使用-u选项读取文件 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo &apos;</span><br><span class=\"line\">#!/bin/bash </span><br><span class=\"line\">exec 3&lt; test.txt </span><br><span class=\"line\">count = 0 </span><br><span class=\"line\">while read -u 3 var </span><br><span class=\"line\">do </span><br><span class=\"line\">  let count=$count+1 </span><br><span class=\"line\">  echo &quot;test.txt第$count行:$var&quot;</span><br><span class=\"line\">done </span><br><span class=\"line\">echo &quot;结束&quot;</span><br><span class=\"line\">exec 3&lt;&amp;-   </span><br><span class=\"line\">&apos; &gt; readFile.sh</span><br><span class=\"line\">chmod +x ./readFile.sh</span><br><span class=\"line\">./readFile.sh</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用管道read 文件<br>需要注意 管道是新开启一个进程执行  那么 只有在管道的进程中 count =行数  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo &apos;</span><br><span class=\"line\">#!/bin/bash</span><br><span class=\"line\">count=0</span><br><span class=\"line\">cat test.txt | while read var </span><br><span class=\"line\">do </span><br><span class=\"line\">  let count=$count+1</span><br><span class=\"line\">  echo &quot;第$count行:$var&quot;</span><br><span class=\"line\">done </span><br><span class=\"line\">echo &quot;结束&quot;  </span><br><span class=\"line\">exit 0 </span><br><span class=\"line\">&apos; &gt; readFile.sh </span><br><span class=\"line\">chmod +x ./readFile.sh</span><br><span class=\"line\">./readFile.sh</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用重定向</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo &apos;</span><br><span class=\"line\">#!/bin/bash</span><br><span class=\"line\">count=0</span><br><span class=\"line\">while read var </span><br><span class=\"line\">do </span><br><span class=\"line\">  let count=$count+1</span><br><span class=\"line\">  echo &quot;第$count行:$var&quot;</span><br><span class=\"line\">done  &lt; test.txt </span><br><span class=\"line\">echo &quot;结束&quot;</span><br><span class=\"line\">exit 0 </span><br><span class=\"line\">&apos; &gt; readFile.sh</span><br><span class=\"line\">chmod +x ./readFile.sh </span><br><span class=\"line\">./readFile.sh</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h4><p>\\在linux常规操作中没有做任何特殊处理的话 它是表示续行符 read也是一样的 默认处理\\续行符 如果需要read 把所有的特殊符号都不进行处理 加上 -r选项  </p>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><p>通过read 读取键盘输入或者文件 中的信息 是经常的操作<br>读取键盘的输入主要就考虑 是不是要有提示(-p) 是不是要设置超时时间(-t) 终端打不打印明文(-s)<br>读取文本的时候 主要考虑 是直接使用read读取 还是使用重定向还是管道去处理 当使用管道读取的时候 一定要注意 管道是新建一个进程去执行 变量不共享<br>不官是键盘还是读文本 如果不需要处理特殊字符 加上-r参数</p>","site":{"data":{}},"excerpt":"","more":"<h4 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h4><p>read 接收输入的数据 写脚本经常用的命令<br>之前都是瞎鸡儿用 从来没考虑仔细看看 文档 这次有时间 看看 记录下这篇笔记</p><h4 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h4><h5 id=\"读取键盘输入\"><a href=\"#读取键盘输入\" class=\"headerlink\" title=\"读取键盘输入\"></a>读取键盘输入</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo  &apos;</span><br><span class=\"line\">#!/bin/bash</span><br><span class=\"line\">echo &quot;请输入名字:&quot;</span><br><span class=\"line\">read name</span><br><span class=\"line\">echo &quot;你的名字:$name&quot;</span><br><span class=\"line\">exit 0 </span><br><span class=\"line\">&apos; &gt; testRead.sh </span><br><span class=\"line\">chmod +x ./testRead.sh </span><br><span class=\"line\">./testRead.sh</span><br></pre></td></tr></table></figure>\n<p>1:带提示的read<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo &apos;</span><br><span class=\"line\">#!/bin/bash</span><br><span class=\"line\">read -p &quot;请输入名字:&quot; name </span><br><span class=\"line\">echo &quot;你的名字:$name&quot;</span><br><span class=\"line\">exit 0</span><br><span class=\"line\">&apos; &gt; testRead.sh </span><br><span class=\"line\">chmod +x ./testRead.sh</span><br><span class=\"line\">./testRead.sh</span><br></pre></td></tr></table></figure><p></p>\n<p>2:多个参数的read<br>经过空格分割参数数量等于指定的变量数量<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo &apos;</span><br><span class=\"line\">#!/bin/bash</span><br><span class=\"line\">read -p &quot;请输入多个名字 空格分割:&quot; name1 name2</span><br><span class=\"line\">echo &quot;姓名1:$name1&quot;</span><br><span class=\"line\">echo &quot;姓名2:$name2&quot;</span><br><span class=\"line\">&apos; &gt; testRead.sh</span><br><span class=\"line\">chmod +x ./testRead.sh</span><br><span class=\"line\">./testRead.sh</span><br></pre></td></tr></table></figure><p></p>\n<p>经过空格分割的参数小于指定的变量数量<br>当经过空格分割的参数小于指定的变量数量的时候 多余的变量为空<br>提示输入的时候 输入 ‘ming’<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo &apos;</span><br><span class=\"line\">#!/bin/bash</span><br><span class=\"line\">read -p &quot;请输入多个名字:&quot; name1 name2</span><br><span class=\"line\">echo &quot;姓名1:$name1&quot;</span><br><span class=\"line\">echo &quot;姓名2:$name2&quot;</span><br><span class=\"line\">&apos; &gt; testRead.sh</span><br><span class=\"line\">chmod +x ./testRead.sh</span><br><span class=\"line\">./testRead.sh</span><br></pre></td></tr></table></figure><p></p>\n<p>经过空格分割的参数大于指定变量的数量<br>当经过空格分割的参数大于指定变量的数量  超出部分的数据会赋值给最后一个变量<br>提示输入的时候 输入 ‘ming jiu xu’<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo &apos;</span><br><span class=\"line\">#!/bin/bash</span><br><span class=\"line\">read -p &quot;请输入多个名字:&quot; name1  name2</span><br><span class=\"line\">echo &quot;姓名1:$name1&quot;</span><br><span class=\"line\">echo &quot;姓名2:$name2&quot;</span><br><span class=\"line\">&apos; &gt; testRead.sh</span><br><span class=\"line\">chmod +x ./testRead.sh</span><br><span class=\"line\">./testRead.sh</span><br></pre></td></tr></table></figure><p></p>\n<p>3:使用内置的环境变量调用输入的数据<br>使用REPLY环境变量获取此次输入的数据<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo &apos;</span><br><span class=\"line\">#!/bin/bash</span><br><span class=\"line\">read -p &quot;请输入多个名字:&quot; </span><br><span class=\"line\">echo &quot;姓名1:$REPLY&quot;</span><br><span class=\"line\">&apos; &gt; testRead.sh</span><br><span class=\"line\">chmod +x ./testRead.sh</span><br><span class=\"line\">./testRead.sh</span><br></pre></td></tr></table></figure><p></p>\n<p>4:限制时间的read<br>使用 read 的-t参数来设定read等待时间<br>执行不进行操作等待5s后超时<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo &apos;</span><br><span class=\"line\">#!/bin/bash </span><br><span class=\"line\">if read -t 5 -p &quot;请输入名字5s超时:&quot; name</span><br><span class=\"line\">then </span><br><span class=\"line\">  echo &quot;姓名:$name&quot;</span><br><span class=\"line\">else</span><br><span class=\"line\">  echo &quot;time out !!!!&quot;  </span><br><span class=\"line\">fi </span><br><span class=\"line\">exit 0   </span><br><span class=\"line\">&apos; &gt; testRead.sh </span><br><span class=\"line\">chmod +x ./testRead.sh</span><br><span class=\"line\">./testRead.sh</span><br></pre></td></tr></table></figure><p></p>\n<p>5:输入敏感字符不显示在终端<br>使用-s参数 不在终端显示输入的数据<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo &apos;</span><br><span class=\"line\">#!/bin/bash</span><br><span class=\"line\">read -s -p &quot;请输入密码:&quot; pwd</span><br><span class=\"line\">echo &quot;$pwd&quot;</span><br><span class=\"line\">exit 0 </span><br><span class=\"line\">&apos; &gt; testRead.sh</span><br><span class=\"line\">chmod +x ./testRead.sh</span><br><span class=\"line\">./testRead.sh</span><br></pre></td></tr></table></figure><p></p>\n<h5 id=\"读取文件\"><a href=\"#读取文件\" class=\"headerlink\" title=\"读取文件\"></a>读取文件</h5><p>准备文件<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo &apos;nihao1</span><br><span class=\"line\">nihao2</span><br><span class=\"line\">nihao3&apos; &gt; test.txt</span><br></pre></td></tr></table></figure><p></p>\n<ul>\n<li><p>使用-u选项读取文件 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo &apos;</span><br><span class=\"line\">#!/bin/bash </span><br><span class=\"line\">exec 3&lt; test.txt </span><br><span class=\"line\">count = 0 </span><br><span class=\"line\">while read -u 3 var </span><br><span class=\"line\">do </span><br><span class=\"line\">  let count=$count+1 </span><br><span class=\"line\">  echo &quot;test.txt第$count行:$var&quot;</span><br><span class=\"line\">done </span><br><span class=\"line\">echo &quot;结束&quot;</span><br><span class=\"line\">exec 3&lt;&amp;-   </span><br><span class=\"line\">&apos; &gt; readFile.sh</span><br><span class=\"line\">chmod +x ./readFile.sh</span><br><span class=\"line\">./readFile.sh</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用管道read 文件<br>需要注意 管道是新开启一个进程执行  那么 只有在管道的进程中 count =行数  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo &apos;</span><br><span class=\"line\">#!/bin/bash</span><br><span class=\"line\">count=0</span><br><span class=\"line\">cat test.txt | while read var </span><br><span class=\"line\">do </span><br><span class=\"line\">  let count=$count+1</span><br><span class=\"line\">  echo &quot;第$count行:$var&quot;</span><br><span class=\"line\">done </span><br><span class=\"line\">echo &quot;结束&quot;  </span><br><span class=\"line\">exit 0 </span><br><span class=\"line\">&apos; &gt; readFile.sh </span><br><span class=\"line\">chmod +x ./readFile.sh</span><br><span class=\"line\">./readFile.sh</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用重定向</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo &apos;</span><br><span class=\"line\">#!/bin/bash</span><br><span class=\"line\">count=0</span><br><span class=\"line\">while read var </span><br><span class=\"line\">do </span><br><span class=\"line\">  let count=$count+1</span><br><span class=\"line\">  echo &quot;第$count行:$var&quot;</span><br><span class=\"line\">done  &lt; test.txt </span><br><span class=\"line\">echo &quot;结束&quot;</span><br><span class=\"line\">exit 0 </span><br><span class=\"line\">&apos; &gt; readFile.sh</span><br><span class=\"line\">chmod +x ./readFile.sh </span><br><span class=\"line\">./readFile.sh</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h4><p>\\在linux常规操作中没有做任何特殊处理的话 它是表示续行符 read也是一样的 默认处理\\续行符 如果需要read 把所有的特殊符号都不进行处理 加上 -r选项  </p>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><p>通过read 读取键盘输入或者文件 中的信息 是经常的操作<br>读取键盘的输入主要就考虑 是不是要有提示(-p) 是不是要设置超时时间(-t) 终端打不打印明文(-s)<br>读取文本的时候 主要考虑 是直接使用read读取 还是使用重定向还是管道去处理 当使用管道读取的时候 一定要注意 管道是新建一个进程去执行 变量不共享<br>不官是键盘还是读文本 如果不需要处理特殊字符 加上-r参数</p>"},{"title":"linux-shell脚本入参笔记","comments":1,"abbrlink":"fd3f4f09","date":"2018-09-14T06:00:44.000Z","_content":"####前言 \nlinux shell脚本中 获取参数 大致上 有 \n* 直接 xxx.sh p1 p2\n直接通过获取 脚本后面跟着的参数 进行操作\n* getopts\n获取 脚本后面的选项 \n* getopt \n获取脚本后面的可变选项\n* read\n从键盘或者文件中读取参数  \n这几种方案  \n参考地址:   \nhttp://diseng.github.io/2015/04/15/shell-argvs-type\n#### 直接接收shell脚本后面的参数 \n调用脚本的格式   \n```\nxxx.sh arg1 arg2 \n```\n脚本中获取参数的方式  \n$1 = arg1 \n$2 = arg2 \n\n注意点:\n* $0:指脚本本身 \n* $(num)脚本后面跟着的参数 num从1开始 \n* $#:入参的总数 不包含脚本本身\n* $@:入参列表 不包含脚本本身\n* $*:和$@相同，但”$” 和 “$@”(加引号)并不同,”$“将所有的参数解释成一个字符串,而”$@”是一个参数数组\n例子:   \n```\necho '\n#!/bin/bash\necho $1\necho $2 \necho $0\necho $#\necho $@\necho $*    \n' > test.sh \nchmod +x ./test.sh\n./test.sh ming  jiu  \n```\n#### getopts\n带选项方式接收入参  \n调用脚本的方式\n```\nxxx.sh -a -b 'xx'\n```\n定义选项的方式 \n定义ab两个选项  a不带:不接收参数  b带:必须接收参数\n```\ngetopts \"ab:\" \n```\n例子:\n```\necho '\n#!/bin/bash\nwhile getopts \"ab:\" arg\ndo \n  case $arg in \n       a)\n          echo \"选项$arg\"\n          ;;\n       b)\n          echo \"选项$arg,参数:$OPTARG\"\n          ;;\n  esac           \ndone\n' > test.sh\nchmod +x ./test.sh\n./test.sh -a \n./test.sh -b ming\n./test.sh -a -b ming \n./test.sh -b \n```\n#### getopt \n增强版本的getopts 可以接收长参数、可以指定可选参数  \n调用脚本方式\n```\nxxx.sh -a -b bval --aparam \n```\n定义接收参数的格式\n* 没有:不接受参数\n* 一个:接收参数\n* 两个:选项参数可选\n-o 设置短选项  -l 设置长选项 \nARGS后面不是单引号(') 是制表符(tab)上面的那个英文符号(`)\n```\nARGS=`getopt -o ab: -l\"aparam::,help\" -- \"$@\"`\neval set --\"${ARGS}\"\n```\n例子:\n```\n#!/bin/bash\n\nARGS=`getopt -o ab: -l \"aparam:,help\" -- \"$@\"`\neval set -- \"${ARGS}\"\n\nwhile true;\ndo\n    case \"$1\" in\n        -a) \n            echo \"-a \"\n            shift\n            ;;\n        -b) \n            echo \"-b $2\" \n            shift 2\n            ;;\n        --aparam)\n            echo \"-aparam $2\"\n            shift 2\n            ;;\n        --help)\n            echo \"help\"\n            exit 0\n            ;;\n        --)\n            shift\n            break\n            ;;\n        *)\n            echo \"错误!\"\n            exit 1\n            ;;\n    esac\ndone\n    \n' > test.sh\nchmod +x ./test.sh \n./test.sh -a -b bbbb --aparam aaaapp  \n```\n#### read \n利用接收键盘输入来输入参数  \n```\necho '\n#!/bin/bash\nread -p \"请输入参数:\"  name \necho \"输入的参数${name}\"\nexit 0\n' > test.sh\nchmod +x ./test.sh \n./test.sh\n```\n####  总结 \nshell接收参数方式 总的来说 简单脚本 直接使用 $1 ...就够用了\n如果要设计复杂的参数 可以使用 getopt  getopts 来编写 \n要进行交互式的 可以使用 read 读取键盘输入来执行 \n或者甚至可以利用 其他的命令 从文件 从标准输出中读取数据 利用 xargs 这样的套路去配置参数  \n\n\n\n\n\n","source":"_posts/linux/linux-shell脚本入参笔记.md","raw":"---\ntitle: linux-shell脚本入参笔记\ncomments: true\ncategories: 笔记\ntags:\n  - linux\n  - shell\nabbrlink: fd3f4f09\ndate: 2018-09-14 14:00:44\n---\n####前言 \nlinux shell脚本中 获取参数 大致上 有 \n* 直接 xxx.sh p1 p2\n直接通过获取 脚本后面跟着的参数 进行操作\n* getopts\n获取 脚本后面的选项 \n* getopt \n获取脚本后面的可变选项\n* read\n从键盘或者文件中读取参数  \n这几种方案  \n参考地址:   \nhttp://diseng.github.io/2015/04/15/shell-argvs-type\n#### 直接接收shell脚本后面的参数 \n调用脚本的格式   \n```\nxxx.sh arg1 arg2 \n```\n脚本中获取参数的方式  \n$1 = arg1 \n$2 = arg2 \n\n注意点:\n* $0:指脚本本身 \n* $(num)脚本后面跟着的参数 num从1开始 \n* $#:入参的总数 不包含脚本本身\n* $@:入参列表 不包含脚本本身\n* $*:和$@相同，但”$” 和 “$@”(加引号)并不同,”$“将所有的参数解释成一个字符串,而”$@”是一个参数数组\n例子:   \n```\necho '\n#!/bin/bash\necho $1\necho $2 \necho $0\necho $#\necho $@\necho $*    \n' > test.sh \nchmod +x ./test.sh\n./test.sh ming  jiu  \n```\n#### getopts\n带选项方式接收入参  \n调用脚本的方式\n```\nxxx.sh -a -b 'xx'\n```\n定义选项的方式 \n定义ab两个选项  a不带:不接收参数  b带:必须接收参数\n```\ngetopts \"ab:\" \n```\n例子:\n```\necho '\n#!/bin/bash\nwhile getopts \"ab:\" arg\ndo \n  case $arg in \n       a)\n          echo \"选项$arg\"\n          ;;\n       b)\n          echo \"选项$arg,参数:$OPTARG\"\n          ;;\n  esac           \ndone\n' > test.sh\nchmod +x ./test.sh\n./test.sh -a \n./test.sh -b ming\n./test.sh -a -b ming \n./test.sh -b \n```\n#### getopt \n增强版本的getopts 可以接收长参数、可以指定可选参数  \n调用脚本方式\n```\nxxx.sh -a -b bval --aparam \n```\n定义接收参数的格式\n* 没有:不接受参数\n* 一个:接收参数\n* 两个:选项参数可选\n-o 设置短选项  -l 设置长选项 \nARGS后面不是单引号(') 是制表符(tab)上面的那个英文符号(`)\n```\nARGS=`getopt -o ab: -l\"aparam::,help\" -- \"$@\"`\neval set --\"${ARGS}\"\n```\n例子:\n```\n#!/bin/bash\n\nARGS=`getopt -o ab: -l \"aparam:,help\" -- \"$@\"`\neval set -- \"${ARGS}\"\n\nwhile true;\ndo\n    case \"$1\" in\n        -a) \n            echo \"-a \"\n            shift\n            ;;\n        -b) \n            echo \"-b $2\" \n            shift 2\n            ;;\n        --aparam)\n            echo \"-aparam $2\"\n            shift 2\n            ;;\n        --help)\n            echo \"help\"\n            exit 0\n            ;;\n        --)\n            shift\n            break\n            ;;\n        *)\n            echo \"错误!\"\n            exit 1\n            ;;\n    esac\ndone\n    \n' > test.sh\nchmod +x ./test.sh \n./test.sh -a -b bbbb --aparam aaaapp  \n```\n#### read \n利用接收键盘输入来输入参数  \n```\necho '\n#!/bin/bash\nread -p \"请输入参数:\"  name \necho \"输入的参数${name}\"\nexit 0\n' > test.sh\nchmod +x ./test.sh \n./test.sh\n```\n####  总结 \nshell接收参数方式 总的来说 简单脚本 直接使用 $1 ...就够用了\n如果要设计复杂的参数 可以使用 getopt  getopts 来编写 \n要进行交互式的 可以使用 read 读取键盘输入来执行 \n或者甚至可以利用 其他的命令 从文件 从标准输出中读取数据 利用 xargs 这样的套路去配置参数  \n\n\n\n\n\n","slug":"linux/linux-shell脚本入参笔记","published":1,"updated":"2018-09-29T02:28:43.632Z","layout":"post","photos":[],"link":"","_id":"cjo9uatxz002emwczcmydwpjn","content":"<p>####前言<br>linux shell脚本中 获取参数 大致上 有</p><ul><li>直接 xxx.sh p1 p2<br>直接通过获取 脚本后面跟着的参数 进行操作</li><li>getopts<br>获取 脚本后面的选项</li><li>getopt<br>获取脚本后面的可变选项</li><li>read<br>从键盘或者文件中读取参数<br>这几种方案<br>参考地址:<br><a href=\"http://diseng.github.io/2015/04/15/shell-argvs-type\" target=\"_blank\" rel=\"noopener\">http://diseng.github.io/2015/04/15/shell-argvs-type</a><h4 id=\"直接接收shell脚本后面的参数\"><a href=\"#直接接收shell脚本后面的参数\" class=\"headerlink\" title=\"直接接收shell脚本后面的参数\"></a>直接接收shell脚本后面的参数</h4>调用脚本的格式<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xxx.sh arg1 arg2</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>脚本中获取参数的方式<br>$1 = arg1<br>$2 = arg2 </p>\n<p>注意点:</p>\n<ul>\n<li>$0:指脚本本身 </li>\n<li>$(num)脚本后面跟着的参数 num从1开始 </li>\n<li>$#:入参的总数 不包含脚本本身</li>\n<li>$@:入参列表 不包含脚本本身</li>\n<li>$*:和$@相同，但”$” 和 “$@”(加引号)并不同,”$“将所有的参数解释成一个字符串,而”$@”是一个参数数组<br>例子:   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo &apos;</span><br><span class=\"line\">#!/bin/bash</span><br><span class=\"line\">echo $1</span><br><span class=\"line\">echo $2 </span><br><span class=\"line\">echo $0</span><br><span class=\"line\">echo $#</span><br><span class=\"line\">echo $@</span><br><span class=\"line\">echo $*    </span><br><span class=\"line\">&apos; &gt; test.sh </span><br><span class=\"line\">chmod +x ./test.sh</span><br><span class=\"line\">./test.sh ming  jiu</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"getopts\"><a href=\"#getopts\" class=\"headerlink\" title=\"getopts\"></a>getopts</h4><p>带选项方式接收入参<br>调用脚本的方式<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xxx.sh -a -b &apos;xx&apos;</span><br></pre></td></tr></table></figure><p></p>\n<p>定义选项的方式<br>定义ab两个选项  a不带:不接收参数  b带:必须接收参数<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getopts &quot;ab:&quot;</span><br></pre></td></tr></table></figure><p></p>\n<p>例子:<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo &apos;</span><br><span class=\"line\">#!/bin/bash</span><br><span class=\"line\">while getopts &quot;ab:&quot; arg</span><br><span class=\"line\">do </span><br><span class=\"line\">  case $arg in </span><br><span class=\"line\">       a)</span><br><span class=\"line\">          echo &quot;选项$arg&quot;</span><br><span class=\"line\">          ;;</span><br><span class=\"line\">       b)</span><br><span class=\"line\">          echo &quot;选项$arg,参数:$OPTARG&quot;</span><br><span class=\"line\">          ;;</span><br><span class=\"line\">  esac           </span><br><span class=\"line\">done</span><br><span class=\"line\">&apos; &gt; test.sh</span><br><span class=\"line\">chmod +x ./test.sh</span><br><span class=\"line\">./test.sh -a </span><br><span class=\"line\">./test.sh -b ming</span><br><span class=\"line\">./test.sh -a -b ming </span><br><span class=\"line\">./test.sh -b</span><br></pre></td></tr></table></figure><p></p>\n<h4 id=\"getopt\"><a href=\"#getopt\" class=\"headerlink\" title=\"getopt\"></a>getopt</h4><p>增强版本的getopts 可以接收长参数、可以指定可选参数<br>调用脚本方式<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xxx.sh -a -b bval --aparam</span><br></pre></td></tr></table></figure><p></p>\n<p>定义接收参数的格式</p>\n<ul>\n<li>没有:不接受参数</li>\n<li>一个:接收参数</li>\n<li>两个:选项参数可选<br>-o 设置短选项  -l 设置长选项<br>ARGS后面不是单引号(‘) 是制表符(tab)上面的那个英文符号(`)<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ARGS=`getopt -o ab: -l&quot;aparam::,help&quot; -- &quot;$@&quot;`</span><br><span class=\"line\">eval set --&quot;$&#123;ARGS&#125;&quot;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>例子:<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/bash</span><br><span class=\"line\"></span><br><span class=\"line\">ARGS=`getopt -o ab: -l &quot;aparam:,help&quot; -- &quot;$@&quot;`</span><br><span class=\"line\">eval set -- &quot;$&#123;ARGS&#125;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">while true;</span><br><span class=\"line\">do</span><br><span class=\"line\">    case &quot;$1&quot; in</span><br><span class=\"line\">        -a) </span><br><span class=\"line\">            echo &quot;-a &quot;</span><br><span class=\"line\">            shift</span><br><span class=\"line\">            ;;</span><br><span class=\"line\">        -b) </span><br><span class=\"line\">            echo &quot;-b $2&quot; </span><br><span class=\"line\">            shift 2</span><br><span class=\"line\">            ;;</span><br><span class=\"line\">        --aparam)</span><br><span class=\"line\">            echo &quot;-aparam $2&quot;</span><br><span class=\"line\">            shift 2</span><br><span class=\"line\">            ;;</span><br><span class=\"line\">        --help)</span><br><span class=\"line\">            echo &quot;help&quot;</span><br><span class=\"line\">            exit 0</span><br><span class=\"line\">            ;;</span><br><span class=\"line\">        --)</span><br><span class=\"line\">            shift</span><br><span class=\"line\">            break</span><br><span class=\"line\">            ;;</span><br><span class=\"line\">        *)</span><br><span class=\"line\">            echo &quot;错误!&quot;</span><br><span class=\"line\">            exit 1</span><br><span class=\"line\">            ;;</span><br><span class=\"line\">    esac</span><br><span class=\"line\">done</span><br><span class=\"line\">    </span><br><span class=\"line\">&apos; &gt; test.sh</span><br><span class=\"line\">chmod +x ./test.sh </span><br><span class=\"line\">./test.sh -a -b bbbb --aparam aaaapp</span><br></pre></td></tr></table></figure><p></p>\n<h4 id=\"read\"><a href=\"#read\" class=\"headerlink\" title=\"read\"></a>read</h4><p>利用接收键盘输入来输入参数<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo &apos;</span><br><span class=\"line\">#!/bin/bash</span><br><span class=\"line\">read -p &quot;请输入参数:&quot;  name </span><br><span class=\"line\">echo &quot;输入的参数$&#123;name&#125;&quot;</span><br><span class=\"line\">exit 0</span><br><span class=\"line\">&apos; &gt; test.sh</span><br><span class=\"line\">chmod +x ./test.sh </span><br><span class=\"line\">./test.sh</span><br></pre></td></tr></table></figure><p></p>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><p>shell接收参数方式 总的来说 简单脚本 直接使用 $1 …就够用了<br>如果要设计复杂的参数 可以使用 getopt  getopts 来编写<br>要进行交互式的 可以使用 read 读取键盘输入来执行<br>或者甚至可以利用 其他的命令 从文件 从标准输出中读取数据 利用 xargs 这样的套路去配置参数</p>","site":{"data":{}},"excerpt":"","more":"<p>####前言<br>linux shell脚本中 获取参数 大致上 有</p><ul><li>直接 xxx.sh p1 p2<br>直接通过获取 脚本后面跟着的参数 进行操作</li><li>getopts<br>获取 脚本后面的选项</li><li>getopt<br>获取脚本后面的可变选项</li><li>read<br>从键盘或者文件中读取参数<br>这几种方案<br>参考地址:<br><a href=\"http://diseng.github.io/2015/04/15/shell-argvs-type\" target=\"_blank\" rel=\"noopener\">http://diseng.github.io/2015/04/15/shell-argvs-type</a><h4 id=\"直接接收shell脚本后面的参数\"><a href=\"#直接接收shell脚本后面的参数\" class=\"headerlink\" title=\"直接接收shell脚本后面的参数\"></a>直接接收shell脚本后面的参数</h4>调用脚本的格式<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xxx.sh arg1 arg2</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>脚本中获取参数的方式<br>$1 = arg1<br>$2 = arg2 </p>\n<p>注意点:</p>\n<ul>\n<li>$0:指脚本本身 </li>\n<li>$(num)脚本后面跟着的参数 num从1开始 </li>\n<li>$#:入参的总数 不包含脚本本身</li>\n<li>$@:入参列表 不包含脚本本身</li>\n<li>$*:和$@相同，但”$” 和 “$@”(加引号)并不同,”$“将所有的参数解释成一个字符串,而”$@”是一个参数数组<br>例子:   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo &apos;</span><br><span class=\"line\">#!/bin/bash</span><br><span class=\"line\">echo $1</span><br><span class=\"line\">echo $2 </span><br><span class=\"line\">echo $0</span><br><span class=\"line\">echo $#</span><br><span class=\"line\">echo $@</span><br><span class=\"line\">echo $*    </span><br><span class=\"line\">&apos; &gt; test.sh </span><br><span class=\"line\">chmod +x ./test.sh</span><br><span class=\"line\">./test.sh ming  jiu</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"getopts\"><a href=\"#getopts\" class=\"headerlink\" title=\"getopts\"></a>getopts</h4><p>带选项方式接收入参<br>调用脚本的方式<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xxx.sh -a -b &apos;xx&apos;</span><br></pre></td></tr></table></figure><p></p>\n<p>定义选项的方式<br>定义ab两个选项  a不带:不接收参数  b带:必须接收参数<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getopts &quot;ab:&quot;</span><br></pre></td></tr></table></figure><p></p>\n<p>例子:<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo &apos;</span><br><span class=\"line\">#!/bin/bash</span><br><span class=\"line\">while getopts &quot;ab:&quot; arg</span><br><span class=\"line\">do </span><br><span class=\"line\">  case $arg in </span><br><span class=\"line\">       a)</span><br><span class=\"line\">          echo &quot;选项$arg&quot;</span><br><span class=\"line\">          ;;</span><br><span class=\"line\">       b)</span><br><span class=\"line\">          echo &quot;选项$arg,参数:$OPTARG&quot;</span><br><span class=\"line\">          ;;</span><br><span class=\"line\">  esac           </span><br><span class=\"line\">done</span><br><span class=\"line\">&apos; &gt; test.sh</span><br><span class=\"line\">chmod +x ./test.sh</span><br><span class=\"line\">./test.sh -a </span><br><span class=\"line\">./test.sh -b ming</span><br><span class=\"line\">./test.sh -a -b ming </span><br><span class=\"line\">./test.sh -b</span><br></pre></td></tr></table></figure><p></p>\n<h4 id=\"getopt\"><a href=\"#getopt\" class=\"headerlink\" title=\"getopt\"></a>getopt</h4><p>增强版本的getopts 可以接收长参数、可以指定可选参数<br>调用脚本方式<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xxx.sh -a -b bval --aparam</span><br></pre></td></tr></table></figure><p></p>\n<p>定义接收参数的格式</p>\n<ul>\n<li>没有:不接受参数</li>\n<li>一个:接收参数</li>\n<li>两个:选项参数可选<br>-o 设置短选项  -l 设置长选项<br>ARGS后面不是单引号(‘) 是制表符(tab)上面的那个英文符号(`)<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ARGS=`getopt -o ab: -l&quot;aparam::,help&quot; -- &quot;$@&quot;`</span><br><span class=\"line\">eval set --&quot;$&#123;ARGS&#125;&quot;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>例子:<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/bash</span><br><span class=\"line\"></span><br><span class=\"line\">ARGS=`getopt -o ab: -l &quot;aparam:,help&quot; -- &quot;$@&quot;`</span><br><span class=\"line\">eval set -- &quot;$&#123;ARGS&#125;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">while true;</span><br><span class=\"line\">do</span><br><span class=\"line\">    case &quot;$1&quot; in</span><br><span class=\"line\">        -a) </span><br><span class=\"line\">            echo &quot;-a &quot;</span><br><span class=\"line\">            shift</span><br><span class=\"line\">            ;;</span><br><span class=\"line\">        -b) </span><br><span class=\"line\">            echo &quot;-b $2&quot; </span><br><span class=\"line\">            shift 2</span><br><span class=\"line\">            ;;</span><br><span class=\"line\">        --aparam)</span><br><span class=\"line\">            echo &quot;-aparam $2&quot;</span><br><span class=\"line\">            shift 2</span><br><span class=\"line\">            ;;</span><br><span class=\"line\">        --help)</span><br><span class=\"line\">            echo &quot;help&quot;</span><br><span class=\"line\">            exit 0</span><br><span class=\"line\">            ;;</span><br><span class=\"line\">        --)</span><br><span class=\"line\">            shift</span><br><span class=\"line\">            break</span><br><span class=\"line\">            ;;</span><br><span class=\"line\">        *)</span><br><span class=\"line\">            echo &quot;错误!&quot;</span><br><span class=\"line\">            exit 1</span><br><span class=\"line\">            ;;</span><br><span class=\"line\">    esac</span><br><span class=\"line\">done</span><br><span class=\"line\">    </span><br><span class=\"line\">&apos; &gt; test.sh</span><br><span class=\"line\">chmod +x ./test.sh </span><br><span class=\"line\">./test.sh -a -b bbbb --aparam aaaapp</span><br></pre></td></tr></table></figure><p></p>\n<h4 id=\"read\"><a href=\"#read\" class=\"headerlink\" title=\"read\"></a>read</h4><p>利用接收键盘输入来输入参数<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo &apos;</span><br><span class=\"line\">#!/bin/bash</span><br><span class=\"line\">read -p &quot;请输入参数:&quot;  name </span><br><span class=\"line\">echo &quot;输入的参数$&#123;name&#125;&quot;</span><br><span class=\"line\">exit 0</span><br><span class=\"line\">&apos; &gt; test.sh</span><br><span class=\"line\">chmod +x ./test.sh </span><br><span class=\"line\">./test.sh</span><br></pre></td></tr></table></figure><p></p>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><p>shell接收参数方式 总的来说 简单脚本 直接使用 $1 …就够用了<br>如果要设计复杂的参数 可以使用 getopt  getopts 来编写<br>要进行交互式的 可以使用 read 读取键盘输入来执行<br>或者甚至可以利用 其他的命令 从文件 从标准输出中读取数据 利用 xargs 这样的套路去配置参数</p>"},{"title":"linux-xargs笔记","comments":1,"abbrlink":"1f5f60e8","date":"2018-09-12T07:22:09.000Z","_content":"#### 前言\n在需要使用复杂的长命令去解决一些事情的事情 很多时候 需要将标准输出作为参数去使用 而不是当做标准输入去使用  \n那这个时候 就需要xargs 将标准输出的值重定向到某个命令的参数上去 并且执行这个命令 \n\n#### 例子\n* xargs 会把标准输出中的换行符、空格、制表符当成空格去分割传递给后面执行的命令 \n```\necho \"aaaaaaaaaaaa\" > a.txt\necho \"bbbbbbbbbbbb\" > b.txt\necho \"a.txt\\nb.txt\" | xargs cat \n#结果应该是  aaaaaaa  bbbbbbb  \n```\n* 通过 xargs -d 指定标准输出分隔符\n```\necho \"aaaaaaaaaaaa\" > a a.txt\necho \"bbbbbbbbbbbb\" > b.txt\necho \"a a.txtXb.txt\"|xargs -dX cat \n```\n* 使用 -p 来确定参数是否要继续执行 \n```\necho \"aaaaaaaaaaaa\" > a.txt\necho \"bbbbbbbbbbbb\" > b.txt\necho \"a.txt\\nb.txt\" | xargs -p cat \n```\n* 使用 -p -n 对每隔参数都进行确认 是否要继续执行 \n```\necho \"aaaaaaaaaaaa\" > a.txt\necho \"bbbbbbbbbbbb\" > b.txt\necho \"a.txt\\nb.txt\" | xargs -p -n1 cat \n```\n* 使用 -E 'xxx' 遇到xxx 就停止执行  \n注意 当使用 -0 或者-d参数 -E无效  \n```\necho \"aaaaaaaaaaaa\" > a.txt\necho \"bbbbbbbbbbbb\" > b.txt\necho \"a.txt xx b.txt\" | xargs -E 'xx' -p -n1 cat \n```\n#### 总结\n当需要将标准输出定向到某个命令的参数的时候 使用 xargs 去使用 通过 -d指定分隔符  使用 -p -n 一一确定是否执行  通过-E来设定遇到什么符号停止执行   \nxargs配合 | 重定向 想把标准输出 当成参数还是当成内容 都随便操作   \n","source":"_posts/linux/linux-xargs笔记.md","raw":"---\ntitle: linux-xargs笔记\ncomments: true\ncategories: 笔记\ntags:\n  - linux\nabbrlink: 1f5f60e8\ndate: 2018-09-12 15:22:09\n---\n#### 前言\n在需要使用复杂的长命令去解决一些事情的事情 很多时候 需要将标准输出作为参数去使用 而不是当做标准输入去使用  \n那这个时候 就需要xargs 将标准输出的值重定向到某个命令的参数上去 并且执行这个命令 \n\n#### 例子\n* xargs 会把标准输出中的换行符、空格、制表符当成空格去分割传递给后面执行的命令 \n```\necho \"aaaaaaaaaaaa\" > a.txt\necho \"bbbbbbbbbbbb\" > b.txt\necho \"a.txt\\nb.txt\" | xargs cat \n#结果应该是  aaaaaaa  bbbbbbb  \n```\n* 通过 xargs -d 指定标准输出分隔符\n```\necho \"aaaaaaaaaaaa\" > a a.txt\necho \"bbbbbbbbbbbb\" > b.txt\necho \"a a.txtXb.txt\"|xargs -dX cat \n```\n* 使用 -p 来确定参数是否要继续执行 \n```\necho \"aaaaaaaaaaaa\" > a.txt\necho \"bbbbbbbbbbbb\" > b.txt\necho \"a.txt\\nb.txt\" | xargs -p cat \n```\n* 使用 -p -n 对每隔参数都进行确认 是否要继续执行 \n```\necho \"aaaaaaaaaaaa\" > a.txt\necho \"bbbbbbbbbbbb\" > b.txt\necho \"a.txt\\nb.txt\" | xargs -p -n1 cat \n```\n* 使用 -E 'xxx' 遇到xxx 就停止执行  \n注意 当使用 -0 或者-d参数 -E无效  \n```\necho \"aaaaaaaaaaaa\" > a.txt\necho \"bbbbbbbbbbbb\" > b.txt\necho \"a.txt xx b.txt\" | xargs -E 'xx' -p -n1 cat \n```\n#### 总结\n当需要将标准输出定向到某个命令的参数的时候 使用 xargs 去使用 通过 -d指定分隔符  使用 -p -n 一一确定是否执行  通过-E来设定遇到什么符号停止执行   \nxargs配合 | 重定向 想把标准输出 当成参数还是当成内容 都随便操作   \n","slug":"linux/linux-xargs笔记","published":1,"updated":"2018-09-12T08:03:09.928Z","layout":"post","photos":[],"link":"","_id":"cjo9uaty1002imwczjm5ok3je","content":"<h4 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h4><p>在需要使用复杂的长命令去解决一些事情的事情 很多时候 需要将标准输出作为参数去使用 而不是当做标准输入去使用<br>那这个时候 就需要xargs 将标准输出的值重定向到某个命令的参数上去 并且执行这个命令</p><h4 id=\"例子\"><a href=\"#例子\" class=\"headerlink\" title=\"例子\"></a>例子</h4><ul><li><p>xargs 会把标准输出中的换行符、空格、制表符当成空格去分割传递给后面执行的命令</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo &quot;aaaaaaaaaaaa&quot; &gt; a.txt</span><br><span class=\"line\">echo &quot;bbbbbbbbbbbb&quot; &gt; b.txt</span><br><span class=\"line\">echo &quot;a.txt\\nb.txt&quot; | xargs cat </span><br><span class=\"line\">#结果应该是  aaaaaaa  bbbbbbb</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>通过 xargs -d 指定标准输出分隔符</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo &quot;aaaaaaaaaaaa&quot; &gt; a a.txt</span><br><span class=\"line\">echo &quot;bbbbbbbbbbbb&quot; &gt; b.txt</span><br><span class=\"line\">echo &quot;a a.txtXb.txt&quot;|xargs -dX cat</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用 -p 来确定参数是否要继续执行 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo &quot;aaaaaaaaaaaa&quot; &gt; a.txt</span><br><span class=\"line\">echo &quot;bbbbbbbbbbbb&quot; &gt; b.txt</span><br><span class=\"line\">echo &quot;a.txt\\nb.txt&quot; | xargs -p cat</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用 -p -n 对每隔参数都进行确认 是否要继续执行 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo &quot;aaaaaaaaaaaa&quot; &gt; a.txt</span><br><span class=\"line\">echo &quot;bbbbbbbbbbbb&quot; &gt; b.txt</span><br><span class=\"line\">echo &quot;a.txt\\nb.txt&quot; | xargs -p -n1 cat</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用 -E ‘xxx’ 遇到xxx 就停止执行<br>注意 当使用 -0 或者-d参数 -E无效  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo &quot;aaaaaaaaaaaa&quot; &gt; a.txt</span><br><span class=\"line\">echo &quot;bbbbbbbbbbbb&quot; &gt; b.txt</span><br><span class=\"line\">echo &quot;a.txt xx b.txt&quot; | xargs -E &apos;xx&apos; -p -n1 cat</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><p>当需要将标准输出定向到某个命令的参数的时候 使用 xargs 去使用 通过 -d指定分隔符  使用 -p -n 一一确定是否执行  通过-E来设定遇到什么符号停止执行<br>xargs配合 | 重定向 想把标准输出 当成参数还是当成内容 都随便操作</p>","site":{"data":{}},"excerpt":"","more":"<h4 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h4><p>在需要使用复杂的长命令去解决一些事情的事情 很多时候 需要将标准输出作为参数去使用 而不是当做标准输入去使用<br>那这个时候 就需要xargs 将标准输出的值重定向到某个命令的参数上去 并且执行这个命令</p><h4 id=\"例子\"><a href=\"#例子\" class=\"headerlink\" title=\"例子\"></a>例子</h4><ul><li><p>xargs 会把标准输出中的换行符、空格、制表符当成空格去分割传递给后面执行的命令</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo &quot;aaaaaaaaaaaa&quot; &gt; a.txt</span><br><span class=\"line\">echo &quot;bbbbbbbbbbbb&quot; &gt; b.txt</span><br><span class=\"line\">echo &quot;a.txt\\nb.txt&quot; | xargs cat </span><br><span class=\"line\">#结果应该是  aaaaaaa  bbbbbbb</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>通过 xargs -d 指定标准输出分隔符</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo &quot;aaaaaaaaaaaa&quot; &gt; a a.txt</span><br><span class=\"line\">echo &quot;bbbbbbbbbbbb&quot; &gt; b.txt</span><br><span class=\"line\">echo &quot;a a.txtXb.txt&quot;|xargs -dX cat</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用 -p 来确定参数是否要继续执行 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo &quot;aaaaaaaaaaaa&quot; &gt; a.txt</span><br><span class=\"line\">echo &quot;bbbbbbbbbbbb&quot; &gt; b.txt</span><br><span class=\"line\">echo &quot;a.txt\\nb.txt&quot; | xargs -p cat</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用 -p -n 对每隔参数都进行确认 是否要继续执行 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo &quot;aaaaaaaaaaaa&quot; &gt; a.txt</span><br><span class=\"line\">echo &quot;bbbbbbbbbbbb&quot; &gt; b.txt</span><br><span class=\"line\">echo &quot;a.txt\\nb.txt&quot; | xargs -p -n1 cat</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用 -E ‘xxx’ 遇到xxx 就停止执行<br>注意 当使用 -0 或者-d参数 -E无效  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo &quot;aaaaaaaaaaaa&quot; &gt; a.txt</span><br><span class=\"line\">echo &quot;bbbbbbbbbbbb&quot; &gt; b.txt</span><br><span class=\"line\">echo &quot;a.txt xx b.txt&quot; | xargs -E &apos;xx&apos; -p -n1 cat</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><p>当需要将标准输出定向到某个命令的参数的时候 使用 xargs 去使用 通过 -d指定分隔符  使用 -p -n 一一确定是否执行  通过-E来设定遇到什么符号停止执行<br>xargs配合 | 重定向 想把标准输出 当成参数还是当成内容 都随便操作</p>"},{"title":"linux操作文本相关命令笔记","abbrlink":"5e3a8086","date":"2017-11-10T16:00:00.000Z","_content":"\n#####Linux下 操作文本命令太多了  cat  echo  tee  sed等 \n##sed:按行操作文本\n######sed命令是处理文本的工具 属于管道命令 以行为单位 进行操作文本文件  \n######      sed [-nefri] ‘command’ ./file\n###### command 类似 vim的指令 \ncommand\n```\n a∶新增， a 的后面可以接字串，而这些字串会在新的一行出现(目前的下一行)～\n c∶取代， c 的后面可以接字串，这些字串可以取代 n1,n2 之间的行！\n d∶删除，因为是删除啊，所以 d 后面通常不接任何咚咚；\n i∶插入， i 的后面可以接字串，而这些字串会在新的一行出现(目前的上一行)；\n p∶列印，亦即将某个选择的资料印出。通常 p 会与参数 sed -n 一起运作～\n s∶取代，可以直接进行取代的工作哩！通常这个 s 的动作可以搭配正规表示法！例如 1,20s/old/new/g 就是啦！\n```\n1:删除\n```\n# 删除第一行 \nsed '1d' ./file\n# 删除最后一行\nsed '$d' ./file\n# 删除 1 到最后一行\nsed '1,$d' ./file\n```\n######其他用法 参考 man sed\n","source":"_posts/linux/linux操作文本命令.md","raw":"---\ntitle: linux操作文本相关命令笔记\ncategories: 笔记\ntags:\n  - linux\nabbrlink: 5e3a8086\ndate: 2017-11-11 00:00:00\n---\n\n#####Linux下 操作文本命令太多了  cat  echo  tee  sed等 \n##sed:按行操作文本\n######sed命令是处理文本的工具 属于管道命令 以行为单位 进行操作文本文件  \n######      sed [-nefri] ‘command’ ./file\n###### command 类似 vim的指令 \ncommand\n```\n a∶新增， a 的后面可以接字串，而这些字串会在新的一行出现(目前的下一行)～\n c∶取代， c 的后面可以接字串，这些字串可以取代 n1,n2 之间的行！\n d∶删除，因为是删除啊，所以 d 后面通常不接任何咚咚；\n i∶插入， i 的后面可以接字串，而这些字串会在新的一行出现(目前的上一行)；\n p∶列印，亦即将某个选择的资料印出。通常 p 会与参数 sed -n 一起运作～\n s∶取代，可以直接进行取代的工作哩！通常这个 s 的动作可以搭配正规表示法！例如 1,20s/old/new/g 就是啦！\n```\n1:删除\n```\n# 删除第一行 \nsed '1d' ./file\n# 删除最后一行\nsed '$d' ./file\n# 删除 1 到最后一行\nsed '1,$d' ./file\n```\n######其他用法 参考 man sed\n","slug":"linux/linux操作文本命令","published":1,"updated":"2018-08-17T08:10:03.923Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjo9uaty3002lmwcz7j9118th","content":"<p>#####Linux下 操作文本命令太多了 cat echo tee sed等</p><p>##sed:按行操作文本</p><p>######sed命令是处理文本的工具 属于管道命令 以行为单位 进行操作文本文件</p><h6 id=\"sed-nefri-‘command’-file\"><a href=\"#sed-nefri-‘command’-file\" class=\"headerlink\" title=\"sed [-nefri] ‘command’ ./file\"></a>sed [-nefri] ‘command’ ./file</h6><h6 id=\"command-类似-vim的指令\"><a href=\"#command-类似-vim的指令\" class=\"headerlink\" title=\"command 类似 vim的指令\"></a>command 类似 vim的指令</h6><p>command<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a∶新增， a 的后面可以接字串，而这些字串会在新的一行出现(目前的下一行)～</span><br><span class=\"line\">c∶取代， c 的后面可以接字串，这些字串可以取代 n1,n2 之间的行！</span><br><span class=\"line\">d∶删除，因为是删除啊，所以 d 后面通常不接任何咚咚；</span><br><span class=\"line\">i∶插入， i 的后面可以接字串，而这些字串会在新的一行出现(目前的上一行)；</span><br><span class=\"line\">p∶列印，亦即将某个选择的资料印出。通常 p 会与参数 sed -n 一起运作～</span><br><span class=\"line\">s∶取代，可以直接进行取代的工作哩！通常这个 s 的动作可以搭配正规表示法！例如 1,20s/old/new/g 就是啦！</span><br></pre></td></tr></table></figure><p></p>\n<p>1:删除<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 删除第一行 </span><br><span class=\"line\">sed &apos;1d&apos; ./file</span><br><span class=\"line\"># 删除最后一行</span><br><span class=\"line\">sed &apos;$d&apos; ./file</span><br><span class=\"line\"># 删除 1 到最后一行</span><br><span class=\"line\">sed &apos;1,$d&apos; ./file</span><br></pre></td></tr></table></figure><p></p>\n<p>######其他用法 参考 man sed</p>","site":{"data":{}},"excerpt":"","more":"<p>#####Linux下 操作文本命令太多了 cat echo tee sed等</p><p>##sed:按行操作文本</p><p>######sed命令是处理文本的工具 属于管道命令 以行为单位 进行操作文本文件</p><h6 id=\"sed-nefri-‘command’-file\"><a href=\"#sed-nefri-‘command’-file\" class=\"headerlink\" title=\"sed [-nefri] ‘command’ ./file\"></a>sed [-nefri] ‘command’ ./file</h6><h6 id=\"command-类似-vim的指令\"><a href=\"#command-类似-vim的指令\" class=\"headerlink\" title=\"command 类似 vim的指令\"></a>command 类似 vim的指令</h6><p>command<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a∶新增， a 的后面可以接字串，而这些字串会在新的一行出现(目前的下一行)～</span><br><span class=\"line\">c∶取代， c 的后面可以接字串，这些字串可以取代 n1,n2 之间的行！</span><br><span class=\"line\">d∶删除，因为是删除啊，所以 d 后面通常不接任何咚咚；</span><br><span class=\"line\">i∶插入， i 的后面可以接字串，而这些字串会在新的一行出现(目前的上一行)；</span><br><span class=\"line\">p∶列印，亦即将某个选择的资料印出。通常 p 会与参数 sed -n 一起运作～</span><br><span class=\"line\">s∶取代，可以直接进行取代的工作哩！通常这个 s 的动作可以搭配正规表示法！例如 1,20s/old/new/g 就是啦！</span><br></pre></td></tr></table></figure><p></p>\n<p>1:删除<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 删除第一行 </span><br><span class=\"line\">sed &apos;1d&apos; ./file</span><br><span class=\"line\"># 删除最后一行</span><br><span class=\"line\">sed &apos;$d&apos; ./file</span><br><span class=\"line\"># 删除 1 到最后一行</span><br><span class=\"line\">sed &apos;1,$d&apos; ./file</span><br></pre></td></tr></table></figure><p></p>\n<p>######其他用法 参考 man sed</p>"},{"title":"常用或者有趣的linux命令","abbrlink":"5e1b0665","date":"2017-11-10T16:00:00.000Z","_content":"|linux版本|命令|功能描述|实例|\n|------------|-------|------------|-----|\n|ubuntu | nautilus | ubuntu下面 从终端打开文件夹 | nautilus .|\n|*|traceroute|跟踪域名解析|traceroute 域名|\n|*|hexdump|将文件转换成hex码| hexdump 文件|\n|*|tcpdump、wireshark|抓包工具| |\n|*|sl |一个会动的火车||\n|*|nohup|忽略退出终端信号|nohup renwu &|\n|*|tmux|将单个控制台页面切分的工具| tmux 启动即可 功能巨强大 适合熟悉linux平台并且有一定的精分症的孩子使用 边编译源码边安装二进制包边解压 简直无敌|\n|*|netstat|查看端口占用情况 配合grep可以查看指定端口的占用情况|sudo netstat -apn |\n|*|top|动态查看系统的相关状态如cpu占用等| top|\n|*|grep|正则选取 | |\n|*|cat|输出某个文件内容 或者往某个文件写入内容| cat /etc/profile|\n|*|tee|往某个文件中追加内容 以指定字符结尾 未指定 则是EOF结尾| tee ./a.txt |\n|*|alias|命名别名|alias  psa=‘ps -aux' |\n|*|sed|按行操作文本|sed '$d' ./file|\n|ubuntu| gnome-screenshot -a |局域截图|\n|*|time|统计命令的在每个硬件中的执行时间| \\time -v ls |\n|*|sleep|休眠|sleep 30s 单位(s:秒,m:分,h:小时,d:天) 休眠ms sleep 0.03s 有10ms左右误差|\n|*|expr|计算器|expr 10 + 10| \n|*|file|查看文件信息|file xxx,(-z:查看压缩文件的信息只能查看gzip的压缩包其他的压缩包无法查看,-i查看mime,-F 设置分隔符,-L查看软连接,-f根据文件的命长查看每一个文件)|\n","source":"_posts/linux/linux简单命令笔记.md","raw":"---\ntitle: 常用或者有趣的linux命令\ncategories: 笔记\ntags:\n  - linux\nabbrlink: 5e1b0665\ndate: 2017-11-11 00:00:00\n---\n|linux版本|命令|功能描述|实例|\n|------------|-------|------------|-----|\n|ubuntu | nautilus | ubuntu下面 从终端打开文件夹 | nautilus .|\n|*|traceroute|跟踪域名解析|traceroute 域名|\n|*|hexdump|将文件转换成hex码| hexdump 文件|\n|*|tcpdump、wireshark|抓包工具| |\n|*|sl |一个会动的火车||\n|*|nohup|忽略退出终端信号|nohup renwu &|\n|*|tmux|将单个控制台页面切分的工具| tmux 启动即可 功能巨强大 适合熟悉linux平台并且有一定的精分症的孩子使用 边编译源码边安装二进制包边解压 简直无敌|\n|*|netstat|查看端口占用情况 配合grep可以查看指定端口的占用情况|sudo netstat -apn |\n|*|top|动态查看系统的相关状态如cpu占用等| top|\n|*|grep|正则选取 | |\n|*|cat|输出某个文件内容 或者往某个文件写入内容| cat /etc/profile|\n|*|tee|往某个文件中追加内容 以指定字符结尾 未指定 则是EOF结尾| tee ./a.txt |\n|*|alias|命名别名|alias  psa=‘ps -aux' |\n|*|sed|按行操作文本|sed '$d' ./file|\n|ubuntu| gnome-screenshot -a |局域截图|\n|*|time|统计命令的在每个硬件中的执行时间| \\time -v ls |\n|*|sleep|休眠|sleep 30s 单位(s:秒,m:分,h:小时,d:天) 休眠ms sleep 0.03s 有10ms左右误差|\n|*|expr|计算器|expr 10 + 10| \n|*|file|查看文件信息|file xxx,(-z:查看压缩文件的信息只能查看gzip的压缩包其他的压缩包无法查看,-i查看mime,-F 设置分隔符,-L查看软连接,-f根据文件的命长查看每一个文件)|\n","slug":"linux/linux简单命令笔记","published":1,"updated":"2018-09-13T05:34:52.013Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjo9uaty4002pmwczj4aurge2","content":"<table><thead><tr><th>linux版本</th><th>命令</th><th>功能描述</th><th>实例</th></tr></thead><tbody><tr><td>ubuntu</td><td>nautilus</td><td>ubuntu下面 从终端打开文件夹</td><td>nautilus .</td></tr><tr><td>*</td><td>traceroute</td><td>跟踪域名解析</td><td>traceroute 域名</td></tr><tr><td>*</td><td>hexdump</td><td>将文件转换成hex码</td><td>hexdump 文件</td></tr><tr><td>*</td><td>tcpdump、wireshark</td><td>抓包工具</td><td></td></tr><tr><td>*</td><td>sl</td><td>一个会动的火车</td><td></td></tr><tr><td>*</td><td>nohup</td><td>忽略退出终端信号</td><td>nohup renwu &amp;</td></tr><tr><td>*</td><td>tmux</td><td>将单个控制台页面切分的工具</td><td>tmux 启动即可 功能巨强大 适合熟悉linux平台并且有一定的精分症的孩子使用 边编译源码边安装二进制包边解压 简直无敌</td></tr><tr><td>*</td><td>netstat</td><td>查看端口占用情况 配合grep可以查看指定端口的占用情况</td><td>sudo netstat -apn</td></tr><tr><td>*</td><td>top</td><td>动态查看系统的相关状态如cpu占用等</td><td>top</td></tr><tr><td>*</td><td>grep</td><td>正则选取</td><td></td></tr><tr><td>*</td><td>cat</td><td>输出某个文件内容 或者往某个文件写入内容</td><td>cat /etc/profile</td></tr><tr><td>*</td><td>tee</td><td>往某个文件中追加内容 以指定字符结尾 未指定 则是EOF结尾</td><td>tee ./a.txt</td></tr><tr><td>*</td><td>alias</td><td>命名别名</td><td>alias psa=‘ps -aux’</td></tr><tr><td>*</td><td>sed</td><td>按行操作文本</td><td>sed ‘$d’ ./file</td></tr><tr><td>ubuntu</td><td>gnome-screenshot -a</td><td>局域截图</td></tr><tr><td>*</td><td>time</td><td>统计命令的在每个硬件中的执行时间</td><td>\\time -v ls</td></tr><tr><td>*</td><td>sleep</td><td>休眠</td><td>sleep 30s 单位(s:秒,m:分,h:小时,d:天) 休眠ms sleep 0.03s 有10ms左右误差</td></tr><tr><td>*</td><td>expr</td><td>计算器</td><td>expr 10 + 10</td></tr><tr><td>*</td><td>file</td><td>查看文件信息</td><td>file xxx,(-z:查看压缩文件的信息只能查看gzip的压缩包其他的压缩包无法查看,-i查看mime,-F 设置分隔符,-L查看软连接,-f根据文件的命长查看每一个文件)</td></tr></tbody></table>","site":{"data":{}},"excerpt":"","more":"<table><thead><tr><th>linux版本</th><th>命令</th><th>功能描述</th><th>实例</th></tr></thead><tbody><tr><td>ubuntu</td><td>nautilus</td><td>ubuntu下面 从终端打开文件夹</td><td>nautilus .</td></tr><tr><td>*</td><td>traceroute</td><td>跟踪域名解析</td><td>traceroute 域名</td></tr><tr><td>*</td><td>hexdump</td><td>将文件转换成hex码</td><td>hexdump 文件</td></tr><tr><td>*</td><td>tcpdump、wireshark</td><td>抓包工具</td><td></td></tr><tr><td>*</td><td>sl</td><td>一个会动的火车</td><td></td></tr><tr><td>*</td><td>nohup</td><td>忽略退出终端信号</td><td>nohup renwu &amp;</td></tr><tr><td>*</td><td>tmux</td><td>将单个控制台页面切分的工具</td><td>tmux 启动即可 功能巨强大 适合熟悉linux平台并且有一定的精分症的孩子使用 边编译源码边安装二进制包边解压 简直无敌</td></tr><tr><td>*</td><td>netstat</td><td>查看端口占用情况 配合grep可以查看指定端口的占用情况</td><td>sudo netstat -apn</td></tr><tr><td>*</td><td>top</td><td>动态查看系统的相关状态如cpu占用等</td><td>top</td></tr><tr><td>*</td><td>grep</td><td>正则选取</td><td></td></tr><tr><td>*</td><td>cat</td><td>输出某个文件内容 或者往某个文件写入内容</td><td>cat /etc/profile</td></tr><tr><td>*</td><td>tee</td><td>往某个文件中追加内容 以指定字符结尾 未指定 则是EOF结尾</td><td>tee ./a.txt</td></tr><tr><td>*</td><td>alias</td><td>命名别名</td><td>alias psa=‘ps -aux’</td></tr><tr><td>*</td><td>sed</td><td>按行操作文本</td><td>sed ‘$d’ ./file</td></tr><tr><td>ubuntu</td><td>gnome-screenshot -a</td><td>局域截图</td></tr><tr><td>*</td><td>time</td><td>统计命令的在每个硬件中的执行时间</td><td>\\time -v ls</td></tr><tr><td>*</td><td>sleep</td><td>休眠</td><td>sleep 30s 单位(s:秒,m:分,h:小时,d:天) 休眠ms sleep 0.03s 有10ms左右误差</td></tr><tr><td>*</td><td>expr</td><td>计算器</td><td>expr 10 + 10</td></tr><tr><td>*</td><td>file</td><td>查看文件信息</td><td>file xxx,(-z:查看压缩文件的信息只能查看gzip的压缩包其他的压缩包无法查看,-i查看mime,-F 设置分隔符,-L查看软连接,-f根据文件的命长查看每一个文件)</td></tr></tbody></table>"},{"title":"linux 解压windows文件乱码处理","abbrlink":"5c7769e6","date":"2017-11-10T16:00:00.000Z","_content":"1. 通过unzip行命令解压，指定字符集\nunzip -O CP936 xxx.zip (用GBK, GB18030也可以)\n有趣的是unzip的manual中并无这个选项的说明, unzip --help对这个参数有一行简单的说明。\n2. 在环境变量中，指定unzip参数，总是以指定的字符集显示和解压文件\n/etc/environment中加入2行\n[?](http://www.jb51.net/article/113961.htm#)\n1\n2\n\nUNZIP=\"-O CP936\"\n\nZIPINFO=\"-O CP936\"\n\n这样Gnome桌面的归档文件管理器(file-roller)可以正常使用unzip解压中文，但是file-roller本身并不能设置编码传递给unzip。\n","source":"_posts/linux/linux解压windows下中文文件乱码.md","raw":"---\ntitle: linux 解压windows文件乱码处理\ncategories: 坑\ntags:\n  - linux\nabbrlink: 5c7769e6\ndate: 2017-11-11 00:00:00\n---\n1. 通过unzip行命令解压，指定字符集\nunzip -O CP936 xxx.zip (用GBK, GB18030也可以)\n有趣的是unzip的manual中并无这个选项的说明, unzip --help对这个参数有一行简单的说明。\n2. 在环境变量中，指定unzip参数，总是以指定的字符集显示和解压文件\n/etc/environment中加入2行\n[?](http://www.jb51.net/article/113961.htm#)\n1\n2\n\nUNZIP=\"-O CP936\"\n\nZIPINFO=\"-O CP936\"\n\n这样Gnome桌面的归档文件管理器(file-roller)可以正常使用unzip解压中文，但是file-roller本身并不能设置编码传递给unzip。\n","slug":"linux/linux解压windows下中文文件乱码","published":1,"updated":"2018-08-17T08:10:03.923Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjo9uaty6002smwczi12xn1t9","content":"<ol><li>通过unzip行命令解压，指定字符集<br>unzip -O CP936 xxx.zip (用GBK, GB18030也可以)<br>有趣的是unzip的manual中并无这个选项的说明, unzip –help对这个参数有一行简单的说明。</li><li>在环境变量中，指定unzip参数，总是以指定的字符集显示和解压文件<br>/etc/environment中加入2行<br><a href=\"http://www.jb51.net/article/113961.htm#\" target=\"_blank\" rel=\"noopener\">?</a><br>1<br>2</li></ol><p>UNZIP=”-O CP936”</p><p>ZIPINFO=”-O CP936”</p><p>这样Gnome桌面的归档文件管理器(file-roller)可以正常使用unzip解压中文，但是file-roller本身并不能设置编码传递给unzip。</p>","site":{"data":{}},"excerpt":"","more":"<ol><li>通过unzip行命令解压，指定字符集<br>unzip -O CP936 xxx.zip (用GBK, GB18030也可以)<br>有趣的是unzip的manual中并无这个选项的说明, unzip –help对这个参数有一行简单的说明。</li><li>在环境变量中，指定unzip参数，总是以指定的字符集显示和解压文件<br>/etc/environment中加入2行<br><a href=\"http://www.jb51.net/article/113961.htm#\" target=\"_blank\" rel=\"noopener\">?</a><br>1<br>2</li></ol><p>UNZIP=”-O CP936”</p><p>ZIPINFO=”-O CP936”</p><p>这样Gnome桌面的归档文件管理器(file-roller)可以正常使用unzip解压中文，但是file-roller本身并不能设置编码传递给unzip。</p>"},{"title":"linux使用ss笔记","abbrlink":"5624ab1d","date":"2017-11-10T16:00:00.000Z","_content":"\n由于有个朋友对于在linux上使用ss翻墙不会 特别写个简单的笔记、\n#######基于ubunut17.04、python3、\n####1:安装pip3\n```\nsudo apt install pip3\n```\n####2:通过pip3安装shadowsocks\n```\nsudo pip3 install shadowsocks\n```\n####3:设置shadowsocksServer属性配置\n```\n{\n\t\"server\":\"ss服务器ip\",\n\t\"server_port\":端口,\n\t\"local_address\":\"127.0.0.1\",(本地socks5地址)\n\t\"local_port\":1080,(本地socks5端口)\n\t\"password\":\"ss服务器密码\",\n\t\"timeout\":300,(超时时间 ms),\n\t“method”:\"aes-256-cfb\"(加密方式)尽量选择这个 \n}\n```\n####4:启动本地ss\n```\nsudo sslocal -c 配置文件地址\n```\n####5:设置代理\n这里设置代理有很多方式  先说两种常用的\n1:直接设置整个系统的代理 、通过gfwlist生成ip表 去判别国内国外网站选择性加速 \n2:对某部分程序设置代理、如chrome浏览器 下载个switch代理工具 可以自己设定路由规则也可以通过gfwlist生成相应的ip表\n######总结:ss翻墙 总的来说就是 发起访问--->从本地服务器代理访问、判断是否需要代理--->需要代理的连接远程ssServer 进行代理---->访问gfw之外的内容\n\n","source":"_posts/linux/linux通过ss翻墙.md","raw":"---\ntitle: linux使用ss笔记\ncategories: 笔记\ntags:\n  - linux\nabbrlink: 5624ab1d\ndate: 2017-11-11 00:00:00\n---\n\n由于有个朋友对于在linux上使用ss翻墙不会 特别写个简单的笔记、\n#######基于ubunut17.04、python3、\n####1:安装pip3\n```\nsudo apt install pip3\n```\n####2:通过pip3安装shadowsocks\n```\nsudo pip3 install shadowsocks\n```\n####3:设置shadowsocksServer属性配置\n```\n{\n\t\"server\":\"ss服务器ip\",\n\t\"server_port\":端口,\n\t\"local_address\":\"127.0.0.1\",(本地socks5地址)\n\t\"local_port\":1080,(本地socks5端口)\n\t\"password\":\"ss服务器密码\",\n\t\"timeout\":300,(超时时间 ms),\n\t“method”:\"aes-256-cfb\"(加密方式)尽量选择这个 \n}\n```\n####4:启动本地ss\n```\nsudo sslocal -c 配置文件地址\n```\n####5:设置代理\n这里设置代理有很多方式  先说两种常用的\n1:直接设置整个系统的代理 、通过gfwlist生成ip表 去判别国内国外网站选择性加速 \n2:对某部分程序设置代理、如chrome浏览器 下载个switch代理工具 可以自己设定路由规则也可以通过gfwlist生成相应的ip表\n######总结:ss翻墙 总的来说就是 发起访问--->从本地服务器代理访问、判断是否需要代理--->需要代理的连接远程ssServer 进行代理---->访问gfw之外的内容\n\n","slug":"linux/linux通过ss翻墙","published":1,"updated":"2018-08-17T08:10:03.923Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjo9uaty8002wmwcz82pd3o6z","content":"<p>由于有个朋友对于在linux上使用ss翻墙不会 特别写个简单的笔记、</p><p>#######基于ubunut17.04、python3、</p><p>####1:安装pip3<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt install pip3</span><br></pre></td></tr></table></figure><p></p>\n<p>####2:通过pip3安装shadowsocks<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo pip3 install shadowsocks</span><br></pre></td></tr></table></figure><p></p>\n<p>####3:设置shadowsocksServer属性配置<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\t&quot;server&quot;:&quot;ss服务器ip&quot;,</span><br><span class=\"line\">\t&quot;server_port&quot;:端口,</span><br><span class=\"line\">\t&quot;local_address&quot;:&quot;127.0.0.1&quot;,(本地socks5地址)</span><br><span class=\"line\">\t&quot;local_port&quot;:1080,(本地socks5端口)</span><br><span class=\"line\">\t&quot;password&quot;:&quot;ss服务器密码&quot;,</span><br><span class=\"line\">\t&quot;timeout&quot;:300,(超时时间 ms),</span><br><span class=\"line\">\t“method”:&quot;aes-256-cfb&quot;(加密方式)尽量选择这个 </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p>\n<p>####4:启动本地ss<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo sslocal -c 配置文件地址</span><br></pre></td></tr></table></figure><p></p>\n<p>####5:设置代理<br>这里设置代理有很多方式  先说两种常用的<br>1:直接设置整个系统的代理 、通过gfwlist生成ip表 去判别国内国外网站选择性加速<br>2:对某部分程序设置代理、如chrome浏览器 下载个switch代理工具 可以自己设定路由规则也可以通过gfwlist生成相应的ip表</p>\n<p>######总结:ss翻墙 总的来说就是 发起访问—&gt;从本地服务器代理访问、判断是否需要代理—&gt;需要代理的连接远程ssServer 进行代理—-&gt;访问gfw之外的内容</p>","site":{"data":{}},"excerpt":"","more":"<p>由于有个朋友对于在linux上使用ss翻墙不会 特别写个简单的笔记、</p><p>#######基于ubunut17.04、python3、</p><p>####1:安装pip3<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt install pip3</span><br></pre></td></tr></table></figure><p></p>\n<p>####2:通过pip3安装shadowsocks<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo pip3 install shadowsocks</span><br></pre></td></tr></table></figure><p></p>\n<p>####3:设置shadowsocksServer属性配置<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\t&quot;server&quot;:&quot;ss服务器ip&quot;,</span><br><span class=\"line\">\t&quot;server_port&quot;:端口,</span><br><span class=\"line\">\t&quot;local_address&quot;:&quot;127.0.0.1&quot;,(本地socks5地址)</span><br><span class=\"line\">\t&quot;local_port&quot;:1080,(本地socks5端口)</span><br><span class=\"line\">\t&quot;password&quot;:&quot;ss服务器密码&quot;,</span><br><span class=\"line\">\t&quot;timeout&quot;:300,(超时时间 ms),</span><br><span class=\"line\">\t“method”:&quot;aes-256-cfb&quot;(加密方式)尽量选择这个 </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p>\n<p>####4:启动本地ss<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo sslocal -c 配置文件地址</span><br></pre></td></tr></table></figure><p></p>\n<p>####5:设置代理<br>这里设置代理有很多方式  先说两种常用的<br>1:直接设置整个系统的代理 、通过gfwlist生成ip表 去判别国内国外网站选择性加速<br>2:对某部分程序设置代理、如chrome浏览器 下载个switch代理工具 可以自己设定路由规则也可以通过gfwlist生成相应的ip表</p>\n<p>######总结:ss翻墙 总的来说就是 发起访问—&gt;从本地服务器代理访问、判断是否需要代理—&gt;需要代理的连接远程ssServer 进行代理—-&gt;访问gfw之外的内容</p>"},{"title":"使用docker搭建ssServer","abbrlink":"409db0cf","date":"2017-11-10T16:00:00.000Z","_content":"\n由于gfw的存在 经常需要翻墙 自己手动搭建 ssServer又麻烦  使用docker 使用现成的image简单方便快捷\n######docker只能在3.10以上的内核的linux系统或者差不多版本的其他系统中运行 所以在购买vps的时候要看清楚是什么架构 内核是否支持docker\n######docker 下载ssServer镜像 (无法翻墙的请参考 另一篇笔记 docker使用aliyun加速器)\n···\ndocker pull mritd/shadowsocks\n···\n这个镜像是我认识的一个大佬写的、在dockerhub上也是排名第一的shadowsocksServer容器image\n######启动 ssServer镜像(相关文档地址:https://hub.docker.com/r/mritd/shadowsocks/)\n···\ndocker run -dt --name ss -p 6443:6443 mritd/shadowsocks -s \"-s 0.0.0.0 -p 6443 -m aes-256-cfb -k test123 --fast-open\"\n···\n本地的ssClient设置\nip是你vpsip\n端口 6443 \n加密方式是aes-256-cfb \n密码是test123\n######总结：用已经有的docker容器来做ssServer能够快速的搭建起一个配置好的ssServer 避免自己手工安装配置的繁琐 \n\n感觉这篇要被查水表 ","source":"_posts/linux/使用docker快速搭建ssServer.md","raw":"---\ntitle: 使用docker搭建ssServer\ncategories: 笔记\ntags:\n  - linux\nabbrlink: 409db0cf\ndate: 2017-11-11 00:00:00\n---\n\n由于gfw的存在 经常需要翻墙 自己手动搭建 ssServer又麻烦  使用docker 使用现成的image简单方便快捷\n######docker只能在3.10以上的内核的linux系统或者差不多版本的其他系统中运行 所以在购买vps的时候要看清楚是什么架构 内核是否支持docker\n######docker 下载ssServer镜像 (无法翻墙的请参考 另一篇笔记 docker使用aliyun加速器)\n···\ndocker pull mritd/shadowsocks\n···\n这个镜像是我认识的一个大佬写的、在dockerhub上也是排名第一的shadowsocksServer容器image\n######启动 ssServer镜像(相关文档地址:https://hub.docker.com/r/mritd/shadowsocks/)\n···\ndocker run -dt --name ss -p 6443:6443 mritd/shadowsocks -s \"-s 0.0.0.0 -p 6443 -m aes-256-cfb -k test123 --fast-open\"\n···\n本地的ssClient设置\nip是你vpsip\n端口 6443 \n加密方式是aes-256-cfb \n密码是test123\n######总结：用已经有的docker容器来做ssServer能够快速的搭建起一个配置好的ssServer 避免自己手工安装配置的繁琐 \n\n感觉这篇要被查水表 ","slug":"linux/使用docker快速搭建ssServer","published":1,"updated":"2018-08-17T08:10:03.923Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjo9uaty9002zmwczg8cqx263","content":"<p>由于gfw的存在 经常需要翻墙 自己手动搭建 ssServer又麻烦 使用docker 使用现成的image简单方便快捷</p><p>######docker只能在3.10以上的内核的linux系统或者差不多版本的其他系统中运行 所以在购买vps的时候要看清楚是什么架构 内核是否支持docker</p><p>######docker 下载ssServer镜像 (无法翻墙的请参考 另一篇笔记 docker使用aliyun加速器)<br>···<br>docker pull mritd/shadowsocks<br>···<br>这个镜像是我认识的一个大佬写的、在dockerhub上也是排名第一的shadowsocksServer容器image</p><p>######启动 ssServer镜像(相关文档地址:<a href=\"https://hub.docker.com/r/mritd/shadowsocks/\" target=\"_blank\" rel=\"noopener\">https://hub.docker.com/r/mritd/shadowsocks/</a>)<br>···<br>docker run -dt –name ss -p 6443:6443 mritd/shadowsocks -s “-s 0.0.0.0 -p 6443 -m aes-256-cfb -k test123 –fast-open”<br>···<br>本地的ssClient设置<br>ip是你vpsip<br>端口 6443<br>加密方式是aes-256-cfb<br>密码是test123</p><p>######总结：用已经有的docker容器来做ssServer能够快速的搭建起一个配置好的ssServer 避免自己手工安装配置的繁琐</p><p>感觉这篇要被查水表</p>","site":{"data":{}},"excerpt":"","more":"<p>由于gfw的存在 经常需要翻墙 自己手动搭建 ssServer又麻烦 使用docker 使用现成的image简单方便快捷</p><p>######docker只能在3.10以上的内核的linux系统或者差不多版本的其他系统中运行 所以在购买vps的时候要看清楚是什么架构 内核是否支持docker</p><p>######docker 下载ssServer镜像 (无法翻墙的请参考 另一篇笔记 docker使用aliyun加速器)<br>···<br>docker pull mritd/shadowsocks<br>···<br>这个镜像是我认识的一个大佬写的、在dockerhub上也是排名第一的shadowsocksServer容器image</p><p>######启动 ssServer镜像(相关文档地址:<a href=\"https://hub.docker.com/r/mritd/shadowsocks/\" target=\"_blank\" rel=\"noopener\">https://hub.docker.com/r/mritd/shadowsocks/</a>)<br>···<br>docker run -dt –name ss -p 6443:6443 mritd/shadowsocks -s “-s 0.0.0.0 -p 6443 -m aes-256-cfb -k test123 –fast-open”<br>···<br>本地的ssClient设置<br>ip是你vpsip<br>端口 6443<br>加密方式是aes-256-cfb<br>密码是test123</p><p>######总结：用已经有的docker容器来做ssServer能够快速的搭建起一个配置好的ssServer 避免自己手工安装配置的繁琐</p><p>感觉这篇要被查水表</p>"},{"title":"前端包管理工具npm切换国内源","abbrlink":"3ff0ec3c","date":"2017-11-10T16:00:00.000Z","_content":"\n##在学ng2的时候接触到npm管理包、插件的方式 但是npm默认的源是国外的如果懒的科学上网 又想快速使用 只能使用国内的镜像站点 例如aliyun \n####当安装npm 完成 可以通过如下的方法去修改npm的源 \n####1.通过config命令\nnpm config set registry https://registry.npm.taobao.org \nnpm info underscore （如果上面配置正确这个命令会有字符串response）\n####2.命令行指定\nnpm --registry https://registry.npm.taobao.org info underscore \n####3.编辑 ~/.npmrc 加入下面内容(linux 在你的用户目录下 没有就创建 windows在c盘下)  \nregistry = https://registry.npm.taobao.org\n","source":"_posts/linux/前端包管理工具-npm-切换源(aliyun)方法.md","raw":"---\ntitle: 前端包管理工具npm切换国内源\ncategories: 笔记\ntags:\n  - linux\nabbrlink: 3ff0ec3c\ndate: 2017-11-11 00:00:00\n---\n\n##在学ng2的时候接触到npm管理包、插件的方式 但是npm默认的源是国外的如果懒的科学上网 又想快速使用 只能使用国内的镜像站点 例如aliyun \n####当安装npm 完成 可以通过如下的方法去修改npm的源 \n####1.通过config命令\nnpm config set registry https://registry.npm.taobao.org \nnpm info underscore （如果上面配置正确这个命令会有字符串response）\n####2.命令行指定\nnpm --registry https://registry.npm.taobao.org info underscore \n####3.编辑 ~/.npmrc 加入下面内容(linux 在你的用户目录下 没有就创建 windows在c盘下)  \nregistry = https://registry.npm.taobao.org\n","slug":"linux/前端包管理工具-npm-切换源(aliyun)方法","published":1,"updated":"2018-08-17T08:10:03.923Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjo9uatyb0033mwczdqb2q6hm","content":"<p>##在学ng2的时候接触到npm管理包、插件的方式 但是npm默认的源是国外的如果懒的科学上网 又想快速使用 只能使用国内的镜像站点 例如aliyun</p><p>####当安装npm 完成 可以通过如下的方法去修改npm的源</p><p>####1.通过config命令<br>npm config set registry <a href=\"https://registry.npm.taobao.org\" target=\"_blank\" rel=\"noopener\">https://registry.npm.taobao.org</a><br>npm info underscore （如果上面配置正确这个命令会有字符串response）</p><p>####2.命令行指定<br>npm –registry <a href=\"https://registry.npm.taobao.org\" target=\"_blank\" rel=\"noopener\">https://registry.npm.taobao.org</a> info underscore</p><p>####3.编辑 ~/.npmrc 加入下面内容(linux 在你的用户目录下 没有就创建 windows在c盘下)<br>registry = <a href=\"https://registry.npm.taobao.org\" target=\"_blank\" rel=\"noopener\">https://registry.npm.taobao.org</a></p>","site":{"data":{}},"excerpt":"","more":"<p>##在学ng2的时候接触到npm管理包、插件的方式 但是npm默认的源是国外的如果懒的科学上网 又想快速使用 只能使用国内的镜像站点 例如aliyun</p><p>####当安装npm 完成 可以通过如下的方法去修改npm的源</p><p>####1.通过config命令<br>npm config set registry <a href=\"https://registry.npm.taobao.org\" target=\"_blank\" rel=\"noopener\">https://registry.npm.taobao.org</a><br>npm info underscore （如果上面配置正确这个命令会有字符串response）</p><p>####2.命令行指定<br>npm –registry <a href=\"https://registry.npm.taobao.org\" target=\"_blank\" rel=\"noopener\">https://registry.npm.taobao.org</a> info underscore</p><p>####3.编辑 ~/.npmrc 加入下面内容(linux 在你的用户目录下 没有就创建 windows在c盘下)<br>registry = <a href=\"https://registry.npm.taobao.org\" target=\"_blank\" rel=\"noopener\">https://registry.npm.taobao.org</a></p>"},{"title":"分屏工具tmux使用笔记","abbrlink":"885dd8c4","date":"2018-09-11T16:00:00.000Z","_content":"#### 前言\nlinux中 经常使用 终端 一次打开多个终端 很麻烦 不好用  有个很强悍的工具 tmux  很出名的分屏工具\nubuntu安装\n```\nsudo apt install tmux\n```\n然后 在终端输入\n```\ntmux\n```\n这个时候 终端已经启动tmux  默认是ctrl+b 是快捷键 就是进入tmux切换操作的命令中 例如\n#### 操作   \n\n|作用|指令|备注|    \n|:--|:--|:---|  \n|水平分屏|ctrl+b ---->\"|分屏|  \n|垂直分屏|ctrl+b ---->%|分屏|   \n|分屏切换|ctrl+b ---->方向键|切换|   \n|改变分屏大小|ctrl+b ----->按住方向键|改变大小|   \n|新建窗口|ctrl+b -----> c |新建窗口|   \n|切换窗口|ctrl+b -----> 窗口编号|切换|  \n|暂停终端|ctrl+b -----> d|暂停|  \n|重连终端|tmux ls (查看暂停的终端)  tmux a -t 暂停的终端id |重连|  \n  \n#### 总结 \ntmux 玩linux的 应该没有不懂的吧  就是对终端进行拆分 方便使用的工具  \n","source":"_posts/linux/强大的linux终端分屏工具tmux.md","raw":"---\ntitle: 分屏工具tmux使用笔记\ncategories: 笔记\ntags:\n  - linux\nabbrlink: 885dd8c4\ndate: 2018-09-12 00:00:00\n---\n#### 前言\nlinux中 经常使用 终端 一次打开多个终端 很麻烦 不好用  有个很强悍的工具 tmux  很出名的分屏工具\nubuntu安装\n```\nsudo apt install tmux\n```\n然后 在终端输入\n```\ntmux\n```\n这个时候 终端已经启动tmux  默认是ctrl+b 是快捷键 就是进入tmux切换操作的命令中 例如\n#### 操作   \n\n|作用|指令|备注|    \n|:--|:--|:---|  \n|水平分屏|ctrl+b ---->\"|分屏|  \n|垂直分屏|ctrl+b ---->%|分屏|   \n|分屏切换|ctrl+b ---->方向键|切换|   \n|改变分屏大小|ctrl+b ----->按住方向键|改变大小|   \n|新建窗口|ctrl+b -----> c |新建窗口|   \n|切换窗口|ctrl+b -----> 窗口编号|切换|  \n|暂停终端|ctrl+b -----> d|暂停|  \n|重连终端|tmux ls (查看暂停的终端)  tmux a -t 暂停的终端id |重连|  \n  \n#### 总结 \ntmux 玩linux的 应该没有不懂的吧  就是对终端进行拆分 方便使用的工具  \n","slug":"linux/强大的linux终端分屏工具tmux","published":1,"updated":"2018-09-12T06:19:36.860Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjo9uatyd0036mwczjdmdzaua","content":"<h4 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h4><p>linux中 经常使用 终端 一次打开多个终端 很麻烦 不好用 有个很强悍的工具 tmux 很出名的分屏工具<br>ubuntu安装<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt install tmux</span><br></pre></td></tr></table></figure><p></p>\n<p>然后 在终端输入<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tmux</span><br></pre></td></tr></table></figure><p></p>\n<p>这个时候 终端已经启动tmux  默认是ctrl+b 是快捷键 就是进入tmux切换操作的命令中 例如</p>\n<h4 id=\"操作\"><a href=\"#操作\" class=\"headerlink\" title=\"操作\"></a>操作</h4><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">作用</th>\n<th style=\"text-align:left\">指令</th>\n<th style=\"text-align:left\">备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">水平分屏</td>\n<td style=\"text-align:left\">ctrl+b —-&gt;”</td>\n<td style=\"text-align:left\">分屏</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">垂直分屏</td>\n<td style=\"text-align:left\">ctrl+b —-&gt;%</td>\n<td style=\"text-align:left\">分屏</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">分屏切换</td>\n<td style=\"text-align:left\">ctrl+b —-&gt;方向键</td>\n<td style=\"text-align:left\">切换</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">改变分屏大小</td>\n<td style=\"text-align:left\">ctrl+b —–&gt;按住方向键</td>\n<td style=\"text-align:left\">改变大小</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">新建窗口</td>\n<td style=\"text-align:left\">ctrl+b —–&gt; c</td>\n<td style=\"text-align:left\">新建窗口</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">切换窗口</td>\n<td style=\"text-align:left\">ctrl+b —–&gt; 窗口编号</td>\n<td style=\"text-align:left\">切换</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">暂停终端</td>\n<td style=\"text-align:left\">ctrl+b —–&gt; d</td>\n<td style=\"text-align:left\">暂停</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">重连终端</td>\n<td style=\"text-align:left\">tmux ls (查看暂停的终端)  tmux a -t 暂停的终端id</td>\n<td style=\"text-align:left\">重连</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><p>tmux 玩linux的 应该没有不懂的吧  就是对终端进行拆分 方便使用的工具</p>","site":{"data":{}},"excerpt":"","more":"<h4 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h4><p>linux中 经常使用 终端 一次打开多个终端 很麻烦 不好用 有个很强悍的工具 tmux 很出名的分屏工具<br>ubuntu安装<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt install tmux</span><br></pre></td></tr></table></figure><p></p>\n<p>然后 在终端输入<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tmux</span><br></pre></td></tr></table></figure><p></p>\n<p>这个时候 终端已经启动tmux  默认是ctrl+b 是快捷键 就是进入tmux切换操作的命令中 例如</p>\n<h4 id=\"操作\"><a href=\"#操作\" class=\"headerlink\" title=\"操作\"></a>操作</h4><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">作用</th>\n<th style=\"text-align:left\">指令</th>\n<th style=\"text-align:left\">备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">水平分屏</td>\n<td style=\"text-align:left\">ctrl+b —-&gt;”</td>\n<td style=\"text-align:left\">分屏</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">垂直分屏</td>\n<td style=\"text-align:left\">ctrl+b —-&gt;%</td>\n<td style=\"text-align:left\">分屏</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">分屏切换</td>\n<td style=\"text-align:left\">ctrl+b —-&gt;方向键</td>\n<td style=\"text-align:left\">切换</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">改变分屏大小</td>\n<td style=\"text-align:left\">ctrl+b —–&gt;按住方向键</td>\n<td style=\"text-align:left\">改变大小</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">新建窗口</td>\n<td style=\"text-align:left\">ctrl+b —–&gt; c</td>\n<td style=\"text-align:left\">新建窗口</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">切换窗口</td>\n<td style=\"text-align:left\">ctrl+b —–&gt; 窗口编号</td>\n<td style=\"text-align:left\">切换</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">暂停终端</td>\n<td style=\"text-align:left\">ctrl+b —–&gt; d</td>\n<td style=\"text-align:left\">暂停</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">重连终端</td>\n<td style=\"text-align:left\">tmux ls (查看暂停的终端)  tmux a -t 暂停的终端id</td>\n<td style=\"text-align:left\">重连</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><p>tmux 玩linux的 应该没有不懂的吧  就是对终端进行拆分 方便使用的工具</p>"},{"title":"树莓派组装运行","abbrlink":"4c838b91","date":"2017-11-10T16:00:00.000Z","_content":"\n####自己闲的蛋疼 购买了个树莓派3b 由于不太懂这个 买配件 组装运行起来耗费了好久  特此做个笔记 \n#####树莓派配件组成:\n1:板子:就是生产好的树莓派的电子板\n2:电源:3b版本需要5v 2.5A的电源 如果外接设备多的话要按需增加电源 \n3:sd卡:做系统启动 存储的sd存储卡\n4:散热装备:散热片两个(cpu、gpu)、风扇一个 \n5:外壳:还是需要一个外壳的 不然贼丑\n#####树莓派组装\n1:先把sd卡刷个系统 随便刷 个官方的系统就行\n2:把散热片贴好 。风扇接好 风扇接46脚 红色4(供电) 黑色6  如果想可关闭电风扇或者控温自动控制 需要一个继电器、一个温度感应模块  \n![](http://upload-images.jianshu.io/upload_images/3905525-6dca6ffbe2e0fdac.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n3:插上网线\n4:接上电源 \n5:开机\n需要会自己搭建内网或者扫描设备ip \n然后通过ssh协议连接上树莓派即可\n#####总结:成本大概在300-400左右  其实很不错了 这个价位能有这个配置这个玩法 很满足了 就是有点麻烦什么都要自己折腾 树莓派可以做很多东西 据大佬说 树莓派最终梦想就是自己造一架基于树莓派的无人机\n","source":"_posts/linux/树莓派吃土笔记(一)-组装运行.md","raw":"---\ntitle: 树莓派组装运行\ncategories: 笔记\ntags:\n  - linux\nabbrlink: 4c838b91\ndate: 2017-11-11 00:00:00\n---\n\n####自己闲的蛋疼 购买了个树莓派3b 由于不太懂这个 买配件 组装运行起来耗费了好久  特此做个笔记 \n#####树莓派配件组成:\n1:板子:就是生产好的树莓派的电子板\n2:电源:3b版本需要5v 2.5A的电源 如果外接设备多的话要按需增加电源 \n3:sd卡:做系统启动 存储的sd存储卡\n4:散热装备:散热片两个(cpu、gpu)、风扇一个 \n5:外壳:还是需要一个外壳的 不然贼丑\n#####树莓派组装\n1:先把sd卡刷个系统 随便刷 个官方的系统就行\n2:把散热片贴好 。风扇接好 风扇接46脚 红色4(供电) 黑色6  如果想可关闭电风扇或者控温自动控制 需要一个继电器、一个温度感应模块  \n![](http://upload-images.jianshu.io/upload_images/3905525-6dca6ffbe2e0fdac.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n3:插上网线\n4:接上电源 \n5:开机\n需要会自己搭建内网或者扫描设备ip \n然后通过ssh协议连接上树莓派即可\n#####总结:成本大概在300-400左右  其实很不错了 这个价位能有这个配置这个玩法 很满足了 就是有点麻烦什么都要自己折腾 树莓派可以做很多东西 据大佬说 树莓派最终梦想就是自己造一架基于树莓派的无人机\n","slug":"linux/树莓派吃土笔记(一)-组装运行","published":1,"updated":"2018-08-17T08:10:03.923Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjo9uatye003amwczdsxc6dsr","content":"<p>####自己闲的蛋疼 购买了个树莓派3b 由于不太懂这个 买配件 组装运行起来耗费了好久 特此做个笔记</p><p>#####树莓派配件组成:<br>1:板子:就是生产好的树莓派的电子板<br>2:电源:3b版本需要5v 2.5A的电源 如果外接设备多的话要按需增加电源<br>3:sd卡:做系统启动 存储的sd存储卡<br>4:散热装备:散热片两个(cpu、gpu)、风扇一个<br>5:外壳:还是需要一个外壳的 不然贼丑</p><p>#####树莓派组装<br>1:先把sd卡刷个系统 随便刷 个官方的系统就行<br>2:把散热片贴好 。风扇接好 风扇接46脚 红色4(供电) 黑色6 如果想可关闭电风扇或者控温自动控制 需要一个继电器、一个温度感应模块<br><img src=\"http://upload-images.jianshu.io/upload_images/3905525-6dca6ffbe2e0fdac.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"><br>3:插上网线<br>4:接上电源<br>5:开机<br>需要会自己搭建内网或者扫描设备ip<br>然后通过ssh协议连接上树莓派即可</p><p>#####总结:成本大概在300-400左右 其实很不错了 这个价位能有这个配置这个玩法 很满足了 就是有点麻烦什么都要自己折腾 树莓派可以做很多东西 据大佬说 树莓派最终梦想就是自己造一架基于树莓派的无人机</p>","site":{"data":{}},"excerpt":"","more":"<p>####自己闲的蛋疼 购买了个树莓派3b 由于不太懂这个 买配件 组装运行起来耗费了好久 特此做个笔记</p><p>#####树莓派配件组成:<br>1:板子:就是生产好的树莓派的电子板<br>2:电源:3b版本需要5v 2.5A的电源 如果外接设备多的话要按需增加电源<br>3:sd卡:做系统启动 存储的sd存储卡<br>4:散热装备:散热片两个(cpu、gpu)、风扇一个<br>5:外壳:还是需要一个外壳的 不然贼丑</p><p>#####树莓派组装<br>1:先把sd卡刷个系统 随便刷 个官方的系统就行<br>2:把散热片贴好 。风扇接好 风扇接46脚 红色4(供电) 黑色6 如果想可关闭电风扇或者控温自动控制 需要一个继电器、一个温度感应模块<br><img src=\"http://upload-images.jianshu.io/upload_images/3905525-6dca6ffbe2e0fdac.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"><br>3:插上网线<br>4:接上电源<br>5:开机<br>需要会自己搭建内网或者扫描设备ip<br>然后通过ssh协议连接上树莓派即可</p><p>#####总结:成本大概在300-400左右 其实很不错了 这个价位能有这个配置这个玩法 很满足了 就是有点麻烦什么都要自己折腾 树莓派可以做很多东西 据大佬说 树莓派最终梦想就是自己造一架基于树莓派的无人机</p>"},{"title":"树莓派vnc链接","abbrlink":"52f5e4f0","date":"2017-11-10T16:00:00.000Z","_content":"\n###树莓派开启wifi模块后 想看看树莓派的桌面 然后就开启了vnc服务 玩玩 \n####安装vnc服务\n```\nsudo apt-get install tightvncserver\n```\n####设置vnc链接的密码（最长只能8位 超过的截取前8位）\n```\nvncpasswd\n```\n####添加开机启动\n```\nsudo vim /etc/init.d/vncserver\n```\n内容: \n```\n#!/bin/sh\n#如果不是 pi用户 请 改这里的user  登录的时候 也用这里的user\nexport USER='pi' \neval cd ~$USER\n \ncase \"$1\" in\n  start)\n    # 启动命令行。此处自定义分辨率、控制台号码或其它参数。\n    su $USER -c '/usr/bin/vncserver -depth 16 -geometry 1024x768 :1'\n    echo \"Starting VNC server for $USER \"\n    ;;\n  stop)\n    # 终止命令行。此处控制台号码与启动一致。\n    su $USER -c '/usr/bin/vncserver -kill :1'\n    echo \"vncserver stopped\"\n    ;;\n  *)\n    echo \"Usage: /etc/init.d/vncserver {start|stop}\"\n    exit 1\n    ;;\nesac\nexit 0\n```\n添加执行权限 更新开机启动\n```\nsudo chmod 755 /etc/init.d/vncserver\nsudo update-rc.d vncserver defaults\n```\n###登录 \n通过vnc工具登录 \n账户 pi(脚本中的user)\n密码 设置的vnc密码 不是ssh密码\n\n###多个桌面开启 \n默认是端口:5900  如果第一个窗口推荐在5900+1。。。以此类推 不要用默认的 有坑    \n####总结: vnc链接树莓派的桌面 感觉卡卡的 玛格及\n","source":"_posts/linux/树莓派吃土笔记(三)-vnc桌面链接.md","raw":"---\ntitle: 树莓派vnc链接\ncategories: 笔记\ntags:\n  - linux\nabbrlink: 52f5e4f0\ndate: 2017-11-11 00:00:00\n---\n\n###树莓派开启wifi模块后 想看看树莓派的桌面 然后就开启了vnc服务 玩玩 \n####安装vnc服务\n```\nsudo apt-get install tightvncserver\n```\n####设置vnc链接的密码（最长只能8位 超过的截取前8位）\n```\nvncpasswd\n```\n####添加开机启动\n```\nsudo vim /etc/init.d/vncserver\n```\n内容: \n```\n#!/bin/sh\n#如果不是 pi用户 请 改这里的user  登录的时候 也用这里的user\nexport USER='pi' \neval cd ~$USER\n \ncase \"$1\" in\n  start)\n    # 启动命令行。此处自定义分辨率、控制台号码或其它参数。\n    su $USER -c '/usr/bin/vncserver -depth 16 -geometry 1024x768 :1'\n    echo \"Starting VNC server for $USER \"\n    ;;\n  stop)\n    # 终止命令行。此处控制台号码与启动一致。\n    su $USER -c '/usr/bin/vncserver -kill :1'\n    echo \"vncserver stopped\"\n    ;;\n  *)\n    echo \"Usage: /etc/init.d/vncserver {start|stop}\"\n    exit 1\n    ;;\nesac\nexit 0\n```\n添加执行权限 更新开机启动\n```\nsudo chmod 755 /etc/init.d/vncserver\nsudo update-rc.d vncserver defaults\n```\n###登录 \n通过vnc工具登录 \n账户 pi(脚本中的user)\n密码 设置的vnc密码 不是ssh密码\n\n###多个桌面开启 \n默认是端口:5900  如果第一个窗口推荐在5900+1。。。以此类推 不要用默认的 有坑    \n####总结: vnc链接树莓派的桌面 感觉卡卡的 玛格及\n","slug":"linux/树莓派吃土笔记(三)-vnc桌面链接","published":1,"updated":"2018-08-17T08:10:03.923Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjo9uatyf003dmwcz0rpoahan","content":"<p>###树莓派开启wifi模块后 想看看树莓派的桌面 然后就开启了vnc服务 玩玩</p><p>####安装vnc服务<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install tightvncserver</span><br></pre></td></tr></table></figure><p></p>\n<p>####设置vnc链接的密码（最长只能8位 超过的截取前8位）<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vncpasswd</span><br></pre></td></tr></table></figure><p></p>\n<p>####添加开机启动<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo vim /etc/init.d/vncserver</span><br></pre></td></tr></table></figure><p></p>\n<p>内容:<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/sh</span><br><span class=\"line\">#如果不是 pi用户 请 改这里的user  登录的时候 也用这里的user</span><br><span class=\"line\">export USER=&apos;pi&apos; </span><br><span class=\"line\">eval cd ~$USER</span><br><span class=\"line\"> </span><br><span class=\"line\">case &quot;$1&quot; in</span><br><span class=\"line\">  start)</span><br><span class=\"line\">    # 启动命令行。此处自定义分辨率、控制台号码或其它参数。</span><br><span class=\"line\">    su $USER -c &apos;/usr/bin/vncserver -depth 16 -geometry 1024x768 :1&apos;</span><br><span class=\"line\">    echo &quot;Starting VNC server for $USER &quot;</span><br><span class=\"line\">    ;;</span><br><span class=\"line\">  stop)</span><br><span class=\"line\">    # 终止命令行。此处控制台号码与启动一致。</span><br><span class=\"line\">    su $USER -c &apos;/usr/bin/vncserver -kill :1&apos;</span><br><span class=\"line\">    echo &quot;vncserver stopped&quot;</span><br><span class=\"line\">    ;;</span><br><span class=\"line\">  *)</span><br><span class=\"line\">    echo &quot;Usage: /etc/init.d/vncserver &#123;start|stop&#125;&quot;</span><br><span class=\"line\">    exit 1</span><br><span class=\"line\">    ;;</span><br><span class=\"line\">esac</span><br><span class=\"line\">exit 0</span><br></pre></td></tr></table></figure><p></p>\n<p>添加执行权限 更新开机启动<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo chmod 755 /etc/init.d/vncserver</span><br><span class=\"line\">sudo update-rc.d vncserver defaults</span><br></pre></td></tr></table></figure><p></p>\n<p>###登录<br>通过vnc工具登录<br>账户 pi(脚本中的user)<br>密码 设置的vnc密码 不是ssh密码</p>\n<p>###多个桌面开启<br>默认是端口:5900  如果第一个窗口推荐在5900+1。。。以此类推 不要用默认的 有坑    </p>\n<p>####总结: vnc链接树莓派的桌面 感觉卡卡的 玛格及</p>","site":{"data":{}},"excerpt":"","more":"<p>###树莓派开启wifi模块后 想看看树莓派的桌面 然后就开启了vnc服务 玩玩</p><p>####安装vnc服务<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install tightvncserver</span><br></pre></td></tr></table></figure><p></p>\n<p>####设置vnc链接的密码（最长只能8位 超过的截取前8位）<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vncpasswd</span><br></pre></td></tr></table></figure><p></p>\n<p>####添加开机启动<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo vim /etc/init.d/vncserver</span><br></pre></td></tr></table></figure><p></p>\n<p>内容:<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/sh</span><br><span class=\"line\">#如果不是 pi用户 请 改这里的user  登录的时候 也用这里的user</span><br><span class=\"line\">export USER=&apos;pi&apos; </span><br><span class=\"line\">eval cd ~$USER</span><br><span class=\"line\"> </span><br><span class=\"line\">case &quot;$1&quot; in</span><br><span class=\"line\">  start)</span><br><span class=\"line\">    # 启动命令行。此处自定义分辨率、控制台号码或其它参数。</span><br><span class=\"line\">    su $USER -c &apos;/usr/bin/vncserver -depth 16 -geometry 1024x768 :1&apos;</span><br><span class=\"line\">    echo &quot;Starting VNC server for $USER &quot;</span><br><span class=\"line\">    ;;</span><br><span class=\"line\">  stop)</span><br><span class=\"line\">    # 终止命令行。此处控制台号码与启动一致。</span><br><span class=\"line\">    su $USER -c &apos;/usr/bin/vncserver -kill :1&apos;</span><br><span class=\"line\">    echo &quot;vncserver stopped&quot;</span><br><span class=\"line\">    ;;</span><br><span class=\"line\">  *)</span><br><span class=\"line\">    echo &quot;Usage: /etc/init.d/vncserver &#123;start|stop&#125;&quot;</span><br><span class=\"line\">    exit 1</span><br><span class=\"line\">    ;;</span><br><span class=\"line\">esac</span><br><span class=\"line\">exit 0</span><br></pre></td></tr></table></figure><p></p>\n<p>添加执行权限 更新开机启动<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo chmod 755 /etc/init.d/vncserver</span><br><span class=\"line\">sudo update-rc.d vncserver defaults</span><br></pre></td></tr></table></figure><p></p>\n<p>###登录<br>通过vnc工具登录<br>账户 pi(脚本中的user)<br>密码 设置的vnc密码 不是ssh密码</p>\n<p>###多个桌面开启<br>默认是端口:5900  如果第一个窗口推荐在5900+1。。。以此类推 不要用默认的 有坑    </p>\n<p>####总结: vnc链接树莓派的桌面 感觉卡卡的 玛格及</p>"},{"title":"树莓派链接wifi","abbrlink":"8634a6bb","date":"2017-11-10T16:00:00.000Z","_content":"\n####买回来好久 一直都是被舍友拿去垫电脑去了 今天有时间 拿出来把wifi模块启动起来 以后 就算垫桌子 也能用起来\n#####前提条件\n1:pi能正常启动\n2:能链接pi的shell\n3:pi的版本必须由无线网卡  pi 3b版本 带了无线网卡了\n#####具体操作\n1:登录shell \n2:查看 附近wifi (多个无线网卡的大兄弟 请使用 ifconfig 查看选择一个网卡) 一般一个无线网卡 是wlan0 \n```\nsudo iwlist wlan0 scan\n```\n每一个cell都是一个wifi热点 essid 是名字(中文的wifi名字是显示的\\xSS这种忽略即可 反正设置的时候直接输入中文即可)\n   \n注意:\n如果由中文的wifi热点名字 会转成其他格式的字符串 会出现\\xAs\\xDD....   \n这样的 如果你需要转换成相应的中文 可以尝试用python来转看看\n具体操作如下:\n         打开python控制台\n         输入\n```\n str=b'乱码的字符串'\n print (str.decode('utf-8'))\n```\n          \n  \n  \n3:编辑 wifi模块的配置文件 /etc/wpa_supplicant/wpa_supoplicant.conf\n```\n##设置network中的参数\n    network={  \n        ssid=\"wifi热点名称(中文直接输入 不需要转码)\"  \n        psk=\"wifi密码\"  \n    }  \n```\n4:重启\n```\n#重启\nshutdown -r now \n```\n5:还是先用线链接pi的shell 然后查看 network的信息 \n```\nifconfig\n```\n```\neth0      Link encap:Ethernet  HWaddr b8:27:eb:43:64:4d  \n          UP BROADCAST MULTICAST  MTU:1500  Metric:1\n          RX packets:224 errors:0 dropped:0 overruns:0 frame:0\n          TX packets:166 errors:0 dropped:0 overruns:0 carrier:0\n          collisions:0 txqueuelen:1000 \n          RX bytes:20583 (20.1 KiB)  TX bytes:23454 (22.9 KiB)\n\nlo        Link encap:Local Loopback  \n          inet addr:127.0.0.1  Mask:255.0.0.0\n          inet6 addr: ::1/128 Scope:Host\n          UP LOOPBACK RUNNING  MTU:65536  Metric:1\n          RX packets:136 errors:0 dropped:0 overruns:0 frame:0\n          TX packets:136 errors:0 dropped:0 overruns:0 carrier:0\n          collisions:0 txqueuelen:1 \n          RX bytes:11472 (11.2 KiB)  TX bytes:11472 (11.2 KiB)\n\nwlan0     Link encap:Ethernet  HWaddr b8:27:eb:16:31:18  \n          inet addr:192.168.3.111  Bcast:192.168.3.255  Mask:255.255.255.0\n          inet6 addr: fe80::bd80:706f:310d:a21b/64 Scope:Link\n          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1\n          RX packets:89315 errors:0 dropped:31 overruns:0 frame:0\n          TX packets:63804 errors:0 dropped:0 overruns:0 carrier:0\n          collisions:0 txqueuelen:1000 \n          RX bytes:125457894 (119.6 MiB)  TX bytes:6884073 (6.5 MiB)\n\n```\n无线网卡的ip是 wlan0中的 第二行 inet addr:192.168.3.111\n这个时候可以拔掉网线使用 wlan0中的ip链接pi了 \n####总结:树莓派 3b版本中已经集成了wifi模块 只需要配置wifi热点信息重启就行了\n","source":"_posts/linux/树莓派吃土笔记(二)-启动wifi模块.md","raw":"---\ntitle: 树莓派链接wifi\ncategories: 笔记\ntags:\n  - linux\nabbrlink: 8634a6bb\ndate: 2017-11-11 00:00:00\n---\n\n####买回来好久 一直都是被舍友拿去垫电脑去了 今天有时间 拿出来把wifi模块启动起来 以后 就算垫桌子 也能用起来\n#####前提条件\n1:pi能正常启动\n2:能链接pi的shell\n3:pi的版本必须由无线网卡  pi 3b版本 带了无线网卡了\n#####具体操作\n1:登录shell \n2:查看 附近wifi (多个无线网卡的大兄弟 请使用 ifconfig 查看选择一个网卡) 一般一个无线网卡 是wlan0 \n```\nsudo iwlist wlan0 scan\n```\n每一个cell都是一个wifi热点 essid 是名字(中文的wifi名字是显示的\\xSS这种忽略即可 反正设置的时候直接输入中文即可)\n   \n注意:\n如果由中文的wifi热点名字 会转成其他格式的字符串 会出现\\xAs\\xDD....   \n这样的 如果你需要转换成相应的中文 可以尝试用python来转看看\n具体操作如下:\n         打开python控制台\n         输入\n```\n str=b'乱码的字符串'\n print (str.decode('utf-8'))\n```\n          \n  \n  \n3:编辑 wifi模块的配置文件 /etc/wpa_supplicant/wpa_supoplicant.conf\n```\n##设置network中的参数\n    network={  \n        ssid=\"wifi热点名称(中文直接输入 不需要转码)\"  \n        psk=\"wifi密码\"  \n    }  \n```\n4:重启\n```\n#重启\nshutdown -r now \n```\n5:还是先用线链接pi的shell 然后查看 network的信息 \n```\nifconfig\n```\n```\neth0      Link encap:Ethernet  HWaddr b8:27:eb:43:64:4d  \n          UP BROADCAST MULTICAST  MTU:1500  Metric:1\n          RX packets:224 errors:0 dropped:0 overruns:0 frame:0\n          TX packets:166 errors:0 dropped:0 overruns:0 carrier:0\n          collisions:0 txqueuelen:1000 \n          RX bytes:20583 (20.1 KiB)  TX bytes:23454 (22.9 KiB)\n\nlo        Link encap:Local Loopback  \n          inet addr:127.0.0.1  Mask:255.0.0.0\n          inet6 addr: ::1/128 Scope:Host\n          UP LOOPBACK RUNNING  MTU:65536  Metric:1\n          RX packets:136 errors:0 dropped:0 overruns:0 frame:0\n          TX packets:136 errors:0 dropped:0 overruns:0 carrier:0\n          collisions:0 txqueuelen:1 \n          RX bytes:11472 (11.2 KiB)  TX bytes:11472 (11.2 KiB)\n\nwlan0     Link encap:Ethernet  HWaddr b8:27:eb:16:31:18  \n          inet addr:192.168.3.111  Bcast:192.168.3.255  Mask:255.255.255.0\n          inet6 addr: fe80::bd80:706f:310d:a21b/64 Scope:Link\n          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1\n          RX packets:89315 errors:0 dropped:31 overruns:0 frame:0\n          TX packets:63804 errors:0 dropped:0 overruns:0 carrier:0\n          collisions:0 txqueuelen:1000 \n          RX bytes:125457894 (119.6 MiB)  TX bytes:6884073 (6.5 MiB)\n\n```\n无线网卡的ip是 wlan0中的 第二行 inet addr:192.168.3.111\n这个时候可以拔掉网线使用 wlan0中的ip链接pi了 \n####总结:树莓派 3b版本中已经集成了wifi模块 只需要配置wifi热点信息重启就行了\n","slug":"linux/树莓派吃土笔记(二)-启动wifi模块","published":1,"updated":"2018-08-17T08:10:03.923Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjo9uatyg003hmwcztq03fnw4","content":"<p>####买回来好久 一直都是被舍友拿去垫电脑去了 今天有时间 拿出来把wifi模块启动起来 以后 就算垫桌子 也能用起来</p><p>#####前提条件<br>1:pi能正常启动<br>2:能链接pi的shell<br>3:pi的版本必须由无线网卡 pi 3b版本 带了无线网卡了</p><p>#####具体操作<br>1:登录shell<br>2:查看 附近wifi (多个无线网卡的大兄弟 请使用 ifconfig 查看选择一个网卡) 一般一个无线网卡 是wlan0<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo iwlist wlan0 scan</span><br></pre></td></tr></table></figure><p></p>\n<p>每一个cell都是一个wifi热点 essid 是名字(中文的wifi名字是显示的\\xSS这种忽略即可 反正设置的时候直接输入中文即可)</p>\n<p>注意:<br>如果由中文的wifi热点名字 会转成其他格式的字符串 会出现\\xAs\\xDD….<br>这样的 如果你需要转换成相应的中文 可以尝试用python来转看看<br>具体操作如下:<br>         打开python控制台<br>         输入<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">str=b&apos;乱码的字符串&apos;</span><br><span class=\"line\">print (str.decode(&apos;utf-8&apos;))</span><br></pre></td></tr></table></figure><p></p>\n<p>3:编辑 wifi模块的配置文件 /etc/wpa_supplicant/wpa_supoplicant.conf<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">##设置network中的参数</span><br><span class=\"line\">    network=&#123;  </span><br><span class=\"line\">        ssid=&quot;wifi热点名称(中文直接输入 不需要转码)&quot;  </span><br><span class=\"line\">        psk=&quot;wifi密码&quot;  </span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure><p></p>\n<p>4:重启<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#重启</span><br><span class=\"line\">shutdown -r now</span><br></pre></td></tr></table></figure><p></p>\n<p>5:还是先用线链接pi的shell 然后查看 network的信息<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ifconfig</span><br></pre></td></tr></table></figure><p></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">eth0      Link encap:Ethernet  HWaddr b8:27:eb:43:64:4d  </span><br><span class=\"line\">          UP BROADCAST MULTICAST  MTU:1500  Metric:1</span><br><span class=\"line\">          RX packets:224 errors:0 dropped:0 overruns:0 frame:0</span><br><span class=\"line\">          TX packets:166 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class=\"line\">          collisions:0 txqueuelen:1000 </span><br><span class=\"line\">          RX bytes:20583 (20.1 KiB)  TX bytes:23454 (22.9 KiB)</span><br><span class=\"line\"></span><br><span class=\"line\">lo        Link encap:Local Loopback  </span><br><span class=\"line\">          inet addr:127.0.0.1  Mask:255.0.0.0</span><br><span class=\"line\">          inet6 addr: ::1/128 Scope:Host</span><br><span class=\"line\">          UP LOOPBACK RUNNING  MTU:65536  Metric:1</span><br><span class=\"line\">          RX packets:136 errors:0 dropped:0 overruns:0 frame:0</span><br><span class=\"line\">          TX packets:136 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class=\"line\">          collisions:0 txqueuelen:1 </span><br><span class=\"line\">          RX bytes:11472 (11.2 KiB)  TX bytes:11472 (11.2 KiB)</span><br><span class=\"line\"></span><br><span class=\"line\">wlan0     Link encap:Ethernet  HWaddr b8:27:eb:16:31:18  </span><br><span class=\"line\">          inet addr:192.168.3.111  Bcast:192.168.3.255  Mask:255.255.255.0</span><br><span class=\"line\">          inet6 addr: fe80::bd80:706f:310d:a21b/64 Scope:Link</span><br><span class=\"line\">          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1</span><br><span class=\"line\">          RX packets:89315 errors:0 dropped:31 overruns:0 frame:0</span><br><span class=\"line\">          TX packets:63804 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class=\"line\">          collisions:0 txqueuelen:1000 </span><br><span class=\"line\">          RX bytes:125457894 (119.6 MiB)  TX bytes:6884073 (6.5 MiB)</span><br></pre></td></tr></table></figure>\n<p>无线网卡的ip是 wlan0中的 第二行 inet addr:192.168.3.111<br>这个时候可以拔掉网线使用 wlan0中的ip链接pi了 </p>\n<p>####总结:树莓派 3b版本中已经集成了wifi模块 只需要配置wifi热点信息重启就行了</p>","site":{"data":{}},"excerpt":"","more":"<p>####买回来好久 一直都是被舍友拿去垫电脑去了 今天有时间 拿出来把wifi模块启动起来 以后 就算垫桌子 也能用起来</p><p>#####前提条件<br>1:pi能正常启动<br>2:能链接pi的shell<br>3:pi的版本必须由无线网卡 pi 3b版本 带了无线网卡了</p><p>#####具体操作<br>1:登录shell<br>2:查看 附近wifi (多个无线网卡的大兄弟 请使用 ifconfig 查看选择一个网卡) 一般一个无线网卡 是wlan0<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo iwlist wlan0 scan</span><br></pre></td></tr></table></figure><p></p>\n<p>每一个cell都是一个wifi热点 essid 是名字(中文的wifi名字是显示的\\xSS这种忽略即可 反正设置的时候直接输入中文即可)</p>\n<p>注意:<br>如果由中文的wifi热点名字 会转成其他格式的字符串 会出现\\xAs\\xDD….<br>这样的 如果你需要转换成相应的中文 可以尝试用python来转看看<br>具体操作如下:<br>         打开python控制台<br>         输入<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">str=b&apos;乱码的字符串&apos;</span><br><span class=\"line\">print (str.decode(&apos;utf-8&apos;))</span><br></pre></td></tr></table></figure><p></p>\n<p>3:编辑 wifi模块的配置文件 /etc/wpa_supplicant/wpa_supoplicant.conf<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">##设置network中的参数</span><br><span class=\"line\">    network=&#123;  </span><br><span class=\"line\">        ssid=&quot;wifi热点名称(中文直接输入 不需要转码)&quot;  </span><br><span class=\"line\">        psk=&quot;wifi密码&quot;  </span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure><p></p>\n<p>4:重启<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#重启</span><br><span class=\"line\">shutdown -r now</span><br></pre></td></tr></table></figure><p></p>\n<p>5:还是先用线链接pi的shell 然后查看 network的信息<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ifconfig</span><br></pre></td></tr></table></figure><p></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">eth0      Link encap:Ethernet  HWaddr b8:27:eb:43:64:4d  </span><br><span class=\"line\">          UP BROADCAST MULTICAST  MTU:1500  Metric:1</span><br><span class=\"line\">          RX packets:224 errors:0 dropped:0 overruns:0 frame:0</span><br><span class=\"line\">          TX packets:166 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class=\"line\">          collisions:0 txqueuelen:1000 </span><br><span class=\"line\">          RX bytes:20583 (20.1 KiB)  TX bytes:23454 (22.9 KiB)</span><br><span class=\"line\"></span><br><span class=\"line\">lo        Link encap:Local Loopback  </span><br><span class=\"line\">          inet addr:127.0.0.1  Mask:255.0.0.0</span><br><span class=\"line\">          inet6 addr: ::1/128 Scope:Host</span><br><span class=\"line\">          UP LOOPBACK RUNNING  MTU:65536  Metric:1</span><br><span class=\"line\">          RX packets:136 errors:0 dropped:0 overruns:0 frame:0</span><br><span class=\"line\">          TX packets:136 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class=\"line\">          collisions:0 txqueuelen:1 </span><br><span class=\"line\">          RX bytes:11472 (11.2 KiB)  TX bytes:11472 (11.2 KiB)</span><br><span class=\"line\"></span><br><span class=\"line\">wlan0     Link encap:Ethernet  HWaddr b8:27:eb:16:31:18  </span><br><span class=\"line\">          inet addr:192.168.3.111  Bcast:192.168.3.255  Mask:255.255.255.0</span><br><span class=\"line\">          inet6 addr: fe80::bd80:706f:310d:a21b/64 Scope:Link</span><br><span class=\"line\">          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1</span><br><span class=\"line\">          RX packets:89315 errors:0 dropped:31 overruns:0 frame:0</span><br><span class=\"line\">          TX packets:63804 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class=\"line\">          collisions:0 txqueuelen:1000 </span><br><span class=\"line\">          RX bytes:125457894 (119.6 MiB)  TX bytes:6884073 (6.5 MiB)</span><br></pre></td></tr></table></figure>\n<p>无线网卡的ip是 wlan0中的 第二行 inet addr:192.168.3.111<br>这个时候可以拔掉网线使用 wlan0中的ip链接pi了 </p>\n<p>####总结:树莓派 3b版本中已经集成了wifi模块 只需要配置wifi热点信息重启就行了</p>"},{"title":"eureka-client多网卡配置笔记","comments":1,"abbrlink":"17f39e95","date":"2018-08-23T02:49:21.000Z","_content":"#### 前言\n在使用swarm编排docker的时候  由于swarm 需要暴露端口需要ingress网络 但是 eureka client 注册的时候 不需要使用 ingress这种网络的网卡 \n那么这个时候 就需要配置 eureka client 偏向的网络和排除的网卡之类的配置   \n#### 相关源码解析  \n* InetUtils  获取网络工具类   \n这个工具类主要就是从InetUtilsProperties中的配置中 去查询、指定偏向网络、排除网络等相关功能   \n主要函数:    \n\n|函数名称|函数作用|备注|    \n|:------|:-----|:--|  \n|findFirstNonLoopbackHostInfo|获取第一个非本地回环的主机信息|通过获取第一个非本地回环的网络地址来解析成为需要的hostInfo|  \n|findFirstNonLoopbackAddress|获取第一个非本地回环的网络地址|根据配置的忽略网卡、倾向网络等参数 来选择第一个有效的网卡|  \n|ignoreAddress|是否排除这个地址|配合配置和判断是否本地回环地址来判断|  \n|ignoreInterface|是否排除这个网卡|配合配置来判断是否排除|   \n\n* InetUtilsProperties 获取网络工具类依赖的配置    \n这个类主要就是接收配置文件中的spring.cloud.inetutils前缀的配置 提供给InetUtils使用  \n\n主要配置:   \n\n|配置属性|作用|备注|\n|:------|:--|:---|   \n|defaultHostname|默认主机姓名|默认是localhost|  \n|defaultIpAddress|默认网络地址|默认是127.0.0.1|  \n|timeoutSeconds|超时时间|默认1|  \n|ignoredInterfaces|排除的网卡|接收正则表达式|  \n|useOnlySiteLocalInterfaces|是否启用本地回环网卡|  \n|preferredNetworks|倾向网络ip地址|接收正则表达式、或者前缀匹配|  \n\n* UtilAutoConfiguration InetUtils相关自动配置  \n这个类是为了提供一个InetUtils相关的默认配置   \n默认开启这个配置 但是都是使用的InetUtilsProperties中的默认配置  \n\n#### 配置 \n```\nspring:\n  cloud:\n    inetutils:\n      #默认host 名称\n      default-hostname: xxx\n      # 默认ip地址\n      default-ip-address: 192.168.1.11\n      #超时时间\n      timeout-seconds: 2\n      #排除的网卡\n      ignored-interfaces: eth0\n      #是否读取本地回环网络\n      use-only-site-local-interfaces: false\n      #倾向网络ip地址 可匹配正则 也可以匹配前缀 \n      preferred-networks: 192.168\n```\n#### 总结 \n配置的时候 一定要考虑加载时机  如果是spring cloud 项目 最好配置在bootstrap.yml中  否则可能读取的时候时机错误 导致配置不生效      \neureka client 提供了这些配置 直接看源码  在InetUtils 、InetUtilsProperties 、 UtilAutoConfiguration    \n看看 就知道那些配置可以配置了\n\n","source":"_posts/spring/eureka-client多网卡配置笔记.md","raw":"---\ntitle: eureka-client多网卡配置笔记\ncomments: true\ncategories: 笔记\ntags:\n  - srping cloud\n  - eureka\n  - swarm\n  - docker\nabbrlink: 17f39e95\ndate: 2018-08-23 10:49:21\n---\n#### 前言\n在使用swarm编排docker的时候  由于swarm 需要暴露端口需要ingress网络 但是 eureka client 注册的时候 不需要使用 ingress这种网络的网卡 \n那么这个时候 就需要配置 eureka client 偏向的网络和排除的网卡之类的配置   \n#### 相关源码解析  \n* InetUtils  获取网络工具类   \n这个工具类主要就是从InetUtilsProperties中的配置中 去查询、指定偏向网络、排除网络等相关功能   \n主要函数:    \n\n|函数名称|函数作用|备注|    \n|:------|:-----|:--|  \n|findFirstNonLoopbackHostInfo|获取第一个非本地回环的主机信息|通过获取第一个非本地回环的网络地址来解析成为需要的hostInfo|  \n|findFirstNonLoopbackAddress|获取第一个非本地回环的网络地址|根据配置的忽略网卡、倾向网络等参数 来选择第一个有效的网卡|  \n|ignoreAddress|是否排除这个地址|配合配置和判断是否本地回环地址来判断|  \n|ignoreInterface|是否排除这个网卡|配合配置来判断是否排除|   \n\n* InetUtilsProperties 获取网络工具类依赖的配置    \n这个类主要就是接收配置文件中的spring.cloud.inetutils前缀的配置 提供给InetUtils使用  \n\n主要配置:   \n\n|配置属性|作用|备注|\n|:------|:--|:---|   \n|defaultHostname|默认主机姓名|默认是localhost|  \n|defaultIpAddress|默认网络地址|默认是127.0.0.1|  \n|timeoutSeconds|超时时间|默认1|  \n|ignoredInterfaces|排除的网卡|接收正则表达式|  \n|useOnlySiteLocalInterfaces|是否启用本地回环网卡|  \n|preferredNetworks|倾向网络ip地址|接收正则表达式、或者前缀匹配|  \n\n* UtilAutoConfiguration InetUtils相关自动配置  \n这个类是为了提供一个InetUtils相关的默认配置   \n默认开启这个配置 但是都是使用的InetUtilsProperties中的默认配置  \n\n#### 配置 \n```\nspring:\n  cloud:\n    inetutils:\n      #默认host 名称\n      default-hostname: xxx\n      # 默认ip地址\n      default-ip-address: 192.168.1.11\n      #超时时间\n      timeout-seconds: 2\n      #排除的网卡\n      ignored-interfaces: eth0\n      #是否读取本地回环网络\n      use-only-site-local-interfaces: false\n      #倾向网络ip地址 可匹配正则 也可以匹配前缀 \n      preferred-networks: 192.168\n```\n#### 总结 \n配置的时候 一定要考虑加载时机  如果是spring cloud 项目 最好配置在bootstrap.yml中  否则可能读取的时候时机错误 导致配置不生效      \neureka client 提供了这些配置 直接看源码  在InetUtils 、InetUtilsProperties 、 UtilAutoConfiguration    \n看看 就知道那些配置可以配置了\n\n","slug":"spring/eureka-client多网卡配置笔记","published":1,"updated":"2018-08-23T07:04:15.154Z","layout":"post","photos":[],"link":"","_id":"cjo9uatyi003kmwcz6qit8vck","content":"<h4 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h4><p>在使用swarm编排docker的时候 由于swarm 需要暴露端口需要ingress网络 但是 eureka client 注册的时候 不需要使用 ingress这种网络的网卡<br>那么这个时候 就需要配置 eureka client 偏向的网络和排除的网卡之类的配置</p><h4 id=\"相关源码解析\"><a href=\"#相关源码解析\" class=\"headerlink\" title=\"相关源码解析\"></a>相关源码解析</h4><ul><li>InetUtils 获取网络工具类<br>这个工具类主要就是从InetUtilsProperties中的配置中 去查询、指定偏向网络、排除网络等相关功能<br>主要函数:</li></ul><table><thead><tr><th style=\"text-align:left\">函数名称</th><th style=\"text-align:left\">函数作用</th><th style=\"text-align:left\">备注</th></tr></thead><tbody><tr><td style=\"text-align:left\">findFirstNonLoopbackHostInfo</td><td style=\"text-align:left\">获取第一个非本地回环的主机信息</td><td style=\"text-align:left\">通过获取第一个非本地回环的网络地址来解析成为需要的hostInfo</td></tr><tr><td style=\"text-align:left\">findFirstNonLoopbackAddress</td><td style=\"text-align:left\">获取第一个非本地回环的网络地址</td><td style=\"text-align:left\">根据配置的忽略网卡、倾向网络等参数 来选择第一个有效的网卡</td></tr><tr><td style=\"text-align:left\">ignoreAddress</td><td style=\"text-align:left\">是否排除这个地址</td><td style=\"text-align:left\">配合配置和判断是否本地回环地址来判断</td></tr><tr><td style=\"text-align:left\">ignoreInterface</td><td style=\"text-align:left\">是否排除这个网卡</td><td style=\"text-align:left\">配合配置来判断是否排除</td></tr></tbody></table><ul><li>InetUtilsProperties 获取网络工具类依赖的配置<br>这个类主要就是接收配置文件中的spring.cloud.inetutils前缀的配置 提供给InetUtils使用</li></ul><p>主要配置:</p><table><thead><tr><th style=\"text-align:left\">配置属性</th><th style=\"text-align:left\">作用</th><th style=\"text-align:left\">备注</th></tr></thead><tbody><tr><td style=\"text-align:left\">defaultHostname</td><td style=\"text-align:left\">默认主机姓名</td><td style=\"text-align:left\">默认是localhost</td></tr><tr><td style=\"text-align:left\">defaultIpAddress</td><td style=\"text-align:left\">默认网络地址</td><td style=\"text-align:left\">默认是127.0.0.1</td></tr><tr><td style=\"text-align:left\">timeoutSeconds</td><td style=\"text-align:left\">超时时间</td><td style=\"text-align:left\">默认1</td></tr><tr><td style=\"text-align:left\">ignoredInterfaces</td><td style=\"text-align:left\">排除的网卡</td><td style=\"text-align:left\">接收正则表达式</td></tr><tr><td style=\"text-align:left\">useOnlySiteLocalInterfaces</td><td style=\"text-align:left\">是否启用本地回环网卡</td></tr><tr><td style=\"text-align:left\">preferredNetworks</td><td style=\"text-align:left\">倾向网络ip地址</td><td style=\"text-align:left\">接收正则表达式、或者前缀匹配</td></tr></tbody></table><ul><li>UtilAutoConfiguration InetUtils相关自动配置<br>这个类是为了提供一个InetUtils相关的默认配置<br>默认开启这个配置 但是都是使用的InetUtilsProperties中的默认配置</li></ul><h4 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">spring:</span><br><span class=\"line\">  cloud:</span><br><span class=\"line\">    inetutils:</span><br><span class=\"line\">      #默认host 名称</span><br><span class=\"line\">      default-hostname: xxx</span><br><span class=\"line\">      # 默认ip地址</span><br><span class=\"line\">      default-ip-address: 192.168.1.11</span><br><span class=\"line\">      #超时时间</span><br><span class=\"line\">      timeout-seconds: 2</span><br><span class=\"line\">      #排除的网卡</span><br><span class=\"line\">      ignored-interfaces: eth0</span><br><span class=\"line\">      #是否读取本地回环网络</span><br><span class=\"line\">      use-only-site-local-interfaces: false</span><br><span class=\"line\">      #倾向网络ip地址 可匹配正则 也可以匹配前缀 </span><br><span class=\"line\">      preferred-networks: 192.168</span><br></pre></td></tr></table></figure>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><p>配置的时候 一定要考虑加载时机  如果是spring cloud 项目 最好配置在bootstrap.yml中  否则可能读取的时候时机错误 导致配置不生效<br>eureka client 提供了这些配置 直接看源码  在InetUtils 、InetUtilsProperties 、 UtilAutoConfiguration<br>看看 就知道那些配置可以配置了</p>","site":{"data":{}},"excerpt":"","more":"<h4 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h4><p>在使用swarm编排docker的时候 由于swarm 需要暴露端口需要ingress网络 但是 eureka client 注册的时候 不需要使用 ingress这种网络的网卡<br>那么这个时候 就需要配置 eureka client 偏向的网络和排除的网卡之类的配置</p><h4 id=\"相关源码解析\"><a href=\"#相关源码解析\" class=\"headerlink\" title=\"相关源码解析\"></a>相关源码解析</h4><ul><li>InetUtils 获取网络工具类<br>这个工具类主要就是从InetUtilsProperties中的配置中 去查询、指定偏向网络、排除网络等相关功能<br>主要函数:</li></ul><table><thead><tr><th style=\"text-align:left\">函数名称</th><th style=\"text-align:left\">函数作用</th><th style=\"text-align:left\">备注</th></tr></thead><tbody><tr><td style=\"text-align:left\">findFirstNonLoopbackHostInfo</td><td style=\"text-align:left\">获取第一个非本地回环的主机信息</td><td style=\"text-align:left\">通过获取第一个非本地回环的网络地址来解析成为需要的hostInfo</td></tr><tr><td style=\"text-align:left\">findFirstNonLoopbackAddress</td><td style=\"text-align:left\">获取第一个非本地回环的网络地址</td><td style=\"text-align:left\">根据配置的忽略网卡、倾向网络等参数 来选择第一个有效的网卡</td></tr><tr><td style=\"text-align:left\">ignoreAddress</td><td style=\"text-align:left\">是否排除这个地址</td><td style=\"text-align:left\">配合配置和判断是否本地回环地址来判断</td></tr><tr><td style=\"text-align:left\">ignoreInterface</td><td style=\"text-align:left\">是否排除这个网卡</td><td style=\"text-align:left\">配合配置来判断是否排除</td></tr></tbody></table><ul><li>InetUtilsProperties 获取网络工具类依赖的配置<br>这个类主要就是接收配置文件中的spring.cloud.inetutils前缀的配置 提供给InetUtils使用</li></ul><p>主要配置:</p><table><thead><tr><th style=\"text-align:left\">配置属性</th><th style=\"text-align:left\">作用</th><th style=\"text-align:left\">备注</th></tr></thead><tbody><tr><td style=\"text-align:left\">defaultHostname</td><td style=\"text-align:left\">默认主机姓名</td><td style=\"text-align:left\">默认是localhost</td></tr><tr><td style=\"text-align:left\">defaultIpAddress</td><td style=\"text-align:left\">默认网络地址</td><td style=\"text-align:left\">默认是127.0.0.1</td></tr><tr><td style=\"text-align:left\">timeoutSeconds</td><td style=\"text-align:left\">超时时间</td><td style=\"text-align:left\">默认1</td></tr><tr><td style=\"text-align:left\">ignoredInterfaces</td><td style=\"text-align:left\">排除的网卡</td><td style=\"text-align:left\">接收正则表达式</td></tr><tr><td style=\"text-align:left\">useOnlySiteLocalInterfaces</td><td style=\"text-align:left\">是否启用本地回环网卡</td></tr><tr><td style=\"text-align:left\">preferredNetworks</td><td style=\"text-align:left\">倾向网络ip地址</td><td style=\"text-align:left\">接收正则表达式、或者前缀匹配</td></tr></tbody></table><ul><li>UtilAutoConfiguration InetUtils相关自动配置<br>这个类是为了提供一个InetUtils相关的默认配置<br>默认开启这个配置 但是都是使用的InetUtilsProperties中的默认配置</li></ul><h4 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">spring:</span><br><span class=\"line\">  cloud:</span><br><span class=\"line\">    inetutils:</span><br><span class=\"line\">      #默认host 名称</span><br><span class=\"line\">      default-hostname: xxx</span><br><span class=\"line\">      # 默认ip地址</span><br><span class=\"line\">      default-ip-address: 192.168.1.11</span><br><span class=\"line\">      #超时时间</span><br><span class=\"line\">      timeout-seconds: 2</span><br><span class=\"line\">      #排除的网卡</span><br><span class=\"line\">      ignored-interfaces: eth0</span><br><span class=\"line\">      #是否读取本地回环网络</span><br><span class=\"line\">      use-only-site-local-interfaces: false</span><br><span class=\"line\">      #倾向网络ip地址 可匹配正则 也可以匹配前缀 </span><br><span class=\"line\">      preferred-networks: 192.168</span><br></pre></td></tr></table></figure>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><p>配置的时候 一定要考虑加载时机  如果是spring cloud 项目 最好配置在bootstrap.yml中  否则可能读取的时候时机错误 导致配置不生效<br>eureka client 提供了这些配置 直接看源码  在InetUtils 、InetUtilsProperties 、 UtilAutoConfiguration<br>看看 就知道那些配置可以配置了</p>"},{"title":"spring cloud 总览","abbrlink":"73f341d0","date":"2017-11-10T16:00:00.000Z","_content":"\n公司想切换到spring cloud上所以我找了本书看看 大致上知道了spring cloud的各部分组件 也算是用的比较熟练了\n但是好记性不如烂笔头  所以写一波笔记 防止遗忘\n####目录\n* 综述 \n* 注册中心(eureka、consul、zk)\n* 微服务服务端、客户端(feign)\n* 容错、负载均衡(ribbon、hystrix)\n* 配置中心(config)\n* 网关(zuul)\n* 消息总线(bus、stream)\n* 定时任务调度(qz)\n* 分布式调用链日志(sleuth:基于zipkin的)\n* 搭建个人基于spring cloud 的脚手架遇到的问题\n####综述\nspring cloud 提供一整套分布式微服务的解决方案   \n联系到云原生(cloud native)这个概念   \n我个人觉得 他是把微服务的架构+容器+自动化运维整合到一起提出的概念   \n在基于docker+k8s这样的或者类似的平台下 快速开发、切入到已有的分布式环境中的应用    \n####注册中心 \n在微服务架构中 较为核心的应该就是注册中心了 服务的治理、使用都需要注册中心的协助    \nspring cloud支持比较好的注册中心 大致有三种 eureka、consul、zookeeper   \n这三个 各有各的好 不过现在来说  consul可能功能更加齐全 更加好用一点 这个在后续的详细的笔记详说   \n####微服务的服务端、客户端\n######服务端:\n 这个就是很普通的http接口 莓什么好说的  现在http大部分还是使用1.0。或者1.1 性能说实话一般 不过差不多够用 如果有特殊需求 完全可以选择其他协议    \n例如我北京的有个大佬朋友 他们也是spring cloud +docker +k8s技术栈  他们就要把http协议切换到tcp协议 照样刚       \n但是后续http2.0出来后 我觉得性能差别应该不会太大了 毕竟 http2.0也是基于二进制 还有其它的功能 我比较看好 http2.0   \n######客户端:\n简陋点直接用restTemplate也是可以访问调用的  但是不好管理 而且麻烦 建议使用feign去申明接口即可调用         \n但是这个也有点坑    \n举个例子  在spring mvc 4.3 之后 是提供GetMapping这样的封装RequestMapping的接口  但是feign不支持的 还有其他的坑 到详细的笔记细说\n####容错、负载均衡\n######容错:\nspring cloud 是基于hystrix来做容错的  容错其实就是 发现错误 马上关闭停止对错误的节点的访问、有相应的降级措施情况下 进行服务降级 保证服务的可用\n当然也提供请求缓存、请求合并  turbine也可以基于hystrix、dashboard来进行集群的状态监控 \n######负载均衡:\nspring cloud 是基于ribbon来做客户端负载均衡的  首先 会去注册中心找到注册列表 通过轮寻方式 去负载均衡 当然可以重写负载均衡器(LoadBalancerClient) 也是可以使用其他更加优越的算法的 毕竟spring cloud 只是提供基础实现 \n####配置中心\n国内的话 各个大公司基本都有各自的配置中心的实现 我们公司用的是baidu的disconf 用起来也就那回事吧 不如spring cloud config\nconfig 是使用 git 或者svn  来做配置仓库 这天生站在巨人肩膀上  \nconfig 可以实现集中管理各个集群的配置 而且安全性较高 访问安全、数据的加密解密(对称加密需要替换jre、还支持rsa这种非对称加密)\n还可以通过配合bus组件 进行动态修改集群配置  这一点是很重要的 因为很多参数根据实际情况进行微调是非常需要的\n####网关\n就是统一对访问进行管理的地方 例如鉴权、限制等等\n网关 说实话 如果实力强劲  就不会选择这个来用zuul   \nnginx+lua功能不比这个东西强？\n####消息总线\n说的这么高端其实就是一个mq的使用 bus主要是消息传递  stream主要是发布订阅事件没什么特别的 \nspring cloud bus 或者stream 天然支持 rabbit或者kafka 都差不多吧 看具体情况选择 个人比较倾向rabbit \n####定时任务调度\n定时任务 是每个系统必须的一个模块 \n一般也就三种方式 \n1:基于jdk的timer timerTask方式 这种方式简单粗暴 但是需要自己实现一些复杂的功能\n2:基于spring 的 scheduled task 这个也是不太适合企业级使用 \n3:qz(quartz)功能多 支持集群环境下调度 但是需要数据库支持 不用说 肯定qz的  不然要写死 \n####分布式调用链日志\nsleuth 是基于zipkin的一套分布式调用链跟踪组件\n说起这个  公司的zipkin还是我们组负责的 老大带我们去引入zipkin  搞死人了  \n调用链呢 是跟踪每个请求从发起 到调用各个服务 一直到db操作一整链\n记录这些日志 方便优化、跟踪错误 \n这个到详细笔记细说  这个和业务日志、操作日志是不同的   \n####遇到的问题\n这个说实话还是遇到很多问题的 因为我基于公司已有的架构 使用spirng cloud 从新整合 还是有点坑的 详细笔记再说\n####总结:spring cloud 基本上就这些组件  spring cloud + docker + k8s 这一套可以说是现在做微服务 云原生的标准套路了 \n","source":"_posts/spring/spirng-cloud笔记目录.md","raw":"---\ntitle: spring cloud 总览\ncategories: 笔记\ntags:\n  - spring\nabbrlink: 73f341d0\ndate: 2017-11-11 00:00:00\n---\n\n公司想切换到spring cloud上所以我找了本书看看 大致上知道了spring cloud的各部分组件 也算是用的比较熟练了\n但是好记性不如烂笔头  所以写一波笔记 防止遗忘\n####目录\n* 综述 \n* 注册中心(eureka、consul、zk)\n* 微服务服务端、客户端(feign)\n* 容错、负载均衡(ribbon、hystrix)\n* 配置中心(config)\n* 网关(zuul)\n* 消息总线(bus、stream)\n* 定时任务调度(qz)\n* 分布式调用链日志(sleuth:基于zipkin的)\n* 搭建个人基于spring cloud 的脚手架遇到的问题\n####综述\nspring cloud 提供一整套分布式微服务的解决方案   \n联系到云原生(cloud native)这个概念   \n我个人觉得 他是把微服务的架构+容器+自动化运维整合到一起提出的概念   \n在基于docker+k8s这样的或者类似的平台下 快速开发、切入到已有的分布式环境中的应用    \n####注册中心 \n在微服务架构中 较为核心的应该就是注册中心了 服务的治理、使用都需要注册中心的协助    \nspring cloud支持比较好的注册中心 大致有三种 eureka、consul、zookeeper   \n这三个 各有各的好 不过现在来说  consul可能功能更加齐全 更加好用一点 这个在后续的详细的笔记详说   \n####微服务的服务端、客户端\n######服务端:\n 这个就是很普通的http接口 莓什么好说的  现在http大部分还是使用1.0。或者1.1 性能说实话一般 不过差不多够用 如果有特殊需求 完全可以选择其他协议    \n例如我北京的有个大佬朋友 他们也是spring cloud +docker +k8s技术栈  他们就要把http协议切换到tcp协议 照样刚       \n但是后续http2.0出来后 我觉得性能差别应该不会太大了 毕竟 http2.0也是基于二进制 还有其它的功能 我比较看好 http2.0   \n######客户端:\n简陋点直接用restTemplate也是可以访问调用的  但是不好管理 而且麻烦 建议使用feign去申明接口即可调用         \n但是这个也有点坑    \n举个例子  在spring mvc 4.3 之后 是提供GetMapping这样的封装RequestMapping的接口  但是feign不支持的 还有其他的坑 到详细的笔记细说\n####容错、负载均衡\n######容错:\nspring cloud 是基于hystrix来做容错的  容错其实就是 发现错误 马上关闭停止对错误的节点的访问、有相应的降级措施情况下 进行服务降级 保证服务的可用\n当然也提供请求缓存、请求合并  turbine也可以基于hystrix、dashboard来进行集群的状态监控 \n######负载均衡:\nspring cloud 是基于ribbon来做客户端负载均衡的  首先 会去注册中心找到注册列表 通过轮寻方式 去负载均衡 当然可以重写负载均衡器(LoadBalancerClient) 也是可以使用其他更加优越的算法的 毕竟spring cloud 只是提供基础实现 \n####配置中心\n国内的话 各个大公司基本都有各自的配置中心的实现 我们公司用的是baidu的disconf 用起来也就那回事吧 不如spring cloud config\nconfig 是使用 git 或者svn  来做配置仓库 这天生站在巨人肩膀上  \nconfig 可以实现集中管理各个集群的配置 而且安全性较高 访问安全、数据的加密解密(对称加密需要替换jre、还支持rsa这种非对称加密)\n还可以通过配合bus组件 进行动态修改集群配置  这一点是很重要的 因为很多参数根据实际情况进行微调是非常需要的\n####网关\n就是统一对访问进行管理的地方 例如鉴权、限制等等\n网关 说实话 如果实力强劲  就不会选择这个来用zuul   \nnginx+lua功能不比这个东西强？\n####消息总线\n说的这么高端其实就是一个mq的使用 bus主要是消息传递  stream主要是发布订阅事件没什么特别的 \nspring cloud bus 或者stream 天然支持 rabbit或者kafka 都差不多吧 看具体情况选择 个人比较倾向rabbit \n####定时任务调度\n定时任务 是每个系统必须的一个模块 \n一般也就三种方式 \n1:基于jdk的timer timerTask方式 这种方式简单粗暴 但是需要自己实现一些复杂的功能\n2:基于spring 的 scheduled task 这个也是不太适合企业级使用 \n3:qz(quartz)功能多 支持集群环境下调度 但是需要数据库支持 不用说 肯定qz的  不然要写死 \n####分布式调用链日志\nsleuth 是基于zipkin的一套分布式调用链跟踪组件\n说起这个  公司的zipkin还是我们组负责的 老大带我们去引入zipkin  搞死人了  \n调用链呢 是跟踪每个请求从发起 到调用各个服务 一直到db操作一整链\n记录这些日志 方便优化、跟踪错误 \n这个到详细笔记细说  这个和业务日志、操作日志是不同的   \n####遇到的问题\n这个说实话还是遇到很多问题的 因为我基于公司已有的架构 使用spirng cloud 从新整合 还是有点坑的 详细笔记再说\n####总结:spring cloud 基本上就这些组件  spring cloud + docker + k8s 这一套可以说是现在做微服务 云原生的标准套路了 \n","slug":"spring/spirng-cloud笔记目录","published":1,"updated":"2018-08-17T08:10:03.923Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjo9uatyk003omwczwx8k2th8","content":"<p>公司想切换到spring cloud上所以我找了本书看看 大致上知道了spring cloud的各部分组件 也算是用的比较熟练了<br>但是好记性不如烂笔头 所以写一波笔记 防止遗忘</p><p>####目录</p><ul><li>综述</li><li>注册中心(eureka、consul、zk)</li><li>微服务服务端、客户端(feign)</li><li>容错、负载均衡(ribbon、hystrix)</li><li>配置中心(config)</li><li>网关(zuul)</li><li>消息总线(bus、stream)</li><li>定时任务调度(qz)</li><li>分布式调用链日志(sleuth:基于zipkin的)</li><li>搭建个人基于spring cloud 的脚手架遇到的问题<br>####综述<br>spring cloud 提供一整套分布式微服务的解决方案<br>联系到云原生(cloud native)这个概念<br>我个人觉得 他是把微服务的架构+容器+自动化运维整合到一起提出的概念<br>在基于docker+k8s这样的或者类似的平台下 快速开发、切入到已有的分布式环境中的应用<br>####注册中心<br>在微服务架构中 较为核心的应该就是注册中心了 服务的治理、使用都需要注册中心的协助<br>spring cloud支持比较好的注册中心 大致有三种 eureka、consul、zookeeper<br>这三个 各有各的好 不过现在来说 consul可能功能更加齐全 更加好用一点 这个在后续的详细的笔记详说<br>####微服务的服务端、客户端<br>######服务端:<br>这个就是很普通的http接口 莓什么好说的 现在http大部分还是使用1.0。或者1.1 性能说实话一般 不过差不多够用 如果有特殊需求 完全可以选择其他协议<br>例如我北京的有个大佬朋友 他们也是spring cloud +docker +k8s技术栈 他们就要把http协议切换到tcp协议 照样刚<br>但是后续http2.0出来后 我觉得性能差别应该不会太大了 毕竟 http2.0也是基于二进制 还有其它的功能 我比较看好 http2.0<br>######客户端:<br>简陋点直接用restTemplate也是可以访问调用的 但是不好管理 而且麻烦 建议使用feign去申明接口即可调用<br>但是这个也有点坑<br>举个例子 在spring mvc 4.3 之后 是提供GetMapping这样的封装RequestMapping的接口 但是feign不支持的 还有其他的坑 到详细的笔记细说<br>####容错、负载均衡<br>######容错:<br>spring cloud 是基于hystrix来做容错的 容错其实就是 发现错误 马上关闭停止对错误的节点的访问、有相应的降级措施情况下 进行服务降级 保证服务的可用<br>当然也提供请求缓存、请求合并 turbine也可以基于hystrix、dashboard来进行集群的状态监控<br>######负载均衡:<br>spring cloud 是基于ribbon来做客户端负载均衡的 首先 会去注册中心找到注册列表 通过轮寻方式 去负载均衡 当然可以重写负载均衡器(LoadBalancerClient) 也是可以使用其他更加优越的算法的 毕竟spring cloud 只是提供基础实现<br>####配置中心<br>国内的话 各个大公司基本都有各自的配置中心的实现 我们公司用的是baidu的disconf 用起来也就那回事吧 不如spring cloud config<br>config 是使用 git 或者svn 来做配置仓库 这天生站在巨人肩膀上<br>config 可以实现集中管理各个集群的配置 而且安全性较高 访问安全、数据的加密解密(对称加密需要替换jre、还支持rsa这种非对称加密)<br>还可以通过配合bus组件 进行动态修改集群配置 这一点是很重要的 因为很多参数根据实际情况进行微调是非常需要的<br>####网关<br>就是统一对访问进行管理的地方 例如鉴权、限制等等<br>网关 说实话 如果实力强劲 就不会选择这个来用zuul<br>nginx+lua功能不比这个东西强？<br>####消息总线<br>说的这么高端其实就是一个mq的使用 bus主要是消息传递 stream主要是发布订阅事件没什么特别的<br>spring cloud bus 或者stream 天然支持 rabbit或者kafka 都差不多吧 看具体情况选择 个人比较倾向rabbit<br>####定时任务调度<br>定时任务 是每个系统必须的一个模块<br>一般也就三种方式<br>1:基于jdk的timer timerTask方式 这种方式简单粗暴 但是需要自己实现一些复杂的功能<br>2:基于spring 的 scheduled task 这个也是不太适合企业级使用<br>3:qz(quartz)功能多 支持集群环境下调度 但是需要数据库支持 不用说 肯定qz的 不然要写死<br>####分布式调用链日志<br>sleuth 是基于zipkin的一套分布式调用链跟踪组件<br>说起这个 公司的zipkin还是我们组负责的 老大带我们去引入zipkin 搞死人了<br>调用链呢 是跟踪每个请求从发起 到调用各个服务 一直到db操作一整链<br>记录这些日志 方便优化、跟踪错误<br>这个到详细笔记细说 这个和业务日志、操作日志是不同的<br>####遇到的问题<br>这个说实话还是遇到很多问题的 因为我基于公司已有的架构 使用spirng cloud 从新整合 还是有点坑的 详细笔记再说<br>####总结:spring cloud 基本上就这些组件 spring cloud + docker + k8s 这一套可以说是现在做微服务 云原生的标准套路了</li></ul>","site":{"data":{}},"excerpt":"","more":"<p>公司想切换到spring cloud上所以我找了本书看看 大致上知道了spring cloud的各部分组件 也算是用的比较熟练了<br>但是好记性不如烂笔头 所以写一波笔记 防止遗忘</p><p>####目录</p><ul><li>综述</li><li>注册中心(eureka、consul、zk)</li><li>微服务服务端、客户端(feign)</li><li>容错、负载均衡(ribbon、hystrix)</li><li>配置中心(config)</li><li>网关(zuul)</li><li>消息总线(bus、stream)</li><li>定时任务调度(qz)</li><li>分布式调用链日志(sleuth:基于zipkin的)</li><li>搭建个人基于spring cloud 的脚手架遇到的问题<br>####综述<br>spring cloud 提供一整套分布式微服务的解决方案<br>联系到云原生(cloud native)这个概念<br>我个人觉得 他是把微服务的架构+容器+自动化运维整合到一起提出的概念<br>在基于docker+k8s这样的或者类似的平台下 快速开发、切入到已有的分布式环境中的应用<br>####注册中心<br>在微服务架构中 较为核心的应该就是注册中心了 服务的治理、使用都需要注册中心的协助<br>spring cloud支持比较好的注册中心 大致有三种 eureka、consul、zookeeper<br>这三个 各有各的好 不过现在来说 consul可能功能更加齐全 更加好用一点 这个在后续的详细的笔记详说<br>####微服务的服务端、客户端<br>######服务端:<br>这个就是很普通的http接口 莓什么好说的 现在http大部分还是使用1.0。或者1.1 性能说实话一般 不过差不多够用 如果有特殊需求 完全可以选择其他协议<br>例如我北京的有个大佬朋友 他们也是spring cloud +docker +k8s技术栈 他们就要把http协议切换到tcp协议 照样刚<br>但是后续http2.0出来后 我觉得性能差别应该不会太大了 毕竟 http2.0也是基于二进制 还有其它的功能 我比较看好 http2.0<br>######客户端:<br>简陋点直接用restTemplate也是可以访问调用的 但是不好管理 而且麻烦 建议使用feign去申明接口即可调用<br>但是这个也有点坑<br>举个例子 在spring mvc 4.3 之后 是提供GetMapping这样的封装RequestMapping的接口 但是feign不支持的 还有其他的坑 到详细的笔记细说<br>####容错、负载均衡<br>######容错:<br>spring cloud 是基于hystrix来做容错的 容错其实就是 发现错误 马上关闭停止对错误的节点的访问、有相应的降级措施情况下 进行服务降级 保证服务的可用<br>当然也提供请求缓存、请求合并 turbine也可以基于hystrix、dashboard来进行集群的状态监控<br>######负载均衡:<br>spring cloud 是基于ribbon来做客户端负载均衡的 首先 会去注册中心找到注册列表 通过轮寻方式 去负载均衡 当然可以重写负载均衡器(LoadBalancerClient) 也是可以使用其他更加优越的算法的 毕竟spring cloud 只是提供基础实现<br>####配置中心<br>国内的话 各个大公司基本都有各自的配置中心的实现 我们公司用的是baidu的disconf 用起来也就那回事吧 不如spring cloud config<br>config 是使用 git 或者svn 来做配置仓库 这天生站在巨人肩膀上<br>config 可以实现集中管理各个集群的配置 而且安全性较高 访问安全、数据的加密解密(对称加密需要替换jre、还支持rsa这种非对称加密)<br>还可以通过配合bus组件 进行动态修改集群配置 这一点是很重要的 因为很多参数根据实际情况进行微调是非常需要的<br>####网关<br>就是统一对访问进行管理的地方 例如鉴权、限制等等<br>网关 说实话 如果实力强劲 就不会选择这个来用zuul<br>nginx+lua功能不比这个东西强？<br>####消息总线<br>说的这么高端其实就是一个mq的使用 bus主要是消息传递 stream主要是发布订阅事件没什么特别的<br>spring cloud bus 或者stream 天然支持 rabbit或者kafka 都差不多吧 看具体情况选择 个人比较倾向rabbit<br>####定时任务调度<br>定时任务 是每个系统必须的一个模块<br>一般也就三种方式<br>1:基于jdk的timer timerTask方式 这种方式简单粗暴 但是需要自己实现一些复杂的功能<br>2:基于spring 的 scheduled task 这个也是不太适合企业级使用<br>3:qz(quartz)功能多 支持集群环境下调度 但是需要数据库支持 不用说 肯定qz的 不然要写死<br>####分布式调用链日志<br>sleuth 是基于zipkin的一套分布式调用链跟踪组件<br>说起这个 公司的zipkin还是我们组负责的 老大带我们去引入zipkin 搞死人了<br>调用链呢 是跟踪每个请求从发起 到调用各个服务 一直到db操作一整链<br>记录这些日志 方便优化、跟踪错误<br>这个到详细笔记细说 这个和业务日志、操作日志是不同的<br>####遇到的问题<br>这个说实话还是遇到很多问题的 因为我基于公司已有的架构 使用spirng cloud 从新整合 还是有点坑的 详细笔记再说<br>####总结:spring cloud 基本上就这些组件 spring cloud + docker + k8s 这一套可以说是现在做微服务 云原生的标准套路了</li></ul>"},{"title":"spring bean 加载顺序解决办法","abbrlink":"50d1ed2b","date":"2017-11-10T16:00:00.000Z","_content":"\n在使用SpringBeanManager工具类的时候 发现 spring boot  是根据目录取扫描装配bean 的\n由于我把 这个工具类放在com.ming.core.utils下 导致 这个加载顺序在一些初始化服务之后\n看了一下相关资料 \n有四种解决方法\n* 在配置中调整顺序 \n先加载的 写在最上面  但是呢 我懒的写配置文件\n```\n  <!--bean声明-->\n    <bean class=\"com.ming.core.utils.SpringBeanManager\"/>\n    <bean class=\"com.ming.base.init.SystemInit\" init-method=\"init\" destroy-method=\"destroy\" />\n```\n* 使用@Autowired 注入到所需的服务中\n其实就是跟在配置中写 ref差不多的功能  spring 会解析到这个会依赖springBeanManager 所以会先加载springBeanManager\n这种方式 有点丑 但是可以解决问题\n```\n   @Component\n   public class SystemInit {\n   \n       /**\n        *  使 SpringBeanManager在SystemInit之前初始化\n        *\n        * @author ming\n        * @date 2017-11-09 17:52\n        */\n      @Autowired\n       private SpringBeanManager springBeanManager;\n   \n       @PostConstruct\n       public void init() {\n           //初始化 script job  bean\n           GroovyBeanInit.InitScriptJob();\n       }\n   }\n```\n* 使用DependsOn \n这个是要配置一个或者多个 注册的bean的名称  而不是类的名称\n```\n\n// 等待springBeanManager 装载完毕  初始化本类\n@DependsOn(value = \"springBeanManager\")\n@Component\npublic class SystemInit {\n\n    @PostConstruct\n    public void init() {\n        //初始化 script job  bean\n        GroovyBeanInit.InitScriptJob();\n    }\n}\n```\n* 使用@Order注解\n此方式 在spring boot 中暂时无法使用 等找到相关文档 再看看是什么原因 无法使用 \n####总结：一般来说 对于加载顺序有强烈要求的地方 不是很多 如果有 使用DependsOn 基本能解决了 \n","source":"_posts/spring/spring-bean加载顺序解决办法笔记.md","raw":"---\ntitle: spring bean 加载顺序解决办法\ncategories: 坑\ntags:\n  - spring\nabbrlink: 50d1ed2b\ndate: 2017-11-11 00:00:00\n---\n\n在使用SpringBeanManager工具类的时候 发现 spring boot  是根据目录取扫描装配bean 的\n由于我把 这个工具类放在com.ming.core.utils下 导致 这个加载顺序在一些初始化服务之后\n看了一下相关资料 \n有四种解决方法\n* 在配置中调整顺序 \n先加载的 写在最上面  但是呢 我懒的写配置文件\n```\n  <!--bean声明-->\n    <bean class=\"com.ming.core.utils.SpringBeanManager\"/>\n    <bean class=\"com.ming.base.init.SystemInit\" init-method=\"init\" destroy-method=\"destroy\" />\n```\n* 使用@Autowired 注入到所需的服务中\n其实就是跟在配置中写 ref差不多的功能  spring 会解析到这个会依赖springBeanManager 所以会先加载springBeanManager\n这种方式 有点丑 但是可以解决问题\n```\n   @Component\n   public class SystemInit {\n   \n       /**\n        *  使 SpringBeanManager在SystemInit之前初始化\n        *\n        * @author ming\n        * @date 2017-11-09 17:52\n        */\n      @Autowired\n       private SpringBeanManager springBeanManager;\n   \n       @PostConstruct\n       public void init() {\n           //初始化 script job  bean\n           GroovyBeanInit.InitScriptJob();\n       }\n   }\n```\n* 使用DependsOn \n这个是要配置一个或者多个 注册的bean的名称  而不是类的名称\n```\n\n// 等待springBeanManager 装载完毕  初始化本类\n@DependsOn(value = \"springBeanManager\")\n@Component\npublic class SystemInit {\n\n    @PostConstruct\n    public void init() {\n        //初始化 script job  bean\n        GroovyBeanInit.InitScriptJob();\n    }\n}\n```\n* 使用@Order注解\n此方式 在spring boot 中暂时无法使用 等找到相关文档 再看看是什么原因 无法使用 \n####总结：一般来说 对于加载顺序有强烈要求的地方 不是很多 如果有 使用DependsOn 基本能解决了 \n","slug":"spring/spring-bean加载顺序解决办法笔记","published":1,"updated":"2018-08-17T08:10:03.923Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjo9uatyl003rmwczxbazuaj3","content":"<p>在使用SpringBeanManager工具类的时候 发现 spring boot 是根据目录取扫描装配bean 的<br>由于我把 这个工具类放在com.ming.core.utils下 导致 这个加载顺序在一些初始化服务之后<br>看了一下相关资料<br>有四种解决方法</p><ul><li><p>在配置中调整顺序<br>先加载的 写在最上面 但是呢 我懒的写配置文件</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!--bean声明--&gt;</span><br><span class=\"line\">  &lt;bean class=&quot;com.ming.core.utils.SpringBeanManager&quot;/&gt;</span><br><span class=\"line\">  &lt;bean class=&quot;com.ming.base.init.SystemInit&quot; init-method=&quot;init&quot; destroy-method=&quot;destroy&quot; /&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用@Autowired 注入到所需的服务中<br>其实就是跟在配置中写 ref差不多的功能  spring 会解析到这个会依赖springBeanManager 所以会先加载springBeanManager<br>这种方式 有点丑 但是可以解决问题</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Component</span><br><span class=\"line\">public class SystemInit &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     *  使 SpringBeanManager在SystemInit之前初始化</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @author ming</span><br><span class=\"line\">     * @date 2017-11-09 17:52</span><br><span class=\"line\">     */</span><br><span class=\"line\">   @Autowired</span><br><span class=\"line\">    private SpringBeanManager springBeanManager;</span><br><span class=\"line\"></span><br><span class=\"line\">    @PostConstruct</span><br><span class=\"line\">    public void init() &#123;</span><br><span class=\"line\">        //初始化 script job  bean</span><br><span class=\"line\">        GroovyBeanInit.InitScriptJob();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用DependsOn<br>这个是要配置一个或者多个 注册的bean的名称  而不是类的名称</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">// 等待springBeanManager 装载完毕  初始化本类</span><br><span class=\"line\">@DependsOn(value = &quot;springBeanManager&quot;)</span><br><span class=\"line\">@Component</span><br><span class=\"line\">public class SystemInit &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @PostConstruct</span><br><span class=\"line\">    public void init() &#123;</span><br><span class=\"line\">        //初始化 script job  bean</span><br><span class=\"line\">        GroovyBeanInit.InitScriptJob();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用@Order注解<br>此方式 在spring boot 中暂时无法使用 等找到相关文档 再看看是什么原因 无法使用<br>####总结：一般来说 对于加载顺序有强烈要求的地方 不是很多 如果有 使用DependsOn 基本能解决了</p></li></ul>","site":{"data":{}},"excerpt":"","more":"<p>在使用SpringBeanManager工具类的时候 发现 spring boot 是根据目录取扫描装配bean 的<br>由于我把 这个工具类放在com.ming.core.utils下 导致 这个加载顺序在一些初始化服务之后<br>看了一下相关资料<br>有四种解决方法</p><ul><li><p>在配置中调整顺序<br>先加载的 写在最上面 但是呢 我懒的写配置文件</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!--bean声明--&gt;</span><br><span class=\"line\">  &lt;bean class=&quot;com.ming.core.utils.SpringBeanManager&quot;/&gt;</span><br><span class=\"line\">  &lt;bean class=&quot;com.ming.base.init.SystemInit&quot; init-method=&quot;init&quot; destroy-method=&quot;destroy&quot; /&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用@Autowired 注入到所需的服务中<br>其实就是跟在配置中写 ref差不多的功能  spring 会解析到这个会依赖springBeanManager 所以会先加载springBeanManager<br>这种方式 有点丑 但是可以解决问题</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Component</span><br><span class=\"line\">public class SystemInit &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     *  使 SpringBeanManager在SystemInit之前初始化</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @author ming</span><br><span class=\"line\">     * @date 2017-11-09 17:52</span><br><span class=\"line\">     */</span><br><span class=\"line\">   @Autowired</span><br><span class=\"line\">    private SpringBeanManager springBeanManager;</span><br><span class=\"line\"></span><br><span class=\"line\">    @PostConstruct</span><br><span class=\"line\">    public void init() &#123;</span><br><span class=\"line\">        //初始化 script job  bean</span><br><span class=\"line\">        GroovyBeanInit.InitScriptJob();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用DependsOn<br>这个是要配置一个或者多个 注册的bean的名称  而不是类的名称</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">// 等待springBeanManager 装载完毕  初始化本类</span><br><span class=\"line\">@DependsOn(value = &quot;springBeanManager&quot;)</span><br><span class=\"line\">@Component</span><br><span class=\"line\">public class SystemInit &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @PostConstruct</span><br><span class=\"line\">    public void init() &#123;</span><br><span class=\"line\">        //初始化 script job  bean</span><br><span class=\"line\">        GroovyBeanInit.InitScriptJob();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用@Order注解<br>此方式 在spring boot 中暂时无法使用 等找到相关文档 再看看是什么原因 无法使用<br>####总结：一般来说 对于加载顺序有强烈要求的地方 不是很多 如果有 使用DependsOn 基本能解决了</p></li></ul>"},{"title":"spring boot  监控模块 actuator笔记","abbrlink":"1a1c1aa1","date":"2017-11-10T16:00:00.000Z","_content":"###actuator 是spring boot 提供的一个监控的工具  \n直接访问 相应端点(rest 接口)   \n端点分为三种:  \n* 应用配置类  \n/autoconfig 获取应用的自动配置相关参数  \n/beans  获取应用的所有bean   \n/configprops 应用中配置的属性信息  设置enabled = false 关闭这个端点  \n/env  获取应用可以用的环境信息   \n/mappings 返回 mvc控制器 映射关系 也就是接口的信息   \n/info 返回自定义信息 设置 info.app.name=ming  info返回ming  \n* 度量指标类  \n/metrics 返回各类重要的度量指标  内存、线程、垃圾回收信息  通过使用 counterServices 来自定义 信息 \n/metrics/{name} 获取指定的信息 \n/health 获取各类健康的指标 磁盘、数据库链接是否可以用、rabbit、solr、redis是否可用\n/dump 项目线程信息\n/trace  返回基本http跟踪 保留100条\n* 操作控制类\n/shutdown 关闭应用   post请求 需要设定开启endpoints.shutdown.enabled: true\n\n","source":"_posts/spring/spring-boot-actuator笔记.md","raw":"---\ntitle: spring boot  监控模块 actuator笔记\ncategories: 笔记\ntags:\n  - spring\nabbrlink: 1a1c1aa1\ndate: 2017-11-11 00:00:00\n---\n###actuator 是spring boot 提供的一个监控的工具  \n直接访问 相应端点(rest 接口)   \n端点分为三种:  \n* 应用配置类  \n/autoconfig 获取应用的自动配置相关参数  \n/beans  获取应用的所有bean   \n/configprops 应用中配置的属性信息  设置enabled = false 关闭这个端点  \n/env  获取应用可以用的环境信息   \n/mappings 返回 mvc控制器 映射关系 也就是接口的信息   \n/info 返回自定义信息 设置 info.app.name=ming  info返回ming  \n* 度量指标类  \n/metrics 返回各类重要的度量指标  内存、线程、垃圾回收信息  通过使用 counterServices 来自定义 信息 \n/metrics/{name} 获取指定的信息 \n/health 获取各类健康的指标 磁盘、数据库链接是否可以用、rabbit、solr、redis是否可用\n/dump 项目线程信息\n/trace  返回基本http跟踪 保留100条\n* 操作控制类\n/shutdown 关闭应用   post请求 需要设定开启endpoints.shutdown.enabled: true\n\n","slug":"spring/spring-boot-actuator笔记","published":1,"updated":"2018-08-17T08:10:03.923Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjo9uatym003umwczflha7l6r","content":"<p>###actuator 是spring boot 提供的一个监控的工具<br>直接访问 相应端点(rest 接口)<br>端点分为三种:</p><ul><li>应用配置类<br>/autoconfig 获取应用的自动配置相关参数<br>/beans 获取应用的所有bean<br>/configprops 应用中配置的属性信息 设置enabled = false 关闭这个端点<br>/env 获取应用可以用的环境信息<br>/mappings 返回 mvc控制器 映射关系 也就是接口的信息<br>/info 返回自定义信息 设置 info.app.name=ming info返回ming</li><li>度量指标类<br>/metrics 返回各类重要的度量指标 内存、线程、垃圾回收信息 通过使用 counterServices 来自定义 信息<br>/metrics/{name} 获取指定的信息<br>/health 获取各类健康的指标 磁盘、数据库链接是否可以用、rabbit、solr、redis是否可用<br>/dump 项目线程信息<br>/trace 返回基本http跟踪 保留100条</li><li>操作控制类<br>/shutdown 关闭应用 post请求 需要设定开启endpoints.shutdown.enabled: true</li></ul>","site":{"data":{}},"excerpt":"","more":"<p>###actuator 是spring boot 提供的一个监控的工具<br>直接访问 相应端点(rest 接口)<br>端点分为三种:</p><ul><li>应用配置类<br>/autoconfig 获取应用的自动配置相关参数<br>/beans 获取应用的所有bean<br>/configprops 应用中配置的属性信息 设置enabled = false 关闭这个端点<br>/env 获取应用可以用的环境信息<br>/mappings 返回 mvc控制器 映射关系 也就是接口的信息<br>/info 返回自定义信息 设置 info.app.name=ming info返回ming</li><li>度量指标类<br>/metrics 返回各类重要的度量指标 内存、线程、垃圾回收信息 通过使用 counterServices 来自定义 信息<br>/metrics/{name} 获取指定的信息<br>/health 获取各类健康的指标 磁盘、数据库链接是否可以用、rabbit、solr、redis是否可用<br>/dump 项目线程信息<br>/trace 返回基本http跟踪 保留100条</li><li>操作控制类<br>/shutdown 关闭应用 post请求 需要设定开启endpoints.shutdown.enabled: true</li></ul>"},{"title":"spring-boot定时器Schedule模块笔记","comments":1,"abbrlink":"93aa77f","date":"2018-11-09T01:54:05.000Z","_content":"#### 前言\n系统中 定时任务肯定会有 根据项目大小 去正确的选择定时器的相关实现 是非常有必要的\n在大型项目中 一般会选择 quartz、elastic job之类的分布式定时框架 或者基于一些环境上的定时功能去实现 如k8s的定时任务、linux系统的cron、timer之类的功能 \n但是在一些单体应用中 对定时任务有需求 但是不需要这么强大的功能的时候 一般会选择 基于jdk的相关功能去实现定时器 \n或者选择 spring 全家桶中的 schedule模块来实现定时器功能 \n\n#### 相关注解说明\n和spring schedule 模块相关的注解 在 org.springframework.scheduling.annotation下 \n##### EnableScheduling\n* 作用 \n标记在启动类上 表示 开启spring schedule功能\n\n##### Scheduled\n* 作用 \n标记一个函数 并且按照参数去定时调用这个函数 \n* 参数\n\n|名称|作用|备注|\n|:---|:--|:--|\n|cron|使用cron表达式定时执行标记的函数| linux标准格式的cron表达式 |\n|zone|配合cron使用配置时区信息|默认为\"\" 将使用服务器时区||\n|fixedDelay|指定固定时长周期执行任务|单位ms 默认 -1 当上一个任务结束开始计算间隔时间  |\n|fixedDelayString|指定固定时长周期执行任务 字符串格式|作用跟fixedDelay差不多|\n|fixedRate|指定固定时长周期执行|单位ms 默认 -1 当上一个任务开始就开始计算时间间隔|\n|fixedRateString|指定固定时长周期执行 字符串格式|作用跟fixedRate差不多 也是从上一个任务开始就开始计算时间间隔|\n|initialDelay|设定在第一次执行前延迟的ms时间|单位ms 默认-1|\n|initialDelayString|设定在第一次执行前延迟的ms时间 字符串格式|作用和initialDelay 一样|\n\n* 注意   \ncron和zone 参数配合使用    \nfixedDelay 和fixedRate 要区分是从哪里开始计算时间间隔 例如任务需要在上一个任务执行完成之后间隔n秒执行 就选择fixedDelay 如果是在上一个任务一开始启动间隔n秒再次启动第二个任务那么就要用fixedRate   \n有些任务可能需要等待项目启动后延迟执行 那么通过initialDelay 配置 第一次执行间隔即可   \n\n##### Schedules\n* 作用\n标记一个函数 内部可以配置多个@Scheduled注解 让这个函数使用多种调度策略\n* 参数\nvalue @Scheduled[]  \n* 使用实例 \n```\n  @Schedules(value = {@Scheduled(fixedDelay = 10000),@Scheduled(fixedDelay = 13000)})\n    public void test(){\n        System.out.println(\"----------------------\");\n        System.out.println(System.currentTimeMillis());\n    }\n```\n#### 实例\n##### 检查依赖\nspring boot 项目中 只要引入的 spring-boot-starter-web 就可以类\n```\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n        </dependency>\n```\n##### 启动类添加注解 \n在spring boot 的启动类上 加上@EnableScheduling 表示启动schedule模块 \n```\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.scheduling.annotation.EnableScheduling;\n\n/**\n * 启动类\n * @author ming\n * @date 2018-09-25 15:41:31\n */\n@SpringBootApplication\n@EnableScheduling\npublic class Start {\n\n    public static void main(String[] args) {\n        SpringApplication.run(Start.class, args);\n    }\n}\n\n```\n##### 编写定时器类 \n将class注册为spring bean  使用@Scheduled注解 标明改任务执行时间策略\n```\n\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.scheduling.annotation.Scheduled;\nimport org.springframework.stereotype.Component;\n\n/**\n * 测试任务\n *\n * @author ming\n * @date 2018-11-09 10:25:09\n */\n@Component\n@Slf4j\npublic class TestJob {\n\n    @Scheduled(fixedRate = 1000)\n    public void test() {\n        System.out.println(\"测试schedule模块定时器。。。。。\");\n    }\n}\n\n```\n\n#### 总结\nspring 的schedule模块 功能是挺简单的\n这种简单的任务 又不需要异步执行 而且任务又不是很耗时的 可以用spring 的schedule模块实现 \n这个模块还支持 异步执行定时任务等等功能 但是不推荐用 因为你需要这种异步执行的任务的时候 更多的时候 选择更加完善的定时器技术比较好 \n例如 quartz 、elastic job这种 毕竟异步执行需要考虑的地方更多 例如并发、任务分片等等问题\n\n","source":"_posts/spring/spring-boot定时器Schedule模块笔记.md","raw":"---\ntitle: spring-boot定时器Schedule模块笔记\ncomments: true\ncategories: 笔记\ntags:\n  - spring boot\n  - 定时器\nabbrlink: 93aa77f\ndate: 2018-11-09 09:54:05\n---\n#### 前言\n系统中 定时任务肯定会有 根据项目大小 去正确的选择定时器的相关实现 是非常有必要的\n在大型项目中 一般会选择 quartz、elastic job之类的分布式定时框架 或者基于一些环境上的定时功能去实现 如k8s的定时任务、linux系统的cron、timer之类的功能 \n但是在一些单体应用中 对定时任务有需求 但是不需要这么强大的功能的时候 一般会选择 基于jdk的相关功能去实现定时器 \n或者选择 spring 全家桶中的 schedule模块来实现定时器功能 \n\n#### 相关注解说明\n和spring schedule 模块相关的注解 在 org.springframework.scheduling.annotation下 \n##### EnableScheduling\n* 作用 \n标记在启动类上 表示 开启spring schedule功能\n\n##### Scheduled\n* 作用 \n标记一个函数 并且按照参数去定时调用这个函数 \n* 参数\n\n|名称|作用|备注|\n|:---|:--|:--|\n|cron|使用cron表达式定时执行标记的函数| linux标准格式的cron表达式 |\n|zone|配合cron使用配置时区信息|默认为\"\" 将使用服务器时区||\n|fixedDelay|指定固定时长周期执行任务|单位ms 默认 -1 当上一个任务结束开始计算间隔时间  |\n|fixedDelayString|指定固定时长周期执行任务 字符串格式|作用跟fixedDelay差不多|\n|fixedRate|指定固定时长周期执行|单位ms 默认 -1 当上一个任务开始就开始计算时间间隔|\n|fixedRateString|指定固定时长周期执行 字符串格式|作用跟fixedRate差不多 也是从上一个任务开始就开始计算时间间隔|\n|initialDelay|设定在第一次执行前延迟的ms时间|单位ms 默认-1|\n|initialDelayString|设定在第一次执行前延迟的ms时间 字符串格式|作用和initialDelay 一样|\n\n* 注意   \ncron和zone 参数配合使用    \nfixedDelay 和fixedRate 要区分是从哪里开始计算时间间隔 例如任务需要在上一个任务执行完成之后间隔n秒执行 就选择fixedDelay 如果是在上一个任务一开始启动间隔n秒再次启动第二个任务那么就要用fixedRate   \n有些任务可能需要等待项目启动后延迟执行 那么通过initialDelay 配置 第一次执行间隔即可   \n\n##### Schedules\n* 作用\n标记一个函数 内部可以配置多个@Scheduled注解 让这个函数使用多种调度策略\n* 参数\nvalue @Scheduled[]  \n* 使用实例 \n```\n  @Schedules(value = {@Scheduled(fixedDelay = 10000),@Scheduled(fixedDelay = 13000)})\n    public void test(){\n        System.out.println(\"----------------------\");\n        System.out.println(System.currentTimeMillis());\n    }\n```\n#### 实例\n##### 检查依赖\nspring boot 项目中 只要引入的 spring-boot-starter-web 就可以类\n```\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n        </dependency>\n```\n##### 启动类添加注解 \n在spring boot 的启动类上 加上@EnableScheduling 表示启动schedule模块 \n```\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.scheduling.annotation.EnableScheduling;\n\n/**\n * 启动类\n * @author ming\n * @date 2018-09-25 15:41:31\n */\n@SpringBootApplication\n@EnableScheduling\npublic class Start {\n\n    public static void main(String[] args) {\n        SpringApplication.run(Start.class, args);\n    }\n}\n\n```\n##### 编写定时器类 \n将class注册为spring bean  使用@Scheduled注解 标明改任务执行时间策略\n```\n\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.scheduling.annotation.Scheduled;\nimport org.springframework.stereotype.Component;\n\n/**\n * 测试任务\n *\n * @author ming\n * @date 2018-11-09 10:25:09\n */\n@Component\n@Slf4j\npublic class TestJob {\n\n    @Scheduled(fixedRate = 1000)\n    public void test() {\n        System.out.println(\"测试schedule模块定时器。。。。。\");\n    }\n}\n\n```\n\n#### 总结\nspring 的schedule模块 功能是挺简单的\n这种简单的任务 又不需要异步执行 而且任务又不是很耗时的 可以用spring 的schedule模块实现 \n这个模块还支持 异步执行定时任务等等功能 但是不推荐用 因为你需要这种异步执行的任务的时候 更多的时候 选择更加完善的定时器技术比较好 \n例如 quartz 、elastic job这种 毕竟异步执行需要考虑的地方更多 例如并发、任务分片等等问题\n\n","slug":"spring/spring-boot定时器Schedule模块笔记","published":1,"updated":"2018-11-09T08:36:40.019Z","layout":"post","photos":[],"link":"","_id":"cjo9uatyp003ymwcz296cwwu2","content":"<h4 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h4><p>系统中 定时任务肯定会有 根据项目大小 去正确的选择定时器的相关实现 是非常有必要的<br>在大型项目中 一般会选择 quartz、elastic job之类的分布式定时框架 或者基于一些环境上的定时功能去实现 如k8s的定时任务、linux系统的cron、timer之类的功能<br>但是在一些单体应用中 对定时任务有需求 但是不需要这么强大的功能的时候 一般会选择 基于jdk的相关功能去实现定时器<br>或者选择 spring 全家桶中的 schedule模块来实现定时器功能</p><h4 id=\"相关注解说明\"><a href=\"#相关注解说明\" class=\"headerlink\" title=\"相关注解说明\"></a>相关注解说明</h4><p>和spring schedule 模块相关的注解 在 org.springframework.scheduling.annotation下</p><h5 id=\"EnableScheduling\"><a href=\"#EnableScheduling\" class=\"headerlink\" title=\"EnableScheduling\"></a>EnableScheduling</h5><ul><li>作用<br>标记在启动类上 表示 开启spring schedule功能</li></ul><h5 id=\"Scheduled\"><a href=\"#Scheduled\" class=\"headerlink\" title=\"Scheduled\"></a>Scheduled</h5><ul><li>作用<br>标记一个函数 并且按照参数去定时调用这个函数</li><li>参数</li></ul><table><thead><tr><th style=\"text-align:left\">名称</th><th style=\"text-align:left\">作用</th><th style=\"text-align:left\">备注</th></tr></thead><tbody><tr><td style=\"text-align:left\">cron</td><td style=\"text-align:left\">使用cron表达式定时执行标记的函数</td><td style=\"text-align:left\">linux标准格式的cron表达式</td></tr><tr><td style=\"text-align:left\">zone</td><td style=\"text-align:left\">配合cron使用配置时区信息</td><td style=\"text-align:left\">默认为”” 将使用服务器时区</td><td></td></tr><tr><td style=\"text-align:left\">fixedDelay</td><td style=\"text-align:left\">指定固定时长周期执行任务</td><td style=\"text-align:left\">单位ms 默认 -1 当上一个任务结束开始计算间隔时间</td></tr><tr><td style=\"text-align:left\">fixedDelayString</td><td style=\"text-align:left\">指定固定时长周期执行任务 字符串格式</td><td style=\"text-align:left\">作用跟fixedDelay差不多</td></tr><tr><td style=\"text-align:left\">fixedRate</td><td style=\"text-align:left\">指定固定时长周期执行</td><td style=\"text-align:left\">单位ms 默认 -1 当上一个任务开始就开始计算时间间隔</td></tr><tr><td style=\"text-align:left\">fixedRateString</td><td style=\"text-align:left\">指定固定时长周期执行 字符串格式</td><td style=\"text-align:left\">作用跟fixedRate差不多 也是从上一个任务开始就开始计算时间间隔</td></tr><tr><td style=\"text-align:left\">initialDelay</td><td style=\"text-align:left\">设定在第一次执行前延迟的ms时间</td><td style=\"text-align:left\">单位ms 默认-1</td></tr><tr><td style=\"text-align:left\">initialDelayString</td><td style=\"text-align:left\">设定在第一次执行前延迟的ms时间 字符串格式</td><td style=\"text-align:left\">作用和initialDelay 一样</td></tr></tbody></table><ul><li>注意<br>cron和zone 参数配合使用<br>fixedDelay 和fixedRate 要区分是从哪里开始计算时间间隔 例如任务需要在上一个任务执行完成之后间隔n秒执行 就选择fixedDelay 如果是在上一个任务一开始启动间隔n秒再次启动第二个任务那么就要用fixedRate<br>有些任务可能需要等待项目启动后延迟执行 那么通过initialDelay 配置 第一次执行间隔即可</li></ul><h5 id=\"Schedules\"><a href=\"#Schedules\" class=\"headerlink\" title=\"Schedules\"></a>Schedules</h5><ul><li>作用<br>标记一个函数 内部可以配置多个@Scheduled注解 让这个函数使用多种调度策略</li><li>参数<br>value @Scheduled[]</li><li>使用实例<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Schedules(value = &#123;@Scheduled(fixedDelay = 10000),@Scheduled(fixedDelay = 13000)&#125;)</span><br><span class=\"line\">  public void test()&#123;</span><br><span class=\"line\">      System.out.println(&quot;----------------------&quot;);</span><br><span class=\"line\">      System.out.println(System.currentTimeMillis());</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h4><h5 id=\"检查依赖\"><a href=\"#检查依赖\" class=\"headerlink\" title=\"检查依赖\"></a>检查依赖</h5><p>spring boot 项目中 只要引入的 spring-boot-starter-web 就可以类<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p></p>\n<h5 id=\"启动类添加注解\"><a href=\"#启动类添加注解\" class=\"headerlink\" title=\"启动类添加注解\"></a>启动类添加注解</h5><p>在spring boot 的启动类上 加上@EnableScheduling 表示启动schedule模块<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">import org.springframework.boot.SpringApplication;</span><br><span class=\"line\">import org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class=\"line\">import org.springframework.scheduling.annotation.EnableScheduling;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 启动类</span><br><span class=\"line\"> * @author ming</span><br><span class=\"line\"> * @date 2018-09-25 15:41:31</span><br><span class=\"line\"> */</span><br><span class=\"line\">@SpringBootApplication</span><br><span class=\"line\">@EnableScheduling</span><br><span class=\"line\">public class Start &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        SpringApplication.run(Start.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p>\n<h5 id=\"编写定时器类\"><a href=\"#编写定时器类\" class=\"headerlink\" title=\"编写定时器类\"></a>编写定时器类</h5><p>将class注册为spring bean  使用@Scheduled注解 标明改任务执行时间策略<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">import lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\">import org.springframework.scheduling.annotation.Scheduled;</span><br><span class=\"line\">import org.springframework.stereotype.Component;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 测试任务</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @author ming</span><br><span class=\"line\"> * @date 2018-11-09 10:25:09</span><br><span class=\"line\"> */</span><br><span class=\"line\">@Component</span><br><span class=\"line\">@Slf4j</span><br><span class=\"line\">public class TestJob &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Scheduled(fixedRate = 1000)</span><br><span class=\"line\">    public void test() &#123;</span><br><span class=\"line\">        System.out.println(&quot;测试schedule模块定时器。。。。。&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><p>spring 的schedule模块 功能是挺简单的<br>这种简单的任务 又不需要异步执行 而且任务又不是很耗时的 可以用spring 的schedule模块实现<br>这个模块还支持 异步执行定时任务等等功能 但是不推荐用 因为你需要这种异步执行的任务的时候 更多的时候 选择更加完善的定时器技术比较好<br>例如 quartz 、elastic job这种 毕竟异步执行需要考虑的地方更多 例如并发、任务分片等等问题</p>","site":{"data":{}},"excerpt":"","more":"<h4 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h4><p>系统中 定时任务肯定会有 根据项目大小 去正确的选择定时器的相关实现 是非常有必要的<br>在大型项目中 一般会选择 quartz、elastic job之类的分布式定时框架 或者基于一些环境上的定时功能去实现 如k8s的定时任务、linux系统的cron、timer之类的功能<br>但是在一些单体应用中 对定时任务有需求 但是不需要这么强大的功能的时候 一般会选择 基于jdk的相关功能去实现定时器<br>或者选择 spring 全家桶中的 schedule模块来实现定时器功能</p><h4 id=\"相关注解说明\"><a href=\"#相关注解说明\" class=\"headerlink\" title=\"相关注解说明\"></a>相关注解说明</h4><p>和spring schedule 模块相关的注解 在 org.springframework.scheduling.annotation下</p><h5 id=\"EnableScheduling\"><a href=\"#EnableScheduling\" class=\"headerlink\" title=\"EnableScheduling\"></a>EnableScheduling</h5><ul><li>作用<br>标记在启动类上 表示 开启spring schedule功能</li></ul><h5 id=\"Scheduled\"><a href=\"#Scheduled\" class=\"headerlink\" title=\"Scheduled\"></a>Scheduled</h5><ul><li>作用<br>标记一个函数 并且按照参数去定时调用这个函数</li><li>参数</li></ul><table><thead><tr><th style=\"text-align:left\">名称</th><th style=\"text-align:left\">作用</th><th style=\"text-align:left\">备注</th></tr></thead><tbody><tr><td style=\"text-align:left\">cron</td><td style=\"text-align:left\">使用cron表达式定时执行标记的函数</td><td style=\"text-align:left\">linux标准格式的cron表达式</td></tr><tr><td style=\"text-align:left\">zone</td><td style=\"text-align:left\">配合cron使用配置时区信息</td><td style=\"text-align:left\">默认为”” 将使用服务器时区</td><td></td></tr><tr><td style=\"text-align:left\">fixedDelay</td><td style=\"text-align:left\">指定固定时长周期执行任务</td><td style=\"text-align:left\">单位ms 默认 -1 当上一个任务结束开始计算间隔时间</td></tr><tr><td style=\"text-align:left\">fixedDelayString</td><td style=\"text-align:left\">指定固定时长周期执行任务 字符串格式</td><td style=\"text-align:left\">作用跟fixedDelay差不多</td></tr><tr><td style=\"text-align:left\">fixedRate</td><td style=\"text-align:left\">指定固定时长周期执行</td><td style=\"text-align:left\">单位ms 默认 -1 当上一个任务开始就开始计算时间间隔</td></tr><tr><td style=\"text-align:left\">fixedRateString</td><td style=\"text-align:left\">指定固定时长周期执行 字符串格式</td><td style=\"text-align:left\">作用跟fixedRate差不多 也是从上一个任务开始就开始计算时间间隔</td></tr><tr><td style=\"text-align:left\">initialDelay</td><td style=\"text-align:left\">设定在第一次执行前延迟的ms时间</td><td style=\"text-align:left\">单位ms 默认-1</td></tr><tr><td style=\"text-align:left\">initialDelayString</td><td style=\"text-align:left\">设定在第一次执行前延迟的ms时间 字符串格式</td><td style=\"text-align:left\">作用和initialDelay 一样</td></tr></tbody></table><ul><li>注意<br>cron和zone 参数配合使用<br>fixedDelay 和fixedRate 要区分是从哪里开始计算时间间隔 例如任务需要在上一个任务执行完成之后间隔n秒执行 就选择fixedDelay 如果是在上一个任务一开始启动间隔n秒再次启动第二个任务那么就要用fixedRate<br>有些任务可能需要等待项目启动后延迟执行 那么通过initialDelay 配置 第一次执行间隔即可</li></ul><h5 id=\"Schedules\"><a href=\"#Schedules\" class=\"headerlink\" title=\"Schedules\"></a>Schedules</h5><ul><li>作用<br>标记一个函数 内部可以配置多个@Scheduled注解 让这个函数使用多种调度策略</li><li>参数<br>value @Scheduled[]</li><li>使用实例<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Schedules(value = &#123;@Scheduled(fixedDelay = 10000),@Scheduled(fixedDelay = 13000)&#125;)</span><br><span class=\"line\">  public void test()&#123;</span><br><span class=\"line\">      System.out.println(&quot;----------------------&quot;);</span><br><span class=\"line\">      System.out.println(System.currentTimeMillis());</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h4><h5 id=\"检查依赖\"><a href=\"#检查依赖\" class=\"headerlink\" title=\"检查依赖\"></a>检查依赖</h5><p>spring boot 项目中 只要引入的 spring-boot-starter-web 就可以类<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p></p>\n<h5 id=\"启动类添加注解\"><a href=\"#启动类添加注解\" class=\"headerlink\" title=\"启动类添加注解\"></a>启动类添加注解</h5><p>在spring boot 的启动类上 加上@EnableScheduling 表示启动schedule模块<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">import org.springframework.boot.SpringApplication;</span><br><span class=\"line\">import org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class=\"line\">import org.springframework.scheduling.annotation.EnableScheduling;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 启动类</span><br><span class=\"line\"> * @author ming</span><br><span class=\"line\"> * @date 2018-09-25 15:41:31</span><br><span class=\"line\"> */</span><br><span class=\"line\">@SpringBootApplication</span><br><span class=\"line\">@EnableScheduling</span><br><span class=\"line\">public class Start &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        SpringApplication.run(Start.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p>\n<h5 id=\"编写定时器类\"><a href=\"#编写定时器类\" class=\"headerlink\" title=\"编写定时器类\"></a>编写定时器类</h5><p>将class注册为spring bean  使用@Scheduled注解 标明改任务执行时间策略<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">import lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\">import org.springframework.scheduling.annotation.Scheduled;</span><br><span class=\"line\">import org.springframework.stereotype.Component;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 测试任务</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @author ming</span><br><span class=\"line\"> * @date 2018-11-09 10:25:09</span><br><span class=\"line\"> */</span><br><span class=\"line\">@Component</span><br><span class=\"line\">@Slf4j</span><br><span class=\"line\">public class TestJob &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Scheduled(fixedRate = 1000)</span><br><span class=\"line\">    public void test() &#123;</span><br><span class=\"line\">        System.out.println(&quot;测试schedule模块定时器。。。。。&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><p>spring 的schedule模块 功能是挺简单的<br>这种简单的任务 又不需要异步执行 而且任务又不是很耗时的 可以用spring 的schedule模块实现<br>这个模块还支持 异步执行定时任务等等功能 但是不推荐用 因为你需要这种异步执行的任务的时候 更多的时候 选择更加完善的定时器技术比较好<br>例如 quartz 、elastic job这种 毕竟异步执行需要考虑的地方更多 例如并发、任务分片等等问题</p>"},{"title":"spring boot 项目打包docker image 插件方式","abbrlink":"dbafeaad","date":"2017-11-10T16:00:00.000Z","_content":"####spring boot 打包成docker image 会更加方便使用 \n1:配置编译jar选项\n2:配置maven docker 插件\n3:上传到私服 \n4:自动化脚本\n####配置编译jar\n如果是继承spring boot 的pom 直接如下配置即可\n```\n<plugin>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-maven-plugin</artifactId>\n</plugin>\n```\n然后  mvn package 即可  这个时候 打包的jar 里面带有main-class的默认配置 也会有需要的依赖包\n可以直接 java -jar ming.jar 方式运行\n####配置 maven docker 插件\n这个插件略坑  在windows上 docker build比较操蛋  linux下docker又需要root权限运行 略坑\n```\n            <plugin>\n                <groupId>com.spotify</groupId>\n                <artifactId>docker-maven-plugin</artifactId>\n                <version>${maven.docker.version}</version>\n                <configuration>\n                    <!--镜像名称-->\n                    <imageName>${docker.image.prefix}/${project.artifactId}</imageName>\n                    <!--docker file位置-->\n                    <dockerDirectory>src/main/docker</dockerDirectory>\n                    <resources>\n                        <resource>\n                            <!-- 编译jar路径 -->\n                            <targetPath>/</targetPath>\n                            <!--编译jar 所在文件夹-->\n                            <directory>${project.build.directory}</directory>\n                            <!--编译的jar 名称-->\n                            <include>${project.build.finalName}.jar</include>\n                        </resource>\n                    </resources>\n                </configuration>\n            </plugin>\n```\n然后使用 mvn package docker:build 编译构建即可  最好是在linux环境下 使用root 权限\n####上传到私服\n我这里选择的是上传到 aliyun 提供的镜像仓库  \n```\n$ sudo docker login --username=18120580001@163.com registry.cn-hangzhou.aliyuncs.com\n$ sudo docker tag [ImageId] registry.cn-hangzhou.aliyuncs.com/mingimages/ming:[镜像版本号]\n$ sudo docker push registry.cn-hangzhou.aliyuncs.com/mingimages/ming:[镜像版本号]\n```\n####参考地址:https://github.com/xuxianyu/ming\n","source":"_posts/spring/spring-boot打包成docker-image.md","raw":"---\ntitle: spring boot 项目打包docker image 插件方式\ncategories: 笔记\ntags:\n  - spring\n  - docker\nabbrlink: dbafeaad\ndate: 2017-11-11 00:00:00\n---\n####spring boot 打包成docker image 会更加方便使用 \n1:配置编译jar选项\n2:配置maven docker 插件\n3:上传到私服 \n4:自动化脚本\n####配置编译jar\n如果是继承spring boot 的pom 直接如下配置即可\n```\n<plugin>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-maven-plugin</artifactId>\n</plugin>\n```\n然后  mvn package 即可  这个时候 打包的jar 里面带有main-class的默认配置 也会有需要的依赖包\n可以直接 java -jar ming.jar 方式运行\n####配置 maven docker 插件\n这个插件略坑  在windows上 docker build比较操蛋  linux下docker又需要root权限运行 略坑\n```\n            <plugin>\n                <groupId>com.spotify</groupId>\n                <artifactId>docker-maven-plugin</artifactId>\n                <version>${maven.docker.version}</version>\n                <configuration>\n                    <!--镜像名称-->\n                    <imageName>${docker.image.prefix}/${project.artifactId}</imageName>\n                    <!--docker file位置-->\n                    <dockerDirectory>src/main/docker</dockerDirectory>\n                    <resources>\n                        <resource>\n                            <!-- 编译jar路径 -->\n                            <targetPath>/</targetPath>\n                            <!--编译jar 所在文件夹-->\n                            <directory>${project.build.directory}</directory>\n                            <!--编译的jar 名称-->\n                            <include>${project.build.finalName}.jar</include>\n                        </resource>\n                    </resources>\n                </configuration>\n            </plugin>\n```\n然后使用 mvn package docker:build 编译构建即可  最好是在linux环境下 使用root 权限\n####上传到私服\n我这里选择的是上传到 aliyun 提供的镜像仓库  \n```\n$ sudo docker login --username=18120580001@163.com registry.cn-hangzhou.aliyuncs.com\n$ sudo docker tag [ImageId] registry.cn-hangzhou.aliyuncs.com/mingimages/ming:[镜像版本号]\n$ sudo docker push registry.cn-hangzhou.aliyuncs.com/mingimages/ming:[镜像版本号]\n```\n####参考地址:https://github.com/xuxianyu/ming\n","slug":"spring/spring-boot打包成docker-image","published":1,"updated":"2018-08-17T08:10:03.923Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjo9uatyr0041mwczr9p64go9","content":"<p>####spring boot 打包成docker image 会更加方便使用<br>1:配置编译jar选项<br>2:配置maven docker 插件<br>3:上传到私服<br>4:自动化脚本</p><p>####配置编译jar<br>如果是继承spring boot 的pom 直接如下配置即可<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;plugin&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class=\"line\">&lt;/plugin&gt;</span><br></pre></td></tr></table></figure><p></p>\n<p>然后  mvn package 即可  这个时候 打包的jar 里面带有main-class的默认配置 也会有需要的依赖包<br>可以直接 java -jar ming.jar 方式运行</p>\n<p>####配置 maven docker 插件<br>这个插件略坑  在windows上 docker build比较操蛋  linux下docker又需要root权限运行 略坑<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;plugin&gt;</span><br><span class=\"line\">    &lt;groupId&gt;com.spotify&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;docker-maven-plugin&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;$&#123;maven.docker.version&#125;&lt;/version&gt;</span><br><span class=\"line\">    &lt;configuration&gt;</span><br><span class=\"line\">        &lt;!--镜像名称--&gt;</span><br><span class=\"line\">        &lt;imageName&gt;$&#123;docker.image.prefix&#125;/$&#123;project.artifactId&#125;&lt;/imageName&gt;</span><br><span class=\"line\">        &lt;!--docker file位置--&gt;</span><br><span class=\"line\">        &lt;dockerDirectory&gt;src/main/docker&lt;/dockerDirectory&gt;</span><br><span class=\"line\">        &lt;resources&gt;</span><br><span class=\"line\">            &lt;resource&gt;</span><br><span class=\"line\">                &lt;!-- 编译jar路径 --&gt;</span><br><span class=\"line\">                &lt;targetPath&gt;/&lt;/targetPath&gt;</span><br><span class=\"line\">                &lt;!--编译jar 所在文件夹--&gt;</span><br><span class=\"line\">                &lt;directory&gt;$&#123;project.build.directory&#125;&lt;/directory&gt;</span><br><span class=\"line\">                &lt;!--编译的jar 名称--&gt;</span><br><span class=\"line\">                &lt;include&gt;$&#123;project.build.finalName&#125;.jar&lt;/include&gt;</span><br><span class=\"line\">            &lt;/resource&gt;</span><br><span class=\"line\">        &lt;/resources&gt;</span><br><span class=\"line\">    &lt;/configuration&gt;</span><br><span class=\"line\">&lt;/plugin&gt;</span><br></pre></td></tr></table></figure><p></p>\n<p>然后使用 mvn package docker:build 编译构建即可  最好是在linux环境下 使用root 权限</p>\n<p>####上传到私服<br>我这里选择的是上传到 aliyun 提供的镜像仓库<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo docker login --username=18120580001@163.com registry.cn-hangzhou.aliyuncs.com</span><br><span class=\"line\">$ sudo docker tag [ImageId] registry.cn-hangzhou.aliyuncs.com/mingimages/ming:[镜像版本号]</span><br><span class=\"line\">$ sudo docker push registry.cn-hangzhou.aliyuncs.com/mingimages/ming:[镜像版本号]</span><br></pre></td></tr></table></figure><p></p>\n<p>####参考地址:<a href=\"https://github.com/xuxianyu/ming\" target=\"_blank\" rel=\"noopener\">https://github.com/xuxianyu/ming</a></p>","site":{"data":{}},"excerpt":"","more":"<p>####spring boot 打包成docker image 会更加方便使用<br>1:配置编译jar选项<br>2:配置maven docker 插件<br>3:上传到私服<br>4:自动化脚本</p><p>####配置编译jar<br>如果是继承spring boot 的pom 直接如下配置即可<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;plugin&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class=\"line\">&lt;/plugin&gt;</span><br></pre></td></tr></table></figure><p></p>\n<p>然后  mvn package 即可  这个时候 打包的jar 里面带有main-class的默认配置 也会有需要的依赖包<br>可以直接 java -jar ming.jar 方式运行</p>\n<p>####配置 maven docker 插件<br>这个插件略坑  在windows上 docker build比较操蛋  linux下docker又需要root权限运行 略坑<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;plugin&gt;</span><br><span class=\"line\">    &lt;groupId&gt;com.spotify&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;docker-maven-plugin&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;$&#123;maven.docker.version&#125;&lt;/version&gt;</span><br><span class=\"line\">    &lt;configuration&gt;</span><br><span class=\"line\">        &lt;!--镜像名称--&gt;</span><br><span class=\"line\">        &lt;imageName&gt;$&#123;docker.image.prefix&#125;/$&#123;project.artifactId&#125;&lt;/imageName&gt;</span><br><span class=\"line\">        &lt;!--docker file位置--&gt;</span><br><span class=\"line\">        &lt;dockerDirectory&gt;src/main/docker&lt;/dockerDirectory&gt;</span><br><span class=\"line\">        &lt;resources&gt;</span><br><span class=\"line\">            &lt;resource&gt;</span><br><span class=\"line\">                &lt;!-- 编译jar路径 --&gt;</span><br><span class=\"line\">                &lt;targetPath&gt;/&lt;/targetPath&gt;</span><br><span class=\"line\">                &lt;!--编译jar 所在文件夹--&gt;</span><br><span class=\"line\">                &lt;directory&gt;$&#123;project.build.directory&#125;&lt;/directory&gt;</span><br><span class=\"line\">                &lt;!--编译的jar 名称--&gt;</span><br><span class=\"line\">                &lt;include&gt;$&#123;project.build.finalName&#125;.jar&lt;/include&gt;</span><br><span class=\"line\">            &lt;/resource&gt;</span><br><span class=\"line\">        &lt;/resources&gt;</span><br><span class=\"line\">    &lt;/configuration&gt;</span><br><span class=\"line\">&lt;/plugin&gt;</span><br></pre></td></tr></table></figure><p></p>\n<p>然后使用 mvn package docker:build 编译构建即可  最好是在linux环境下 使用root 权限</p>\n<p>####上传到私服<br>我这里选择的是上传到 aliyun 提供的镜像仓库<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo docker login --username=18120580001@163.com registry.cn-hangzhou.aliyuncs.com</span><br><span class=\"line\">$ sudo docker tag [ImageId] registry.cn-hangzhou.aliyuncs.com/mingimages/ming:[镜像版本号]</span><br><span class=\"line\">$ sudo docker push registry.cn-hangzhou.aliyuncs.com/mingimages/ming:[镜像版本号]</span><br></pre></td></tr></table></figure><p></p>\n<p>####参考地址:<a href=\"https://github.com/xuxianyu/ming\" target=\"_blank\" rel=\"noopener\">https://github.com/xuxianyu/ming</a></p>"},{"title":"spring cloud 注册中心模块笔记","abbrlink":"4c352ff0","date":"2017-11-10T16:00:00.000Z","_content":"\neureka客户端:\n* 服务注册相关配置 注册的中心、心跳、注册信息缓存时间 org.springframework.cloud.netflix.eureka.EurekaClientConfigBean    \n* 服务实列配置信息 服务实列的名称、地址、健康检查路径 org.springframework.cloud.netflix.eureka.EurekaInstanceConfigBean    \neureka服务端:\n* 配置相关检测 eureka.server中配置 org.springframework.cloud.netflix.eureka.server.EurekaServerConfigBean  服务端相关配置 \n\n\n|配置名称|说明|备注|\n|:---|:-----|:------|\n|eureka.client.register-with-eureka=true |是否向注册中心注册自己  |true=注册，false=不注册|\n|eureka.instance.lease-renewal-interval-in-seconds=30 |续约服务间隔  心跳间隔  |心跳间隔 30s|\n|eureka.instance.lease-expiration-duration-in-seconds=90|服务失效时间，当90s后没有成功续约，服务失效  |默认失效时间 90s|\n|eureka.client.registry-fetch-interval-seconds=30|注册信息缓存时间|默认30s|\n|eureka.instance.hostname=name|eureka服务地址|域名或者ip|\n|eureka.server.enable-self-preservation=false|是否开启自我保护 默认true |eureka server自我保护机制: 十五分钟内心跳失败低于85% 出现 自我保护机制|\n|eureka.client.serviceUrl.defaultZone|指定默认zone(可用区)|如果没有为region(区域)配置zone(可用区)那么使用默认zone(可用区) 多个用,分割,带安全校验的格式(http://<username>:<password>@localhost:10000/eureka)|\n|eureka.client.availability-zones|zone(可用区)列表|region一个对应多个zone(可用区)  一个区域可以有多个可用区|\n|eureka.instance.instanceId=${spring.application.name}:${random.int}|设定 客户端的明名规则防止冲突|和server.port=0结合使用|\n|management.context-path|设置 上下文前缀|如果设置了这个  需要再eurekaclient相应设置/health 和/info端点  否则eureka server端无法获取 客户端的健康情况|\n|eureka.instance.statusPageUrlPath=${management.context-path}/info|设置info端点|如果客户端修改了端点相应信息 必须要设置这个|\n|eureka.instance.healthCheckUrlPath=${}/health|设置health端点|如果客户端修改了端点相应信息 必须要设置这个|\n\n","source":"_posts/spring/spring-cloud-eureka笔记.md","raw":"---\ntitle: spring cloud 注册中心模块笔记\ncategories: 笔记\ntags:\n  - spring\nabbrlink: 4c352ff0\ndate: 2017-11-11 00:00:00\n---\n\neureka客户端:\n* 服务注册相关配置 注册的中心、心跳、注册信息缓存时间 org.springframework.cloud.netflix.eureka.EurekaClientConfigBean    \n* 服务实列配置信息 服务实列的名称、地址、健康检查路径 org.springframework.cloud.netflix.eureka.EurekaInstanceConfigBean    \neureka服务端:\n* 配置相关检测 eureka.server中配置 org.springframework.cloud.netflix.eureka.server.EurekaServerConfigBean  服务端相关配置 \n\n\n|配置名称|说明|备注|\n|:---|:-----|:------|\n|eureka.client.register-with-eureka=true |是否向注册中心注册自己  |true=注册，false=不注册|\n|eureka.instance.lease-renewal-interval-in-seconds=30 |续约服务间隔  心跳间隔  |心跳间隔 30s|\n|eureka.instance.lease-expiration-duration-in-seconds=90|服务失效时间，当90s后没有成功续约，服务失效  |默认失效时间 90s|\n|eureka.client.registry-fetch-interval-seconds=30|注册信息缓存时间|默认30s|\n|eureka.instance.hostname=name|eureka服务地址|域名或者ip|\n|eureka.server.enable-self-preservation=false|是否开启自我保护 默认true |eureka server自我保护机制: 十五分钟内心跳失败低于85% 出现 自我保护机制|\n|eureka.client.serviceUrl.defaultZone|指定默认zone(可用区)|如果没有为region(区域)配置zone(可用区)那么使用默认zone(可用区) 多个用,分割,带安全校验的格式(http://<username>:<password>@localhost:10000/eureka)|\n|eureka.client.availability-zones|zone(可用区)列表|region一个对应多个zone(可用区)  一个区域可以有多个可用区|\n|eureka.instance.instanceId=${spring.application.name}:${random.int}|设定 客户端的明名规则防止冲突|和server.port=0结合使用|\n|management.context-path|设置 上下文前缀|如果设置了这个  需要再eurekaclient相应设置/health 和/info端点  否则eureka server端无法获取 客户端的健康情况|\n|eureka.instance.statusPageUrlPath=${management.context-path}/info|设置info端点|如果客户端修改了端点相应信息 必须要设置这个|\n|eureka.instance.healthCheckUrlPath=${}/health|设置health端点|如果客户端修改了端点相应信息 必须要设置这个|\n\n","slug":"spring/spring-cloud-eureka笔记","published":1,"updated":"2018-08-17T08:10:03.923Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjo9uatys0045mwcz6ssgashp","content":"<p>eureka客户端:</p><ul><li>服务注册相关配置 注册的中心、心跳、注册信息缓存时间 org.springframework.cloud.netflix.eureka.EurekaClientConfigBean</li><li>服务实列配置信息 服务实列的名称、地址、健康检查路径 org.springframework.cloud.netflix.eureka.EurekaInstanceConfigBean<br>eureka服务端:</li><li>配置相关检测 eureka.server中配置 org.springframework.cloud.netflix.eureka.server.EurekaServerConfigBean 服务端相关配置</li></ul><table><thead><tr><th style=\"text-align:left\">配置名称</th><th style=\"text-align:left\">说明</th><th style=\"text-align:left\">备注</th></tr></thead><tbody><tr><td style=\"text-align:left\">eureka.client.register-with-eureka=true</td><td style=\"text-align:left\">是否向注册中心注册自己</td><td style=\"text-align:left\">true=注册，false=不注册</td></tr><tr><td style=\"text-align:left\">eureka.instance.lease-renewal-interval-in-seconds=30</td><td style=\"text-align:left\">续约服务间隔 心跳间隔</td><td style=\"text-align:left\">心跳间隔 30s</td></tr><tr><td style=\"text-align:left\">eureka.instance.lease-expiration-duration-in-seconds=90</td><td style=\"text-align:left\">服务失效时间，当90s后没有成功续约，服务失效</td><td style=\"text-align:left\">默认失效时间 90s</td></tr><tr><td style=\"text-align:left\">eureka.client.registry-fetch-interval-seconds=30</td><td style=\"text-align:left\">注册信息缓存时间</td><td style=\"text-align:left\">默认30s</td></tr><tr><td style=\"text-align:left\">eureka.instance.hostname=name</td><td style=\"text-align:left\">eureka服务地址</td><td style=\"text-align:left\">域名或者ip</td></tr><tr><td style=\"text-align:left\">eureka.server.enable-self-preservation=false</td><td style=\"text-align:left\">是否开启自我保护 默认true</td><td style=\"text-align:left\">eureka server自我保护机制: 十五分钟内心跳失败低于85% 出现 自我保护机制</td></tr><tr><td style=\"text-align:left\">eureka.client.serviceUrl.defaultZone</td><td style=\"text-align:left\">指定默认zone(可用区)</td><td style=\"text-align:left\">如果没有为region(区域)配置zone(可用区)那么使用默认zone(可用区) 多个用,分割,带安全校验的格式(http://<username>:<password>@localhost:10000/eureka)</password></username></td></tr><tr><td style=\"text-align:left\">eureka.client.availability-zones</td><td style=\"text-align:left\">zone(可用区)列表</td><td style=\"text-align:left\">region一个对应多个zone(可用区) 一个区域可以有多个可用区</td></tr><tr><td style=\"text-align:left\">eureka.instance.instanceId=${spring.application.name}:${random.int}</td><td style=\"text-align:left\">设定 客户端的明名规则防止冲突</td><td style=\"text-align:left\">和server.port=0结合使用</td></tr><tr><td style=\"text-align:left\">management.context-path</td><td style=\"text-align:left\">设置 上下文前缀</td><td style=\"text-align:left\">如果设置了这个 需要再eurekaclient相应设置/health 和/info端点 否则eureka server端无法获取 客户端的健康情况</td></tr><tr><td style=\"text-align:left\">eureka.instance.statusPageUrlPath=${management.context-path}/info</td><td style=\"text-align:left\">设置info端点</td><td style=\"text-align:left\">如果客户端修改了端点相应信息 必须要设置这个</td></tr><tr><td style=\"text-align:left\">eureka.instance.healthCheckUrlPath=${}/health</td><td style=\"text-align:left\">设置health端点</td><td style=\"text-align:left\">如果客户端修改了端点相应信息 必须要设置这个</td></tr></tbody></table>","site":{"data":{}},"excerpt":"","more":"<p>eureka客户端:</p><ul><li>服务注册相关配置 注册的中心、心跳、注册信息缓存时间 org.springframework.cloud.netflix.eureka.EurekaClientConfigBean</li><li>服务实列配置信息 服务实列的名称、地址、健康检查路径 org.springframework.cloud.netflix.eureka.EurekaInstanceConfigBean<br>eureka服务端:</li><li>配置相关检测 eureka.server中配置 org.springframework.cloud.netflix.eureka.server.EurekaServerConfigBean 服务端相关配置</li></ul><table><thead><tr><th style=\"text-align:left\">配置名称</th><th style=\"text-align:left\">说明</th><th style=\"text-align:left\">备注</th></tr></thead><tbody><tr><td style=\"text-align:left\">eureka.client.register-with-eureka=true</td><td style=\"text-align:left\">是否向注册中心注册自己</td><td style=\"text-align:left\">true=注册，false=不注册</td></tr><tr><td style=\"text-align:left\">eureka.instance.lease-renewal-interval-in-seconds=30</td><td style=\"text-align:left\">续约服务间隔 心跳间隔</td><td style=\"text-align:left\">心跳间隔 30s</td></tr><tr><td style=\"text-align:left\">eureka.instance.lease-expiration-duration-in-seconds=90</td><td style=\"text-align:left\">服务失效时间，当90s后没有成功续约，服务失效</td><td style=\"text-align:left\">默认失效时间 90s</td></tr><tr><td style=\"text-align:left\">eureka.client.registry-fetch-interval-seconds=30</td><td style=\"text-align:left\">注册信息缓存时间</td><td style=\"text-align:left\">默认30s</td></tr><tr><td style=\"text-align:left\">eureka.instance.hostname=name</td><td style=\"text-align:left\">eureka服务地址</td><td style=\"text-align:left\">域名或者ip</td></tr><tr><td style=\"text-align:left\">eureka.server.enable-self-preservation=false</td><td style=\"text-align:left\">是否开启自我保护 默认true</td><td style=\"text-align:left\">eureka server自我保护机制: 十五分钟内心跳失败低于85% 出现 自我保护机制</td></tr><tr><td style=\"text-align:left\">eureka.client.serviceUrl.defaultZone</td><td style=\"text-align:left\">指定默认zone(可用区)</td><td style=\"text-align:left\">如果没有为region(区域)配置zone(可用区)那么使用默认zone(可用区) 多个用,分割,带安全校验的格式(http://<username>:<password>@localhost:10000/eureka)</password></username></td></tr><tr><td style=\"text-align:left\">eureka.client.availability-zones</td><td style=\"text-align:left\">zone(可用区)列表</td><td style=\"text-align:left\">region一个对应多个zone(可用区) 一个区域可以有多个可用区</td></tr><tr><td style=\"text-align:left\">eureka.instance.instanceId=${spring.application.name}:${random.int}</td><td style=\"text-align:left\">设定 客户端的明名规则防止冲突</td><td style=\"text-align:left\">和server.port=0结合使用</td></tr><tr><td style=\"text-align:left\">management.context-path</td><td style=\"text-align:left\">设置 上下文前缀</td><td style=\"text-align:left\">如果设置了这个 需要再eurekaclient相应设置/health 和/info端点 否则eureka server端无法获取 客户端的健康情况</td></tr><tr><td style=\"text-align:left\">eureka.instance.statusPageUrlPath=${management.context-path}/info</td><td style=\"text-align:left\">设置info端点</td><td style=\"text-align:left\">如果客户端修改了端点相应信息 必须要设置这个</td></tr><tr><td style=\"text-align:left\">eureka.instance.healthCheckUrlPath=${}/health</td><td style=\"text-align:left\">设置health端点</td><td style=\"text-align:left\">如果客户端修改了端点相应信息 必须要设置这个</td></tr></tbody></table>"},{"title":"spring cloud ribbon 负载均衡笔记","abbrlink":"878fb6fb","date":"2017-11-10T16:00:00.000Z","_content":"###ribbon负载均衡  \n必须存在\n```\n    @Bean\n    @LoadBalanced//通过再restTemplate中添加拦截器 实现负载均衡、重写uri等功能\n    RestTemplate restTemplate(){\n        return new RestTemplate();\n    }\n```\n#### ServiceInstanceChooser  服务实例选择\nchoose 根据serviceId选择一个实例\n####LoadBalancerClient extends ServiceInstanceChooser 负载均衡客户端\nexecute 获取负载均衡后的实例、服务id之后 执行请求\nreconstructURI 根据实例重写uri 获取服务实例后 重写uri\n####LoadBalancerAutoConfiguration 自动配置类\n* 必须存在 restTemplate 通过http请求 添加拦截器来实现负载均衡\n* 必须存在 LoadBalancerClient 的实现\n核心功能:\nstatic class LoadBalancerInterceptorConfig通过这个配置类 配置负载均衡拦截器 向restTemplate添加负载均衡功能    \nribbonInterceptor(LoadBalancerClient loadBalancerClient,LoadBalancerRequestFactory loadBalancerRequestFactory);  创建 负载均衡拦截器   \nrestTemplateCustomizer(LoadBalancerInterceptor loadBalancerInterceptor);为restTemplate设置负载均衡拦截器  \n通过执行 负载均衡器的execute方法来选择实例和重写uri、执行请求\n\nstatic class RetryAutoConfiguration 自动重试机制配置\n也是通过创建重试拦截器 添加到restTemplate中 来设置自动重试\n####ILoadBalancer \n获取服务实例不是采用serviceInstancerChooser获取的，而是 netflix ribbon中的ILoadBalancer  \n查看 ribbon实现的LoadBalancerClient的getServer方法 就看得到\naddServers 添加实例\nchooseServer 根据负载均衡策略获取一个实例\nmarkServerDown 标记实例不可用\ngetReachableServers 获取可用实例\ngetAllServers 获取所有实例   \n里面主要就是维护实例列表和获取列表方法、server类定义了一个服务节点的基本信息\n实现类：\n* AbstractLoadBalancer implements ILoadBalancer 负载均衡器 抽象类  \n抽象定义:   \nserverGroup：ALL(所有)、STATUS_UP(可用)、STATUS_NOT_UP(不可用)    \n实现的方法：  \nchooseServer 调用接口的chooseServer(null)  选择实例的时候忽略key的条件判断    \n抽象方法:\nabstract getServerList(serverGroup) 根据实例组 枚举来获取 相应实例列表  \nabstract getLoadBalancerStats() 获取负载均衡 统计数据  \n* NoOpLoadBalancer extends AbstractLoadBalancer   \n\n* BaseLoadBalancer extends AbstractLoadBalancer   实现了基本的负载均衡器\n定义可用实例集合 allServerList 、upServerList   \n定义负载均衡统计信息 LoadBalancerStats   \n定义 IPing=null 需要注入  \n定义 IPingStrategy iping执行策略  默认使用 BaseLoadBalancer中的SerialPingStrategy 线性执行策略 通过重写IPingStrategy 来使用更高效率的 ping策略  \n定义 IRule 负载均衡处理规则  默认使用RoundRobinRule  线性负载均衡规则   \n启动 ping任务  默认pingIntervalSeconds=10s  使用Timer 执行定时任务   maxTotalPingTimeSeconds=5s最大执行时间\n实现 ILoadBalancer 基本操作 addServers 、chooseServer、markServerDown、getReachAbleServers、getAllServers  \n定义 其他附加的的信息 例如 IClientConfig、changeListeners、serverStatusListeners等  \n* DynamicServerListLoadBalancer extends AbstractLoadBalancer    动态实例负载均衡器  \n定义 isSecure = false 默认不使用https\n定义 useTunnel =false  是否使用隧道 估计是是否使用pptp协议隧道的意思\n定义 ServerList<T> serverListsImpl 实例列表 serverList 有获取初始化服务列表和获取更新的服务列表两个方法  查看实现类 org.springframework.cloud.netflix.ribbon.eureka.EurekaRibbonClientConfiguration#ribbonServerList  DiscoveryEnabledNIWSServerList--》DomainExtractingServerList来构建默认的serverList  获取初始化服务方法、更新服务方法 通过#obtainServersViaDiscovery 方法实现 这个是客户端 获取服务端注册信息 转换成本地缓存 serverList方法\n定义 ServerListFilter<T> filter 过滤器  根据过滤条件过滤实例\n定义 ServerListUpdater.UpdateAction   服务更新器具体实现  \n定义 ServerListUpdater 服务更新器 通过updateListOfServers 先获取要更新的列表--》根据过滤条件 过滤 --》 添加到serverList   \nServerListUpdater 接口:\nstart 启动服务更新器\nstop 关闭服务更新器\ngetLastUpdate 获取最后更新时间戳\ngetDurationSinceLastUpdateMs 获取上一次到现在的时间间隔\ngetNumberMissedCycles 获取错过的更新期数\ngetCoreThreads 获取核心线程数\nPollingServerListUpdater实现类:默认实现 使用定时任务 定时从eureka server 拉取\nEurekaNotificationServerListUpdater实现类:通过eureka事件监听 来驱动 \n* ZoneAwareLoadBalancer extends DynamicServerListLoadBalancer 区域感知负载均衡器   \n#### RibbonClientConfiguration ribbon 客户端配置\nribbonClientConfig 设置ribbonClient 配置\nribbonRule 设置负载均衡 处理规则 实现\nribbonPing  设置负载均衡 ping 方式实现\nribbonServerList 设置实例列表\nstatic RestClientRibbonConfiguration 配置ribbon的restClient相关参数\n    ribbonRestClient 根据ribbon相关配置 获取 restClient\nribbonLoadBalancer 获取负载均衡器\nribbonServerListFilter 设置负载均衡服务的过滤器\nribbonLoadBalancerContext 负载均衡器上下文\nretryHandler 重试处理\nserverIntrospector 实例拦截器\n#### ServiceInstance  服务实例\n存储实例的 serviceId 、host、port、isSecure(是否使用https)、uri、metaData(元数据map)\n\n\n    \n\n\n\n","source":"_posts/spring/spring-cloud-ribbon笔记.md","raw":"---\ntitle: spring cloud ribbon 负载均衡笔记\ncategories: 笔记\ntags:\n  - spring\nabbrlink: 878fb6fb\ndate: 2017-11-11 00:00:00\n---\n###ribbon负载均衡  \n必须存在\n```\n    @Bean\n    @LoadBalanced//通过再restTemplate中添加拦截器 实现负载均衡、重写uri等功能\n    RestTemplate restTemplate(){\n        return new RestTemplate();\n    }\n```\n#### ServiceInstanceChooser  服务实例选择\nchoose 根据serviceId选择一个实例\n####LoadBalancerClient extends ServiceInstanceChooser 负载均衡客户端\nexecute 获取负载均衡后的实例、服务id之后 执行请求\nreconstructURI 根据实例重写uri 获取服务实例后 重写uri\n####LoadBalancerAutoConfiguration 自动配置类\n* 必须存在 restTemplate 通过http请求 添加拦截器来实现负载均衡\n* 必须存在 LoadBalancerClient 的实现\n核心功能:\nstatic class LoadBalancerInterceptorConfig通过这个配置类 配置负载均衡拦截器 向restTemplate添加负载均衡功能    \nribbonInterceptor(LoadBalancerClient loadBalancerClient,LoadBalancerRequestFactory loadBalancerRequestFactory);  创建 负载均衡拦截器   \nrestTemplateCustomizer(LoadBalancerInterceptor loadBalancerInterceptor);为restTemplate设置负载均衡拦截器  \n通过执行 负载均衡器的execute方法来选择实例和重写uri、执行请求\n\nstatic class RetryAutoConfiguration 自动重试机制配置\n也是通过创建重试拦截器 添加到restTemplate中 来设置自动重试\n####ILoadBalancer \n获取服务实例不是采用serviceInstancerChooser获取的，而是 netflix ribbon中的ILoadBalancer  \n查看 ribbon实现的LoadBalancerClient的getServer方法 就看得到\naddServers 添加实例\nchooseServer 根据负载均衡策略获取一个实例\nmarkServerDown 标记实例不可用\ngetReachableServers 获取可用实例\ngetAllServers 获取所有实例   \n里面主要就是维护实例列表和获取列表方法、server类定义了一个服务节点的基本信息\n实现类：\n* AbstractLoadBalancer implements ILoadBalancer 负载均衡器 抽象类  \n抽象定义:   \nserverGroup：ALL(所有)、STATUS_UP(可用)、STATUS_NOT_UP(不可用)    \n实现的方法：  \nchooseServer 调用接口的chooseServer(null)  选择实例的时候忽略key的条件判断    \n抽象方法:\nabstract getServerList(serverGroup) 根据实例组 枚举来获取 相应实例列表  \nabstract getLoadBalancerStats() 获取负载均衡 统计数据  \n* NoOpLoadBalancer extends AbstractLoadBalancer   \n\n* BaseLoadBalancer extends AbstractLoadBalancer   实现了基本的负载均衡器\n定义可用实例集合 allServerList 、upServerList   \n定义负载均衡统计信息 LoadBalancerStats   \n定义 IPing=null 需要注入  \n定义 IPingStrategy iping执行策略  默认使用 BaseLoadBalancer中的SerialPingStrategy 线性执行策略 通过重写IPingStrategy 来使用更高效率的 ping策略  \n定义 IRule 负载均衡处理规则  默认使用RoundRobinRule  线性负载均衡规则   \n启动 ping任务  默认pingIntervalSeconds=10s  使用Timer 执行定时任务   maxTotalPingTimeSeconds=5s最大执行时间\n实现 ILoadBalancer 基本操作 addServers 、chooseServer、markServerDown、getReachAbleServers、getAllServers  \n定义 其他附加的的信息 例如 IClientConfig、changeListeners、serverStatusListeners等  \n* DynamicServerListLoadBalancer extends AbstractLoadBalancer    动态实例负载均衡器  \n定义 isSecure = false 默认不使用https\n定义 useTunnel =false  是否使用隧道 估计是是否使用pptp协议隧道的意思\n定义 ServerList<T> serverListsImpl 实例列表 serverList 有获取初始化服务列表和获取更新的服务列表两个方法  查看实现类 org.springframework.cloud.netflix.ribbon.eureka.EurekaRibbonClientConfiguration#ribbonServerList  DiscoveryEnabledNIWSServerList--》DomainExtractingServerList来构建默认的serverList  获取初始化服务方法、更新服务方法 通过#obtainServersViaDiscovery 方法实现 这个是客户端 获取服务端注册信息 转换成本地缓存 serverList方法\n定义 ServerListFilter<T> filter 过滤器  根据过滤条件过滤实例\n定义 ServerListUpdater.UpdateAction   服务更新器具体实现  \n定义 ServerListUpdater 服务更新器 通过updateListOfServers 先获取要更新的列表--》根据过滤条件 过滤 --》 添加到serverList   \nServerListUpdater 接口:\nstart 启动服务更新器\nstop 关闭服务更新器\ngetLastUpdate 获取最后更新时间戳\ngetDurationSinceLastUpdateMs 获取上一次到现在的时间间隔\ngetNumberMissedCycles 获取错过的更新期数\ngetCoreThreads 获取核心线程数\nPollingServerListUpdater实现类:默认实现 使用定时任务 定时从eureka server 拉取\nEurekaNotificationServerListUpdater实现类:通过eureka事件监听 来驱动 \n* ZoneAwareLoadBalancer extends DynamicServerListLoadBalancer 区域感知负载均衡器   \n#### RibbonClientConfiguration ribbon 客户端配置\nribbonClientConfig 设置ribbonClient 配置\nribbonRule 设置负载均衡 处理规则 实现\nribbonPing  设置负载均衡 ping 方式实现\nribbonServerList 设置实例列表\nstatic RestClientRibbonConfiguration 配置ribbon的restClient相关参数\n    ribbonRestClient 根据ribbon相关配置 获取 restClient\nribbonLoadBalancer 获取负载均衡器\nribbonServerListFilter 设置负载均衡服务的过滤器\nribbonLoadBalancerContext 负载均衡器上下文\nretryHandler 重试处理\nserverIntrospector 实例拦截器\n#### ServiceInstance  服务实例\n存储实例的 serviceId 、host、port、isSecure(是否使用https)、uri、metaData(元数据map)\n\n\n    \n\n\n\n","slug":"spring/spring-cloud-ribbon笔记","published":1,"updated":"2018-08-17T08:10:03.923Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjo9uatyt0048mwcz55gxtvf3","content":"<p>###ribbon负载均衡<br>必须存在<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Bean</span><br><span class=\"line\">@LoadBalanced//通过再restTemplate中添加拦截器 实现负载均衡、重写uri等功能</span><br><span class=\"line\">RestTemplate restTemplate()&#123;</span><br><span class=\"line\">    return new RestTemplate();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p>\n<h4 id=\"ServiceInstanceChooser-服务实例选择\"><a href=\"#ServiceInstanceChooser-服务实例选择\" class=\"headerlink\" title=\"ServiceInstanceChooser  服务实例选择\"></a>ServiceInstanceChooser  服务实例选择</h4><p>choose 根据serviceId选择一个实例</p>\n<p>####LoadBalancerClient extends ServiceInstanceChooser 负载均衡客户端<br>execute 获取负载均衡后的实例、服务id之后 执行请求<br>reconstructURI 根据实例重写uri 获取服务实例后 重写uri</p>\n<p>####LoadBalancerAutoConfiguration 自动配置类</p>\n<ul>\n<li>必须存在 restTemplate 通过http请求 添加拦截器来实现负载均衡</li>\n<li>必须存在 LoadBalancerClient 的实现<br>核心功能:<br>static class LoadBalancerInterceptorConfig通过这个配置类 配置负载均衡拦截器 向restTemplate添加负载均衡功能<br>ribbonInterceptor(LoadBalancerClient loadBalancerClient,LoadBalancerRequestFactory loadBalancerRequestFactory);  创建 负载均衡拦截器<br>restTemplateCustomizer(LoadBalancerInterceptor loadBalancerInterceptor);为restTemplate设置负载均衡拦截器<br>通过执行 负载均衡器的execute方法来选择实例和重写uri、执行请求</li>\n</ul>\n<p>static class RetryAutoConfiguration 自动重试机制配置<br>也是通过创建重试拦截器 添加到restTemplate中 来设置自动重试</p>\n<p>####ILoadBalancer<br>获取服务实例不是采用serviceInstancerChooser获取的，而是 netflix ribbon中的ILoadBalancer<br>查看 ribbon实现的LoadBalancerClient的getServer方法 就看得到<br>addServers 添加实例<br>chooseServer 根据负载均衡策略获取一个实例<br>markServerDown 标记实例不可用<br>getReachableServers 获取可用实例<br>getAllServers 获取所有实例<br>里面主要就是维护实例列表和获取列表方法、server类定义了一个服务节点的基本信息<br>实现类：</p>\n<ul>\n<li>AbstractLoadBalancer implements ILoadBalancer 负载均衡器 抽象类<br>抽象定义:<br>serverGroup：ALL(所有)、STATUS_UP(可用)、STATUS_NOT_UP(不可用)<br>实现的方法：<br>chooseServer 调用接口的chooseServer(null)  选择实例的时候忽略key的条件判断<br>抽象方法:<br>abstract getServerList(serverGroup) 根据实例组 枚举来获取 相应实例列表<br>abstract getLoadBalancerStats() 获取负载均衡 统计数据  </li>\n<li><p>NoOpLoadBalancer extends AbstractLoadBalancer   </p>\n</li>\n<li><p>BaseLoadBalancer extends AbstractLoadBalancer   实现了基本的负载均衡器<br>定义可用实例集合 allServerList 、upServerList<br>定义负载均衡统计信息 LoadBalancerStats<br>定义 IPing=null 需要注入<br>定义 IPingStrategy iping执行策略  默认使用 BaseLoadBalancer中的SerialPingStrategy 线性执行策略 通过重写IPingStrategy 来使用更高效率的 ping策略<br>定义 IRule 负载均衡处理规则  默认使用RoundRobinRule  线性负载均衡规则<br>启动 ping任务  默认pingIntervalSeconds=10s  使用Timer 执行定时任务   maxTotalPingTimeSeconds=5s最大执行时间<br>实现 ILoadBalancer 基本操作 addServers 、chooseServer、markServerDown、getReachAbleServers、getAllServers<br>定义 其他附加的的信息 例如 IClientConfig、changeListeners、serverStatusListeners等  </p>\n</li>\n<li>DynamicServerListLoadBalancer extends AbstractLoadBalancer    动态实例负载均衡器<br>定义 isSecure = false 默认不使用https<br>定义 useTunnel =false  是否使用隧道 估计是是否使用pptp协议隧道的意思<br>定义 ServerList<t> serverListsImpl 实例列表 serverList 有获取初始化服务列表和获取更新的服务列表两个方法  查看实现类 org.springframework.cloud.netflix.ribbon.eureka.EurekaRibbonClientConfiguration#ribbonServerList  DiscoveryEnabledNIWSServerList–》DomainExtractingServerList来构建默认的serverList  获取初始化服务方法、更新服务方法 通过#obtainServersViaDiscovery 方法实现 这个是客户端 获取服务端注册信息 转换成本地缓存 serverList方法<br>定义 ServerListFilter<t> filter 过滤器  根据过滤条件过滤实例<br>定义 ServerListUpdater.UpdateAction   服务更新器具体实现<br>定义 ServerListUpdater 服务更新器 通过updateListOfServers 先获取要更新的列表–》根据过滤条件 过滤 –》 添加到serverList<br>ServerListUpdater 接口:<br>start 启动服务更新器<br>stop 关闭服务更新器<br>getLastUpdate 获取最后更新时间戳<br>getDurationSinceLastUpdateMs 获取上一次到现在的时间间隔<br>getNumberMissedCycles 获取错过的更新期数<br>getCoreThreads 获取核心线程数<br>PollingServerListUpdater实现类:默认实现 使用定时任务 定时从eureka server 拉取<br>EurekaNotificationServerListUpdater实现类:通过eureka事件监听 来驱动 </t></t></li>\n<li>ZoneAwareLoadBalancer extends DynamicServerListLoadBalancer 区域感知负载均衡器   <h4 id=\"RibbonClientConfiguration-ribbon-客户端配置\"><a href=\"#RibbonClientConfiguration-ribbon-客户端配置\" class=\"headerlink\" title=\"RibbonClientConfiguration ribbon 客户端配置\"></a>RibbonClientConfiguration ribbon 客户端配置</h4>ribbonClientConfig 设置ribbonClient 配置<br>ribbonRule 设置负载均衡 处理规则 实现<br>ribbonPing  设置负载均衡 ping 方式实现<br>ribbonServerList 设置实例列表<br>static RestClientRibbonConfiguration 配置ribbon的restClient相关参数<br>  ribbonRestClient 根据ribbon相关配置 获取 restClient<br>ribbonLoadBalancer 获取负载均衡器<br>ribbonServerListFilter 设置负载均衡服务的过滤器<br>ribbonLoadBalancerContext 负载均衡器上下文<br>retryHandler 重试处理<br>serverIntrospector 实例拦截器<h4 id=\"ServiceInstance-服务实例\"><a href=\"#ServiceInstance-服务实例\" class=\"headerlink\" title=\"ServiceInstance  服务实例\"></a>ServiceInstance  服务实例</h4>存储实例的 serviceId 、host、port、isSecure(是否使用https)、uri、metaData(元数据map)</li></ul>","site":{"data":{}},"excerpt":"","more":"<p>###ribbon负载均衡<br>必须存在<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Bean</span><br><span class=\"line\">@LoadBalanced//通过再restTemplate中添加拦截器 实现负载均衡、重写uri等功能</span><br><span class=\"line\">RestTemplate restTemplate()&#123;</span><br><span class=\"line\">    return new RestTemplate();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p>\n<h4 id=\"ServiceInstanceChooser-服务实例选择\"><a href=\"#ServiceInstanceChooser-服务实例选择\" class=\"headerlink\" title=\"ServiceInstanceChooser  服务实例选择\"></a>ServiceInstanceChooser  服务实例选择</h4><p>choose 根据serviceId选择一个实例</p>\n<p>####LoadBalancerClient extends ServiceInstanceChooser 负载均衡客户端<br>execute 获取负载均衡后的实例、服务id之后 执行请求<br>reconstructURI 根据实例重写uri 获取服务实例后 重写uri</p>\n<p>####LoadBalancerAutoConfiguration 自动配置类</p>\n<ul>\n<li>必须存在 restTemplate 通过http请求 添加拦截器来实现负载均衡</li>\n<li>必须存在 LoadBalancerClient 的实现<br>核心功能:<br>static class LoadBalancerInterceptorConfig通过这个配置类 配置负载均衡拦截器 向restTemplate添加负载均衡功能<br>ribbonInterceptor(LoadBalancerClient loadBalancerClient,LoadBalancerRequestFactory loadBalancerRequestFactory);  创建 负载均衡拦截器<br>restTemplateCustomizer(LoadBalancerInterceptor loadBalancerInterceptor);为restTemplate设置负载均衡拦截器<br>通过执行 负载均衡器的execute方法来选择实例和重写uri、执行请求</li>\n</ul>\n<p>static class RetryAutoConfiguration 自动重试机制配置<br>也是通过创建重试拦截器 添加到restTemplate中 来设置自动重试</p>\n<p>####ILoadBalancer<br>获取服务实例不是采用serviceInstancerChooser获取的，而是 netflix ribbon中的ILoadBalancer<br>查看 ribbon实现的LoadBalancerClient的getServer方法 就看得到<br>addServers 添加实例<br>chooseServer 根据负载均衡策略获取一个实例<br>markServerDown 标记实例不可用<br>getReachableServers 获取可用实例<br>getAllServers 获取所有实例<br>里面主要就是维护实例列表和获取列表方法、server类定义了一个服务节点的基本信息<br>实现类：</p>\n<ul>\n<li>AbstractLoadBalancer implements ILoadBalancer 负载均衡器 抽象类<br>抽象定义:<br>serverGroup：ALL(所有)、STATUS_UP(可用)、STATUS_NOT_UP(不可用)<br>实现的方法：<br>chooseServer 调用接口的chooseServer(null)  选择实例的时候忽略key的条件判断<br>抽象方法:<br>abstract getServerList(serverGroup) 根据实例组 枚举来获取 相应实例列表<br>abstract getLoadBalancerStats() 获取负载均衡 统计数据  </li>\n<li><p>NoOpLoadBalancer extends AbstractLoadBalancer   </p>\n</li>\n<li><p>BaseLoadBalancer extends AbstractLoadBalancer   实现了基本的负载均衡器<br>定义可用实例集合 allServerList 、upServerList<br>定义负载均衡统计信息 LoadBalancerStats<br>定义 IPing=null 需要注入<br>定义 IPingStrategy iping执行策略  默认使用 BaseLoadBalancer中的SerialPingStrategy 线性执行策略 通过重写IPingStrategy 来使用更高效率的 ping策略<br>定义 IRule 负载均衡处理规则  默认使用RoundRobinRule  线性负载均衡规则<br>启动 ping任务  默认pingIntervalSeconds=10s  使用Timer 执行定时任务   maxTotalPingTimeSeconds=5s最大执行时间<br>实现 ILoadBalancer 基本操作 addServers 、chooseServer、markServerDown、getReachAbleServers、getAllServers<br>定义 其他附加的的信息 例如 IClientConfig、changeListeners、serverStatusListeners等  </p>\n</li>\n<li>DynamicServerListLoadBalancer extends AbstractLoadBalancer    动态实例负载均衡器<br>定义 isSecure = false 默认不使用https<br>定义 useTunnel =false  是否使用隧道 估计是是否使用pptp协议隧道的意思<br>定义 ServerList<t> serverListsImpl 实例列表 serverList 有获取初始化服务列表和获取更新的服务列表两个方法  查看实现类 org.springframework.cloud.netflix.ribbon.eureka.EurekaRibbonClientConfiguration#ribbonServerList  DiscoveryEnabledNIWSServerList–》DomainExtractingServerList来构建默认的serverList  获取初始化服务方法、更新服务方法 通过#obtainServersViaDiscovery 方法实现 这个是客户端 获取服务端注册信息 转换成本地缓存 serverList方法<br>定义 ServerListFilter<t> filter 过滤器  根据过滤条件过滤实例<br>定义 ServerListUpdater.UpdateAction   服务更新器具体实现<br>定义 ServerListUpdater 服务更新器 通过updateListOfServers 先获取要更新的列表–》根据过滤条件 过滤 –》 添加到serverList<br>ServerListUpdater 接口:<br>start 启动服务更新器<br>stop 关闭服务更新器<br>getLastUpdate 获取最后更新时间戳<br>getDurationSinceLastUpdateMs 获取上一次到现在的时间间隔<br>getNumberMissedCycles 获取错过的更新期数<br>getCoreThreads 获取核心线程数<br>PollingServerListUpdater实现类:默认实现 使用定时任务 定时从eureka server 拉取<br>EurekaNotificationServerListUpdater实现类:通过eureka事件监听 来驱动 </t></t></li>\n<li>ZoneAwareLoadBalancer extends DynamicServerListLoadBalancer 区域感知负载均衡器   <h4 id=\"RibbonClientConfiguration-ribbon-客户端配置\"><a href=\"#RibbonClientConfiguration-ribbon-客户端配置\" class=\"headerlink\" title=\"RibbonClientConfiguration ribbon 客户端配置\"></a>RibbonClientConfiguration ribbon 客户端配置</h4>ribbonClientConfig 设置ribbonClient 配置<br>ribbonRule 设置负载均衡 处理规则 实现<br>ribbonPing  设置负载均衡 ping 方式实现<br>ribbonServerList 设置实例列表<br>static RestClientRibbonConfiguration 配置ribbon的restClient相关参数<br>  ribbonRestClient 根据ribbon相关配置 获取 restClient<br>ribbonLoadBalancer 获取负载均衡器<br>ribbonServerListFilter 设置负载均衡服务的过滤器<br>ribbonLoadBalancerContext 负载均衡器上下文<br>retryHandler 重试处理<br>serverIntrospector 实例拦截器<h4 id=\"ServiceInstance-服务实例\"><a href=\"#ServiceInstance-服务实例\" class=\"headerlink\" title=\"ServiceInstance  服务实例\"></a>ServiceInstance  服务实例</h4>存储实例的 serviceId 、host、port、isSecure(是否使用https)、uri、metaData(元数据map)</li></ul>"},{"title":"spring boot data jpa 扩充JpsRepository","abbrlink":"19f1b366","date":"2017-11-10T16:00:00.000Z","_content":"#####jpa扩充jpaRepository接口的方法 \n1:定义一个接口 继承于 JpaRepository\n2:定义接口实现类 \n3:定义 接口加载工厂方法\n4:repository 继承自定义接口\n5:启动类使用 自定义加载工厂\n####1:定义扩充方法接口\n```\n/**\n * 基于jpa的默认jpaRepository实现自己的repository接口\n * NoRepositoryBean 不会创建接口的实例  必须要加这个注解\n *\n * @author ming\n * @date 2017-08-28 11点\n */\n@NoRepositoryBean\npublic interface BaseRepository<T, ID extends Serializable> extends JpaRepository<T, ID> {\n\n    /**\n     * 使用原生sql 查询 list列表\n     *\n     * @author ming\n     * @date 2017-08-29 16点\n     */\n    List<T> findListByNativeSql(String sql, Class<T> clzss);\n}\n```\n#### 2:定义这个接口的实现类\n```\n\npublic class BaseRepositoryImpl<T, TD extends Serializable> extends SimpleJpaRepository<T, TD> implements BaseRepository<T, TD> {\n\n    private final EntityManager entityManager; //父类没有不带参数的构造方法，这里手动构造父类\n\n    public BaseRepositoryImpl(Class<T> domainClass, EntityManager entityManager) {\n        super(domainClass, entityManager);\n        this.entityManager = entityManager;\n    }\n\n    @Override\n    @SuppressWarnings(\"unchecked\")\n    public List<T> findListByNativeSql(String sql, Class<T> clzss) {\n        return entityManager.createNativeQuery(sql, clzss).getResultList();\n    }\n}\n```\n#### 3: 定义加载自定义repository接口工厂\n```\n\npublic class BaseRepositoryFactoryBean<R extends JpaRepository<T, ID>, T, ID extends Serializable> extends JpaRepositoryFactoryBean<R, T, ID> {\n\n    public BaseRepositoryFactoryBean(Class<? extends R> repositoryInterface) {\n        super(repositoryInterface);\n    }\n\n    @Override\n    protected RepositoryFactorySupport createRepositoryFactory(EntityManager entityManager) {\n        return new BaseRepositoryFactory(entityManager);\n    }\n\n    //创建一个内部类，该类不用在外部访问\n    private static class BaseRepositoryFactory<T, ID extends Serializable>\n            extends JpaRepositoryFactory {\n\n        private final EntityManager em;\n\n        public BaseRepositoryFactory(EntityManager em) {\n            super(em);\n            this.em = em;\n        }\n\n        //设置具体的实现类是BaseRepositoryImpl\n        @SuppressWarnings(\"unchecked\")\n        @Override\n        protected Object getTargetRepository(RepositoryInformation information) {\n            return new BaseRepositoryImpl<T, ID>((Class<T>) information.getDomainType(), em);\n        }\n\n        //设置具体的实现类的class\n        @Override\n        protected Class<?> getRepositoryBaseClass(RepositoryMetadata metadata) {\n            return BaseRepositoryImpl.class;\n        }\n    }\n}\n```\n#### 4:repository继承自定义接口\n```\n@Repository\npublic interface UserRepository extends BaseRepository<User, Long> {\n}\n```\n#### 5:启动类使用自定义加载工厂\n```\n/**\n * 启动类 要位于最顶层包  他只会扫描 同级包和子包\n *\n * @author ming\n * @date 2017-06-17\n */\n@SpringBootApplication(scanBasePackages = \"com.ming\", excludeName = {\"classpath*:application.yml\",\n        \"classpath*:application-aliyun.yml\"})\n// jpa使用自定义加载工厂\n@EnableJpaRepositories(repositoryFactoryBeanClass = BaseRepositoryFactoryBean.class)\npublic class Start {\n\n    public static void main(String[] args) {\n        SpringApplication.run(Start.class, args);\n    }\n}\n```\n#### 总结:和之前spring中使用jpa差不多套路  主要是自定义一个加载工厂 有点变化\n","source":"_posts/spring/spring-data-jpa自定义repository接口(统一扩展jpa使用方法).md","raw":"---\ntitle: spring boot data jpa 扩充JpsRepository\ncategories: 笔记\ntags:\n  - spring\nabbrlink: 19f1b366\ndate: 2017-11-11 00:00:00\n---\n#####jpa扩充jpaRepository接口的方法 \n1:定义一个接口 继承于 JpaRepository\n2:定义接口实现类 \n3:定义 接口加载工厂方法\n4:repository 继承自定义接口\n5:启动类使用 自定义加载工厂\n####1:定义扩充方法接口\n```\n/**\n * 基于jpa的默认jpaRepository实现自己的repository接口\n * NoRepositoryBean 不会创建接口的实例  必须要加这个注解\n *\n * @author ming\n * @date 2017-08-28 11点\n */\n@NoRepositoryBean\npublic interface BaseRepository<T, ID extends Serializable> extends JpaRepository<T, ID> {\n\n    /**\n     * 使用原生sql 查询 list列表\n     *\n     * @author ming\n     * @date 2017-08-29 16点\n     */\n    List<T> findListByNativeSql(String sql, Class<T> clzss);\n}\n```\n#### 2:定义这个接口的实现类\n```\n\npublic class BaseRepositoryImpl<T, TD extends Serializable> extends SimpleJpaRepository<T, TD> implements BaseRepository<T, TD> {\n\n    private final EntityManager entityManager; //父类没有不带参数的构造方法，这里手动构造父类\n\n    public BaseRepositoryImpl(Class<T> domainClass, EntityManager entityManager) {\n        super(domainClass, entityManager);\n        this.entityManager = entityManager;\n    }\n\n    @Override\n    @SuppressWarnings(\"unchecked\")\n    public List<T> findListByNativeSql(String sql, Class<T> clzss) {\n        return entityManager.createNativeQuery(sql, clzss).getResultList();\n    }\n}\n```\n#### 3: 定义加载自定义repository接口工厂\n```\n\npublic class BaseRepositoryFactoryBean<R extends JpaRepository<T, ID>, T, ID extends Serializable> extends JpaRepositoryFactoryBean<R, T, ID> {\n\n    public BaseRepositoryFactoryBean(Class<? extends R> repositoryInterface) {\n        super(repositoryInterface);\n    }\n\n    @Override\n    protected RepositoryFactorySupport createRepositoryFactory(EntityManager entityManager) {\n        return new BaseRepositoryFactory(entityManager);\n    }\n\n    //创建一个内部类，该类不用在外部访问\n    private static class BaseRepositoryFactory<T, ID extends Serializable>\n            extends JpaRepositoryFactory {\n\n        private final EntityManager em;\n\n        public BaseRepositoryFactory(EntityManager em) {\n            super(em);\n            this.em = em;\n        }\n\n        //设置具体的实现类是BaseRepositoryImpl\n        @SuppressWarnings(\"unchecked\")\n        @Override\n        protected Object getTargetRepository(RepositoryInformation information) {\n            return new BaseRepositoryImpl<T, ID>((Class<T>) information.getDomainType(), em);\n        }\n\n        //设置具体的实现类的class\n        @Override\n        protected Class<?> getRepositoryBaseClass(RepositoryMetadata metadata) {\n            return BaseRepositoryImpl.class;\n        }\n    }\n}\n```\n#### 4:repository继承自定义接口\n```\n@Repository\npublic interface UserRepository extends BaseRepository<User, Long> {\n}\n```\n#### 5:启动类使用自定义加载工厂\n```\n/**\n * 启动类 要位于最顶层包  他只会扫描 同级包和子包\n *\n * @author ming\n * @date 2017-06-17\n */\n@SpringBootApplication(scanBasePackages = \"com.ming\", excludeName = {\"classpath*:application.yml\",\n        \"classpath*:application-aliyun.yml\"})\n// jpa使用自定义加载工厂\n@EnableJpaRepositories(repositoryFactoryBeanClass = BaseRepositoryFactoryBean.class)\npublic class Start {\n\n    public static void main(String[] args) {\n        SpringApplication.run(Start.class, args);\n    }\n}\n```\n#### 总结:和之前spring中使用jpa差不多套路  主要是自定义一个加载工厂 有点变化\n","slug":"spring/spring-data-jpa自定义repository接口(统一扩展jpa使用方法)","published":1,"updated":"2018-08-17T08:10:03.923Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjo9uatyv004cmwczv11grvy9","content":"<p>#####jpa扩充jpaRepository接口的方法<br>1:定义一个接口 继承于 JpaRepository<br>2:定义接口实现类<br>3:定义 接口加载工厂方法<br>4:repository 继承自定义接口<br>5:启动类使用 自定义加载工厂</p><p>####1:定义扩充方法接口<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * 基于jpa的默认jpaRepository实现自己的repository接口</span><br><span class=\"line\"> * NoRepositoryBean 不会创建接口的实例  必须要加这个注解</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @author ming</span><br><span class=\"line\"> * @date 2017-08-28 11点</span><br><span class=\"line\"> */</span><br><span class=\"line\">@NoRepositoryBean</span><br><span class=\"line\">public interface BaseRepository&lt;T, ID extends Serializable&gt; extends JpaRepository&lt;T, ID&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 使用原生sql 查询 list列表</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @author ming</span><br><span class=\"line\">     * @date 2017-08-29 16点</span><br><span class=\"line\">     */</span><br><span class=\"line\">    List&lt;T&gt; findListByNativeSql(String sql, Class&lt;T&gt; clzss);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p>\n<h4 id=\"2-定义这个接口的实现类\"><a href=\"#2-定义这个接口的实现类\" class=\"headerlink\" title=\"2:定义这个接口的实现类\"></a>2:定义这个接口的实现类</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">public class BaseRepositoryImpl&lt;T, TD extends Serializable&gt; extends SimpleJpaRepository&lt;T, TD&gt; implements BaseRepository&lt;T, TD&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private final EntityManager entityManager; //父类没有不带参数的构造方法，这里手动构造父类</span><br><span class=\"line\"></span><br><span class=\"line\">    public BaseRepositoryImpl(Class&lt;T&gt; domainClass, EntityManager entityManager) &#123;</span><br><span class=\"line\">        super(domainClass, entityManager);</span><br><span class=\"line\">        this.entityManager = entityManager;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    @SuppressWarnings(&quot;unchecked&quot;)</span><br><span class=\"line\">    public List&lt;T&gt; findListByNativeSql(String sql, Class&lt;T&gt; clzss) &#123;</span><br><span class=\"line\">        return entityManager.createNativeQuery(sql, clzss).getResultList();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"3-定义加载自定义repository接口工厂\"><a href=\"#3-定义加载自定义repository接口工厂\" class=\"headerlink\" title=\"3: 定义加载自定义repository接口工厂\"></a>3: 定义加载自定义repository接口工厂</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">public class BaseRepositoryFactoryBean&lt;R extends JpaRepository&lt;T, ID&gt;, T, ID extends Serializable&gt; extends JpaRepositoryFactoryBean&lt;R, T, ID&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public BaseRepositoryFactoryBean(Class&lt;? extends R&gt; repositoryInterface) &#123;</span><br><span class=\"line\">        super(repositoryInterface);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected RepositoryFactorySupport createRepositoryFactory(EntityManager entityManager) &#123;</span><br><span class=\"line\">        return new BaseRepositoryFactory(entityManager);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    //创建一个内部类，该类不用在外部访问</span><br><span class=\"line\">    private static class BaseRepositoryFactory&lt;T, ID extends Serializable&gt;</span><br><span class=\"line\">            extends JpaRepositoryFactory &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        private final EntityManager em;</span><br><span class=\"line\"></span><br><span class=\"line\">        public BaseRepositoryFactory(EntityManager em) &#123;</span><br><span class=\"line\">            super(em);</span><br><span class=\"line\">            this.em = em;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        //设置具体的实现类是BaseRepositoryImpl</span><br><span class=\"line\">        @SuppressWarnings(&quot;unchecked&quot;)</span><br><span class=\"line\">        @Override</span><br><span class=\"line\">        protected Object getTargetRepository(RepositoryInformation information) &#123;</span><br><span class=\"line\">            return new BaseRepositoryImpl&lt;T, ID&gt;((Class&lt;T&gt;) information.getDomainType(), em);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        //设置具体的实现类的class</span><br><span class=\"line\">        @Override</span><br><span class=\"line\">        protected Class&lt;?&gt; getRepositoryBaseClass(RepositoryMetadata metadata) &#123;</span><br><span class=\"line\">            return BaseRepositoryImpl.class;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"4-repository继承自定义接口\"><a href=\"#4-repository继承自定义接口\" class=\"headerlink\" title=\"4:repository继承自定义接口\"></a>4:repository继承自定义接口</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Repository</span><br><span class=\"line\">public interface UserRepository extends BaseRepository&lt;User, Long&gt; &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"5-启动类使用自定义加载工厂\"><a href=\"#5-启动类使用自定义加载工厂\" class=\"headerlink\" title=\"5:启动类使用自定义加载工厂\"></a>5:启动类使用自定义加载工厂</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * 启动类 要位于最顶层包  他只会扫描 同级包和子包</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @author ming</span><br><span class=\"line\"> * @date 2017-06-17</span><br><span class=\"line\"> */</span><br><span class=\"line\">@SpringBootApplication(scanBasePackages = &quot;com.ming&quot;, excludeName = &#123;&quot;classpath*:application.yml&quot;,</span><br><span class=\"line\">        &quot;classpath*:application-aliyun.yml&quot;&#125;)</span><br><span class=\"line\">// jpa使用自定义加载工厂</span><br><span class=\"line\">@EnableJpaRepositories(repositoryFactoryBeanClass = BaseRepositoryFactoryBean.class)</span><br><span class=\"line\">public class Start &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        SpringApplication.run(Start.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"总结-和之前spring中使用jpa差不多套路-主要是自定义一个加载工厂-有点变化\"><a href=\"#总结-和之前spring中使用jpa差不多套路-主要是自定义一个加载工厂-有点变化\" class=\"headerlink\" title=\"总结:和之前spring中使用jpa差不多套路  主要是自定义一个加载工厂 有点变化\"></a>总结:和之前spring中使用jpa差不多套路  主要是自定义一个加载工厂 有点变化</h4>","site":{"data":{}},"excerpt":"","more":"<p>#####jpa扩充jpaRepository接口的方法<br>1:定义一个接口 继承于 JpaRepository<br>2:定义接口实现类<br>3:定义 接口加载工厂方法<br>4:repository 继承自定义接口<br>5:启动类使用 自定义加载工厂</p><p>####1:定义扩充方法接口<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * 基于jpa的默认jpaRepository实现自己的repository接口</span><br><span class=\"line\"> * NoRepositoryBean 不会创建接口的实例  必须要加这个注解</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @author ming</span><br><span class=\"line\"> * @date 2017-08-28 11点</span><br><span class=\"line\"> */</span><br><span class=\"line\">@NoRepositoryBean</span><br><span class=\"line\">public interface BaseRepository&lt;T, ID extends Serializable&gt; extends JpaRepository&lt;T, ID&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 使用原生sql 查询 list列表</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @author ming</span><br><span class=\"line\">     * @date 2017-08-29 16点</span><br><span class=\"line\">     */</span><br><span class=\"line\">    List&lt;T&gt; findListByNativeSql(String sql, Class&lt;T&gt; clzss);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p>\n<h4 id=\"2-定义这个接口的实现类\"><a href=\"#2-定义这个接口的实现类\" class=\"headerlink\" title=\"2:定义这个接口的实现类\"></a>2:定义这个接口的实现类</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">public class BaseRepositoryImpl&lt;T, TD extends Serializable&gt; extends SimpleJpaRepository&lt;T, TD&gt; implements BaseRepository&lt;T, TD&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private final EntityManager entityManager; //父类没有不带参数的构造方法，这里手动构造父类</span><br><span class=\"line\"></span><br><span class=\"line\">    public BaseRepositoryImpl(Class&lt;T&gt; domainClass, EntityManager entityManager) &#123;</span><br><span class=\"line\">        super(domainClass, entityManager);</span><br><span class=\"line\">        this.entityManager = entityManager;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    @SuppressWarnings(&quot;unchecked&quot;)</span><br><span class=\"line\">    public List&lt;T&gt; findListByNativeSql(String sql, Class&lt;T&gt; clzss) &#123;</span><br><span class=\"line\">        return entityManager.createNativeQuery(sql, clzss).getResultList();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"3-定义加载自定义repository接口工厂\"><a href=\"#3-定义加载自定义repository接口工厂\" class=\"headerlink\" title=\"3: 定义加载自定义repository接口工厂\"></a>3: 定义加载自定义repository接口工厂</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">public class BaseRepositoryFactoryBean&lt;R extends JpaRepository&lt;T, ID&gt;, T, ID extends Serializable&gt; extends JpaRepositoryFactoryBean&lt;R, T, ID&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public BaseRepositoryFactoryBean(Class&lt;? extends R&gt; repositoryInterface) &#123;</span><br><span class=\"line\">        super(repositoryInterface);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected RepositoryFactorySupport createRepositoryFactory(EntityManager entityManager) &#123;</span><br><span class=\"line\">        return new BaseRepositoryFactory(entityManager);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    //创建一个内部类，该类不用在外部访问</span><br><span class=\"line\">    private static class BaseRepositoryFactory&lt;T, ID extends Serializable&gt;</span><br><span class=\"line\">            extends JpaRepositoryFactory &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        private final EntityManager em;</span><br><span class=\"line\"></span><br><span class=\"line\">        public BaseRepositoryFactory(EntityManager em) &#123;</span><br><span class=\"line\">            super(em);</span><br><span class=\"line\">            this.em = em;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        //设置具体的实现类是BaseRepositoryImpl</span><br><span class=\"line\">        @SuppressWarnings(&quot;unchecked&quot;)</span><br><span class=\"line\">        @Override</span><br><span class=\"line\">        protected Object getTargetRepository(RepositoryInformation information) &#123;</span><br><span class=\"line\">            return new BaseRepositoryImpl&lt;T, ID&gt;((Class&lt;T&gt;) information.getDomainType(), em);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        //设置具体的实现类的class</span><br><span class=\"line\">        @Override</span><br><span class=\"line\">        protected Class&lt;?&gt; getRepositoryBaseClass(RepositoryMetadata metadata) &#123;</span><br><span class=\"line\">            return BaseRepositoryImpl.class;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"4-repository继承自定义接口\"><a href=\"#4-repository继承自定义接口\" class=\"headerlink\" title=\"4:repository继承自定义接口\"></a>4:repository继承自定义接口</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Repository</span><br><span class=\"line\">public interface UserRepository extends BaseRepository&lt;User, Long&gt; &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"5-启动类使用自定义加载工厂\"><a href=\"#5-启动类使用自定义加载工厂\" class=\"headerlink\" title=\"5:启动类使用自定义加载工厂\"></a>5:启动类使用自定义加载工厂</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * 启动类 要位于最顶层包  他只会扫描 同级包和子包</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @author ming</span><br><span class=\"line\"> * @date 2017-06-17</span><br><span class=\"line\"> */</span><br><span class=\"line\">@SpringBootApplication(scanBasePackages = &quot;com.ming&quot;, excludeName = &#123;&quot;classpath*:application.yml&quot;,</span><br><span class=\"line\">        &quot;classpath*:application-aliyun.yml&quot;&#125;)</span><br><span class=\"line\">// jpa使用自定义加载工厂</span><br><span class=\"line\">@EnableJpaRepositories(repositoryFactoryBeanClass = BaseRepositoryFactoryBean.class)</span><br><span class=\"line\">public class Start &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        SpringApplication.run(Start.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"总结-和之前spring中使用jpa差不多套路-主要是自定义一个加载工厂-有点变化\"><a href=\"#总结-和之前spring中使用jpa差不多套路-主要是自定义一个加载工厂-有点变化\" class=\"headerlink\" title=\"总结:和之前spring中使用jpa差不多套路  主要是自定义一个加载工厂 有点变化\"></a>总结:和之前spring中使用jpa差不多套路  主要是自定义一个加载工厂 有点变化</h4>"},{"title":"spring resourc笔记","abbrlink":"d7cd3a26","date":"2017-11-10T16:00:00.000Z","_content":"\n##1:resource接口\n###### Resource是spring 中加载资源的顶级接口 主要方法有:\n* boolean exists(); 是否存在资源\n* boolean isOpen(); 资源是否打开 是否开启\n* URL getURL(); 返回可抽象成url的资源的URL对象\n* FIle getFile()；返回底层资源的文件流\n* InputStream getInputStream;返回资源的输入流 \n\n   \n###### resource接口关系图：\n![image.png](http://upload-images.jianshu.io/upload_images/3905525-b6f7babb70039c85.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n* WritableResource： 可写资源接口\n* ByteArrayResource:二进制数组表示资源\n* ClassPathResource:类路径下资源\n* FileSystemResource:文件系统中的资源(绝对路径)\n* InputStreamResource：用输入流返回表示资源\n* ServletContextResource: web容器上下文资源\n* UrlResource:能够访问任何能用URL表示的资源(文件系统、http、ftp等 )\n* PathResource:java7.0以上 能够访问任何通过URL、Path、系统文件路径表示的资源  \n\n\n###### spring可以通过资源地址的特殊标识符来访问相应资源如下表 支持Ant风格去描述资源地址\n![image.png](http://upload-images.jianshu.io/upload_images/3905525-c959b0858c8911c5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n```\n在项目中 会出现 'classpath:*.xml' 和'classpath*:*.xml'  在：之前有个* 这个意思是在所有的目录下面寻找  \n举个例子: 一个项目分为 a(web模块)、b(common模块)、core(核心模块)\n如果不带*  那么只会加载一个模块的配置  其它模块配置就没加载  \n所以 写的时候 带上*   比较合适 \n```\n\n\n###### 资源加载\nspring 提供一套加载资源的方法  \n如下图：\n![image.png](http://upload-images.jianshu.io/upload_images/3905525-3da84466dc8b60e0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n* 通过ResourceLoader来加载Resource\n有一个getResource(String location) 只支持按照特殊字符自动匹配 resource类型 但是不支持Ant风格\n* ResourcePatternResolver  扩展ResourceLoader\n有一个getResources(String locationPattern) 支持按照特殊字符自动匹配、支持Ant匹配资源\n* PathMatchingResourcePatternResolver 是spring提供的实现类 如果有必要 可以自己实现 (我觉得自己实现的可能性很小、但是不排除坑爹的地方需要自己实现)\n##总结:\n###### 1:特殊字符 classpath、file这样的是spring 提供的 其中classpath 最好使用的时候带上* 避免加载不到资源 \n###### 2:Ant风格 其实就是\n* ' ? '代表一个任意字符 \n*  ' * '代表匹配文件中的任意多个字符  \n*  ' ** ' 代表匹配多层路径\n###### 3: Resource 系列可以单独抽出来 当作加载资源的utils来用 \n###### 4: Resource操作文件的时候 尽量使用getInputStream()  因为getFile()不能加载到jar中的资源\n","source":"_posts/spring/spring-resource相关笔记.md","raw":"---\ntitle: spring resourc笔记\ncategories: 笔记\ntags:\n  - spring\nabbrlink: d7cd3a26\ndate: 2017-11-11 00:00:00\n---\n\n##1:resource接口\n###### Resource是spring 中加载资源的顶级接口 主要方法有:\n* boolean exists(); 是否存在资源\n* boolean isOpen(); 资源是否打开 是否开启\n* URL getURL(); 返回可抽象成url的资源的URL对象\n* FIle getFile()；返回底层资源的文件流\n* InputStream getInputStream;返回资源的输入流 \n\n   \n###### resource接口关系图：\n![image.png](http://upload-images.jianshu.io/upload_images/3905525-b6f7babb70039c85.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n* WritableResource： 可写资源接口\n* ByteArrayResource:二进制数组表示资源\n* ClassPathResource:类路径下资源\n* FileSystemResource:文件系统中的资源(绝对路径)\n* InputStreamResource：用输入流返回表示资源\n* ServletContextResource: web容器上下文资源\n* UrlResource:能够访问任何能用URL表示的资源(文件系统、http、ftp等 )\n* PathResource:java7.0以上 能够访问任何通过URL、Path、系统文件路径表示的资源  \n\n\n###### spring可以通过资源地址的特殊标识符来访问相应资源如下表 支持Ant风格去描述资源地址\n![image.png](http://upload-images.jianshu.io/upload_images/3905525-c959b0858c8911c5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n```\n在项目中 会出现 'classpath:*.xml' 和'classpath*:*.xml'  在：之前有个* 这个意思是在所有的目录下面寻找  \n举个例子: 一个项目分为 a(web模块)、b(common模块)、core(核心模块)\n如果不带*  那么只会加载一个模块的配置  其它模块配置就没加载  \n所以 写的时候 带上*   比较合适 \n```\n\n\n###### 资源加载\nspring 提供一套加载资源的方法  \n如下图：\n![image.png](http://upload-images.jianshu.io/upload_images/3905525-3da84466dc8b60e0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n* 通过ResourceLoader来加载Resource\n有一个getResource(String location) 只支持按照特殊字符自动匹配 resource类型 但是不支持Ant风格\n* ResourcePatternResolver  扩展ResourceLoader\n有一个getResources(String locationPattern) 支持按照特殊字符自动匹配、支持Ant匹配资源\n* PathMatchingResourcePatternResolver 是spring提供的实现类 如果有必要 可以自己实现 (我觉得自己实现的可能性很小、但是不排除坑爹的地方需要自己实现)\n##总结:\n###### 1:特殊字符 classpath、file这样的是spring 提供的 其中classpath 最好使用的时候带上* 避免加载不到资源 \n###### 2:Ant风格 其实就是\n* ' ? '代表一个任意字符 \n*  ' * '代表匹配文件中的任意多个字符  \n*  ' ** ' 代表匹配多层路径\n###### 3: Resource 系列可以单独抽出来 当作加载资源的utils来用 \n###### 4: Resource操作文件的时候 尽量使用getInputStream()  因为getFile()不能加载到jar中的资源\n","slug":"spring/spring-resource相关笔记","published":1,"updated":"2018-08-17T08:10:03.923Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjo9uatyw004fmwcze0a7qvpt","content":"<p>##1:resource接口</p><h6 id=\"Resource是spring-中加载资源的顶级接口-主要方法有\"><a href=\"#Resource是spring-中加载资源的顶级接口-主要方法有\" class=\"headerlink\" title=\"Resource是spring 中加载资源的顶级接口 主要方法有:\"></a>Resource是spring 中加载资源的顶级接口 主要方法有:</h6><ul><li>boolean exists(); 是否存在资源</li><li>boolean isOpen(); 资源是否打开 是否开启</li><li>URL getURL(); 返回可抽象成url的资源的URL对象</li><li>FIle getFile()；返回底层资源的文件流</li><li>InputStream getInputStream;返回资源的输入流</li></ul><h6 id=\"resource接口关系图：\"><a href=\"#resource接口关系图：\" class=\"headerlink\" title=\"resource接口关系图：\"></a>resource接口关系图：</h6><p><img src=\"http://upload-images.jianshu.io/upload_images/3905525-b6f7babb70039c85.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p><ul><li>WritableResource： 可写资源接口</li><li>ByteArrayResource:二进制数组表示资源</li><li>ClassPathResource:类路径下资源</li><li>FileSystemResource:文件系统中的资源(绝对路径)</li><li>InputStreamResource：用输入流返回表示资源</li><li>ServletContextResource: web容器上下文资源</li><li>UrlResource:能够访问任何能用URL表示的资源(文件系统、http、ftp等 )</li><li>PathResource:java7.0以上 能够访问任何通过URL、Path、系统文件路径表示的资源</li></ul><h6 id=\"spring可以通过资源地址的特殊标识符来访问相应资源如下表-支持Ant风格去描述资源地址\"><a href=\"#spring可以通过资源地址的特殊标识符来访问相应资源如下表-支持Ant风格去描述资源地址\" class=\"headerlink\" title=\"spring可以通过资源地址的特殊标识符来访问相应资源如下表 支持Ant风格去描述资源地址\"></a>spring可以通过资源地址的特殊标识符来访问相应资源如下表 支持Ant风格去描述资源地址</h6><p><img src=\"http://upload-images.jianshu.io/upload_images/3905525-c959b0858c8911c5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"><br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在项目中 会出现 &apos;classpath:*.xml&apos; 和&apos;classpath*:*.xml&apos;  在：之前有个* 这个意思是在所有的目录下面寻找  </span><br><span class=\"line\">举个例子: 一个项目分为 a(web模块)、b(common模块)、core(核心模块)</span><br><span class=\"line\">如果不带*  那么只会加载一个模块的配置  其它模块配置就没加载  </span><br><span class=\"line\">所以 写的时候 带上*   比较合适</span><br></pre></td></tr></table></figure><p></p>\n<h6 id=\"资源加载\"><a href=\"#资源加载\" class=\"headerlink\" title=\"资源加载\"></a>资源加载</h6><p>spring 提供一套加载资源的方法<br>如下图：<br><img src=\"http://upload-images.jianshu.io/upload_images/3905525-3da84466dc8b60e0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<ul>\n<li>通过ResourceLoader来加载Resource<br>有一个getResource(String location) 只支持按照特殊字符自动匹配 resource类型 但是不支持Ant风格</li>\n<li>ResourcePatternResolver  扩展ResourceLoader<br>有一个getResources(String locationPattern) 支持按照特殊字符自动匹配、支持Ant匹配资源</li>\n<li>PathMatchingResourcePatternResolver 是spring提供的实现类 如果有必要 可以自己实现 (我觉得自己实现的可能性很小、但是不排除坑爹的地方需要自己实现)<br>##总结:<h6 id=\"1-特殊字符-classpath、file这样的是spring-提供的-其中classpath-最好使用的时候带上-避免加载不到资源\"><a href=\"#1-特殊字符-classpath、file这样的是spring-提供的-其中classpath-最好使用的时候带上-避免加载不到资源\" class=\"headerlink\" title=\"1:特殊字符 classpath、file这样的是spring 提供的 其中classpath 最好使用的时候带上* 避免加载不到资源\"></a>1:特殊字符 classpath、file这样的是spring 提供的 其中classpath 最好使用的时候带上* 避免加载不到资源</h6><h6 id=\"2-Ant风格-其实就是\"><a href=\"#2-Ant风格-其实就是\" class=\"headerlink\" title=\"2:Ant风格 其实就是\"></a>2:Ant风格 其实就是</h6></li>\n<li>‘ ? ‘代表一个任意字符 </li>\n<li>‘ * ‘代表匹配文件中的任意多个字符  </li>\n<li>‘ ** ‘ 代表匹配多层路径<h6 id=\"3-Resource-系列可以单独抽出来-当作加载资源的utils来用\"><a href=\"#3-Resource-系列可以单独抽出来-当作加载资源的utils来用\" class=\"headerlink\" title=\"3: Resource 系列可以单独抽出来 当作加载资源的utils来用\"></a>3: Resource 系列可以单独抽出来 当作加载资源的utils来用</h6><h6 id=\"4-Resource操作文件的时候-尽量使用getInputStream-因为getFile-不能加载到jar中的资源\"><a href=\"#4-Resource操作文件的时候-尽量使用getInputStream-因为getFile-不能加载到jar中的资源\" class=\"headerlink\" title=\"4: Resource操作文件的时候 尽量使用getInputStream()  因为getFile()不能加载到jar中的资源\"></a>4: Resource操作文件的时候 尽量使用getInputStream()  因为getFile()不能加载到jar中的资源</h6></li></ul>","site":{"data":{}},"excerpt":"","more":"<p>##1:resource接口</p><h6 id=\"Resource是spring-中加载资源的顶级接口-主要方法有\"><a href=\"#Resource是spring-中加载资源的顶级接口-主要方法有\" class=\"headerlink\" title=\"Resource是spring 中加载资源的顶级接口 主要方法有:\"></a>Resource是spring 中加载资源的顶级接口 主要方法有:</h6><ul><li>boolean exists(); 是否存在资源</li><li>boolean isOpen(); 资源是否打开 是否开启</li><li>URL getURL(); 返回可抽象成url的资源的URL对象</li><li>FIle getFile()；返回底层资源的文件流</li><li>InputStream getInputStream;返回资源的输入流</li></ul><h6 id=\"resource接口关系图：\"><a href=\"#resource接口关系图：\" class=\"headerlink\" title=\"resource接口关系图：\"></a>resource接口关系图：</h6><p><img src=\"http://upload-images.jianshu.io/upload_images/3905525-b6f7babb70039c85.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p><ul><li>WritableResource： 可写资源接口</li><li>ByteArrayResource:二进制数组表示资源</li><li>ClassPathResource:类路径下资源</li><li>FileSystemResource:文件系统中的资源(绝对路径)</li><li>InputStreamResource：用输入流返回表示资源</li><li>ServletContextResource: web容器上下文资源</li><li>UrlResource:能够访问任何能用URL表示的资源(文件系统、http、ftp等 )</li><li>PathResource:java7.0以上 能够访问任何通过URL、Path、系统文件路径表示的资源</li></ul><h6 id=\"spring可以通过资源地址的特殊标识符来访问相应资源如下表-支持Ant风格去描述资源地址\"><a href=\"#spring可以通过资源地址的特殊标识符来访问相应资源如下表-支持Ant风格去描述资源地址\" class=\"headerlink\" title=\"spring可以通过资源地址的特殊标识符来访问相应资源如下表 支持Ant风格去描述资源地址\"></a>spring可以通过资源地址的特殊标识符来访问相应资源如下表 支持Ant风格去描述资源地址</h6><p><img src=\"http://upload-images.jianshu.io/upload_images/3905525-c959b0858c8911c5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"><br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在项目中 会出现 &apos;classpath:*.xml&apos; 和&apos;classpath*:*.xml&apos;  在：之前有个* 这个意思是在所有的目录下面寻找  </span><br><span class=\"line\">举个例子: 一个项目分为 a(web模块)、b(common模块)、core(核心模块)</span><br><span class=\"line\">如果不带*  那么只会加载一个模块的配置  其它模块配置就没加载  </span><br><span class=\"line\">所以 写的时候 带上*   比较合适</span><br></pre></td></tr></table></figure><p></p>\n<h6 id=\"资源加载\"><a href=\"#资源加载\" class=\"headerlink\" title=\"资源加载\"></a>资源加载</h6><p>spring 提供一套加载资源的方法<br>如下图：<br><img src=\"http://upload-images.jianshu.io/upload_images/3905525-3da84466dc8b60e0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<ul>\n<li>通过ResourceLoader来加载Resource<br>有一个getResource(String location) 只支持按照特殊字符自动匹配 resource类型 但是不支持Ant风格</li>\n<li>ResourcePatternResolver  扩展ResourceLoader<br>有一个getResources(String locationPattern) 支持按照特殊字符自动匹配、支持Ant匹配资源</li>\n<li>PathMatchingResourcePatternResolver 是spring提供的实现类 如果有必要 可以自己实现 (我觉得自己实现的可能性很小、但是不排除坑爹的地方需要自己实现)<br>##总结:<h6 id=\"1-特殊字符-classpath、file这样的是spring-提供的-其中classpath-最好使用的时候带上-避免加载不到资源\"><a href=\"#1-特殊字符-classpath、file这样的是spring-提供的-其中classpath-最好使用的时候带上-避免加载不到资源\" class=\"headerlink\" title=\"1:特殊字符 classpath、file这样的是spring 提供的 其中classpath 最好使用的时候带上* 避免加载不到资源\"></a>1:特殊字符 classpath、file这样的是spring 提供的 其中classpath 最好使用的时候带上* 避免加载不到资源</h6><h6 id=\"2-Ant风格-其实就是\"><a href=\"#2-Ant风格-其实就是\" class=\"headerlink\" title=\"2:Ant风格 其实就是\"></a>2:Ant风格 其实就是</h6></li>\n<li>‘ ? ‘代表一个任意字符 </li>\n<li>‘ * ‘代表匹配文件中的任意多个字符  </li>\n<li>‘ ** ‘ 代表匹配多层路径<h6 id=\"3-Resource-系列可以单独抽出来-当作加载资源的utils来用\"><a href=\"#3-Resource-系列可以单独抽出来-当作加载资源的utils来用\" class=\"headerlink\" title=\"3: Resource 系列可以单独抽出来 当作加载资源的utils来用\"></a>3: Resource 系列可以单独抽出来 当作加载资源的utils来用</h6><h6 id=\"4-Resource操作文件的时候-尽量使用getInputStream-因为getFile-不能加载到jar中的资源\"><a href=\"#4-Resource操作文件的时候-尽量使用getInputStream-因为getFile-不能加载到jar中的资源\" class=\"headerlink\" title=\"4: Resource操作文件的时候 尽量使用getInputStream()  因为getFile()不能加载到jar中的资源\"></a>4: Resource操作文件的时候 尽量使用getInputStream()  因为getFile()不能加载到jar中的资源</h6></li></ul>"},{"title":"spring bean manager utils 笔记","abbrlink":"bb781540","date":"2017-11-10T16:00:00.000Z","_content":"在使用spring 中总有地方要求获取bean或者注册bean  所以找了部分资料 抄袭了几波  合并成如下工具类 \n主要功能 :\n* 获取bean\n* 手动注册bean\n* 删除手工注册的bean\n```\npackage com.ming.utils;\n\nimport com.google.common.collect.Maps;\nimport org.apache.commons.lang3.StringUtils;\nimport org.springframework.beans.BeansException;\nimport org.springframework.beans.factory.DisposableBean;\nimport org.springframework.beans.factory.support.BeanDefinitionBuilder;\nimport org.springframework.beans.factory.support.DefaultListableBeanFactory;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.ApplicationContextAware;\nimport org.springframework.core.Ordered;\nimport org.springframework.core.annotation.Order;\nimport org.springframework.stereotype.Component;\n\nimport java.lang.annotation.Annotation;\nimport java.util.Map;\nimport java.util.Set;\n\n/**\n * 对操作spring applicationcontext提供基本封装  方便使用\n * 使用order 最先加载\n * 预期在容器最开始加载 暂时这个无法生效  如果需要这个bean 优先加载 请调整依赖 来调整bean加载顺序\n *\n * @author ming\n * @date 11:00\n */\n@Component\n@Order(Ordered.HIGHEST_PRECEDENCE)\npublic class SpringBeanManager implements ApplicationContextAware, DisposableBean {\n\n\n    /**\n     * spring bean上下文\n     *\n     * @author ming\n     * @date 11:00\n     */\n    private static ApplicationContext applicationContext;\n    /**\n     * 获取BeanFactory  进行动态注册bean 删除bean\n     *\n     * @author ming\n     * @date 2017-11-10 15:51\n     */\n    private static DefaultListableBeanFactory defaultListableBeanFactory;\n\n    /**\n     * 手动注册的bean 名称列表  必须保证 每个使用它的地方 是一样的\n     *\n     * @author ming\n     * @date 2017-11-10 15:54\n     */\n    private static volatile Map<String, Class<?>> manualRegisterBeanMap = Maps.newConcurrentMap();\n\n\n    /**\n     * 获取 手动注入的 bean名称\n     *\n     * @return Set<String>\n     * @author ming\n     * @date 2017-12-12 13:46\n     */\n    public static Set<String> getManualRegisterBeanNameSet() {\n        return manualRegisterBeanMap.keySet();\n    }\n\n    /**\n     * 动态注入bean\n     *\n     * @param beanName\n     * @param beanClazz\n     * @author ming\n     * @date 2017-11-09 16:50\n     */\n    public static void registerBean(String beanName, Class<?> beanClazz) {\n        assert StringUtils.isNotEmpty(beanName);\n        assert beanClazz != null;\n        checkDefaultListableBeanFactory();\n        //创建beanBuilder\n        BeanDefinitionBuilder beanDefinitionBuilder = BeanDefinitionBuilder.genericBeanDefinition(beanClazz);\n        //注册bean\n        defaultListableBeanFactory.registerBeanDefinition(beanName, beanDefinitionBuilder.getBeanDefinition());\n        //添加手工注册的beanName 到集合\n        manualRegisterBeanMap.put(beanName, beanClazz);\n    }\n\n    /**\n     * 删除bean\n     *\n     * @param beanName\n     * @author ming\n     * @date 2017-11-10 15:45\n     */\n    public static void removeBean(String beanName) {\n        assert StringUtils.isNotEmpty(beanName);\n        //当试图删除 非手动注册的bean的时候\n        if (!manualRegisterBeanMap.keySet().contains(beanName)) {\n            throw new UnsupportedOperationException(\"不能删除非手动注册的bean\");\n        }\n        checkDefaultListableBeanFactory();\n        defaultListableBeanFactory.removeBeanDefinition(beanName);\n        manualRegisterBeanMap.remove(beanName);\n    }\n\n    /**\n     * 根据名称 获取bean\n     *\n     * @param name 注册的bean名称\n     * @return T\n     * @author ming\n     * @date 11:19\n     */\n    @SuppressWarnings(\"unchecked\")\n    public static <T> T getBean(String name) {\n        checkApplicationContext();\n        return (T) applicationContext.getBean(name);\n    }\n\n    /**\n     * 根据类型 获取bean\n     *\n     * @param clazz 注册bean的类型\n     * @return T\n     * @author ming\n     * @date 11:20\n     */\n    public static <T> T getBean(Class<T> clazz) {\n        checkApplicationContext();\n        return applicationContext.getBean(clazz);\n    }\n\n    public static <T> T getBean(String beanName, Class<T> clazz) {\n        checkApplicationContext();\n        return applicationContext.getBean(beanName, clazz);\n    }\n\n    /**\n     * 获取application中所有注册的bean 列表\n     *\n     * @return String[]\n     * @author ming\n     * @date 2017-08-28 16点\n     */\n    public static String[] getBeanDefinitionNames() {\n        checkApplicationContext();\n        return applicationContext.getBeanDefinitionNames();\n    }\n\n    /**\n     * 统计application中所有bean的数量\n     *\n     * @return Integer\n     * @author ming\n     * @date 2017-08-28 17点\n     */\n    public static Integer getBeanDefinitionCount() {\n        checkApplicationContext();\n        return applicationContext.getBeanDefinitionCount();\n    }\n\n    /**\n     * 根据注解获取 beanNameList\n     *\n     * @param annotation\n     * @return String[]\n     * @author ming\n     * @date 2017-08-28 16点\n     */\n    public static String[] getBeanNameListByAnnotation(Class<? extends Annotation> annotation) {\n        checkApplicationContext();\n        return applicationContext.getBeanNamesForAnnotation(annotation);\n    }\n\n    /**\n     * 根据bean类型获取所有的bean\n     *\n     * @param clazz\n     * @return String[]\n     * @author ming\n     * @date 2017-08-28 16点\n     */\n    public static String[] getBeanNamesForType(Class clazz) {\n        checkApplicationContext();\n        return applicationContext.getBeanNamesForType(clazz);\n    }\n\n    /**\n     * 根据类型 获取 所有这个类型的bean  map 键为bean名字  值为注册的bean\n     *\n     * @param clazz\n     * @return Map\n     * @author ming\n     * @date 2017-08-28 16点\n     */\n    public static <T> Map<String, T> getBeansOfType(Class<T> clazz) {\n        checkApplicationContext();\n        return applicationContext.getBeansOfType(clazz);\n    }\n\n    /**\n     * 检测applicationcontext是否可用\n     *\n     * @author ming\n     * @date 2017-08-28 17点\n     */\n    private static void checkApplicationContext() {\n        if (applicationContext == null) {\n            throw new NullPointerException(\"spring applicationContext is null !!!\");\n        }\n    }\n\n    /**\n     * 检测 defaultListableBeanFactory\n     *\n     * @author ming\n     * @date 2017-11-10 15:47\n     */\n    private static void checkDefaultListableBeanFactory() {\n        if (defaultListableBeanFactory == null) {\n            throw new NullPointerException(\" spring defaultListableBeanFactory is null !!!\");\n        }\n    }\n\n    private static void updateApplicationContext(ApplicationContext applicationContext) {\n        SpringBeanManager.applicationContext = applicationContext;\n    }\n\n    private static void updateDefaultListableBeanFactory(DefaultListableBeanFactory defaultListableBeanFactory) {\n        SpringBeanManager.defaultListableBeanFactory = defaultListableBeanFactory;\n    }\n\n    /**\n     * 销毁方法\n     *\n     * @author ming\n     * @date 2017-08-28 17点\n     */\n    @Override\n    public void destroy() throws Exception {\n        updateApplicationContext(null);\n        updateDefaultListableBeanFactory(null);\n    }\n\n    /**\n     * 设置上下文\n     *\n     * @author ming\n     * @date 11:17\n     */\n    @Override\n    public void setApplicationContext(ApplicationContext applicationContext) throws BeansException {\n        updateApplicationContext(applicationContext);\n        //获取 bean factory\n        updateDefaultListableBeanFactory((DefaultListableBeanFactory) applicationContext.getAutowireCapableBeanFactory());\n    }\n}\n\n```\n####总结:看这个工具类的实现 就清晰的知道了 beanFactory的一些功能 和之前学习的applicationContext、beanFactory 联系起来了 \n","source":"_posts/spring/spring-操作bean的工具类(SpringBeanManager)笔记.md","raw":"---\ntitle: spring bean manager utils 笔记\ncategories: 笔记\ntags:\n  - spring\nabbrlink: bb781540\ndate: 2017-11-11 00:00:00\n---\n在使用spring 中总有地方要求获取bean或者注册bean  所以找了部分资料 抄袭了几波  合并成如下工具类 \n主要功能 :\n* 获取bean\n* 手动注册bean\n* 删除手工注册的bean\n```\npackage com.ming.utils;\n\nimport com.google.common.collect.Maps;\nimport org.apache.commons.lang3.StringUtils;\nimport org.springframework.beans.BeansException;\nimport org.springframework.beans.factory.DisposableBean;\nimport org.springframework.beans.factory.support.BeanDefinitionBuilder;\nimport org.springframework.beans.factory.support.DefaultListableBeanFactory;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.ApplicationContextAware;\nimport org.springframework.core.Ordered;\nimport org.springframework.core.annotation.Order;\nimport org.springframework.stereotype.Component;\n\nimport java.lang.annotation.Annotation;\nimport java.util.Map;\nimport java.util.Set;\n\n/**\n * 对操作spring applicationcontext提供基本封装  方便使用\n * 使用order 最先加载\n * 预期在容器最开始加载 暂时这个无法生效  如果需要这个bean 优先加载 请调整依赖 来调整bean加载顺序\n *\n * @author ming\n * @date 11:00\n */\n@Component\n@Order(Ordered.HIGHEST_PRECEDENCE)\npublic class SpringBeanManager implements ApplicationContextAware, DisposableBean {\n\n\n    /**\n     * spring bean上下文\n     *\n     * @author ming\n     * @date 11:00\n     */\n    private static ApplicationContext applicationContext;\n    /**\n     * 获取BeanFactory  进行动态注册bean 删除bean\n     *\n     * @author ming\n     * @date 2017-11-10 15:51\n     */\n    private static DefaultListableBeanFactory defaultListableBeanFactory;\n\n    /**\n     * 手动注册的bean 名称列表  必须保证 每个使用它的地方 是一样的\n     *\n     * @author ming\n     * @date 2017-11-10 15:54\n     */\n    private static volatile Map<String, Class<?>> manualRegisterBeanMap = Maps.newConcurrentMap();\n\n\n    /**\n     * 获取 手动注入的 bean名称\n     *\n     * @return Set<String>\n     * @author ming\n     * @date 2017-12-12 13:46\n     */\n    public static Set<String> getManualRegisterBeanNameSet() {\n        return manualRegisterBeanMap.keySet();\n    }\n\n    /**\n     * 动态注入bean\n     *\n     * @param beanName\n     * @param beanClazz\n     * @author ming\n     * @date 2017-11-09 16:50\n     */\n    public static void registerBean(String beanName, Class<?> beanClazz) {\n        assert StringUtils.isNotEmpty(beanName);\n        assert beanClazz != null;\n        checkDefaultListableBeanFactory();\n        //创建beanBuilder\n        BeanDefinitionBuilder beanDefinitionBuilder = BeanDefinitionBuilder.genericBeanDefinition(beanClazz);\n        //注册bean\n        defaultListableBeanFactory.registerBeanDefinition(beanName, beanDefinitionBuilder.getBeanDefinition());\n        //添加手工注册的beanName 到集合\n        manualRegisterBeanMap.put(beanName, beanClazz);\n    }\n\n    /**\n     * 删除bean\n     *\n     * @param beanName\n     * @author ming\n     * @date 2017-11-10 15:45\n     */\n    public static void removeBean(String beanName) {\n        assert StringUtils.isNotEmpty(beanName);\n        //当试图删除 非手动注册的bean的时候\n        if (!manualRegisterBeanMap.keySet().contains(beanName)) {\n            throw new UnsupportedOperationException(\"不能删除非手动注册的bean\");\n        }\n        checkDefaultListableBeanFactory();\n        defaultListableBeanFactory.removeBeanDefinition(beanName);\n        manualRegisterBeanMap.remove(beanName);\n    }\n\n    /**\n     * 根据名称 获取bean\n     *\n     * @param name 注册的bean名称\n     * @return T\n     * @author ming\n     * @date 11:19\n     */\n    @SuppressWarnings(\"unchecked\")\n    public static <T> T getBean(String name) {\n        checkApplicationContext();\n        return (T) applicationContext.getBean(name);\n    }\n\n    /**\n     * 根据类型 获取bean\n     *\n     * @param clazz 注册bean的类型\n     * @return T\n     * @author ming\n     * @date 11:20\n     */\n    public static <T> T getBean(Class<T> clazz) {\n        checkApplicationContext();\n        return applicationContext.getBean(clazz);\n    }\n\n    public static <T> T getBean(String beanName, Class<T> clazz) {\n        checkApplicationContext();\n        return applicationContext.getBean(beanName, clazz);\n    }\n\n    /**\n     * 获取application中所有注册的bean 列表\n     *\n     * @return String[]\n     * @author ming\n     * @date 2017-08-28 16点\n     */\n    public static String[] getBeanDefinitionNames() {\n        checkApplicationContext();\n        return applicationContext.getBeanDefinitionNames();\n    }\n\n    /**\n     * 统计application中所有bean的数量\n     *\n     * @return Integer\n     * @author ming\n     * @date 2017-08-28 17点\n     */\n    public static Integer getBeanDefinitionCount() {\n        checkApplicationContext();\n        return applicationContext.getBeanDefinitionCount();\n    }\n\n    /**\n     * 根据注解获取 beanNameList\n     *\n     * @param annotation\n     * @return String[]\n     * @author ming\n     * @date 2017-08-28 16点\n     */\n    public static String[] getBeanNameListByAnnotation(Class<? extends Annotation> annotation) {\n        checkApplicationContext();\n        return applicationContext.getBeanNamesForAnnotation(annotation);\n    }\n\n    /**\n     * 根据bean类型获取所有的bean\n     *\n     * @param clazz\n     * @return String[]\n     * @author ming\n     * @date 2017-08-28 16点\n     */\n    public static String[] getBeanNamesForType(Class clazz) {\n        checkApplicationContext();\n        return applicationContext.getBeanNamesForType(clazz);\n    }\n\n    /**\n     * 根据类型 获取 所有这个类型的bean  map 键为bean名字  值为注册的bean\n     *\n     * @param clazz\n     * @return Map\n     * @author ming\n     * @date 2017-08-28 16点\n     */\n    public static <T> Map<String, T> getBeansOfType(Class<T> clazz) {\n        checkApplicationContext();\n        return applicationContext.getBeansOfType(clazz);\n    }\n\n    /**\n     * 检测applicationcontext是否可用\n     *\n     * @author ming\n     * @date 2017-08-28 17点\n     */\n    private static void checkApplicationContext() {\n        if (applicationContext == null) {\n            throw new NullPointerException(\"spring applicationContext is null !!!\");\n        }\n    }\n\n    /**\n     * 检测 defaultListableBeanFactory\n     *\n     * @author ming\n     * @date 2017-11-10 15:47\n     */\n    private static void checkDefaultListableBeanFactory() {\n        if (defaultListableBeanFactory == null) {\n            throw new NullPointerException(\" spring defaultListableBeanFactory is null !!!\");\n        }\n    }\n\n    private static void updateApplicationContext(ApplicationContext applicationContext) {\n        SpringBeanManager.applicationContext = applicationContext;\n    }\n\n    private static void updateDefaultListableBeanFactory(DefaultListableBeanFactory defaultListableBeanFactory) {\n        SpringBeanManager.defaultListableBeanFactory = defaultListableBeanFactory;\n    }\n\n    /**\n     * 销毁方法\n     *\n     * @author ming\n     * @date 2017-08-28 17点\n     */\n    @Override\n    public void destroy() throws Exception {\n        updateApplicationContext(null);\n        updateDefaultListableBeanFactory(null);\n    }\n\n    /**\n     * 设置上下文\n     *\n     * @author ming\n     * @date 11:17\n     */\n    @Override\n    public void setApplicationContext(ApplicationContext applicationContext) throws BeansException {\n        updateApplicationContext(applicationContext);\n        //获取 bean factory\n        updateDefaultListableBeanFactory((DefaultListableBeanFactory) applicationContext.getAutowireCapableBeanFactory());\n    }\n}\n\n```\n####总结:看这个工具类的实现 就清晰的知道了 beanFactory的一些功能 和之前学习的applicationContext、beanFactory 联系起来了 \n","slug":"spring/spring-操作bean的工具类(SpringBeanManager)笔记","published":1,"updated":"2018-09-29T02:34:50.906Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjo9uatyx004jmwczc5wxfwln","content":"<p>在使用spring 中总有地方要求获取bean或者注册bean 所以找了部分资料 抄袭了几波 合并成如下工具类<br>主要功能 :</p><ul><li>获取bean</li><li>手动注册bean</li><li>删除手工注册的bean<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.ming.utils;</span><br><span class=\"line\"></span><br><span class=\"line\">import com.google.common.collect.Maps;</span><br><span class=\"line\">import org.apache.commons.lang3.StringUtils;</span><br><span class=\"line\">import org.springframework.beans.BeansException;</span><br><span class=\"line\">import org.springframework.beans.factory.DisposableBean;</span><br><span class=\"line\">import org.springframework.beans.factory.support.BeanDefinitionBuilder;</span><br><span class=\"line\">import org.springframework.beans.factory.support.DefaultListableBeanFactory;</span><br><span class=\"line\">import org.springframework.context.ApplicationContext;</span><br><span class=\"line\">import org.springframework.context.ApplicationContextAware;</span><br><span class=\"line\">import org.springframework.core.Ordered;</span><br><span class=\"line\">import org.springframework.core.annotation.Order;</span><br><span class=\"line\">import org.springframework.stereotype.Component;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.lang.annotation.Annotation;</span><br><span class=\"line\">import java.util.Map;</span><br><span class=\"line\">import java.util.Set;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 对操作spring applicationcontext提供基本封装  方便使用</span><br><span class=\"line\"> * 使用order 最先加载</span><br><span class=\"line\"> * 预期在容器最开始加载 暂时这个无法生效  如果需要这个bean 优先加载 请调整依赖 来调整bean加载顺序</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @author ming</span><br><span class=\"line\"> * @date 11:00</span><br><span class=\"line\"> */</span><br><span class=\"line\">@Component</span><br><span class=\"line\">@Order(Ordered.HIGHEST_PRECEDENCE)</span><br><span class=\"line\">public class SpringBeanManager implements ApplicationContextAware, DisposableBean &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * spring bean上下文</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @author ming</span><br><span class=\"line\">     * @date 11:00</span><br><span class=\"line\">     */</span><br><span class=\"line\">    private static ApplicationContext applicationContext;</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 获取BeanFactory  进行动态注册bean 删除bean</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @author ming</span><br><span class=\"line\">     * @date 2017-11-10 15:51</span><br><span class=\"line\">     */</span><br><span class=\"line\">    private static DefaultListableBeanFactory defaultListableBeanFactory;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 手动注册的bean 名称列表  必须保证 每个使用它的地方 是一样的</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @author ming</span><br><span class=\"line\">     * @date 2017-11-10 15:54</span><br><span class=\"line\">     */</span><br><span class=\"line\">    private static volatile Map&lt;String, Class&lt;?&gt;&gt; manualRegisterBeanMap = Maps.newConcurrentMap();</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 获取 手动注入的 bean名称</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @return Set&lt;String&gt;</span><br><span class=\"line\">     * @author ming</span><br><span class=\"line\">     * @date 2017-12-12 13:46</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static Set&lt;String&gt; getManualRegisterBeanNameSet() &#123;</span><br><span class=\"line\">        return manualRegisterBeanMap.keySet();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 动态注入bean</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param beanName</span><br><span class=\"line\">     * @param beanClazz</span><br><span class=\"line\">     * @author ming</span><br><span class=\"line\">     * @date 2017-11-09 16:50</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static void registerBean(String beanName, Class&lt;?&gt; beanClazz) &#123;</span><br><span class=\"line\">        assert StringUtils.isNotEmpty(beanName);</span><br><span class=\"line\">        assert beanClazz != null;</span><br><span class=\"line\">        checkDefaultListableBeanFactory();</span><br><span class=\"line\">        //创建beanBuilder</span><br><span class=\"line\">        BeanDefinitionBuilder beanDefinitionBuilder = BeanDefinitionBuilder.genericBeanDefinition(beanClazz);</span><br><span class=\"line\">        //注册bean</span><br><span class=\"line\">        defaultListableBeanFactory.registerBeanDefinition(beanName, beanDefinitionBuilder.getBeanDefinition());</span><br><span class=\"line\">        //添加手工注册的beanName 到集合</span><br><span class=\"line\">        manualRegisterBeanMap.put(beanName, beanClazz);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 删除bean</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param beanName</span><br><span class=\"line\">     * @author ming</span><br><span class=\"line\">     * @date 2017-11-10 15:45</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static void removeBean(String beanName) &#123;</span><br><span class=\"line\">        assert StringUtils.isNotEmpty(beanName);</span><br><span class=\"line\">        //当试图删除 非手动注册的bean的时候</span><br><span class=\"line\">        if (!manualRegisterBeanMap.keySet().contains(beanName)) &#123;</span><br><span class=\"line\">            throw new UnsupportedOperationException(&quot;不能删除非手动注册的bean&quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        checkDefaultListableBeanFactory();</span><br><span class=\"line\">        defaultListableBeanFactory.removeBeanDefinition(beanName);</span><br><span class=\"line\">        manualRegisterBeanMap.remove(beanName);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 根据名称 获取bean</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param name 注册的bean名称</span><br><span class=\"line\">     * @return T</span><br><span class=\"line\">     * @author ming</span><br><span class=\"line\">     * @date 11:19</span><br><span class=\"line\">     */</span><br><span class=\"line\">    @SuppressWarnings(&quot;unchecked&quot;)</span><br><span class=\"line\">    public static &lt;T&gt; T getBean(String name) &#123;</span><br><span class=\"line\">        checkApplicationContext();</span><br><span class=\"line\">        return (T) applicationContext.getBean(name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 根据类型 获取bean</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param clazz 注册bean的类型</span><br><span class=\"line\">     * @return T</span><br><span class=\"line\">     * @author ming</span><br><span class=\"line\">     * @date 11:20</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static &lt;T&gt; T getBean(Class&lt;T&gt; clazz) &#123;</span><br><span class=\"line\">        checkApplicationContext();</span><br><span class=\"line\">        return applicationContext.getBean(clazz);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static &lt;T&gt; T getBean(String beanName, Class&lt;T&gt; clazz) &#123;</span><br><span class=\"line\">        checkApplicationContext();</span><br><span class=\"line\">        return applicationContext.getBean(beanName, clazz);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 获取application中所有注册的bean 列表</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @return String[]</span><br><span class=\"line\">     * @author ming</span><br><span class=\"line\">     * @date 2017-08-28 16点</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static String[] getBeanDefinitionNames() &#123;</span><br><span class=\"line\">        checkApplicationContext();</span><br><span class=\"line\">        return applicationContext.getBeanDefinitionNames();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 统计application中所有bean的数量</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @return Integer</span><br><span class=\"line\">     * @author ming</span><br><span class=\"line\">     * @date 2017-08-28 17点</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static Integer getBeanDefinitionCount() &#123;</span><br><span class=\"line\">        checkApplicationContext();</span><br><span class=\"line\">        return applicationContext.getBeanDefinitionCount();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 根据注解获取 beanNameList</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param annotation</span><br><span class=\"line\">     * @return String[]</span><br><span class=\"line\">     * @author ming</span><br><span class=\"line\">     * @date 2017-08-28 16点</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static String[] getBeanNameListByAnnotation(Class&lt;? extends Annotation&gt; annotation) &#123;</span><br><span class=\"line\">        checkApplicationContext();</span><br><span class=\"line\">        return applicationContext.getBeanNamesForAnnotation(annotation);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 根据bean类型获取所有的bean</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param clazz</span><br><span class=\"line\">     * @return String[]</span><br><span class=\"line\">     * @author ming</span><br><span class=\"line\">     * @date 2017-08-28 16点</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static String[] getBeanNamesForType(Class clazz) &#123;</span><br><span class=\"line\">        checkApplicationContext();</span><br><span class=\"line\">        return applicationContext.getBeanNamesForType(clazz);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 根据类型 获取 所有这个类型的bean  map 键为bean名字  值为注册的bean</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param clazz</span><br><span class=\"line\">     * @return Map</span><br><span class=\"line\">     * @author ming</span><br><span class=\"line\">     * @date 2017-08-28 16点</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static &lt;T&gt; Map&lt;String, T&gt; getBeansOfType(Class&lt;T&gt; clazz) &#123;</span><br><span class=\"line\">        checkApplicationContext();</span><br><span class=\"line\">        return applicationContext.getBeansOfType(clazz);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 检测applicationcontext是否可用</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @author ming</span><br><span class=\"line\">     * @date 2017-08-28 17点</span><br><span class=\"line\">     */</span><br><span class=\"line\">    private static void checkApplicationContext() &#123;</span><br><span class=\"line\">        if (applicationContext == null) &#123;</span><br><span class=\"line\">            throw new NullPointerException(&quot;spring applicationContext is null !!!&quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 检测 defaultListableBeanFactory</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @author ming</span><br><span class=\"line\">     * @date 2017-11-10 15:47</span><br><span class=\"line\">     */</span><br><span class=\"line\">    private static void checkDefaultListableBeanFactory() &#123;</span><br><span class=\"line\">        if (defaultListableBeanFactory == null) &#123;</span><br><span class=\"line\">            throw new NullPointerException(&quot; spring defaultListableBeanFactory is null !!!&quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private static void updateApplicationContext(ApplicationContext applicationContext) &#123;</span><br><span class=\"line\">        SpringBeanManager.applicationContext = applicationContext;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private static void updateDefaultListableBeanFactory(DefaultListableBeanFactory defaultListableBeanFactory) &#123;</span><br><span class=\"line\">        SpringBeanManager.defaultListableBeanFactory = defaultListableBeanFactory;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 销毁方法</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @author ming</span><br><span class=\"line\">     * @date 2017-08-28 17点</span><br><span class=\"line\">     */</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void destroy() throws Exception &#123;</span><br><span class=\"line\">        updateApplicationContext(null);</span><br><span class=\"line\">        updateDefaultListableBeanFactory(null);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 设置上下文</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @author ming</span><br><span class=\"line\">     * @date 11:17</span><br><span class=\"line\">     */</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void setApplicationContext(ApplicationContext applicationContext) throws BeansException &#123;</span><br><span class=\"line\">        updateApplicationContext(applicationContext);</span><br><span class=\"line\">        //获取 bean factory</span><br><span class=\"line\">        updateDefaultListableBeanFactory((DefaultListableBeanFactory) applicationContext.getAutowireCapableBeanFactory());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>####总结:看这个工具类的实现 就清晰的知道了 beanFactory的一些功能 和之前学习的applicationContext、beanFactory 联系起来了</p>","site":{"data":{}},"excerpt":"","more":"<p>在使用spring 中总有地方要求获取bean或者注册bean 所以找了部分资料 抄袭了几波 合并成如下工具类<br>主要功能 :</p><ul><li>获取bean</li><li>手动注册bean</li><li>删除手工注册的bean<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.ming.utils;</span><br><span class=\"line\"></span><br><span class=\"line\">import com.google.common.collect.Maps;</span><br><span class=\"line\">import org.apache.commons.lang3.StringUtils;</span><br><span class=\"line\">import org.springframework.beans.BeansException;</span><br><span class=\"line\">import org.springframework.beans.factory.DisposableBean;</span><br><span class=\"line\">import org.springframework.beans.factory.support.BeanDefinitionBuilder;</span><br><span class=\"line\">import org.springframework.beans.factory.support.DefaultListableBeanFactory;</span><br><span class=\"line\">import org.springframework.context.ApplicationContext;</span><br><span class=\"line\">import org.springframework.context.ApplicationContextAware;</span><br><span class=\"line\">import org.springframework.core.Ordered;</span><br><span class=\"line\">import org.springframework.core.annotation.Order;</span><br><span class=\"line\">import org.springframework.stereotype.Component;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.lang.annotation.Annotation;</span><br><span class=\"line\">import java.util.Map;</span><br><span class=\"line\">import java.util.Set;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 对操作spring applicationcontext提供基本封装  方便使用</span><br><span class=\"line\"> * 使用order 最先加载</span><br><span class=\"line\"> * 预期在容器最开始加载 暂时这个无法生效  如果需要这个bean 优先加载 请调整依赖 来调整bean加载顺序</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @author ming</span><br><span class=\"line\"> * @date 11:00</span><br><span class=\"line\"> */</span><br><span class=\"line\">@Component</span><br><span class=\"line\">@Order(Ordered.HIGHEST_PRECEDENCE)</span><br><span class=\"line\">public class SpringBeanManager implements ApplicationContextAware, DisposableBean &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * spring bean上下文</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @author ming</span><br><span class=\"line\">     * @date 11:00</span><br><span class=\"line\">     */</span><br><span class=\"line\">    private static ApplicationContext applicationContext;</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 获取BeanFactory  进行动态注册bean 删除bean</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @author ming</span><br><span class=\"line\">     * @date 2017-11-10 15:51</span><br><span class=\"line\">     */</span><br><span class=\"line\">    private static DefaultListableBeanFactory defaultListableBeanFactory;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 手动注册的bean 名称列表  必须保证 每个使用它的地方 是一样的</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @author ming</span><br><span class=\"line\">     * @date 2017-11-10 15:54</span><br><span class=\"line\">     */</span><br><span class=\"line\">    private static volatile Map&lt;String, Class&lt;?&gt;&gt; manualRegisterBeanMap = Maps.newConcurrentMap();</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 获取 手动注入的 bean名称</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @return Set&lt;String&gt;</span><br><span class=\"line\">     * @author ming</span><br><span class=\"line\">     * @date 2017-12-12 13:46</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static Set&lt;String&gt; getManualRegisterBeanNameSet() &#123;</span><br><span class=\"line\">        return manualRegisterBeanMap.keySet();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 动态注入bean</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param beanName</span><br><span class=\"line\">     * @param beanClazz</span><br><span class=\"line\">     * @author ming</span><br><span class=\"line\">     * @date 2017-11-09 16:50</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static void registerBean(String beanName, Class&lt;?&gt; beanClazz) &#123;</span><br><span class=\"line\">        assert StringUtils.isNotEmpty(beanName);</span><br><span class=\"line\">        assert beanClazz != null;</span><br><span class=\"line\">        checkDefaultListableBeanFactory();</span><br><span class=\"line\">        //创建beanBuilder</span><br><span class=\"line\">        BeanDefinitionBuilder beanDefinitionBuilder = BeanDefinitionBuilder.genericBeanDefinition(beanClazz);</span><br><span class=\"line\">        //注册bean</span><br><span class=\"line\">        defaultListableBeanFactory.registerBeanDefinition(beanName, beanDefinitionBuilder.getBeanDefinition());</span><br><span class=\"line\">        //添加手工注册的beanName 到集合</span><br><span class=\"line\">        manualRegisterBeanMap.put(beanName, beanClazz);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 删除bean</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param beanName</span><br><span class=\"line\">     * @author ming</span><br><span class=\"line\">     * @date 2017-11-10 15:45</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static void removeBean(String beanName) &#123;</span><br><span class=\"line\">        assert StringUtils.isNotEmpty(beanName);</span><br><span class=\"line\">        //当试图删除 非手动注册的bean的时候</span><br><span class=\"line\">        if (!manualRegisterBeanMap.keySet().contains(beanName)) &#123;</span><br><span class=\"line\">            throw new UnsupportedOperationException(&quot;不能删除非手动注册的bean&quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        checkDefaultListableBeanFactory();</span><br><span class=\"line\">        defaultListableBeanFactory.removeBeanDefinition(beanName);</span><br><span class=\"line\">        manualRegisterBeanMap.remove(beanName);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 根据名称 获取bean</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param name 注册的bean名称</span><br><span class=\"line\">     * @return T</span><br><span class=\"line\">     * @author ming</span><br><span class=\"line\">     * @date 11:19</span><br><span class=\"line\">     */</span><br><span class=\"line\">    @SuppressWarnings(&quot;unchecked&quot;)</span><br><span class=\"line\">    public static &lt;T&gt; T getBean(String name) &#123;</span><br><span class=\"line\">        checkApplicationContext();</span><br><span class=\"line\">        return (T) applicationContext.getBean(name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 根据类型 获取bean</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param clazz 注册bean的类型</span><br><span class=\"line\">     * @return T</span><br><span class=\"line\">     * @author ming</span><br><span class=\"line\">     * @date 11:20</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static &lt;T&gt; T getBean(Class&lt;T&gt; clazz) &#123;</span><br><span class=\"line\">        checkApplicationContext();</span><br><span class=\"line\">        return applicationContext.getBean(clazz);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static &lt;T&gt; T getBean(String beanName, Class&lt;T&gt; clazz) &#123;</span><br><span class=\"line\">        checkApplicationContext();</span><br><span class=\"line\">        return applicationContext.getBean(beanName, clazz);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 获取application中所有注册的bean 列表</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @return String[]</span><br><span class=\"line\">     * @author ming</span><br><span class=\"line\">     * @date 2017-08-28 16点</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static String[] getBeanDefinitionNames() &#123;</span><br><span class=\"line\">        checkApplicationContext();</span><br><span class=\"line\">        return applicationContext.getBeanDefinitionNames();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 统计application中所有bean的数量</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @return Integer</span><br><span class=\"line\">     * @author ming</span><br><span class=\"line\">     * @date 2017-08-28 17点</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static Integer getBeanDefinitionCount() &#123;</span><br><span class=\"line\">        checkApplicationContext();</span><br><span class=\"line\">        return applicationContext.getBeanDefinitionCount();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 根据注解获取 beanNameList</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param annotation</span><br><span class=\"line\">     * @return String[]</span><br><span class=\"line\">     * @author ming</span><br><span class=\"line\">     * @date 2017-08-28 16点</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static String[] getBeanNameListByAnnotation(Class&lt;? extends Annotation&gt; annotation) &#123;</span><br><span class=\"line\">        checkApplicationContext();</span><br><span class=\"line\">        return applicationContext.getBeanNamesForAnnotation(annotation);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 根据bean类型获取所有的bean</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param clazz</span><br><span class=\"line\">     * @return String[]</span><br><span class=\"line\">     * @author ming</span><br><span class=\"line\">     * @date 2017-08-28 16点</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static String[] getBeanNamesForType(Class clazz) &#123;</span><br><span class=\"line\">        checkApplicationContext();</span><br><span class=\"line\">        return applicationContext.getBeanNamesForType(clazz);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 根据类型 获取 所有这个类型的bean  map 键为bean名字  值为注册的bean</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param clazz</span><br><span class=\"line\">     * @return Map</span><br><span class=\"line\">     * @author ming</span><br><span class=\"line\">     * @date 2017-08-28 16点</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static &lt;T&gt; Map&lt;String, T&gt; getBeansOfType(Class&lt;T&gt; clazz) &#123;</span><br><span class=\"line\">        checkApplicationContext();</span><br><span class=\"line\">        return applicationContext.getBeansOfType(clazz);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 检测applicationcontext是否可用</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @author ming</span><br><span class=\"line\">     * @date 2017-08-28 17点</span><br><span class=\"line\">     */</span><br><span class=\"line\">    private static void checkApplicationContext() &#123;</span><br><span class=\"line\">        if (applicationContext == null) &#123;</span><br><span class=\"line\">            throw new NullPointerException(&quot;spring applicationContext is null !!!&quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 检测 defaultListableBeanFactory</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @author ming</span><br><span class=\"line\">     * @date 2017-11-10 15:47</span><br><span class=\"line\">     */</span><br><span class=\"line\">    private static void checkDefaultListableBeanFactory() &#123;</span><br><span class=\"line\">        if (defaultListableBeanFactory == null) &#123;</span><br><span class=\"line\">            throw new NullPointerException(&quot; spring defaultListableBeanFactory is null !!!&quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private static void updateApplicationContext(ApplicationContext applicationContext) &#123;</span><br><span class=\"line\">        SpringBeanManager.applicationContext = applicationContext;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private static void updateDefaultListableBeanFactory(DefaultListableBeanFactory defaultListableBeanFactory) &#123;</span><br><span class=\"line\">        SpringBeanManager.defaultListableBeanFactory = defaultListableBeanFactory;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 销毁方法</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @author ming</span><br><span class=\"line\">     * @date 2017-08-28 17点</span><br><span class=\"line\">     */</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void destroy() throws Exception &#123;</span><br><span class=\"line\">        updateApplicationContext(null);</span><br><span class=\"line\">        updateDefaultListableBeanFactory(null);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 设置上下文</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @author ming</span><br><span class=\"line\">     * @date 11:17</span><br><span class=\"line\">     */</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void setApplicationContext(ApplicationContext applicationContext) throws BeansException &#123;</span><br><span class=\"line\">        updateApplicationContext(applicationContext);</span><br><span class=\"line\">        //获取 bean factory</span><br><span class=\"line\">        updateDefaultListableBeanFactory((DefaultListableBeanFactory) applicationContext.getAutowireCapableBeanFactory());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>####总结:看这个工具类的实现 就清晰的知道了 beanFactory的一些功能 和之前学习的applicationContext、beanFactory 联系起来了</p>"},{"title":"spring boot 全局处理异常笔记","abbrlink":"869ed45a","date":"2017-11-10T16:00:00.000Z","_content":"\n####全局异常处理 \n在web中 异常也分为系统异常和业务异常 可以通过增强控制器 来对异常进行全局处理 \n1:创建业务异常类\n```\n\nimport lombok.Data;\n\nimport java.util.Map;\n\n/**\n * 自定义服务异常\n *\n * @author ming\n * @date 2017-06-24\n */\n@Data\npublic class ServiceException extends RuntimeException {\n\n    /**\n     * 异常编码\n     */\n    private int code;\n    /**\n     * 消息\n     */\n    private String msg;\n    /**\n     * 扩展参数\n     */\n    private Map<String, Object> extParams;\n\n\n}\n\n```\n2:创建业务异常枚举类 \n```\n\nimport lombok.Getter;\n\n/**\n * 错误码表\n *\n * @author ming\n * @date 2017-07-16\n */\n@Getter\npublic enum ExceptionConstants {\n    ERROR(1,\"业务异常\");\n\n    private Integer num;\n    private String content;\n\n\n    ExceptionConstants(Integer num, String content) {\n        this.num = num;\n        this.content = content;\n    }\n}\n```\n3:如何抛出异常\n这里粗糙的直接抛出枚举值  \n如果有需要 可以建立业务异常服务 统一管理错误码和错误信息  动态的变更业务异常提示\n也可以继承 细分异常  例如 有的是参数错误 、有的是请求未授权之类的 \n```\n        throw new ServiceException(ExceptionConstants.ERROR.getNum(),ExceptionConstants.ERROR.getContent());\n```\n4:建立增强controller 全局异常捕捉\n这里通过@ControllerAdvice增强 \n通过@ExceptionHandler 捕捉异常\n```\n\nimport com.ming.base.exception.ServiceException;\nimport lombok.extern.slf4j.Slf4j;\nimport org.apache.commons.lang3.exception.ExceptionUtils;\nimport org.springframework.web.bind.annotation.ControllerAdvice;\nimport org.springframework.web.bind.annotation.ExceptionHandler;\nimport org.springframework.web.bind.annotation.ResponseBody;\n\nimport javax.servlet.http.HttpServletRequest;\n\n/**\n * 全局异常处理\n *\n * @author ming\n * @date 2017-11-10 13:58\n */\n@ControllerAdvice\n@Slf4j\npublic class BaseGlobalExceptionHandler {\n\n\n    @ExceptionHandler(value = Exception.class)\n    @ResponseBody\n    public ReturnJsonBody defaultErrorHandler(HttpServletRequest req, Exception e) throws Exception {\n        ReturnJsonBody rb = new ReturnJsonBody();\n        if (e instanceof ServiceException) {\n            ServiceException se = (ServiceException) e;\n            rb.setCode(se.getCode());\n            rb.setMsg(se.getMsg());\n        } else {\n            rb.setCode(1);\n            rb.setMsg(\"系统异常\");\n            e.printStackTrace();\n            rb.setStack(ExceptionUtils.getStackTrace(e));\n            /*try {\n                addServerExceptionLog(req, e);\n            } catch (Exception ex) {\n                LOGGER.error(\"add server exception error {}\", ExceptionUtils.getStackTrace(ex));\n            }\n*/\n        }\n        return rb;\n    }\n\n    // public abstract void addServerExceptionLog(HttpServletRequest request, Throwable throwable);\n\n}\n```\n####总结:通过增强controller 来捕捉全局mvc异常  这样第一可以返回指定格式错误信息  第二 可以捕捉业务异常 \n","source":"_posts/spring/springboot-mvc返回全局处理异常.md","raw":"---\ntitle: spring boot 全局处理异常笔记\ncategories: 笔记\ntags:\n  - spring\nabbrlink: 869ed45a\ndate: 2017-11-11 00:00:00\n---\n\n####全局异常处理 \n在web中 异常也分为系统异常和业务异常 可以通过增强控制器 来对异常进行全局处理 \n1:创建业务异常类\n```\n\nimport lombok.Data;\n\nimport java.util.Map;\n\n/**\n * 自定义服务异常\n *\n * @author ming\n * @date 2017-06-24\n */\n@Data\npublic class ServiceException extends RuntimeException {\n\n    /**\n     * 异常编码\n     */\n    private int code;\n    /**\n     * 消息\n     */\n    private String msg;\n    /**\n     * 扩展参数\n     */\n    private Map<String, Object> extParams;\n\n\n}\n\n```\n2:创建业务异常枚举类 \n```\n\nimport lombok.Getter;\n\n/**\n * 错误码表\n *\n * @author ming\n * @date 2017-07-16\n */\n@Getter\npublic enum ExceptionConstants {\n    ERROR(1,\"业务异常\");\n\n    private Integer num;\n    private String content;\n\n\n    ExceptionConstants(Integer num, String content) {\n        this.num = num;\n        this.content = content;\n    }\n}\n```\n3:如何抛出异常\n这里粗糙的直接抛出枚举值  \n如果有需要 可以建立业务异常服务 统一管理错误码和错误信息  动态的变更业务异常提示\n也可以继承 细分异常  例如 有的是参数错误 、有的是请求未授权之类的 \n```\n        throw new ServiceException(ExceptionConstants.ERROR.getNum(),ExceptionConstants.ERROR.getContent());\n```\n4:建立增强controller 全局异常捕捉\n这里通过@ControllerAdvice增强 \n通过@ExceptionHandler 捕捉异常\n```\n\nimport com.ming.base.exception.ServiceException;\nimport lombok.extern.slf4j.Slf4j;\nimport org.apache.commons.lang3.exception.ExceptionUtils;\nimport org.springframework.web.bind.annotation.ControllerAdvice;\nimport org.springframework.web.bind.annotation.ExceptionHandler;\nimport org.springframework.web.bind.annotation.ResponseBody;\n\nimport javax.servlet.http.HttpServletRequest;\n\n/**\n * 全局异常处理\n *\n * @author ming\n * @date 2017-11-10 13:58\n */\n@ControllerAdvice\n@Slf4j\npublic class BaseGlobalExceptionHandler {\n\n\n    @ExceptionHandler(value = Exception.class)\n    @ResponseBody\n    public ReturnJsonBody defaultErrorHandler(HttpServletRequest req, Exception e) throws Exception {\n        ReturnJsonBody rb = new ReturnJsonBody();\n        if (e instanceof ServiceException) {\n            ServiceException se = (ServiceException) e;\n            rb.setCode(se.getCode());\n            rb.setMsg(se.getMsg());\n        } else {\n            rb.setCode(1);\n            rb.setMsg(\"系统异常\");\n            e.printStackTrace();\n            rb.setStack(ExceptionUtils.getStackTrace(e));\n            /*try {\n                addServerExceptionLog(req, e);\n            } catch (Exception ex) {\n                LOGGER.error(\"add server exception error {}\", ExceptionUtils.getStackTrace(ex));\n            }\n*/\n        }\n        return rb;\n    }\n\n    // public abstract void addServerExceptionLog(HttpServletRequest request, Throwable throwable);\n\n}\n```\n####总结:通过增强controller 来捕捉全局mvc异常  这样第一可以返回指定格式错误信息  第二 可以捕捉业务异常 \n","slug":"spring/springboot-mvc返回全局处理异常","published":1,"updated":"2018-08-17T08:10:03.923Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjo9uatyy004mmwczu1pid3nt","content":"<p>####全局异常处理<br>在web中 异常也分为系统异常和业务异常 可以通过增强控制器 来对异常进行全局处理<br>1:创建业务异常类<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">import lombok.Data;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.util.Map;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 自定义服务异常</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @author ming</span><br><span class=\"line\"> * @date 2017-06-24</span><br><span class=\"line\"> */</span><br><span class=\"line\">@Data</span><br><span class=\"line\">public class ServiceException extends RuntimeException &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 异常编码</span><br><span class=\"line\">     */</span><br><span class=\"line\">    private int code;</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 消息</span><br><span class=\"line\">     */</span><br><span class=\"line\">    private String msg;</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 扩展参数</span><br><span class=\"line\">     */</span><br><span class=\"line\">    private Map&lt;String, Object&gt; extParams;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p>\n<p>2:创建业务异常枚举类<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">import lombok.Getter;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 错误码表</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @author ming</span><br><span class=\"line\"> * @date 2017-07-16</span><br><span class=\"line\"> */</span><br><span class=\"line\">@Getter</span><br><span class=\"line\">public enum ExceptionConstants &#123;</span><br><span class=\"line\">    ERROR(1,&quot;业务异常&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">    private Integer num;</span><br><span class=\"line\">    private String content;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    ExceptionConstants(Integer num, String content) &#123;</span><br><span class=\"line\">        this.num = num;</span><br><span class=\"line\">        this.content = content;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p>\n<p>3:如何抛出异常<br>这里粗糙的直接抛出枚举值<br>如果有需要 可以建立业务异常服务 统一管理错误码和错误信息  动态的变更业务异常提示<br>也可以继承 细分异常  例如 有的是参数错误 、有的是请求未授权之类的<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">throw new ServiceException(ExceptionConstants.ERROR.getNum(),ExceptionConstants.ERROR.getContent());</span><br></pre></td></tr></table></figure><p></p>\n<p>4:建立增强controller 全局异常捕捉<br>这里通过@ControllerAdvice增强<br>通过@ExceptionHandler 捕捉异常<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">import com.ming.base.exception.ServiceException;</span><br><span class=\"line\">import lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\">import org.apache.commons.lang3.exception.ExceptionUtils;</span><br><span class=\"line\">import org.springframework.web.bind.annotation.ControllerAdvice;</span><br><span class=\"line\">import org.springframework.web.bind.annotation.ExceptionHandler;</span><br><span class=\"line\">import org.springframework.web.bind.annotation.ResponseBody;</span><br><span class=\"line\"></span><br><span class=\"line\">import javax.servlet.http.HttpServletRequest;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 全局异常处理</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @author ming</span><br><span class=\"line\"> * @date 2017-11-10 13:58</span><br><span class=\"line\"> */</span><br><span class=\"line\">@ControllerAdvice</span><br><span class=\"line\">@Slf4j</span><br><span class=\"line\">public class BaseGlobalExceptionHandler &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    @ExceptionHandler(value = Exception.class)</span><br><span class=\"line\">    @ResponseBody</span><br><span class=\"line\">    public ReturnJsonBody defaultErrorHandler(HttpServletRequest req, Exception e) throws Exception &#123;</span><br><span class=\"line\">        ReturnJsonBody rb = new ReturnJsonBody();</span><br><span class=\"line\">        if (e instanceof ServiceException) &#123;</span><br><span class=\"line\">            ServiceException se = (ServiceException) e;</span><br><span class=\"line\">            rb.setCode(se.getCode());</span><br><span class=\"line\">            rb.setMsg(se.getMsg());</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">            rb.setCode(1);</span><br><span class=\"line\">            rb.setMsg(&quot;系统异常&quot;);</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">            rb.setStack(ExceptionUtils.getStackTrace(e));</span><br><span class=\"line\">            /*try &#123;</span><br><span class=\"line\">                addServerExceptionLog(req, e);</span><br><span class=\"line\">            &#125; catch (Exception ex) &#123;</span><br><span class=\"line\">                LOGGER.error(&quot;add server exception error &#123;&#125;&quot;, ExceptionUtils.getStackTrace(ex));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">*/</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return rb;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // public abstract void addServerExceptionLog(HttpServletRequest request, Throwable throwable);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p>\n<p>####总结:通过增强controller 来捕捉全局mvc异常  这样第一可以返回指定格式错误信息  第二 可以捕捉业务异常</p>","site":{"data":{}},"excerpt":"","more":"<p>####全局异常处理<br>在web中 异常也分为系统异常和业务异常 可以通过增强控制器 来对异常进行全局处理<br>1:创建业务异常类<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">import lombok.Data;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.util.Map;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 自定义服务异常</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @author ming</span><br><span class=\"line\"> * @date 2017-06-24</span><br><span class=\"line\"> */</span><br><span class=\"line\">@Data</span><br><span class=\"line\">public class ServiceException extends RuntimeException &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 异常编码</span><br><span class=\"line\">     */</span><br><span class=\"line\">    private int code;</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 消息</span><br><span class=\"line\">     */</span><br><span class=\"line\">    private String msg;</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 扩展参数</span><br><span class=\"line\">     */</span><br><span class=\"line\">    private Map&lt;String, Object&gt; extParams;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p>\n<p>2:创建业务异常枚举类<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">import lombok.Getter;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 错误码表</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @author ming</span><br><span class=\"line\"> * @date 2017-07-16</span><br><span class=\"line\"> */</span><br><span class=\"line\">@Getter</span><br><span class=\"line\">public enum ExceptionConstants &#123;</span><br><span class=\"line\">    ERROR(1,&quot;业务异常&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">    private Integer num;</span><br><span class=\"line\">    private String content;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    ExceptionConstants(Integer num, String content) &#123;</span><br><span class=\"line\">        this.num = num;</span><br><span class=\"line\">        this.content = content;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p>\n<p>3:如何抛出异常<br>这里粗糙的直接抛出枚举值<br>如果有需要 可以建立业务异常服务 统一管理错误码和错误信息  动态的变更业务异常提示<br>也可以继承 细分异常  例如 有的是参数错误 、有的是请求未授权之类的<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">throw new ServiceException(ExceptionConstants.ERROR.getNum(),ExceptionConstants.ERROR.getContent());</span><br></pre></td></tr></table></figure><p></p>\n<p>4:建立增强controller 全局异常捕捉<br>这里通过@ControllerAdvice增强<br>通过@ExceptionHandler 捕捉异常<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">import com.ming.base.exception.ServiceException;</span><br><span class=\"line\">import lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\">import org.apache.commons.lang3.exception.ExceptionUtils;</span><br><span class=\"line\">import org.springframework.web.bind.annotation.ControllerAdvice;</span><br><span class=\"line\">import org.springframework.web.bind.annotation.ExceptionHandler;</span><br><span class=\"line\">import org.springframework.web.bind.annotation.ResponseBody;</span><br><span class=\"line\"></span><br><span class=\"line\">import javax.servlet.http.HttpServletRequest;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 全局异常处理</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @author ming</span><br><span class=\"line\"> * @date 2017-11-10 13:58</span><br><span class=\"line\"> */</span><br><span class=\"line\">@ControllerAdvice</span><br><span class=\"line\">@Slf4j</span><br><span class=\"line\">public class BaseGlobalExceptionHandler &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    @ExceptionHandler(value = Exception.class)</span><br><span class=\"line\">    @ResponseBody</span><br><span class=\"line\">    public ReturnJsonBody defaultErrorHandler(HttpServletRequest req, Exception e) throws Exception &#123;</span><br><span class=\"line\">        ReturnJsonBody rb = new ReturnJsonBody();</span><br><span class=\"line\">        if (e instanceof ServiceException) &#123;</span><br><span class=\"line\">            ServiceException se = (ServiceException) e;</span><br><span class=\"line\">            rb.setCode(se.getCode());</span><br><span class=\"line\">            rb.setMsg(se.getMsg());</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">            rb.setCode(1);</span><br><span class=\"line\">            rb.setMsg(&quot;系统异常&quot;);</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">            rb.setStack(ExceptionUtils.getStackTrace(e));</span><br><span class=\"line\">            /*try &#123;</span><br><span class=\"line\">                addServerExceptionLog(req, e);</span><br><span class=\"line\">            &#125; catch (Exception ex) &#123;</span><br><span class=\"line\">                LOGGER.error(&quot;add server exception error &#123;&#125;&quot;, ExceptionUtils.getStackTrace(ex));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">*/</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return rb;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // public abstract void addServerExceptionLog(HttpServletRequest request, Throwable throwable);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p>\n<p>####总结:通过增强controller 来捕捉全局mvc异常  这样第一可以返回指定格式错误信息  第二 可以捕捉业务异常</p>"},{"title":"spring boot 全局处理返回数据格式笔记","abbrlink":"ba648708","date":"2017-11-10T16:00:00.000Z","_content":"####全局处理json数据返回格式\n在前后端分离中 前后端为了更好的交互 应该指定一个较为通用的数据返回格式 \n基本上都是code+data 方式返回 \n在spring mvc 中通过对controller全局增强 来进行处理 \n\n1:制定 返回json数据返回大致格式 \n```\n/**\n * 返回json 字符串格式\n * json接口 返回的字符串格式\n *\n * @author ming\n * @date 2017-11-10 12:56\n */\n@Data\n@NoArgsConstructor\npublic class ReturnJsonBody implements Serializable {\n    /**\n     * 状态码\n     */\n    private long code;\n    /**\n     * 数据\n     */\n    private Object data;\n    /**\n     * 附加信息\n     */\n    private String msg;\n    /**\n     * 异常信息\n     */\n    private String stack;\n\n    /**\n     * 返回成功的消息使用的构造函数\n     *\n     * @author ming\n     * @date 2017-11-10 17:26\n     */\n    public ReturnJsonBody(long code, Object data) {\n        this.code = code;\n        this.data = data;\n    }\n\n    /**\n     * 返回异常的消息使用的构造函数\n     *\n     * @author ming\n     * @date 2017-11-10 17:26\n     */\n    public ReturnJsonBody(long code, String msg, String stack) {\n        this.code = code;\n        this.msg = msg;\n        this.stack = stack;\n    }\n}\n```\n2:通过增强控制器来实现对返回数据包装 \n```\n/**\n * 全局json 数据返回处理\n *\n * @author ming\n * @date 2017-11-10 14:02\n */\n@ControllerAdvice\npublic class BaseGlobalResponseBodyAdvice implements ResponseBodyAdvice<Object> {\n\n    /**\n     * 需要处理的类型\n     *\n     * @author ming\n     * @date 2017-11-10 14:05\n     */\n    private final Set<MediaType> jsonMediaType = new ImmutableSet.Builder<MediaType>()\n            .add(MediaType.APPLICATION_JSON)\n            .add(MediaType.APPLICATION_JSON_UTF8)\n            .build();\n\n    @Override\n    public boolean supports(MethodParameter methodParameter, Class<? extends HttpMessageConverter<?>> converterType) {\n        return true;\n    }\n\n    @Override\n    public Object beforeBodyWrite(\n            Object obj, MethodParameter methodParameter, MediaType mediaType,\n            Class<? extends HttpMessageConverter<?>> converterType,\n            ServerHttpRequest serverHttpRequest, ServerHttpResponse serverHttpResponse) {\n        //当类型 不属于 需要处理的包头的时候 直接返回obj\n        if (!jsonMediaType.contains(mediaType)) {\n            return obj;\n        }\n        //当类型 是属于需要处理的时候 并且 obj不是ReturnJsonBody的时候 进行格式化处理\n        if (obj == null || !(obj instanceof ReturnJsonBody)) {\n            obj = new ReturnJsonBody(0L, obj);\n        }\n        return obj;\n    }\n\n}\n```\n####总结: 使用增强控制器返回格式方式 来对json接口进行返回数据格式统一处理 也是必须的 方便和前端交互 \n","source":"_posts/spring/springboot-mvc返回指定json格式数据.md","raw":"---\ntitle: spring boot 全局处理返回数据格式笔记\ncategories: 笔记\ntags:\n  - spring\nabbrlink: ba648708\ndate: 2017-11-11 00:00:00\n---\n####全局处理json数据返回格式\n在前后端分离中 前后端为了更好的交互 应该指定一个较为通用的数据返回格式 \n基本上都是code+data 方式返回 \n在spring mvc 中通过对controller全局增强 来进行处理 \n\n1:制定 返回json数据返回大致格式 \n```\n/**\n * 返回json 字符串格式\n * json接口 返回的字符串格式\n *\n * @author ming\n * @date 2017-11-10 12:56\n */\n@Data\n@NoArgsConstructor\npublic class ReturnJsonBody implements Serializable {\n    /**\n     * 状态码\n     */\n    private long code;\n    /**\n     * 数据\n     */\n    private Object data;\n    /**\n     * 附加信息\n     */\n    private String msg;\n    /**\n     * 异常信息\n     */\n    private String stack;\n\n    /**\n     * 返回成功的消息使用的构造函数\n     *\n     * @author ming\n     * @date 2017-11-10 17:26\n     */\n    public ReturnJsonBody(long code, Object data) {\n        this.code = code;\n        this.data = data;\n    }\n\n    /**\n     * 返回异常的消息使用的构造函数\n     *\n     * @author ming\n     * @date 2017-11-10 17:26\n     */\n    public ReturnJsonBody(long code, String msg, String stack) {\n        this.code = code;\n        this.msg = msg;\n        this.stack = stack;\n    }\n}\n```\n2:通过增强控制器来实现对返回数据包装 \n```\n/**\n * 全局json 数据返回处理\n *\n * @author ming\n * @date 2017-11-10 14:02\n */\n@ControllerAdvice\npublic class BaseGlobalResponseBodyAdvice implements ResponseBodyAdvice<Object> {\n\n    /**\n     * 需要处理的类型\n     *\n     * @author ming\n     * @date 2017-11-10 14:05\n     */\n    private final Set<MediaType> jsonMediaType = new ImmutableSet.Builder<MediaType>()\n            .add(MediaType.APPLICATION_JSON)\n            .add(MediaType.APPLICATION_JSON_UTF8)\n            .build();\n\n    @Override\n    public boolean supports(MethodParameter methodParameter, Class<? extends HttpMessageConverter<?>> converterType) {\n        return true;\n    }\n\n    @Override\n    public Object beforeBodyWrite(\n            Object obj, MethodParameter methodParameter, MediaType mediaType,\n            Class<? extends HttpMessageConverter<?>> converterType,\n            ServerHttpRequest serverHttpRequest, ServerHttpResponse serverHttpResponse) {\n        //当类型 不属于 需要处理的包头的时候 直接返回obj\n        if (!jsonMediaType.contains(mediaType)) {\n            return obj;\n        }\n        //当类型 是属于需要处理的时候 并且 obj不是ReturnJsonBody的时候 进行格式化处理\n        if (obj == null || !(obj instanceof ReturnJsonBody)) {\n            obj = new ReturnJsonBody(0L, obj);\n        }\n        return obj;\n    }\n\n}\n```\n####总结: 使用增强控制器返回格式方式 来对json接口进行返回数据格式统一处理 也是必须的 方便和前端交互 \n","slug":"spring/springboot-mvc返回指定json格式数据","published":1,"updated":"2018-08-17T08:10:03.923Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjo9uatz0004qmwczshr2l22u","content":"<p>####全局处理json数据返回格式<br>在前后端分离中 前后端为了更好的交互 应该指定一个较为通用的数据返回格式<br>基本上都是code+data 方式返回<br>在spring mvc 中通过对controller全局增强 来进行处理</p><p>1:制定 返回json数据返回大致格式<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * 返回json 字符串格式</span><br><span class=\"line\"> * json接口 返回的字符串格式</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @author ming</span><br><span class=\"line\"> * @date 2017-11-10 12:56</span><br><span class=\"line\"> */</span><br><span class=\"line\">@Data</span><br><span class=\"line\">@NoArgsConstructor</span><br><span class=\"line\">public class ReturnJsonBody implements Serializable &#123;</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 状态码</span><br><span class=\"line\">     */</span><br><span class=\"line\">    private long code;</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 数据</span><br><span class=\"line\">     */</span><br><span class=\"line\">    private Object data;</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 附加信息</span><br><span class=\"line\">     */</span><br><span class=\"line\">    private String msg;</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 异常信息</span><br><span class=\"line\">     */</span><br><span class=\"line\">    private String stack;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 返回成功的消息使用的构造函数</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @author ming</span><br><span class=\"line\">     * @date 2017-11-10 17:26</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public ReturnJsonBody(long code, Object data) &#123;</span><br><span class=\"line\">        this.code = code;</span><br><span class=\"line\">        this.data = data;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 返回异常的消息使用的构造函数</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @author ming</span><br><span class=\"line\">     * @date 2017-11-10 17:26</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public ReturnJsonBody(long code, String msg, String stack) &#123;</span><br><span class=\"line\">        this.code = code;</span><br><span class=\"line\">        this.msg = msg;</span><br><span class=\"line\">        this.stack = stack;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p>\n<p>2:通过增强控制器来实现对返回数据包装<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * 全局json 数据返回处理</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @author ming</span><br><span class=\"line\"> * @date 2017-11-10 14:02</span><br><span class=\"line\"> */</span><br><span class=\"line\">@ControllerAdvice</span><br><span class=\"line\">public class BaseGlobalResponseBodyAdvice implements ResponseBodyAdvice&lt;Object&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 需要处理的类型</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @author ming</span><br><span class=\"line\">     * @date 2017-11-10 14:05</span><br><span class=\"line\">     */</span><br><span class=\"line\">    private final Set&lt;MediaType&gt; jsonMediaType = new ImmutableSet.Builder&lt;MediaType&gt;()</span><br><span class=\"line\">            .add(MediaType.APPLICATION_JSON)</span><br><span class=\"line\">            .add(MediaType.APPLICATION_JSON_UTF8)</span><br><span class=\"line\">            .build();</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public boolean supports(MethodParameter methodParameter, Class&lt;? extends HttpMessageConverter&lt;?&gt;&gt; converterType) &#123;</span><br><span class=\"line\">        return true;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public Object beforeBodyWrite(</span><br><span class=\"line\">            Object obj, MethodParameter methodParameter, MediaType mediaType,</span><br><span class=\"line\">            Class&lt;? extends HttpMessageConverter&lt;?&gt;&gt; converterType,</span><br><span class=\"line\">            ServerHttpRequest serverHttpRequest, ServerHttpResponse serverHttpResponse) &#123;</span><br><span class=\"line\">        //当类型 不属于 需要处理的包头的时候 直接返回obj</span><br><span class=\"line\">        if (!jsonMediaType.contains(mediaType)) &#123;</span><br><span class=\"line\">            return obj;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        //当类型 是属于需要处理的时候 并且 obj不是ReturnJsonBody的时候 进行格式化处理</span><br><span class=\"line\">        if (obj == null || !(obj instanceof ReturnJsonBody)) &#123;</span><br><span class=\"line\">            obj = new ReturnJsonBody(0L, obj);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return obj;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p>\n<p>####总结: 使用增强控制器返回格式方式 来对json接口进行返回数据格式统一处理 也是必须的 方便和前端交互</p>","site":{"data":{}},"excerpt":"","more":"<p>####全局处理json数据返回格式<br>在前后端分离中 前后端为了更好的交互 应该指定一个较为通用的数据返回格式<br>基本上都是code+data 方式返回<br>在spring mvc 中通过对controller全局增强 来进行处理</p><p>1:制定 返回json数据返回大致格式<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * 返回json 字符串格式</span><br><span class=\"line\"> * json接口 返回的字符串格式</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @author ming</span><br><span class=\"line\"> * @date 2017-11-10 12:56</span><br><span class=\"line\"> */</span><br><span class=\"line\">@Data</span><br><span class=\"line\">@NoArgsConstructor</span><br><span class=\"line\">public class ReturnJsonBody implements Serializable &#123;</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 状态码</span><br><span class=\"line\">     */</span><br><span class=\"line\">    private long code;</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 数据</span><br><span class=\"line\">     */</span><br><span class=\"line\">    private Object data;</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 附加信息</span><br><span class=\"line\">     */</span><br><span class=\"line\">    private String msg;</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 异常信息</span><br><span class=\"line\">     */</span><br><span class=\"line\">    private String stack;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 返回成功的消息使用的构造函数</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @author ming</span><br><span class=\"line\">     * @date 2017-11-10 17:26</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public ReturnJsonBody(long code, Object data) &#123;</span><br><span class=\"line\">        this.code = code;</span><br><span class=\"line\">        this.data = data;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 返回异常的消息使用的构造函数</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @author ming</span><br><span class=\"line\">     * @date 2017-11-10 17:26</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public ReturnJsonBody(long code, String msg, String stack) &#123;</span><br><span class=\"line\">        this.code = code;</span><br><span class=\"line\">        this.msg = msg;</span><br><span class=\"line\">        this.stack = stack;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p>\n<p>2:通过增强控制器来实现对返回数据包装<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * 全局json 数据返回处理</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @author ming</span><br><span class=\"line\"> * @date 2017-11-10 14:02</span><br><span class=\"line\"> */</span><br><span class=\"line\">@ControllerAdvice</span><br><span class=\"line\">public class BaseGlobalResponseBodyAdvice implements ResponseBodyAdvice&lt;Object&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 需要处理的类型</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @author ming</span><br><span class=\"line\">     * @date 2017-11-10 14:05</span><br><span class=\"line\">     */</span><br><span class=\"line\">    private final Set&lt;MediaType&gt; jsonMediaType = new ImmutableSet.Builder&lt;MediaType&gt;()</span><br><span class=\"line\">            .add(MediaType.APPLICATION_JSON)</span><br><span class=\"line\">            .add(MediaType.APPLICATION_JSON_UTF8)</span><br><span class=\"line\">            .build();</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public boolean supports(MethodParameter methodParameter, Class&lt;? extends HttpMessageConverter&lt;?&gt;&gt; converterType) &#123;</span><br><span class=\"line\">        return true;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public Object beforeBodyWrite(</span><br><span class=\"line\">            Object obj, MethodParameter methodParameter, MediaType mediaType,</span><br><span class=\"line\">            Class&lt;? extends HttpMessageConverter&lt;?&gt;&gt; converterType,</span><br><span class=\"line\">            ServerHttpRequest serverHttpRequest, ServerHttpResponse serverHttpResponse) &#123;</span><br><span class=\"line\">        //当类型 不属于 需要处理的包头的时候 直接返回obj</span><br><span class=\"line\">        if (!jsonMediaType.contains(mediaType)) &#123;</span><br><span class=\"line\">            return obj;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        //当类型 是属于需要处理的时候 并且 obj不是ReturnJsonBody的时候 进行格式化处理</span><br><span class=\"line\">        if (obj == null || !(obj instanceof ReturnJsonBody)) &#123;</span><br><span class=\"line\">            obj = new ReturnJsonBody(0L, obj);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return obj;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p>\n<p>####总结: 使用增强控制器返回格式方式 来对json接口进行返回数据格式统一处理 也是必须的 方便和前端交互</p>"},{"title":"spring boot mvc配置笔记","abbrlink":"cdea8691","date":"2017-11-10T16:00:00.000Z","_content":"#### 配置mvc相关参数的类\n常用的 也就是如下三种方法 如果需要使用spring boot 中默认实现 请选则第三种方式 避免覆盖spring boot 实现\n* @EnableWebMvc+extends WebMvcConfigurationAdapter，在扩展的类中重写父类的方法即可，这种方式会屏蔽springboot的@EnableAutoConfiguration中的设置\n* extends WebMvcConfigurationSupport，在扩展的类中重写父类的方法即可，这种方式会屏蔽springboot的@EnableAutoConfiguration中的设置\n* extends WebMvcConfigurationAdapter，在扩展的类中重写父类的方法即可，这种方式依旧使用springboot的@EnableAutoConfiguration中的设置\n以上资料参考博客:http://www.voidcn.com/article/p-fpvxvkbi-bpb.html\n####常用方式实现\n1:拦截器实现\n```\n\nimport org.springframework.web.servlet.handler.HandlerInterceptorAdapter;\n\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\n\n/**\n * 统一设定返回包头\n *\n * @author ming\n * @date 2017-11-06 18:15\n */\npublic class ResponseHandlerInterceptot extends HandlerInterceptorAdapter {\n\n    @Override\n    public void afterConcurrentHandlingStarted(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {\n        //统一设定 返回编码集\n        response.setCharacterEncoding(\"UTF-8\");\n    }\n}\n\n```\n2:注册到拦截器链中\n```\n\n\n/**\n * 拦截器配置\n *\n * @author ming\n * @date 2017-08-28 11点\n */\n@Configuration\npublic class WebInterceptors extends WebMvcConfigurerAdapter {\n    public WebInterceptors() {\n        super();\n    }\n\n\n    /**\n     * 添加拦截器\n     *\n     * @author ming\n     * @date 2017-11-07 10:08\n     */\n    @Override\n    public void addInterceptors(InterceptorRegistry registry) {\n        //注册统一处理响应包头拦截器\n        registry.addInterceptor(new ResponseHandlerInterceptot());\n        super.addInterceptors(registry);\n    }\n\n    /**\n     * 添加允许跨域的请求\n     *\n     * @author ming\n     * @date 2017-11-10 17:07\n     */\n    @Override\n    public void addCorsMappings(CorsRegistry registry) {\n        //允许所有请求跨域\n        registry.addMapping(\"/**\");\n        super.addCorsMappings(registry);\n    }\n  }\n```\n####总结:追求高度自定义 继承 WebMvcConfigurationSupport  如果想偷懒 那就继承 WebMvcConfigurationAdapter 可以拥有spring boot 默认的配置\n","source":"_posts/spring/springboot-mvc配置笔记.md","raw":"---\ntitle: spring boot mvc配置笔记\ncategories: 笔记\ntags:\n  - spring\nabbrlink: cdea8691\ndate: 2017-11-11 00:00:00\n---\n#### 配置mvc相关参数的类\n常用的 也就是如下三种方法 如果需要使用spring boot 中默认实现 请选则第三种方式 避免覆盖spring boot 实现\n* @EnableWebMvc+extends WebMvcConfigurationAdapter，在扩展的类中重写父类的方法即可，这种方式会屏蔽springboot的@EnableAutoConfiguration中的设置\n* extends WebMvcConfigurationSupport，在扩展的类中重写父类的方法即可，这种方式会屏蔽springboot的@EnableAutoConfiguration中的设置\n* extends WebMvcConfigurationAdapter，在扩展的类中重写父类的方法即可，这种方式依旧使用springboot的@EnableAutoConfiguration中的设置\n以上资料参考博客:http://www.voidcn.com/article/p-fpvxvkbi-bpb.html\n####常用方式实现\n1:拦截器实现\n```\n\nimport org.springframework.web.servlet.handler.HandlerInterceptorAdapter;\n\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\n\n/**\n * 统一设定返回包头\n *\n * @author ming\n * @date 2017-11-06 18:15\n */\npublic class ResponseHandlerInterceptot extends HandlerInterceptorAdapter {\n\n    @Override\n    public void afterConcurrentHandlingStarted(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {\n        //统一设定 返回编码集\n        response.setCharacterEncoding(\"UTF-8\");\n    }\n}\n\n```\n2:注册到拦截器链中\n```\n\n\n/**\n * 拦截器配置\n *\n * @author ming\n * @date 2017-08-28 11点\n */\n@Configuration\npublic class WebInterceptors extends WebMvcConfigurerAdapter {\n    public WebInterceptors() {\n        super();\n    }\n\n\n    /**\n     * 添加拦截器\n     *\n     * @author ming\n     * @date 2017-11-07 10:08\n     */\n    @Override\n    public void addInterceptors(InterceptorRegistry registry) {\n        //注册统一处理响应包头拦截器\n        registry.addInterceptor(new ResponseHandlerInterceptot());\n        super.addInterceptors(registry);\n    }\n\n    /**\n     * 添加允许跨域的请求\n     *\n     * @author ming\n     * @date 2017-11-10 17:07\n     */\n    @Override\n    public void addCorsMappings(CorsRegistry registry) {\n        //允许所有请求跨域\n        registry.addMapping(\"/**\");\n        super.addCorsMappings(registry);\n    }\n  }\n```\n####总结:追求高度自定义 继承 WebMvcConfigurationSupport  如果想偷懒 那就继承 WebMvcConfigurationAdapter 可以拥有spring boot 默认的配置\n","slug":"spring/springboot-mvc配置笔记","published":1,"updated":"2018-08-17T08:10:03.923Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjo9uatz1004tmwcz671sfqp6","content":"<h4 id=\"配置mvc相关参数的类\"><a href=\"#配置mvc相关参数的类\" class=\"headerlink\" title=\"配置mvc相关参数的类\"></a>配置mvc相关参数的类</h4><p>常用的 也就是如下三种方法 如果需要使用spring boot 中默认实现 请选则第三种方式 避免覆盖spring boot 实现</p><ul><li>@EnableWebMvc+extends WebMvcConfigurationAdapter，在扩展的类中重写父类的方法即可，这种方式会屏蔽springboot的@EnableAutoConfiguration中的设置</li><li>extends WebMvcConfigurationSupport，在扩展的类中重写父类的方法即可，这种方式会屏蔽springboot的@EnableAutoConfiguration中的设置</li><li>extends WebMvcConfigurationAdapter，在扩展的类中重写父类的方法即可，这种方式依旧使用springboot的@EnableAutoConfiguration中的设置<br>以上资料参考博客:<a href=\"http://www.voidcn.com/article/p-fpvxvkbi-bpb.html\" target=\"_blank\" rel=\"noopener\">http://www.voidcn.com/article/p-fpvxvkbi-bpb.html</a><br>####常用方式实现<br>1:拦截器实现<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">import org.springframework.web.servlet.handler.HandlerInterceptorAdapter;</span><br><span class=\"line\"></span><br><span class=\"line\">import javax.servlet.http.HttpServletRequest;</span><br><span class=\"line\">import javax.servlet.http.HttpServletResponse;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 统一设定返回包头</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @author ming</span><br><span class=\"line\"> * @date 2017-11-06 18:15</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class ResponseHandlerInterceptot extends HandlerInterceptorAdapter &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void afterConcurrentHandlingStarted(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception &#123;</span><br><span class=\"line\">        //统一设定 返回编码集</span><br><span class=\"line\">        response.setCharacterEncoding(&quot;UTF-8&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>2:注册到拦截器链中<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 拦截器配置</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @author ming</span><br><span class=\"line\"> * @date 2017-08-28 11点</span><br><span class=\"line\"> */</span><br><span class=\"line\">@Configuration</span><br><span class=\"line\">public class WebInterceptors extends WebMvcConfigurerAdapter &#123;</span><br><span class=\"line\">    public WebInterceptors() &#123;</span><br><span class=\"line\">        super();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 添加拦截器</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @author ming</span><br><span class=\"line\">     * @date 2017-11-07 10:08</span><br><span class=\"line\">     */</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void addInterceptors(InterceptorRegistry registry) &#123;</span><br><span class=\"line\">        //注册统一处理响应包头拦截器</span><br><span class=\"line\">        registry.addInterceptor(new ResponseHandlerInterceptot());</span><br><span class=\"line\">        super.addInterceptors(registry);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 添加允许跨域的请求</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @author ming</span><br><span class=\"line\">     * @date 2017-11-10 17:07</span><br><span class=\"line\">     */</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void addCorsMappings(CorsRegistry registry) &#123;</span><br><span class=\"line\">        //允许所有请求跨域</span><br><span class=\"line\">        registry.addMapping(&quot;/**&quot;);</span><br><span class=\"line\">        super.addCorsMappings(registry);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure><p></p>\n<p>####总结:追求高度自定义 继承 WebMvcConfigurationSupport  如果想偷懒 那就继承 WebMvcConfigurationAdapter 可以拥有spring boot 默认的配置</p>","site":{"data":{}},"excerpt":"","more":"<h4 id=\"配置mvc相关参数的类\"><a href=\"#配置mvc相关参数的类\" class=\"headerlink\" title=\"配置mvc相关参数的类\"></a>配置mvc相关参数的类</h4><p>常用的 也就是如下三种方法 如果需要使用spring boot 中默认实现 请选则第三种方式 避免覆盖spring boot 实现</p><ul><li>@EnableWebMvc+extends WebMvcConfigurationAdapter，在扩展的类中重写父类的方法即可，这种方式会屏蔽springboot的@EnableAutoConfiguration中的设置</li><li>extends WebMvcConfigurationSupport，在扩展的类中重写父类的方法即可，这种方式会屏蔽springboot的@EnableAutoConfiguration中的设置</li><li>extends WebMvcConfigurationAdapter，在扩展的类中重写父类的方法即可，这种方式依旧使用springboot的@EnableAutoConfiguration中的设置<br>以上资料参考博客:<a href=\"http://www.voidcn.com/article/p-fpvxvkbi-bpb.html\" target=\"_blank\" rel=\"noopener\">http://www.voidcn.com/article/p-fpvxvkbi-bpb.html</a><br>####常用方式实现<br>1:拦截器实现<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">import org.springframework.web.servlet.handler.HandlerInterceptorAdapter;</span><br><span class=\"line\"></span><br><span class=\"line\">import javax.servlet.http.HttpServletRequest;</span><br><span class=\"line\">import javax.servlet.http.HttpServletResponse;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 统一设定返回包头</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @author ming</span><br><span class=\"line\"> * @date 2017-11-06 18:15</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class ResponseHandlerInterceptot extends HandlerInterceptorAdapter &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void afterConcurrentHandlingStarted(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception &#123;</span><br><span class=\"line\">        //统一设定 返回编码集</span><br><span class=\"line\">        response.setCharacterEncoding(&quot;UTF-8&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>2:注册到拦截器链中<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 拦截器配置</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @author ming</span><br><span class=\"line\"> * @date 2017-08-28 11点</span><br><span class=\"line\"> */</span><br><span class=\"line\">@Configuration</span><br><span class=\"line\">public class WebInterceptors extends WebMvcConfigurerAdapter &#123;</span><br><span class=\"line\">    public WebInterceptors() &#123;</span><br><span class=\"line\">        super();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 添加拦截器</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @author ming</span><br><span class=\"line\">     * @date 2017-11-07 10:08</span><br><span class=\"line\">     */</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void addInterceptors(InterceptorRegistry registry) &#123;</span><br><span class=\"line\">        //注册统一处理响应包头拦截器</span><br><span class=\"line\">        registry.addInterceptor(new ResponseHandlerInterceptot());</span><br><span class=\"line\">        super.addInterceptors(registry);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 添加允许跨域的请求</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @author ming</span><br><span class=\"line\">     * @date 2017-11-10 17:07</span><br><span class=\"line\">     */</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void addCorsMappings(CorsRegistry registry) &#123;</span><br><span class=\"line\">        //允许所有请求跨域</span><br><span class=\"line\">        registry.addMapping(&quot;/**&quot;);</span><br><span class=\"line\">        super.addCorsMappings(registry);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure><p></p>\n<p>####总结:追求高度自定义 继承 WebMvcConfigurationSupport  如果想偷懒 那就继承 WebMvcConfigurationAdapter 可以拥有spring boot 默认的配置</p>"},{"title":"spring boot 自定义mvc MessageConverter 笔记","abbrlink":"de4fca49","date":"2017-11-10T16:00:00.000Z","_content":"#### 指定前后端传输数据格式\n在前后分离项目中 最麻烦的应该就是 前后端工程师对接\n后端通过添加mvc消息转换器 返回更加符合前端的数据格式   \n这个数据格式 不是说返回的格式 而是 某些类型的数据的处理 例如 date 可以转换成Long类型的时间戳返回 \n直接继承实现即可 如果是继承WebMvcConfigurerAdapter 实现的mvc 相关配置  可以不用管 这样 它自己会添加到转换器链中 \n如果是继承WebMvcConfigurationSupport  那么 需要重写configureMessageConverters() 手动添加到转换器链中\n```\n/**\n * 返回数数据格式转换器\n *\n * @author ming\n * @date 2017-11-10 13:57\n */\npublic class MessageConverter extends AbstractHttpMessageConverter<Object> {\n\n    /**\n     * date 转换为 时间戳\n     *\n     * @author ming\n     * @date 2017-11-10 13:56\n     */\n    ValueFilter filter = (obj, s, v) -> {\n        if (v instanceof Date) {\n            return ((Date) v).getTime();\n        }\n        return v;\n    };\n\n    public MessageConverter() {\n        super(MediaType.ALL);\n    }\n\n    @Override\n    protected boolean supports(Class<?> clazz) {\n        return true;\n    }\n\n    @Override\n    protected Object readInternal(Class<?> aClass, HttpInputMessage httpInputMessage) throws IOException, HttpMessageNotReadableException {\n        return null;\n    }\n\n    @Override\n    public boolean canWrite(Class<?> clazz, MediaType mediaType) {\n        return this.supports(clazz) && this.canWrite(mediaType);\n    }\n\n    @Override\n    protected void writeInternal(Object o, HttpOutputMessage httpOutputMessage) throws IOException {\n        FileCopyUtils.copy(JSON.toJSONString(o, filter, SerializerFeature.DisableCircularReferenceDetect).getBytes(), httpOutputMessage.getBody());\n    }\n\n\n}\n```\n#### 这个只是返回数据中数据的类型的格式化 如果是要对返回数据格式进行格式化需要利用对ResponseBodyAdvice进行继承 进行控制器增强处理返回数据格式\n","source":"_posts/spring/springboot-mvc配置自定义消息转换器.md","raw":"---\ntitle: spring boot 自定义mvc MessageConverter 笔记\ncategories: 笔记\ntags:\n  - spring\nabbrlink: de4fca49\ndate: 2017-11-11 00:00:00\n---\n#### 指定前后端传输数据格式\n在前后分离项目中 最麻烦的应该就是 前后端工程师对接\n后端通过添加mvc消息转换器 返回更加符合前端的数据格式   \n这个数据格式 不是说返回的格式 而是 某些类型的数据的处理 例如 date 可以转换成Long类型的时间戳返回 \n直接继承实现即可 如果是继承WebMvcConfigurerAdapter 实现的mvc 相关配置  可以不用管 这样 它自己会添加到转换器链中 \n如果是继承WebMvcConfigurationSupport  那么 需要重写configureMessageConverters() 手动添加到转换器链中\n```\n/**\n * 返回数数据格式转换器\n *\n * @author ming\n * @date 2017-11-10 13:57\n */\npublic class MessageConverter extends AbstractHttpMessageConverter<Object> {\n\n    /**\n     * date 转换为 时间戳\n     *\n     * @author ming\n     * @date 2017-11-10 13:56\n     */\n    ValueFilter filter = (obj, s, v) -> {\n        if (v instanceof Date) {\n            return ((Date) v).getTime();\n        }\n        return v;\n    };\n\n    public MessageConverter() {\n        super(MediaType.ALL);\n    }\n\n    @Override\n    protected boolean supports(Class<?> clazz) {\n        return true;\n    }\n\n    @Override\n    protected Object readInternal(Class<?> aClass, HttpInputMessage httpInputMessage) throws IOException, HttpMessageNotReadableException {\n        return null;\n    }\n\n    @Override\n    public boolean canWrite(Class<?> clazz, MediaType mediaType) {\n        return this.supports(clazz) && this.canWrite(mediaType);\n    }\n\n    @Override\n    protected void writeInternal(Object o, HttpOutputMessage httpOutputMessage) throws IOException {\n        FileCopyUtils.copy(JSON.toJSONString(o, filter, SerializerFeature.DisableCircularReferenceDetect).getBytes(), httpOutputMessage.getBody());\n    }\n\n\n}\n```\n#### 这个只是返回数据中数据的类型的格式化 如果是要对返回数据格式进行格式化需要利用对ResponseBodyAdvice进行继承 进行控制器增强处理返回数据格式\n","slug":"spring/springboot-mvc配置自定义消息转换器","published":1,"updated":"2018-08-17T08:10:03.923Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjo9uatz3004xmwcztz2bxqlj","content":"<h4 id=\"指定前后端传输数据格式\"><a href=\"#指定前后端传输数据格式\" class=\"headerlink\" title=\"指定前后端传输数据格式\"></a>指定前后端传输数据格式</h4><p>在前后分离项目中 最麻烦的应该就是 前后端工程师对接<br>后端通过添加mvc消息转换器 返回更加符合前端的数据格式<br>这个数据格式 不是说返回的格式 而是 某些类型的数据的处理 例如 date 可以转换成Long类型的时间戳返回<br>直接继承实现即可 如果是继承WebMvcConfigurerAdapter 实现的mvc 相关配置 可以不用管 这样 它自己会添加到转换器链中<br>如果是继承WebMvcConfigurationSupport 那么 需要重写configureMessageConverters() 手动添加到转换器链中<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * 返回数数据格式转换器</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @author ming</span><br><span class=\"line\"> * @date 2017-11-10 13:57</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class MessageConverter extends AbstractHttpMessageConverter&lt;Object&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * date 转换为 时间戳</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @author ming</span><br><span class=\"line\">     * @date 2017-11-10 13:56</span><br><span class=\"line\">     */</span><br><span class=\"line\">    ValueFilter filter = (obj, s, v) -&gt; &#123;</span><br><span class=\"line\">        if (v instanceof Date) &#123;</span><br><span class=\"line\">            return ((Date) v).getTime();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return v;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    public MessageConverter() &#123;</span><br><span class=\"line\">        super(MediaType.ALL);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected boolean supports(Class&lt;?&gt; clazz) &#123;</span><br><span class=\"line\">        return true;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected Object readInternal(Class&lt;?&gt; aClass, HttpInputMessage httpInputMessage) throws IOException, HttpMessageNotReadableException &#123;</span><br><span class=\"line\">        return null;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public boolean canWrite(Class&lt;?&gt; clazz, MediaType mediaType) &#123;</span><br><span class=\"line\">        return this.supports(clazz) &amp;&amp; this.canWrite(mediaType);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected void writeInternal(Object o, HttpOutputMessage httpOutputMessage) throws IOException &#123;</span><br><span class=\"line\">        FileCopyUtils.copy(JSON.toJSONString(o, filter, SerializerFeature.DisableCircularReferenceDetect).getBytes(), httpOutputMessage.getBody());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p>\n<h4 id=\"这个只是返回数据中数据的类型的格式化-如果是要对返回数据格式进行格式化需要利用对ResponseBodyAdvice进行继承-进行控制器增强处理返回数据格式\"><a href=\"#这个只是返回数据中数据的类型的格式化-如果是要对返回数据格式进行格式化需要利用对ResponseBodyAdvice进行继承-进行控制器增强处理返回数据格式\" class=\"headerlink\" title=\"这个只是返回数据中数据的类型的格式化 如果是要对返回数据格式进行格式化需要利用对ResponseBodyAdvice进行继承 进行控制器增强处理返回数据格式\"></a>这个只是返回数据中数据的类型的格式化 如果是要对返回数据格式进行格式化需要利用对ResponseBodyAdvice进行继承 进行控制器增强处理返回数据格式</h4>","site":{"data":{}},"excerpt":"","more":"<h4 id=\"指定前后端传输数据格式\"><a href=\"#指定前后端传输数据格式\" class=\"headerlink\" title=\"指定前后端传输数据格式\"></a>指定前后端传输数据格式</h4><p>在前后分离项目中 最麻烦的应该就是 前后端工程师对接<br>后端通过添加mvc消息转换器 返回更加符合前端的数据格式<br>这个数据格式 不是说返回的格式 而是 某些类型的数据的处理 例如 date 可以转换成Long类型的时间戳返回<br>直接继承实现即可 如果是继承WebMvcConfigurerAdapter 实现的mvc 相关配置 可以不用管 这样 它自己会添加到转换器链中<br>如果是继承WebMvcConfigurationSupport 那么 需要重写configureMessageConverters() 手动添加到转换器链中<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * 返回数数据格式转换器</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @author ming</span><br><span class=\"line\"> * @date 2017-11-10 13:57</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class MessageConverter extends AbstractHttpMessageConverter&lt;Object&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * date 转换为 时间戳</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @author ming</span><br><span class=\"line\">     * @date 2017-11-10 13:56</span><br><span class=\"line\">     */</span><br><span class=\"line\">    ValueFilter filter = (obj, s, v) -&gt; &#123;</span><br><span class=\"line\">        if (v instanceof Date) &#123;</span><br><span class=\"line\">            return ((Date) v).getTime();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return v;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    public MessageConverter() &#123;</span><br><span class=\"line\">        super(MediaType.ALL);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected boolean supports(Class&lt;?&gt; clazz) &#123;</span><br><span class=\"line\">        return true;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected Object readInternal(Class&lt;?&gt; aClass, HttpInputMessage httpInputMessage) throws IOException, HttpMessageNotReadableException &#123;</span><br><span class=\"line\">        return null;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public boolean canWrite(Class&lt;?&gt; clazz, MediaType mediaType) &#123;</span><br><span class=\"line\">        return this.supports(clazz) &amp;&amp; this.canWrite(mediaType);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected void writeInternal(Object o, HttpOutputMessage httpOutputMessage) throws IOException &#123;</span><br><span class=\"line\">        FileCopyUtils.copy(JSON.toJSONString(o, filter, SerializerFeature.DisableCircularReferenceDetect).getBytes(), httpOutputMessage.getBody());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p>\n<h4 id=\"这个只是返回数据中数据的类型的格式化-如果是要对返回数据格式进行格式化需要利用对ResponseBodyAdvice进行继承-进行控制器增强处理返回数据格式\"><a href=\"#这个只是返回数据中数据的类型的格式化-如果是要对返回数据格式进行格式化需要利用对ResponseBodyAdvice进行继承-进行控制器增强处理返回数据格式\" class=\"headerlink\" title=\"这个只是返回数据中数据的类型的格式化 如果是要对返回数据格式进行格式化需要利用对ResponseBodyAdvice进行继承 进行控制器增强处理返回数据格式\"></a>这个只是返回数据中数据的类型的格式化 如果是要对返回数据格式进行格式化需要利用对ResponseBodyAdvice进行继承 进行控制器增强处理返回数据格式</h4>"},{"title":"springboot-thymeleaf模版实现类似jsp的sitemesh","abbrlink":"12183fd8","date":"2017-11-10T16:00:00.000Z","_content":"####thymeleaf\n虽然现在大部分项目 更加倾向于前后端分离 但是有时候身为后端工程师 总想手贱写点小东西 \n但是jsp 又比较老 而且需要web容器支撑 spring boot 支持性太差  \n所以还是用spring boot 推荐的thymeleaf \n可是 jsp中的siteMesh装饰器真的好用 苦于thymeleaf没有这个东西 \n在国外博客看到别人实现了类似功能 特此写这篇笔记 方便后续查阅\n1:建立layout注解\n用这个注解标识 那些接口需要被装饰\n```\n\nimport java.lang.annotation.*;\n\n/**\n * 样式装饰器 注解  在controller中注解\n *\n * @author ming\n * @date 2017-08-28 11点\n */\n@Target({ElementType.METHOD, ElementType.TYPE})\n@Retention(RetentionPolicy.RUNTIME)\n@Documented\npublic @interface Layout {\n    /**\n     * no layout will be used\n     */\n    String none = \"none\";\n    /**\n     * default layout will be used\n     */\n    String defaultLayOut = \"default\";\n\n    String value() default defaultLayOut;\n}\n\n```\n2:建立 thymeleaf 处理拦截器\n这个拦截器 就是用来根据layout注解处理相关组装页面的\n```\n\n/**\n * thymeleaf样式拦截器  实现类似 jsp的sitemesh 装饰器功能\n *\n * @author ming\n * @date 2017-08-28 11点\n */\npublic class ThymeleafLayoutInterceptor extends HandlerInterceptorAdapter {\n\n    private static final String DEFAULT_LAYOUT = \"layouts/default\";\n    private static final String DEFAULT_VIEW_ATTRIBUTE_NAME = \"view\";\n\n    private String defaultLayout = DEFAULT_LAYOUT;\n    private String viewAttributeName = DEFAULT_VIEW_ATTRIBUTE_NAME;\n\n    public void setDefaultLayout(String defaultLayout) {\n        Assert.hasLength(defaultLayout, \"默认样式不存在!\");\n        this.defaultLayout = defaultLayout;\n    }\n\n    public void setViewAttributeName(String viewAttributeName) {\n        Assert.hasLength(defaultLayout, \"默认样式不存在!\");\n        this.viewAttributeName = viewAttributeName;\n    }\n\n    @Override\n    public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView) throws Exception {\n        if (modelAndView == null || !modelAndView.hasView()) {\n            return;\n        }\n\n        String originalViewName = modelAndView.getViewName();\n        if (isRedirectOrForward(originalViewName)) {\n            return;\n        }\n        String layoutName = getLayoutName(handler);\n        if (Layout.none.equals(layoutName)) {\n            return;\n        }\n        modelAndView.setViewName(layoutName);\n        modelAndView.addObject(this.viewAttributeName, originalViewName);\n    }\n\n    private boolean isRedirectOrForward(String viewName) {\n        return viewName.startsWith(\"redirect:\") || viewName.startsWith(\"forward:\");\n    }\n\n    private String getLayoutName(Object handler) {\n        if (handler instanceof HandlerMethod) {\n            HandlerMethod handlerMethod = (HandlerMethod) handler;\n            Layout layout = getMethodOrTypeAnnotation(handlerMethod);\n            if (layout != null) {\n                return layout.value();\n            }\n        }\n        return this.defaultLayout;\n    }\n\n    private Layout getMethodOrTypeAnnotation(HandlerMethod handlerMethod) {\n        Layout layout = handlerMethod.getMethodAnnotation(Layout.class);\n        if (layout == null) {\n            return handlerMethod.getBeanType().getAnnotation(Layout.class);\n        }\n        return layout;\n    }\n}\n\n```\n3:建立样式装饰页面 \n在项目静态页面路径下 创建 layouts文件夹\n在文件夹目录下建立 装饰配置html 例如default.html\n```\n<!DOCTYPE html>\n<html xmlns:th=\"http://www.thymeleaf.org\" lang=\"en\">\n<head>\n    <meta charset=\"utf-8\"/>\n    <title>ming thymeleaf site mesh</title>\n\n</head>\n<body>\n    <div id=\"menu-container\">\n        <div class=\"container\" th:replace=\"${view} :: content\">加载中。。。。。</div>\n    </div>\n</body>\n</html>\n\n```\n4:在controller中应用 \nlayout默认是使用default的 这个看layout实现即可\n这样 index.html就会嵌入到default.html中 那个th:replace=“{view}”那个位置 \n```\nimport com.ming.base.annotations.Layout;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.GetMapping;\n\n/**\n * 首页 控制器\n *\n * @author ming\n * @date 2017-11-08 10:33\n */\n@Controller\n@Layout\npublic class IndexController {\n\n    @GetMapping(value = {\"\", \"/\", \"/index\"})\n    public String index() {\n        return \"index\";\n    }\n\n}\n```\n####总结：thymeleaf 总的来说 还行 毕竟简单粗暴 但是有几个比较坑的地方  1:必须是标在的xml结构的html 也就是必须符合xml规范 2：由于技术用的人可能不太多 编辑器支持不是很好 不能做到 jsp 那样可以直接追踪到controller中\n","source":"_posts/spring/springboot-thymeleaf模版实现类似jsp的sitemesh.md","raw":"---\ntitle: springboot-thymeleaf模版实现类似jsp的sitemesh\ncategories: 笔记\ntags:\n  - spring\nabbrlink: 12183fd8\ndate: 2017-11-11 00:00:00\n---\n####thymeleaf\n虽然现在大部分项目 更加倾向于前后端分离 但是有时候身为后端工程师 总想手贱写点小东西 \n但是jsp 又比较老 而且需要web容器支撑 spring boot 支持性太差  \n所以还是用spring boot 推荐的thymeleaf \n可是 jsp中的siteMesh装饰器真的好用 苦于thymeleaf没有这个东西 \n在国外博客看到别人实现了类似功能 特此写这篇笔记 方便后续查阅\n1:建立layout注解\n用这个注解标识 那些接口需要被装饰\n```\n\nimport java.lang.annotation.*;\n\n/**\n * 样式装饰器 注解  在controller中注解\n *\n * @author ming\n * @date 2017-08-28 11点\n */\n@Target({ElementType.METHOD, ElementType.TYPE})\n@Retention(RetentionPolicy.RUNTIME)\n@Documented\npublic @interface Layout {\n    /**\n     * no layout will be used\n     */\n    String none = \"none\";\n    /**\n     * default layout will be used\n     */\n    String defaultLayOut = \"default\";\n\n    String value() default defaultLayOut;\n}\n\n```\n2:建立 thymeleaf 处理拦截器\n这个拦截器 就是用来根据layout注解处理相关组装页面的\n```\n\n/**\n * thymeleaf样式拦截器  实现类似 jsp的sitemesh 装饰器功能\n *\n * @author ming\n * @date 2017-08-28 11点\n */\npublic class ThymeleafLayoutInterceptor extends HandlerInterceptorAdapter {\n\n    private static final String DEFAULT_LAYOUT = \"layouts/default\";\n    private static final String DEFAULT_VIEW_ATTRIBUTE_NAME = \"view\";\n\n    private String defaultLayout = DEFAULT_LAYOUT;\n    private String viewAttributeName = DEFAULT_VIEW_ATTRIBUTE_NAME;\n\n    public void setDefaultLayout(String defaultLayout) {\n        Assert.hasLength(defaultLayout, \"默认样式不存在!\");\n        this.defaultLayout = defaultLayout;\n    }\n\n    public void setViewAttributeName(String viewAttributeName) {\n        Assert.hasLength(defaultLayout, \"默认样式不存在!\");\n        this.viewAttributeName = viewAttributeName;\n    }\n\n    @Override\n    public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView) throws Exception {\n        if (modelAndView == null || !modelAndView.hasView()) {\n            return;\n        }\n\n        String originalViewName = modelAndView.getViewName();\n        if (isRedirectOrForward(originalViewName)) {\n            return;\n        }\n        String layoutName = getLayoutName(handler);\n        if (Layout.none.equals(layoutName)) {\n            return;\n        }\n        modelAndView.setViewName(layoutName);\n        modelAndView.addObject(this.viewAttributeName, originalViewName);\n    }\n\n    private boolean isRedirectOrForward(String viewName) {\n        return viewName.startsWith(\"redirect:\") || viewName.startsWith(\"forward:\");\n    }\n\n    private String getLayoutName(Object handler) {\n        if (handler instanceof HandlerMethod) {\n            HandlerMethod handlerMethod = (HandlerMethod) handler;\n            Layout layout = getMethodOrTypeAnnotation(handlerMethod);\n            if (layout != null) {\n                return layout.value();\n            }\n        }\n        return this.defaultLayout;\n    }\n\n    private Layout getMethodOrTypeAnnotation(HandlerMethod handlerMethod) {\n        Layout layout = handlerMethod.getMethodAnnotation(Layout.class);\n        if (layout == null) {\n            return handlerMethod.getBeanType().getAnnotation(Layout.class);\n        }\n        return layout;\n    }\n}\n\n```\n3:建立样式装饰页面 \n在项目静态页面路径下 创建 layouts文件夹\n在文件夹目录下建立 装饰配置html 例如default.html\n```\n<!DOCTYPE html>\n<html xmlns:th=\"http://www.thymeleaf.org\" lang=\"en\">\n<head>\n    <meta charset=\"utf-8\"/>\n    <title>ming thymeleaf site mesh</title>\n\n</head>\n<body>\n    <div id=\"menu-container\">\n        <div class=\"container\" th:replace=\"${view} :: content\">加载中。。。。。</div>\n    </div>\n</body>\n</html>\n\n```\n4:在controller中应用 \nlayout默认是使用default的 这个看layout实现即可\n这样 index.html就会嵌入到default.html中 那个th:replace=“{view}”那个位置 \n```\nimport com.ming.base.annotations.Layout;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.GetMapping;\n\n/**\n * 首页 控制器\n *\n * @author ming\n * @date 2017-11-08 10:33\n */\n@Controller\n@Layout\npublic class IndexController {\n\n    @GetMapping(value = {\"\", \"/\", \"/index\"})\n    public String index() {\n        return \"index\";\n    }\n\n}\n```\n####总结：thymeleaf 总的来说 还行 毕竟简单粗暴 但是有几个比较坑的地方  1:必须是标在的xml结构的html 也就是必须符合xml规范 2：由于技术用的人可能不太多 编辑器支持不是很好 不能做到 jsp 那样可以直接追踪到controller中\n","slug":"spring/springboot-thymeleaf模版实现类似jsp的sitemesh","published":1,"updated":"2018-08-17T08:10:03.923Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjo9uatz40050mwczds83xz2v","content":"<p>####thymeleaf<br>虽然现在大部分项目 更加倾向于前后端分离 但是有时候身为后端工程师 总想手贱写点小东西<br>但是jsp 又比较老 而且需要web容器支撑 spring boot 支持性太差<br>所以还是用spring boot 推荐的thymeleaf<br>可是 jsp中的siteMesh装饰器真的好用 苦于thymeleaf没有这个东西<br>在国外博客看到别人实现了类似功能 特此写这篇笔记 方便后续查阅<br>1:建立layout注解<br>用这个注解标识 那些接口需要被装饰<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">import java.lang.annotation.*;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 样式装饰器 注解  在controller中注解</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @author ming</span><br><span class=\"line\"> * @date 2017-08-28 11点</span><br><span class=\"line\"> */</span><br><span class=\"line\">@Target(&#123;ElementType.METHOD, ElementType.TYPE&#125;)</span><br><span class=\"line\">@Retention(RetentionPolicy.RUNTIME)</span><br><span class=\"line\">@Documented</span><br><span class=\"line\">public @interface Layout &#123;</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * no layout will be used</span><br><span class=\"line\">     */</span><br><span class=\"line\">    String none = &quot;none&quot;;</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * default layout will be used</span><br><span class=\"line\">     */</span><br><span class=\"line\">    String defaultLayOut = &quot;default&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">    String value() default defaultLayOut;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p>\n<p>2:建立 thymeleaf 处理拦截器<br>这个拦截器 就是用来根据layout注解处理相关组装页面的<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * thymeleaf样式拦截器  实现类似 jsp的sitemesh 装饰器功能</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @author ming</span><br><span class=\"line\"> * @date 2017-08-28 11点</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class ThymeleafLayoutInterceptor extends HandlerInterceptorAdapter &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private static final String DEFAULT_LAYOUT = &quot;layouts/default&quot;;</span><br><span class=\"line\">    private static final String DEFAULT_VIEW_ATTRIBUTE_NAME = &quot;view&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">    private String defaultLayout = DEFAULT_LAYOUT;</span><br><span class=\"line\">    private String viewAttributeName = DEFAULT_VIEW_ATTRIBUTE_NAME;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void setDefaultLayout(String defaultLayout) &#123;</span><br><span class=\"line\">        Assert.hasLength(defaultLayout, &quot;默认样式不存在!&quot;);</span><br><span class=\"line\">        this.defaultLayout = defaultLayout;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void setViewAttributeName(String viewAttributeName) &#123;</span><br><span class=\"line\">        Assert.hasLength(defaultLayout, &quot;默认样式不存在!&quot;);</span><br><span class=\"line\">        this.viewAttributeName = viewAttributeName;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView) throws Exception &#123;</span><br><span class=\"line\">        if (modelAndView == null || !modelAndView.hasView()) &#123;</span><br><span class=\"line\">            return;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        String originalViewName = modelAndView.getViewName();</span><br><span class=\"line\">        if (isRedirectOrForward(originalViewName)) &#123;</span><br><span class=\"line\">            return;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        String layoutName = getLayoutName(handler);</span><br><span class=\"line\">        if (Layout.none.equals(layoutName)) &#123;</span><br><span class=\"line\">            return;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        modelAndView.setViewName(layoutName);</span><br><span class=\"line\">        modelAndView.addObject(this.viewAttributeName, originalViewName);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private boolean isRedirectOrForward(String viewName) &#123;</span><br><span class=\"line\">        return viewName.startsWith(&quot;redirect:&quot;) || viewName.startsWith(&quot;forward:&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private String getLayoutName(Object handler) &#123;</span><br><span class=\"line\">        if (handler instanceof HandlerMethod) &#123;</span><br><span class=\"line\">            HandlerMethod handlerMethod = (HandlerMethod) handler;</span><br><span class=\"line\">            Layout layout = getMethodOrTypeAnnotation(handlerMethod);</span><br><span class=\"line\">            if (layout != null) &#123;</span><br><span class=\"line\">                return layout.value();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return this.defaultLayout;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private Layout getMethodOrTypeAnnotation(HandlerMethod handlerMethod) &#123;</span><br><span class=\"line\">        Layout layout = handlerMethod.getMethodAnnotation(Layout.class);</span><br><span class=\"line\">        if (layout == null) &#123;</span><br><span class=\"line\">            return handlerMethod.getBeanType().getAnnotation(Layout.class);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return layout;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p>\n<p>3:建立样式装饰页面<br>在项目静态页面路径下 创建 layouts文件夹<br>在文件夹目录下建立 装饰配置html 例如default.html<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html xmlns:th=&quot;http://www.thymeleaf.org&quot; lang=&quot;en&quot;&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;meta charset=&quot;utf-8&quot;/&gt;</span><br><span class=\"line\">    &lt;title&gt;ming thymeleaf site mesh&lt;/title&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    &lt;div id=&quot;menu-container&quot;&gt;</span><br><span class=\"line\">        &lt;div class=&quot;container&quot; th:replace=&quot;$&#123;view&#125; :: content&quot;&gt;加载中。。。。。&lt;/div&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p></p>\n<p>4:在controller中应用<br>layout默认是使用default的 这个看layout实现即可<br>这样 index.html就会嵌入到default.html中 那个th:replace=“{view}”那个位置<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import com.ming.base.annotations.Layout;</span><br><span class=\"line\">import org.springframework.stereotype.Controller;</span><br><span class=\"line\">import org.springframework.web.bind.annotation.GetMapping;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 首页 控制器</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @author ming</span><br><span class=\"line\"> * @date 2017-11-08 10:33</span><br><span class=\"line\"> */</span><br><span class=\"line\">@Controller</span><br><span class=\"line\">@Layout</span><br><span class=\"line\">public class IndexController &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @GetMapping(value = &#123;&quot;&quot;, &quot;/&quot;, &quot;/index&quot;&#125;)</span><br><span class=\"line\">    public String index() &#123;</span><br><span class=\"line\">        return &quot;index&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p>\n<p>####总结：thymeleaf 总的来说 还行 毕竟简单粗暴 但是有几个比较坑的地方  1:必须是标在的xml结构的html 也就是必须符合xml规范 2：由于技术用的人可能不太多 编辑器支持不是很好 不能做到 jsp 那样可以直接追踪到controller中</p>","site":{"data":{}},"excerpt":"","more":"<p>####thymeleaf<br>虽然现在大部分项目 更加倾向于前后端分离 但是有时候身为后端工程师 总想手贱写点小东西<br>但是jsp 又比较老 而且需要web容器支撑 spring boot 支持性太差<br>所以还是用spring boot 推荐的thymeleaf<br>可是 jsp中的siteMesh装饰器真的好用 苦于thymeleaf没有这个东西<br>在国外博客看到别人实现了类似功能 特此写这篇笔记 方便后续查阅<br>1:建立layout注解<br>用这个注解标识 那些接口需要被装饰<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">import java.lang.annotation.*;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 样式装饰器 注解  在controller中注解</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @author ming</span><br><span class=\"line\"> * @date 2017-08-28 11点</span><br><span class=\"line\"> */</span><br><span class=\"line\">@Target(&#123;ElementType.METHOD, ElementType.TYPE&#125;)</span><br><span class=\"line\">@Retention(RetentionPolicy.RUNTIME)</span><br><span class=\"line\">@Documented</span><br><span class=\"line\">public @interface Layout &#123;</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * no layout will be used</span><br><span class=\"line\">     */</span><br><span class=\"line\">    String none = &quot;none&quot;;</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * default layout will be used</span><br><span class=\"line\">     */</span><br><span class=\"line\">    String defaultLayOut = &quot;default&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">    String value() default defaultLayOut;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p>\n<p>2:建立 thymeleaf 处理拦截器<br>这个拦截器 就是用来根据layout注解处理相关组装页面的<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * thymeleaf样式拦截器  实现类似 jsp的sitemesh 装饰器功能</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @author ming</span><br><span class=\"line\"> * @date 2017-08-28 11点</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class ThymeleafLayoutInterceptor extends HandlerInterceptorAdapter &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private static final String DEFAULT_LAYOUT = &quot;layouts/default&quot;;</span><br><span class=\"line\">    private static final String DEFAULT_VIEW_ATTRIBUTE_NAME = &quot;view&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">    private String defaultLayout = DEFAULT_LAYOUT;</span><br><span class=\"line\">    private String viewAttributeName = DEFAULT_VIEW_ATTRIBUTE_NAME;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void setDefaultLayout(String defaultLayout) &#123;</span><br><span class=\"line\">        Assert.hasLength(defaultLayout, &quot;默认样式不存在!&quot;);</span><br><span class=\"line\">        this.defaultLayout = defaultLayout;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void setViewAttributeName(String viewAttributeName) &#123;</span><br><span class=\"line\">        Assert.hasLength(defaultLayout, &quot;默认样式不存在!&quot;);</span><br><span class=\"line\">        this.viewAttributeName = viewAttributeName;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView) throws Exception &#123;</span><br><span class=\"line\">        if (modelAndView == null || !modelAndView.hasView()) &#123;</span><br><span class=\"line\">            return;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        String originalViewName = modelAndView.getViewName();</span><br><span class=\"line\">        if (isRedirectOrForward(originalViewName)) &#123;</span><br><span class=\"line\">            return;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        String layoutName = getLayoutName(handler);</span><br><span class=\"line\">        if (Layout.none.equals(layoutName)) &#123;</span><br><span class=\"line\">            return;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        modelAndView.setViewName(layoutName);</span><br><span class=\"line\">        modelAndView.addObject(this.viewAttributeName, originalViewName);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private boolean isRedirectOrForward(String viewName) &#123;</span><br><span class=\"line\">        return viewName.startsWith(&quot;redirect:&quot;) || viewName.startsWith(&quot;forward:&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private String getLayoutName(Object handler) &#123;</span><br><span class=\"line\">        if (handler instanceof HandlerMethod) &#123;</span><br><span class=\"line\">            HandlerMethod handlerMethod = (HandlerMethod) handler;</span><br><span class=\"line\">            Layout layout = getMethodOrTypeAnnotation(handlerMethod);</span><br><span class=\"line\">            if (layout != null) &#123;</span><br><span class=\"line\">                return layout.value();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return this.defaultLayout;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private Layout getMethodOrTypeAnnotation(HandlerMethod handlerMethod) &#123;</span><br><span class=\"line\">        Layout layout = handlerMethod.getMethodAnnotation(Layout.class);</span><br><span class=\"line\">        if (layout == null) &#123;</span><br><span class=\"line\">            return handlerMethod.getBeanType().getAnnotation(Layout.class);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return layout;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p>\n<p>3:建立样式装饰页面<br>在项目静态页面路径下 创建 layouts文件夹<br>在文件夹目录下建立 装饰配置html 例如default.html<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html xmlns:th=&quot;http://www.thymeleaf.org&quot; lang=&quot;en&quot;&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;meta charset=&quot;utf-8&quot;/&gt;</span><br><span class=\"line\">    &lt;title&gt;ming thymeleaf site mesh&lt;/title&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    &lt;div id=&quot;menu-container&quot;&gt;</span><br><span class=\"line\">        &lt;div class=&quot;container&quot; th:replace=&quot;$&#123;view&#125; :: content&quot;&gt;加载中。。。。。&lt;/div&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p></p>\n<p>4:在controller中应用<br>layout默认是使用default的 这个看layout实现即可<br>这样 index.html就会嵌入到default.html中 那个th:replace=“{view}”那个位置<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import com.ming.base.annotations.Layout;</span><br><span class=\"line\">import org.springframework.stereotype.Controller;</span><br><span class=\"line\">import org.springframework.web.bind.annotation.GetMapping;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 首页 控制器</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @author ming</span><br><span class=\"line\"> * @date 2017-11-08 10:33</span><br><span class=\"line\"> */</span><br><span class=\"line\">@Controller</span><br><span class=\"line\">@Layout</span><br><span class=\"line\">public class IndexController &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @GetMapping(value = &#123;&quot;&quot;, &quot;/&quot;, &quot;/index&quot;&#125;)</span><br><span class=\"line\">    public String index() &#123;</span><br><span class=\"line\">        return &quot;index&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p>\n<p>####总结：thymeleaf 总的来说 还行 毕竟简单粗暴 但是有几个比较坑的地方  1:必须是标在的xml结构的html 也就是必须符合xml规范 2：由于技术用的人可能不太多 编辑器支持不是很好 不能做到 jsp 那样可以直接追踪到controller中</p>"},{"title":"spring boot (一)笔记","abbrlink":"1d0e6366","date":"2017-11-10T16:00:00.000Z","_content":"##步骤\n1:安装spring boot cli  \n2:利用spring boot cli初始化项目\n3:写一个helloworld控制器\n##1:安装spring boot cli\nspring boot cli是spring boot的一个操作工具 可以直接利用这个工具去生成 管理spribg boot项目\n在这里去寻找合适的版本下载解压 添加到系统路径\nhttp://repo.spring.io/release/org/springframework/boot/spring-boot-cli/\n安装方式有两种 \n1:类似jdk安装方法 下载spring boot cli 解压包 将目录下的bin添加到系统路径中\n2:利用gvm(Groovy的工具去管理):\n安装gvm 之后\n```\ngvm install springboot\nspring --version\n```\n##2:利用spring boot cli 初始化项目 \nspring boot cli 初始化项目 是从网络上下载一个基本demo来初始化的\n```\nspring init -dweb,data-jpa,h2,thymeleaf \n```\n会初始化spring mvc jpa  h2 等  组成一个基本的spring +mvc+jpa+h2数据库的一个基本项目   默认是maven 如果需要gradle来进行项目管理 在语句后加上 --build gradle即可\n##3:hellwworld控制器 \n就是写个spring mvc的控制器\n```\n@RestController\npublic class TestController {\n\n    @RequestMapping(\"/test\")\n    public String test(){\n        return \"test springboot\";\n    }\n}\n```\n控制器访问地址为:http://localhost:8080/test\n###总结:spring boot 就是spring 等相关框架一个快速版  默认设置已经够用 自定义配置覆盖默认配置 \n","source":"_posts/spring/springboot入坑笔记(一)-helloworld.md","raw":"---\ntitle: spring boot (一)笔记\ncategories: 笔记\ntags:\n  - java\n  - spring\nabbrlink: 1d0e6366\ndate: 2017-11-11 00:00:00\n---\n##步骤\n1:安装spring boot cli  \n2:利用spring boot cli初始化项目\n3:写一个helloworld控制器\n##1:安装spring boot cli\nspring boot cli是spring boot的一个操作工具 可以直接利用这个工具去生成 管理spribg boot项目\n在这里去寻找合适的版本下载解压 添加到系统路径\nhttp://repo.spring.io/release/org/springframework/boot/spring-boot-cli/\n安装方式有两种 \n1:类似jdk安装方法 下载spring boot cli 解压包 将目录下的bin添加到系统路径中\n2:利用gvm(Groovy的工具去管理):\n安装gvm 之后\n```\ngvm install springboot\nspring --version\n```\n##2:利用spring boot cli 初始化项目 \nspring boot cli 初始化项目 是从网络上下载一个基本demo来初始化的\n```\nspring init -dweb,data-jpa,h2,thymeleaf \n```\n会初始化spring mvc jpa  h2 等  组成一个基本的spring +mvc+jpa+h2数据库的一个基本项目   默认是maven 如果需要gradle来进行项目管理 在语句后加上 --build gradle即可\n##3:hellwworld控制器 \n就是写个spring mvc的控制器\n```\n@RestController\npublic class TestController {\n\n    @RequestMapping(\"/test\")\n    public String test(){\n        return \"test springboot\";\n    }\n}\n```\n控制器访问地址为:http://localhost:8080/test\n###总结:spring boot 就是spring 等相关框架一个快速版  默认设置已经够用 自定义配置覆盖默认配置 \n","slug":"spring/springboot入坑笔记(一)-helloworld","published":1,"updated":"2018-08-17T08:10:03.923Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjo9uatz60053mwcz2jsmo03t","content":"<p>##步骤<br>1:安装spring boot cli<br>2:利用spring boot cli初始化项目<br>3:写一个helloworld控制器</p><p>##1:安装spring boot cli<br>spring boot cli是spring boot的一个操作工具 可以直接利用这个工具去生成 管理spribg boot项目<br>在这里去寻找合适的版本下载解压 添加到系统路径<br><a href=\"http://repo.spring.io/release/org/springframework/boot/spring-boot-cli/\" target=\"_blank\" rel=\"noopener\">http://repo.spring.io/release/org/springframework/boot/spring-boot-cli/</a><br>安装方式有两种<br>1:类似jdk安装方法 下载spring boot cli 解压包 将目录下的bin添加到系统路径中<br>2:利用gvm(Groovy的工具去管理):<br>安装gvm 之后<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gvm install springboot</span><br><span class=\"line\">spring --version</span><br></pre></td></tr></table></figure><p></p>\n<p>##2:利用spring boot cli 初始化项目<br>spring boot cli 初始化项目 是从网络上下载一个基本demo来初始化的<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">spring init -dweb,data-jpa,h2,thymeleaf</span><br></pre></td></tr></table></figure><p></p>\n<p>会初始化spring mvc jpa  h2 等  组成一个基本的spring +mvc+jpa+h2数据库的一个基本项目   默认是maven 如果需要gradle来进行项目管理 在语句后加上 –build gradle即可</p>\n<p>##3:hellwworld控制器<br>就是写个spring mvc的控制器<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@RestController</span><br><span class=\"line\">public class TestController &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @RequestMapping(&quot;/test&quot;)</span><br><span class=\"line\">    public String test()&#123;</span><br><span class=\"line\">        return &quot;test springboot&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p>\n<p>控制器访问地址为:<a href=\"http://localhost:8080/test\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/test</a></p>\n<p>###总结:spring boot 就是spring 等相关框架一个快速版  默认设置已经够用 自定义配置覆盖默认配置</p>","site":{"data":{}},"excerpt":"","more":"<p>##步骤<br>1:安装spring boot cli<br>2:利用spring boot cli初始化项目<br>3:写一个helloworld控制器</p><p>##1:安装spring boot cli<br>spring boot cli是spring boot的一个操作工具 可以直接利用这个工具去生成 管理spribg boot项目<br>在这里去寻找合适的版本下载解压 添加到系统路径<br><a href=\"http://repo.spring.io/release/org/springframework/boot/spring-boot-cli/\" target=\"_blank\" rel=\"noopener\">http://repo.spring.io/release/org/springframework/boot/spring-boot-cli/</a><br>安装方式有两种<br>1:类似jdk安装方法 下载spring boot cli 解压包 将目录下的bin添加到系统路径中<br>2:利用gvm(Groovy的工具去管理):<br>安装gvm 之后<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gvm install springboot</span><br><span class=\"line\">spring --version</span><br></pre></td></tr></table></figure><p></p>\n<p>##2:利用spring boot cli 初始化项目<br>spring boot cli 初始化项目 是从网络上下载一个基本demo来初始化的<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">spring init -dweb,data-jpa,h2,thymeleaf</span><br></pre></td></tr></table></figure><p></p>\n<p>会初始化spring mvc jpa  h2 等  组成一个基本的spring +mvc+jpa+h2数据库的一个基本项目   默认是maven 如果需要gradle来进行项目管理 在语句后加上 –build gradle即可</p>\n<p>##3:hellwworld控制器<br>就是写个spring mvc的控制器<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@RestController</span><br><span class=\"line\">public class TestController &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @RequestMapping(&quot;/test&quot;)</span><br><span class=\"line\">    public String test()&#123;</span><br><span class=\"line\">        return &quot;test springboot&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p>\n<p>控制器访问地址为:<a href=\"http://localhost:8080/test\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/test</a></p>\n<p>###总结:spring boot 就是spring 等相关框架一个快速版  默认设置已经够用 自定义配置覆盖默认配置</p>"},{"title":"spring boot (二)笔记","abbrlink":"64575eaf","date":"2017-11-10T16:00:00.000Z","_content":"###步骤\n1:使用spring boot cli 生成基本项目\n2:写dao、controller层代码\n3:写thymeleaf 模板\n###1:初始化项目\nspring init -dweb,data-jpa,h2,thymeleaf\n下载demo.zip解压 改名springboot (任意名称)\n刷新maven 下载jar包构建项目\n###2:dao、controller层代码\nentity\n```\n@Entity\npublic class Book {\n    @Id\n    @GeneratedValue(strategy = GenerationType.AUTO)\n    private Long id;\n    private String reader;\n    private String isbn;\n    private String title;\n    private String author;\n    private String description;\n.....省略setter gettter等方法\n}\n```\n定义jpa book实体的 repository\n```\n@Repository\npublic interface BookRepository extends JpaRepository<Book,Long> {\n    List<Book> findByReader(String reader);\n}\n```\n正式项目中会设立service层 这里就不写了  就是跟平常写spring 项目一样的玩法\n定义 controller层 新增和查看控制器\n```\n@Controller\npublic class ReadingListController {\n\n    @Resource\n    BookRepository bookRepository;\n\n    @RequestMapping(value = \"/{reader}\",method = RequestMethod.GET)\n    public String readersBook(Model model,\n                              @PathVariable(value = \"reader\",required = false)String reader){\n        List<Book> books= bookRepository.findByReader(reader);\n        if (books!=null){\n            model.addAttribute(\"books\",books);\n        }\n        return \"readingList\";\n    }\n\n    @RequestMapping(value = \"/{reader}\",method = RequestMethod.POST)\n    public String addToReadingList(@PathVariable(value = \"reader\",required = false) String reader,Book book){\n        book.setReader(reader);\n        bookRepository.save(book);\n        return \"redirect:/{reader}\";\n    }\n}\n```\n###thymeleaf 模板引擎代码\n```\n<!DOCTYPE html>\n<html lang=\"en\" xmlns:th=\"http://www.w3.org/1999/xhtml\">\n<head>\n    <meta charset=\"UTF-8\"/>\n    <title>阅读列表</title>\n</head>\n<body>\n<h2>你的阅读列表</h2>\n<div th:unless=\"${#lists.isEmpty(books)}\">\n    <dl th:each=\"book : ${books}\">\n        <dt class=\"bookHeadline\">\n            <span th:text=\"${book.title}\">标题</span>\n            <span th:text=\"${book.author}\">作者</span>\n            (ISBN: <span th:text=\"${book.isbn}\">ISBN</span>)\n        </dt>\n        <dd class=\"bookDescription\">\n<span th:if=\"${book.description}\"\n      th:text=\"${book.description}\">Description</span>\n            <span th:if=\"${book.description eq null}\">\ndescription为空</span>\n        </dd>\n    </dl>\n</div>\n<div th:if=\"${#lists.isEmpty(books)}\">\n    <p>当前没有阅读</p>\n</div>\n\n<hr/>\n<h3>添加书</h3>\n<!--只需要进控制器即可 直接post当前路径-->\n<form method=\"POST\">\n    <label>标题:</label>\n    <input type=\"text\" name=\"title\" size=\"50\"></input><br/>\n    <label>作者:</label>\n    <input type=\"text\" name=\"author\" size=\"50\"></input><br/>\n    <label>ISBN:</label>\n    <input type=\"text\" name=\"isbn\" size=\"15\"></input><br/>\n    <label>Description:</label><br/>\n    <textarea name=\"description\" cols=\"80\" rows=\"5\">\n</textarea><br/>\n    <input type=\"submit\"></input>\n</form>\n</body>\n</html>\n```\n##浏览器打开http://localhost:8080/sss(任意字符串 进 get  /{reader}控制器即可)\n\n###代码地址:https://github.com/xuxianyu/myGitHub/tree/master/springboot\n","source":"_posts/spring/springboot入坑笔记(三)-基于spring-boot(mvc、jpa、h2、thymeleaf)实例.md","raw":"---\ntitle: spring boot (二)笔记\ncategories: 笔记\ntags:\n  - java\n  - spring\nabbrlink: 64575eaf\ndate: 2017-11-11 00:00:00\n---\n###步骤\n1:使用spring boot cli 生成基本项目\n2:写dao、controller层代码\n3:写thymeleaf 模板\n###1:初始化项目\nspring init -dweb,data-jpa,h2,thymeleaf\n下载demo.zip解压 改名springboot (任意名称)\n刷新maven 下载jar包构建项目\n###2:dao、controller层代码\nentity\n```\n@Entity\npublic class Book {\n    @Id\n    @GeneratedValue(strategy = GenerationType.AUTO)\n    private Long id;\n    private String reader;\n    private String isbn;\n    private String title;\n    private String author;\n    private String description;\n.....省略setter gettter等方法\n}\n```\n定义jpa book实体的 repository\n```\n@Repository\npublic interface BookRepository extends JpaRepository<Book,Long> {\n    List<Book> findByReader(String reader);\n}\n```\n正式项目中会设立service层 这里就不写了  就是跟平常写spring 项目一样的玩法\n定义 controller层 新增和查看控制器\n```\n@Controller\npublic class ReadingListController {\n\n    @Resource\n    BookRepository bookRepository;\n\n    @RequestMapping(value = \"/{reader}\",method = RequestMethod.GET)\n    public String readersBook(Model model,\n                              @PathVariable(value = \"reader\",required = false)String reader){\n        List<Book> books= bookRepository.findByReader(reader);\n        if (books!=null){\n            model.addAttribute(\"books\",books);\n        }\n        return \"readingList\";\n    }\n\n    @RequestMapping(value = \"/{reader}\",method = RequestMethod.POST)\n    public String addToReadingList(@PathVariable(value = \"reader\",required = false) String reader,Book book){\n        book.setReader(reader);\n        bookRepository.save(book);\n        return \"redirect:/{reader}\";\n    }\n}\n```\n###thymeleaf 模板引擎代码\n```\n<!DOCTYPE html>\n<html lang=\"en\" xmlns:th=\"http://www.w3.org/1999/xhtml\">\n<head>\n    <meta charset=\"UTF-8\"/>\n    <title>阅读列表</title>\n</head>\n<body>\n<h2>你的阅读列表</h2>\n<div th:unless=\"${#lists.isEmpty(books)}\">\n    <dl th:each=\"book : ${books}\">\n        <dt class=\"bookHeadline\">\n            <span th:text=\"${book.title}\">标题</span>\n            <span th:text=\"${book.author}\">作者</span>\n            (ISBN: <span th:text=\"${book.isbn}\">ISBN</span>)\n        </dt>\n        <dd class=\"bookDescription\">\n<span th:if=\"${book.description}\"\n      th:text=\"${book.description}\">Description</span>\n            <span th:if=\"${book.description eq null}\">\ndescription为空</span>\n        </dd>\n    </dl>\n</div>\n<div th:if=\"${#lists.isEmpty(books)}\">\n    <p>当前没有阅读</p>\n</div>\n\n<hr/>\n<h3>添加书</h3>\n<!--只需要进控制器即可 直接post当前路径-->\n<form method=\"POST\">\n    <label>标题:</label>\n    <input type=\"text\" name=\"title\" size=\"50\"></input><br/>\n    <label>作者:</label>\n    <input type=\"text\" name=\"author\" size=\"50\"></input><br/>\n    <label>ISBN:</label>\n    <input type=\"text\" name=\"isbn\" size=\"15\"></input><br/>\n    <label>Description:</label><br/>\n    <textarea name=\"description\" cols=\"80\" rows=\"5\">\n</textarea><br/>\n    <input type=\"submit\"></input>\n</form>\n</body>\n</html>\n```\n##浏览器打开http://localhost:8080/sss(任意字符串 进 get  /{reader}控制器即可)\n\n###代码地址:https://github.com/xuxianyu/myGitHub/tree/master/springboot\n","slug":"spring/springboot入坑笔记(三)-基于spring-boot(mvc、jpa、h2、thymeleaf)实例","published":1,"updated":"2018-08-17T08:10:03.923Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjo9uatz80056mwczy9n5gwv6","content":"<p>###步骤<br>1:使用spring boot cli 生成基本项目<br>2:写dao、controller层代码<br>3:写thymeleaf 模板</p><p>###1:初始化项目<br>spring init -dweb,data-jpa,h2,thymeleaf<br>下载demo.zip解压 改名springboot (任意名称)<br>刷新maven 下载jar包构建项目</p><p>###2:dao、controller层代码<br>entity<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Entity</span><br><span class=\"line\">public class Book &#123;</span><br><span class=\"line\">    @Id</span><br><span class=\"line\">    @GeneratedValue(strategy = GenerationType.AUTO)</span><br><span class=\"line\">    private Long id;</span><br><span class=\"line\">    private String reader;</span><br><span class=\"line\">    private String isbn;</span><br><span class=\"line\">    private String title;</span><br><span class=\"line\">    private String author;</span><br><span class=\"line\">    private String description;</span><br><span class=\"line\">.....省略setter gettter等方法</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p>\n<p>定义jpa book实体的 repository<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Repository</span><br><span class=\"line\">public interface BookRepository extends JpaRepository&lt;Book,Long&gt; &#123;</span><br><span class=\"line\">    List&lt;Book&gt; findByReader(String reader);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p>\n<p>正式项目中会设立service层 这里就不写了  就是跟平常写spring 项目一样的玩法<br>定义 controller层 新增和查看控制器<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Controller</span><br><span class=\"line\">public class ReadingListController &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Resource</span><br><span class=\"line\">    BookRepository bookRepository;</span><br><span class=\"line\"></span><br><span class=\"line\">    @RequestMapping(value = &quot;/&#123;reader&#125;&quot;,method = RequestMethod.GET)</span><br><span class=\"line\">    public String readersBook(Model model,</span><br><span class=\"line\">                              @PathVariable(value = &quot;reader&quot;,required = false)String reader)&#123;</span><br><span class=\"line\">        List&lt;Book&gt; books= bookRepository.findByReader(reader);</span><br><span class=\"line\">        if (books!=null)&#123;</span><br><span class=\"line\">            model.addAttribute(&quot;books&quot;,books);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return &quot;readingList&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @RequestMapping(value = &quot;/&#123;reader&#125;&quot;,method = RequestMethod.POST)</span><br><span class=\"line\">    public String addToReadingList(@PathVariable(value = &quot;reader&quot;,required = false) String reader,Book book)&#123;</span><br><span class=\"line\">        book.setReader(reader);</span><br><span class=\"line\">        bookRepository.save(book);</span><br><span class=\"line\">        return &quot;redirect:/&#123;reader&#125;&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p>\n<p>###thymeleaf 模板引擎代码<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html lang=&quot;en&quot; xmlns:th=&quot;http://www.w3.org/1999/xhtml&quot;&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;meta charset=&quot;UTF-8&quot;/&gt;</span><br><span class=\"line\">    &lt;title&gt;阅读列表&lt;/title&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;h2&gt;你的阅读列表&lt;/h2&gt;</span><br><span class=\"line\">&lt;div th:unless=&quot;$&#123;#lists.isEmpty(books)&#125;&quot;&gt;</span><br><span class=\"line\">    &lt;dl th:each=&quot;book : $&#123;books&#125;&quot;&gt;</span><br><span class=\"line\">        &lt;dt class=&quot;bookHeadline&quot;&gt;</span><br><span class=\"line\">            &lt;span th:text=&quot;$&#123;book.title&#125;&quot;&gt;标题&lt;/span&gt;</span><br><span class=\"line\">            &lt;span th:text=&quot;$&#123;book.author&#125;&quot;&gt;作者&lt;/span&gt;</span><br><span class=\"line\">            (ISBN: &lt;span th:text=&quot;$&#123;book.isbn&#125;&quot;&gt;ISBN&lt;/span&gt;)</span><br><span class=\"line\">        &lt;/dt&gt;</span><br><span class=\"line\">        &lt;dd class=&quot;bookDescription&quot;&gt;</span><br><span class=\"line\">&lt;span th:if=&quot;$&#123;book.description&#125;&quot;</span><br><span class=\"line\">      th:text=&quot;$&#123;book.description&#125;&quot;&gt;Description&lt;/span&gt;</span><br><span class=\"line\">            &lt;span th:if=&quot;$&#123;book.description eq null&#125;&quot;&gt;</span><br><span class=\"line\">description为空&lt;/span&gt;</span><br><span class=\"line\">        &lt;/dd&gt;</span><br><span class=\"line\">    &lt;/dl&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;div th:if=&quot;$&#123;#lists.isEmpty(books)&#125;&quot;&gt;</span><br><span class=\"line\">    &lt;p&gt;当前没有阅读&lt;/p&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;hr/&gt;</span><br><span class=\"line\">&lt;h3&gt;添加书&lt;/h3&gt;</span><br><span class=\"line\">&lt;!--只需要进控制器即可 直接post当前路径--&gt;</span><br><span class=\"line\">&lt;form method=&quot;POST&quot;&gt;</span><br><span class=\"line\">    &lt;label&gt;标题:&lt;/label&gt;</span><br><span class=\"line\">    &lt;input type=&quot;text&quot; name=&quot;title&quot; size=&quot;50&quot;&gt;&lt;/input&gt;&lt;br/&gt;</span><br><span class=\"line\">    &lt;label&gt;作者:&lt;/label&gt;</span><br><span class=\"line\">    &lt;input type=&quot;text&quot; name=&quot;author&quot; size=&quot;50&quot;&gt;&lt;/input&gt;&lt;br/&gt;</span><br><span class=\"line\">    &lt;label&gt;ISBN:&lt;/label&gt;</span><br><span class=\"line\">    &lt;input type=&quot;text&quot; name=&quot;isbn&quot; size=&quot;15&quot;&gt;&lt;/input&gt;&lt;br/&gt;</span><br><span class=\"line\">    &lt;label&gt;Description:&lt;/label&gt;&lt;br/&gt;</span><br><span class=\"line\">    &lt;textarea name=&quot;description&quot; cols=&quot;80&quot; rows=&quot;5&quot;&gt;</span><br><span class=\"line\">&lt;/textarea&gt;&lt;br/&gt;</span><br><span class=\"line\">    &lt;input type=&quot;submit&quot;&gt;&lt;/input&gt;</span><br><span class=\"line\">&lt;/form&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p></p>\n<p>##浏览器打开<a href=\"http://localhost:8080/sss(任意字符串\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/sss(任意字符串</a> 进 get  /{reader}控制器即可)</p>\n<p>###代码地址:<a href=\"https://github.com/xuxianyu/myGitHub/tree/master/springboot\" target=\"_blank\" rel=\"noopener\">https://github.com/xuxianyu/myGitHub/tree/master/springboot</a></p>","site":{"data":{}},"excerpt":"","more":"<p>###步骤<br>1:使用spring boot cli 生成基本项目<br>2:写dao、controller层代码<br>3:写thymeleaf 模板</p><p>###1:初始化项目<br>spring init -dweb,data-jpa,h2,thymeleaf<br>下载demo.zip解压 改名springboot (任意名称)<br>刷新maven 下载jar包构建项目</p><p>###2:dao、controller层代码<br>entity<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Entity</span><br><span class=\"line\">public class Book &#123;</span><br><span class=\"line\">    @Id</span><br><span class=\"line\">    @GeneratedValue(strategy = GenerationType.AUTO)</span><br><span class=\"line\">    private Long id;</span><br><span class=\"line\">    private String reader;</span><br><span class=\"line\">    private String isbn;</span><br><span class=\"line\">    private String title;</span><br><span class=\"line\">    private String author;</span><br><span class=\"line\">    private String description;</span><br><span class=\"line\">.....省略setter gettter等方法</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p>\n<p>定义jpa book实体的 repository<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Repository</span><br><span class=\"line\">public interface BookRepository extends JpaRepository&lt;Book,Long&gt; &#123;</span><br><span class=\"line\">    List&lt;Book&gt; findByReader(String reader);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p>\n<p>正式项目中会设立service层 这里就不写了  就是跟平常写spring 项目一样的玩法<br>定义 controller层 新增和查看控制器<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Controller</span><br><span class=\"line\">public class ReadingListController &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Resource</span><br><span class=\"line\">    BookRepository bookRepository;</span><br><span class=\"line\"></span><br><span class=\"line\">    @RequestMapping(value = &quot;/&#123;reader&#125;&quot;,method = RequestMethod.GET)</span><br><span class=\"line\">    public String readersBook(Model model,</span><br><span class=\"line\">                              @PathVariable(value = &quot;reader&quot;,required = false)String reader)&#123;</span><br><span class=\"line\">        List&lt;Book&gt; books= bookRepository.findByReader(reader);</span><br><span class=\"line\">        if (books!=null)&#123;</span><br><span class=\"line\">            model.addAttribute(&quot;books&quot;,books);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return &quot;readingList&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @RequestMapping(value = &quot;/&#123;reader&#125;&quot;,method = RequestMethod.POST)</span><br><span class=\"line\">    public String addToReadingList(@PathVariable(value = &quot;reader&quot;,required = false) String reader,Book book)&#123;</span><br><span class=\"line\">        book.setReader(reader);</span><br><span class=\"line\">        bookRepository.save(book);</span><br><span class=\"line\">        return &quot;redirect:/&#123;reader&#125;&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p>\n<p>###thymeleaf 模板引擎代码<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html lang=&quot;en&quot; xmlns:th=&quot;http://www.w3.org/1999/xhtml&quot;&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;meta charset=&quot;UTF-8&quot;/&gt;</span><br><span class=\"line\">    &lt;title&gt;阅读列表&lt;/title&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;h2&gt;你的阅读列表&lt;/h2&gt;</span><br><span class=\"line\">&lt;div th:unless=&quot;$&#123;#lists.isEmpty(books)&#125;&quot;&gt;</span><br><span class=\"line\">    &lt;dl th:each=&quot;book : $&#123;books&#125;&quot;&gt;</span><br><span class=\"line\">        &lt;dt class=&quot;bookHeadline&quot;&gt;</span><br><span class=\"line\">            &lt;span th:text=&quot;$&#123;book.title&#125;&quot;&gt;标题&lt;/span&gt;</span><br><span class=\"line\">            &lt;span th:text=&quot;$&#123;book.author&#125;&quot;&gt;作者&lt;/span&gt;</span><br><span class=\"line\">            (ISBN: &lt;span th:text=&quot;$&#123;book.isbn&#125;&quot;&gt;ISBN&lt;/span&gt;)</span><br><span class=\"line\">        &lt;/dt&gt;</span><br><span class=\"line\">        &lt;dd class=&quot;bookDescription&quot;&gt;</span><br><span class=\"line\">&lt;span th:if=&quot;$&#123;book.description&#125;&quot;</span><br><span class=\"line\">      th:text=&quot;$&#123;book.description&#125;&quot;&gt;Description&lt;/span&gt;</span><br><span class=\"line\">            &lt;span th:if=&quot;$&#123;book.description eq null&#125;&quot;&gt;</span><br><span class=\"line\">description为空&lt;/span&gt;</span><br><span class=\"line\">        &lt;/dd&gt;</span><br><span class=\"line\">    &lt;/dl&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;div th:if=&quot;$&#123;#lists.isEmpty(books)&#125;&quot;&gt;</span><br><span class=\"line\">    &lt;p&gt;当前没有阅读&lt;/p&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;hr/&gt;</span><br><span class=\"line\">&lt;h3&gt;添加书&lt;/h3&gt;</span><br><span class=\"line\">&lt;!--只需要进控制器即可 直接post当前路径--&gt;</span><br><span class=\"line\">&lt;form method=&quot;POST&quot;&gt;</span><br><span class=\"line\">    &lt;label&gt;标题:&lt;/label&gt;</span><br><span class=\"line\">    &lt;input type=&quot;text&quot; name=&quot;title&quot; size=&quot;50&quot;&gt;&lt;/input&gt;&lt;br/&gt;</span><br><span class=\"line\">    &lt;label&gt;作者:&lt;/label&gt;</span><br><span class=\"line\">    &lt;input type=&quot;text&quot; name=&quot;author&quot; size=&quot;50&quot;&gt;&lt;/input&gt;&lt;br/&gt;</span><br><span class=\"line\">    &lt;label&gt;ISBN:&lt;/label&gt;</span><br><span class=\"line\">    &lt;input type=&quot;text&quot; name=&quot;isbn&quot; size=&quot;15&quot;&gt;&lt;/input&gt;&lt;br/&gt;</span><br><span class=\"line\">    &lt;label&gt;Description:&lt;/label&gt;&lt;br/&gt;</span><br><span class=\"line\">    &lt;textarea name=&quot;description&quot; cols=&quot;80&quot; rows=&quot;5&quot;&gt;</span><br><span class=\"line\">&lt;/textarea&gt;&lt;br/&gt;</span><br><span class=\"line\">    &lt;input type=&quot;submit&quot;&gt;&lt;/input&gt;</span><br><span class=\"line\">&lt;/form&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p></p>\n<p>##浏览器打开<a href=\"http://localhost:8080/sss(任意字符串\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/sss(任意字符串</a> 进 get  /{reader}控制器即可)</p>\n<p>###代码地址:<a href=\"https://github.com/xuxianyu/myGitHub/tree/master/springboot\" target=\"_blank\" rel=\"noopener\">https://github.com/xuxianyu/myGitHub/tree/master/springboot</a></p>"},{"title":"spring boot (三)笔记","abbrlink":"241784d","date":"2017-11-10T16:00:00.000Z","_content":"###spring boot中 在某些配置的时候肯定是需要自定义配置的  spring boot 默认显示配置覆盖默认配置 所以只需要符合spring boot的配置环境\n###能够覆盖默认配置的配置位置\n1:命令行参数(如直接命令行启动某个jar  后面附带的命令)\n2:jndi配置\n3:jvm配置\n4:操作系统环境变量\n5:随机生成带random.*的属性(并不是很明白 以后看懂了 在更新)\n6:应用程序的application.properties 或者 application.yml\n7:通过@PropertySource注解标注的bean\n######按照顺序覆盖  优先级从1-7 依次降低 就是说 当命令行指定了某个配置 后面在怎么写 也无法改变 因为     命令行的参数优先级最高\n######如果 有的配置上述几个位置没有配置则采用spring boot 的默认配置\n\n###application文件位置\n1:外置 应用程序的运行目录的/config目录\n2:外置 应用程序运行目录\n3:内置 jar或者war的/config目录内\n4:内置 jar或者war的根目录 \n######也是从1-4 优先级依次降低、yml配置 覆盖 properties中的配置\n\n###在程序中使用配置中的参数\n@ConfigurationProperties \n这个注解可以去配置中寻找某些前缀的参数 \n如 配置中有 \n```\nmy.name=xianyu\nmy.sex=boy\n```\n那么可以在某个bean中注入 通过setter注入\n···\n@ConfigurationProperties(prefix=\"my\")\npublic class myProperties{\n  private String name;\nprivate String sex;\nsetter.getter 。。。。\n}\n···\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/spring/springboot入坑笔记(三)-自定义配置.md","raw":"---\ntitle: spring boot (三)笔记\ncategories: 笔记\ntags:\n  - java\n  - spring\nabbrlink: 241784d\ndate: 2017-11-11 00:00:00\n---\n###spring boot中 在某些配置的时候肯定是需要自定义配置的  spring boot 默认显示配置覆盖默认配置 所以只需要符合spring boot的配置环境\n###能够覆盖默认配置的配置位置\n1:命令行参数(如直接命令行启动某个jar  后面附带的命令)\n2:jndi配置\n3:jvm配置\n4:操作系统环境变量\n5:随机生成带random.*的属性(并不是很明白 以后看懂了 在更新)\n6:应用程序的application.properties 或者 application.yml\n7:通过@PropertySource注解标注的bean\n######按照顺序覆盖  优先级从1-7 依次降低 就是说 当命令行指定了某个配置 后面在怎么写 也无法改变 因为     命令行的参数优先级最高\n######如果 有的配置上述几个位置没有配置则采用spring boot 的默认配置\n\n###application文件位置\n1:外置 应用程序的运行目录的/config目录\n2:外置 应用程序运行目录\n3:内置 jar或者war的/config目录内\n4:内置 jar或者war的根目录 \n######也是从1-4 优先级依次降低、yml配置 覆盖 properties中的配置\n\n###在程序中使用配置中的参数\n@ConfigurationProperties \n这个注解可以去配置中寻找某些前缀的参数 \n如 配置中有 \n```\nmy.name=xianyu\nmy.sex=boy\n```\n那么可以在某个bean中注入 通过setter注入\n···\n@ConfigurationProperties(prefix=\"my\")\npublic class myProperties{\n  private String name;\nprivate String sex;\nsetter.getter 。。。。\n}\n···\n\n\n\n\n\n\n\n\n\n\n","slug":"spring/springboot入坑笔记(三)-自定义配置","published":1,"updated":"2018-08-17T08:10:03.923Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjo9uatz90058mwczgtuh7zbz","content":"<p>###spring boot中 在某些配置的时候肯定是需要自定义配置的 spring boot 默认显示配置覆盖默认配置 所以只需要符合spring boot的配置环境</p><p>###能够覆盖默认配置的配置位置<br>1:命令行参数(如直接命令行启动某个jar 后面附带的命令)<br>2:jndi配置<br>3:jvm配置<br>4:操作系统环境变量<br>5:随机生成带random.*的属性(并不是很明白 以后看懂了 在更新)<br>6:应用程序的application.properties 或者 application.yml<br>7:通过@PropertySource注解标注的bean</p><p>######按照顺序覆盖 优先级从1-7 依次降低 就是说 当命令行指定了某个配置 后面在怎么写 也无法改变 因为 命令行的参数优先级最高</p><p>######如果 有的配置上述几个位置没有配置则采用spring boot 的默认配置</p><p>###application文件位置<br>1:外置 应用程序的运行目录的/config目录<br>2:外置 应用程序运行目录<br>3:内置 jar或者war的/config目录内<br>4:内置 jar或者war的根目录</p><p>######也是从1-4 优先级依次降低、yml配置 覆盖 properties中的配置</p><p>###在程序中使用配置中的参数<br>@ConfigurationProperties<br>这个注解可以去配置中寻找某些前缀的参数<br>如 配置中有<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">my.name=xianyu</span><br><span class=\"line\">my.sex=boy</span><br></pre></td></tr></table></figure><p></p>\n<p>那么可以在某个bean中注入 通过setter注入<br>···<br>@ConfigurationProperties(prefix=”my”)<br>public class myProperties{<br>  private String name;<br>private String sex;<br>setter.getter 。。。。<br>}<br>···</p>","site":{"data":{}},"excerpt":"","more":"<p>###spring boot中 在某些配置的时候肯定是需要自定义配置的 spring boot 默认显示配置覆盖默认配置 所以只需要符合spring boot的配置环境</p><p>###能够覆盖默认配置的配置位置<br>1:命令行参数(如直接命令行启动某个jar 后面附带的命令)<br>2:jndi配置<br>3:jvm配置<br>4:操作系统环境变量<br>5:随机生成带random.*的属性(并不是很明白 以后看懂了 在更新)<br>6:应用程序的application.properties 或者 application.yml<br>7:通过@PropertySource注解标注的bean</p><p>######按照顺序覆盖 优先级从1-7 依次降低 就是说 当命令行指定了某个配置 后面在怎么写 也无法改变 因为 命令行的参数优先级最高</p><p>######如果 有的配置上述几个位置没有配置则采用spring boot 的默认配置</p><p>###application文件位置<br>1:外置 应用程序的运行目录的/config目录<br>2:外置 应用程序运行目录<br>3:内置 jar或者war的/config目录内<br>4:内置 jar或者war的根目录</p><p>######也是从1-4 优先级依次降低、yml配置 覆盖 properties中的配置</p><p>###在程序中使用配置中的参数<br>@ConfigurationProperties<br>这个注解可以去配置中寻找某些前缀的参数<br>如 配置中有<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">my.name=xianyu</span><br><span class=\"line\">my.sex=boy</span><br></pre></td></tr></table></figure><p></p>\n<p>那么可以在某个bean中注入 通过setter注入<br>···<br>@ConfigurationProperties(prefix=”my”)<br>public class myProperties{<br>  private String name;<br>private String sex;<br>setter.getter 。。。。<br>}<br>···</p>"},{"title":"spring boot (四)笔记","abbrlink":"68619b43","date":"2017-11-10T16:00:00.000Z","_content":"\n###在使用spring boot的时候 spring本身会根据springboot的版本引入依赖包 跟maven一样有隐藏依赖会自动引入这个时候如果不需要其中一些工具包 或者需要指定某些包的版本 可以通过maven的功能去排除依赖和覆盖依赖\n##排除依赖 通过maven的语法排除依赖包   exclusions\n例如 为项目大小瘦身的时候 排除不需要的jar 例如jackson\n```\n<dependency>\n  <groupId>org.springframework.boot</groupId>\n  <artifactId>spring-boot-starter-web</artifactId>\n <exclusions>\n  <exclusion>\n        <groupId>com.fasterxml.jackson.core</groupId>\n    </exclusion>\n  </exclusions>\n</dependency>\n```  \n##覆盖依赖 通过maven的最短路径寻包的特性 去覆盖已有依赖\n例如 需要指定某个包的版本 直接在spring boot所在的pom中添加这个包的依赖即可 \n例如 spring boot 的版本依赖的jackson是2.3.3 但是我们需要2.4.3版本 直接在spring boot 的pom下面添加2.4.3 的jackson即可\n```\n<dependency>\n<groupId>com.fasterxml.jackson.core</groupId>\n<artifactId>jackson-databind</artifactId>\n<version>2.4.3</version>\n</dependency>\n```\n","source":"_posts/spring/springboot入坑笔记(二)-排除依赖、覆盖依赖.md","raw":"---\ntitle: spring boot (四)笔记\ncategories: 笔记\ntags:\n  - java\n  - spring\nabbrlink: 68619b43\ndate: 2017-11-11 00:00:00\n---\n\n###在使用spring boot的时候 spring本身会根据springboot的版本引入依赖包 跟maven一样有隐藏依赖会自动引入这个时候如果不需要其中一些工具包 或者需要指定某些包的版本 可以通过maven的功能去排除依赖和覆盖依赖\n##排除依赖 通过maven的语法排除依赖包   exclusions\n例如 为项目大小瘦身的时候 排除不需要的jar 例如jackson\n```\n<dependency>\n  <groupId>org.springframework.boot</groupId>\n  <artifactId>spring-boot-starter-web</artifactId>\n <exclusions>\n  <exclusion>\n        <groupId>com.fasterxml.jackson.core</groupId>\n    </exclusion>\n  </exclusions>\n</dependency>\n```  \n##覆盖依赖 通过maven的最短路径寻包的特性 去覆盖已有依赖\n例如 需要指定某个包的版本 直接在spring boot所在的pom中添加这个包的依赖即可 \n例如 spring boot 的版本依赖的jackson是2.3.3 但是我们需要2.4.3版本 直接在spring boot 的pom下面添加2.4.3 的jackson即可\n```\n<dependency>\n<groupId>com.fasterxml.jackson.core</groupId>\n<artifactId>jackson-databind</artifactId>\n<version>2.4.3</version>\n</dependency>\n```\n","slug":"spring/springboot入坑笔记(二)-排除依赖、覆盖依赖","published":1,"updated":"2018-08-17T08:10:03.923Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjo9uatzb005bmwczv3hxg91v","content":"<p>###在使用spring boot的时候 spring本身会根据springboot的版本引入依赖包 跟maven一样有隐藏依赖会自动引入这个时候如果不需要其中一些工具包 或者需要指定某些包的版本 可以通过maven的功能去排除依赖和覆盖依赖</p><p>##排除依赖 通过maven的语法排除依赖包 exclusions<br>例如 为项目大小瘦身的时候 排除不需要的jar 例如jackson<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">  &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">  &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class=\"line\"> &lt;exclusions&gt;</span><br><span class=\"line\">  &lt;exclusion&gt;</span><br><span class=\"line\">        &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;/exclusion&gt;</span><br><span class=\"line\">  &lt;/exclusions&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br><span class=\"line\">```  </span><br><span class=\"line\">##覆盖依赖 通过maven的最短路径寻包的特性 去覆盖已有依赖</span><br><span class=\"line\">例如 需要指定某个包的版本 直接在spring boot所在的pom中添加这个包的依赖即可 </span><br><span class=\"line\">例如 spring boot 的版本依赖的jackson是2.3.3 但是我们需要2.4.3版本 直接在spring boot 的pom下面添加2.4.3 的jackson即可</span><br></pre></td></tr></table></figure><p></p>\n<p><dependency></dependency></p>\n<p><groupid>com.fasterxml.jackson.core</groupid></p>\n<p><artifactid>jackson-databind</artifactid></p>\n<p><version>2.4.3</version><br><br>```</p>","site":{"data":{}},"excerpt":"","more":"<p>###在使用spring boot的时候 spring本身会根据springboot的版本引入依赖包 跟maven一样有隐藏依赖会自动引入这个时候如果不需要其中一些工具包 或者需要指定某些包的版本 可以通过maven的功能去排除依赖和覆盖依赖</p><p>##排除依赖 通过maven的语法排除依赖包 exclusions<br>例如 为项目大小瘦身的时候 排除不需要的jar 例如jackson<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">  &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">  &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class=\"line\"> &lt;exclusions&gt;</span><br><span class=\"line\">  &lt;exclusion&gt;</span><br><span class=\"line\">        &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;/exclusion&gt;</span><br><span class=\"line\">  &lt;/exclusions&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br><span class=\"line\">```  </span><br><span class=\"line\">##覆盖依赖 通过maven的最短路径寻包的特性 去覆盖已有依赖</span><br><span class=\"line\">例如 需要指定某个包的版本 直接在spring boot所在的pom中添加这个包的依赖即可 </span><br><span class=\"line\">例如 spring boot 的版本依赖的jackson是2.3.3 但是我们需要2.4.3版本 直接在spring boot 的pom下面添加2.4.3 的jackson即可</span><br></pre></td></tr></table></figure><p></p>\n<p><dependency></dependency></p>\n<p><groupid>com.fasterxml.jackson.core</groupid></p>\n<p><artifactid>jackson-databind</artifactid></p>\n<p><version>2.4.3</version><br><br>```</p>"},{"title":"git-lfs使用笔记","comments":1,"abbrlink":"68597cc5","date":"2018-07-04T04:47:40.000Z","_content":"#### 前言\n一直想找个能够存储比较大的文件 而且又能像git一样操作方便快捷   \n开始准备自建svn来达到需求的   \n后来看github的一些文档看到了git lfs (Git Large File Storage)功能    \n干脆了解了一下  顺便记录下这篇笔记 方便以后查阅  \n常见的git 仓库网站都提供 git lfs 存储  例如github \n笔记中任何命令都在ubuntu中执行过 \n#### 实战\n##### 安装 git lfs\ngit lfs支持直接二进制安装、各种包管理工具安装(apt、yum、pacman之类的)\n```\n#安装 git lfs\n sudo apt install git-lfs\n # 初始化git lfs\n sudo git lfs install \n```\n##### 配置lfs 管理的文件\n初始化 lfs的配置文件\n```\ngit lfs track \"<目录>/*\"\n```\n执行上面的命令会在项目的根目录生成 .gitattributes\n内容大致如下 \n```\n<目录>/* filter=lfs diff=lfs merge=lfs -text\n```\n\n##### 添加lfs .gitattributes配置到仓库 \n```\nsudo git add .gitattributes \nsudo commit -m \"init  git lfs config\"\n```\n\n##### 添加并且上传大文件\n将大文件复制到 <目录>\n```\nsudo git add <目录>/xxx\nsudo git commit -m \"update xxx\"\nsudo git push \n```\n基于git lfs 管理的文件更新会显示成\n```\nGit LFS: (1 of 1 files) 9.18 KB / 9.18 KB                                                                                                                      \n对象计数中: 10, 完成.\n。。。。。。。。\n```\n##### git lfs 卸载  \n* 卸载git lfs\n```\nsudo apt --purge remove git-lfs\n```\n* 删除lfs相关的filter\n```\n#查看 git的全局配置\ngit config -l \n#删除和lfs有关的配置\n## 查看lfs相关的配置\ngit config -l|grep lfs\n##挨个删除\ngit config --global --unset filter.lfs.clean\ngit config --global --unset filter.lfs.smudge\ngit config --global --unset filter.lfs.process\ngit config --global --unset filter.lfs.required\ngit config --global --unset filter.lfs.required\n#删除 lfs的仓库地址  按需删除\ngit config --global --unset lfs.https://github.com/xuxianyu/blog.git/info/lfs.access\n```\n#### 总结\ngit 的功能越来越吊了  现在能够好好的管理大文件了  \ngit只是存储大文件的指针   不负责存储 还是保持了git的高效 易用 但是有能够管理大文件  6的一批\n","source":"_posts/搬砖工具/git-lfs使用笔记.md","raw":"---\ntitle: git-lfs使用笔记\ncomments: true\ncategories: 笔记\ntags:\n  - git lfs\n  - tools\n  - github\nabbrlink: 68597cc5\ndate: 2018-07-04 12:47:40\n---\n#### 前言\n一直想找个能够存储比较大的文件 而且又能像git一样操作方便快捷   \n开始准备自建svn来达到需求的   \n后来看github的一些文档看到了git lfs (Git Large File Storage)功能    \n干脆了解了一下  顺便记录下这篇笔记 方便以后查阅  \n常见的git 仓库网站都提供 git lfs 存储  例如github \n笔记中任何命令都在ubuntu中执行过 \n#### 实战\n##### 安装 git lfs\ngit lfs支持直接二进制安装、各种包管理工具安装(apt、yum、pacman之类的)\n```\n#安装 git lfs\n sudo apt install git-lfs\n # 初始化git lfs\n sudo git lfs install \n```\n##### 配置lfs 管理的文件\n初始化 lfs的配置文件\n```\ngit lfs track \"<目录>/*\"\n```\n执行上面的命令会在项目的根目录生成 .gitattributes\n内容大致如下 \n```\n<目录>/* filter=lfs diff=lfs merge=lfs -text\n```\n\n##### 添加lfs .gitattributes配置到仓库 \n```\nsudo git add .gitattributes \nsudo commit -m \"init  git lfs config\"\n```\n\n##### 添加并且上传大文件\n将大文件复制到 <目录>\n```\nsudo git add <目录>/xxx\nsudo git commit -m \"update xxx\"\nsudo git push \n```\n基于git lfs 管理的文件更新会显示成\n```\nGit LFS: (1 of 1 files) 9.18 KB / 9.18 KB                                                                                                                      \n对象计数中: 10, 完成.\n。。。。。。。。\n```\n##### git lfs 卸载  \n* 卸载git lfs\n```\nsudo apt --purge remove git-lfs\n```\n* 删除lfs相关的filter\n```\n#查看 git的全局配置\ngit config -l \n#删除和lfs有关的配置\n## 查看lfs相关的配置\ngit config -l|grep lfs\n##挨个删除\ngit config --global --unset filter.lfs.clean\ngit config --global --unset filter.lfs.smudge\ngit config --global --unset filter.lfs.process\ngit config --global --unset filter.lfs.required\ngit config --global --unset filter.lfs.required\n#删除 lfs的仓库地址  按需删除\ngit config --global --unset lfs.https://github.com/xuxianyu/blog.git/info/lfs.access\n```\n#### 总结\ngit 的功能越来越吊了  现在能够好好的管理大文件了  \ngit只是存储大文件的指针   不负责存储 还是保持了git的高效 易用 但是有能够管理大文件  6的一批\n","slug":"搬砖工具/git-lfs使用笔记","published":1,"updated":"2018-08-17T08:10:03.923Z","layout":"post","photos":[],"link":"","_id":"cjo9uatzc005dmwczbt42a02e","content":"<h4 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h4><p>一直想找个能够存储比较大的文件 而且又能像git一样操作方便快捷<br>开始准备自建svn来达到需求的<br>后来看github的一些文档看到了git lfs (Git Large File Storage)功能<br>干脆了解了一下 顺便记录下这篇笔记 方便以后查阅<br>常见的git 仓库网站都提供 git lfs 存储 例如github<br>笔记中任何命令都在ubuntu中执行过</p><h4 id=\"实战\"><a href=\"#实战\" class=\"headerlink\" title=\"实战\"></a>实战</h4><h5 id=\"安装-git-lfs\"><a href=\"#安装-git-lfs\" class=\"headerlink\" title=\"安装 git lfs\"></a>安装 git lfs</h5><p>git lfs支持直接二进制安装、各种包管理工具安装(apt、yum、pacman之类的)<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#安装 git lfs</span><br><span class=\"line\"> sudo apt install git-lfs</span><br><span class=\"line\"> # 初始化git lfs</span><br><span class=\"line\"> sudo git lfs install</span><br></pre></td></tr></table></figure><p></p>\n<h5 id=\"配置lfs-管理的文件\"><a href=\"#配置lfs-管理的文件\" class=\"headerlink\" title=\"配置lfs 管理的文件\"></a>配置lfs 管理的文件</h5><p>初始化 lfs的配置文件<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git lfs track &quot;&lt;目录&gt;/*&quot;</span><br></pre></td></tr></table></figure><p></p>\n<p>执行上面的命令会在项目的根目录生成 .gitattributes<br>内容大致如下<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;目录&gt;/* filter=lfs diff=lfs merge=lfs -text</span><br></pre></td></tr></table></figure><p></p>\n<h5 id=\"添加lfs-gitattributes配置到仓库\"><a href=\"#添加lfs-gitattributes配置到仓库\" class=\"headerlink\" title=\"添加lfs .gitattributes配置到仓库\"></a>添加lfs .gitattributes配置到仓库</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo git add .gitattributes </span><br><span class=\"line\">sudo commit -m &quot;init  git lfs config&quot;</span><br></pre></td></tr></table></figure>\n<h5 id=\"添加并且上传大文件\"><a href=\"#添加并且上传大文件\" class=\"headerlink\" title=\"添加并且上传大文件\"></a>添加并且上传大文件</h5><p>将大文件复制到 &lt;目录&gt;<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo git add &lt;目录&gt;/xxx</span><br><span class=\"line\">sudo git commit -m &quot;update xxx&quot;</span><br><span class=\"line\">sudo git push</span><br></pre></td></tr></table></figure><p></p>\n<p>基于git lfs 管理的文件更新会显示成<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Git LFS: (1 of 1 files) 9.18 KB / 9.18 KB                                                                                                                      </span><br><span class=\"line\">对象计数中: 10, 完成.</span><br><span class=\"line\">。。。。。。。。</span><br></pre></td></tr></table></figure><p></p>\n<h5 id=\"git-lfs-卸载\"><a href=\"#git-lfs-卸载\" class=\"headerlink\" title=\"git lfs 卸载\"></a>git lfs 卸载</h5><ul>\n<li><p>卸载git lfs</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt --purge remove git-lfs</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>删除lfs相关的filter</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#查看 git的全局配置</span><br><span class=\"line\">git config -l </span><br><span class=\"line\">#删除和lfs有关的配置</span><br><span class=\"line\">## 查看lfs相关的配置</span><br><span class=\"line\">git config -l|grep lfs</span><br><span class=\"line\">##挨个删除</span><br><span class=\"line\">git config --global --unset filter.lfs.clean</span><br><span class=\"line\">git config --global --unset filter.lfs.smudge</span><br><span class=\"line\">git config --global --unset filter.lfs.process</span><br><span class=\"line\">git config --global --unset filter.lfs.required</span><br><span class=\"line\">git config --global --unset filter.lfs.required</span><br><span class=\"line\">#删除 lfs的仓库地址  按需删除</span><br><span class=\"line\">git config --global --unset lfs.https://github.com/xuxianyu/blog.git/info/lfs.access</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><p>git 的功能越来越吊了  现在能够好好的管理大文件了<br>git只是存储大文件的指针   不负责存储 还是保持了git的高效 易用 但是有能够管理大文件  6的一批</p>","site":{"data":{}},"excerpt":"","more":"<h4 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h4><p>一直想找个能够存储比较大的文件 而且又能像git一样操作方便快捷<br>开始准备自建svn来达到需求的<br>后来看github的一些文档看到了git lfs (Git Large File Storage)功能<br>干脆了解了一下 顺便记录下这篇笔记 方便以后查阅<br>常见的git 仓库网站都提供 git lfs 存储 例如github<br>笔记中任何命令都在ubuntu中执行过</p><h4 id=\"实战\"><a href=\"#实战\" class=\"headerlink\" title=\"实战\"></a>实战</h4><h5 id=\"安装-git-lfs\"><a href=\"#安装-git-lfs\" class=\"headerlink\" title=\"安装 git lfs\"></a>安装 git lfs</h5><p>git lfs支持直接二进制安装、各种包管理工具安装(apt、yum、pacman之类的)<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#安装 git lfs</span><br><span class=\"line\"> sudo apt install git-lfs</span><br><span class=\"line\"> # 初始化git lfs</span><br><span class=\"line\"> sudo git lfs install</span><br></pre></td></tr></table></figure><p></p>\n<h5 id=\"配置lfs-管理的文件\"><a href=\"#配置lfs-管理的文件\" class=\"headerlink\" title=\"配置lfs 管理的文件\"></a>配置lfs 管理的文件</h5><p>初始化 lfs的配置文件<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git lfs track &quot;&lt;目录&gt;/*&quot;</span><br></pre></td></tr></table></figure><p></p>\n<p>执行上面的命令会在项目的根目录生成 .gitattributes<br>内容大致如下<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;目录&gt;/* filter=lfs diff=lfs merge=lfs -text</span><br></pre></td></tr></table></figure><p></p>\n<h5 id=\"添加lfs-gitattributes配置到仓库\"><a href=\"#添加lfs-gitattributes配置到仓库\" class=\"headerlink\" title=\"添加lfs .gitattributes配置到仓库\"></a>添加lfs .gitattributes配置到仓库</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo git add .gitattributes </span><br><span class=\"line\">sudo commit -m &quot;init  git lfs config&quot;</span><br></pre></td></tr></table></figure>\n<h5 id=\"添加并且上传大文件\"><a href=\"#添加并且上传大文件\" class=\"headerlink\" title=\"添加并且上传大文件\"></a>添加并且上传大文件</h5><p>将大文件复制到 &lt;目录&gt;<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo git add &lt;目录&gt;/xxx</span><br><span class=\"line\">sudo git commit -m &quot;update xxx&quot;</span><br><span class=\"line\">sudo git push</span><br></pre></td></tr></table></figure><p></p>\n<p>基于git lfs 管理的文件更新会显示成<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Git LFS: (1 of 1 files) 9.18 KB / 9.18 KB                                                                                                                      </span><br><span class=\"line\">对象计数中: 10, 完成.</span><br><span class=\"line\">。。。。。。。。</span><br></pre></td></tr></table></figure><p></p>\n<h5 id=\"git-lfs-卸载\"><a href=\"#git-lfs-卸载\" class=\"headerlink\" title=\"git lfs 卸载\"></a>git lfs 卸载</h5><ul>\n<li><p>卸载git lfs</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt --purge remove git-lfs</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>删除lfs相关的filter</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#查看 git的全局配置</span><br><span class=\"line\">git config -l </span><br><span class=\"line\">#删除和lfs有关的配置</span><br><span class=\"line\">## 查看lfs相关的配置</span><br><span class=\"line\">git config -l|grep lfs</span><br><span class=\"line\">##挨个删除</span><br><span class=\"line\">git config --global --unset filter.lfs.clean</span><br><span class=\"line\">git config --global --unset filter.lfs.smudge</span><br><span class=\"line\">git config --global --unset filter.lfs.process</span><br><span class=\"line\">git config --global --unset filter.lfs.required</span><br><span class=\"line\">git config --global --unset filter.lfs.required</span><br><span class=\"line\">#删除 lfs的仓库地址  按需删除</span><br><span class=\"line\">git config --global --unset lfs.https://github.com/xuxianyu/blog.git/info/lfs.access</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><p>git 的功能越来越吊了  现在能够好好的管理大文件了<br>git只是存储大文件的指针   不负责存储 还是保持了git的高效 易用 但是有能够管理大文件  6的一批</p>"},{"title":"idea 常用插件","abbrlink":"a365393a","date":"2017-11-10T16:00:00.000Z","_content":"|名称|功能|快捷键|备注|\n|:-----|:-----|:--------|:------|\n|ace jump|文件中匹配字符串跳转|ctrl+;|常用在代码中匹配跳转|\n|vim |使用类似vim方式操作文件内容||vim控使用|\n|find bugs|查找代码中不符合他的规范的代码||略坑  但是有点用|\n|.ignore|git 配置忽略文件的插件||可以通过查看是否变灰 来确定配置是否生效|\n|bashsupport|写bashshell脚本的插件||一般用途  shell脚本 不是很需要这个|\n|lombok|配合lombok.jar使用||lombok 很不错 能让代码看起来 更加干净整洁|\n|markdown support|书写markdown 文件的插件||还不错 用起来 和简书上差不多|\n|code glance|代码试图 | pgup pgon 上下翻屏||\n|String Manipulation |转化字符串 |alt +m |\n","source":"_posts/搬砖工具/idea常用插件.md","raw":"---\ntitle: idea 常用插件\ncategories: 工具\ntags:\n  - tools\nabbrlink: a365393a\ndate: 2017-11-11 00:00:00\n---\n|名称|功能|快捷键|备注|\n|:-----|:-----|:--------|:------|\n|ace jump|文件中匹配字符串跳转|ctrl+;|常用在代码中匹配跳转|\n|vim |使用类似vim方式操作文件内容||vim控使用|\n|find bugs|查找代码中不符合他的规范的代码||略坑  但是有点用|\n|.ignore|git 配置忽略文件的插件||可以通过查看是否变灰 来确定配置是否生效|\n|bashsupport|写bashshell脚本的插件||一般用途  shell脚本 不是很需要这个|\n|lombok|配合lombok.jar使用||lombok 很不错 能让代码看起来 更加干净整洁|\n|markdown support|书写markdown 文件的插件||还不错 用起来 和简书上差不多|\n|code glance|代码试图 | pgup pgon 上下翻屏||\n|String Manipulation |转化字符串 |alt +m |\n","slug":"搬砖工具/idea常用插件","published":1,"updated":"2018-09-04T07:07:55.717Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjo9uatzc005gmwcz5wsx9gow","content":"<table><thead><tr><th style=\"text-align:left\">名称</th><th style=\"text-align:left\">功能</th><th style=\"text-align:left\">快捷键</th><th style=\"text-align:left\">备注</th></tr></thead><tbody><tr><td style=\"text-align:left\">ace jump</td><td style=\"text-align:left\">文件中匹配字符串跳转</td><td style=\"text-align:left\">ctrl+;</td><td style=\"text-align:left\">常用在代码中匹配跳转</td></tr><tr><td style=\"text-align:left\">vim</td><td style=\"text-align:left\">使用类似vim方式操作文件内容</td><td style=\"text-align:left\"></td><td style=\"text-align:left\">vim控使用</td></tr><tr><td style=\"text-align:left\">find bugs</td><td style=\"text-align:left\">查找代码中不符合他的规范的代码</td><td style=\"text-align:left\"></td><td style=\"text-align:left\">略坑 但是有点用</td></tr><tr><td style=\"text-align:left\">.ignore</td><td style=\"text-align:left\">git 配置忽略文件的插件</td><td style=\"text-align:left\"></td><td style=\"text-align:left\">可以通过查看是否变灰 来确定配置是否生效</td></tr><tr><td style=\"text-align:left\">bashsupport</td><td style=\"text-align:left\">写bashshell脚本的插件</td><td style=\"text-align:left\"></td><td style=\"text-align:left\">一般用途 shell脚本 不是很需要这个</td></tr><tr><td style=\"text-align:left\">lombok</td><td style=\"text-align:left\">配合lombok.jar使用</td><td style=\"text-align:left\"></td><td style=\"text-align:left\">lombok 很不错 能让代码看起来 更加干净整洁</td></tr><tr><td style=\"text-align:left\">markdown support</td><td style=\"text-align:left\">书写markdown 文件的插件</td><td style=\"text-align:left\"></td><td style=\"text-align:left\">还不错 用起来 和简书上差不多</td></tr><tr><td style=\"text-align:left\">code glance</td><td style=\"text-align:left\">代码试图</td><td style=\"text-align:left\">pgup pgon 上下翻屏</td><td style=\"text-align:left\"></td></tr><tr><td style=\"text-align:left\">String Manipulation</td><td style=\"text-align:left\">转化字符串</td><td style=\"text-align:left\">alt +m</td></tr></tbody></table>","site":{"data":{}},"excerpt":"","more":"<table><thead><tr><th style=\"text-align:left\">名称</th><th style=\"text-align:left\">功能</th><th style=\"text-align:left\">快捷键</th><th style=\"text-align:left\">备注</th></tr></thead><tbody><tr><td style=\"text-align:left\">ace jump</td><td style=\"text-align:left\">文件中匹配字符串跳转</td><td style=\"text-align:left\">ctrl+;</td><td style=\"text-align:left\">常用在代码中匹配跳转</td></tr><tr><td style=\"text-align:left\">vim</td><td style=\"text-align:left\">使用类似vim方式操作文件内容</td><td style=\"text-align:left\"></td><td style=\"text-align:left\">vim控使用</td></tr><tr><td style=\"text-align:left\">find bugs</td><td style=\"text-align:left\">查找代码中不符合他的规范的代码</td><td style=\"text-align:left\"></td><td style=\"text-align:left\">略坑 但是有点用</td></tr><tr><td style=\"text-align:left\">.ignore</td><td style=\"text-align:left\">git 配置忽略文件的插件</td><td style=\"text-align:left\"></td><td style=\"text-align:left\">可以通过查看是否变灰 来确定配置是否生效</td></tr><tr><td style=\"text-align:left\">bashsupport</td><td style=\"text-align:left\">写bashshell脚本的插件</td><td style=\"text-align:left\"></td><td style=\"text-align:left\">一般用途 shell脚本 不是很需要这个</td></tr><tr><td style=\"text-align:left\">lombok</td><td style=\"text-align:left\">配合lombok.jar使用</td><td style=\"text-align:left\"></td><td style=\"text-align:left\">lombok 很不错 能让代码看起来 更加干净整洁</td></tr><tr><td style=\"text-align:left\">markdown support</td><td style=\"text-align:left\">书写markdown 文件的插件</td><td style=\"text-align:left\"></td><td style=\"text-align:left\">还不错 用起来 和简书上差不多</td></tr><tr><td style=\"text-align:left\">code glance</td><td style=\"text-align:left\">代码试图</td><td style=\"text-align:left\">pgup pgon 上下翻屏</td><td style=\"text-align:left\"></td></tr><tr><td style=\"text-align:left\">String Manipulation</td><td style=\"text-align:left\">转化字符串</td><td style=\"text-align:left\">alt +m</td></tr></tbody></table>"},{"title":"代码质量监控平台sonar使用笔记","comments":1,"abbrlink":"8dcd7b21","date":"2018-06-28T06:21:19.000Z","_content":"#### 前言\n最近写的代码 太多了 感觉质量有所下降 \n之前本地一直使用 alibaba的code插件 但是没有出团队版本的  \n干脆搞了一个 sonar 检测一波自己的代码质量 \n#### sonar docker 方式启动 \n```\n#安装中文插件的 sonar \n\nsudo  docker run -d --name sonarqube -p 9000:9000 -p 9092:9092 jiuming/sonar-qube-zh:1.0.0\n#原版 英文版本的\n#sudo  docker run -d --name sonarqube -p 9000:9000 -p 9092:9092 sonarqube\n```\nsonar swarm stack配置\n```\nversion: '3.3'\nservices:\n sonar:\n  image: jiuming/sonar-qube-zh:1.0.0\n  ports:\n   - 9000:9000\n   - 9092:9092\n  networks:\n    - sonar\n  deploy:\n   replicas: 1\n   update_config:\n    parallelism: 1\n    delay: 10s\n   restart_policy:\n    condition: on-failure\nnetworks:\n  sonar:\n   driver: overlay\n```\n打开 http://localhost:9000  默认账户:admin  默认密码:admin\n* sonar qube 官方docker image 安装中文插件方法  \n登录 容器  docker exec -it <containerId> /bin/sh 执行如下命令    \nps: sonar 中文插件版本 请按照https://github.com/SonarQubeCommunity/sonar-l10n-zh 文档去下载安装   \n```\n#安装 中文插件\nwget https://github.com/SonarQubeCommunity/sonar-l10n-zh/releases/download/sonar-l10n-zh-plugin-1.21/sonar-l10n-zh-plugin-1.21.jar  && \\\nmv /opt/sonarqube/sonar-l10n-zh-plugin-1.21.jar /opt/sonarqube/extensions/plugins\n```\n或者直接使用已经修改好的镜像jiuming/sonar-qube-zh:1.0.0 这个是基于 7.x的sonar\n####  maven 添加sonar 插件\n```\n            <plugin>\n                    <groupId>org.sonarsource.scanner.maven</groupId>\n                    <artifactId>sonar-maven-plugin</artifactId>\n                    <version>3.4.0.905</version>\n            </plugin>\n```\n#### 执行 sonar 任务 \n如果在另外一台机器上 加上-Dsonar.host.url=http://ip:port   \n如果使用了密钥 那么需要-Dsonar.login=xxxxxx \n```\nmvn sonar:sonar \\\n  -Dsonar.host.url=http://localhost:9000 \n#mvn sonar:sonar \\\n#  -Dsonar.host.url=http://localhost:9000 \\\n#  -Dsonar.login=5cb26b212d30530db172ff6adbfe5d2887698b8c\n```\n\n\n\n#### 遇到的问题\n* 报svn认证错误(git认证错误和这个差不多处理方法 )\n svn: E170001: Authentication required for '<https://xxxxxx:xxx> VisualSVN Server' -\n在配置>通用设置>scm>配置svn的username、password或者配置密钥即可 \n\n#### 总结\n大部分检测的规范 都差不多把  本地还是使用alibaba的规范比较和是 直接安装alibaba的code插件也不错\nsonar 适合团队使用  统一代码风格、减少明显bug \n\n\n\n","source":"_posts/搬砖工具/代码质量监控平台sonar使用笔记.md","raw":"---\ntitle: 代码质量监控平台sonar使用笔记\ncomments: true\ncategories: 实战\ntags:\n  - 代码质量\n  - 持续集成\nabbrlink: 8dcd7b21\ndate: 2018-06-28 14:21:19\n---\n#### 前言\n最近写的代码 太多了 感觉质量有所下降 \n之前本地一直使用 alibaba的code插件 但是没有出团队版本的  \n干脆搞了一个 sonar 检测一波自己的代码质量 \n#### sonar docker 方式启动 \n```\n#安装中文插件的 sonar \n\nsudo  docker run -d --name sonarqube -p 9000:9000 -p 9092:9092 jiuming/sonar-qube-zh:1.0.0\n#原版 英文版本的\n#sudo  docker run -d --name sonarqube -p 9000:9000 -p 9092:9092 sonarqube\n```\nsonar swarm stack配置\n```\nversion: '3.3'\nservices:\n sonar:\n  image: jiuming/sonar-qube-zh:1.0.0\n  ports:\n   - 9000:9000\n   - 9092:9092\n  networks:\n    - sonar\n  deploy:\n   replicas: 1\n   update_config:\n    parallelism: 1\n    delay: 10s\n   restart_policy:\n    condition: on-failure\nnetworks:\n  sonar:\n   driver: overlay\n```\n打开 http://localhost:9000  默认账户:admin  默认密码:admin\n* sonar qube 官方docker image 安装中文插件方法  \n登录 容器  docker exec -it <containerId> /bin/sh 执行如下命令    \nps: sonar 中文插件版本 请按照https://github.com/SonarQubeCommunity/sonar-l10n-zh 文档去下载安装   \n```\n#安装 中文插件\nwget https://github.com/SonarQubeCommunity/sonar-l10n-zh/releases/download/sonar-l10n-zh-plugin-1.21/sonar-l10n-zh-plugin-1.21.jar  && \\\nmv /opt/sonarqube/sonar-l10n-zh-plugin-1.21.jar /opt/sonarqube/extensions/plugins\n```\n或者直接使用已经修改好的镜像jiuming/sonar-qube-zh:1.0.0 这个是基于 7.x的sonar\n####  maven 添加sonar 插件\n```\n            <plugin>\n                    <groupId>org.sonarsource.scanner.maven</groupId>\n                    <artifactId>sonar-maven-plugin</artifactId>\n                    <version>3.4.0.905</version>\n            </plugin>\n```\n#### 执行 sonar 任务 \n如果在另外一台机器上 加上-Dsonar.host.url=http://ip:port   \n如果使用了密钥 那么需要-Dsonar.login=xxxxxx \n```\nmvn sonar:sonar \\\n  -Dsonar.host.url=http://localhost:9000 \n#mvn sonar:sonar \\\n#  -Dsonar.host.url=http://localhost:9000 \\\n#  -Dsonar.login=5cb26b212d30530db172ff6adbfe5d2887698b8c\n```\n\n\n\n#### 遇到的问题\n* 报svn认证错误(git认证错误和这个差不多处理方法 )\n svn: E170001: Authentication required for '<https://xxxxxx:xxx> VisualSVN Server' -\n在配置>通用设置>scm>配置svn的username、password或者配置密钥即可 \n\n#### 总结\n大部分检测的规范 都差不多把  本地还是使用alibaba的规范比较和是 直接安装alibaba的code插件也不错\nsonar 适合团队使用  统一代码风格、减少明显bug \n\n\n\n","slug":"搬砖工具/代码质量监控平台sonar使用笔记","published":1,"updated":"2018-08-17T08:10:03.923Z","layout":"post","photos":[],"link":"","_id":"cjo9uatzd005jmwczkxp5bi1v","content":"<h4 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h4><p>最近写的代码 太多了 感觉质量有所下降<br>之前本地一直使用 alibaba的code插件 但是没有出团队版本的<br>干脆搞了一个 sonar 检测一波自己的代码质量</p><h4 id=\"sonar-docker-方式启动\"><a href=\"#sonar-docker-方式启动\" class=\"headerlink\" title=\"sonar docker 方式启动\"></a>sonar docker 方式启动</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#安装中文插件的 sonar </span><br><span class=\"line\"></span><br><span class=\"line\">sudo  docker run -d --name sonarqube -p 9000:9000 -p 9092:9092 jiuming/sonar-qube-zh:1.0.0</span><br><span class=\"line\">#原版 英文版本的</span><br><span class=\"line\">#sudo  docker run -d --name sonarqube -p 9000:9000 -p 9092:9092 sonarqube</span><br></pre></td></tr></table></figure>\n<p>sonar swarm stack配置<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">version: &apos;3.3&apos;</span><br><span class=\"line\">services:</span><br><span class=\"line\"> sonar:</span><br><span class=\"line\">  image: jiuming/sonar-qube-zh:1.0.0</span><br><span class=\"line\">  ports:</span><br><span class=\"line\">   - 9000:9000</span><br><span class=\"line\">   - 9092:9092</span><br><span class=\"line\">  networks:</span><br><span class=\"line\">    - sonar</span><br><span class=\"line\">  deploy:</span><br><span class=\"line\">   replicas: 1</span><br><span class=\"line\">   update_config:</span><br><span class=\"line\">    parallelism: 1</span><br><span class=\"line\">    delay: 10s</span><br><span class=\"line\">   restart_policy:</span><br><span class=\"line\">    condition: on-failure</span><br><span class=\"line\">networks:</span><br><span class=\"line\">  sonar:</span><br><span class=\"line\">   driver: overlay</span><br></pre></td></tr></table></figure><p></p>\n<p>打开 <a href=\"http://localhost:9000\" target=\"_blank\" rel=\"noopener\">http://localhost:9000</a>  默认账户:admin  默认密码:admin</p>\n<ul>\n<li>sonar qube 官方docker image 安装中文插件方法<br>登录 容器  docker exec -it <containerid> /bin/sh 执行如下命令<br>ps: sonar 中文插件版本 请按照<a href=\"https://github.com/SonarQubeCommunity/sonar-l10n-zh\" target=\"_blank\" rel=\"noopener\">https://github.com/SonarQubeCommunity/sonar-l10n-zh</a> 文档去下载安装   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#安装 中文插件</span><br><span class=\"line\">wget https://github.com/SonarQubeCommunity/sonar-l10n-zh/releases/download/sonar-l10n-zh-plugin-1.21/sonar-l10n-zh-plugin-1.21.jar  &amp;&amp; \\</span><br><span class=\"line\">mv /opt/sonarqube/sonar-l10n-zh-plugin-1.21.jar /opt/sonarqube/extensions/plugins</span><br></pre></td></tr></table></figure>\n</containerid></li>\n</ul>\n<p>或者直接使用已经修改好的镜像jiuming/sonar-qube-zh:1.0.0 这个是基于 7.x的sonar</p>\n<h4 id=\"maven-添加sonar-插件\"><a href=\"#maven-添加sonar-插件\" class=\"headerlink\" title=\"maven 添加sonar 插件\"></a>maven 添加sonar 插件</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;plugin&gt;</span><br><span class=\"line\">        &lt;groupId&gt;org.sonarsource.scanner.maven&lt;/groupId&gt;</span><br><span class=\"line\">        &lt;artifactId&gt;sonar-maven-plugin&lt;/artifactId&gt;</span><br><span class=\"line\">        &lt;version&gt;3.4.0.905&lt;/version&gt;</span><br><span class=\"line\">&lt;/plugin&gt;</span><br></pre></td></tr></table></figure>\n<h4 id=\"执行-sonar-任务\"><a href=\"#执行-sonar-任务\" class=\"headerlink\" title=\"执行 sonar 任务\"></a>执行 sonar 任务</h4><p>如果在另外一台机器上 加上-Dsonar.host.url=<a href=\"http://ip:port\" target=\"_blank\" rel=\"noopener\">http://ip:port</a><br>如果使用了密钥 那么需要-Dsonar.login=xxxxxx<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mvn sonar:sonar \\</span><br><span class=\"line\">  -Dsonar.host.url=http://localhost:9000 </span><br><span class=\"line\">#mvn sonar:sonar \\</span><br><span class=\"line\">#  -Dsonar.host.url=http://localhost:9000 \\</span><br><span class=\"line\">#  -Dsonar.login=5cb26b212d30530db172ff6adbfe5d2887698b8c</span><br></pre></td></tr></table></figure><p></p>\n<h4 id=\"遇到的问题\"><a href=\"#遇到的问题\" class=\"headerlink\" title=\"遇到的问题\"></a>遇到的问题</h4><ul>\n<li>报svn认证错误(git认证错误和这个差不多处理方法 )<br>svn: E170001: Authentication required for ‘<a href=\"https://xxxxxx:xxx\" target=\"_blank\" rel=\"noopener\">https://xxxxxx:xxx</a> VisualSVN Server’ -<br>在配置&gt;通用设置&gt;scm&gt;配置svn的username、password或者配置密钥即可 </li>\n</ul>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><p>大部分检测的规范 都差不多把  本地还是使用alibaba的规范比较和是 直接安装alibaba的code插件也不错<br>sonar 适合团队使用  统一代码风格、减少明显bug</p>","site":{"data":{}},"excerpt":"","more":"<h4 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h4><p>最近写的代码 太多了 感觉质量有所下降<br>之前本地一直使用 alibaba的code插件 但是没有出团队版本的<br>干脆搞了一个 sonar 检测一波自己的代码质量</p><h4 id=\"sonar-docker-方式启动\"><a href=\"#sonar-docker-方式启动\" class=\"headerlink\" title=\"sonar docker 方式启动\"></a>sonar docker 方式启动</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#安装中文插件的 sonar </span><br><span class=\"line\"></span><br><span class=\"line\">sudo  docker run -d --name sonarqube -p 9000:9000 -p 9092:9092 jiuming/sonar-qube-zh:1.0.0</span><br><span class=\"line\">#原版 英文版本的</span><br><span class=\"line\">#sudo  docker run -d --name sonarqube -p 9000:9000 -p 9092:9092 sonarqube</span><br></pre></td></tr></table></figure>\n<p>sonar swarm stack配置<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">version: &apos;3.3&apos;</span><br><span class=\"line\">services:</span><br><span class=\"line\"> sonar:</span><br><span class=\"line\">  image: jiuming/sonar-qube-zh:1.0.0</span><br><span class=\"line\">  ports:</span><br><span class=\"line\">   - 9000:9000</span><br><span class=\"line\">   - 9092:9092</span><br><span class=\"line\">  networks:</span><br><span class=\"line\">    - sonar</span><br><span class=\"line\">  deploy:</span><br><span class=\"line\">   replicas: 1</span><br><span class=\"line\">   update_config:</span><br><span class=\"line\">    parallelism: 1</span><br><span class=\"line\">    delay: 10s</span><br><span class=\"line\">   restart_policy:</span><br><span class=\"line\">    condition: on-failure</span><br><span class=\"line\">networks:</span><br><span class=\"line\">  sonar:</span><br><span class=\"line\">   driver: overlay</span><br></pre></td></tr></table></figure><p></p>\n<p>打开 <a href=\"http://localhost:9000\" target=\"_blank\" rel=\"noopener\">http://localhost:9000</a>  默认账户:admin  默认密码:admin</p>\n<ul>\n<li>sonar qube 官方docker image 安装中文插件方法<br>登录 容器  docker exec -it <containerid> /bin/sh 执行如下命令<br>ps: sonar 中文插件版本 请按照<a href=\"https://github.com/SonarQubeCommunity/sonar-l10n-zh\" target=\"_blank\" rel=\"noopener\">https://github.com/SonarQubeCommunity/sonar-l10n-zh</a> 文档去下载安装   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#安装 中文插件</span><br><span class=\"line\">wget https://github.com/SonarQubeCommunity/sonar-l10n-zh/releases/download/sonar-l10n-zh-plugin-1.21/sonar-l10n-zh-plugin-1.21.jar  &amp;&amp; \\</span><br><span class=\"line\">mv /opt/sonarqube/sonar-l10n-zh-plugin-1.21.jar /opt/sonarqube/extensions/plugins</span><br></pre></td></tr></table></figure>\n</containerid></li>\n</ul>\n<p>或者直接使用已经修改好的镜像jiuming/sonar-qube-zh:1.0.0 这个是基于 7.x的sonar</p>\n<h4 id=\"maven-添加sonar-插件\"><a href=\"#maven-添加sonar-插件\" class=\"headerlink\" title=\"maven 添加sonar 插件\"></a>maven 添加sonar 插件</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;plugin&gt;</span><br><span class=\"line\">        &lt;groupId&gt;org.sonarsource.scanner.maven&lt;/groupId&gt;</span><br><span class=\"line\">        &lt;artifactId&gt;sonar-maven-plugin&lt;/artifactId&gt;</span><br><span class=\"line\">        &lt;version&gt;3.4.0.905&lt;/version&gt;</span><br><span class=\"line\">&lt;/plugin&gt;</span><br></pre></td></tr></table></figure>\n<h4 id=\"执行-sonar-任务\"><a href=\"#执行-sonar-任务\" class=\"headerlink\" title=\"执行 sonar 任务\"></a>执行 sonar 任务</h4><p>如果在另外一台机器上 加上-Dsonar.host.url=<a href=\"http://ip:port\" target=\"_blank\" rel=\"noopener\">http://ip:port</a><br>如果使用了密钥 那么需要-Dsonar.login=xxxxxx<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mvn sonar:sonar \\</span><br><span class=\"line\">  -Dsonar.host.url=http://localhost:9000 </span><br><span class=\"line\">#mvn sonar:sonar \\</span><br><span class=\"line\">#  -Dsonar.host.url=http://localhost:9000 \\</span><br><span class=\"line\">#  -Dsonar.login=5cb26b212d30530db172ff6adbfe5d2887698b8c</span><br></pre></td></tr></table></figure><p></p>\n<h4 id=\"遇到的问题\"><a href=\"#遇到的问题\" class=\"headerlink\" title=\"遇到的问题\"></a>遇到的问题</h4><ul>\n<li>报svn认证错误(git认证错误和这个差不多处理方法 )<br>svn: E170001: Authentication required for ‘<a href=\"https://xxxxxx:xxx\" target=\"_blank\" rel=\"noopener\">https://xxxxxx:xxx</a> VisualSVN Server’ -<br>在配置&gt;通用设置&gt;scm&gt;配置svn的username、password或者配置密钥即可 </li>\n</ul>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><p>大部分检测的规范 都差不多把  本地还是使用alibaba的规范比较和是 直接安装alibaba的code插件也不错<br>sonar 适合团队使用  统一代码风格、减少明显bug</p>"},{"title":"工作linux系统初始化","comments":1,"abbrlink":"fbab8e0","date":"2018-06-01T09:09:26.000Z","_content":"#### 前言\n由于强迫症 在工作和学习的时候 必须要用linux 但是linux桌面真的令人为难     \n用了n多版本的linux 什么arch、manjaro、centos系列的、debian系列的等等   \n最后还是觉得ubuntu用来做工作的系统最简单合适 而且少折腾    \n#### 初始化常用软件及工具\n\n##### 初始化额外的工具\n```\n#安装tmux\nsudo apt install tmux\n#安装 net tools \nsudo apt install net-tools \n#安装 traceroute\nsudo apt install traceroute \n#安装vim\nsudo apt install vim \n#安装google 浏览器\nsudo apt install chromium-browser\n```\n\n##### 笔记所需的资源\n\n[笔记所需资源tar包](https://www.xujiuming.com/ming-asset/work-linux-tar.tar.gz)\n\n##### 网易云音乐\n写代码  不听点音乐 哪里来的干劲 \n```\n#snap 安装网易云音乐\nsudo snap install netease-music --devmode --beta\n```\n##### 初始化shadowsocks\n科学上网必备软件  不解释 \n```\n#安装pip\nsudo apt install python3-pip\n#安装sslocal\nsudo pip3 install shadowsocks\n#ss 配置\necho '{\n    \"server\":\"地址\",\n    \"server_port\":端口,\n    \"local_address\":\"127.0.0.1\",\n    \"local_port\":1080,\n    \"password\":\"密码\",\n    \"timeout\":3000,\n    \"method\":\"aes-256-cfb\"\n}' > ss.json\n```\n##### 初始化docker\ndocker 安装一些 数据库啊之类的软件 还是很方便的  而且docker技术 现在应该是每个工程师必备的技能了 不会简直说不过去\n```\n#安装docker\nsudo apt install docker docker.io\n#初始化docker 加速配置\nsudo mkdir -p /etc/docker\nsudo tee /etc/docker/daemon.json <<-'EOF'\n{\n  \"registry-mirrors\": [\"https://o4omo0yw.mirror.aliyuncs.com\"]\n}\nEOF\nsudo systemctl daemon-reload\nsudo systemctl restart docker\n```\n##### 初始化java相关环境\n```\n#安装sdk man  安装 jvm相关工具 \ncurl -s \"https://get.sdkman.io\" | bash\nsource \"$HOME/.sdkman/bin/sdkman-init.sh\"\nsdk version\nsdk install java\nsdk install maven \nsdk install groovy \nsdk install gradle \n```\n##### 初始化wps\nubuntu 的liboffice 其实用起来还行就是有点丑  但是有更加好的选择 wps  良心软件 对linux支持很不错\n就是安装过程略麻烦  后面有时间 可以考虑打包成snap的格式使用\n###### 下载wps官方deb包    \n\n资源tar包中包含\n  \nWPS官方网站 ：http://linux.wps.cn/ （区分64位、32位）   \n###### 安装 libpng12依赖   \n这个依赖是libpng-12.0。不过这个在默认的apt 仓库里没有。所以需要手动下载一下。   \n\n资源tar包中包含 \n\n或者取官方下载 地址：https://packages.debian.org/zh-cn/wheezy/amd64/libpng12-0/download  \n```\nsudo dpkg -i libpng12-0_1.2.49-1+deb7u2_amd64.deb\n```\n###### 安装wps   \n```\nsudo dpkg -i <wps>.deb\n```\n###### 安装wps 需要的字体  \n\n资源tar包中包含  \n\n下载该字体，解压后将整个wps_symbol_fonts目录拷贝到 /usr/share/fonts/ 目录下   \n```\n#1.权限设置,执行命令如下 \nsudo cd /usr/share/fonts/ \nsudo chmod 755 wps_symbol_fonts \nsudo cd /usr/share/fonts/wps_symbol_fonts \nsudo chmod 644 * \n#2.生成缓存配置信息 \nsudo cd /usr/share/fonts/wps_symbol_fonts \nsudo mkfontdir \nsudo mkfontscale \nsudo fc-cache\n```\n##### 输入法初始化\n这里使用sogou的deb包来安装 当然也可以根据arch的wiki上 安装sunpinyin或者googlepinyin之类的   \n###### 安装fcitx输入法框架   \n```\n#安装fcitx 组件 如果不行那么在商店中把所有呆fcitx的软件安装\nsudo apt install fcitx fcitx-configtool \n#设置 fcitx相关配置\necho '\n#fcitx\nexport GTK_IM_MODULE=fcitx \nexport QT_IM_MODULE=fcitx \nexport XMODIFIERS=\"@im=fcitx\"\n' >> ~/.xprofile\n```\n###### 安装sogou输入法  \n\n资源tar包中包含\n\n搜狗官方地址: https://pinyin.sogou.com/linux/?r=pinyin\n\n```\nsudo dpkg -i sogoupinyin_2.2.0.0108_amd64.deb\n```\n\n##### 初始化 oss-browser   \n下载oss-browser压缩包\n\n资源tar包中包含\n\n```\n# 安装 依赖 \nsudo apt install libgconf2-4\n```\n\n##### 初始化oss-ftp\n下载oss-ftp压缩包\n\n资源tar包中包含\n\n```\n#安装gtk 依赖\nsudo  apt install -y python-gtk2\n```\n\n#####  无法使用脚本初始化的软件  \n###### 开发工具 \n使用idea系列的全家桶   \n安装 toolbox来管理idea系列的全家桶\n   \n####  总结  \n由于我是java开发 我的工作系统肯定最主要就是java以及相关的如maven、gradle、groovy、springbootcli之类的  \n其实把如果真的想折腾linux 建议还是arch  毕竟瞎折腾    \n但是工作还是稳一点 毕竟ubuntu做了这么多年的桌面linux   \n","source":"_posts/搬砖工具/工作linux系统优化.md","raw":"---\ntitle: 工作linux系统初始化\ncomments: true\ncategories: 实战\ntags: \n  -linux \nabbrlink: fbab8e0\ndate: 2018-06-01 17:09:26\n---\n#### 前言\n由于强迫症 在工作和学习的时候 必须要用linux 但是linux桌面真的令人为难     \n用了n多版本的linux 什么arch、manjaro、centos系列的、debian系列的等等   \n最后还是觉得ubuntu用来做工作的系统最简单合适 而且少折腾    \n#### 初始化常用软件及工具\n\n##### 初始化额外的工具\n```\n#安装tmux\nsudo apt install tmux\n#安装 net tools \nsudo apt install net-tools \n#安装 traceroute\nsudo apt install traceroute \n#安装vim\nsudo apt install vim \n#安装google 浏览器\nsudo apt install chromium-browser\n```\n\n##### 笔记所需的资源\n\n[笔记所需资源tar包](https://www.xujiuming.com/ming-asset/work-linux-tar.tar.gz)\n\n##### 网易云音乐\n写代码  不听点音乐 哪里来的干劲 \n```\n#snap 安装网易云音乐\nsudo snap install netease-music --devmode --beta\n```\n##### 初始化shadowsocks\n科学上网必备软件  不解释 \n```\n#安装pip\nsudo apt install python3-pip\n#安装sslocal\nsudo pip3 install shadowsocks\n#ss 配置\necho '{\n    \"server\":\"地址\",\n    \"server_port\":端口,\n    \"local_address\":\"127.0.0.1\",\n    \"local_port\":1080,\n    \"password\":\"密码\",\n    \"timeout\":3000,\n    \"method\":\"aes-256-cfb\"\n}' > ss.json\n```\n##### 初始化docker\ndocker 安装一些 数据库啊之类的软件 还是很方便的  而且docker技术 现在应该是每个工程师必备的技能了 不会简直说不过去\n```\n#安装docker\nsudo apt install docker docker.io\n#初始化docker 加速配置\nsudo mkdir -p /etc/docker\nsudo tee /etc/docker/daemon.json <<-'EOF'\n{\n  \"registry-mirrors\": [\"https://o4omo0yw.mirror.aliyuncs.com\"]\n}\nEOF\nsudo systemctl daemon-reload\nsudo systemctl restart docker\n```\n##### 初始化java相关环境\n```\n#安装sdk man  安装 jvm相关工具 \ncurl -s \"https://get.sdkman.io\" | bash\nsource \"$HOME/.sdkman/bin/sdkman-init.sh\"\nsdk version\nsdk install java\nsdk install maven \nsdk install groovy \nsdk install gradle \n```\n##### 初始化wps\nubuntu 的liboffice 其实用起来还行就是有点丑  但是有更加好的选择 wps  良心软件 对linux支持很不错\n就是安装过程略麻烦  后面有时间 可以考虑打包成snap的格式使用\n###### 下载wps官方deb包    \n\n资源tar包中包含\n  \nWPS官方网站 ：http://linux.wps.cn/ （区分64位、32位）   \n###### 安装 libpng12依赖   \n这个依赖是libpng-12.0。不过这个在默认的apt 仓库里没有。所以需要手动下载一下。   \n\n资源tar包中包含 \n\n或者取官方下载 地址：https://packages.debian.org/zh-cn/wheezy/amd64/libpng12-0/download  \n```\nsudo dpkg -i libpng12-0_1.2.49-1+deb7u2_amd64.deb\n```\n###### 安装wps   \n```\nsudo dpkg -i <wps>.deb\n```\n###### 安装wps 需要的字体  \n\n资源tar包中包含  \n\n下载该字体，解压后将整个wps_symbol_fonts目录拷贝到 /usr/share/fonts/ 目录下   \n```\n#1.权限设置,执行命令如下 \nsudo cd /usr/share/fonts/ \nsudo chmod 755 wps_symbol_fonts \nsudo cd /usr/share/fonts/wps_symbol_fonts \nsudo chmod 644 * \n#2.生成缓存配置信息 \nsudo cd /usr/share/fonts/wps_symbol_fonts \nsudo mkfontdir \nsudo mkfontscale \nsudo fc-cache\n```\n##### 输入法初始化\n这里使用sogou的deb包来安装 当然也可以根据arch的wiki上 安装sunpinyin或者googlepinyin之类的   \n###### 安装fcitx输入法框架   \n```\n#安装fcitx 组件 如果不行那么在商店中把所有呆fcitx的软件安装\nsudo apt install fcitx fcitx-configtool \n#设置 fcitx相关配置\necho '\n#fcitx\nexport GTK_IM_MODULE=fcitx \nexport QT_IM_MODULE=fcitx \nexport XMODIFIERS=\"@im=fcitx\"\n' >> ~/.xprofile\n```\n###### 安装sogou输入法  \n\n资源tar包中包含\n\n搜狗官方地址: https://pinyin.sogou.com/linux/?r=pinyin\n\n```\nsudo dpkg -i sogoupinyin_2.2.0.0108_amd64.deb\n```\n\n##### 初始化 oss-browser   \n下载oss-browser压缩包\n\n资源tar包中包含\n\n```\n# 安装 依赖 \nsudo apt install libgconf2-4\n```\n\n##### 初始化oss-ftp\n下载oss-ftp压缩包\n\n资源tar包中包含\n\n```\n#安装gtk 依赖\nsudo  apt install -y python-gtk2\n```\n\n#####  无法使用脚本初始化的软件  \n###### 开发工具 \n使用idea系列的全家桶   \n安装 toolbox来管理idea系列的全家桶\n   \n####  总结  \n由于我是java开发 我的工作系统肯定最主要就是java以及相关的如maven、gradle、groovy、springbootcli之类的  \n其实把如果真的想折腾linux 建议还是arch  毕竟瞎折腾    \n但是工作还是稳一点 毕竟ubuntu做了这么多年的桌面linux   \n","slug":"搬砖工具/工作linux系统优化","published":1,"updated":"2018-08-17T08:10:03.923Z","layout":"post","photos":[],"link":"","_id":"cjo9uatze005omwczljbeehzn","content":"<h4 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h4><p>由于强迫症 在工作和学习的时候 必须要用linux 但是linux桌面真的令人为难<br>用了n多版本的linux 什么arch、manjaro、centos系列的、debian系列的等等<br>最后还是觉得ubuntu用来做工作的系统最简单合适 而且少折腾</p><h4 id=\"初始化常用软件及工具\"><a href=\"#初始化常用软件及工具\" class=\"headerlink\" title=\"初始化常用软件及工具\"></a>初始化常用软件及工具</h4><h5 id=\"初始化额外的工具\"><a href=\"#初始化额外的工具\" class=\"headerlink\" title=\"初始化额外的工具\"></a>初始化额外的工具</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#安装tmux</span><br><span class=\"line\">sudo apt install tmux</span><br><span class=\"line\">#安装 net tools </span><br><span class=\"line\">sudo apt install net-tools </span><br><span class=\"line\">#安装 traceroute</span><br><span class=\"line\">sudo apt install traceroute </span><br><span class=\"line\">#安装vim</span><br><span class=\"line\">sudo apt install vim </span><br><span class=\"line\">#安装google 浏览器</span><br><span class=\"line\">sudo apt install chromium-browser</span><br></pre></td></tr></table></figure>\n<h5 id=\"笔记所需的资源\"><a href=\"#笔记所需的资源\" class=\"headerlink\" title=\"笔记所需的资源\"></a>笔记所需的资源</h5><p><a href=\"https://www.xujiuming.com/ming-asset/work-linux-tar.tar.gz\">笔记所需资源tar包</a></p>\n<h5 id=\"网易云音乐\"><a href=\"#网易云音乐\" class=\"headerlink\" title=\"网易云音乐\"></a>网易云音乐</h5><p>写代码  不听点音乐 哪里来的干劲<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#snap 安装网易云音乐</span><br><span class=\"line\">sudo snap install netease-music --devmode --beta</span><br></pre></td></tr></table></figure><p></p>\n<h5 id=\"初始化shadowsocks\"><a href=\"#初始化shadowsocks\" class=\"headerlink\" title=\"初始化shadowsocks\"></a>初始化shadowsocks</h5><p>科学上网必备软件  不解释<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#安装pip</span><br><span class=\"line\">sudo apt install python3-pip</span><br><span class=\"line\">#安装sslocal</span><br><span class=\"line\">sudo pip3 install shadowsocks</span><br><span class=\"line\">#ss 配置</span><br><span class=\"line\">echo &apos;&#123;</span><br><span class=\"line\">    &quot;server&quot;:&quot;地址&quot;,</span><br><span class=\"line\">    &quot;server_port&quot;:端口,</span><br><span class=\"line\">    &quot;local_address&quot;:&quot;127.0.0.1&quot;,</span><br><span class=\"line\">    &quot;local_port&quot;:1080,</span><br><span class=\"line\">    &quot;password&quot;:&quot;密码&quot;,</span><br><span class=\"line\">    &quot;timeout&quot;:3000,</span><br><span class=\"line\">    &quot;method&quot;:&quot;aes-256-cfb&quot;</span><br><span class=\"line\">&#125;&apos; &gt; ss.json</span><br></pre></td></tr></table></figure><p></p>\n<h5 id=\"初始化docker\"><a href=\"#初始化docker\" class=\"headerlink\" title=\"初始化docker\"></a>初始化docker</h5><p>docker 安装一些 数据库啊之类的软件 还是很方便的  而且docker技术 现在应该是每个工程师必备的技能了 不会简直说不过去<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#安装docker</span><br><span class=\"line\">sudo apt install docker docker.io</span><br><span class=\"line\">#初始化docker 加速配置</span><br><span class=\"line\">sudo mkdir -p /etc/docker</span><br><span class=\"line\">sudo tee /etc/docker/daemon.json &lt;&lt;-&apos;EOF&apos;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;registry-mirrors&quot;: [&quot;https://o4omo0yw.mirror.aliyuncs.com&quot;]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">EOF</span><br><span class=\"line\">sudo systemctl daemon-reload</span><br><span class=\"line\">sudo systemctl restart docker</span><br></pre></td></tr></table></figure><p></p>\n<h5 id=\"初始化java相关环境\"><a href=\"#初始化java相关环境\" class=\"headerlink\" title=\"初始化java相关环境\"></a>初始化java相关环境</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#安装sdk man  安装 jvm相关工具 </span><br><span class=\"line\">curl -s &quot;https://get.sdkman.io&quot; | bash</span><br><span class=\"line\">source &quot;$HOME/.sdkman/bin/sdkman-init.sh&quot;</span><br><span class=\"line\">sdk version</span><br><span class=\"line\">sdk install java</span><br><span class=\"line\">sdk install maven </span><br><span class=\"line\">sdk install groovy </span><br><span class=\"line\">sdk install gradle</span><br></pre></td></tr></table></figure>\n<h5 id=\"初始化wps\"><a href=\"#初始化wps\" class=\"headerlink\" title=\"初始化wps\"></a>初始化wps</h5><p>ubuntu 的liboffice 其实用起来还行就是有点丑  但是有更加好的选择 wps  良心软件 对linux支持很不错<br>就是安装过程略麻烦  后面有时间 可以考虑打包成snap的格式使用</p>\n<h6 id=\"下载wps官方deb包\"><a href=\"#下载wps官方deb包\" class=\"headerlink\" title=\"下载wps官方deb包\"></a>下载wps官方deb包</h6><p>资源tar包中包含</p>\n<p>WPS官方网站 ：<a href=\"http://linux.wps.cn/\" target=\"_blank\" rel=\"noopener\">http://linux.wps.cn/</a> （区分64位、32位）   </p>\n<h6 id=\"安装-libpng12依赖\"><a href=\"#安装-libpng12依赖\" class=\"headerlink\" title=\"安装 libpng12依赖\"></a>安装 libpng12依赖</h6><p>这个依赖是libpng-12.0。不过这个在默认的apt 仓库里没有。所以需要手动下载一下。   </p>\n<p>资源tar包中包含 </p>\n<p>或者取官方下载 地址：<a href=\"https://packages.debian.org/zh-cn/wheezy/amd64/libpng12-0/download\" target=\"_blank\" rel=\"noopener\">https://packages.debian.org/zh-cn/wheezy/amd64/libpng12-0/download</a><br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo dpkg -i libpng12-0_1.2.49-1+deb7u2_amd64.deb</span><br></pre></td></tr></table></figure><p></p>\n<h6 id=\"安装wps\"><a href=\"#安装wps\" class=\"headerlink\" title=\"安装wps\"></a>安装wps</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo dpkg -i &lt;wps&gt;.deb</span><br></pre></td></tr></table></figure>\n<h6 id=\"安装wps-需要的字体\"><a href=\"#安装wps-需要的字体\" class=\"headerlink\" title=\"安装wps 需要的字体\"></a>安装wps 需要的字体</h6><p>资源tar包中包含  </p>\n<p>下载该字体，解压后将整个wps_symbol_fonts目录拷贝到 /usr/share/fonts/ 目录下<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#1.权限设置,执行命令如下 </span><br><span class=\"line\">sudo cd /usr/share/fonts/ </span><br><span class=\"line\">sudo chmod 755 wps_symbol_fonts </span><br><span class=\"line\">sudo cd /usr/share/fonts/wps_symbol_fonts </span><br><span class=\"line\">sudo chmod 644 * </span><br><span class=\"line\">#2.生成缓存配置信息 </span><br><span class=\"line\">sudo cd /usr/share/fonts/wps_symbol_fonts </span><br><span class=\"line\">sudo mkfontdir </span><br><span class=\"line\">sudo mkfontscale </span><br><span class=\"line\">sudo fc-cache</span><br></pre></td></tr></table></figure><p></p>\n<h5 id=\"输入法初始化\"><a href=\"#输入法初始化\" class=\"headerlink\" title=\"输入法初始化\"></a>输入法初始化</h5><p>这里使用sogou的deb包来安装 当然也可以根据arch的wiki上 安装sunpinyin或者googlepinyin之类的   </p>\n<h6 id=\"安装fcitx输入法框架\"><a href=\"#安装fcitx输入法框架\" class=\"headerlink\" title=\"安装fcitx输入法框架\"></a>安装fcitx输入法框架</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#安装fcitx 组件 如果不行那么在商店中把所有呆fcitx的软件安装</span><br><span class=\"line\">sudo apt install fcitx fcitx-configtool </span><br><span class=\"line\">#设置 fcitx相关配置</span><br><span class=\"line\">echo &apos;</span><br><span class=\"line\">#fcitx</span><br><span class=\"line\">export GTK_IM_MODULE=fcitx </span><br><span class=\"line\">export QT_IM_MODULE=fcitx </span><br><span class=\"line\">export XMODIFIERS=&quot;@im=fcitx&quot;</span><br><span class=\"line\">&apos; &gt;&gt; ~/.xprofile</span><br></pre></td></tr></table></figure>\n<h6 id=\"安装sogou输入法\"><a href=\"#安装sogou输入法\" class=\"headerlink\" title=\"安装sogou输入法\"></a>安装sogou输入法</h6><p>资源tar包中包含</p>\n<p>搜狗官方地址: <a href=\"https://pinyin.sogou.com/linux/?r=pinyin\" target=\"_blank\" rel=\"noopener\">https://pinyin.sogou.com/linux/?r=pinyin</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo dpkg -i sogoupinyin_2.2.0.0108_amd64.deb</span><br></pre></td></tr></table></figure>\n<h5 id=\"初始化-oss-browser\"><a href=\"#初始化-oss-browser\" class=\"headerlink\" title=\"初始化 oss-browser\"></a>初始化 oss-browser</h5><p>下载oss-browser压缩包</p>\n<p>资源tar包中包含</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 安装 依赖 </span><br><span class=\"line\">sudo apt install libgconf2-4</span><br></pre></td></tr></table></figure>\n<h5 id=\"初始化oss-ftp\"><a href=\"#初始化oss-ftp\" class=\"headerlink\" title=\"初始化oss-ftp\"></a>初始化oss-ftp</h5><p>下载oss-ftp压缩包</p>\n<p>资源tar包中包含</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#安装gtk 依赖</span><br><span class=\"line\">sudo  apt install -y python-gtk2</span><br></pre></td></tr></table></figure>\n<h5 id=\"无法使用脚本初始化的软件\"><a href=\"#无法使用脚本初始化的软件\" class=\"headerlink\" title=\"无法使用脚本初始化的软件\"></a>无法使用脚本初始化的软件</h5><h6 id=\"开发工具\"><a href=\"#开发工具\" class=\"headerlink\" title=\"开发工具\"></a>开发工具</h6><p>使用idea系列的全家桶<br>安装 toolbox来管理idea系列的全家桶</p>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><p>由于我是java开发 我的工作系统肯定最主要就是java以及相关的如maven、gradle、groovy、springbootcli之类的<br>其实把如果真的想折腾linux 建议还是arch  毕竟瞎折腾<br>但是工作还是稳一点 毕竟ubuntu做了这么多年的桌面linux</p>","site":{"data":{}},"excerpt":"","more":"<h4 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h4><p>由于强迫症 在工作和学习的时候 必须要用linux 但是linux桌面真的令人为难<br>用了n多版本的linux 什么arch、manjaro、centos系列的、debian系列的等等<br>最后还是觉得ubuntu用来做工作的系统最简单合适 而且少折腾</p><h4 id=\"初始化常用软件及工具\"><a href=\"#初始化常用软件及工具\" class=\"headerlink\" title=\"初始化常用软件及工具\"></a>初始化常用软件及工具</h4><h5 id=\"初始化额外的工具\"><a href=\"#初始化额外的工具\" class=\"headerlink\" title=\"初始化额外的工具\"></a>初始化额外的工具</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#安装tmux</span><br><span class=\"line\">sudo apt install tmux</span><br><span class=\"line\">#安装 net tools </span><br><span class=\"line\">sudo apt install net-tools </span><br><span class=\"line\">#安装 traceroute</span><br><span class=\"line\">sudo apt install traceroute </span><br><span class=\"line\">#安装vim</span><br><span class=\"line\">sudo apt install vim </span><br><span class=\"line\">#安装google 浏览器</span><br><span class=\"line\">sudo apt install chromium-browser</span><br></pre></td></tr></table></figure>\n<h5 id=\"笔记所需的资源\"><a href=\"#笔记所需的资源\" class=\"headerlink\" title=\"笔记所需的资源\"></a>笔记所需的资源</h5><p><a href=\"https://www.xujiuming.com/ming-asset/work-linux-tar.tar.gz\">笔记所需资源tar包</a></p>\n<h5 id=\"网易云音乐\"><a href=\"#网易云音乐\" class=\"headerlink\" title=\"网易云音乐\"></a>网易云音乐</h5><p>写代码  不听点音乐 哪里来的干劲<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#snap 安装网易云音乐</span><br><span class=\"line\">sudo snap install netease-music --devmode --beta</span><br></pre></td></tr></table></figure><p></p>\n<h5 id=\"初始化shadowsocks\"><a href=\"#初始化shadowsocks\" class=\"headerlink\" title=\"初始化shadowsocks\"></a>初始化shadowsocks</h5><p>科学上网必备软件  不解释<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#安装pip</span><br><span class=\"line\">sudo apt install python3-pip</span><br><span class=\"line\">#安装sslocal</span><br><span class=\"line\">sudo pip3 install shadowsocks</span><br><span class=\"line\">#ss 配置</span><br><span class=\"line\">echo &apos;&#123;</span><br><span class=\"line\">    &quot;server&quot;:&quot;地址&quot;,</span><br><span class=\"line\">    &quot;server_port&quot;:端口,</span><br><span class=\"line\">    &quot;local_address&quot;:&quot;127.0.0.1&quot;,</span><br><span class=\"line\">    &quot;local_port&quot;:1080,</span><br><span class=\"line\">    &quot;password&quot;:&quot;密码&quot;,</span><br><span class=\"line\">    &quot;timeout&quot;:3000,</span><br><span class=\"line\">    &quot;method&quot;:&quot;aes-256-cfb&quot;</span><br><span class=\"line\">&#125;&apos; &gt; ss.json</span><br></pre></td></tr></table></figure><p></p>\n<h5 id=\"初始化docker\"><a href=\"#初始化docker\" class=\"headerlink\" title=\"初始化docker\"></a>初始化docker</h5><p>docker 安装一些 数据库啊之类的软件 还是很方便的  而且docker技术 现在应该是每个工程师必备的技能了 不会简直说不过去<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#安装docker</span><br><span class=\"line\">sudo apt install docker docker.io</span><br><span class=\"line\">#初始化docker 加速配置</span><br><span class=\"line\">sudo mkdir -p /etc/docker</span><br><span class=\"line\">sudo tee /etc/docker/daemon.json &lt;&lt;-&apos;EOF&apos;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;registry-mirrors&quot;: [&quot;https://o4omo0yw.mirror.aliyuncs.com&quot;]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">EOF</span><br><span class=\"line\">sudo systemctl daemon-reload</span><br><span class=\"line\">sudo systemctl restart docker</span><br></pre></td></tr></table></figure><p></p>\n<h5 id=\"初始化java相关环境\"><a href=\"#初始化java相关环境\" class=\"headerlink\" title=\"初始化java相关环境\"></a>初始化java相关环境</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#安装sdk man  安装 jvm相关工具 </span><br><span class=\"line\">curl -s &quot;https://get.sdkman.io&quot; | bash</span><br><span class=\"line\">source &quot;$HOME/.sdkman/bin/sdkman-init.sh&quot;</span><br><span class=\"line\">sdk version</span><br><span class=\"line\">sdk install java</span><br><span class=\"line\">sdk install maven </span><br><span class=\"line\">sdk install groovy </span><br><span class=\"line\">sdk install gradle</span><br></pre></td></tr></table></figure>\n<h5 id=\"初始化wps\"><a href=\"#初始化wps\" class=\"headerlink\" title=\"初始化wps\"></a>初始化wps</h5><p>ubuntu 的liboffice 其实用起来还行就是有点丑  但是有更加好的选择 wps  良心软件 对linux支持很不错<br>就是安装过程略麻烦  后面有时间 可以考虑打包成snap的格式使用</p>\n<h6 id=\"下载wps官方deb包\"><a href=\"#下载wps官方deb包\" class=\"headerlink\" title=\"下载wps官方deb包\"></a>下载wps官方deb包</h6><p>资源tar包中包含</p>\n<p>WPS官方网站 ：<a href=\"http://linux.wps.cn/\" target=\"_blank\" rel=\"noopener\">http://linux.wps.cn/</a> （区分64位、32位）   </p>\n<h6 id=\"安装-libpng12依赖\"><a href=\"#安装-libpng12依赖\" class=\"headerlink\" title=\"安装 libpng12依赖\"></a>安装 libpng12依赖</h6><p>这个依赖是libpng-12.0。不过这个在默认的apt 仓库里没有。所以需要手动下载一下。   </p>\n<p>资源tar包中包含 </p>\n<p>或者取官方下载 地址：<a href=\"https://packages.debian.org/zh-cn/wheezy/amd64/libpng12-0/download\" target=\"_blank\" rel=\"noopener\">https://packages.debian.org/zh-cn/wheezy/amd64/libpng12-0/download</a><br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo dpkg -i libpng12-0_1.2.49-1+deb7u2_amd64.deb</span><br></pre></td></tr></table></figure><p></p>\n<h6 id=\"安装wps\"><a href=\"#安装wps\" class=\"headerlink\" title=\"安装wps\"></a>安装wps</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo dpkg -i &lt;wps&gt;.deb</span><br></pre></td></tr></table></figure>\n<h6 id=\"安装wps-需要的字体\"><a href=\"#安装wps-需要的字体\" class=\"headerlink\" title=\"安装wps 需要的字体\"></a>安装wps 需要的字体</h6><p>资源tar包中包含  </p>\n<p>下载该字体，解压后将整个wps_symbol_fonts目录拷贝到 /usr/share/fonts/ 目录下<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#1.权限设置,执行命令如下 </span><br><span class=\"line\">sudo cd /usr/share/fonts/ </span><br><span class=\"line\">sudo chmod 755 wps_symbol_fonts </span><br><span class=\"line\">sudo cd /usr/share/fonts/wps_symbol_fonts </span><br><span class=\"line\">sudo chmod 644 * </span><br><span class=\"line\">#2.生成缓存配置信息 </span><br><span class=\"line\">sudo cd /usr/share/fonts/wps_symbol_fonts </span><br><span class=\"line\">sudo mkfontdir </span><br><span class=\"line\">sudo mkfontscale </span><br><span class=\"line\">sudo fc-cache</span><br></pre></td></tr></table></figure><p></p>\n<h5 id=\"输入法初始化\"><a href=\"#输入法初始化\" class=\"headerlink\" title=\"输入法初始化\"></a>输入法初始化</h5><p>这里使用sogou的deb包来安装 当然也可以根据arch的wiki上 安装sunpinyin或者googlepinyin之类的   </p>\n<h6 id=\"安装fcitx输入法框架\"><a href=\"#安装fcitx输入法框架\" class=\"headerlink\" title=\"安装fcitx输入法框架\"></a>安装fcitx输入法框架</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#安装fcitx 组件 如果不行那么在商店中把所有呆fcitx的软件安装</span><br><span class=\"line\">sudo apt install fcitx fcitx-configtool </span><br><span class=\"line\">#设置 fcitx相关配置</span><br><span class=\"line\">echo &apos;</span><br><span class=\"line\">#fcitx</span><br><span class=\"line\">export GTK_IM_MODULE=fcitx </span><br><span class=\"line\">export QT_IM_MODULE=fcitx </span><br><span class=\"line\">export XMODIFIERS=&quot;@im=fcitx&quot;</span><br><span class=\"line\">&apos; &gt;&gt; ~/.xprofile</span><br></pre></td></tr></table></figure>\n<h6 id=\"安装sogou输入法\"><a href=\"#安装sogou输入法\" class=\"headerlink\" title=\"安装sogou输入法\"></a>安装sogou输入法</h6><p>资源tar包中包含</p>\n<p>搜狗官方地址: <a href=\"https://pinyin.sogou.com/linux/?r=pinyin\" target=\"_blank\" rel=\"noopener\">https://pinyin.sogou.com/linux/?r=pinyin</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo dpkg -i sogoupinyin_2.2.0.0108_amd64.deb</span><br></pre></td></tr></table></figure>\n<h5 id=\"初始化-oss-browser\"><a href=\"#初始化-oss-browser\" class=\"headerlink\" title=\"初始化 oss-browser\"></a>初始化 oss-browser</h5><p>下载oss-browser压缩包</p>\n<p>资源tar包中包含</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 安装 依赖 </span><br><span class=\"line\">sudo apt install libgconf2-4</span><br></pre></td></tr></table></figure>\n<h5 id=\"初始化oss-ftp\"><a href=\"#初始化oss-ftp\" class=\"headerlink\" title=\"初始化oss-ftp\"></a>初始化oss-ftp</h5><p>下载oss-ftp压缩包</p>\n<p>资源tar包中包含</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#安装gtk 依赖</span><br><span class=\"line\">sudo  apt install -y python-gtk2</span><br></pre></td></tr></table></figure>\n<h5 id=\"无法使用脚本初始化的软件\"><a href=\"#无法使用脚本初始化的软件\" class=\"headerlink\" title=\"无法使用脚本初始化的软件\"></a>无法使用脚本初始化的软件</h5><h6 id=\"开发工具\"><a href=\"#开发工具\" class=\"headerlink\" title=\"开发工具\"></a>开发工具</h6><p>使用idea系列的全家桶<br>安装 toolbox来管理idea系列的全家桶</p>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><p>由于我是java开发 我的工作系统肯定最主要就是java以及相关的如maven、gradle、groovy、springbootcli之类的<br>其实把如果真的想折腾linux 建议还是arch  毕竟瞎折腾<br>但是工作还是稳一点 毕竟ubuntu做了这么多年的桌面linux</p>"},{"title":"centos-docker环境搭建","comments":1,"abbrlink":"aef2102a","date":"2018-03-19T02:22:33.000Z","_content":"\n### 环境:\n* centos 7.x\n* docker  \n#### 1:安装docker\n```\n#安装 一些组件\nsudo yum install -y yum-utils device-mapper-persistent-data lvm2\n# 拉取阿里云中 docker-ce的repo\nsudo yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo\n# 刷新 yum 缓存\nsudo yum makecache fast\n# 安装 docker-ce\nsudo yum -y install docker-ce\n# 启动 docker service\nsudo systemctl start docker \n```\n#### 2：配置阿里云加速\n```\nsudo mkdir -p /etc/docker\nsudo tee /etc/docker/daemon.json <<-'EOF'\n{\n  \"registry-mirrors\": [\"https://7vm1yv9c.mirror.aliyuncs.com\"]\n}\nEOF\nsudo systemctl daemon-reload\nsudo systemctl restart docker\n# 设置开机自启动\nsudo systemctl enable docker \n```\n#### 3:关闭SELinux  firewalld  \n```\n\nRedhat系列使用了SELinux来增强安全，关闭的办法为：\n1. 永久有效\n修改 vi /etc/selinux/config 文件中的 SELINUX=\"\" 为 disabled ，然后重启。\n2. 即时生效\n#setenforce 0\n#3:查看是否关闭\nsestatus\n\n#### 关闭 firewalld\nsystemctl stop firewalld\n### 禁止开机自动启动firewalld\nsystemctl disable firewalld \n```","source":"_posts/综合应用/centos-docker环境搭建.md","raw":"---\ntitle: centos-docker环境搭建\ncomments: true\ncategories: docker\ntags:\n  - docker\n  - linux\nabbrlink: aef2102a\ndate: 2018-03-19 10:22:33\n---\n\n### 环境:\n* centos 7.x\n* docker  \n#### 1:安装docker\n```\n#安装 一些组件\nsudo yum install -y yum-utils device-mapper-persistent-data lvm2\n# 拉取阿里云中 docker-ce的repo\nsudo yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo\n# 刷新 yum 缓存\nsudo yum makecache fast\n# 安装 docker-ce\nsudo yum -y install docker-ce\n# 启动 docker service\nsudo systemctl start docker \n```\n#### 2：配置阿里云加速\n```\nsudo mkdir -p /etc/docker\nsudo tee /etc/docker/daemon.json <<-'EOF'\n{\n  \"registry-mirrors\": [\"https://7vm1yv9c.mirror.aliyuncs.com\"]\n}\nEOF\nsudo systemctl daemon-reload\nsudo systemctl restart docker\n# 设置开机自启动\nsudo systemctl enable docker \n```\n#### 3:关闭SELinux  firewalld  \n```\n\nRedhat系列使用了SELinux来增强安全，关闭的办法为：\n1. 永久有效\n修改 vi /etc/selinux/config 文件中的 SELINUX=\"\" 为 disabled ，然后重启。\n2. 即时生效\n#setenforce 0\n#3:查看是否关闭\nsestatus\n\n#### 关闭 firewalld\nsystemctl stop firewalld\n### 禁止开机自动启动firewalld\nsystemctl disable firewalld \n```","slug":"综合应用/centos-docker环境搭建","published":1,"updated":"2018-08-17T08:10:03.923Z","layout":"post","photos":[],"link":"","_id":"cjo9uatzg005rmwczondbaka0","content":"<h3 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境:\"></a>环境:</h3><ul><li>centos 7.x</li><li>docker<h4 id=\"1-安装docker\"><a href=\"#1-安装docker\" class=\"headerlink\" title=\"1:安装docker\"></a>1:安装docker</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#安装 一些组件</span><br><span class=\"line\">sudo yum install -y yum-utils device-mapper-persistent-data lvm2</span><br><span class=\"line\"># 拉取阿里云中 docker-ce的repo</span><br><span class=\"line\">sudo yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class=\"line\"># 刷新 yum 缓存</span><br><span class=\"line\">sudo yum makecache fast</span><br><span class=\"line\"># 安装 docker-ce</span><br><span class=\"line\">sudo yum -y install docker-ce</span><br><span class=\"line\"># 启动 docker service</span><br><span class=\"line\">sudo systemctl start docker</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"2：配置阿里云加速\"><a href=\"#2：配置阿里云加速\" class=\"headerlink\" title=\"2：配置阿里云加速\"></a>2：配置阿里云加速</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo mkdir -p /etc/docker</span><br><span class=\"line\">sudo tee /etc/docker/daemon.json &lt;&lt;-&apos;EOF&apos;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;registry-mirrors&quot;: [&quot;https://7vm1yv9c.mirror.aliyuncs.com&quot;]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">EOF</span><br><span class=\"line\">sudo systemctl daemon-reload</span><br><span class=\"line\">sudo systemctl restart docker</span><br><span class=\"line\"># 设置开机自启动</span><br><span class=\"line\">sudo systemctl enable docker</span><br></pre></td></tr></table></figure>\n<h4 id=\"3-关闭SELinux-firewalld\"><a href=\"#3-关闭SELinux-firewalld\" class=\"headerlink\" title=\"3:关闭SELinux  firewalld\"></a>3:关闭SELinux  firewalld</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">Redhat系列使用了SELinux来增强安全，关闭的办法为：</span><br><span class=\"line\">1. 永久有效</span><br><span class=\"line\">修改 vi /etc/selinux/config 文件中的 SELINUX=&quot;&quot; 为 disabled ，然后重启。</span><br><span class=\"line\">2. 即时生效</span><br><span class=\"line\">#setenforce 0</span><br><span class=\"line\">#3:查看是否关闭</span><br><span class=\"line\">sestatus</span><br><span class=\"line\"></span><br><span class=\"line\">#### 关闭 firewalld</span><br><span class=\"line\">systemctl stop firewalld</span><br><span class=\"line\">### 禁止开机自动启动firewalld</span><br><span class=\"line\">systemctl disable firewalld</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境:\"></a>环境:</h3><ul><li>centos 7.x</li><li>docker<h4 id=\"1-安装docker\"><a href=\"#1-安装docker\" class=\"headerlink\" title=\"1:安装docker\"></a>1:安装docker</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#安装 一些组件</span><br><span class=\"line\">sudo yum install -y yum-utils device-mapper-persistent-data lvm2</span><br><span class=\"line\"># 拉取阿里云中 docker-ce的repo</span><br><span class=\"line\">sudo yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class=\"line\"># 刷新 yum 缓存</span><br><span class=\"line\">sudo yum makecache fast</span><br><span class=\"line\"># 安装 docker-ce</span><br><span class=\"line\">sudo yum -y install docker-ce</span><br><span class=\"line\"># 启动 docker service</span><br><span class=\"line\">sudo systemctl start docker</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"2：配置阿里云加速\"><a href=\"#2：配置阿里云加速\" class=\"headerlink\" title=\"2：配置阿里云加速\"></a>2：配置阿里云加速</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo mkdir -p /etc/docker</span><br><span class=\"line\">sudo tee /etc/docker/daemon.json &lt;&lt;-&apos;EOF&apos;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;registry-mirrors&quot;: [&quot;https://7vm1yv9c.mirror.aliyuncs.com&quot;]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">EOF</span><br><span class=\"line\">sudo systemctl daemon-reload</span><br><span class=\"line\">sudo systemctl restart docker</span><br><span class=\"line\"># 设置开机自启动</span><br><span class=\"line\">sudo systemctl enable docker</span><br></pre></td></tr></table></figure>\n<h4 id=\"3-关闭SELinux-firewalld\"><a href=\"#3-关闭SELinux-firewalld\" class=\"headerlink\" title=\"3:关闭SELinux  firewalld\"></a>3:关闭SELinux  firewalld</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">Redhat系列使用了SELinux来增强安全，关闭的办法为：</span><br><span class=\"line\">1. 永久有效</span><br><span class=\"line\">修改 vi /etc/selinux/config 文件中的 SELINUX=&quot;&quot; 为 disabled ，然后重启。</span><br><span class=\"line\">2. 即时生效</span><br><span class=\"line\">#setenforce 0</span><br><span class=\"line\">#3:查看是否关闭</span><br><span class=\"line\">sestatus</span><br><span class=\"line\"></span><br><span class=\"line\">#### 关闭 firewalld</span><br><span class=\"line\">systemctl stop firewalld</span><br><span class=\"line\">### 禁止开机自动启动firewalld</span><br><span class=\"line\">systemctl disable firewalld</span><br></pre></td></tr></table></figure>"},{"title":"docker-compose配置笔记","abbrlink":"5f628b10","date":"2017-11-10T16:00:00.000Z","_content":"####docker-compose 是docker的一个工具 是用来根据配置联合启动多个docker的工具  特别是在启动一些复杂应用的时候 适合用docker-compose来启动  当然 也可以自己写shell脚本启动 \n####docker-compose配置文件 部分字段解释\n#####实例 yaml格式\n```\nversion: '3'\nservices: \n  mysql: \n    image: mysql\n    ports:\n      - '3306:3306'\n    networks:\n      - network1\n  redis: \n    image: redis\n    ports:\n      - '6379:6379'\n    networks: \n      - network1\n  nginx:\n    image: nginx\n    prots:\n      - '80:80'\n    networks:\n      - network1\nnetworks:\n  network1:\n    driver: bridge\n```\n标准的docker-compose配置需要version、service、networks三部分\n* version 配置文件版本\n```\n不能填写1  \n```\n* service 容器相关启动配置\n```\n可以指定 image相关的启动参数 例如 -v  --name  -p   等启动信息\n在挂在数据卷的时候 也就是 指定-v参数的时候  windows指定的目录无权限 坑的一匹  \n```\n* networks 容器使用的网卡模式\n```\n主要是设定容器使用的网卡模式  \n```\n\n####docker-compose 用法 \n用法和docker 的用法差不多 \n例如\n    up 根据这个yaml启动相应的容器  加上 -f  指定yaml文件  不指定 默认是当前目录的./docker-compose.yaml   -d是后台运行 不指定-d前台运行  \n    build  可以根据dockerfile 去构建生成启动容器 \n```\nsudo docker-compose -f ./xxx.yaml up \n```\n其他用法 参考man docker-compose \n\n#####学习博客地址:http://www.jianshu.com/p/2217cfed29d7\n","source":"_posts/综合应用/docker-compose配置笔记.md","raw":"\n---\ntitle: docker-compose配置笔记\ncategories: 笔记\ntags:\n  - docker\nabbrlink: 5f628b10\ndate: 2017-11-11 00:00:00\n---\n####docker-compose 是docker的一个工具 是用来根据配置联合启动多个docker的工具  特别是在启动一些复杂应用的时候 适合用docker-compose来启动  当然 也可以自己写shell脚本启动 \n####docker-compose配置文件 部分字段解释\n#####实例 yaml格式\n```\nversion: '3'\nservices: \n  mysql: \n    image: mysql\n    ports:\n      - '3306:3306'\n    networks:\n      - network1\n  redis: \n    image: redis\n    ports:\n      - '6379:6379'\n    networks: \n      - network1\n  nginx:\n    image: nginx\n    prots:\n      - '80:80'\n    networks:\n      - network1\nnetworks:\n  network1:\n    driver: bridge\n```\n标准的docker-compose配置需要version、service、networks三部分\n* version 配置文件版本\n```\n不能填写1  \n```\n* service 容器相关启动配置\n```\n可以指定 image相关的启动参数 例如 -v  --name  -p   等启动信息\n在挂在数据卷的时候 也就是 指定-v参数的时候  windows指定的目录无权限 坑的一匹  \n```\n* networks 容器使用的网卡模式\n```\n主要是设定容器使用的网卡模式  \n```\n\n####docker-compose 用法 \n用法和docker 的用法差不多 \n例如\n    up 根据这个yaml启动相应的容器  加上 -f  指定yaml文件  不指定 默认是当前目录的./docker-compose.yaml   -d是后台运行 不指定-d前台运行  \n    build  可以根据dockerfile 去构建生成启动容器 \n```\nsudo docker-compose -f ./xxx.yaml up \n```\n其他用法 参考man docker-compose \n\n#####学习博客地址:http://www.jianshu.com/p/2217cfed29d7\n","slug":"综合应用/docker-compose配置笔记","published":1,"updated":"2018-08-17T08:10:03.923Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjo9uatzi005vmwcz61qppvc7","content":"<p>####docker-compose 是docker的一个工具 是用来根据配置联合启动多个docker的工具 特别是在启动一些复杂应用的时候 适合用docker-compose来启动 当然 也可以自己写shell脚本启动</p><p>####docker-compose配置文件 部分字段解释</p><p>#####实例 yaml格式<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">version: &apos;3&apos;</span><br><span class=\"line\">services: </span><br><span class=\"line\">  mysql: </span><br><span class=\"line\">    image: mysql</span><br><span class=\"line\">    ports:</span><br><span class=\"line\">      - &apos;3306:3306&apos;</span><br><span class=\"line\">    networks:</span><br><span class=\"line\">      - network1</span><br><span class=\"line\">  redis: </span><br><span class=\"line\">    image: redis</span><br><span class=\"line\">    ports:</span><br><span class=\"line\">      - &apos;6379:6379&apos;</span><br><span class=\"line\">    networks: </span><br><span class=\"line\">      - network1</span><br><span class=\"line\">  nginx:</span><br><span class=\"line\">    image: nginx</span><br><span class=\"line\">    prots:</span><br><span class=\"line\">      - &apos;80:80&apos;</span><br><span class=\"line\">    networks:</span><br><span class=\"line\">      - network1</span><br><span class=\"line\">networks:</span><br><span class=\"line\">  network1:</span><br><span class=\"line\">    driver: bridge</span><br></pre></td></tr></table></figure><p></p>\n<p>标准的docker-compose配置需要version、service、networks三部分</p>\n<ul>\n<li><p>version 配置文件版本</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">不能填写1</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>service 容器相关启动配置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">可以指定 image相关的启动参数 例如 -v  --name  -p   等启动信息</span><br><span class=\"line\">在挂在数据卷的时候 也就是 指定-v参数的时候  windows指定的目录无权限 坑的一匹</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>networks 容器使用的网卡模式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">主要是设定容器使用的网卡模式</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>####docker-compose 用法<br>用法和docker 的用法差不多<br>例如<br>    up 根据这个yaml启动相应的容器  加上 -f  指定yaml文件  不指定 默认是当前目录的./docker-compose.yaml   -d是后台运行 不指定-d前台运行<br>    build  可以根据dockerfile 去构建生成启动容器<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo docker-compose -f ./xxx.yaml up</span><br></pre></td></tr></table></figure><p></p>\n<p>其他用法 参考man docker-compose </p>\n<p>#####学习博客地址:<a href=\"http://www.jianshu.com/p/2217cfed29d7\" target=\"_blank\" rel=\"noopener\">http://www.jianshu.com/p/2217cfed29d7</a></p>","site":{"data":{}},"excerpt":"","more":"<p>####docker-compose 是docker的一个工具 是用来根据配置联合启动多个docker的工具 特别是在启动一些复杂应用的时候 适合用docker-compose来启动 当然 也可以自己写shell脚本启动</p><p>####docker-compose配置文件 部分字段解释</p><p>#####实例 yaml格式<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">version: &apos;3&apos;</span><br><span class=\"line\">services: </span><br><span class=\"line\">  mysql: </span><br><span class=\"line\">    image: mysql</span><br><span class=\"line\">    ports:</span><br><span class=\"line\">      - &apos;3306:3306&apos;</span><br><span class=\"line\">    networks:</span><br><span class=\"line\">      - network1</span><br><span class=\"line\">  redis: </span><br><span class=\"line\">    image: redis</span><br><span class=\"line\">    ports:</span><br><span class=\"line\">      - &apos;6379:6379&apos;</span><br><span class=\"line\">    networks: </span><br><span class=\"line\">      - network1</span><br><span class=\"line\">  nginx:</span><br><span class=\"line\">    image: nginx</span><br><span class=\"line\">    prots:</span><br><span class=\"line\">      - &apos;80:80&apos;</span><br><span class=\"line\">    networks:</span><br><span class=\"line\">      - network1</span><br><span class=\"line\">networks:</span><br><span class=\"line\">  network1:</span><br><span class=\"line\">    driver: bridge</span><br></pre></td></tr></table></figure><p></p>\n<p>标准的docker-compose配置需要version、service、networks三部分</p>\n<ul>\n<li><p>version 配置文件版本</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">不能填写1</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>service 容器相关启动配置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">可以指定 image相关的启动参数 例如 -v  --name  -p   等启动信息</span><br><span class=\"line\">在挂在数据卷的时候 也就是 指定-v参数的时候  windows指定的目录无权限 坑的一匹</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>networks 容器使用的网卡模式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">主要是设定容器使用的网卡模式</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>####docker-compose 用法<br>用法和docker 的用法差不多<br>例如<br>    up 根据这个yaml启动相应的容器  加上 -f  指定yaml文件  不指定 默认是当前目录的./docker-compose.yaml   -d是后台运行 不指定-d前台运行<br>    build  可以根据dockerfile 去构建生成启动容器<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo docker-compose -f ./xxx.yaml up</span><br></pre></td></tr></table></figure><p></p>\n<p>其他用法 参考man docker-compose </p>\n<p>#####学习博客地址:<a href=\"http://www.jianshu.com/p/2217cfed29d7\" target=\"_blank\" rel=\"noopener\">http://www.jianshu.com/p/2217cfed29d7</a></p>"},{"title":"docker-swarm集群搭建","comments":1,"abbrlink":"e855d436","date":"2018-03-19T02:25:17.000Z","_content":"swarm编排吧  首先肯定比不上k8s犀利 但是呢 胜在 使用简单 部署简单\ndocker直接集成   可以使用docker、docker-compose 原生api \n \n我个人认为 没有十来台服务器 部署k8s集群  完全是浪费  毕竟k8s 是非常需要 master 高可用的   服务器少了 部署k8s 浪费资源太多了  so  开发环境直接使用 swarm 来编排docker \n\n### 环境:\n* centos 7.x\n* docker  版本新点   至少 要集成swarm 模块  \n#### 1： 安装基本docker 环境 \n{% post_link 综合应用/centos-docker环境搭建 %}\n\n使用 如下命令测试是否有swarm模块\n```\ndocker swarm \n```\nswarm 默认集成到docker中的\n#### 2：基于 docker swarm  配置portainer管理页面\n```\n# 初始化 swarm 集群  \nsudo docker swarm init \n\n\n# 创建 portainer 挂载目录\nsudo mkdir -p /opt/portainer\n\n\n# 以 swarm service 建立 portainer 管理 \nsudo  docker service create \\\n--name portainer \\\n--publish 9000:9000 \\\n--replicas=1 \\\n--constraint 'node.role == manager' \\\n--mount type=bind,src=//var/run/docker.sock,dst=/var/run/docker.sock \\\n--mount type=bind,src=//opt/portainer,dst=/data \\\nportainer/portainer \\\n-H unix:///var/run/docker.sock\n```\nhttp://<ip>:9000 访问即可 \n#### 3:遇到问题\n参考地址:http://blog.51cto.com/zpf666/1908067   \n1:无法通过服务名访问服务 \n需要建立一个overlay网络  \nswarm上默认已有一个名为ingress的overlay 网络, 可以直接使用\n也可以从新建立     \n\n2:遗忘swarm 添加节点时候的token\n```\nsudo docker swarm join-token master\nsudo docker swarm jon-token worker \n```\n#### 总结\nswarm 一两台服务器的docker编排 还是很轻松的  而且也不需要 k8s那么麻烦  \n虽然k8s 一统天下  但是个人电脑用个swarm管理管理 还是简简单单 轻轻松松的 \n\n","source":"_posts/综合应用/docker-swarm集群搭建.md","raw":"---\ntitle: docker-swarm集群搭建\ncomments: true\ncategories: docker\ntags:\n  - docker\n  - swarm\n  - linux\nabbrlink: e855d436\ndate: 2018-03-19 10:25:17\n---\nswarm编排吧  首先肯定比不上k8s犀利 但是呢 胜在 使用简单 部署简单\ndocker直接集成   可以使用docker、docker-compose 原生api \n \n我个人认为 没有十来台服务器 部署k8s集群  完全是浪费  毕竟k8s 是非常需要 master 高可用的   服务器少了 部署k8s 浪费资源太多了  so  开发环境直接使用 swarm 来编排docker \n\n### 环境:\n* centos 7.x\n* docker  版本新点   至少 要集成swarm 模块  \n#### 1： 安装基本docker 环境 \n{% post_link 综合应用/centos-docker环境搭建 %}\n\n使用 如下命令测试是否有swarm模块\n```\ndocker swarm \n```\nswarm 默认集成到docker中的\n#### 2：基于 docker swarm  配置portainer管理页面\n```\n# 初始化 swarm 集群  \nsudo docker swarm init \n\n\n# 创建 portainer 挂载目录\nsudo mkdir -p /opt/portainer\n\n\n# 以 swarm service 建立 portainer 管理 \nsudo  docker service create \\\n--name portainer \\\n--publish 9000:9000 \\\n--replicas=1 \\\n--constraint 'node.role == manager' \\\n--mount type=bind,src=//var/run/docker.sock,dst=/var/run/docker.sock \\\n--mount type=bind,src=//opt/portainer,dst=/data \\\nportainer/portainer \\\n-H unix:///var/run/docker.sock\n```\nhttp://<ip>:9000 访问即可 \n#### 3:遇到问题\n参考地址:http://blog.51cto.com/zpf666/1908067   \n1:无法通过服务名访问服务 \n需要建立一个overlay网络  \nswarm上默认已有一个名为ingress的overlay 网络, 可以直接使用\n也可以从新建立     \n\n2:遗忘swarm 添加节点时候的token\n```\nsudo docker swarm join-token master\nsudo docker swarm jon-token worker \n```\n#### 总结\nswarm 一两台服务器的docker编排 还是很轻松的  而且也不需要 k8s那么麻烦  \n虽然k8s 一统天下  但是个人电脑用个swarm管理管理 还是简简单单 轻轻松松的 \n\n","slug":"综合应用/docker-swarm集群搭建","published":1,"updated":"2018-08-17T08:10:03.923Z","layout":"post","photos":[],"link":"","_id":"cjo9uatzj005zmwczaou1g6cu","content":"<p>swarm编排吧 首先肯定比不上k8s犀利 但是呢 胜在 使用简单 部署简单<br>docker直接集成 可以使用docker、docker-compose 原生api</p><p>我个人认为 没有十来台服务器 部署k8s集群 完全是浪费 毕竟k8s 是非常需要 master 高可用的 服务器少了 部署k8s 浪费资源太多了 so 开发环境直接使用 swarm 来编排docker</p><h3 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境:\"></a>环境:</h3><ul><li>centos 7.x</li><li>docker 版本新点 至少 要集成swarm 模块<h4 id=\"1：-安装基本docker-环境\"><a href=\"#1：-安装基本docker-环境\" class=\"headerlink\" title=\"1： 安装基本docker 环境\"></a>1： 安装基本docker 环境</h4><a href=\"/ming/aef2102a.html\" title=\"centos-docker环境搭建\">centos-docker环境搭建</a></li></ul><p>使用 如下命令测试是否有swarm模块<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker swarm</span><br></pre></td></tr></table></figure><p></p>\n<p>swarm 默认集成到docker中的</p>\n<h4 id=\"2：基于-docker-swarm-配置portainer管理页面\"><a href=\"#2：基于-docker-swarm-配置portainer管理页面\" class=\"headerlink\" title=\"2：基于 docker swarm  配置portainer管理页面\"></a>2：基于 docker swarm  配置portainer管理页面</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 初始化 swarm 集群  </span><br><span class=\"line\">sudo docker swarm init </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># 创建 portainer 挂载目录</span><br><span class=\"line\">sudo mkdir -p /opt/portainer</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># 以 swarm service 建立 portainer 管理 </span><br><span class=\"line\">sudo  docker service create \\</span><br><span class=\"line\">--name portainer \\</span><br><span class=\"line\">--publish 9000:9000 \\</span><br><span class=\"line\">--replicas=1 \\</span><br><span class=\"line\">--constraint &apos;node.role == manager&apos; \\</span><br><span class=\"line\">--mount type=bind,src=//var/run/docker.sock,dst=/var/run/docker.sock \\</span><br><span class=\"line\">--mount type=bind,src=//opt/portainer,dst=/data \\</span><br><span class=\"line\">portainer/portainer \\</span><br><span class=\"line\">-H unix:///var/run/docker.sock</span><br></pre></td></tr></table></figure>\n<p>http://<ip>:9000 访问即可 </ip></p>\n<h4 id=\"3-遇到问题\"><a href=\"#3-遇到问题\" class=\"headerlink\" title=\"3:遇到问题\"></a>3:遇到问题</h4><p>参考地址:<a href=\"http://blog.51cto.com/zpf666/1908067\" target=\"_blank\" rel=\"noopener\">http://blog.51cto.com/zpf666/1908067</a><br>1:无法通过服务名访问服务<br>需要建立一个overlay网络<br>swarm上默认已有一个名为ingress的overlay 网络, 可以直接使用<br>也可以从新建立     </p>\n<p>2:遗忘swarm 添加节点时候的token<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo docker swarm join-token master</span><br><span class=\"line\">sudo docker swarm jon-token worker</span><br></pre></td></tr></table></figure><p></p>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><p>swarm 一两台服务器的docker编排 还是很轻松的  而且也不需要 k8s那么麻烦<br>虽然k8s 一统天下  但是个人电脑用个swarm管理管理 还是简简单单 轻轻松松的</p>","site":{"data":{}},"excerpt":"","more":"<p>swarm编排吧 首先肯定比不上k8s犀利 但是呢 胜在 使用简单 部署简单<br>docker直接集成 可以使用docker、docker-compose 原生api</p><p>我个人认为 没有十来台服务器 部署k8s集群 完全是浪费 毕竟k8s 是非常需要 master 高可用的 服务器少了 部署k8s 浪费资源太多了 so 开发环境直接使用 swarm 来编排docker</p><h3 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境:\"></a>环境:</h3><ul><li>centos 7.x</li><li>docker 版本新点 至少 要集成swarm 模块<h4 id=\"1：-安装基本docker-环境\"><a href=\"#1：-安装基本docker-环境\" class=\"headerlink\" title=\"1： 安装基本docker 环境\"></a>1： 安装基本docker 环境</h4><a href=\"/ming/aef2102a.html\" title=\"centos-docker环境搭建\">centos-docker环境搭建</a></li></ul><p>使用 如下命令测试是否有swarm模块<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker swarm</span><br></pre></td></tr></table></figure><p></p>\n<p>swarm 默认集成到docker中的</p>\n<h4 id=\"2：基于-docker-swarm-配置portainer管理页面\"><a href=\"#2：基于-docker-swarm-配置portainer管理页面\" class=\"headerlink\" title=\"2：基于 docker swarm  配置portainer管理页面\"></a>2：基于 docker swarm  配置portainer管理页面</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 初始化 swarm 集群  </span><br><span class=\"line\">sudo docker swarm init </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># 创建 portainer 挂载目录</span><br><span class=\"line\">sudo mkdir -p /opt/portainer</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># 以 swarm service 建立 portainer 管理 </span><br><span class=\"line\">sudo  docker service create \\</span><br><span class=\"line\">--name portainer \\</span><br><span class=\"line\">--publish 9000:9000 \\</span><br><span class=\"line\">--replicas=1 \\</span><br><span class=\"line\">--constraint &apos;node.role == manager&apos; \\</span><br><span class=\"line\">--mount type=bind,src=//var/run/docker.sock,dst=/var/run/docker.sock \\</span><br><span class=\"line\">--mount type=bind,src=//opt/portainer,dst=/data \\</span><br><span class=\"line\">portainer/portainer \\</span><br><span class=\"line\">-H unix:///var/run/docker.sock</span><br></pre></td></tr></table></figure>\n<p>http://<ip>:9000 访问即可 </ip></p>\n<h4 id=\"3-遇到问题\"><a href=\"#3-遇到问题\" class=\"headerlink\" title=\"3:遇到问题\"></a>3:遇到问题</h4><p>参考地址:<a href=\"http://blog.51cto.com/zpf666/1908067\" target=\"_blank\" rel=\"noopener\">http://blog.51cto.com/zpf666/1908067</a><br>1:无法通过服务名访问服务<br>需要建立一个overlay网络<br>swarm上默认已有一个名为ingress的overlay 网络, 可以直接使用<br>也可以从新建立     </p>\n<p>2:遗忘swarm 添加节点时候的token<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo docker swarm join-token master</span><br><span class=\"line\">sudo docker swarm jon-token worker</span><br></pre></td></tr></table></figure><p></p>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><p>swarm 一两台服务器的docker编排 还是很轻松的  而且也不需要 k8s那么麻烦<br>虽然k8s 一统天下  但是个人电脑用个swarm管理管理 还是简简单单 轻轻松松的</p>"},{"title":"docker启动jenkins","comments":1,"abbrlink":"5e5f86c0","date":"2018-02-09T08:17:08.000Z","_content":"####在2.x版本jenkins 中 出现了 pipe 所以决定通过较为新的方式去从新部署一套基于jenkins 的docker 项目 自动化部署\nhttps://dzone.com/refcardz/continuous-delivery-with-jenkins-workflow\n\n#### 安装 jenkins docker版本 \n1:jenkins 默认密码 \n还是jenkins 容器中的安装目录下的老位置 ${jenkins安装位置}/secrets/initialAdminPassword\n\n2:jenkins 容器内部运行 docker相关命令 \n方案1:docker-in-docker  就是 在容器内部 安装容器 \n这种方案 需要在jenkins 镜像上进行修改 比较麻烦  因为 docker里面是经过高度简化的系统 安装起来麻烦 \n遇到错误:\n因为 docker主线程 是jenkins  而docker是需要在root权限下运行  \n要把jenkins用户加入到docker用户组中 即可用jenkins 用户执行docker 命令 \nalpine 没有找到如何切换 用户组  usermod  之类的命令 alpine 没有 \n\n方案2:【jenkins官网方案】docker-out-docker 通过目录影射 把docker.sock 影射到jenkins docker中 \n这种方式 安全性很差  容器 能够访问宿主机的功能\n如果做好 虚拟机或者物理机级别的隔离 其实还不错\n```\nsudo docker  run -u root --rm -d -p 20000:8080 -v jenkins-data:/var/jenkins_home -v /var/run/docker.sock:/var/run/docker.sock -v /var/lib/docker:/var/lib/docker --privileged  jenkinsci/blueocean\n```\n方案3:【危险方案】把 docker socket暴露出去 调用  \n看到这种方案  玩度不想玩 放弃\n","source":"_posts/综合应用/docker启动jenkins.md","raw":"---\ntitle: docker启动jenkins\ncomments: true\nabbrlink: 5e5f86c0\ndate: 2018-02-09 16:17:08\ncategories:\ntags:\n---\n####在2.x版本jenkins 中 出现了 pipe 所以决定通过较为新的方式去从新部署一套基于jenkins 的docker 项目 自动化部署\nhttps://dzone.com/refcardz/continuous-delivery-with-jenkins-workflow\n\n#### 安装 jenkins docker版本 \n1:jenkins 默认密码 \n还是jenkins 容器中的安装目录下的老位置 ${jenkins安装位置}/secrets/initialAdminPassword\n\n2:jenkins 容器内部运行 docker相关命令 \n方案1:docker-in-docker  就是 在容器内部 安装容器 \n这种方案 需要在jenkins 镜像上进行修改 比较麻烦  因为 docker里面是经过高度简化的系统 安装起来麻烦 \n遇到错误:\n因为 docker主线程 是jenkins  而docker是需要在root权限下运行  \n要把jenkins用户加入到docker用户组中 即可用jenkins 用户执行docker 命令 \nalpine 没有找到如何切换 用户组  usermod  之类的命令 alpine 没有 \n\n方案2:【jenkins官网方案】docker-out-docker 通过目录影射 把docker.sock 影射到jenkins docker中 \n这种方式 安全性很差  容器 能够访问宿主机的功能\n如果做好 虚拟机或者物理机级别的隔离 其实还不错\n```\nsudo docker  run -u root --rm -d -p 20000:8080 -v jenkins-data:/var/jenkins_home -v /var/run/docker.sock:/var/run/docker.sock -v /var/lib/docker:/var/lib/docker --privileged  jenkinsci/blueocean\n```\n方案3:【危险方案】把 docker socket暴露出去 调用  \n看到这种方案  玩度不想玩 放弃\n","slug":"综合应用/docker启动jenkins","published":1,"updated":"2018-08-17T08:10:03.923Z","layout":"post","photos":[],"link":"","_id":"cjo9uatzk0062mwcz4qzq6tk4","content":"<p>####在2.x版本jenkins 中 出现了 pipe 所以决定通过较为新的方式去从新部署一套基于jenkins 的docker 项目 自动化部署<br><a href=\"https://dzone.com/refcardz/continuous-delivery-with-jenkins-workflow\" target=\"_blank\" rel=\"noopener\">https://dzone.com/refcardz/continuous-delivery-with-jenkins-workflow</a></p><h4 id=\"安装-jenkins-docker版本\"><a href=\"#安装-jenkins-docker版本\" class=\"headerlink\" title=\"安装 jenkins docker版本\"></a>安装 jenkins docker版本</h4><p>1:jenkins 默认密码<br>还是jenkins 容器中的安装目录下的老位置 ${jenkins安装位置}/secrets/initialAdminPassword</p><p>2:jenkins 容器内部运行 docker相关命令<br>方案1:docker-in-docker 就是 在容器内部 安装容器<br>这种方案 需要在jenkins 镜像上进行修改 比较麻烦 因为 docker里面是经过高度简化的系统 安装起来麻烦<br>遇到错误:<br>因为 docker主线程 是jenkins 而docker是需要在root权限下运行<br>要把jenkins用户加入到docker用户组中 即可用jenkins 用户执行docker 命令<br>alpine 没有找到如何切换 用户组 usermod 之类的命令 alpine 没有</p><p>方案2:【jenkins官网方案】docker-out-docker 通过目录影射 把docker.sock 影射到jenkins docker中<br>这种方式 安全性很差 容器 能够访问宿主机的功能<br>如果做好 虚拟机或者物理机级别的隔离 其实还不错<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo docker  run -u root --rm -d -p 20000:8080 -v jenkins-data:/var/jenkins_home -v /var/run/docker.sock:/var/run/docker.sock -v /var/lib/docker:/var/lib/docker --privileged  jenkinsci/blueocean</span><br></pre></td></tr></table></figure><p></p>\n<p>方案3:【危险方案】把 docker socket暴露出去 调用<br>看到这种方案  玩度不想玩 放弃</p>","site":{"data":{}},"excerpt":"","more":"<p>####在2.x版本jenkins 中 出现了 pipe 所以决定通过较为新的方式去从新部署一套基于jenkins 的docker 项目 自动化部署<br><a href=\"https://dzone.com/refcardz/continuous-delivery-with-jenkins-workflow\" target=\"_blank\" rel=\"noopener\">https://dzone.com/refcardz/continuous-delivery-with-jenkins-workflow</a></p><h4 id=\"安装-jenkins-docker版本\"><a href=\"#安装-jenkins-docker版本\" class=\"headerlink\" title=\"安装 jenkins docker版本\"></a>安装 jenkins docker版本</h4><p>1:jenkins 默认密码<br>还是jenkins 容器中的安装目录下的老位置 ${jenkins安装位置}/secrets/initialAdminPassword</p><p>2:jenkins 容器内部运行 docker相关命令<br>方案1:docker-in-docker 就是 在容器内部 安装容器<br>这种方案 需要在jenkins 镜像上进行修改 比较麻烦 因为 docker里面是经过高度简化的系统 安装起来麻烦<br>遇到错误:<br>因为 docker主线程 是jenkins 而docker是需要在root权限下运行<br>要把jenkins用户加入到docker用户组中 即可用jenkins 用户执行docker 命令<br>alpine 没有找到如何切换 用户组 usermod 之类的命令 alpine 没有</p><p>方案2:【jenkins官网方案】docker-out-docker 通过目录影射 把docker.sock 影射到jenkins docker中<br>这种方式 安全性很差 容器 能够访问宿主机的功能<br>如果做好 虚拟机或者物理机级别的隔离 其实还不错<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo docker  run -u root --rm -d -p 20000:8080 -v jenkins-data:/var/jenkins_home -v /var/run/docker.sock:/var/run/docker.sock -v /var/lib/docker:/var/lib/docker --privileged  jenkinsci/blueocean</span><br></pre></td></tr></table></figure><p></p>\n<p>方案3:【危险方案】把 docker socket暴露出去 调用<br>看到这种方案  玩度不想玩 放弃</p>"},{"title":"feign切换访问http接口的实现","comments":1,"abbrlink":"47a3a555","date":"2018-06-25T05:31:04.000Z","_content":"#### 前言\n由于feign底层默认使用 jdk的UrlConnection来发送http请求   \n没有连接池之类的 很麻烦 而且bug很多 性能也差    \n  \n经过查看文档和网络上大佬们的博客  发现可以使用 常用的http工具包去替换 如apache的httpClient  、okHttp等   \nSpring Cloud从Brixtion.SR5版本开始支持这种切换feign底层访问http的实现  \n#### apache httpClient\n使用apache 的http client 作为feign底层发起http请求的实现   \n#####  增加pom 中feign httpClient依赖\n\n```\n            <!--使用 feign httpclient -->\n            <dependency>\n                <groupId>com.netflix.feign</groupId>\n                <artifactId>feign-httpclient</artifactId>\n                <version>8.17.0</version>\n            </dependency>\n```\n\n##### 开启 feign的httpClient\n配置bootstrap.yaml \n```\n# feign 设置\nfeign:\n  httpclient:\n    enabled: true\n```\n#### okHttp\n使用okHttp来作为feign发起请求的实现 \n##### 增加pom中 feign okHttp的依赖\n```\n<dependency>\n    <groupId>io.github.openfeign</groupId>\n    <artifactId>feign-okhttp</artifactId>\n    <version>9.7.0</version>\n</dependency>\n\n```\n\n##### 开启feign的okHttp\n\n配置bootstrap.yaml \n```\n# feign 设置\nfeign:\n  okhttp:\n    enabled: true\n```\n\n\n#### 总结\nfeign 坑还是很多的  这个使用默认的jdk的urlConnection 实现 会出现一些不好理解的异常  而且性能很低 \n切换成httpClient 或者okHttp 可以使用一些优化来增加性能 如连接池之类的 \n至于选择httpClient还是okHttp 看情况吧  没有测试过 \nspring io platform 里面都有 依赖的版本  看项目原本是啥 就用啥  \n\n\n\n","source":"_posts/综合应用/feign切换访问http接口的实现.md","raw":"---\ntitle: feign切换访问http接口的实现\ncomments: true\ncategories: 实战\ntags: \n  -spring cloud \n  - feign \n  - http\nabbrlink: 47a3a555\ndate: 2018-06-25 13:31:04\n---\n#### 前言\n由于feign底层默认使用 jdk的UrlConnection来发送http请求   \n没有连接池之类的 很麻烦 而且bug很多 性能也差    \n  \n经过查看文档和网络上大佬们的博客  发现可以使用 常用的http工具包去替换 如apache的httpClient  、okHttp等   \nSpring Cloud从Brixtion.SR5版本开始支持这种切换feign底层访问http的实现  \n#### apache httpClient\n使用apache 的http client 作为feign底层发起http请求的实现   \n#####  增加pom 中feign httpClient依赖\n\n```\n            <!--使用 feign httpclient -->\n            <dependency>\n                <groupId>com.netflix.feign</groupId>\n                <artifactId>feign-httpclient</artifactId>\n                <version>8.17.0</version>\n            </dependency>\n```\n\n##### 开启 feign的httpClient\n配置bootstrap.yaml \n```\n# feign 设置\nfeign:\n  httpclient:\n    enabled: true\n```\n#### okHttp\n使用okHttp来作为feign发起请求的实现 \n##### 增加pom中 feign okHttp的依赖\n```\n<dependency>\n    <groupId>io.github.openfeign</groupId>\n    <artifactId>feign-okhttp</artifactId>\n    <version>9.7.0</version>\n</dependency>\n\n```\n\n##### 开启feign的okHttp\n\n配置bootstrap.yaml \n```\n# feign 设置\nfeign:\n  okhttp:\n    enabled: true\n```\n\n\n#### 总结\nfeign 坑还是很多的  这个使用默认的jdk的urlConnection 实现 会出现一些不好理解的异常  而且性能很低 \n切换成httpClient 或者okHttp 可以使用一些优化来增加性能 如连接池之类的 \n至于选择httpClient还是okHttp 看情况吧  没有测试过 \nspring io platform 里面都有 依赖的版本  看项目原本是啥 就用啥  \n\n\n\n","slug":"综合应用/feign切换访问http接口的实现","published":1,"updated":"2018-08-17T08:10:03.923Z","layout":"post","photos":[],"link":"","_id":"cjo9uatzm0066mwczfmhivjun","content":"<h4 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h4><p>由于feign底层默认使用 jdk的UrlConnection来发送http请求<br>没有连接池之类的 很麻烦 而且bug很多 性能也差</p><p>经过查看文档和网络上大佬们的博客 发现可以使用 常用的http工具包去替换 如apache的httpClient 、okHttp等<br>Spring Cloud从Brixtion.SR5版本开始支持这种切换feign底层访问http的实现</p><h4 id=\"apache-httpClient\"><a href=\"#apache-httpClient\" class=\"headerlink\" title=\"apache httpClient\"></a>apache httpClient</h4><p>使用apache 的http client 作为feign底层发起http请求的实现</p><h5 id=\"增加pom-中feign-httpClient依赖\"><a href=\"#增加pom-中feign-httpClient依赖\" class=\"headerlink\" title=\"增加pom 中feign httpClient依赖\"></a>增加pom 中feign httpClient依赖</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!--使用 feign httpclient --&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;com.netflix.feign&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;feign-httpclient&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;8.17.0&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n<h5 id=\"开启-feign的httpClient\"><a href=\"#开启-feign的httpClient\" class=\"headerlink\" title=\"开启 feign的httpClient\"></a>开启 feign的httpClient</h5><p>配置bootstrap.yaml<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># feign 设置</span><br><span class=\"line\">feign:</span><br><span class=\"line\">  httpclient:</span><br><span class=\"line\">    enabled: true</span><br></pre></td></tr></table></figure><p></p>\n<h4 id=\"okHttp\"><a href=\"#okHttp\" class=\"headerlink\" title=\"okHttp\"></a>okHttp</h4><p>使用okHttp来作为feign发起请求的实现 </p>\n<h5 id=\"增加pom中-feign-okHttp的依赖\"><a href=\"#增加pom中-feign-okHttp的依赖\" class=\"headerlink\" title=\"增加pom中 feign okHttp的依赖\"></a>增加pom中 feign okHttp的依赖</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;io.github.openfeign&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;feign-okhttp&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;9.7.0&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n<h5 id=\"开启feign的okHttp\"><a href=\"#开启feign的okHttp\" class=\"headerlink\" title=\"开启feign的okHttp\"></a>开启feign的okHttp</h5><p>配置bootstrap.yaml<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># feign 设置</span><br><span class=\"line\">feign:</span><br><span class=\"line\">  okhttp:</span><br><span class=\"line\">    enabled: true</span><br></pre></td></tr></table></figure><p></p>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><p>feign 坑还是很多的  这个使用默认的jdk的urlConnection 实现 会出现一些不好理解的异常  而且性能很低<br>切换成httpClient 或者okHttp 可以使用一些优化来增加性能 如连接池之类的<br>至于选择httpClient还是okHttp 看情况吧  没有测试过<br>spring io platform 里面都有 依赖的版本  看项目原本是啥 就用啥</p>","site":{"data":{}},"excerpt":"","more":"<h4 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h4><p>由于feign底层默认使用 jdk的UrlConnection来发送http请求<br>没有连接池之类的 很麻烦 而且bug很多 性能也差</p><p>经过查看文档和网络上大佬们的博客 发现可以使用 常用的http工具包去替换 如apache的httpClient 、okHttp等<br>Spring Cloud从Brixtion.SR5版本开始支持这种切换feign底层访问http的实现</p><h4 id=\"apache-httpClient\"><a href=\"#apache-httpClient\" class=\"headerlink\" title=\"apache httpClient\"></a>apache httpClient</h4><p>使用apache 的http client 作为feign底层发起http请求的实现</p><h5 id=\"增加pom-中feign-httpClient依赖\"><a href=\"#增加pom-中feign-httpClient依赖\" class=\"headerlink\" title=\"增加pom 中feign httpClient依赖\"></a>增加pom 中feign httpClient依赖</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!--使用 feign httpclient --&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;com.netflix.feign&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;feign-httpclient&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;8.17.0&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n<h5 id=\"开启-feign的httpClient\"><a href=\"#开启-feign的httpClient\" class=\"headerlink\" title=\"开启 feign的httpClient\"></a>开启 feign的httpClient</h5><p>配置bootstrap.yaml<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># feign 设置</span><br><span class=\"line\">feign:</span><br><span class=\"line\">  httpclient:</span><br><span class=\"line\">    enabled: true</span><br></pre></td></tr></table></figure><p></p>\n<h4 id=\"okHttp\"><a href=\"#okHttp\" class=\"headerlink\" title=\"okHttp\"></a>okHttp</h4><p>使用okHttp来作为feign发起请求的实现 </p>\n<h5 id=\"增加pom中-feign-okHttp的依赖\"><a href=\"#增加pom中-feign-okHttp的依赖\" class=\"headerlink\" title=\"增加pom中 feign okHttp的依赖\"></a>增加pom中 feign okHttp的依赖</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;io.github.openfeign&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;feign-okhttp&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;9.7.0&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n<h5 id=\"开启feign的okHttp\"><a href=\"#开启feign的okHttp\" class=\"headerlink\" title=\"开启feign的okHttp\"></a>开启feign的okHttp</h5><p>配置bootstrap.yaml<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># feign 设置</span><br><span class=\"line\">feign:</span><br><span class=\"line\">  okhttp:</span><br><span class=\"line\">    enabled: true</span><br></pre></td></tr></table></figure><p></p>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><p>feign 坑还是很多的  这个使用默认的jdk的urlConnection 实现 会出现一些不好理解的异常  而且性能很低<br>切换成httpClient 或者okHttp 可以使用一些优化来增加性能 如连接池之类的<br>至于选择httpClient还是okHttp 看情况吧  没有测试过<br>spring io platform 里面都有 依赖的版本  看项目原本是啥 就用啥</p>"},{"title":"git glow 笔记","abbrlink":"c67df015","date":"2017-11-10T16:00:00.000Z","_content":"###gitflow 代码提交规范  \n如下图：\n![image.png](http://upload-images.jianshu.io/upload_images/3905525-270696a74d45d27a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\nmaster:线上分支 这个分支 就是线上代码所在的分支 每个点就是软件的一个版本 打上tag \ndevelop:当代码在开发分支上开发完毕经过基本测试 即可推送合并到develop上 这个是一个比较稳定的一个版本了 合并到develop分支上的功能 代表这个是必须上线的一个功能 \nfeature:开发分支  这个可以开多个 多个项目组 并行开发 在合适的时机 合并到develop 或者 新的feature分支 进行功能合并\nrelease:测试分支 develop上的代码 分开一个release分支进行测试 当测试阶段性完成 就合并到develop分支 当整个测试完成 就将测试完成的代码合并到develop 和master分支上   \nhotfixes:线上bug修复分支 主要处理 master 也就是线上的bug 开的临时分支 当bug处理完成 则将代码推送到develop和master分支 \n\n这几种分支中 develop占用主要地位 几乎所有的分支度基于这个分支  不管是 feature、release、hotfixes、master 度与develop分支有关\n","source":"_posts/综合应用/git-flow-笔记--（git流程和规范）.md","raw":"---\ntitle: git glow 笔记\ncategories: 笔记\ntags:\n  - git\nabbrlink: c67df015\ndate: 2017-11-11 00:00:00\n---\n###gitflow 代码提交规范  \n如下图：\n![image.png](http://upload-images.jianshu.io/upload_images/3905525-270696a74d45d27a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\nmaster:线上分支 这个分支 就是线上代码所在的分支 每个点就是软件的一个版本 打上tag \ndevelop:当代码在开发分支上开发完毕经过基本测试 即可推送合并到develop上 这个是一个比较稳定的一个版本了 合并到develop分支上的功能 代表这个是必须上线的一个功能 \nfeature:开发分支  这个可以开多个 多个项目组 并行开发 在合适的时机 合并到develop 或者 新的feature分支 进行功能合并\nrelease:测试分支 develop上的代码 分开一个release分支进行测试 当测试阶段性完成 就合并到develop分支 当整个测试完成 就将测试完成的代码合并到develop 和master分支上   \nhotfixes:线上bug修复分支 主要处理 master 也就是线上的bug 开的临时分支 当bug处理完成 则将代码推送到develop和master分支 \n\n这几种分支中 develop占用主要地位 几乎所有的分支度基于这个分支  不管是 feature、release、hotfixes、master 度与develop分支有关\n","slug":"综合应用/git-flow-笔记--（git流程和规范）","published":1,"updated":"2018-08-17T08:10:03.923Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjo9uatzn006amwcz2ionivok","content":"<p>###gitflow 代码提交规范<br>如下图：<br><img src=\"http://upload-images.jianshu.io/upload_images/3905525-270696a74d45d27a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p><p>master:线上分支 这个分支 就是线上代码所在的分支 每个点就是软件的一个版本 打上tag<br>develop:当代码在开发分支上开发完毕经过基本测试 即可推送合并到develop上 这个是一个比较稳定的一个版本了 合并到develop分支上的功能 代表这个是必须上线的一个功能<br>feature:开发分支 这个可以开多个 多个项目组 并行开发 在合适的时机 合并到develop 或者 新的feature分支 进行功能合并<br>release:测试分支 develop上的代码 分开一个release分支进行测试 当测试阶段性完成 就合并到develop分支 当整个测试完成 就将测试完成的代码合并到develop 和master分支上<br>hotfixes:线上bug修复分支 主要处理 master 也就是线上的bug 开的临时分支 当bug处理完成 则将代码推送到develop和master分支</p><p>这几种分支中 develop占用主要地位 几乎所有的分支度基于这个分支 不管是 feature、release、hotfixes、master 度与develop分支有关</p>","site":{"data":{}},"excerpt":"","more":"<p>###gitflow 代码提交规范<br>如下图：<br><img src=\"http://upload-images.jianshu.io/upload_images/3905525-270696a74d45d27a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p><p>master:线上分支 这个分支 就是线上代码所在的分支 每个点就是软件的一个版本 打上tag<br>develop:当代码在开发分支上开发完毕经过基本测试 即可推送合并到develop上 这个是一个比较稳定的一个版本了 合并到develop分支上的功能 代表这个是必须上线的一个功能<br>feature:开发分支 这个可以开多个 多个项目组 并行开发 在合适的时机 合并到develop 或者 新的feature分支 进行功能合并<br>release:测试分支 develop上的代码 分开一个release分支进行测试 当测试阶段性完成 就合并到develop分支 当整个测试完成 就将测试完成的代码合并到develop 和master分支上<br>hotfixes:线上bug修复分支 主要处理 master 也就是线上的bug 开的临时分支 当bug处理完成 则将代码推送到develop和master分支</p><p>这几种分支中 develop占用主要地位 几乎所有的分支度基于这个分支 不管是 feature、release、hotfixes、master 度与develop分支有关</p>"},{"title":"k8s集群日志采集方案选择","comments":1,"abbrlink":"d8147fe2","date":"2018-03-09T02:32:23.000Z","_content":"### 日志采集方案\n常规的日志采集总的来说 分为 收集--》处理--》存储--》查看   \n比较出名 并且用的比较多的 应该是elk模式   \n常用组合应该是如下 三种   至于还有其他采集工具 其实都差不多   \n* elk: es + kibana + logstash   \n最经典的做法  es+kibana 做 存储 查询  logstash 做日志采集和管道处理   \n缺陷是logstash 功能复杂 除非是搭建所有项目的统一日志 这种同集群的 logstash并不是特别好用   \nefk: es +kibana + filebeat   \n最直接的做法   es+kibana 做存储查询  filebeat采集数据 直接发送到es上  不经过logstash管道处理     \nelkf: es+ kibana+logstash +filebeat   \n功能最齐全的做法  es+kibana做存储查询  logstash做管道处理 filebeat 做采集   \n\n\n\n为何选择filebeat做采集  因为短小精悍  go语言开发  占用资源少     \n具体的可以查询官网:https://www.elastic.co/cn/ 随便搭配 总归就是一个收集处理存储查看的过程    \n\n#### k8s集群配置日志采集方案  \n1：在node上配置一个filebeat  所有的镜像的日志 按照一定规则映射到filebeat采集的目录下   \n这种 配置简单  不过需要制定一套 项目的日志记录规范   \n2:使用k8s的daemon set 为每个pod 绑定一个filebeat   利用的是k8s的pod 共享数据卷的套路    \n这种较为消耗资源 一个filebeat20m内存  那么 100个容器 就是 2000m内存了  有点得不偿失   \n好处就是如果资源足够可以很容易的进行动态伸缩容器  新开node不需要配置 只要有kubelet就行  \n\n\n\n个人更加倾向 efk  因为 filebeat 非常适合 通过daemon set 去绑定到k8s pod中   \n并且不是很需要 logstash   \n\n#### k8s集群+efk日志采集 实践 \n###### 0:启动 es+kibana \n通过镜像去启动 方便点 真实环境 请尽量采用 直接安装在服务器上  因为要映射数据文件乱七八糟的 不是很方便 \nnshou/elasticsearch-kibana latest版本 es=6.2.1 kibana=6.2.1 \n```\nsudo docker run -d -p 9200:9200 -p 5601:5601 --name es-kibana-test  nshou/elasticsearch-kibana\n```\n直接在服务器上安装 请参考官网即可 \n###### 1:搭建k8s实验环境\n使用minikube 快速搭建一个k8s实验环境 \n{% post_link 综合应用/minikube快速搭建k8s测试环境 %}\n###### 2：建立并且修改deployment \n```\n\n``` \n###### 3：建立并且调整daemon set \n```$xslt\n\n```\n#### 4：建立并且调整 service \n#### \n\n\n","source":"_posts/综合应用/k8s集群日志采集方案选择.md","raw":"---\ntitle: k8s集群日志采集方案选择\ncomments: true\ncategories: 使用\ntags:\n  - docker\n  - k8s\n  - 日志采集\nabbrlink: d8147fe2\ndate: 2018-03-09 10:32:23\n---\n### 日志采集方案\n常规的日志采集总的来说 分为 收集--》处理--》存储--》查看   \n比较出名 并且用的比较多的 应该是elk模式   \n常用组合应该是如下 三种   至于还有其他采集工具 其实都差不多   \n* elk: es + kibana + logstash   \n最经典的做法  es+kibana 做 存储 查询  logstash 做日志采集和管道处理   \n缺陷是logstash 功能复杂 除非是搭建所有项目的统一日志 这种同集群的 logstash并不是特别好用   \nefk: es +kibana + filebeat   \n最直接的做法   es+kibana 做存储查询  filebeat采集数据 直接发送到es上  不经过logstash管道处理     \nelkf: es+ kibana+logstash +filebeat   \n功能最齐全的做法  es+kibana做存储查询  logstash做管道处理 filebeat 做采集   \n\n\n\n为何选择filebeat做采集  因为短小精悍  go语言开发  占用资源少     \n具体的可以查询官网:https://www.elastic.co/cn/ 随便搭配 总归就是一个收集处理存储查看的过程    \n\n#### k8s集群配置日志采集方案  \n1：在node上配置一个filebeat  所有的镜像的日志 按照一定规则映射到filebeat采集的目录下   \n这种 配置简单  不过需要制定一套 项目的日志记录规范   \n2:使用k8s的daemon set 为每个pod 绑定一个filebeat   利用的是k8s的pod 共享数据卷的套路    \n这种较为消耗资源 一个filebeat20m内存  那么 100个容器 就是 2000m内存了  有点得不偿失   \n好处就是如果资源足够可以很容易的进行动态伸缩容器  新开node不需要配置 只要有kubelet就行  \n\n\n\n个人更加倾向 efk  因为 filebeat 非常适合 通过daemon set 去绑定到k8s pod中   \n并且不是很需要 logstash   \n\n#### k8s集群+efk日志采集 实践 \n###### 0:启动 es+kibana \n通过镜像去启动 方便点 真实环境 请尽量采用 直接安装在服务器上  因为要映射数据文件乱七八糟的 不是很方便 \nnshou/elasticsearch-kibana latest版本 es=6.2.1 kibana=6.2.1 \n```\nsudo docker run -d -p 9200:9200 -p 5601:5601 --name es-kibana-test  nshou/elasticsearch-kibana\n```\n直接在服务器上安装 请参考官网即可 \n###### 1:搭建k8s实验环境\n使用minikube 快速搭建一个k8s实验环境 \n{% post_link 综合应用/minikube快速搭建k8s测试环境 %}\n###### 2：建立并且修改deployment \n```\n\n``` \n###### 3：建立并且调整daemon set \n```$xslt\n\n```\n#### 4：建立并且调整 service \n#### \n\n\n","slug":"综合应用/k8s集群日志采集方案选择","published":1,"updated":"2018-08-17T08:10:03.923Z","layout":"post","photos":[],"link":"","_id":"cjo9uatzo006emwczc1k4eeik","content":"<h3 id=\"日志采集方案\"><a href=\"#日志采集方案\" class=\"headerlink\" title=\"日志采集方案\"></a>日志采集方案</h3><p>常规的日志采集总的来说 分为 收集–》处理–》存储–》查看<br>比较出名 并且用的比较多的 应该是elk模式<br>常用组合应该是如下 三种 至于还有其他采集工具 其实都差不多</p><ul><li>elk: es + kibana + logstash<br>最经典的做法 es+kibana 做 存储 查询 logstash 做日志采集和管道处理<br>缺陷是logstash 功能复杂 除非是搭建所有项目的统一日志 这种同集群的 logstash并不是特别好用<br>efk: es +kibana + filebeat<br>最直接的做法 es+kibana 做存储查询 filebeat采集数据 直接发送到es上 不经过logstash管道处理<br>elkf: es+ kibana+logstash +filebeat<br>功能最齐全的做法 es+kibana做存储查询 logstash做管道处理 filebeat 做采集</li></ul><p>为何选择filebeat做采集 因为短小精悍 go语言开发 占用资源少<br>具体的可以查询官网:<a href=\"https://www.elastic.co/cn/\" target=\"_blank\" rel=\"noopener\">https://www.elastic.co/cn/</a> 随便搭配 总归就是一个收集处理存储查看的过程</p><h4 id=\"k8s集群配置日志采集方案\"><a href=\"#k8s集群配置日志采集方案\" class=\"headerlink\" title=\"k8s集群配置日志采集方案\"></a>k8s集群配置日志采集方案</h4><p>1：在node上配置一个filebeat 所有的镜像的日志 按照一定规则映射到filebeat采集的目录下<br>这种 配置简单 不过需要制定一套 项目的日志记录规范<br>2:使用k8s的daemon set 为每个pod 绑定一个filebeat 利用的是k8s的pod 共享数据卷的套路<br>这种较为消耗资源 一个filebeat20m内存 那么 100个容器 就是 2000m内存了 有点得不偿失<br>好处就是如果资源足够可以很容易的进行动态伸缩容器 新开node不需要配置 只要有kubelet就行</p><p>个人更加倾向 efk 因为 filebeat 非常适合 通过daemon set 去绑定到k8s pod中<br>并且不是很需要 logstash</p><h4 id=\"k8s集群-efk日志采集-实践\"><a href=\"#k8s集群-efk日志采集-实践\" class=\"headerlink\" title=\"k8s集群+efk日志采集 实践\"></a>k8s集群+efk日志采集 实践</h4><h6 id=\"0-启动-es-kibana\"><a href=\"#0-启动-es-kibana\" class=\"headerlink\" title=\"0:启动 es+kibana\"></a>0:启动 es+kibana</h6><p>通过镜像去启动 方便点 真实环境 请尽量采用 直接安装在服务器上 因为要映射数据文件乱七八糟的 不是很方便<br>nshou/elasticsearch-kibana latest版本 es=6.2.1 kibana=6.2.1<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo docker run -d -p 9200:9200 -p 5601:5601 --name es-kibana-test  nshou/elasticsearch-kibana</span><br></pre></td></tr></table></figure><p></p>\n<p>直接在服务器上安装 请参考官网即可 </p>\n<h6 id=\"1-搭建k8s实验环境\"><a href=\"#1-搭建k8s实验环境\" class=\"headerlink\" title=\"1:搭建k8s实验环境\"></a>1:搭建k8s实验环境</h6><p>使用minikube 快速搭建一个k8s实验环境<br><a href=\"/ming/ba1e0f81.html\" title=\"minikube快速搭建k8s测试环境\">minikube快速搭建k8s测试环境</a></p>\n<h6 id=\"2：建立并且修改deployment\"><a href=\"#2：建立并且修改deployment\" class=\"headerlink\" title=\"2：建立并且修改deployment\"></a>2：建立并且修改deployment</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">``` </span><br><span class=\"line\">###### 3：建立并且调整daemon set </span><br><span class=\"line\">```$xslt</span><br></pre></td></tr></table></figure>\n<h4 id=\"4：建立并且调整-service\"><a href=\"#4：建立并且调整-service\" class=\"headerlink\" title=\"4：建立并且调整 service\"></a>4：建立并且调整 service</h4><p>####</p>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"日志采集方案\"><a href=\"#日志采集方案\" class=\"headerlink\" title=\"日志采集方案\"></a>日志采集方案</h3><p>常规的日志采集总的来说 分为 收集–》处理–》存储–》查看<br>比较出名 并且用的比较多的 应该是elk模式<br>常用组合应该是如下 三种 至于还有其他采集工具 其实都差不多</p><ul><li>elk: es + kibana + logstash<br>最经典的做法 es+kibana 做 存储 查询 logstash 做日志采集和管道处理<br>缺陷是logstash 功能复杂 除非是搭建所有项目的统一日志 这种同集群的 logstash并不是特别好用<br>efk: es +kibana + filebeat<br>最直接的做法 es+kibana 做存储查询 filebeat采集数据 直接发送到es上 不经过logstash管道处理<br>elkf: es+ kibana+logstash +filebeat<br>功能最齐全的做法 es+kibana做存储查询 logstash做管道处理 filebeat 做采集</li></ul><p>为何选择filebeat做采集 因为短小精悍 go语言开发 占用资源少<br>具体的可以查询官网:<a href=\"https://www.elastic.co/cn/\" target=\"_blank\" rel=\"noopener\">https://www.elastic.co/cn/</a> 随便搭配 总归就是一个收集处理存储查看的过程</p><h4 id=\"k8s集群配置日志采集方案\"><a href=\"#k8s集群配置日志采集方案\" class=\"headerlink\" title=\"k8s集群配置日志采集方案\"></a>k8s集群配置日志采集方案</h4><p>1：在node上配置一个filebeat 所有的镜像的日志 按照一定规则映射到filebeat采集的目录下<br>这种 配置简单 不过需要制定一套 项目的日志记录规范<br>2:使用k8s的daemon set 为每个pod 绑定一个filebeat 利用的是k8s的pod 共享数据卷的套路<br>这种较为消耗资源 一个filebeat20m内存 那么 100个容器 就是 2000m内存了 有点得不偿失<br>好处就是如果资源足够可以很容易的进行动态伸缩容器 新开node不需要配置 只要有kubelet就行</p><p>个人更加倾向 efk 因为 filebeat 非常适合 通过daemon set 去绑定到k8s pod中<br>并且不是很需要 logstash</p><h4 id=\"k8s集群-efk日志采集-实践\"><a href=\"#k8s集群-efk日志采集-实践\" class=\"headerlink\" title=\"k8s集群+efk日志采集 实践\"></a>k8s集群+efk日志采集 实践</h4><h6 id=\"0-启动-es-kibana\"><a href=\"#0-启动-es-kibana\" class=\"headerlink\" title=\"0:启动 es+kibana\"></a>0:启动 es+kibana</h6><p>通过镜像去启动 方便点 真实环境 请尽量采用 直接安装在服务器上 因为要映射数据文件乱七八糟的 不是很方便<br>nshou/elasticsearch-kibana latest版本 es=6.2.1 kibana=6.2.1<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo docker run -d -p 9200:9200 -p 5601:5601 --name es-kibana-test  nshou/elasticsearch-kibana</span><br></pre></td></tr></table></figure><p></p>\n<p>直接在服务器上安装 请参考官网即可 </p>\n<h6 id=\"1-搭建k8s实验环境\"><a href=\"#1-搭建k8s实验环境\" class=\"headerlink\" title=\"1:搭建k8s实验环境\"></a>1:搭建k8s实验环境</h6><p>使用minikube 快速搭建一个k8s实验环境<br><a href=\"/ming/ba1e0f81.html\" title=\"minikube快速搭建k8s测试环境\">minikube快速搭建k8s测试环境</a></p>\n<h6 id=\"2：建立并且修改deployment\"><a href=\"#2：建立并且修改deployment\" class=\"headerlink\" title=\"2：建立并且修改deployment\"></a>2：建立并且修改deployment</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">``` </span><br><span class=\"line\">###### 3：建立并且调整daemon set </span><br><span class=\"line\">```$xslt</span><br></pre></td></tr></table></figure>\n<h4 id=\"4：建立并且调整-service\"><a href=\"#4：建立并且调整-service\" class=\"headerlink\" title=\"4：建立并且调整 service\"></a>4：建立并且调整 service</h4><p>####</p>"},{"title":"maven 远程部署tomcat 上的java web 项目","abbrlink":"d7957e83","date":"2017-11-10T16:00:00.000Z","_content":"####由于有朋友不会这个远程部署又懒的百度、google 于是我写这个maven+tomcat远程部署javaweb项目的教程。以后心情好说不定会继续更新项目管理的一些环境搭建:如jenkins+gitlab+项目管理工具(如禅道)这样自动化部署测试环境\n##工具和环境准备\n1:工具 maven tomcat \n2:环境maven能下jar即可、tomcat管理员账户和一些安全设置设定(8.5以上需要设定远程管理员访问的配置)\n3:能访问远程tomcat管理页面\n##maven远程部署配置\n####1: maven工具配置\n需要在maven的setting.xml中添加如下配置\nsettins.xml 一般在maven安装目录的conf文件夹下 不排除有人更改默认地址了\n```\n<servers>\n    <!--maven tomcat远程部署密码帐号密码设置-->\n    <server>\n        <id>名称 例如“laji” (任意取   pom.xml中需要使用)</id>\n        <username>tomcat管理员用户名</username>\n        <password>tomcat管理员密码</password>\n    </server>\n</servers>\n```\n####2:maven项目中的pom设置 在build的插件中添加下面这个插件并且配置\n亲测可以支持8.5tomcat 和7.x的  ,  tomcat 9.x的没测试\n```\n<!--tomcat远程部署插件-->\n            <plugin>\n                <groupId>org.apache.tomcat.maven</groupId>\n                <artifactId>tomcat7-maven-plugin</artifactId>\n                <version>2.1</version>\n                <configuration>\n                 <!-- 此处的名字必须和setting.xml中配置的ID一致-->\n                    <server>laji</server>\n                    <!-- tomcat远程部署访问页面-->\n                    <url>http://服务器ip:8080/manager/text</url>\n <!-- 此处的名字是项目发布的工程名 可以任意取 访问部署好的项目旧是这个名称-->\n                    <path>/lajiproject</path>\n                </configuration>\n            </plugin>\n```\n\n##tomcat远程部署配置\n####1:需要配置tomcat管理员账户 并且能访问远程tomcat管理员地址例如：localhost:8080/manager/text\n在tomcat安装目录的conf下面的tomcat-users.xml中修改\n```\n<tomcat-users xmlns=\"http://tomcat.apache.org/xml\"\n              xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n              xsi:schemaLocation=\"http://tomcat.apache.org/xml tomcat-users.xsd\"\n              version=\"1.0\">\n<role rolename=\"admin-gui\"/>\n<role rolename=\"admin-script\"/>\n<role rolename=\"manager-gui\"/>\n<role rolename=\"manager-script\"/>\n<role rolename=\"manager-jmx\"/>\n<role rolename=\"manager-status\"/>\n<user username=\"admin\" password=\"ideal123\" roles=\"manager-gui,manager-script,manager-jmx,manager-status,admin-script,admin-gui\"/>\n\n</tomcat-users>\n                 \n```\n####2:tomcat8.5远程需要添加远程管理员用户访问配置步骤\n####tomcat 8.5之后呢对安全访问增强了  不仅仅需要配置管理帐号还需要配置允许远程访问管理员账户\n```\n在conf/Catalina/localhost/manager.xml  \n没有就创建这个xml ，然后在manager.xml中添加\n\n<Context privileged=\"true\" antiResourceLocking=\"false\"\n         docBase=\"${catalina.home}/webapps/manager\">\n    <Valve className=\"org.apache.catalina.valves.RemoteAddrValve\" allow=\"^.*$\" />\n</Context>\n\n直接生效无须重启\n在官方文档中提到：每个web应用应该有自己的安全管理文件（manager.xml）如果没有使用默认值 也就是不能远程访问\n所以如果需要远程访问就需要创建manager.xml来指定允许远程访问规则\n```\n##执行远程部署\n####例如idea 在你项目的maven配置的地方找到Plugins>tomcat7>tomcat7:redeploy\n####尽量使用redeploy  因为你不从新部署有时候会产生乱七八糟的错误\n####这个插件具体玩法 向具体了解就需要自行找官方文档 我也没看官方文档\n###总结:部署过程： maven编译jar或者war》maven通过远程服务器的支持上传jar或者war\n###这个时候需要保证本地编译的jar和war能符合服务器上的tomcat的jre版本\n","source":"_posts/综合应用/maven+tomcamt远程部署javaweb项目.md","raw":"---\ntitle: maven 远程部署tomcat 上的java web 项目\ncategories: 笔记\ntags:\n  - maven\n  - java\n  - tomcat\nabbrlink: d7957e83\ndate: 2017-11-11 00:00:00\n---\n####由于有朋友不会这个远程部署又懒的百度、google 于是我写这个maven+tomcat远程部署javaweb项目的教程。以后心情好说不定会继续更新项目管理的一些环境搭建:如jenkins+gitlab+项目管理工具(如禅道)这样自动化部署测试环境\n##工具和环境准备\n1:工具 maven tomcat \n2:环境maven能下jar即可、tomcat管理员账户和一些安全设置设定(8.5以上需要设定远程管理员访问的配置)\n3:能访问远程tomcat管理页面\n##maven远程部署配置\n####1: maven工具配置\n需要在maven的setting.xml中添加如下配置\nsettins.xml 一般在maven安装目录的conf文件夹下 不排除有人更改默认地址了\n```\n<servers>\n    <!--maven tomcat远程部署密码帐号密码设置-->\n    <server>\n        <id>名称 例如“laji” (任意取   pom.xml中需要使用)</id>\n        <username>tomcat管理员用户名</username>\n        <password>tomcat管理员密码</password>\n    </server>\n</servers>\n```\n####2:maven项目中的pom设置 在build的插件中添加下面这个插件并且配置\n亲测可以支持8.5tomcat 和7.x的  ,  tomcat 9.x的没测试\n```\n<!--tomcat远程部署插件-->\n            <plugin>\n                <groupId>org.apache.tomcat.maven</groupId>\n                <artifactId>tomcat7-maven-plugin</artifactId>\n                <version>2.1</version>\n                <configuration>\n                 <!-- 此处的名字必须和setting.xml中配置的ID一致-->\n                    <server>laji</server>\n                    <!-- tomcat远程部署访问页面-->\n                    <url>http://服务器ip:8080/manager/text</url>\n <!-- 此处的名字是项目发布的工程名 可以任意取 访问部署好的项目旧是这个名称-->\n                    <path>/lajiproject</path>\n                </configuration>\n            </plugin>\n```\n\n##tomcat远程部署配置\n####1:需要配置tomcat管理员账户 并且能访问远程tomcat管理员地址例如：localhost:8080/manager/text\n在tomcat安装目录的conf下面的tomcat-users.xml中修改\n```\n<tomcat-users xmlns=\"http://tomcat.apache.org/xml\"\n              xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n              xsi:schemaLocation=\"http://tomcat.apache.org/xml tomcat-users.xsd\"\n              version=\"1.0\">\n<role rolename=\"admin-gui\"/>\n<role rolename=\"admin-script\"/>\n<role rolename=\"manager-gui\"/>\n<role rolename=\"manager-script\"/>\n<role rolename=\"manager-jmx\"/>\n<role rolename=\"manager-status\"/>\n<user username=\"admin\" password=\"ideal123\" roles=\"manager-gui,manager-script,manager-jmx,manager-status,admin-script,admin-gui\"/>\n\n</tomcat-users>\n                 \n```\n####2:tomcat8.5远程需要添加远程管理员用户访问配置步骤\n####tomcat 8.5之后呢对安全访问增强了  不仅仅需要配置管理帐号还需要配置允许远程访问管理员账户\n```\n在conf/Catalina/localhost/manager.xml  \n没有就创建这个xml ，然后在manager.xml中添加\n\n<Context privileged=\"true\" antiResourceLocking=\"false\"\n         docBase=\"${catalina.home}/webapps/manager\">\n    <Valve className=\"org.apache.catalina.valves.RemoteAddrValve\" allow=\"^.*$\" />\n</Context>\n\n直接生效无须重启\n在官方文档中提到：每个web应用应该有自己的安全管理文件（manager.xml）如果没有使用默认值 也就是不能远程访问\n所以如果需要远程访问就需要创建manager.xml来指定允许远程访问规则\n```\n##执行远程部署\n####例如idea 在你项目的maven配置的地方找到Plugins>tomcat7>tomcat7:redeploy\n####尽量使用redeploy  因为你不从新部署有时候会产生乱七八糟的错误\n####这个插件具体玩法 向具体了解就需要自行找官方文档 我也没看官方文档\n###总结:部署过程： maven编译jar或者war》maven通过远程服务器的支持上传jar或者war\n###这个时候需要保证本地编译的jar和war能符合服务器上的tomcat的jre版本\n","slug":"综合应用/maven+tomcamt远程部署javaweb项目","published":1,"updated":"2018-08-17T08:10:03.923Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjo9uatzp006hmwcz86b1pg1k","content":"<p>####由于有朋友不会这个远程部署又懒的百度、google 于是我写这个maven+tomcat远程部署javaweb项目的教程。以后心情好说不定会继续更新项目管理的一些环境搭建:如jenkins+gitlab+项目管理工具(如禅道)这样自动化部署测试环境</p><p>##工具和环境准备<br>1:工具 maven tomcat<br>2:环境maven能下jar即可、tomcat管理员账户和一些安全设置设定(8.5以上需要设定远程管理员访问的配置)<br>3:能访问远程tomcat管理页面</p><p>##maven远程部署配置</p><p>####1: maven工具配置<br>需要在maven的setting.xml中添加如下配置<br>settins.xml 一般在maven安装目录的conf文件夹下 不排除有人更改默认地址了<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;servers&gt;</span><br><span class=\"line\">    &lt;!--maven tomcat远程部署密码帐号密码设置--&gt;</span><br><span class=\"line\">    &lt;server&gt;</span><br><span class=\"line\">        &lt;id&gt;名称 例如“laji” (任意取   pom.xml中需要使用)&lt;/id&gt;</span><br><span class=\"line\">        &lt;username&gt;tomcat管理员用户名&lt;/username&gt;</span><br><span class=\"line\">        &lt;password&gt;tomcat管理员密码&lt;/password&gt;</span><br><span class=\"line\">    &lt;/server&gt;</span><br><span class=\"line\">&lt;/servers&gt;</span><br></pre></td></tr></table></figure><p></p>\n<p>####2:maven项目中的pom设置 在build的插件中添加下面这个插件并且配置<br>亲测可以支持8.5tomcat 和7.x的  ,  tomcat 9.x的没测试<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!--tomcat远程部署插件--&gt;</span><br><span class=\"line\">            &lt;plugin&gt;</span><br><span class=\"line\">                &lt;groupId&gt;org.apache.tomcat.maven&lt;/groupId&gt;</span><br><span class=\"line\">                &lt;artifactId&gt;tomcat7-maven-plugin&lt;/artifactId&gt;</span><br><span class=\"line\">                &lt;version&gt;2.1&lt;/version&gt;</span><br><span class=\"line\">                &lt;configuration&gt;</span><br><span class=\"line\">                 &lt;!-- 此处的名字必须和setting.xml中配置的ID一致--&gt;</span><br><span class=\"line\">                    &lt;server&gt;laji&lt;/server&gt;</span><br><span class=\"line\">                    &lt;!-- tomcat远程部署访问页面--&gt;</span><br><span class=\"line\">                    &lt;url&gt;http://服务器ip:8080/manager/text&lt;/url&gt;</span><br><span class=\"line\"> &lt;!-- 此处的名字是项目发布的工程名 可以任意取 访问部署好的项目旧是这个名称--&gt;</span><br><span class=\"line\">                    &lt;path&gt;/lajiproject&lt;/path&gt;</span><br><span class=\"line\">                &lt;/configuration&gt;</span><br><span class=\"line\">            &lt;/plugin&gt;</span><br></pre></td></tr></table></figure><p></p>\n<p>##tomcat远程部署配置</p>\n<p>####1:需要配置tomcat管理员账户 并且能访问远程tomcat管理员地址例如：localhost:8080/manager/text<br>在tomcat安装目录的conf下面的tomcat-users.xml中修改<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;tomcat-users xmlns=&quot;http://tomcat.apache.org/xml&quot;</span><br><span class=\"line\">              xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class=\"line\">              xsi:schemaLocation=&quot;http://tomcat.apache.org/xml tomcat-users.xsd&quot;</span><br><span class=\"line\">              version=&quot;1.0&quot;&gt;</span><br><span class=\"line\">&lt;role rolename=&quot;admin-gui&quot;/&gt;</span><br><span class=\"line\">&lt;role rolename=&quot;admin-script&quot;/&gt;</span><br><span class=\"line\">&lt;role rolename=&quot;manager-gui&quot;/&gt;</span><br><span class=\"line\">&lt;role rolename=&quot;manager-script&quot;/&gt;</span><br><span class=\"line\">&lt;role rolename=&quot;manager-jmx&quot;/&gt;</span><br><span class=\"line\">&lt;role rolename=&quot;manager-status&quot;/&gt;</span><br><span class=\"line\">&lt;user username=&quot;admin&quot; password=&quot;ideal123&quot; roles=&quot;manager-gui,manager-script,manager-jmx,manager-status,admin-script,admin-gui&quot;/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/tomcat-users&gt;</span><br></pre></td></tr></table></figure><p></p>\n<p>####2:tomcat8.5远程需要添加远程管理员用户访问配置步骤</p>\n<p>####tomcat 8.5之后呢对安全访问增强了  不仅仅需要配置管理帐号还需要配置允许远程访问管理员账户<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在conf/Catalina/localhost/manager.xml  </span><br><span class=\"line\">没有就创建这个xml ，然后在manager.xml中添加</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;Context privileged=&quot;true&quot; antiResourceLocking=&quot;false&quot;</span><br><span class=\"line\">         docBase=&quot;$&#123;catalina.home&#125;/webapps/manager&quot;&gt;</span><br><span class=\"line\">    &lt;Valve className=&quot;org.apache.catalina.valves.RemoteAddrValve&quot; allow=&quot;^.*$&quot; /&gt;</span><br><span class=\"line\">&lt;/Context&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">直接生效无须重启</span><br><span class=\"line\">在官方文档中提到：每个web应用应该有自己的安全管理文件（manager.xml）如果没有使用默认值 也就是不能远程访问</span><br><span class=\"line\">所以如果需要远程访问就需要创建manager.xml来指定允许远程访问规则</span><br></pre></td></tr></table></figure><p></p>\n<p>##执行远程部署</p>\n<p>####例如idea 在你项目的maven配置的地方找到Plugins&gt;tomcat7&gt;tomcat7:redeploy</p>\n<p>####尽量使用redeploy  因为你不从新部署有时候会产生乱七八糟的错误</p>\n<p>####这个插件具体玩法 向具体了解就需要自行找官方文档 我也没看官方文档</p>\n<p>###总结:部署过程： maven编译jar或者war》maven通过远程服务器的支持上传jar或者war</p>\n<p>###这个时候需要保证本地编译的jar和war能符合服务器上的tomcat的jre版本</p>","site":{"data":{}},"excerpt":"","more":"<p>####由于有朋友不会这个远程部署又懒的百度、google 于是我写这个maven+tomcat远程部署javaweb项目的教程。以后心情好说不定会继续更新项目管理的一些环境搭建:如jenkins+gitlab+项目管理工具(如禅道)这样自动化部署测试环境</p><p>##工具和环境准备<br>1:工具 maven tomcat<br>2:环境maven能下jar即可、tomcat管理员账户和一些安全设置设定(8.5以上需要设定远程管理员访问的配置)<br>3:能访问远程tomcat管理页面</p><p>##maven远程部署配置</p><p>####1: maven工具配置<br>需要在maven的setting.xml中添加如下配置<br>settins.xml 一般在maven安装目录的conf文件夹下 不排除有人更改默认地址了<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;servers&gt;</span><br><span class=\"line\">    &lt;!--maven tomcat远程部署密码帐号密码设置--&gt;</span><br><span class=\"line\">    &lt;server&gt;</span><br><span class=\"line\">        &lt;id&gt;名称 例如“laji” (任意取   pom.xml中需要使用)&lt;/id&gt;</span><br><span class=\"line\">        &lt;username&gt;tomcat管理员用户名&lt;/username&gt;</span><br><span class=\"line\">        &lt;password&gt;tomcat管理员密码&lt;/password&gt;</span><br><span class=\"line\">    &lt;/server&gt;</span><br><span class=\"line\">&lt;/servers&gt;</span><br></pre></td></tr></table></figure><p></p>\n<p>####2:maven项目中的pom设置 在build的插件中添加下面这个插件并且配置<br>亲测可以支持8.5tomcat 和7.x的  ,  tomcat 9.x的没测试<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!--tomcat远程部署插件--&gt;</span><br><span class=\"line\">            &lt;plugin&gt;</span><br><span class=\"line\">                &lt;groupId&gt;org.apache.tomcat.maven&lt;/groupId&gt;</span><br><span class=\"line\">                &lt;artifactId&gt;tomcat7-maven-plugin&lt;/artifactId&gt;</span><br><span class=\"line\">                &lt;version&gt;2.1&lt;/version&gt;</span><br><span class=\"line\">                &lt;configuration&gt;</span><br><span class=\"line\">                 &lt;!-- 此处的名字必须和setting.xml中配置的ID一致--&gt;</span><br><span class=\"line\">                    &lt;server&gt;laji&lt;/server&gt;</span><br><span class=\"line\">                    &lt;!-- tomcat远程部署访问页面--&gt;</span><br><span class=\"line\">                    &lt;url&gt;http://服务器ip:8080/manager/text&lt;/url&gt;</span><br><span class=\"line\"> &lt;!-- 此处的名字是项目发布的工程名 可以任意取 访问部署好的项目旧是这个名称--&gt;</span><br><span class=\"line\">                    &lt;path&gt;/lajiproject&lt;/path&gt;</span><br><span class=\"line\">                &lt;/configuration&gt;</span><br><span class=\"line\">            &lt;/plugin&gt;</span><br></pre></td></tr></table></figure><p></p>\n<p>##tomcat远程部署配置</p>\n<p>####1:需要配置tomcat管理员账户 并且能访问远程tomcat管理员地址例如：localhost:8080/manager/text<br>在tomcat安装目录的conf下面的tomcat-users.xml中修改<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;tomcat-users xmlns=&quot;http://tomcat.apache.org/xml&quot;</span><br><span class=\"line\">              xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class=\"line\">              xsi:schemaLocation=&quot;http://tomcat.apache.org/xml tomcat-users.xsd&quot;</span><br><span class=\"line\">              version=&quot;1.0&quot;&gt;</span><br><span class=\"line\">&lt;role rolename=&quot;admin-gui&quot;/&gt;</span><br><span class=\"line\">&lt;role rolename=&quot;admin-script&quot;/&gt;</span><br><span class=\"line\">&lt;role rolename=&quot;manager-gui&quot;/&gt;</span><br><span class=\"line\">&lt;role rolename=&quot;manager-script&quot;/&gt;</span><br><span class=\"line\">&lt;role rolename=&quot;manager-jmx&quot;/&gt;</span><br><span class=\"line\">&lt;role rolename=&quot;manager-status&quot;/&gt;</span><br><span class=\"line\">&lt;user username=&quot;admin&quot; password=&quot;ideal123&quot; roles=&quot;manager-gui,manager-script,manager-jmx,manager-status,admin-script,admin-gui&quot;/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/tomcat-users&gt;</span><br></pre></td></tr></table></figure><p></p>\n<p>####2:tomcat8.5远程需要添加远程管理员用户访问配置步骤</p>\n<p>####tomcat 8.5之后呢对安全访问增强了  不仅仅需要配置管理帐号还需要配置允许远程访问管理员账户<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在conf/Catalina/localhost/manager.xml  </span><br><span class=\"line\">没有就创建这个xml ，然后在manager.xml中添加</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;Context privileged=&quot;true&quot; antiResourceLocking=&quot;false&quot;</span><br><span class=\"line\">         docBase=&quot;$&#123;catalina.home&#125;/webapps/manager&quot;&gt;</span><br><span class=\"line\">    &lt;Valve className=&quot;org.apache.catalina.valves.RemoteAddrValve&quot; allow=&quot;^.*$&quot; /&gt;</span><br><span class=\"line\">&lt;/Context&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">直接生效无须重启</span><br><span class=\"line\">在官方文档中提到：每个web应用应该有自己的安全管理文件（manager.xml）如果没有使用默认值 也就是不能远程访问</span><br><span class=\"line\">所以如果需要远程访问就需要创建manager.xml来指定允许远程访问规则</span><br></pre></td></tr></table></figure><p></p>\n<p>##执行远程部署</p>\n<p>####例如idea 在你项目的maven配置的地方找到Plugins&gt;tomcat7&gt;tomcat7:redeploy</p>\n<p>####尽量使用redeploy  因为你不从新部署有时候会产生乱七八糟的错误</p>\n<p>####这个插件具体玩法 向具体了解就需要自行找官方文档 我也没看官方文档</p>\n<p>###总结:部署过程： maven编译jar或者war》maven通过远程服务器的支持上传jar或者war</p>\n<p>###这个时候需要保证本地编译的jar和war能符合服务器上的tomcat的jre版本</p>"},{"title":"minikube快速搭建k8s测试环境","comments":1,"abbrlink":"ba1e0f81","date":"2018-02-11T06:30:12.000Z","_content":" 有朋友问我 k8s测试环境如何快速搭建 官方推荐的是minikube \n其实吧 阿里云上这种文档一抓一大把 \n参考文档:https://yq.aliyun.com/articles/221687 \n#### 运行环境\n* ubuntu 16.04 至少这个版本  低了不行 没有snap\n* 可以访问互联网   \n#### 安装步骤\n0:更新系统apt包相关资源\n需要手动调整到国内的镜像源  不然要慢死人了\n安装snap snapd 方便后续安装kubectl\n```\nsudo apt update && sudo apt upgrade \nsudo apt install snap  snapd\n```\n1：安装kubectl \n比较懒  采用 snap(类似apt的东西) 安装kubectl \n```\nsudo snap install kubectl \n```\n2：安装golang\n使用apt 安装golang \n```\nsudo apt install golang\n```\n3: 安装minikube \n```\ncurl -Lo minikube http://kubernetes.oss-cn-hangzhou.aliyuncs.com/minikube/releases/v0.25.0/minikube-linux-amd64 && chmod +x minikube && sudo mv minikube /usr/local/bin/\n```\n4:启动minikube\n```\nminikube start --registry-mirror=https://registry.docker-cn.com\n```\n5:尝试kubectl是否可用\n在启动minikube的时候 它会自动覆盖kubectl之前的链接配置 直接使用就是链接到minikube创建的k8s集群中\n```\nkubectl get all\n```\n6:打开k8s  web ui\n```\nminikube dashboard\n```\n执行完毕后会自动弹出浏览器 如果没有 请尝试 http://192.168.99.100:30000 \n7:现在就可以在web ui中或者终端中使用kubectl操控k8s集群了\n此集群k8s版本为1.9 \n\n#### 总结: 这个方法只能在本地快速搭建起来一套测试环境 如果是真实运行环境还是要手动的去安装  高版本的k8s 安装基本上对于一个熟悉linux的用户来说没啥难度 总的就是安装各个组件、配置各个组件 即可 \n\n","source":"_posts/综合应用/minikube快速搭建k8s测试环境.md","raw":"---\ntitle: minikube快速搭建k8s测试环境\ncomments: true\ncategories: k8s\ntags:\n  - docker\n  - k8s\nabbrlink: ba1e0f81\ndate: 2018-02-11 14:30:12\n---\n 有朋友问我 k8s测试环境如何快速搭建 官方推荐的是minikube \n其实吧 阿里云上这种文档一抓一大把 \n参考文档:https://yq.aliyun.com/articles/221687 \n#### 运行环境\n* ubuntu 16.04 至少这个版本  低了不行 没有snap\n* 可以访问互联网   \n#### 安装步骤\n0:更新系统apt包相关资源\n需要手动调整到国内的镜像源  不然要慢死人了\n安装snap snapd 方便后续安装kubectl\n```\nsudo apt update && sudo apt upgrade \nsudo apt install snap  snapd\n```\n1：安装kubectl \n比较懒  采用 snap(类似apt的东西) 安装kubectl \n```\nsudo snap install kubectl \n```\n2：安装golang\n使用apt 安装golang \n```\nsudo apt install golang\n```\n3: 安装minikube \n```\ncurl -Lo minikube http://kubernetes.oss-cn-hangzhou.aliyuncs.com/minikube/releases/v0.25.0/minikube-linux-amd64 && chmod +x minikube && sudo mv minikube /usr/local/bin/\n```\n4:启动minikube\n```\nminikube start --registry-mirror=https://registry.docker-cn.com\n```\n5:尝试kubectl是否可用\n在启动minikube的时候 它会自动覆盖kubectl之前的链接配置 直接使用就是链接到minikube创建的k8s集群中\n```\nkubectl get all\n```\n6:打开k8s  web ui\n```\nminikube dashboard\n```\n执行完毕后会自动弹出浏览器 如果没有 请尝试 http://192.168.99.100:30000 \n7:现在就可以在web ui中或者终端中使用kubectl操控k8s集群了\n此集群k8s版本为1.9 \n\n#### 总结: 这个方法只能在本地快速搭建起来一套测试环境 如果是真实运行环境还是要手动的去安装  高版本的k8s 安装基本上对于一个熟悉linux的用户来说没啥难度 总的就是安装各个组件、配置各个组件 即可 \n\n","slug":"综合应用/minikube快速搭建k8s测试环境","published":1,"updated":"2018-08-17T08:10:03.923Z","layout":"post","photos":[],"link":"","_id":"cjo9uatzq006mmwczad8fray3","content":"<p>有朋友问我 k8s测试环境如何快速搭建 官方推荐的是minikube<br>其实吧 阿里云上这种文档一抓一大把<br>参考文档:<a href=\"https://yq.aliyun.com/articles/221687\" target=\"_blank\" rel=\"noopener\">https://yq.aliyun.com/articles/221687</a></p><h4 id=\"运行环境\"><a href=\"#运行环境\" class=\"headerlink\" title=\"运行环境\"></a>运行环境</h4><ul><li>ubuntu 16.04 至少这个版本 低了不行 没有snap</li><li>可以访问互联网<h4 id=\"安装步骤\"><a href=\"#安装步骤\" class=\"headerlink\" title=\"安装步骤\"></a>安装步骤</h4>0:更新系统apt包相关资源<br>需要手动调整到国内的镜像源 不然要慢死人了<br>安装snap snapd 方便后续安装kubectl<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt update &amp;&amp; sudo apt upgrade </span><br><span class=\"line\">sudo apt install snap  snapd</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>1：安装kubectl<br>比较懒  采用 snap(类似apt的东西) 安装kubectl<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo snap install kubectl</span><br></pre></td></tr></table></figure><p></p>\n<p>2：安装golang<br>使用apt 安装golang<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt install golang</span><br></pre></td></tr></table></figure><p></p>\n<p>3: 安装minikube<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -Lo minikube http://kubernetes.oss-cn-hangzhou.aliyuncs.com/minikube/releases/v0.25.0/minikube-linux-amd64 &amp;&amp; chmod +x minikube &amp;&amp; sudo mv minikube /usr/local/bin/</span><br></pre></td></tr></table></figure><p></p>\n<p>4:启动minikube<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">minikube start --registry-mirror=https://registry.docker-cn.com</span><br></pre></td></tr></table></figure><p></p>\n<p>5:尝试kubectl是否可用<br>在启动minikube的时候 它会自动覆盖kubectl之前的链接配置 直接使用就是链接到minikube创建的k8s集群中<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl get all</span><br></pre></td></tr></table></figure><p></p>\n<p>6:打开k8s  web ui<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">minikube dashboard</span><br></pre></td></tr></table></figure><p></p>\n<p>执行完毕后会自动弹出浏览器 如果没有 请尝试 <a href=\"http://192.168.99.100:30000\" target=\"_blank\" rel=\"noopener\">http://192.168.99.100:30000</a><br>7:现在就可以在web ui中或者终端中使用kubectl操控k8s集群了<br>此集群k8s版本为1.9 </p>\n<h4 id=\"总结-这个方法只能在本地快速搭建起来一套测试环境-如果是真实运行环境还是要手动的去安装-高版本的k8s-安装基本上对于一个熟悉linux的用户来说没啥难度-总的就是安装各个组件、配置各个组件-即可\"><a href=\"#总结-这个方法只能在本地快速搭建起来一套测试环境-如果是真实运行环境还是要手动的去安装-高版本的k8s-安装基本上对于一个熟悉linux的用户来说没啥难度-总的就是安装各个组件、配置各个组件-即可\" class=\"headerlink\" title=\"总结: 这个方法只能在本地快速搭建起来一套测试环境 如果是真实运行环境还是要手动的去安装  高版本的k8s 安装基本上对于一个熟悉linux的用户来说没啥难度 总的就是安装各个组件、配置各个组件 即可\"></a>总结: 这个方法只能在本地快速搭建起来一套测试环境 如果是真实运行环境还是要手动的去安装  高版本的k8s 安装基本上对于一个熟悉linux的用户来说没啥难度 总的就是安装各个组件、配置各个组件 即可</h4>","site":{"data":{}},"excerpt":"","more":"<p>有朋友问我 k8s测试环境如何快速搭建 官方推荐的是minikube<br>其实吧 阿里云上这种文档一抓一大把<br>参考文档:<a href=\"https://yq.aliyun.com/articles/221687\" target=\"_blank\" rel=\"noopener\">https://yq.aliyun.com/articles/221687</a></p><h4 id=\"运行环境\"><a href=\"#运行环境\" class=\"headerlink\" title=\"运行环境\"></a>运行环境</h4><ul><li>ubuntu 16.04 至少这个版本 低了不行 没有snap</li><li>可以访问互联网<h4 id=\"安装步骤\"><a href=\"#安装步骤\" class=\"headerlink\" title=\"安装步骤\"></a>安装步骤</h4>0:更新系统apt包相关资源<br>需要手动调整到国内的镜像源 不然要慢死人了<br>安装snap snapd 方便后续安装kubectl<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt update &amp;&amp; sudo apt upgrade </span><br><span class=\"line\">sudo apt install snap  snapd</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>1：安装kubectl<br>比较懒  采用 snap(类似apt的东西) 安装kubectl<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo snap install kubectl</span><br></pre></td></tr></table></figure><p></p>\n<p>2：安装golang<br>使用apt 安装golang<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt install golang</span><br></pre></td></tr></table></figure><p></p>\n<p>3: 安装minikube<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -Lo minikube http://kubernetes.oss-cn-hangzhou.aliyuncs.com/minikube/releases/v0.25.0/minikube-linux-amd64 &amp;&amp; chmod +x minikube &amp;&amp; sudo mv minikube /usr/local/bin/</span><br></pre></td></tr></table></figure><p></p>\n<p>4:启动minikube<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">minikube start --registry-mirror=https://registry.docker-cn.com</span><br></pre></td></tr></table></figure><p></p>\n<p>5:尝试kubectl是否可用<br>在启动minikube的时候 它会自动覆盖kubectl之前的链接配置 直接使用就是链接到minikube创建的k8s集群中<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl get all</span><br></pre></td></tr></table></figure><p></p>\n<p>6:打开k8s  web ui<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">minikube dashboard</span><br></pre></td></tr></table></figure><p></p>\n<p>执行完毕后会自动弹出浏览器 如果没有 请尝试 <a href=\"http://192.168.99.100:30000\" target=\"_blank\" rel=\"noopener\">http://192.168.99.100:30000</a><br>7:现在就可以在web ui中或者终端中使用kubectl操控k8s集群了<br>此集群k8s版本为1.9 </p>\n<h4 id=\"总结-这个方法只能在本地快速搭建起来一套测试环境-如果是真实运行环境还是要手动的去安装-高版本的k8s-安装基本上对于一个熟悉linux的用户来说没啥难度-总的就是安装各个组件、配置各个组件-即可\"><a href=\"#总结-这个方法只能在本地快速搭建起来一套测试环境-如果是真实运行环境还是要手动的去安装-高版本的k8s-安装基本上对于一个熟悉linux的用户来说没啥难度-总的就是安装各个组件、配置各个组件-即可\" class=\"headerlink\" title=\"总结: 这个方法只能在本地快速搭建起来一套测试环境 如果是真实运行环境还是要手动的去安装  高版本的k8s 安装基本上对于一个熟悉linux的用户来说没啥难度 总的就是安装各个组件、配置各个组件 即可\"></a>总结: 这个方法只能在本地快速搭建起来一套测试环境 如果是真实运行环境还是要手动的去安装  高版本的k8s 安装基本上对于一个熟悉linux的用户来说没啥难度 总的就是安装各个组件、配置各个组件 即可</h4>"},{"title":"rancher搭建k8s集群-国内加速","comments":1,"abbrlink":"b52bf00b","date":"2018-03-01T03:04:01.000Z","_content":"通过rancher部署k8s如果不考虑gfw 是非常简单的 但是在国内部署 不得不考虑gfw的问题  \n默认有个 组件镜像是从 google上下载的 所以需要修改一些参数配置提供国内加速 \n\n### 环境:\n* centos 7.x\n* rancher：1.6.x\n* docker  支持rancher:1.6.x的版本即可  \n#### 1： 安装基本docker 环境 \n{% post_link 综合应用/centos-docker环境搭建 %}\n\n#### 2：启动rancher server\n```\n# 建立存放 rancher 相关数据文件存储\nmkdir -p /root/rancher\n# 启动 rancher server 容器 \nsudo docker run -d -v /root/rancher:/var/lib/mysql --restart=unless-stopped -p 40000:8080 --name rancher-server rancher/server:stable \n```\n#### 3:登陆rancher\n访问 http://<ip>:40000 \n#### 4:自定义 k8s模板 使用 国内可用镜像 \n按照 https://www.cnrancher.com/kubernetes-installation/ 文档进行修改 \n注意：  \n文档中标记红线的值 必须如下 设置 否则 无法启动 共四个值需要修改\nPrivate Registry for Add-Ons and Pod Infra Container Image = registry.cn-shenzhen.aliyuncs.com\nImage namespace for  Add-Ons and Pod Infra Container Image = rancher_cn\nImage namespace for kubernetes-helm Image = rancher_cn\nPod Infra Container Image =  rancher_cn/pause-amd64:3.0\n#### 5:创建 环境\n根据刚刚创建的 k8s模板创建环境 即可  \n#### 总结\n部署rancher 很简单 注意是有时候是gfw导致组件无法创建 略坑    \nrancher 部署的k8s集群 有两个dns  一个是k8s中 kube-system 中的dns服务 一个是rancher的network 应用  两个都可以用 \n部署rancher 如果资源相对充足 rancher server和rancher agent分开部署  \n在rancher1.x版本中 rancher部署的k8s集群 是在rancher agent 上部署的 扩展起来很困难 \n而且由于 rancher也提供一套cni网络  这样就导致 k8s的网络和rancher的网络复合起来  显得较为复杂 不好处理\n\n\n\n\n\n\n\n","source":"_posts/综合应用/rancher搭建k8s集群-国内加速.md","raw":"---\ntitle: rancher搭建k8s集群-国内加速\ncomments: true\ncategories: k8s\ntags:\n  - k8s\n  - rancher\n  - docker\nabbrlink: b52bf00b\ndate: 2018-03-01 11:04:01\n---\n通过rancher部署k8s如果不考虑gfw 是非常简单的 但是在国内部署 不得不考虑gfw的问题  \n默认有个 组件镜像是从 google上下载的 所以需要修改一些参数配置提供国内加速 \n\n### 环境:\n* centos 7.x\n* rancher：1.6.x\n* docker  支持rancher:1.6.x的版本即可  \n#### 1： 安装基本docker 环境 \n{% post_link 综合应用/centos-docker环境搭建 %}\n\n#### 2：启动rancher server\n```\n# 建立存放 rancher 相关数据文件存储\nmkdir -p /root/rancher\n# 启动 rancher server 容器 \nsudo docker run -d -v /root/rancher:/var/lib/mysql --restart=unless-stopped -p 40000:8080 --name rancher-server rancher/server:stable \n```\n#### 3:登陆rancher\n访问 http://<ip>:40000 \n#### 4:自定义 k8s模板 使用 国内可用镜像 \n按照 https://www.cnrancher.com/kubernetes-installation/ 文档进行修改 \n注意：  \n文档中标记红线的值 必须如下 设置 否则 无法启动 共四个值需要修改\nPrivate Registry for Add-Ons and Pod Infra Container Image = registry.cn-shenzhen.aliyuncs.com\nImage namespace for  Add-Ons and Pod Infra Container Image = rancher_cn\nImage namespace for kubernetes-helm Image = rancher_cn\nPod Infra Container Image =  rancher_cn/pause-amd64:3.0\n#### 5:创建 环境\n根据刚刚创建的 k8s模板创建环境 即可  \n#### 总结\n部署rancher 很简单 注意是有时候是gfw导致组件无法创建 略坑    \nrancher 部署的k8s集群 有两个dns  一个是k8s中 kube-system 中的dns服务 一个是rancher的network 应用  两个都可以用 \n部署rancher 如果资源相对充足 rancher server和rancher agent分开部署  \n在rancher1.x版本中 rancher部署的k8s集群 是在rancher agent 上部署的 扩展起来很困难 \n而且由于 rancher也提供一套cni网络  这样就导致 k8s的网络和rancher的网络复合起来  显得较为复杂 不好处理\n\n\n\n\n\n\n\n","slug":"综合应用/rancher搭建k8s集群-国内加速","published":1,"updated":"2018-08-17T08:10:03.923Z","layout":"post","photos":[],"link":"","_id":"cjo9uatzr006pmwcz7ablbnlq","content":"<p>通过rancher部署k8s如果不考虑gfw 是非常简单的 但是在国内部署 不得不考虑gfw的问题<br>默认有个 组件镜像是从 google上下载的 所以需要修改一些参数配置提供国内加速</p><h3 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境:\"></a>环境:</h3><ul><li>centos 7.x</li><li>rancher：1.6.x</li><li>docker 支持rancher:1.6.x的版本即可<h4 id=\"1：-安装基本docker-环境\"><a href=\"#1：-安装基本docker-环境\" class=\"headerlink\" title=\"1： 安装基本docker 环境\"></a>1： 安装基本docker 环境</h4><a href=\"/ming/aef2102a.html\" title=\"centos-docker环境搭建\">centos-docker环境搭建</a></li></ul><h4 id=\"2：启动rancher-server\"><a href=\"#2：启动rancher-server\" class=\"headerlink\" title=\"2：启动rancher server\"></a>2：启动rancher server</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 建立存放 rancher 相关数据文件存储</span><br><span class=\"line\">mkdir -p /root/rancher</span><br><span class=\"line\"># 启动 rancher server 容器 </span><br><span class=\"line\">sudo docker run -d -v /root/rancher:/var/lib/mysql --restart=unless-stopped -p 40000:8080 --name rancher-server rancher/server:stable</span><br></pre></td></tr></table></figure>\n<h4 id=\"3-登陆rancher\"><a href=\"#3-登陆rancher\" class=\"headerlink\" title=\"3:登陆rancher\"></a>3:登陆rancher</h4><p>访问 http://<ip>:40000 </ip></p>\n<h4 id=\"4-自定义-k8s模板-使用-国内可用镜像\"><a href=\"#4-自定义-k8s模板-使用-国内可用镜像\" class=\"headerlink\" title=\"4:自定义 k8s模板 使用 国内可用镜像\"></a>4:自定义 k8s模板 使用 国内可用镜像</h4><p>按照 <a href=\"https://www.cnrancher.com/kubernetes-installation/\" target=\"_blank\" rel=\"noopener\">https://www.cnrancher.com/kubernetes-installation/</a> 文档进行修改<br>注意：<br>文档中标记红线的值 必须如下 设置 否则 无法启动 共四个值需要修改<br>Private Registry for Add-Ons and Pod Infra Container Image = registry.cn-shenzhen.aliyuncs.com<br>Image namespace for  Add-Ons and Pod Infra Container Image = rancher_cn<br>Image namespace for kubernetes-helm Image = rancher_cn<br>Pod Infra Container Image =  rancher_cn/pause-amd64:3.0</p>\n<h4 id=\"5-创建-环境\"><a href=\"#5-创建-环境\" class=\"headerlink\" title=\"5:创建 环境\"></a>5:创建 环境</h4><p>根据刚刚创建的 k8s模板创建环境 即可  </p>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><p>部署rancher 很简单 注意是有时候是gfw导致组件无法创建 略坑<br>rancher 部署的k8s集群 有两个dns  一个是k8s中 kube-system 中的dns服务 一个是rancher的network 应用  两个都可以用<br>部署rancher 如果资源相对充足 rancher server和rancher agent分开部署<br>在rancher1.x版本中 rancher部署的k8s集群 是在rancher agent 上部署的 扩展起来很困难<br>而且由于 rancher也提供一套cni网络  这样就导致 k8s的网络和rancher的网络复合起来  显得较为复杂 不好处理</p>","site":{"data":{}},"excerpt":"","more":"<p>通过rancher部署k8s如果不考虑gfw 是非常简单的 但是在国内部署 不得不考虑gfw的问题<br>默认有个 组件镜像是从 google上下载的 所以需要修改一些参数配置提供国内加速</p><h3 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境:\"></a>环境:</h3><ul><li>centos 7.x</li><li>rancher：1.6.x</li><li>docker 支持rancher:1.6.x的版本即可<h4 id=\"1：-安装基本docker-环境\"><a href=\"#1：-安装基本docker-环境\" class=\"headerlink\" title=\"1： 安装基本docker 环境\"></a>1： 安装基本docker 环境</h4><a href=\"/ming/aef2102a.html\" title=\"centos-docker环境搭建\">centos-docker环境搭建</a></li></ul><h4 id=\"2：启动rancher-server\"><a href=\"#2：启动rancher-server\" class=\"headerlink\" title=\"2：启动rancher server\"></a>2：启动rancher server</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 建立存放 rancher 相关数据文件存储</span><br><span class=\"line\">mkdir -p /root/rancher</span><br><span class=\"line\"># 启动 rancher server 容器 </span><br><span class=\"line\">sudo docker run -d -v /root/rancher:/var/lib/mysql --restart=unless-stopped -p 40000:8080 --name rancher-server rancher/server:stable</span><br></pre></td></tr></table></figure>\n<h4 id=\"3-登陆rancher\"><a href=\"#3-登陆rancher\" class=\"headerlink\" title=\"3:登陆rancher\"></a>3:登陆rancher</h4><p>访问 http://<ip>:40000 </ip></p>\n<h4 id=\"4-自定义-k8s模板-使用-国内可用镜像\"><a href=\"#4-自定义-k8s模板-使用-国内可用镜像\" class=\"headerlink\" title=\"4:自定义 k8s模板 使用 国内可用镜像\"></a>4:自定义 k8s模板 使用 国内可用镜像</h4><p>按照 <a href=\"https://www.cnrancher.com/kubernetes-installation/\" target=\"_blank\" rel=\"noopener\">https://www.cnrancher.com/kubernetes-installation/</a> 文档进行修改<br>注意：<br>文档中标记红线的值 必须如下 设置 否则 无法启动 共四个值需要修改<br>Private Registry for Add-Ons and Pod Infra Container Image = registry.cn-shenzhen.aliyuncs.com<br>Image namespace for  Add-Ons and Pod Infra Container Image = rancher_cn<br>Image namespace for kubernetes-helm Image = rancher_cn<br>Pod Infra Container Image =  rancher_cn/pause-amd64:3.0</p>\n<h4 id=\"5-创建-环境\"><a href=\"#5-创建-环境\" class=\"headerlink\" title=\"5:创建 环境\"></a>5:创建 环境</h4><p>根据刚刚创建的 k8s模板创建环境 即可  </p>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><p>部署rancher 很简单 注意是有时候是gfw导致组件无法创建 略坑<br>rancher 部署的k8s集群 有两个dns  一个是k8s中 kube-system 中的dns服务 一个是rancher的network 应用  两个都可以用<br>部署rancher 如果资源相对充足 rancher server和rancher agent分开部署<br>在rancher1.x版本中 rancher部署的k8s集群 是在rancher agent 上部署的 扩展起来很困难<br>而且由于 rancher也提供一套cni网络  这样就导致 k8s的网络和rancher的网络复合起来  显得较为复杂 不好处理</p>"},{"title":"springboot-mvc的messageConverter处理","comments":1,"abbrlink":"3174607","date":"2018-05-22T09:30:48.000Z","_content":"#### 前言\n最近项目中通过feign调用内部服务和其他系统服务猛然增多  \n在messageConverter这一环节出现n多问题   \n什么xml解析gg\n什么json 时间格式解析gg \n什么乱七八糟的骚格式的数据解析gg  \n导致最近一直在作在messageConverter这一块的处理 \n但是feign 的在messageConverter  有一部分是从spring mvc 的在messageConverter列表中获取的\n所以说总的来说 是要处理spring mvc中在messageConverter的维护   \n#### spring boot消息转换器配置\nspring boot 的mvc配置 优先使用 继承WebMvcConfigurerAdapter 方式 \n这样既可以拥有 大量的默认配置 也可以在一定程度上自定义配置\n##### 重写configureMessageConverters\n* 无法保证顺序 也不能清理其他的消息转换器 \n重写这个方法 可以添加自己编写的 messageConverter  到 默认的messageConverter列表中 \nmessageConverter如何编写 直接参考 AbstractHttpMessageConverter的下层实现即可 \n这里使用MappingJackson2HttpMessageConverter作为演示\n```\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.ming.core.utils.SpringBeanManagerUtils;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.http.converter.HttpMessageConverter;\nimport org.springframework.http.converter.json.Jackson2ObjectMapperBuilder;\nimport org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;\nimport org.springframework.web.servlet.config.annotation.InterceptorRegistry;\nimport org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry;\nimport org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter;\n\nimport java.text.DateFormat;\nimport java.text.SimpleDateFormat;\nimport java.util.List;\n\n/**\n * 拦截器配置\n *\n * @author ming\n * @date 2017-08-28 11点\n */\n@Configuration\npublic class WebMvcConfig extends WebMvcConfigurerAdapter {\n    @Override\n    public void configureMessageConverters(List<HttpMessageConverter<?>> converters) {\n        ObjectMapper mapper = SpringBeanManagerUtils.getBeanByType(Jackson2ObjectMapperBuilder.class).build();\n        // ObjectMapper为了保障线程安全性，里面的配置类都是一个不可变的对象\n        // 所以这里的setDateFormat的内部原理其实是创建了一个新的配置类\n        DateFormat dateFormat = mapper.getDateFormat();\n        mapper.setDateFormat(new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\"));\n        MappingJackson2HttpMessageConverter mappingJsonHttpMessageConverter = new MappingJackson2HttpMessageConverter(\n                mapper);\n        converters.add(mappingJsonHttpMessageConverter);\n    }\n}\n```\n##### 重写extendMessageConverters\n* 可以操控完整的 messageConverter列表 增加、删除等等\n重写这个方法 方便控制到整个messageConverter 列表的顺序内容  \n这里示例删除所有的 messageConverter列表   \n增加一个简单的简单的FastJsonHttpMessageConverter作为mvc中 唯一一个转换器  \n保证messageConverter顺序 调整list的先后顺序 即可\n```\n\nimport com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.ming.core.utils.SpringBeanManagerUtils;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.http.converter.HttpMessageConverter;\nimport org.springframework.http.converter.json.Jackson2ObjectMapperBuilder;\nimport org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;\nimport org.springframework.web.servlet.config.annotation.InterceptorRegistry;\nimport org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry;\nimport org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter;\n\nimport java.text.DateFormat;\nimport java.text.SimpleDateFormat;\nimport java.util.List;\n\n/**\n * 拦截器配置\n *\n * @author ming\n * @date 2017-08-28 11点\n */\n@Configuration\npublic class WebMvcConfig extends WebMvcConfigurerAdapter {\n    @Override\n    public void extendMessageConverters(List<HttpMessageConverter<?>> converters) {\n        FastJsonHttpMessageConverter fastJsonHttpMessageConverter = new FastJsonHttpMessageConverter();\n        converters.add(fastJsonHttpMessageConverter);        \n    }\n```\n#### messageConverter 详细规则\nspring boot 中 所有的消息转换器 需要继承 AbstractHttpMessageConverter<T>抽象类 \n根据其中的方法进行修改 达到转换效果 \n* canRead()\n判断转换器能不能将请求内容转换成java对象\n* canWrite()\n判断转换器能不能将java对象转换成返回内容\n* read()\n读取请求内容转换成java对象\n* write()\n将返回的java对象写入到返回内容\n* getSupportedMediaTypes()\n获取这个转换器支持的MediaType类型\n\n\n\n#### 总结  \n控制spring mvc 对于http请求的内容和响应的内容的转换 直接通过重写 messageConverter即可  \n如果只是为了增加特殊情况的处理可以直接重写configureMessageConverters在原有的messageConverter 列表中添加一个接口   \n如果需要完整控制 messageConverter的数量和顺序 那么需要重写extendMessageConverters 来达到控制messageConverter的数量和顺序  \n\nfeign会从spring mvc的messageConverter的列表中获取对应的messageConverter列表   \n那么这样来说 其实可以通过严格控制spring mvc的messageConverter列表来达到控制feign的messageConverter列表  \n\n###### MediaType解释\n```\nspring 中对于http contentType的一些枚举类型 类的全限定名org.springframework.http.MediaType\n```","source":"_posts/综合应用/springboot-mvc消息转换器.md","raw":"---\ntitle: springboot-mvc的messageConverter处理\ncomments: true\ncategories: 实战\ntags:\n  - spring boot\n  - mvc\n  - 实战\n  - messageConverter\nabbrlink: '3174607'\ndate: 2018-05-22 17:30:48\n---\n#### 前言\n最近项目中通过feign调用内部服务和其他系统服务猛然增多  \n在messageConverter这一环节出现n多问题   \n什么xml解析gg\n什么json 时间格式解析gg \n什么乱七八糟的骚格式的数据解析gg  \n导致最近一直在作在messageConverter这一块的处理 \n但是feign 的在messageConverter  有一部分是从spring mvc 的在messageConverter列表中获取的\n所以说总的来说 是要处理spring mvc中在messageConverter的维护   \n#### spring boot消息转换器配置\nspring boot 的mvc配置 优先使用 继承WebMvcConfigurerAdapter 方式 \n这样既可以拥有 大量的默认配置 也可以在一定程度上自定义配置\n##### 重写configureMessageConverters\n* 无法保证顺序 也不能清理其他的消息转换器 \n重写这个方法 可以添加自己编写的 messageConverter  到 默认的messageConverter列表中 \nmessageConverter如何编写 直接参考 AbstractHttpMessageConverter的下层实现即可 \n这里使用MappingJackson2HttpMessageConverter作为演示\n```\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.ming.core.utils.SpringBeanManagerUtils;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.http.converter.HttpMessageConverter;\nimport org.springframework.http.converter.json.Jackson2ObjectMapperBuilder;\nimport org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;\nimport org.springframework.web.servlet.config.annotation.InterceptorRegistry;\nimport org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry;\nimport org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter;\n\nimport java.text.DateFormat;\nimport java.text.SimpleDateFormat;\nimport java.util.List;\n\n/**\n * 拦截器配置\n *\n * @author ming\n * @date 2017-08-28 11点\n */\n@Configuration\npublic class WebMvcConfig extends WebMvcConfigurerAdapter {\n    @Override\n    public void configureMessageConverters(List<HttpMessageConverter<?>> converters) {\n        ObjectMapper mapper = SpringBeanManagerUtils.getBeanByType(Jackson2ObjectMapperBuilder.class).build();\n        // ObjectMapper为了保障线程安全性，里面的配置类都是一个不可变的对象\n        // 所以这里的setDateFormat的内部原理其实是创建了一个新的配置类\n        DateFormat dateFormat = mapper.getDateFormat();\n        mapper.setDateFormat(new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\"));\n        MappingJackson2HttpMessageConverter mappingJsonHttpMessageConverter = new MappingJackson2HttpMessageConverter(\n                mapper);\n        converters.add(mappingJsonHttpMessageConverter);\n    }\n}\n```\n##### 重写extendMessageConverters\n* 可以操控完整的 messageConverter列表 增加、删除等等\n重写这个方法 方便控制到整个messageConverter 列表的顺序内容  \n这里示例删除所有的 messageConverter列表   \n增加一个简单的简单的FastJsonHttpMessageConverter作为mvc中 唯一一个转换器  \n保证messageConverter顺序 调整list的先后顺序 即可\n```\n\nimport com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.ming.core.utils.SpringBeanManagerUtils;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.http.converter.HttpMessageConverter;\nimport org.springframework.http.converter.json.Jackson2ObjectMapperBuilder;\nimport org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;\nimport org.springframework.web.servlet.config.annotation.InterceptorRegistry;\nimport org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry;\nimport org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter;\n\nimport java.text.DateFormat;\nimport java.text.SimpleDateFormat;\nimport java.util.List;\n\n/**\n * 拦截器配置\n *\n * @author ming\n * @date 2017-08-28 11点\n */\n@Configuration\npublic class WebMvcConfig extends WebMvcConfigurerAdapter {\n    @Override\n    public void extendMessageConverters(List<HttpMessageConverter<?>> converters) {\n        FastJsonHttpMessageConverter fastJsonHttpMessageConverter = new FastJsonHttpMessageConverter();\n        converters.add(fastJsonHttpMessageConverter);        \n    }\n```\n#### messageConverter 详细规则\nspring boot 中 所有的消息转换器 需要继承 AbstractHttpMessageConverter<T>抽象类 \n根据其中的方法进行修改 达到转换效果 \n* canRead()\n判断转换器能不能将请求内容转换成java对象\n* canWrite()\n判断转换器能不能将java对象转换成返回内容\n* read()\n读取请求内容转换成java对象\n* write()\n将返回的java对象写入到返回内容\n* getSupportedMediaTypes()\n获取这个转换器支持的MediaType类型\n\n\n\n#### 总结  \n控制spring mvc 对于http请求的内容和响应的内容的转换 直接通过重写 messageConverter即可  \n如果只是为了增加特殊情况的处理可以直接重写configureMessageConverters在原有的messageConverter 列表中添加一个接口   \n如果需要完整控制 messageConverter的数量和顺序 那么需要重写extendMessageConverters 来达到控制messageConverter的数量和顺序  \n\nfeign会从spring mvc的messageConverter的列表中获取对应的messageConverter列表   \n那么这样来说 其实可以通过严格控制spring mvc的messageConverter列表来达到控制feign的messageConverter列表  \n\n###### MediaType解释\n```\nspring 中对于http contentType的一些枚举类型 类的全限定名org.springframework.http.MediaType\n```","slug":"综合应用/springboot-mvc消息转换器","published":1,"updated":"2018-08-17T08:10:03.923Z","layout":"post","photos":[],"link":"","_id":"cjo9uatzt006tmwczqly961gb","content":"<h4 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h4><p>最近项目中通过feign调用内部服务和其他系统服务猛然增多<br>在messageConverter这一环节出现n多问题<br>什么xml解析gg<br>什么json 时间格式解析gg<br>什么乱七八糟的骚格式的数据解析gg<br>导致最近一直在作在messageConverter这一块的处理<br>但是feign 的在messageConverter 有一部分是从spring mvc 的在messageConverter列表中获取的<br>所以说总的来说 是要处理spring mvc中在messageConverter的维护</p><h4 id=\"spring-boot消息转换器配置\"><a href=\"#spring-boot消息转换器配置\" class=\"headerlink\" title=\"spring boot消息转换器配置\"></a>spring boot消息转换器配置</h4><p>spring boot 的mvc配置 优先使用 继承WebMvcConfigurerAdapter 方式<br>这样既可以拥有 大量的默认配置 也可以在一定程度上自定义配置</p><h5 id=\"重写configureMessageConverters\"><a href=\"#重写configureMessageConverters\" class=\"headerlink\" title=\"重写configureMessageConverters\"></a>重写configureMessageConverters</h5><ul><li>无法保证顺序 也不能清理其他的消息转换器<br>重写这个方法 可以添加自己编写的 messageConverter 到 默认的messageConverter列表中<br>messageConverter如何编写 直接参考 AbstractHttpMessageConverter的下层实现即可<br>这里使用MappingJackson2HttpMessageConverter作为演示<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class=\"line\">import com.ming.core.utils.SpringBeanManagerUtils;</span><br><span class=\"line\">import org.springframework.context.annotation.Configuration;</span><br><span class=\"line\">import org.springframework.http.converter.HttpMessageConverter;</span><br><span class=\"line\">import org.springframework.http.converter.json.Jackson2ObjectMapperBuilder;</span><br><span class=\"line\">import org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;</span><br><span class=\"line\">import org.springframework.web.servlet.config.annotation.InterceptorRegistry;</span><br><span class=\"line\">import org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry;</span><br><span class=\"line\">import org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.text.DateFormat;</span><br><span class=\"line\">import java.text.SimpleDateFormat;</span><br><span class=\"line\">import java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 拦截器配置</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @author ming</span><br><span class=\"line\"> * @date 2017-08-28 11点</span><br><span class=\"line\"> */</span><br><span class=\"line\">@Configuration</span><br><span class=\"line\">public class WebMvcConfig extends WebMvcConfigurerAdapter &#123;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void configureMessageConverters(List&lt;HttpMessageConverter&lt;?&gt;&gt; converters) &#123;</span><br><span class=\"line\">        ObjectMapper mapper = SpringBeanManagerUtils.getBeanByType(Jackson2ObjectMapperBuilder.class).build();</span><br><span class=\"line\">        // ObjectMapper为了保障线程安全性，里面的配置类都是一个不可变的对象</span><br><span class=\"line\">        // 所以这里的setDateFormat的内部原理其实是创建了一个新的配置类</span><br><span class=\"line\">        DateFormat dateFormat = mapper.getDateFormat();</span><br><span class=\"line\">        mapper.setDateFormat(new SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;));</span><br><span class=\"line\">        MappingJackson2HttpMessageConverter mappingJsonHttpMessageConverter = new MappingJackson2HttpMessageConverter(</span><br><span class=\"line\">                mapper);</span><br><span class=\"line\">        converters.add(mappingJsonHttpMessageConverter);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h5 id=\"重写extendMessageConverters\"><a href=\"#重写extendMessageConverters\" class=\"headerlink\" title=\"重写extendMessageConverters\"></a>重写extendMessageConverters</h5><ul>\n<li>可以操控完整的 messageConverter列表 增加、删除等等<br>重写这个方法 方便控制到整个messageConverter 列表的顺序内容<br>这里示例删除所有的 messageConverter列表<br>增加一个简单的简单的FastJsonHttpMessageConverter作为mvc中 唯一一个转换器<br>保证messageConverter顺序 调整list的先后顺序 即可<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">import com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter;</span><br><span class=\"line\">import com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class=\"line\">import com.ming.core.utils.SpringBeanManagerUtils;</span><br><span class=\"line\">import org.springframework.context.annotation.Configuration;</span><br><span class=\"line\">import org.springframework.http.converter.HttpMessageConverter;</span><br><span class=\"line\">import org.springframework.http.converter.json.Jackson2ObjectMapperBuilder;</span><br><span class=\"line\">import org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;</span><br><span class=\"line\">import org.springframework.web.servlet.config.annotation.InterceptorRegistry;</span><br><span class=\"line\">import org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry;</span><br><span class=\"line\">import org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.text.DateFormat;</span><br><span class=\"line\">import java.text.SimpleDateFormat;</span><br><span class=\"line\">import java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 拦截器配置</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @author ming</span><br><span class=\"line\"> * @date 2017-08-28 11点</span><br><span class=\"line\"> */</span><br><span class=\"line\">@Configuration</span><br><span class=\"line\">public class WebMvcConfig extends WebMvcConfigurerAdapter &#123;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void extendMessageConverters(List&lt;HttpMessageConverter&lt;?&gt;&gt; converters) &#123;</span><br><span class=\"line\">        FastJsonHttpMessageConverter fastJsonHttpMessageConverter = new FastJsonHttpMessageConverter();</span><br><span class=\"line\">        converters.add(fastJsonHttpMessageConverter);        </span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"messageConverter-详细规则\"><a href=\"#messageConverter-详细规则\" class=\"headerlink\" title=\"messageConverter 详细规则\"></a>messageConverter 详细规则</h4><p>spring boot 中 所有的消息转换器 需要继承 AbstractHttpMessageConverter<t>抽象类<br>根据其中的方法进行修改 达到转换效果 </t></p>\n<ul>\n<li>canRead()<br>判断转换器能不能将请求内容转换成java对象</li>\n<li>canWrite()<br>判断转换器能不能将java对象转换成返回内容</li>\n<li>read()<br>读取请求内容转换成java对象</li>\n<li>write()<br>将返回的java对象写入到返回内容</li>\n<li>getSupportedMediaTypes()<br>获取这个转换器支持的MediaType类型</li>\n</ul>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><p>控制spring mvc 对于http请求的内容和响应的内容的转换 直接通过重写 messageConverter即可<br>如果只是为了增加特殊情况的处理可以直接重写configureMessageConverters在原有的messageConverter 列表中添加一个接口<br>如果需要完整控制 messageConverter的数量和顺序 那么需要重写extendMessageConverters 来达到控制messageConverter的数量和顺序  </p>\n<p>feign会从spring mvc的messageConverter的列表中获取对应的messageConverter列表<br>那么这样来说 其实可以通过严格控制spring mvc的messageConverter列表来达到控制feign的messageConverter列表  </p>\n<h6 id=\"MediaType解释\"><a href=\"#MediaType解释\" class=\"headerlink\" title=\"MediaType解释\"></a>MediaType解释</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">spring 中对于http contentType的一些枚举类型 类的全限定名org.springframework.http.MediaType</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h4 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h4><p>最近项目中通过feign调用内部服务和其他系统服务猛然增多<br>在messageConverter这一环节出现n多问题<br>什么xml解析gg<br>什么json 时间格式解析gg<br>什么乱七八糟的骚格式的数据解析gg<br>导致最近一直在作在messageConverter这一块的处理<br>但是feign 的在messageConverter 有一部分是从spring mvc 的在messageConverter列表中获取的<br>所以说总的来说 是要处理spring mvc中在messageConverter的维护</p><h4 id=\"spring-boot消息转换器配置\"><a href=\"#spring-boot消息转换器配置\" class=\"headerlink\" title=\"spring boot消息转换器配置\"></a>spring boot消息转换器配置</h4><p>spring boot 的mvc配置 优先使用 继承WebMvcConfigurerAdapter 方式<br>这样既可以拥有 大量的默认配置 也可以在一定程度上自定义配置</p><h5 id=\"重写configureMessageConverters\"><a href=\"#重写configureMessageConverters\" class=\"headerlink\" title=\"重写configureMessageConverters\"></a>重写configureMessageConverters</h5><ul><li>无法保证顺序 也不能清理其他的消息转换器<br>重写这个方法 可以添加自己编写的 messageConverter 到 默认的messageConverter列表中<br>messageConverter如何编写 直接参考 AbstractHttpMessageConverter的下层实现即可<br>这里使用MappingJackson2HttpMessageConverter作为演示<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class=\"line\">import com.ming.core.utils.SpringBeanManagerUtils;</span><br><span class=\"line\">import org.springframework.context.annotation.Configuration;</span><br><span class=\"line\">import org.springframework.http.converter.HttpMessageConverter;</span><br><span class=\"line\">import org.springframework.http.converter.json.Jackson2ObjectMapperBuilder;</span><br><span class=\"line\">import org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;</span><br><span class=\"line\">import org.springframework.web.servlet.config.annotation.InterceptorRegistry;</span><br><span class=\"line\">import org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry;</span><br><span class=\"line\">import org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.text.DateFormat;</span><br><span class=\"line\">import java.text.SimpleDateFormat;</span><br><span class=\"line\">import java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 拦截器配置</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @author ming</span><br><span class=\"line\"> * @date 2017-08-28 11点</span><br><span class=\"line\"> */</span><br><span class=\"line\">@Configuration</span><br><span class=\"line\">public class WebMvcConfig extends WebMvcConfigurerAdapter &#123;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void configureMessageConverters(List&lt;HttpMessageConverter&lt;?&gt;&gt; converters) &#123;</span><br><span class=\"line\">        ObjectMapper mapper = SpringBeanManagerUtils.getBeanByType(Jackson2ObjectMapperBuilder.class).build();</span><br><span class=\"line\">        // ObjectMapper为了保障线程安全性，里面的配置类都是一个不可变的对象</span><br><span class=\"line\">        // 所以这里的setDateFormat的内部原理其实是创建了一个新的配置类</span><br><span class=\"line\">        DateFormat dateFormat = mapper.getDateFormat();</span><br><span class=\"line\">        mapper.setDateFormat(new SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;));</span><br><span class=\"line\">        MappingJackson2HttpMessageConverter mappingJsonHttpMessageConverter = new MappingJackson2HttpMessageConverter(</span><br><span class=\"line\">                mapper);</span><br><span class=\"line\">        converters.add(mappingJsonHttpMessageConverter);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h5 id=\"重写extendMessageConverters\"><a href=\"#重写extendMessageConverters\" class=\"headerlink\" title=\"重写extendMessageConverters\"></a>重写extendMessageConverters</h5><ul>\n<li>可以操控完整的 messageConverter列表 增加、删除等等<br>重写这个方法 方便控制到整个messageConverter 列表的顺序内容<br>这里示例删除所有的 messageConverter列表<br>增加一个简单的简单的FastJsonHttpMessageConverter作为mvc中 唯一一个转换器<br>保证messageConverter顺序 调整list的先后顺序 即可<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">import com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter;</span><br><span class=\"line\">import com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class=\"line\">import com.ming.core.utils.SpringBeanManagerUtils;</span><br><span class=\"line\">import org.springframework.context.annotation.Configuration;</span><br><span class=\"line\">import org.springframework.http.converter.HttpMessageConverter;</span><br><span class=\"line\">import org.springframework.http.converter.json.Jackson2ObjectMapperBuilder;</span><br><span class=\"line\">import org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;</span><br><span class=\"line\">import org.springframework.web.servlet.config.annotation.InterceptorRegistry;</span><br><span class=\"line\">import org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry;</span><br><span class=\"line\">import org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.text.DateFormat;</span><br><span class=\"line\">import java.text.SimpleDateFormat;</span><br><span class=\"line\">import java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 拦截器配置</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @author ming</span><br><span class=\"line\"> * @date 2017-08-28 11点</span><br><span class=\"line\"> */</span><br><span class=\"line\">@Configuration</span><br><span class=\"line\">public class WebMvcConfig extends WebMvcConfigurerAdapter &#123;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void extendMessageConverters(List&lt;HttpMessageConverter&lt;?&gt;&gt; converters) &#123;</span><br><span class=\"line\">        FastJsonHttpMessageConverter fastJsonHttpMessageConverter = new FastJsonHttpMessageConverter();</span><br><span class=\"line\">        converters.add(fastJsonHttpMessageConverter);        </span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"messageConverter-详细规则\"><a href=\"#messageConverter-详细规则\" class=\"headerlink\" title=\"messageConverter 详细规则\"></a>messageConverter 详细规则</h4><p>spring boot 中 所有的消息转换器 需要继承 AbstractHttpMessageConverter<t>抽象类<br>根据其中的方法进行修改 达到转换效果 </t></p>\n<ul>\n<li>canRead()<br>判断转换器能不能将请求内容转换成java对象</li>\n<li>canWrite()<br>判断转换器能不能将java对象转换成返回内容</li>\n<li>read()<br>读取请求内容转换成java对象</li>\n<li>write()<br>将返回的java对象写入到返回内容</li>\n<li>getSupportedMediaTypes()<br>获取这个转换器支持的MediaType类型</li>\n</ul>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><p>控制spring mvc 对于http请求的内容和响应的内容的转换 直接通过重写 messageConverter即可<br>如果只是为了增加特殊情况的处理可以直接重写configureMessageConverters在原有的messageConverter 列表中添加一个接口<br>如果需要完整控制 messageConverter的数量和顺序 那么需要重写extendMessageConverters 来达到控制messageConverter的数量和顺序  </p>\n<p>feign会从spring mvc的messageConverter的列表中获取对应的messageConverter列表<br>那么这样来说 其实可以通过严格控制spring mvc的messageConverter列表来达到控制feign的messageConverter列表  </p>\n<h6 id=\"MediaType解释\"><a href=\"#MediaType解释\" class=\"headerlink\" title=\"MediaType解释\"></a>MediaType解释</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">spring 中对于http contentType的一些枚举类型 类的全限定名org.springframework.http.MediaType</span><br></pre></td></tr></table></figure>"},{"title":"windows 安装虚拟化工具蓝屏","abbrlink":"5dd0b5a6","date":"2017-11-10T16:00:00.000Z","_content":"win10 安装vbox的时候蓝屏 经过google 发现是 Hyper-V 和 vbox 冲突  坑爹的微软 \n关闭Hyper-V  \n搜索 windows功能  找到Hyper-v 关闭  重启 即可 \n","source":"_posts/综合应用/win10-使用vbox安装虚拟机蓝屏解决版本.md","raw":"---\ntitle: windows 安装虚拟化工具蓝屏\ncategories: 坑\ntags:\n  - windows\n  - vbox\nabbrlink: 5dd0b5a6\ndate: 2017-11-11 00:00:00\n---\nwin10 安装vbox的时候蓝屏 经过google 发现是 Hyper-V 和 vbox 冲突  坑爹的微软 \n关闭Hyper-V  \n搜索 windows功能  找到Hyper-v 关闭  重启 即可 \n","slug":"综合应用/win10-使用vbox安装虚拟机蓝屏解决版本","published":1,"updated":"2018-08-17T08:10:03.923Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjo9uatzu006xmwcziz13ug9n","content":"<p>win10 安装vbox的时候蓝屏 经过google 发现是 Hyper-V 和 vbox 冲突 坑爹的微软<br>关闭Hyper-V<br>搜索 windows功能 找到Hyper-v 关闭 重启 即可</p>","site":{"data":{}},"excerpt":"","more":"<p>win10 安装vbox的时候蓝屏 经过google 发现是 Hyper-V 和 vbox 冲突 坑爹的微软<br>关闭Hyper-V<br>搜索 windows功能 找到Hyper-v 关闭 重启 即可</p>"},{"title":"yml格式笔记","abbrlink":"958a34fe","date":"2017-11-10T16:00:00.000Z","_content":"####yaml 在学习docker-compose工具中需要用到yaml来做配置  \n####yaml语法清晰简洁 适合写配置 但是不适合做数据传输\n####在比较新的技术中 大量应用了yaml去配置 如spring cloud   docker-compose等\n######语法规则\n* 大小写敏感  \n* 缩进表示层级关系  \n* 缩进不允许tab 只允许空格  \n* 空格数量不重要。相同层级左边对齐即可  \n* #表示注释\n######支持的数据结构\n* 对象 \n```\nname: xu\n```\n* 数组\n```\n name: \n  - xu\n  - xu1\n```\n* 纯量\n```\n数字\nnumber: 123\nboolean \nflag: true or false\nnull值\nparent:~\n !!强转类型\n \n字符串\n1:默认不使用引号   str: xu\n2:包含特殊字符串需要引号 str: 'xu'\n3:双引号不对特殊字符转义 s1: 'xu'   s2: \"xu\"\n4:字符串可以写成多行 必须缩进一个空格 换行符转为空格  \nstr: 多行\n 字符\n 串\n5:多行字符串 可以用| 保留换行符 或者> 折叠\n6: + 保留文字末尾换行 -删除文字末尾换行\n```\n######引用\n允许用&设定锚点 用*引用 用<<合并到当前数据\n\n######学习博客地址:http://www.ruanyifeng.com/blog/2016/07/yaml.html?f=tt\n","source":"_posts/综合应用/yaml语法笔记.md","raw":"---\ntitle: yml格式笔记\ncategories: 笔记\ntags:\n  - yml、yaml\nabbrlink: 958a34fe\ndate: 2017-11-11 00:00:00\n---\n####yaml 在学习docker-compose工具中需要用到yaml来做配置  \n####yaml语法清晰简洁 适合写配置 但是不适合做数据传输\n####在比较新的技术中 大量应用了yaml去配置 如spring cloud   docker-compose等\n######语法规则\n* 大小写敏感  \n* 缩进表示层级关系  \n* 缩进不允许tab 只允许空格  \n* 空格数量不重要。相同层级左边对齐即可  \n* #表示注释\n######支持的数据结构\n* 对象 \n```\nname: xu\n```\n* 数组\n```\n name: \n  - xu\n  - xu1\n```\n* 纯量\n```\n数字\nnumber: 123\nboolean \nflag: true or false\nnull值\nparent:~\n !!强转类型\n \n字符串\n1:默认不使用引号   str: xu\n2:包含特殊字符串需要引号 str: 'xu'\n3:双引号不对特殊字符转义 s1: 'xu'   s2: \"xu\"\n4:字符串可以写成多行 必须缩进一个空格 换行符转为空格  \nstr: 多行\n 字符\n 串\n5:多行字符串 可以用| 保留换行符 或者> 折叠\n6: + 保留文字末尾换行 -删除文字末尾换行\n```\n######引用\n允许用&设定锚点 用*引用 用<<合并到当前数据\n\n######学习博客地址:http://www.ruanyifeng.com/blog/2016/07/yaml.html?f=tt\n","slug":"综合应用/yaml语法笔记","published":1,"updated":"2018-08-17T08:10:03.923Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjo9uatzw0071mwczt5pinpgl","content":"<p>####yaml 在学习docker-compose工具中需要用到yaml来做配置</p><p>####yaml语法清晰简洁 适合写配置 但是不适合做数据传输</p><p>####在比较新的技术中 大量应用了yaml去配置 如spring cloud docker-compose等</p><p>######语法规则</p><ul><li>大小写敏感</li><li>缩进表示层级关系</li><li>缩进不允许tab 只允许空格</li><li>空格数量不重要。相同层级左边对齐即可</li><li>#表示注释<br>######支持的数据结构</li><li><p>对象</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name: xu</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>数组</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name: </span><br><span class=\"line\"> - xu</span><br><span class=\"line\"> - xu1</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>纯量</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">数字</span><br><span class=\"line\">number: 123</span><br><span class=\"line\">boolean </span><br><span class=\"line\">flag: true or false</span><br><span class=\"line\">null值</span><br><span class=\"line\">parent:~</span><br><span class=\"line\"> !!强转类型</span><br><span class=\"line\"> </span><br><span class=\"line\">字符串</span><br><span class=\"line\">1:默认不使用引号   str: xu</span><br><span class=\"line\">2:包含特殊字符串需要引号 str: &apos;xu&apos;</span><br><span class=\"line\">3:双引号不对特殊字符转义 s1: &apos;xu&apos;   s2: &quot;xu&quot;</span><br><span class=\"line\">4:字符串可以写成多行 必须缩进一个空格 换行符转为空格  </span><br><span class=\"line\">str: 多行</span><br><span class=\"line\"> 字符</span><br><span class=\"line\"> 串</span><br><span class=\"line\">5:多行字符串 可以用| 保留换行符 或者&gt; 折叠</span><br><span class=\"line\">6: + 保留文字末尾换行 -删除文字末尾换行</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>######引用<br>允许用&amp;设定锚点 用*引用 用&lt;&lt;合并到当前数据</p>\n<p>######学习博客地址:<a href=\"http://www.ruanyifeng.com/blog/2016/07/yaml.html?f=tt\" target=\"_blank\" rel=\"noopener\">http://www.ruanyifeng.com/blog/2016/07/yaml.html?f=tt</a></p>","site":{"data":{}},"excerpt":"","more":"<p>####yaml 在学习docker-compose工具中需要用到yaml来做配置</p><p>####yaml语法清晰简洁 适合写配置 但是不适合做数据传输</p><p>####在比较新的技术中 大量应用了yaml去配置 如spring cloud docker-compose等</p><p>######语法规则</p><ul><li>大小写敏感</li><li>缩进表示层级关系</li><li>缩进不允许tab 只允许空格</li><li>空格数量不重要。相同层级左边对齐即可</li><li>#表示注释<br>######支持的数据结构</li><li><p>对象</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name: xu</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>数组</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name: </span><br><span class=\"line\"> - xu</span><br><span class=\"line\"> - xu1</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>纯量</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">数字</span><br><span class=\"line\">number: 123</span><br><span class=\"line\">boolean </span><br><span class=\"line\">flag: true or false</span><br><span class=\"line\">null值</span><br><span class=\"line\">parent:~</span><br><span class=\"line\"> !!强转类型</span><br><span class=\"line\"> </span><br><span class=\"line\">字符串</span><br><span class=\"line\">1:默认不使用引号   str: xu</span><br><span class=\"line\">2:包含特殊字符串需要引号 str: &apos;xu&apos;</span><br><span class=\"line\">3:双引号不对特殊字符转义 s1: &apos;xu&apos;   s2: &quot;xu&quot;</span><br><span class=\"line\">4:字符串可以写成多行 必须缩进一个空格 换行符转为空格  </span><br><span class=\"line\">str: 多行</span><br><span class=\"line\"> 字符</span><br><span class=\"line\"> 串</span><br><span class=\"line\">5:多行字符串 可以用| 保留换行符 或者&gt; 折叠</span><br><span class=\"line\">6: + 保留文字末尾换行 -删除文字末尾换行</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>######引用<br>允许用&amp;设定锚点 用*引用 用&lt;&lt;合并到当前数据</p>\n<p>######学习博客地址:<a href=\"http://www.ruanyifeng.com/blog/2016/07/yaml.html?f=tt\" target=\"_blank\" rel=\"noopener\">http://www.ruanyifeng.com/blog/2016/07/yaml.html?f=tt</a></p>"},{"title":"乱码处理笔记","abbrlink":"54c825bb","date":"2017-11-10T16:00:00.000Z","_content":"#编码问题\n##1:各种编码介绍\n###1.1:ascll码\n```\n    共128个,用一个字节的低七位表示，\n    0～31是控制字符换行、回车、删除相关的字符\n    32～126是输出字符,就是可以同过键盘输入并且输出的\n```\n###1.2:iso-8859-1\n```\n    共256个字符.是基于ascll来扩展的的。\n    还是单字节编码\n```\n###1.3:gb2312(信息技术中文编码集)\n```\n    共682个符号、6763个汉字,\n    编码范围是A1～F7,\n    A1~A9 共682个，是符号区,\n    B0~F7 共6763个，是汉字区。\n```\n###1.4:gbk(汉字内码扩展规范)\n```\n        扩展gb2312,编码范围是8140～FEFE(去除XX7F)，\n        共23940个码位，表示21003个汉字,\n        完全兼容gb2312.\n        在系统中应用较为广泛\n```\n###1.5:gb18030\n```\n    是中国的强制标准,\n    可能是单字节、双字节、四字节.\n    完美兼容gb2312\n```\n###1.6:utf-16(统一码)\n```\n    iso创建的超语言字典,\n    世界上所有语言可以通过字典来进行翻译。\n    utf-16 采用定长表示方法,无论什么字符读用两个字节表示\n    一个字节8bit,所以叫utf-16 \n    java内存就是用utf-16来作为内存的字符存储格式\n    缺点：任何字符都是两个字节，增大存储成本和传输成本\n```\n###1.7:utf-8(最常用编码)\n```\n    utf-8采用的是变长技术,避免了utf-16缺点,每个编码区域有不同的字码长度。\n不同的字符可以由1～6字节组成。\n    编码规则:\n        1):如果是一个字节,最高位(也就是第8个bit)为0,表示这个字符就是ascll字符\n        2):如果是一个字节,开头是11连续的1的个数表示这个字符的字节数,例如1110xxxx就是三个字节的utf-8的首字节\n        3):如果是一个字节,以10开始，这个就不是首字节,需要向前查找首字节\n```\n###1.8总结\n```\n    平常使用也就是gb2312、gbk、utf-8常见\n    为了尽量避免乱码。优先选择utf-8\n    如果不在乎磁盘可以选择utf-16毕竟解析比utf-8简单\n    如果是网络IO的话 还是选择utf-8比较好 网络IO 字节流完整性容易遭到破坏 导致乱码\n```\n##2:javaweb常见编码问题\n###2.1: http请求前后的乱码\n```\n  一般一次http请求中涉及到的编解码 存在于 request编码、request解码、response编码、response解码。\n这样的可以通过设定http请求头、响应头、服务器编解码设置、客户端编解码设置来处理\n例如：tomcat配置文件server.xml\n    <Connector port=\"8090\" protocol=\"HTTP/1.1\"   \n                 maxThreads=\"150\" connectionTimeout=\"20000\"   \n                 redirectPort=\"8443\" URIEncoding=\"utf-8\"  /> \n    http中请求报头或者响应报头设置charset=utf-8\n    客户端也就是浏览器一般是默认utf-8编码 也可以自己去指定编码\n```\n###2.2: 数据库和项目之间出现乱码\n```\n     主要就是项目中编解码和数据库的编解码、编码设置\n     一般直接设置链接参数 ：jdbc:mysql://localhost:3306/mydb?characterEncoding=utf8\n     一般项目直接设置utf-8 数据库也设定utf-8\n```\n###2.3: 总结\n```\n    一般出现乱码肯定是有io的地方要么是各种链接之间 要么是系统内部出现来不同的编码\n    例如http请求 先确定乱码产生地点是在客户端还是服务端 是在那个环节产生的 \n                一般进行一些简单的抓包分析看看旧大概知道是那个地发出现乱码了\n                检查报头 和客户端 服务端的解析编码集\n                \n    出现乱码先一步步的缩小范围找到出现乱码的节点 看是那个地发设置出了问题\n    然后找到是什么导致这个节点这个设置出现问题\n    如果是有网络IO的话  可以尝试抓包分析\n    如果是本地IO的话 就看看系统编码、项目编码、等设置\n    尽量避免使用框架、各种软件、系统的默认设置\n```\n###2.4:form表单提交数据乱码\n```\n有时候组合页面的时候和遇到类似ie这种变态浏览器的时候 会遭遇form表单乱码问题 其他地方都设置合适编码了\n这个时候在form中制定form表单的编码即可 \n<form accept-charset=\"utf-8\" onsubmit=\"document.charset='utf-8'\" >\n后面那个onsubmit是遇到ie这种变态浏览器需要加的 \n最后 可能是服务器uri编码集未设定 例如tomcat的server.xml中的设置\n```\n###笔记参考书籍：深入javaweb技术内幕\n","source":"_posts/综合应用/开发中乱码处理.md","raw":"---\ntitle: 乱码处理笔记\ncategories: 笔记\ntags:\n  - 乱码\nabbrlink: 54c825bb\ndate: 2017-11-11 00:00:00\n---\n#编码问题\n##1:各种编码介绍\n###1.1:ascll码\n```\n    共128个,用一个字节的低七位表示，\n    0～31是控制字符换行、回车、删除相关的字符\n    32～126是输出字符,就是可以同过键盘输入并且输出的\n```\n###1.2:iso-8859-1\n```\n    共256个字符.是基于ascll来扩展的的。\n    还是单字节编码\n```\n###1.3:gb2312(信息技术中文编码集)\n```\n    共682个符号、6763个汉字,\n    编码范围是A1～F7,\n    A1~A9 共682个，是符号区,\n    B0~F7 共6763个，是汉字区。\n```\n###1.4:gbk(汉字内码扩展规范)\n```\n        扩展gb2312,编码范围是8140～FEFE(去除XX7F)，\n        共23940个码位，表示21003个汉字,\n        完全兼容gb2312.\n        在系统中应用较为广泛\n```\n###1.5:gb18030\n```\n    是中国的强制标准,\n    可能是单字节、双字节、四字节.\n    完美兼容gb2312\n```\n###1.6:utf-16(统一码)\n```\n    iso创建的超语言字典,\n    世界上所有语言可以通过字典来进行翻译。\n    utf-16 采用定长表示方法,无论什么字符读用两个字节表示\n    一个字节8bit,所以叫utf-16 \n    java内存就是用utf-16来作为内存的字符存储格式\n    缺点：任何字符都是两个字节，增大存储成本和传输成本\n```\n###1.7:utf-8(最常用编码)\n```\n    utf-8采用的是变长技术,避免了utf-16缺点,每个编码区域有不同的字码长度。\n不同的字符可以由1～6字节组成。\n    编码规则:\n        1):如果是一个字节,最高位(也就是第8个bit)为0,表示这个字符就是ascll字符\n        2):如果是一个字节,开头是11连续的1的个数表示这个字符的字节数,例如1110xxxx就是三个字节的utf-8的首字节\n        3):如果是一个字节,以10开始，这个就不是首字节,需要向前查找首字节\n```\n###1.8总结\n```\n    平常使用也就是gb2312、gbk、utf-8常见\n    为了尽量避免乱码。优先选择utf-8\n    如果不在乎磁盘可以选择utf-16毕竟解析比utf-8简单\n    如果是网络IO的话 还是选择utf-8比较好 网络IO 字节流完整性容易遭到破坏 导致乱码\n```\n##2:javaweb常见编码问题\n###2.1: http请求前后的乱码\n```\n  一般一次http请求中涉及到的编解码 存在于 request编码、request解码、response编码、response解码。\n这样的可以通过设定http请求头、响应头、服务器编解码设置、客户端编解码设置来处理\n例如：tomcat配置文件server.xml\n    <Connector port=\"8090\" protocol=\"HTTP/1.1\"   \n                 maxThreads=\"150\" connectionTimeout=\"20000\"   \n                 redirectPort=\"8443\" URIEncoding=\"utf-8\"  /> \n    http中请求报头或者响应报头设置charset=utf-8\n    客户端也就是浏览器一般是默认utf-8编码 也可以自己去指定编码\n```\n###2.2: 数据库和项目之间出现乱码\n```\n     主要就是项目中编解码和数据库的编解码、编码设置\n     一般直接设置链接参数 ：jdbc:mysql://localhost:3306/mydb?characterEncoding=utf8\n     一般项目直接设置utf-8 数据库也设定utf-8\n```\n###2.3: 总结\n```\n    一般出现乱码肯定是有io的地方要么是各种链接之间 要么是系统内部出现来不同的编码\n    例如http请求 先确定乱码产生地点是在客户端还是服务端 是在那个环节产生的 \n                一般进行一些简单的抓包分析看看旧大概知道是那个地发出现乱码了\n                检查报头 和客户端 服务端的解析编码集\n                \n    出现乱码先一步步的缩小范围找到出现乱码的节点 看是那个地发设置出了问题\n    然后找到是什么导致这个节点这个设置出现问题\n    如果是有网络IO的话  可以尝试抓包分析\n    如果是本地IO的话 就看看系统编码、项目编码、等设置\n    尽量避免使用框架、各种软件、系统的默认设置\n```\n###2.4:form表单提交数据乱码\n```\n有时候组合页面的时候和遇到类似ie这种变态浏览器的时候 会遭遇form表单乱码问题 其他地方都设置合适编码了\n这个时候在form中制定form表单的编码即可 \n<form accept-charset=\"utf-8\" onsubmit=\"document.charset='utf-8'\" >\n后面那个onsubmit是遇到ie这种变态浏览器需要加的 \n最后 可能是服务器uri编码集未设定 例如tomcat的server.xml中的设置\n```\n###笔记参考书籍：深入javaweb技术内幕\n","slug":"综合应用/开发中乱码处理","published":1,"updated":"2018-08-17T08:10:03.923Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjo9uatzx0075mwcz51go8brt","content":"<p>#编码问题</p><p>##1:各种编码介绍</p><p>###1.1:ascll码<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">共128个,用一个字节的低七位表示，</span><br><span class=\"line\">0～31是控制字符换行、回车、删除相关的字符</span><br><span class=\"line\">32～126是输出字符,就是可以同过键盘输入并且输出的</span><br></pre></td></tr></table></figure><p></p>\n<p>###1.2:iso-8859-1<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">共256个字符.是基于ascll来扩展的的。</span><br><span class=\"line\">还是单字节编码</span><br></pre></td></tr></table></figure><p></p>\n<p>###1.3:gb2312(信息技术中文编码集)<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">共682个符号、6763个汉字,</span><br><span class=\"line\">编码范围是A1～F7,</span><br><span class=\"line\">A1~A9 共682个，是符号区,</span><br><span class=\"line\">B0~F7 共6763个，是汉字区。</span><br></pre></td></tr></table></figure><p></p>\n<p>###1.4:gbk(汉字内码扩展规范)<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">扩展gb2312,编码范围是8140～FEFE(去除XX7F)，</span><br><span class=\"line\">共23940个码位，表示21003个汉字,</span><br><span class=\"line\">完全兼容gb2312.</span><br><span class=\"line\">在系统中应用较为广泛</span><br></pre></td></tr></table></figure><p></p>\n<p>###1.5:gb18030<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">是中国的强制标准,</span><br><span class=\"line\">可能是单字节、双字节、四字节.</span><br><span class=\"line\">完美兼容gb2312</span><br></pre></td></tr></table></figure><p></p>\n<p>###1.6:utf-16(统一码)<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">iso创建的超语言字典,</span><br><span class=\"line\">世界上所有语言可以通过字典来进行翻译。</span><br><span class=\"line\">utf-16 采用定长表示方法,无论什么字符读用两个字节表示</span><br><span class=\"line\">一个字节8bit,所以叫utf-16 </span><br><span class=\"line\">java内存就是用utf-16来作为内存的字符存储格式</span><br><span class=\"line\">缺点：任何字符都是两个字节，增大存储成本和传输成本</span><br></pre></td></tr></table></figure><p></p>\n<p>###1.7:utf-8(最常用编码)<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    utf-8采用的是变长技术,避免了utf-16缺点,每个编码区域有不同的字码长度。</span><br><span class=\"line\">不同的字符可以由1～6字节组成。</span><br><span class=\"line\">    编码规则:</span><br><span class=\"line\">        1):如果是一个字节,最高位(也就是第8个bit)为0,表示这个字符就是ascll字符</span><br><span class=\"line\">        2):如果是一个字节,开头是11连续的1的个数表示这个字符的字节数,例如1110xxxx就是三个字节的utf-8的首字节</span><br><span class=\"line\">        3):如果是一个字节,以10开始，这个就不是首字节,需要向前查找首字节</span><br></pre></td></tr></table></figure><p></p>\n<p>###1.8总结<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">平常使用也就是gb2312、gbk、utf-8常见</span><br><span class=\"line\">为了尽量避免乱码。优先选择utf-8</span><br><span class=\"line\">如果不在乎磁盘可以选择utf-16毕竟解析比utf-8简单</span><br><span class=\"line\">如果是网络IO的话 还是选择utf-8比较好 网络IO 字节流完整性容易遭到破坏 导致乱码</span><br></pre></td></tr></table></figure><p></p>\n<p>##2:javaweb常见编码问题</p>\n<p>###2.1: http请求前后的乱码<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  一般一次http请求中涉及到的编解码 存在于 request编码、request解码、response编码、response解码。</span><br><span class=\"line\">这样的可以通过设定http请求头、响应头、服务器编解码设置、客户端编解码设置来处理</span><br><span class=\"line\">例如：tomcat配置文件server.xml</span><br><span class=\"line\">    &lt;Connector port=&quot;8090&quot; protocol=&quot;HTTP/1.1&quot;   </span><br><span class=\"line\">                 maxThreads=&quot;150&quot; connectionTimeout=&quot;20000&quot;   </span><br><span class=\"line\">                 redirectPort=&quot;8443&quot; URIEncoding=&quot;utf-8&quot;  /&gt; </span><br><span class=\"line\">    http中请求报头或者响应报头设置charset=utf-8</span><br><span class=\"line\">    客户端也就是浏览器一般是默认utf-8编码 也可以自己去指定编码</span><br></pre></td></tr></table></figure><p></p>\n<p>###2.2: 数据库和项目之间出现乱码<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">主要就是项目中编解码和数据库的编解码、编码设置</span><br><span class=\"line\">一般直接设置链接参数 ：jdbc:mysql://localhost:3306/mydb?characterEncoding=utf8</span><br><span class=\"line\">一般项目直接设置utf-8 数据库也设定utf-8</span><br></pre></td></tr></table></figure><p></p>\n<p>###2.3: 总结<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">一般出现乱码肯定是有io的地方要么是各种链接之间 要么是系统内部出现来不同的编码</span><br><span class=\"line\">例如http请求 先确定乱码产生地点是在客户端还是服务端 是在那个环节产生的 </span><br><span class=\"line\">            一般进行一些简单的抓包分析看看旧大概知道是那个地发出现乱码了</span><br><span class=\"line\">            检查报头 和客户端 服务端的解析编码集</span><br><span class=\"line\">            </span><br><span class=\"line\">出现乱码先一步步的缩小范围找到出现乱码的节点 看是那个地发设置出了问题</span><br><span class=\"line\">然后找到是什么导致这个节点这个设置出现问题</span><br><span class=\"line\">如果是有网络IO的话  可以尝试抓包分析</span><br><span class=\"line\">如果是本地IO的话 就看看系统编码、项目编码、等设置</span><br><span class=\"line\">尽量避免使用框架、各种软件、系统的默认设置</span><br></pre></td></tr></table></figure><p></p>\n<p>###2.4:form表单提交数据乱码<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">有时候组合页面的时候和遇到类似ie这种变态浏览器的时候 会遭遇form表单乱码问题 其他地方都设置合适编码了</span><br><span class=\"line\">这个时候在form中制定form表单的编码即可 </span><br><span class=\"line\">&lt;form accept-charset=&quot;utf-8&quot; onsubmit=&quot;document.charset=&apos;utf-8&apos;&quot; &gt;</span><br><span class=\"line\">后面那个onsubmit是遇到ie这种变态浏览器需要加的 </span><br><span class=\"line\">最后 可能是服务器uri编码集未设定 例如tomcat的server.xml中的设置</span><br></pre></td></tr></table></figure><p></p>\n<p>###笔记参考书籍：深入javaweb技术内幕</p>","site":{"data":{}},"excerpt":"","more":"<p>#编码问题</p><p>##1:各种编码介绍</p><p>###1.1:ascll码<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">共128个,用一个字节的低七位表示，</span><br><span class=\"line\">0～31是控制字符换行、回车、删除相关的字符</span><br><span class=\"line\">32～126是输出字符,就是可以同过键盘输入并且输出的</span><br></pre></td></tr></table></figure><p></p>\n<p>###1.2:iso-8859-1<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">共256个字符.是基于ascll来扩展的的。</span><br><span class=\"line\">还是单字节编码</span><br></pre></td></tr></table></figure><p></p>\n<p>###1.3:gb2312(信息技术中文编码集)<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">共682个符号、6763个汉字,</span><br><span class=\"line\">编码范围是A1～F7,</span><br><span class=\"line\">A1~A9 共682个，是符号区,</span><br><span class=\"line\">B0~F7 共6763个，是汉字区。</span><br></pre></td></tr></table></figure><p></p>\n<p>###1.4:gbk(汉字内码扩展规范)<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">扩展gb2312,编码范围是8140～FEFE(去除XX7F)，</span><br><span class=\"line\">共23940个码位，表示21003个汉字,</span><br><span class=\"line\">完全兼容gb2312.</span><br><span class=\"line\">在系统中应用较为广泛</span><br></pre></td></tr></table></figure><p></p>\n<p>###1.5:gb18030<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">是中国的强制标准,</span><br><span class=\"line\">可能是单字节、双字节、四字节.</span><br><span class=\"line\">完美兼容gb2312</span><br></pre></td></tr></table></figure><p></p>\n<p>###1.6:utf-16(统一码)<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">iso创建的超语言字典,</span><br><span class=\"line\">世界上所有语言可以通过字典来进行翻译。</span><br><span class=\"line\">utf-16 采用定长表示方法,无论什么字符读用两个字节表示</span><br><span class=\"line\">一个字节8bit,所以叫utf-16 </span><br><span class=\"line\">java内存就是用utf-16来作为内存的字符存储格式</span><br><span class=\"line\">缺点：任何字符都是两个字节，增大存储成本和传输成本</span><br></pre></td></tr></table></figure><p></p>\n<p>###1.7:utf-8(最常用编码)<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    utf-8采用的是变长技术,避免了utf-16缺点,每个编码区域有不同的字码长度。</span><br><span class=\"line\">不同的字符可以由1～6字节组成。</span><br><span class=\"line\">    编码规则:</span><br><span class=\"line\">        1):如果是一个字节,最高位(也就是第8个bit)为0,表示这个字符就是ascll字符</span><br><span class=\"line\">        2):如果是一个字节,开头是11连续的1的个数表示这个字符的字节数,例如1110xxxx就是三个字节的utf-8的首字节</span><br><span class=\"line\">        3):如果是一个字节,以10开始，这个就不是首字节,需要向前查找首字节</span><br></pre></td></tr></table></figure><p></p>\n<p>###1.8总结<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">平常使用也就是gb2312、gbk、utf-8常见</span><br><span class=\"line\">为了尽量避免乱码。优先选择utf-8</span><br><span class=\"line\">如果不在乎磁盘可以选择utf-16毕竟解析比utf-8简单</span><br><span class=\"line\">如果是网络IO的话 还是选择utf-8比较好 网络IO 字节流完整性容易遭到破坏 导致乱码</span><br></pre></td></tr></table></figure><p></p>\n<p>##2:javaweb常见编码问题</p>\n<p>###2.1: http请求前后的乱码<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  一般一次http请求中涉及到的编解码 存在于 request编码、request解码、response编码、response解码。</span><br><span class=\"line\">这样的可以通过设定http请求头、响应头、服务器编解码设置、客户端编解码设置来处理</span><br><span class=\"line\">例如：tomcat配置文件server.xml</span><br><span class=\"line\">    &lt;Connector port=&quot;8090&quot; protocol=&quot;HTTP/1.1&quot;   </span><br><span class=\"line\">                 maxThreads=&quot;150&quot; connectionTimeout=&quot;20000&quot;   </span><br><span class=\"line\">                 redirectPort=&quot;8443&quot; URIEncoding=&quot;utf-8&quot;  /&gt; </span><br><span class=\"line\">    http中请求报头或者响应报头设置charset=utf-8</span><br><span class=\"line\">    客户端也就是浏览器一般是默认utf-8编码 也可以自己去指定编码</span><br></pre></td></tr></table></figure><p></p>\n<p>###2.2: 数据库和项目之间出现乱码<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">主要就是项目中编解码和数据库的编解码、编码设置</span><br><span class=\"line\">一般直接设置链接参数 ：jdbc:mysql://localhost:3306/mydb?characterEncoding=utf8</span><br><span class=\"line\">一般项目直接设置utf-8 数据库也设定utf-8</span><br></pre></td></tr></table></figure><p></p>\n<p>###2.3: 总结<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">一般出现乱码肯定是有io的地方要么是各种链接之间 要么是系统内部出现来不同的编码</span><br><span class=\"line\">例如http请求 先确定乱码产生地点是在客户端还是服务端 是在那个环节产生的 </span><br><span class=\"line\">            一般进行一些简单的抓包分析看看旧大概知道是那个地发出现乱码了</span><br><span class=\"line\">            检查报头 和客户端 服务端的解析编码集</span><br><span class=\"line\">            </span><br><span class=\"line\">出现乱码先一步步的缩小范围找到出现乱码的节点 看是那个地发设置出了问题</span><br><span class=\"line\">然后找到是什么导致这个节点这个设置出现问题</span><br><span class=\"line\">如果是有网络IO的话  可以尝试抓包分析</span><br><span class=\"line\">如果是本地IO的话 就看看系统编码、项目编码、等设置</span><br><span class=\"line\">尽量避免使用框架、各种软件、系统的默认设置</span><br></pre></td></tr></table></figure><p></p>\n<p>###2.4:form表单提交数据乱码<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">有时候组合页面的时候和遇到类似ie这种变态浏览器的时候 会遭遇form表单乱码问题 其他地方都设置合适编码了</span><br><span class=\"line\">这个时候在form中制定form表单的编码即可 </span><br><span class=\"line\">&lt;form accept-charset=&quot;utf-8&quot; onsubmit=&quot;document.charset=&apos;utf-8&apos;&quot; &gt;</span><br><span class=\"line\">后面那个onsubmit是遇到ie这种变态浏览器需要加的 </span><br><span class=\"line\">最后 可能是服务器uri编码集未设定 例如tomcat的server.xml中的设置</span><br></pre></td></tr></table></figure><p></p>\n<p>###笔记参考书籍：深入javaweb技术内幕</p>"},{"title":"接口签名笔记","abbrlink":"5e68a67b","date":"2017-11-10T16:00:00.000Z","_content":"\n####由于开放型的短信接口受到不明来源的恶意访问 大佬们紧急对整个项目的接口进行加密 \n原理:密钥+参数生成 md5 签名   客户端保存好密钥即可  之前对接苏宁易购的那个支付平台的时候 也是选择这种方式进行访问加密\n1:生成密钥\n这个随机定义  例如我选择使用 appId + salt 生成md5 截取前12位作为 指定app应用的密钥  如果发生泄漏 可以通过改变salt 来生成新的密钥 \n2:客户端密钥 存储\n客户端 拿到密钥不能明文存储  例如 12位 可以拆分三段 然后分别进行偏移  这样如果别人要识别  必须反编译源码 并且读懂相关规则 \n3:签名规则\n除开签名以外所有参数 按照排序规则排序 然后拼接上密钥 通过md5 或者类似的算法生成md5签名  \n4：服务端验证规则\n除开签名 也按照客户端同样的排序规则排序 拼接密钥 通过相同的算法生成服务端签名  通过比较客户端签名 和服务端签名 来验证服务是否可靠、\n#### 生成签名 方法示例 \n```\n#!/usr/bin/env  groovy\n/**  groovy 生成md5 签名的算法\n *\n * @author ming\n * @date 2017-11-15 12:45\n */\nimport java.nio.charset.Charset\nimport java.security.MessageDigest\nimport java.security.NoSuchAlgorithmException\nimport org.apache.commons.codec.binary.Hex;\n\n\nstatic void main(String[] args) {\n    Map<String, String[]> map = new HashMap<>()\n    map.put(\"sign\", [\"mkasfasfds\"] as String[])\n    map.put(\"param\", [\"ming\"] as String[])\n    map.put(\"b\", [\"b\"] as String[])\n    map.put(\"a\", [\"a\"] as String[])\n    print(getSign(\"ming\", map))\n}\n\n/**\n * 生成签名\n * @param accessSecretKey 密钥\n * @param parameterMap 参数map 集合\n * @author ming\n * @date 2017-11-15 11:42\n */\nString getSign(String accessSecretKey, Map<String, String[]> parameterMap) {\n    //拼接参数\n    StringBuffer allNotEncryptString = new StringBuffer();\n    String signature = parameterMap.get(\"sign\")[0];\n    // 获取未加密的请求参数\n    String notEncryptString = getRequestParameterString(parameterMap);\n    if (notEncryptString == null || notEncryptString.length() == 0) {\n        throw new NullPointerException(\" 请求参数拼接为空\")\n    }\n    // 组合所有加密的字符穿\n    allNotEncryptString.append(notEncryptString);\n    allNotEncryptString.append(\"secret\" + accessSecretKey);\n\n    // 本地加密\n    String localSignature = md5(allNotEncryptString.toString(), Charset.forName(\"UTF-8\")).toLowerCase();\n    return localSignature;\n}\n\n/**\n * 取得未加密的请求参数字符串<br/>\n * 注：1.该字符串的组成规则为：\n * 1.1 请求参数 'key'+'value'成对\n * 1.2 依据字母顺序表：a-->b-->c-->...-->y-->z 对‘请求参数key’排序\n * 2.该字符串中不包括signature\n *\n */\nstatic String getRequestParameterString(Map<String, String[]> parameterMap) {\n    if (parameterMap == null || parameterMap.size() == 0) {\n        return null;\n    }\n    List<String> parameterNameList = new ArrayList<>(parameterMap.keySet());\n    // 对请求的key 排序\n    parameterNameList.sort { a, b -> (a <=> b) };\n    StringBuffer strBuffer = new StringBuffer();\n    for (String parameterName : parameterNameList) {\n        //排除签名\n        if (parameterName == \"sign\") {\n            continue;\n        }\n        String[] values = parameterMap.get(parameterName);\n        if (values != null) {\n            if (values.length == 1) {\n                strBuffer.append(parameterName + values[0]);\n            } else {\n                //此处规则 省略。。。。\n            }\n        }\n    }\n\n    return strBuffer.toString();\n}\n\n/***\n * MD5加密 生成32位md5码\n *\n * @param inStr 待加密字符串\n * @return 返回32位md5码\n */\n static String md5(String inStr, Charset charset) {\n    MessageDigest messageDigest = null;\n    try {\n        messageDigest = MessageDigest.getInstance(\"MD5\");\n    } catch (NoSuchAlgorithmException e) {\n        e.printStackTrace();\n    }\n    if (messageDigest == null) {\n        throw new NullPointerException();\n    }\n    messageDigest.update(inStr.getBytes(charset));\n    byte[] digestBytes = messageDigest.digest();\n    return Hex.encodeHexString(digestBytes);\n}\n\n```\n","source":"_posts/综合应用/接口访问加密.md","raw":"---\ntitle: 接口签名笔记\ncategories: 笔记\ntags:\n  - java\n  - 安全\nabbrlink: 5e68a67b\ndate: 2017-11-11 00:00:00\n---\n\n####由于开放型的短信接口受到不明来源的恶意访问 大佬们紧急对整个项目的接口进行加密 \n原理:密钥+参数生成 md5 签名   客户端保存好密钥即可  之前对接苏宁易购的那个支付平台的时候 也是选择这种方式进行访问加密\n1:生成密钥\n这个随机定义  例如我选择使用 appId + salt 生成md5 截取前12位作为 指定app应用的密钥  如果发生泄漏 可以通过改变salt 来生成新的密钥 \n2:客户端密钥 存储\n客户端 拿到密钥不能明文存储  例如 12位 可以拆分三段 然后分别进行偏移  这样如果别人要识别  必须反编译源码 并且读懂相关规则 \n3:签名规则\n除开签名以外所有参数 按照排序规则排序 然后拼接上密钥 通过md5 或者类似的算法生成md5签名  \n4：服务端验证规则\n除开签名 也按照客户端同样的排序规则排序 拼接密钥 通过相同的算法生成服务端签名  通过比较客户端签名 和服务端签名 来验证服务是否可靠、\n#### 生成签名 方法示例 \n```\n#!/usr/bin/env  groovy\n/**  groovy 生成md5 签名的算法\n *\n * @author ming\n * @date 2017-11-15 12:45\n */\nimport java.nio.charset.Charset\nimport java.security.MessageDigest\nimport java.security.NoSuchAlgorithmException\nimport org.apache.commons.codec.binary.Hex;\n\n\nstatic void main(String[] args) {\n    Map<String, String[]> map = new HashMap<>()\n    map.put(\"sign\", [\"mkasfasfds\"] as String[])\n    map.put(\"param\", [\"ming\"] as String[])\n    map.put(\"b\", [\"b\"] as String[])\n    map.put(\"a\", [\"a\"] as String[])\n    print(getSign(\"ming\", map))\n}\n\n/**\n * 生成签名\n * @param accessSecretKey 密钥\n * @param parameterMap 参数map 集合\n * @author ming\n * @date 2017-11-15 11:42\n */\nString getSign(String accessSecretKey, Map<String, String[]> parameterMap) {\n    //拼接参数\n    StringBuffer allNotEncryptString = new StringBuffer();\n    String signature = parameterMap.get(\"sign\")[0];\n    // 获取未加密的请求参数\n    String notEncryptString = getRequestParameterString(parameterMap);\n    if (notEncryptString == null || notEncryptString.length() == 0) {\n        throw new NullPointerException(\" 请求参数拼接为空\")\n    }\n    // 组合所有加密的字符穿\n    allNotEncryptString.append(notEncryptString);\n    allNotEncryptString.append(\"secret\" + accessSecretKey);\n\n    // 本地加密\n    String localSignature = md5(allNotEncryptString.toString(), Charset.forName(\"UTF-8\")).toLowerCase();\n    return localSignature;\n}\n\n/**\n * 取得未加密的请求参数字符串<br/>\n * 注：1.该字符串的组成规则为：\n * 1.1 请求参数 'key'+'value'成对\n * 1.2 依据字母顺序表：a-->b-->c-->...-->y-->z 对‘请求参数key’排序\n * 2.该字符串中不包括signature\n *\n */\nstatic String getRequestParameterString(Map<String, String[]> parameterMap) {\n    if (parameterMap == null || parameterMap.size() == 0) {\n        return null;\n    }\n    List<String> parameterNameList = new ArrayList<>(parameterMap.keySet());\n    // 对请求的key 排序\n    parameterNameList.sort { a, b -> (a <=> b) };\n    StringBuffer strBuffer = new StringBuffer();\n    for (String parameterName : parameterNameList) {\n        //排除签名\n        if (parameterName == \"sign\") {\n            continue;\n        }\n        String[] values = parameterMap.get(parameterName);\n        if (values != null) {\n            if (values.length == 1) {\n                strBuffer.append(parameterName + values[0]);\n            } else {\n                //此处规则 省略。。。。\n            }\n        }\n    }\n\n    return strBuffer.toString();\n}\n\n/***\n * MD5加密 生成32位md5码\n *\n * @param inStr 待加密字符串\n * @return 返回32位md5码\n */\n static String md5(String inStr, Charset charset) {\n    MessageDigest messageDigest = null;\n    try {\n        messageDigest = MessageDigest.getInstance(\"MD5\");\n    } catch (NoSuchAlgorithmException e) {\n        e.printStackTrace();\n    }\n    if (messageDigest == null) {\n        throw new NullPointerException();\n    }\n    messageDigest.update(inStr.getBytes(charset));\n    byte[] digestBytes = messageDigest.digest();\n    return Hex.encodeHexString(digestBytes);\n}\n\n```\n","slug":"综合应用/接口访问加密","published":1,"updated":"2018-08-17T08:10:03.923Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjo9uatzy0079mwczqosziwtd","content":"<p>####由于开放型的短信接口受到不明来源的恶意访问 大佬们紧急对整个项目的接口进行加密<br>原理:密钥+参数生成 md5 签名 客户端保存好密钥即可 之前对接苏宁易购的那个支付平台的时候 也是选择这种方式进行访问加密<br>1:生成密钥<br>这个随机定义 例如我选择使用 appId + salt 生成md5 截取前12位作为 指定app应用的密钥 如果发生泄漏 可以通过改变salt 来生成新的密钥<br>2:客户端密钥 存储<br>客户端 拿到密钥不能明文存储 例如 12位 可以拆分三段 然后分别进行偏移 这样如果别人要识别 必须反编译源码 并且读懂相关规则<br>3:签名规则<br>除开签名以外所有参数 按照排序规则排序 然后拼接上密钥 通过md5 或者类似的算法生成md5签名<br>4：服务端验证规则<br>除开签名 也按照客户端同样的排序规则排序 拼接密钥 通过相同的算法生成服务端签名 通过比较客户端签名 和服务端签名 来验证服务是否可靠、</p><h4 id=\"生成签名-方法示例\"><a href=\"#生成签名-方法示例\" class=\"headerlink\" title=\"生成签名 方法示例\"></a>生成签名 方法示例</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/usr/bin/env  groovy</span><br><span class=\"line\">/**  groovy 生成md5 签名的算法</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @author ming</span><br><span class=\"line\"> * @date 2017-11-15 12:45</span><br><span class=\"line\"> */</span><br><span class=\"line\">import java.nio.charset.Charset</span><br><span class=\"line\">import java.security.MessageDigest</span><br><span class=\"line\">import java.security.NoSuchAlgorithmException</span><br><span class=\"line\">import org.apache.commons.codec.binary.Hex;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">static void main(String[] args) &#123;</span><br><span class=\"line\">    Map&lt;String, String[]&gt; map = new HashMap&lt;&gt;()</span><br><span class=\"line\">    map.put(&quot;sign&quot;, [&quot;mkasfasfds&quot;] as String[])</span><br><span class=\"line\">    map.put(&quot;param&quot;, [&quot;ming&quot;] as String[])</span><br><span class=\"line\">    map.put(&quot;b&quot;, [&quot;b&quot;] as String[])</span><br><span class=\"line\">    map.put(&quot;a&quot;, [&quot;a&quot;] as String[])</span><br><span class=\"line\">    print(getSign(&quot;ming&quot;, map))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 生成签名</span><br><span class=\"line\"> * @param accessSecretKey 密钥</span><br><span class=\"line\"> * @param parameterMap 参数map 集合</span><br><span class=\"line\"> * @author ming</span><br><span class=\"line\"> * @date 2017-11-15 11:42</span><br><span class=\"line\"> */</span><br><span class=\"line\">String getSign(String accessSecretKey, Map&lt;String, String[]&gt; parameterMap) &#123;</span><br><span class=\"line\">    //拼接参数</span><br><span class=\"line\">    StringBuffer allNotEncryptString = new StringBuffer();</span><br><span class=\"line\">    String signature = parameterMap.get(&quot;sign&quot;)[0];</span><br><span class=\"line\">    // 获取未加密的请求参数</span><br><span class=\"line\">    String notEncryptString = getRequestParameterString(parameterMap);</span><br><span class=\"line\">    if (notEncryptString == null || notEncryptString.length() == 0) &#123;</span><br><span class=\"line\">        throw new NullPointerException(&quot; 请求参数拼接为空&quot;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    // 组合所有加密的字符穿</span><br><span class=\"line\">    allNotEncryptString.append(notEncryptString);</span><br><span class=\"line\">    allNotEncryptString.append(&quot;secret&quot; + accessSecretKey);</span><br><span class=\"line\"></span><br><span class=\"line\">    // 本地加密</span><br><span class=\"line\">    String localSignature = md5(allNotEncryptString.toString(), Charset.forName(&quot;UTF-8&quot;)).toLowerCase();</span><br><span class=\"line\">    return localSignature;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 取得未加密的请求参数字符串&lt;br/&gt;</span><br><span class=\"line\"> * 注：1.该字符串的组成规则为：</span><br><span class=\"line\"> * 1.1 请求参数 &apos;key&apos;+&apos;value&apos;成对</span><br><span class=\"line\"> * 1.2 依据字母顺序表：a--&gt;b--&gt;c--&gt;...--&gt;y--&gt;z 对‘请求参数key’排序</span><br><span class=\"line\"> * 2.该字符串中不包括signature</span><br><span class=\"line\"> *</span><br><span class=\"line\"> */</span><br><span class=\"line\">static String getRequestParameterString(Map&lt;String, String[]&gt; parameterMap) &#123;</span><br><span class=\"line\">    if (parameterMap == null || parameterMap.size() == 0) &#123;</span><br><span class=\"line\">        return null;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    List&lt;String&gt; parameterNameList = new ArrayList&lt;&gt;(parameterMap.keySet());</span><br><span class=\"line\">    // 对请求的key 排序</span><br><span class=\"line\">    parameterNameList.sort &#123; a, b -&gt; (a &lt;=&gt; b) &#125;;</span><br><span class=\"line\">    StringBuffer strBuffer = new StringBuffer();</span><br><span class=\"line\">    for (String parameterName : parameterNameList) &#123;</span><br><span class=\"line\">        //排除签名</span><br><span class=\"line\">        if (parameterName == &quot;sign&quot;) &#123;</span><br><span class=\"line\">            continue;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        String[] values = parameterMap.get(parameterName);</span><br><span class=\"line\">        if (values != null) &#123;</span><br><span class=\"line\">            if (values.length == 1) &#123;</span><br><span class=\"line\">                strBuffer.append(parameterName + values[0]);</span><br><span class=\"line\">            &#125; else &#123;</span><br><span class=\"line\">                //此处规则 省略。。。。</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    return strBuffer.toString();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">/***</span><br><span class=\"line\"> * MD5加密 生成32位md5码</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @param inStr 待加密字符串</span><br><span class=\"line\"> * @return 返回32位md5码</span><br><span class=\"line\"> */</span><br><span class=\"line\"> static String md5(String inStr, Charset charset) &#123;</span><br><span class=\"line\">    MessageDigest messageDigest = null;</span><br><span class=\"line\">    try &#123;</span><br><span class=\"line\">        messageDigest = MessageDigest.getInstance(&quot;MD5&quot;);</span><br><span class=\"line\">    &#125; catch (NoSuchAlgorithmException e) &#123;</span><br><span class=\"line\">        e.printStackTrace();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if (messageDigest == null) &#123;</span><br><span class=\"line\">        throw new NullPointerException();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    messageDigest.update(inStr.getBytes(charset));</span><br><span class=\"line\">    byte[] digestBytes = messageDigest.digest();</span><br><span class=\"line\">    return Hex.encodeHexString(digestBytes);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p>####由于开放型的短信接口受到不明来源的恶意访问 大佬们紧急对整个项目的接口进行加密<br>原理:密钥+参数生成 md5 签名 客户端保存好密钥即可 之前对接苏宁易购的那个支付平台的时候 也是选择这种方式进行访问加密<br>1:生成密钥<br>这个随机定义 例如我选择使用 appId + salt 生成md5 截取前12位作为 指定app应用的密钥 如果发生泄漏 可以通过改变salt 来生成新的密钥<br>2:客户端密钥 存储<br>客户端 拿到密钥不能明文存储 例如 12位 可以拆分三段 然后分别进行偏移 这样如果别人要识别 必须反编译源码 并且读懂相关规则<br>3:签名规则<br>除开签名以外所有参数 按照排序规则排序 然后拼接上密钥 通过md5 或者类似的算法生成md5签名<br>4：服务端验证规则<br>除开签名 也按照客户端同样的排序规则排序 拼接密钥 通过相同的算法生成服务端签名 通过比较客户端签名 和服务端签名 来验证服务是否可靠、</p><h4 id=\"生成签名-方法示例\"><a href=\"#生成签名-方法示例\" class=\"headerlink\" title=\"生成签名 方法示例\"></a>生成签名 方法示例</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/usr/bin/env  groovy</span><br><span class=\"line\">/**  groovy 生成md5 签名的算法</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @author ming</span><br><span class=\"line\"> * @date 2017-11-15 12:45</span><br><span class=\"line\"> */</span><br><span class=\"line\">import java.nio.charset.Charset</span><br><span class=\"line\">import java.security.MessageDigest</span><br><span class=\"line\">import java.security.NoSuchAlgorithmException</span><br><span class=\"line\">import org.apache.commons.codec.binary.Hex;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">static void main(String[] args) &#123;</span><br><span class=\"line\">    Map&lt;String, String[]&gt; map = new HashMap&lt;&gt;()</span><br><span class=\"line\">    map.put(&quot;sign&quot;, [&quot;mkasfasfds&quot;] as String[])</span><br><span class=\"line\">    map.put(&quot;param&quot;, [&quot;ming&quot;] as String[])</span><br><span class=\"line\">    map.put(&quot;b&quot;, [&quot;b&quot;] as String[])</span><br><span class=\"line\">    map.put(&quot;a&quot;, [&quot;a&quot;] as String[])</span><br><span class=\"line\">    print(getSign(&quot;ming&quot;, map))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 生成签名</span><br><span class=\"line\"> * @param accessSecretKey 密钥</span><br><span class=\"line\"> * @param parameterMap 参数map 集合</span><br><span class=\"line\"> * @author ming</span><br><span class=\"line\"> * @date 2017-11-15 11:42</span><br><span class=\"line\"> */</span><br><span class=\"line\">String getSign(String accessSecretKey, Map&lt;String, String[]&gt; parameterMap) &#123;</span><br><span class=\"line\">    //拼接参数</span><br><span class=\"line\">    StringBuffer allNotEncryptString = new StringBuffer();</span><br><span class=\"line\">    String signature = parameterMap.get(&quot;sign&quot;)[0];</span><br><span class=\"line\">    // 获取未加密的请求参数</span><br><span class=\"line\">    String notEncryptString = getRequestParameterString(parameterMap);</span><br><span class=\"line\">    if (notEncryptString == null || notEncryptString.length() == 0) &#123;</span><br><span class=\"line\">        throw new NullPointerException(&quot; 请求参数拼接为空&quot;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    // 组合所有加密的字符穿</span><br><span class=\"line\">    allNotEncryptString.append(notEncryptString);</span><br><span class=\"line\">    allNotEncryptString.append(&quot;secret&quot; + accessSecretKey);</span><br><span class=\"line\"></span><br><span class=\"line\">    // 本地加密</span><br><span class=\"line\">    String localSignature = md5(allNotEncryptString.toString(), Charset.forName(&quot;UTF-8&quot;)).toLowerCase();</span><br><span class=\"line\">    return localSignature;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 取得未加密的请求参数字符串&lt;br/&gt;</span><br><span class=\"line\"> * 注：1.该字符串的组成规则为：</span><br><span class=\"line\"> * 1.1 请求参数 &apos;key&apos;+&apos;value&apos;成对</span><br><span class=\"line\"> * 1.2 依据字母顺序表：a--&gt;b--&gt;c--&gt;...--&gt;y--&gt;z 对‘请求参数key’排序</span><br><span class=\"line\"> * 2.该字符串中不包括signature</span><br><span class=\"line\"> *</span><br><span class=\"line\"> */</span><br><span class=\"line\">static String getRequestParameterString(Map&lt;String, String[]&gt; parameterMap) &#123;</span><br><span class=\"line\">    if (parameterMap == null || parameterMap.size() == 0) &#123;</span><br><span class=\"line\">        return null;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    List&lt;String&gt; parameterNameList = new ArrayList&lt;&gt;(parameterMap.keySet());</span><br><span class=\"line\">    // 对请求的key 排序</span><br><span class=\"line\">    parameterNameList.sort &#123; a, b -&gt; (a &lt;=&gt; b) &#125;;</span><br><span class=\"line\">    StringBuffer strBuffer = new StringBuffer();</span><br><span class=\"line\">    for (String parameterName : parameterNameList) &#123;</span><br><span class=\"line\">        //排除签名</span><br><span class=\"line\">        if (parameterName == &quot;sign&quot;) &#123;</span><br><span class=\"line\">            continue;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        String[] values = parameterMap.get(parameterName);</span><br><span class=\"line\">        if (values != null) &#123;</span><br><span class=\"line\">            if (values.length == 1) &#123;</span><br><span class=\"line\">                strBuffer.append(parameterName + values[0]);</span><br><span class=\"line\">            &#125; else &#123;</span><br><span class=\"line\">                //此处规则 省略。。。。</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    return strBuffer.toString();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">/***</span><br><span class=\"line\"> * MD5加密 生成32位md5码</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @param inStr 待加密字符串</span><br><span class=\"line\"> * @return 返回32位md5码</span><br><span class=\"line\"> */</span><br><span class=\"line\"> static String md5(String inStr, Charset charset) &#123;</span><br><span class=\"line\">    MessageDigest messageDigest = null;</span><br><span class=\"line\">    try &#123;</span><br><span class=\"line\">        messageDigest = MessageDigest.getInstance(&quot;MD5&quot;);</span><br><span class=\"line\">    &#125; catch (NoSuchAlgorithmException e) &#123;</span><br><span class=\"line\">        e.printStackTrace();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if (messageDigest == null) &#123;</span><br><span class=\"line\">        throw new NullPointerException();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    messageDigest.update(inStr.getBytes(charset));</span><br><span class=\"line\">    byte[] digestBytes = messageDigest.digest();</span><br><span class=\"line\">    return Hex.encodeHexString(digestBytes);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"服务端推送技术及其实现(轮询、长链接、sse、webSocket)","abbrlink":"3a488ac5","date":"2017-10-30T11:23:02.000Z","_content":"## 前言\n\n## 服务端推送信息方案及其实现\n* 轮询 ：就是一直循环访问服务端 服务端压力比较大  利用js的一些定时功能 隔一段时间发起一次请求\n* 长轮询:一次请求 服务端吧请求保留 等由数据返回的时候 再返回 管理麻烦 \n* 长链接 例如用iframe 维护长链接开销较大 而且页面会显示一直在加载 不利于使用\n* flash socket:利用flash插件提供的socket 麻烦 需要会flash  flash的缺点无法避免如安全 \n* WebSocket： html5技术 利用提供的html5本身特性来实现socket ws或者wss协议 现阶段几乎所有的浏览器最新版都支持 除开个别奇葩版本  \n* sse: server-sent event http协议变通实现的 通过服务端向客户端声明 接下来是要发送的是流信息 本质上就是完成一次耗时长的下载   \n### web socket服务端推送\n#####maven依赖\n```\n<dependencies>\n    <!-- https://mvnrepository.com/artifact/javax.websocket/javax.websocket-api -->\n    <dependency>\n        <groupId>javax.websocket</groupId>\n        <artifactId>javax.websocket-api</artifactId>\n        <version>1.1</version>\n    </dependency>\n    <!-- https://mvnrepository.com/artifact/javax.servlet/javax.servlet-api -->\n    <dependency>\n        <groupId>javax.servlet</groupId>\n        <artifactId>javax.servlet-api</artifactId>\n        <version>3.1.0</version>\n    </dependency>\n</dependencies>\n```\n#####页面代码\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>客户端</title>\n</head>\n<body>\n<div>\n    <input type=\"button\" id=\"bconnection\" value=\"链接\">\n    <input type=\"button\" id=\"bclose\" value=\"关闭\">\n    <input type=\"button\" id=\"bsend\" value=\"发送\">\n        <input type=\"text\" id=\"sessionId\" name=\"sessionId\">\n        <input type=\"text\" id=\"message\" name=\"message\">\n        <input type=\"button\" onclick=\"sendServlet()\" value=\"jdklsjlfs\">\n</div>\n<script src=\"http://apps.bdimg.com/libs/jquery/1.6.4/jquery.min.js\" type=\"text/javascript\" charset=\"utf-8\"></script>\n<script type=\"text/javascript\">\n\n    //模拟另外个客户向服务器发起推送消息服务\n    function sendServlet() {\n        $.get(\"http://localhost:8080/ws/sendServlet?sessionId=\"+$(\"#sessionId\").val()+\"&message=\"+$(\"#message\").val());\n    }\n\n\n    //设立全局变量方便后续操作\n    var socket;\n    //判断是否支持WebSocket\n    if (typeof (WebSocket)==\"undefined\"){\n        alert(\"浏览器不支持websocket\");\n    }\n    $(\"#bconnection\").click(function () {\n        //实例化weosocket 制定服务器地址和端口\n        socket=new WebSocket(\"ws://localhost:8080/ws/websocket/xu\");\n        //打开链接\n        socket.onopen=function () {\n            console.log(\"打开weosocket端口\");\n            socket.send(\"客户端发送打开链接请求成功\")\n        };\n        //获取消息事件\n        socket.onmessage=function (msg) {\n            console.log(\"获取的消息\"+msg.data);\n        };\n        //关闭socket\n        socket.onclose=function () {\n            console.log(\"关闭socket\");\n        };\n        //监听错误\n        socket.onerror=function () {\n            console.log(\"socket发生错误\");\n        }\n\n    });\n\n    //发送消息\n    $(\"#bsend\").click(function () {\n        socket.send(\"客户端消息:\"+location.href+new Date());\n    });\n\n    //手动关闭socket\n    $(\"#bclose\").click(function () {\n        socket.close();\n    });\n</script>\n</body>\n</html>\n```\n#####服务端代码\n######websocket链接类\n```\npackage com.xxx.websocket;\n\nimport javax.websocket.*;\nimport javax.websocket.server.PathParam;\nimport javax.websocket.server.ServerEndpoint;\nimport java.io.IOException;\nimport java.util.Date;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.Scanner;\n\n/**\n * Created by xianyu on 17-3-7.\n * websocket 服务端响应\n */\n@ServerEndpoint(\"/websocket/{user}\")\npublic class WebSocketService {\n    private String socketUser;\n\n    //记录session列表\n    private static Map<String ,Session> sessionMap=new HashMap<>();\n\n    public static void sendMessage(String sessionId,String message){\n        sessionMap.get(sessionId).getAsyncRemote().sendText(\"推送消息：\"+message);\n    }\n\n\n    //打开socket链接的时候操作\n    @OnOpen\n    public void onOpen(@PathParam(\"user\")String user, Session session) throws IOException {\n        socketUser=user;\n        System.out.println(\"链接打开账户为\"+user+\"sessionid为\"+session.getId());\n        sessionMap.put(session.getId(),session);\n        session.getAsyncRemote().sendText(\"服务端成功接受链接;sessionId=\"+session.getId());\n    }\n\n    //接受消息的时候操作\n    @OnMessage\n    public String onMessage(String message) {\n        System.out.println(socketUser+\"客户的消息\"+message);\n        return socketUser+\":\"+message;\n    }\n\n\n    @OnError\n    public void onError(Throwable t) {\n        t.printStackTrace();\n    }\n\n    @OnClose\n    public void onClose(Session session, CloseReason reason) {\n        System.out.println(String.format(\"session id 为%s 用户为%s  closeReason%s\",session.getId(),socketUser,reason));\n    }\n\n\n}\n\n```\n#####模拟发送服务端推送消息servlet \n```\npackage com.xxx.websocket;\n\nimport javax.servlet.ServletException;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport java.io.IOException;\nimport java.util.Date;\n\n/**\n * Created by xianyu on 17-3-7.\n */\npublic class SendServlet extends HttpServlet {\n\n    private String messagePrefix=\"servlet:\";\n    @Override\n    public void init() throws ServletException {\n\n    }\n\n    @Override\n    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n\n        WebSocketService.sendMessage(req.getParameter(\"sessionId\"),messagePrefix+req.getParameter(\"message\")+\"||||||||||||\"+new Date());\n\n    }\n\n    @Override\n    public void destroy() {\n        super.destroy();\n    }\n}\n\n```\n#### 总结\nwebscoket是现阶段实现服务端推送、在线聊天、等等需要使用tcp长链接的地比较合适的一个技术 现在市面上的浏览器最新版有不支持的websocket的  ws 和wss区别 相当于http和https区别一样\n","source":"_posts/综合应用/服务端推送技术及其实现(轮询、长链接、websocket).md","raw":"---\ntitle: 服务端推送技术及其实现(轮询、长链接、sse、webSocket)\ncategories: 实战\ntags:\n  - java\n  - js\n  - 服务端推送\nabbrlink: 3a488ac5\ndate: 2017-10-30 19:23:02\n---\n## 前言\n\n## 服务端推送信息方案及其实现\n* 轮询 ：就是一直循环访问服务端 服务端压力比较大  利用js的一些定时功能 隔一段时间发起一次请求\n* 长轮询:一次请求 服务端吧请求保留 等由数据返回的时候 再返回 管理麻烦 \n* 长链接 例如用iframe 维护长链接开销较大 而且页面会显示一直在加载 不利于使用\n* flash socket:利用flash插件提供的socket 麻烦 需要会flash  flash的缺点无法避免如安全 \n* WebSocket： html5技术 利用提供的html5本身特性来实现socket ws或者wss协议 现阶段几乎所有的浏览器最新版都支持 除开个别奇葩版本  \n* sse: server-sent event http协议变通实现的 通过服务端向客户端声明 接下来是要发送的是流信息 本质上就是完成一次耗时长的下载   \n### web socket服务端推送\n#####maven依赖\n```\n<dependencies>\n    <!-- https://mvnrepository.com/artifact/javax.websocket/javax.websocket-api -->\n    <dependency>\n        <groupId>javax.websocket</groupId>\n        <artifactId>javax.websocket-api</artifactId>\n        <version>1.1</version>\n    </dependency>\n    <!-- https://mvnrepository.com/artifact/javax.servlet/javax.servlet-api -->\n    <dependency>\n        <groupId>javax.servlet</groupId>\n        <artifactId>javax.servlet-api</artifactId>\n        <version>3.1.0</version>\n    </dependency>\n</dependencies>\n```\n#####页面代码\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>客户端</title>\n</head>\n<body>\n<div>\n    <input type=\"button\" id=\"bconnection\" value=\"链接\">\n    <input type=\"button\" id=\"bclose\" value=\"关闭\">\n    <input type=\"button\" id=\"bsend\" value=\"发送\">\n        <input type=\"text\" id=\"sessionId\" name=\"sessionId\">\n        <input type=\"text\" id=\"message\" name=\"message\">\n        <input type=\"button\" onclick=\"sendServlet()\" value=\"jdklsjlfs\">\n</div>\n<script src=\"http://apps.bdimg.com/libs/jquery/1.6.4/jquery.min.js\" type=\"text/javascript\" charset=\"utf-8\"></script>\n<script type=\"text/javascript\">\n\n    //模拟另外个客户向服务器发起推送消息服务\n    function sendServlet() {\n        $.get(\"http://localhost:8080/ws/sendServlet?sessionId=\"+$(\"#sessionId\").val()+\"&message=\"+$(\"#message\").val());\n    }\n\n\n    //设立全局变量方便后续操作\n    var socket;\n    //判断是否支持WebSocket\n    if (typeof (WebSocket)==\"undefined\"){\n        alert(\"浏览器不支持websocket\");\n    }\n    $(\"#bconnection\").click(function () {\n        //实例化weosocket 制定服务器地址和端口\n        socket=new WebSocket(\"ws://localhost:8080/ws/websocket/xu\");\n        //打开链接\n        socket.onopen=function () {\n            console.log(\"打开weosocket端口\");\n            socket.send(\"客户端发送打开链接请求成功\")\n        };\n        //获取消息事件\n        socket.onmessage=function (msg) {\n            console.log(\"获取的消息\"+msg.data);\n        };\n        //关闭socket\n        socket.onclose=function () {\n            console.log(\"关闭socket\");\n        };\n        //监听错误\n        socket.onerror=function () {\n            console.log(\"socket发生错误\");\n        }\n\n    });\n\n    //发送消息\n    $(\"#bsend\").click(function () {\n        socket.send(\"客户端消息:\"+location.href+new Date());\n    });\n\n    //手动关闭socket\n    $(\"#bclose\").click(function () {\n        socket.close();\n    });\n</script>\n</body>\n</html>\n```\n#####服务端代码\n######websocket链接类\n```\npackage com.xxx.websocket;\n\nimport javax.websocket.*;\nimport javax.websocket.server.PathParam;\nimport javax.websocket.server.ServerEndpoint;\nimport java.io.IOException;\nimport java.util.Date;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.Scanner;\n\n/**\n * Created by xianyu on 17-3-7.\n * websocket 服务端响应\n */\n@ServerEndpoint(\"/websocket/{user}\")\npublic class WebSocketService {\n    private String socketUser;\n\n    //记录session列表\n    private static Map<String ,Session> sessionMap=new HashMap<>();\n\n    public static void sendMessage(String sessionId,String message){\n        sessionMap.get(sessionId).getAsyncRemote().sendText(\"推送消息：\"+message);\n    }\n\n\n    //打开socket链接的时候操作\n    @OnOpen\n    public void onOpen(@PathParam(\"user\")String user, Session session) throws IOException {\n        socketUser=user;\n        System.out.println(\"链接打开账户为\"+user+\"sessionid为\"+session.getId());\n        sessionMap.put(session.getId(),session);\n        session.getAsyncRemote().sendText(\"服务端成功接受链接;sessionId=\"+session.getId());\n    }\n\n    //接受消息的时候操作\n    @OnMessage\n    public String onMessage(String message) {\n        System.out.println(socketUser+\"客户的消息\"+message);\n        return socketUser+\":\"+message;\n    }\n\n\n    @OnError\n    public void onError(Throwable t) {\n        t.printStackTrace();\n    }\n\n    @OnClose\n    public void onClose(Session session, CloseReason reason) {\n        System.out.println(String.format(\"session id 为%s 用户为%s  closeReason%s\",session.getId(),socketUser,reason));\n    }\n\n\n}\n\n```\n#####模拟发送服务端推送消息servlet \n```\npackage com.xxx.websocket;\n\nimport javax.servlet.ServletException;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport java.io.IOException;\nimport java.util.Date;\n\n/**\n * Created by xianyu on 17-3-7.\n */\npublic class SendServlet extends HttpServlet {\n\n    private String messagePrefix=\"servlet:\";\n    @Override\n    public void init() throws ServletException {\n\n    }\n\n    @Override\n    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n\n        WebSocketService.sendMessage(req.getParameter(\"sessionId\"),messagePrefix+req.getParameter(\"message\")+\"||||||||||||\"+new Date());\n\n    }\n\n    @Override\n    public void destroy() {\n        super.destroy();\n    }\n}\n\n```\n#### 总结\nwebscoket是现阶段实现服务端推送、在线聊天、等等需要使用tcp长链接的地比较合适的一个技术 现在市面上的浏览器最新版有不支持的websocket的  ws 和wss区别 相当于http和https区别一样\n","slug":"综合应用/服务端推送技术及其实现(轮询、长链接、websocket)","published":1,"updated":"2018-08-17T08:10:03.923Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjo9uatzz007cmwczzhpg88xh","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><h2 id=\"服务端推送信息方案及其实现\"><a href=\"#服务端推送信息方案及其实现\" class=\"headerlink\" title=\"服务端推送信息方案及其实现\"></a>服务端推送信息方案及其实现</h2><ul><li>轮询 ：就是一直循环访问服务端 服务端压力比较大 利用js的一些定时功能 隔一段时间发起一次请求</li><li>长轮询:一次请求 服务端吧请求保留 等由数据返回的时候 再返回 管理麻烦</li><li>长链接 例如用iframe 维护长链接开销较大 而且页面会显示一直在加载 不利于使用</li><li>flash socket:利用flash插件提供的socket 麻烦 需要会flash flash的缺点无法避免如安全</li><li>WebSocket： html5技术 利用提供的html5本身特性来实现socket ws或者wss协议 现阶段几乎所有的浏览器最新版都支持 除开个别奇葩版本</li><li>sse: server-sent event http协议变通实现的 通过服务端向客户端声明 接下来是要发送的是流信息 本质上就是完成一次耗时长的下载<h3 id=\"web-socket服务端推送\"><a href=\"#web-socket服务端推送\" class=\"headerlink\" title=\"web socket服务端推送\"></a>web socket服务端推送</h3>#####maven依赖<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependencies&gt;</span><br><span class=\"line\">    &lt;!-- https://mvnrepository.com/artifact/javax.websocket/javax.websocket-api --&gt;</span><br><span class=\"line\">    &lt;dependency&gt;</span><br><span class=\"line\">        &lt;groupId&gt;javax.websocket&lt;/groupId&gt;</span><br><span class=\"line\">        &lt;artifactId&gt;javax.websocket-api&lt;/artifactId&gt;</span><br><span class=\"line\">        &lt;version&gt;1.1&lt;/version&gt;</span><br><span class=\"line\">    &lt;/dependency&gt;</span><br><span class=\"line\">    &lt;!-- https://mvnrepository.com/artifact/javax.servlet/javax.servlet-api --&gt;</span><br><span class=\"line\">    &lt;dependency&gt;</span><br><span class=\"line\">        &lt;groupId&gt;javax.servlet&lt;/groupId&gt;</span><br><span class=\"line\">        &lt;artifactId&gt;javax.servlet-api&lt;/artifactId&gt;</span><br><span class=\"line\">        &lt;version&gt;3.1.0&lt;/version&gt;</span><br><span class=\"line\">    &lt;/dependency&gt;</span><br><span class=\"line\">&lt;/dependencies&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>#####页面代码<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html lang=&quot;en&quot;&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class=\"line\">    &lt;title&gt;客户端&lt;/title&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;div&gt;</span><br><span class=\"line\">    &lt;input type=&quot;button&quot; id=&quot;bconnection&quot; value=&quot;链接&quot;&gt;</span><br><span class=\"line\">    &lt;input type=&quot;button&quot; id=&quot;bclose&quot; value=&quot;关闭&quot;&gt;</span><br><span class=\"line\">    &lt;input type=&quot;button&quot; id=&quot;bsend&quot; value=&quot;发送&quot;&gt;</span><br><span class=\"line\">        &lt;input type=&quot;text&quot; id=&quot;sessionId&quot; name=&quot;sessionId&quot;&gt;</span><br><span class=\"line\">        &lt;input type=&quot;text&quot; id=&quot;message&quot; name=&quot;message&quot;&gt;</span><br><span class=\"line\">        &lt;input type=&quot;button&quot; onclick=&quot;sendServlet()&quot; value=&quot;jdklsjlfs&quot;&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;script src=&quot;http://apps.bdimg.com/libs/jquery/1.6.4/jquery.min.js&quot; type=&quot;text/javascript&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    //模拟另外个客户向服务器发起推送消息服务</span><br><span class=\"line\">    function sendServlet() &#123;</span><br><span class=\"line\">        $.get(&quot;http://localhost:8080/ws/sendServlet?sessionId=&quot;+$(&quot;#sessionId&quot;).val()+&quot;&amp;message=&quot;+$(&quot;#message&quot;).val());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    //设立全局变量方便后续操作</span><br><span class=\"line\">    var socket;</span><br><span class=\"line\">    //判断是否支持WebSocket</span><br><span class=\"line\">    if (typeof (WebSocket)==&quot;undefined&quot;)&#123;</span><br><span class=\"line\">        alert(&quot;浏览器不支持websocket&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    $(&quot;#bconnection&quot;).click(function () &#123;</span><br><span class=\"line\">        //实例化weosocket 制定服务器地址和端口</span><br><span class=\"line\">        socket=new WebSocket(&quot;ws://localhost:8080/ws/websocket/xu&quot;);</span><br><span class=\"line\">        //打开链接</span><br><span class=\"line\">        socket.onopen=function () &#123;</span><br><span class=\"line\">            console.log(&quot;打开weosocket端口&quot;);</span><br><span class=\"line\">            socket.send(&quot;客户端发送打开链接请求成功&quot;)</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        //获取消息事件</span><br><span class=\"line\">        socket.onmessage=function (msg) &#123;</span><br><span class=\"line\">            console.log(&quot;获取的消息&quot;+msg.data);</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        //关闭socket</span><br><span class=\"line\">        socket.onclose=function () &#123;</span><br><span class=\"line\">            console.log(&quot;关闭socket&quot;);</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        //监听错误</span><br><span class=\"line\">        socket.onerror=function () &#123;</span><br><span class=\"line\">            console.log(&quot;socket发生错误&quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    //发送消息</span><br><span class=\"line\">    $(&quot;#bsend&quot;).click(function () &#123;</span><br><span class=\"line\">        socket.send(&quot;客户端消息:&quot;+location.href+new Date());</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    //手动关闭socket</span><br><span class=\"line\">    $(&quot;#bclose&quot;).click(function () &#123;</span><br><span class=\"line\">        socket.close();</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p></p>\n<p>#####服务端代码</p>\n<p>######websocket链接类<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.xxx.websocket;</span><br><span class=\"line\"></span><br><span class=\"line\">import javax.websocket.*;</span><br><span class=\"line\">import javax.websocket.server.PathParam;</span><br><span class=\"line\">import javax.websocket.server.ServerEndpoint;</span><br><span class=\"line\">import java.io.IOException;</span><br><span class=\"line\">import java.util.Date;</span><br><span class=\"line\">import java.util.HashMap;</span><br><span class=\"line\">import java.util.Map;</span><br><span class=\"line\">import java.util.Scanner;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * Created by xianyu on 17-3-7.</span><br><span class=\"line\"> * websocket 服务端响应</span><br><span class=\"line\"> */</span><br><span class=\"line\">@ServerEndpoint(&quot;/websocket/&#123;user&#125;&quot;)</span><br><span class=\"line\">public class WebSocketService &#123;</span><br><span class=\"line\">    private String socketUser;</span><br><span class=\"line\"></span><br><span class=\"line\">    //记录session列表</span><br><span class=\"line\">    private static Map&lt;String ,Session&gt; sessionMap=new HashMap&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void sendMessage(String sessionId,String message)&#123;</span><br><span class=\"line\">        sessionMap.get(sessionId).getAsyncRemote().sendText(&quot;推送消息：&quot;+message);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    //打开socket链接的时候操作</span><br><span class=\"line\">    @OnOpen</span><br><span class=\"line\">    public void onOpen(@PathParam(&quot;user&quot;)String user, Session session) throws IOException &#123;</span><br><span class=\"line\">        socketUser=user;</span><br><span class=\"line\">        System.out.println(&quot;链接打开账户为&quot;+user+&quot;sessionid为&quot;+session.getId());</span><br><span class=\"line\">        sessionMap.put(session.getId(),session);</span><br><span class=\"line\">        session.getAsyncRemote().sendText(&quot;服务端成功接受链接;sessionId=&quot;+session.getId());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    //接受消息的时候操作</span><br><span class=\"line\">    @OnMessage</span><br><span class=\"line\">    public String onMessage(String message) &#123;</span><br><span class=\"line\">        System.out.println(socketUser+&quot;客户的消息&quot;+message);</span><br><span class=\"line\">        return socketUser+&quot;:&quot;+message;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    @OnError</span><br><span class=\"line\">    public void onError(Throwable t) &#123;</span><br><span class=\"line\">        t.printStackTrace();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @OnClose</span><br><span class=\"line\">    public void onClose(Session session, CloseReason reason) &#123;</span><br><span class=\"line\">        System.out.println(String.format(&quot;session id 为%s 用户为%s  closeReason%s&quot;,session.getId(),socketUser,reason));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p>\n<p>#####模拟发送服务端推送消息servlet<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.xxx.websocket;</span><br><span class=\"line\"></span><br><span class=\"line\">import javax.servlet.ServletException;</span><br><span class=\"line\">import javax.servlet.http.HttpServlet;</span><br><span class=\"line\">import javax.servlet.http.HttpServletRequest;</span><br><span class=\"line\">import javax.servlet.http.HttpServletResponse;</span><br><span class=\"line\">import java.io.IOException;</span><br><span class=\"line\">import java.util.Date;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * Created by xianyu on 17-3-7.</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class SendServlet extends HttpServlet &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private String messagePrefix=&quot;servlet:&quot;;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void init() throws ServletException &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        WebSocketService.sendMessage(req.getParameter(&quot;sessionId&quot;),messagePrefix+req.getParameter(&quot;message&quot;)+&quot;||||||||||||&quot;+new Date());</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void destroy() &#123;</span><br><span class=\"line\">        super.destroy();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><p>webscoket是现阶段实现服务端推送、在线聊天、等等需要使用tcp长链接的地比较合适的一个技术 现在市面上的浏览器最新版有不支持的websocket的  ws 和wss区别 相当于http和https区别一样</p>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><h2 id=\"服务端推送信息方案及其实现\"><a href=\"#服务端推送信息方案及其实现\" class=\"headerlink\" title=\"服务端推送信息方案及其实现\"></a>服务端推送信息方案及其实现</h2><ul><li>轮询 ：就是一直循环访问服务端 服务端压力比较大 利用js的一些定时功能 隔一段时间发起一次请求</li><li>长轮询:一次请求 服务端吧请求保留 等由数据返回的时候 再返回 管理麻烦</li><li>长链接 例如用iframe 维护长链接开销较大 而且页面会显示一直在加载 不利于使用</li><li>flash socket:利用flash插件提供的socket 麻烦 需要会flash flash的缺点无法避免如安全</li><li>WebSocket： html5技术 利用提供的html5本身特性来实现socket ws或者wss协议 现阶段几乎所有的浏览器最新版都支持 除开个别奇葩版本</li><li>sse: server-sent event http协议变通实现的 通过服务端向客户端声明 接下来是要发送的是流信息 本质上就是完成一次耗时长的下载<h3 id=\"web-socket服务端推送\"><a href=\"#web-socket服务端推送\" class=\"headerlink\" title=\"web socket服务端推送\"></a>web socket服务端推送</h3>#####maven依赖<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependencies&gt;</span><br><span class=\"line\">    &lt;!-- https://mvnrepository.com/artifact/javax.websocket/javax.websocket-api --&gt;</span><br><span class=\"line\">    &lt;dependency&gt;</span><br><span class=\"line\">        &lt;groupId&gt;javax.websocket&lt;/groupId&gt;</span><br><span class=\"line\">        &lt;artifactId&gt;javax.websocket-api&lt;/artifactId&gt;</span><br><span class=\"line\">        &lt;version&gt;1.1&lt;/version&gt;</span><br><span class=\"line\">    &lt;/dependency&gt;</span><br><span class=\"line\">    &lt;!-- https://mvnrepository.com/artifact/javax.servlet/javax.servlet-api --&gt;</span><br><span class=\"line\">    &lt;dependency&gt;</span><br><span class=\"line\">        &lt;groupId&gt;javax.servlet&lt;/groupId&gt;</span><br><span class=\"line\">        &lt;artifactId&gt;javax.servlet-api&lt;/artifactId&gt;</span><br><span class=\"line\">        &lt;version&gt;3.1.0&lt;/version&gt;</span><br><span class=\"line\">    &lt;/dependency&gt;</span><br><span class=\"line\">&lt;/dependencies&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>#####页面代码<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html lang=&quot;en&quot;&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class=\"line\">    &lt;title&gt;客户端&lt;/title&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;div&gt;</span><br><span class=\"line\">    &lt;input type=&quot;button&quot; id=&quot;bconnection&quot; value=&quot;链接&quot;&gt;</span><br><span class=\"line\">    &lt;input type=&quot;button&quot; id=&quot;bclose&quot; value=&quot;关闭&quot;&gt;</span><br><span class=\"line\">    &lt;input type=&quot;button&quot; id=&quot;bsend&quot; value=&quot;发送&quot;&gt;</span><br><span class=\"line\">        &lt;input type=&quot;text&quot; id=&quot;sessionId&quot; name=&quot;sessionId&quot;&gt;</span><br><span class=\"line\">        &lt;input type=&quot;text&quot; id=&quot;message&quot; name=&quot;message&quot;&gt;</span><br><span class=\"line\">        &lt;input type=&quot;button&quot; onclick=&quot;sendServlet()&quot; value=&quot;jdklsjlfs&quot;&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;script src=&quot;http://apps.bdimg.com/libs/jquery/1.6.4/jquery.min.js&quot; type=&quot;text/javascript&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    //模拟另外个客户向服务器发起推送消息服务</span><br><span class=\"line\">    function sendServlet() &#123;</span><br><span class=\"line\">        $.get(&quot;http://localhost:8080/ws/sendServlet?sessionId=&quot;+$(&quot;#sessionId&quot;).val()+&quot;&amp;message=&quot;+$(&quot;#message&quot;).val());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    //设立全局变量方便后续操作</span><br><span class=\"line\">    var socket;</span><br><span class=\"line\">    //判断是否支持WebSocket</span><br><span class=\"line\">    if (typeof (WebSocket)==&quot;undefined&quot;)&#123;</span><br><span class=\"line\">        alert(&quot;浏览器不支持websocket&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    $(&quot;#bconnection&quot;).click(function () &#123;</span><br><span class=\"line\">        //实例化weosocket 制定服务器地址和端口</span><br><span class=\"line\">        socket=new WebSocket(&quot;ws://localhost:8080/ws/websocket/xu&quot;);</span><br><span class=\"line\">        //打开链接</span><br><span class=\"line\">        socket.onopen=function () &#123;</span><br><span class=\"line\">            console.log(&quot;打开weosocket端口&quot;);</span><br><span class=\"line\">            socket.send(&quot;客户端发送打开链接请求成功&quot;)</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        //获取消息事件</span><br><span class=\"line\">        socket.onmessage=function (msg) &#123;</span><br><span class=\"line\">            console.log(&quot;获取的消息&quot;+msg.data);</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        //关闭socket</span><br><span class=\"line\">        socket.onclose=function () &#123;</span><br><span class=\"line\">            console.log(&quot;关闭socket&quot;);</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        //监听错误</span><br><span class=\"line\">        socket.onerror=function () &#123;</span><br><span class=\"line\">            console.log(&quot;socket发生错误&quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    //发送消息</span><br><span class=\"line\">    $(&quot;#bsend&quot;).click(function () &#123;</span><br><span class=\"line\">        socket.send(&quot;客户端消息:&quot;+location.href+new Date());</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    //手动关闭socket</span><br><span class=\"line\">    $(&quot;#bclose&quot;).click(function () &#123;</span><br><span class=\"line\">        socket.close();</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p></p>\n<p>#####服务端代码</p>\n<p>######websocket链接类<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.xxx.websocket;</span><br><span class=\"line\"></span><br><span class=\"line\">import javax.websocket.*;</span><br><span class=\"line\">import javax.websocket.server.PathParam;</span><br><span class=\"line\">import javax.websocket.server.ServerEndpoint;</span><br><span class=\"line\">import java.io.IOException;</span><br><span class=\"line\">import java.util.Date;</span><br><span class=\"line\">import java.util.HashMap;</span><br><span class=\"line\">import java.util.Map;</span><br><span class=\"line\">import java.util.Scanner;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * Created by xianyu on 17-3-7.</span><br><span class=\"line\"> * websocket 服务端响应</span><br><span class=\"line\"> */</span><br><span class=\"line\">@ServerEndpoint(&quot;/websocket/&#123;user&#125;&quot;)</span><br><span class=\"line\">public class WebSocketService &#123;</span><br><span class=\"line\">    private String socketUser;</span><br><span class=\"line\"></span><br><span class=\"line\">    //记录session列表</span><br><span class=\"line\">    private static Map&lt;String ,Session&gt; sessionMap=new HashMap&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void sendMessage(String sessionId,String message)&#123;</span><br><span class=\"line\">        sessionMap.get(sessionId).getAsyncRemote().sendText(&quot;推送消息：&quot;+message);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    //打开socket链接的时候操作</span><br><span class=\"line\">    @OnOpen</span><br><span class=\"line\">    public void onOpen(@PathParam(&quot;user&quot;)String user, Session session) throws IOException &#123;</span><br><span class=\"line\">        socketUser=user;</span><br><span class=\"line\">        System.out.println(&quot;链接打开账户为&quot;+user+&quot;sessionid为&quot;+session.getId());</span><br><span class=\"line\">        sessionMap.put(session.getId(),session);</span><br><span class=\"line\">        session.getAsyncRemote().sendText(&quot;服务端成功接受链接;sessionId=&quot;+session.getId());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    //接受消息的时候操作</span><br><span class=\"line\">    @OnMessage</span><br><span class=\"line\">    public String onMessage(String message) &#123;</span><br><span class=\"line\">        System.out.println(socketUser+&quot;客户的消息&quot;+message);</span><br><span class=\"line\">        return socketUser+&quot;:&quot;+message;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    @OnError</span><br><span class=\"line\">    public void onError(Throwable t) &#123;</span><br><span class=\"line\">        t.printStackTrace();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @OnClose</span><br><span class=\"line\">    public void onClose(Session session, CloseReason reason) &#123;</span><br><span class=\"line\">        System.out.println(String.format(&quot;session id 为%s 用户为%s  closeReason%s&quot;,session.getId(),socketUser,reason));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p>\n<p>#####模拟发送服务端推送消息servlet<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.xxx.websocket;</span><br><span class=\"line\"></span><br><span class=\"line\">import javax.servlet.ServletException;</span><br><span class=\"line\">import javax.servlet.http.HttpServlet;</span><br><span class=\"line\">import javax.servlet.http.HttpServletRequest;</span><br><span class=\"line\">import javax.servlet.http.HttpServletResponse;</span><br><span class=\"line\">import java.io.IOException;</span><br><span class=\"line\">import java.util.Date;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * Created by xianyu on 17-3-7.</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class SendServlet extends HttpServlet &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private String messagePrefix=&quot;servlet:&quot;;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void init() throws ServletException &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        WebSocketService.sendMessage(req.getParameter(&quot;sessionId&quot;),messagePrefix+req.getParameter(&quot;message&quot;)+&quot;||||||||||||&quot;+new Date());</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void destroy() &#123;</span><br><span class=\"line\">        super.destroy();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><p>webscoket是现阶段实现服务端推送、在线聊天、等等需要使用tcp长链接的地比较合适的一个技术 现在市面上的浏览器最新版有不支持的websocket的  ws 和wss区别 相当于http和https区别一样</p>"},{"title":"跨域笔记","abbrlink":"38475811","date":"2017-11-10T16:00:00.000Z","_content":"##在将项目前后端分离的时候，首当其冲的就是跨域问题;此篇笔记 用来记录什么是跨域、如何解决跨域、以及一个实例;免得自己以后忘记了还需要去搜索\n###什么是跨域\nhttp为了提高安全，禁止非同域访问 \n什么是同域:满足下三条才是同域 1:同端口 ip，2:同样的协议,3:如果是子域名 也要一样 否则就是非同域 不能直接互相访问，必须通过一些安全设置或者技巧去访问如jsonp、cors等方案\n###解决跨域\n####1:jsonp 方式\n首先jsonp和json是没有任何关系的 ;\n由于浏览器对js、图片不会做跨域限制\njsonp就是相当于把数据下载下来解析，利用script标签去下载数据 然后解析\n就是用javascript动态加载一个script文件，如何去解析这个文件  例如json字符串 \n######局限性:只能get请求 如果需要post、put等其他请求 无法满足\n\n###2:cors跨域(重点)\ncors是w3c定义的一种新的标准 用来适应跨域数据请求的\n当浏览器发现是跨域请求 会自动在报头添加一些跨域信息 如option等\ncors跨域分为简单请求和负责请求 但是只要在服务端设定合适 区别不是特别大 \n当满足如下条件就是简单的cors跨域请求 不满足则是复杂cors请求\n  1:请求方式:get、post、head\n  2:报头限制:只能包含如下报头信息 超过则是复杂请求Accept、Accept-Language、Content-Language、Last-Event-ID、Content-Type：只限于三个值application/x-www-form-urlencoded、multipart/form-data、text/plain|  \n也就是意味者如果要自定义报头、发送cookie等功能 都是复杂请求\n不管是复杂请求还是简单请求 在服务端设置的时候 复杂请求设置是涵盖了简单请求需要的设置的\n######简单cors跨域\n```\n发送简单请求-->服务端检验请求合法性-->请求合法就和正常请求一样、不合法返回跨域错误提示\n```\n######复杂cors跨域\n```\n发送预检请求-->服务端检验请求是否合法-->请求合法 发送正式请求、不合法 结束 提示请求不符合服务端检验要求\n```\n学习地址:http://www.ruanyifeng.com/blog/2016/04/cors.html\n","source":"_posts/综合应用/跨域笔记(jsonp、cors).md","raw":"---\ntitle: 跨域笔记\ncategories: 笔记\ntags:\n  - 跨域\nabbrlink: '38475811'\ndate: 2017-11-11 00:00:00\n---\n##在将项目前后端分离的时候，首当其冲的就是跨域问题;此篇笔记 用来记录什么是跨域、如何解决跨域、以及一个实例;免得自己以后忘记了还需要去搜索\n###什么是跨域\nhttp为了提高安全，禁止非同域访问 \n什么是同域:满足下三条才是同域 1:同端口 ip，2:同样的协议,3:如果是子域名 也要一样 否则就是非同域 不能直接互相访问，必须通过一些安全设置或者技巧去访问如jsonp、cors等方案\n###解决跨域\n####1:jsonp 方式\n首先jsonp和json是没有任何关系的 ;\n由于浏览器对js、图片不会做跨域限制\njsonp就是相当于把数据下载下来解析，利用script标签去下载数据 然后解析\n就是用javascript动态加载一个script文件，如何去解析这个文件  例如json字符串 \n######局限性:只能get请求 如果需要post、put等其他请求 无法满足\n\n###2:cors跨域(重点)\ncors是w3c定义的一种新的标准 用来适应跨域数据请求的\n当浏览器发现是跨域请求 会自动在报头添加一些跨域信息 如option等\ncors跨域分为简单请求和负责请求 但是只要在服务端设定合适 区别不是特别大 \n当满足如下条件就是简单的cors跨域请求 不满足则是复杂cors请求\n  1:请求方式:get、post、head\n  2:报头限制:只能包含如下报头信息 超过则是复杂请求Accept、Accept-Language、Content-Language、Last-Event-ID、Content-Type：只限于三个值application/x-www-form-urlencoded、multipart/form-data、text/plain|  \n也就是意味者如果要自定义报头、发送cookie等功能 都是复杂请求\n不管是复杂请求还是简单请求 在服务端设置的时候 复杂请求设置是涵盖了简单请求需要的设置的\n######简单cors跨域\n```\n发送简单请求-->服务端检验请求合法性-->请求合法就和正常请求一样、不合法返回跨域错误提示\n```\n######复杂cors跨域\n```\n发送预检请求-->服务端检验请求是否合法-->请求合法 发送正式请求、不合法 结束 提示请求不符合服务端检验要求\n```\n学习地址:http://www.ruanyifeng.com/blog/2016/04/cors.html\n","slug":"综合应用/跨域笔记(jsonp、cors)","published":1,"updated":"2018-08-17T08:10:03.923Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjo9uau01007fmwczb5y4mxxa","content":"<p>##在将项目前后端分离的时候，首当其冲的就是跨域问题;此篇笔记 用来记录什么是跨域、如何解决跨域、以及一个实例;免得自己以后忘记了还需要去搜索</p><p>###什么是跨域<br>http为了提高安全，禁止非同域访问<br>什么是同域:满足下三条才是同域 1:同端口 ip，2:同样的协议,3:如果是子域名 也要一样 否则就是非同域 不能直接互相访问，必须通过一些安全设置或者技巧去访问如jsonp、cors等方案</p><p>###解决跨域</p><p>####1:jsonp 方式<br>首先jsonp和json是没有任何关系的 ;<br>由于浏览器对js、图片不会做跨域限制<br>jsonp就是相当于把数据下载下来解析，利用script标签去下载数据 然后解析<br>就是用javascript动态加载一个script文件，如何去解析这个文件 例如json字符串</p><p>######局限性:只能get请求 如果需要post、put等其他请求 无法满足</p><p>###2:cors跨域(重点)<br>cors是w3c定义的一种新的标准 用来适应跨域数据请求的<br>当浏览器发现是跨域请求 会自动在报头添加一些跨域信息 如option等<br>cors跨域分为简单请求和负责请求 但是只要在服务端设定合适 区别不是特别大<br>当满足如下条件就是简单的cors跨域请求 不满足则是复杂cors请求<br>1:请求方式:get、post、head<br>2:报头限制:只能包含如下报头信息 超过则是复杂请求Accept、Accept-Language、Content-Language、Last-Event-ID、Content-Type：只限于三个值application/x-www-form-urlencoded、multipart/form-data、text/plain|<br>也就是意味者如果要自定义报头、发送cookie等功能 都是复杂请求<br>不管是复杂请求还是简单请求 在服务端设置的时候 复杂请求设置是涵盖了简单请求需要的设置的</p><p>######简单cors跨域<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">发送简单请求--&gt;服务端检验请求合法性--&gt;请求合法就和正常请求一样、不合法返回跨域错误提示</span><br></pre></td></tr></table></figure><p></p>\n<p>######复杂cors跨域<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">发送预检请求--&gt;服务端检验请求是否合法--&gt;请求合法 发送正式请求、不合法 结束 提示请求不符合服务端检验要求</span><br></pre></td></tr></table></figure><p></p>\n<p>学习地址:<a href=\"http://www.ruanyifeng.com/blog/2016/04/cors.html\" target=\"_blank\" rel=\"noopener\">http://www.ruanyifeng.com/blog/2016/04/cors.html</a></p>","site":{"data":{}},"excerpt":"","more":"<p>##在将项目前后端分离的时候，首当其冲的就是跨域问题;此篇笔记 用来记录什么是跨域、如何解决跨域、以及一个实例;免得自己以后忘记了还需要去搜索</p><p>###什么是跨域<br>http为了提高安全，禁止非同域访问<br>什么是同域:满足下三条才是同域 1:同端口 ip，2:同样的协议,3:如果是子域名 也要一样 否则就是非同域 不能直接互相访问，必须通过一些安全设置或者技巧去访问如jsonp、cors等方案</p><p>###解决跨域</p><p>####1:jsonp 方式<br>首先jsonp和json是没有任何关系的 ;<br>由于浏览器对js、图片不会做跨域限制<br>jsonp就是相当于把数据下载下来解析，利用script标签去下载数据 然后解析<br>就是用javascript动态加载一个script文件，如何去解析这个文件 例如json字符串</p><p>######局限性:只能get请求 如果需要post、put等其他请求 无法满足</p><p>###2:cors跨域(重点)<br>cors是w3c定义的一种新的标准 用来适应跨域数据请求的<br>当浏览器发现是跨域请求 会自动在报头添加一些跨域信息 如option等<br>cors跨域分为简单请求和负责请求 但是只要在服务端设定合适 区别不是特别大<br>当满足如下条件就是简单的cors跨域请求 不满足则是复杂cors请求<br>1:请求方式:get、post、head<br>2:报头限制:只能包含如下报头信息 超过则是复杂请求Accept、Accept-Language、Content-Language、Last-Event-ID、Content-Type：只限于三个值application/x-www-form-urlencoded、multipart/form-data、text/plain|<br>也就是意味者如果要自定义报头、发送cookie等功能 都是复杂请求<br>不管是复杂请求还是简单请求 在服务端设置的时候 复杂请求设置是涵盖了简单请求需要的设置的</p><p>######简单cors跨域<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">发送简单请求--&gt;服务端检验请求合法性--&gt;请求合法就和正常请求一样、不合法返回跨域错误提示</span><br></pre></td></tr></table></figure><p></p>\n<p>######复杂cors跨域<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">发送预检请求--&gt;服务端检验请求是否合法--&gt;请求合法 发送正式请求、不合法 结束 提示请求不符合服务端检验要求</span><br></pre></td></tr></table></figure><p></p>\n<p>学习地址:<a href=\"http://www.ruanyifeng.com/blog/2016/04/cors.html\" target=\"_blank\" rel=\"noopener\">http://www.ruanyifeng.com/blog/2016/04/cors.html</a></p>"},{"title":"设计模式(一)-六大基本原则","abbrlink":"ae7599d","date":"2017-11-10T16:00:00.000Z","_content":"## 开闭原则(open close princlple)\n \"对扩展开发,对修改关闭\",当程序需要扩展的时候不能去修改源代码，要实现一个热插拔效果。\n\n通过使用接口和抽象类去设计。这样在以后替换方法实现算法的时候只需要实现接口使用这个类就可以了\n\n开闭原则关键步骤是抽象\n\n例如:sf4j 和log4j之间 sf4j定义了日志框架的大部分接口。log4j只是实现sf4j其中一种。\n\n## 里氏替换原则(liskov substitution princlple)\n任何基础类可以出现的地方.他的子类一定可以出现。只有当派生类可以替换基本类。并且软件不受到影响，基础类才能被真正的复用。\n\n里氏替换原则 对抽象化的具体步骤实现的规范 。补充了开闭原则\n\n例如hinernate中orm名称映射规则。如果需要自己制定规则 只需要继承或者实现已有的基础类 就可以把这个类设置成hibernate的orm替换规则\n\n例如:数据库表要求全部是以T_开头 后面采用下划线方式命名 但是entity采用去除T_ 并且采用驼峰式命名这个时候就实现hibernate的转换接口然后设置成自定义的类就行了\n\n##依赖倒转原则(dependence lnversion princlple)\n针对抽象出来的结构编程。依赖抽象出来的类或者接口编程。不依赖具体实现\n\n就是面向接口编程  例子： list  我可以用arraylist 也可以用linkedlist  但是他们都是list接口的方法 \n\n## 接口隔离原则(interface segregation prinalple)\n使用多个隔离的接口比使用单个接口好,降低接口和实现类之间的耦合\n\n## 迪米特法则(demeter princlple) 最少知道法则\n一个类尽量少知道和其它实体之间的相互作用 让系统模块相对独立\n\n## 合成复用原则(composite reuse princlple)\n尽量使用合成和聚合 尽量少使用继承\n\n就是一个复杂类应当由很多小类合成聚合而来  不是继承一个类去做增加\n##总结\n####设计模式就是依赖这些基本法则的最佳实现\n#设计模式笔记参考:http://www.runoob.com/design-pattern/design-pattern-tutorial.html\n","source":"_posts/设计模式/设计模式(一)-六大基本原则.md","raw":"---\ntitle: 设计模式(一)-六大基本原则\ncategories: 笔记\ntags:\n  - 设计模式\nabbrlink: ae7599d\ndate: 2017-11-11 00:00:00\n---\n## 开闭原则(open close princlple)\n \"对扩展开发,对修改关闭\",当程序需要扩展的时候不能去修改源代码，要实现一个热插拔效果。\n\n通过使用接口和抽象类去设计。这样在以后替换方法实现算法的时候只需要实现接口使用这个类就可以了\n\n开闭原则关键步骤是抽象\n\n例如:sf4j 和log4j之间 sf4j定义了日志框架的大部分接口。log4j只是实现sf4j其中一种。\n\n## 里氏替换原则(liskov substitution princlple)\n任何基础类可以出现的地方.他的子类一定可以出现。只有当派生类可以替换基本类。并且软件不受到影响，基础类才能被真正的复用。\n\n里氏替换原则 对抽象化的具体步骤实现的规范 。补充了开闭原则\n\n例如hinernate中orm名称映射规则。如果需要自己制定规则 只需要继承或者实现已有的基础类 就可以把这个类设置成hibernate的orm替换规则\n\n例如:数据库表要求全部是以T_开头 后面采用下划线方式命名 但是entity采用去除T_ 并且采用驼峰式命名这个时候就实现hibernate的转换接口然后设置成自定义的类就行了\n\n##依赖倒转原则(dependence lnversion princlple)\n针对抽象出来的结构编程。依赖抽象出来的类或者接口编程。不依赖具体实现\n\n就是面向接口编程  例子： list  我可以用arraylist 也可以用linkedlist  但是他们都是list接口的方法 \n\n## 接口隔离原则(interface segregation prinalple)\n使用多个隔离的接口比使用单个接口好,降低接口和实现类之间的耦合\n\n## 迪米特法则(demeter princlple) 最少知道法则\n一个类尽量少知道和其它实体之间的相互作用 让系统模块相对独立\n\n## 合成复用原则(composite reuse princlple)\n尽量使用合成和聚合 尽量少使用继承\n\n就是一个复杂类应当由很多小类合成聚合而来  不是继承一个类去做增加\n##总结\n####设计模式就是依赖这些基本法则的最佳实现\n#设计模式笔记参考:http://www.runoob.com/design-pattern/design-pattern-tutorial.html\n","slug":"设计模式/设计模式(一)-六大基本原则","published":1,"updated":"2018-08-17T08:10:03.923Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjo9uau02007hmwczjym9rg3a","content":"<h2 id=\"开闭原则-open-close-princlple\"><a href=\"#开闭原则-open-close-princlple\" class=\"headerlink\" title=\"开闭原则(open close princlple)\"></a>开闭原则(open close princlple)</h2><p>“对扩展开发,对修改关闭”,当程序需要扩展的时候不能去修改源代码，要实现一个热插拔效果。</p><p>通过使用接口和抽象类去设计。这样在以后替换方法实现算法的时候只需要实现接口使用这个类就可以了</p><p>开闭原则关键步骤是抽象</p><p>例如:sf4j 和log4j之间 sf4j定义了日志框架的大部分接口。log4j只是实现sf4j其中一种。</p><h2 id=\"里氏替换原则-liskov-substitution-princlple\"><a href=\"#里氏替换原则-liskov-substitution-princlple\" class=\"headerlink\" title=\"里氏替换原则(liskov substitution princlple)\"></a>里氏替换原则(liskov substitution princlple)</h2><p>任何基础类可以出现的地方.他的子类一定可以出现。只有当派生类可以替换基本类。并且软件不受到影响，基础类才能被真正的复用。</p><p>里氏替换原则 对抽象化的具体步骤实现的规范 。补充了开闭原则</p><p>例如hinernate中orm名称映射规则。如果需要自己制定规则 只需要继承或者实现已有的基础类 就可以把这个类设置成hibernate的orm替换规则</p><p>例如:数据库表要求全部是以T<em>开头 后面采用下划线方式命名 但是entity采用去除T</em> 并且采用驼峰式命名这个时候就实现hibernate的转换接口然后设置成自定义的类就行了</p><p>##依赖倒转原则(dependence lnversion princlple)<br>针对抽象出来的结构编程。依赖抽象出来的类或者接口编程。不依赖具体实现</p><p>就是面向接口编程 例子： list 我可以用arraylist 也可以用linkedlist 但是他们都是list接口的方法</p><h2 id=\"接口隔离原则-interface-segregation-prinalple\"><a href=\"#接口隔离原则-interface-segregation-prinalple\" class=\"headerlink\" title=\"接口隔离原则(interface segregation prinalple)\"></a>接口隔离原则(interface segregation prinalple)</h2><p>使用多个隔离的接口比使用单个接口好,降低接口和实现类之间的耦合</p><h2 id=\"迪米特法则-demeter-princlple-最少知道法则\"><a href=\"#迪米特法则-demeter-princlple-最少知道法则\" class=\"headerlink\" title=\"迪米特法则(demeter princlple) 最少知道法则\"></a>迪米特法则(demeter princlple) 最少知道法则</h2><p>一个类尽量少知道和其它实体之间的相互作用 让系统模块相对独立</p><h2 id=\"合成复用原则-composite-reuse-princlple\"><a href=\"#合成复用原则-composite-reuse-princlple\" class=\"headerlink\" title=\"合成复用原则(composite reuse princlple)\"></a>合成复用原则(composite reuse princlple)</h2><p>尽量使用合成和聚合 尽量少使用继承</p><p>就是一个复杂类应当由很多小类合成聚合而来 不是继承一个类去做增加</p><p>##总结</p><p>####设计模式就是依赖这些基本法则的最佳实现</p><p>#设计模式笔记参考:<a href=\"http://www.runoob.com/design-pattern/design-pattern-tutorial.html\" target=\"_blank\" rel=\"noopener\">http://www.runoob.com/design-pattern/design-pattern-tutorial.html</a></p>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"开闭原则-open-close-princlple\"><a href=\"#开闭原则-open-close-princlple\" class=\"headerlink\" title=\"开闭原则(open close princlple)\"></a>开闭原则(open close princlple)</h2><p>“对扩展开发,对修改关闭”,当程序需要扩展的时候不能去修改源代码，要实现一个热插拔效果。</p><p>通过使用接口和抽象类去设计。这样在以后替换方法实现算法的时候只需要实现接口使用这个类就可以了</p><p>开闭原则关键步骤是抽象</p><p>例如:sf4j 和log4j之间 sf4j定义了日志框架的大部分接口。log4j只是实现sf4j其中一种。</p><h2 id=\"里氏替换原则-liskov-substitution-princlple\"><a href=\"#里氏替换原则-liskov-substitution-princlple\" class=\"headerlink\" title=\"里氏替换原则(liskov substitution princlple)\"></a>里氏替换原则(liskov substitution princlple)</h2><p>任何基础类可以出现的地方.他的子类一定可以出现。只有当派生类可以替换基本类。并且软件不受到影响，基础类才能被真正的复用。</p><p>里氏替换原则 对抽象化的具体步骤实现的规范 。补充了开闭原则</p><p>例如hinernate中orm名称映射规则。如果需要自己制定规则 只需要继承或者实现已有的基础类 就可以把这个类设置成hibernate的orm替换规则</p><p>例如:数据库表要求全部是以T<em>开头 后面采用下划线方式命名 但是entity采用去除T</em> 并且采用驼峰式命名这个时候就实现hibernate的转换接口然后设置成自定义的类就行了</p><p>##依赖倒转原则(dependence lnversion princlple)<br>针对抽象出来的结构编程。依赖抽象出来的类或者接口编程。不依赖具体实现</p><p>就是面向接口编程 例子： list 我可以用arraylist 也可以用linkedlist 但是他们都是list接口的方法</p><h2 id=\"接口隔离原则-interface-segregation-prinalple\"><a href=\"#接口隔离原则-interface-segregation-prinalple\" class=\"headerlink\" title=\"接口隔离原则(interface segregation prinalple)\"></a>接口隔离原则(interface segregation prinalple)</h2><p>使用多个隔离的接口比使用单个接口好,降低接口和实现类之间的耦合</p><h2 id=\"迪米特法则-demeter-princlple-最少知道法则\"><a href=\"#迪米特法则-demeter-princlple-最少知道法则\" class=\"headerlink\" title=\"迪米特法则(demeter princlple) 最少知道法则\"></a>迪米特法则(demeter princlple) 最少知道法则</h2><p>一个类尽量少知道和其它实体之间的相互作用 让系统模块相对独立</p><h2 id=\"合成复用原则-composite-reuse-princlple\"><a href=\"#合成复用原则-composite-reuse-princlple\" class=\"headerlink\" title=\"合成复用原则(composite reuse princlple)\"></a>合成复用原则(composite reuse princlple)</h2><p>尽量使用合成和聚合 尽量少使用继承</p><p>就是一个复杂类应当由很多小类合成聚合而来 不是继承一个类去做增加</p><p>##总结</p><p>####设计模式就是依赖这些基本法则的最佳实现</p><p>#设计模式笔记参考:<a href=\"http://www.runoob.com/design-pattern/design-pattern-tutorial.html\" target=\"_blank\" rel=\"noopener\">http://www.runoob.com/design-pattern/design-pattern-tutorial.html</a></p>"},{"title":"设计模式(二)-23种设计模式分类和基本概述","abbrlink":"18dacc63","date":"2017-11-10T16:00:00.000Z","_content":"##创建型模式：提供在创建对象的时候的逻辑，不是直接使用运算符如new这样的形式来实例化对象，\n模式名称  | 模式概述 | 备注\n-----|:------------|:-----\n工厂模式(Factory Pattern) | 就是一个产品加工共厂的套路  负责产生一些大致相似的产品  |  例如生产娃娃的加工厂 生产娃娃 有的是充气的 有的是硅胶的 但是你只需要指定是使用什么材料 就可以通过工厂产生出来\n抽象工厂模式(Abstract Factory Pattern)| 工厂的工厂 用来生产工厂的工厂| 例如我有建造硅胶产品工厂的能力 我可以拿来建立娃娃工厂、我也可以拿来建立其他硅胶产品工厂 \n单例模式(Singleton Pattern)| 一个类只能有一个对象，并且是需要线程安全的创建 | 在国内一个人名义上是只能有一个老婆的，如果你想两个合法老婆 那就违法了 也就是线程不安全了\n建造者模式(Builder Pattern)| 在将类组合成复杂对象的时候 被组合的类是变化的 但是组合的方式是固定的 | 例如娃娃工厂 里面需要很多基本的设备 什么融合材料的设备、将材料做成模型的设备、模型组合设备等等。他们大致组合顺序是固定的但是设备选择不一定，可以买国产货也可以使用其他国家的机器。\n原型模式(Prototype Pattern)| 先创建一个原型 以后在需要这个对象 直接克隆  | 例如生产娃娃  你有一个波多XXX 啥的娃娃 但是她的制作工艺比较复杂  那这个时候可以通过这个娃娃去做一套模具来进行克隆 这样就能保证快速 完整的作出波多XXX样式的娃娃\n\n##结构型模式：关注类和对象的组合，用继承来组合接口和定义组合对象获取新功能的方式\n模式名称  | 模式概述 | 备注\n--------|:---------|:-----\n适配器模式(Adapter Pattern)|就是一个类似转接头的东西 主要是针对类的兼容性做改变 让旧类和新类进行兼容|例如苹果7手机 它本身是不能直接使用ust数据线链接电脑的必须找个type-c转换成usb接口的设备来做个适配\n桥接模式(Bridge Pattern)||\n过滤器模式(Filter\\Criteria Pattern)||\n组合模式(Composite Pattern)||\n装饰器模式(Decorator Pattern)||\n外观模式(Facade Pattern)||\n享元模式(Flyweight Pattern)||\n代理模式(Proxy Pattern)||\n\n##行为型模式:关注对象之间的通信\n模式名称  | 模式概述 | 备注\n--------|:---------|:-----\n责任链模式(Chain of Responsibllity Pattern)||\n命令模式(Command Pattern)||\n解释器模式(InterPreTer Pattern)||\n迭代器模式(Iterator Pattern)||\n中介者模式(Mediator Pattern)||\n备忘录模式(Memento Pattern)||\n观察者模式(Observer Pattern)||\n状态模式(State Pattern)||\n空对象模式(null object Pattern)||\n策略模式(strategy Pattern)||\n模板模式(Template Pattern)||\n访问者模式(Visitor Pattern)||\n","source":"_posts/设计模式/设计模式(二)-23种设计模式分类和基本概述.md","raw":"---\ntitle: 设计模式(二)-23种设计模式分类和基本概述\ncategories: 笔记\ntags:\n  - 设计模式\nabbrlink: 18dacc63\ndate: 2017-11-11 00:00:00\n---\n##创建型模式：提供在创建对象的时候的逻辑，不是直接使用运算符如new这样的形式来实例化对象，\n模式名称  | 模式概述 | 备注\n-----|:------------|:-----\n工厂模式(Factory Pattern) | 就是一个产品加工共厂的套路  负责产生一些大致相似的产品  |  例如生产娃娃的加工厂 生产娃娃 有的是充气的 有的是硅胶的 但是你只需要指定是使用什么材料 就可以通过工厂产生出来\n抽象工厂模式(Abstract Factory Pattern)| 工厂的工厂 用来生产工厂的工厂| 例如我有建造硅胶产品工厂的能力 我可以拿来建立娃娃工厂、我也可以拿来建立其他硅胶产品工厂 \n单例模式(Singleton Pattern)| 一个类只能有一个对象，并且是需要线程安全的创建 | 在国内一个人名义上是只能有一个老婆的，如果你想两个合法老婆 那就违法了 也就是线程不安全了\n建造者模式(Builder Pattern)| 在将类组合成复杂对象的时候 被组合的类是变化的 但是组合的方式是固定的 | 例如娃娃工厂 里面需要很多基本的设备 什么融合材料的设备、将材料做成模型的设备、模型组合设备等等。他们大致组合顺序是固定的但是设备选择不一定，可以买国产货也可以使用其他国家的机器。\n原型模式(Prototype Pattern)| 先创建一个原型 以后在需要这个对象 直接克隆  | 例如生产娃娃  你有一个波多XXX 啥的娃娃 但是她的制作工艺比较复杂  那这个时候可以通过这个娃娃去做一套模具来进行克隆 这样就能保证快速 完整的作出波多XXX样式的娃娃\n\n##结构型模式：关注类和对象的组合，用继承来组合接口和定义组合对象获取新功能的方式\n模式名称  | 模式概述 | 备注\n--------|:---------|:-----\n适配器模式(Adapter Pattern)|就是一个类似转接头的东西 主要是针对类的兼容性做改变 让旧类和新类进行兼容|例如苹果7手机 它本身是不能直接使用ust数据线链接电脑的必须找个type-c转换成usb接口的设备来做个适配\n桥接模式(Bridge Pattern)||\n过滤器模式(Filter\\Criteria Pattern)||\n组合模式(Composite Pattern)||\n装饰器模式(Decorator Pattern)||\n外观模式(Facade Pattern)||\n享元模式(Flyweight Pattern)||\n代理模式(Proxy Pattern)||\n\n##行为型模式:关注对象之间的通信\n模式名称  | 模式概述 | 备注\n--------|:---------|:-----\n责任链模式(Chain of Responsibllity Pattern)||\n命令模式(Command Pattern)||\n解释器模式(InterPreTer Pattern)||\n迭代器模式(Iterator Pattern)||\n中介者模式(Mediator Pattern)||\n备忘录模式(Memento Pattern)||\n观察者模式(Observer Pattern)||\n状态模式(State Pattern)||\n空对象模式(null object Pattern)||\n策略模式(strategy Pattern)||\n模板模式(Template Pattern)||\n访问者模式(Visitor Pattern)||\n","slug":"设计模式/设计模式(二)-23种设计模式分类和基本概述","published":1,"updated":"2018-08-17T08:10:03.923Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjo9uau04007jmwczhml6ji6p","content":"<p>##创建型模式：提供在创建对象的时候的逻辑，不是直接使用运算符如new这样的形式来实例化对象，<br>模式名称 | 模式概述 | 备注<br>—–|:————|:—–<br>工厂模式(Factory Pattern) | 就是一个产品加工共厂的套路 负责产生一些大致相似的产品 | 例如生产娃娃的加工厂 生产娃娃 有的是充气的 有的是硅胶的 但是你只需要指定是使用什么材料 就可以通过工厂产生出来<br>抽象工厂模式(Abstract Factory Pattern)| 工厂的工厂 用来生产工厂的工厂| 例如我有建造硅胶产品工厂的能力 我可以拿来建立娃娃工厂、我也可以拿来建立其他硅胶产品工厂<br>单例模式(Singleton Pattern)| 一个类只能有一个对象，并且是需要线程安全的创建 | 在国内一个人名义上是只能有一个老婆的，如果你想两个合法老婆 那就违法了 也就是线程不安全了<br>建造者模式(Builder Pattern)| 在将类组合成复杂对象的时候 被组合的类是变化的 但是组合的方式是固定的 | 例如娃娃工厂 里面需要很多基本的设备 什么融合材料的设备、将材料做成模型的设备、模型组合设备等等。他们大致组合顺序是固定的但是设备选择不一定，可以买国产货也可以使用其他国家的机器。<br>原型模式(Prototype Pattern)| 先创建一个原型 以后在需要这个对象 直接克隆 | 例如生产娃娃 你有一个波多XXX 啥的娃娃 但是她的制作工艺比较复杂 那这个时候可以通过这个娃娃去做一套模具来进行克隆 这样就能保证快速 完整的作出波多XXX样式的娃娃</p><p>##结构型模式：关注类和对象的组合，用继承来组合接口和定义组合对象获取新功能的方式<br>模式名称 | 模式概述 | 备注<br>——–|:———|:—–<br>适配器模式(Adapter Pattern)|就是一个类似转接头的东西 主要是针对类的兼容性做改变 让旧类和新类进行兼容|例如苹果7手机 它本身是不能直接使用ust数据线链接电脑的必须找个type-c转换成usb接口的设备来做个适配<br>桥接模式(Bridge Pattern)||<br>过滤器模式(Filter\\Criteria Pattern)||<br>组合模式(Composite Pattern)||<br>装饰器模式(Decorator Pattern)||<br>外观模式(Facade Pattern)||<br>享元模式(Flyweight Pattern)||<br>代理模式(Proxy Pattern)||</p><p>##行为型模式:关注对象之间的通信<br>模式名称 | 模式概述 | 备注<br>——–|:———|:—–<br>责任链模式(Chain of Responsibllity Pattern)||<br>命令模式(Command Pattern)||<br>解释器模式(InterPreTer Pattern)||<br>迭代器模式(Iterator Pattern)||<br>中介者模式(Mediator Pattern)||<br>备忘录模式(Memento Pattern)||<br>观察者模式(Observer Pattern)||<br>状态模式(State Pattern)||<br>空对象模式(null object Pattern)||<br>策略模式(strategy Pattern)||<br>模板模式(Template Pattern)||<br>访问者模式(Visitor Pattern)||</p>","site":{"data":{}},"excerpt":"","more":"<p>##创建型模式：提供在创建对象的时候的逻辑，不是直接使用运算符如new这样的形式来实例化对象，<br>模式名称 | 模式概述 | 备注<br>—–|:————|:—–<br>工厂模式(Factory Pattern) | 就是一个产品加工共厂的套路 负责产生一些大致相似的产品 | 例如生产娃娃的加工厂 生产娃娃 有的是充气的 有的是硅胶的 但是你只需要指定是使用什么材料 就可以通过工厂产生出来<br>抽象工厂模式(Abstract Factory Pattern)| 工厂的工厂 用来生产工厂的工厂| 例如我有建造硅胶产品工厂的能力 我可以拿来建立娃娃工厂、我也可以拿来建立其他硅胶产品工厂<br>单例模式(Singleton Pattern)| 一个类只能有一个对象，并且是需要线程安全的创建 | 在国内一个人名义上是只能有一个老婆的，如果你想两个合法老婆 那就违法了 也就是线程不安全了<br>建造者模式(Builder Pattern)| 在将类组合成复杂对象的时候 被组合的类是变化的 但是组合的方式是固定的 | 例如娃娃工厂 里面需要很多基本的设备 什么融合材料的设备、将材料做成模型的设备、模型组合设备等等。他们大致组合顺序是固定的但是设备选择不一定，可以买国产货也可以使用其他国家的机器。<br>原型模式(Prototype Pattern)| 先创建一个原型 以后在需要这个对象 直接克隆 | 例如生产娃娃 你有一个波多XXX 啥的娃娃 但是她的制作工艺比较复杂 那这个时候可以通过这个娃娃去做一套模具来进行克隆 这样就能保证快速 完整的作出波多XXX样式的娃娃</p><p>##结构型模式：关注类和对象的组合，用继承来组合接口和定义组合对象获取新功能的方式<br>模式名称 | 模式概述 | 备注<br>——–|:———|:—–<br>适配器模式(Adapter Pattern)|就是一个类似转接头的东西 主要是针对类的兼容性做改变 让旧类和新类进行兼容|例如苹果7手机 它本身是不能直接使用ust数据线链接电脑的必须找个type-c转换成usb接口的设备来做个适配<br>桥接模式(Bridge Pattern)||<br>过滤器模式(Filter\\Criteria Pattern)||<br>组合模式(Composite Pattern)||<br>装饰器模式(Decorator Pattern)||<br>外观模式(Facade Pattern)||<br>享元模式(Flyweight Pattern)||<br>代理模式(Proxy Pattern)||</p><p>##行为型模式:关注对象之间的通信<br>模式名称 | 模式概述 | 备注<br>——–|:———|:—–<br>责任链模式(Chain of Responsibllity Pattern)||<br>命令模式(Command Pattern)||<br>解释器模式(InterPreTer Pattern)||<br>迭代器模式(Iterator Pattern)||<br>中介者模式(Mediator Pattern)||<br>备忘录模式(Memento Pattern)||<br>观察者模式(Observer Pattern)||<br>状态模式(State Pattern)||<br>空对象模式(null object Pattern)||<br>策略模式(strategy Pattern)||<br>模板模式(Template Pattern)||<br>访问者模式(Visitor Pattern)||</p>"},{"title":"设计模式笔记(七)：创建型-原型模式","abbrlink":"5a9f0461","date":"2017-11-10T16:00:00.000Z","_content":"##原型模式：（Prototype Pattern）\n####意图\n用原型实例来指定创建对象的种类，并且通过拷贝这些原型创建新的对象 \n####主要解决\n在运行期建立和删除原型\n####何时使用\n1：当一个系统应该独立于它产品创建构成和表示的时候。\n2：当要实例化的类是在运行时刻指定的时候 ，例如动态装载\n3：为了避免创建一个与产品类层次平行的工厂类层次\n4：当一个类的实例智能有几个不同状态组合中的一种时候，建立相应数目的原型并克隆他们 比每次用合适的状态的手工实例化该 类更方便一些\n####如何解决\n利用已有的一个原型对象，快速生成和原型对象一样的实例\n####关键代码\n1：实现克隆操作 利用Cloneable 重写clone(),\n2:原型模式同样用于隔离类对象使用者和具体类型（易变类）之间耦合关系，要求易变类拥有稳定的接口\n####实例\n1：细胞分裂\n2：java object clone() 方法\n####优点\n1：提高性能\n2：避免构造函数约束\n####缺点\n1：配备克隆方法需要对类的功能进行通盘考虑，对于全新的类不麻烦，但是对于已经有的类不容易实现，特别是一个类引用不支持串行化的间接对象或者引用含有循环结构的适合\n2：必须实现Cloneable接口\n3：逃避构造函数约束\n####使用场景\n1：资源优化\n2：类初始化需要很多资源，\n3：性能和安全要求场景\n4：通过new产生对象需要非常繁琐的数据准备或者访问权限\n5：一个对象多个修改者\n6：一个对象需要提供给其他对象访问，并且多个调用者都需要修改其值，\n7：实际项目中原型模式常根工厂模式一起，通过clone创建一个对象，如何由工厂方法提供给调用者，\n####注意\n和对一个类来实例化创建对象不同的是，原型模式是通过一个现有的对象生成一个新的对象，浅拷贝通过Cloneable ，深拷贝通过Serializable读取二进制流\n####总结：通过实现cloneable的clone（） 方法来实现浅克隆  通过序列化获取二进制流 来进行深度克隆 就是自行创建一个可靠安全的原型 通过克隆方式获得该对象\n####代码地址：https://github.com/xuxianyu/myGitHub/tree/master/DisignPattern/src/main/java/com/xxx/create/Prototype\n","source":"_posts/设计模式/设计模式笔记(七)：创建型-原型模式.md","raw":"---\ntitle: 设计模式笔记(七)：创建型-原型模式\ncategories: 笔记\ntags:\n  - 设计模式\nabbrlink: 5a9f0461\ndate: 2017-11-11 00:00:00\n---\n##原型模式：（Prototype Pattern）\n####意图\n用原型实例来指定创建对象的种类，并且通过拷贝这些原型创建新的对象 \n####主要解决\n在运行期建立和删除原型\n####何时使用\n1：当一个系统应该独立于它产品创建构成和表示的时候。\n2：当要实例化的类是在运行时刻指定的时候 ，例如动态装载\n3：为了避免创建一个与产品类层次平行的工厂类层次\n4：当一个类的实例智能有几个不同状态组合中的一种时候，建立相应数目的原型并克隆他们 比每次用合适的状态的手工实例化该 类更方便一些\n####如何解决\n利用已有的一个原型对象，快速生成和原型对象一样的实例\n####关键代码\n1：实现克隆操作 利用Cloneable 重写clone(),\n2:原型模式同样用于隔离类对象使用者和具体类型（易变类）之间耦合关系，要求易变类拥有稳定的接口\n####实例\n1：细胞分裂\n2：java object clone() 方法\n####优点\n1：提高性能\n2：避免构造函数约束\n####缺点\n1：配备克隆方法需要对类的功能进行通盘考虑，对于全新的类不麻烦，但是对于已经有的类不容易实现，特别是一个类引用不支持串行化的间接对象或者引用含有循环结构的适合\n2：必须实现Cloneable接口\n3：逃避构造函数约束\n####使用场景\n1：资源优化\n2：类初始化需要很多资源，\n3：性能和安全要求场景\n4：通过new产生对象需要非常繁琐的数据准备或者访问权限\n5：一个对象多个修改者\n6：一个对象需要提供给其他对象访问，并且多个调用者都需要修改其值，\n7：实际项目中原型模式常根工厂模式一起，通过clone创建一个对象，如何由工厂方法提供给调用者，\n####注意\n和对一个类来实例化创建对象不同的是，原型模式是通过一个现有的对象生成一个新的对象，浅拷贝通过Cloneable ，深拷贝通过Serializable读取二进制流\n####总结：通过实现cloneable的clone（） 方法来实现浅克隆  通过序列化获取二进制流 来进行深度克隆 就是自行创建一个可靠安全的原型 通过克隆方式获得该对象\n####代码地址：https://github.com/xuxianyu/myGitHub/tree/master/DisignPattern/src/main/java/com/xxx/create/Prototype\n","slug":"设计模式/设计模式笔记(七)：创建型-原型模式","published":1,"updated":"2018-08-17T08:10:03.923Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjo9uau06007nmwczzigont19","content":"<p>##原型模式：（Prototype Pattern）</p><p>####意图<br>用原型实例来指定创建对象的种类，并且通过拷贝这些原型创建新的对象</p><p>####主要解决<br>在运行期建立和删除原型</p><p>####何时使用<br>1：当一个系统应该独立于它产品创建构成和表示的时候。<br>2：当要实例化的类是在运行时刻指定的时候 ，例如动态装载<br>3：为了避免创建一个与产品类层次平行的工厂类层次<br>4：当一个类的实例智能有几个不同状态组合中的一种时候，建立相应数目的原型并克隆他们 比每次用合适的状态的手工实例化该 类更方便一些</p><p>####如何解决<br>利用已有的一个原型对象，快速生成和原型对象一样的实例</p><p>####关键代码<br>1：实现克隆操作 利用Cloneable 重写clone(),<br>2:原型模式同样用于隔离类对象使用者和具体类型（易变类）之间耦合关系，要求易变类拥有稳定的接口</p><p>####实例<br>1：细胞分裂<br>2：java object clone() 方法</p><p>####优点<br>1：提高性能<br>2：避免构造函数约束</p><p>####缺点<br>1：配备克隆方法需要对类的功能进行通盘考虑，对于全新的类不麻烦，但是对于已经有的类不容易实现，特别是一个类引用不支持串行化的间接对象或者引用含有循环结构的适合<br>2：必须实现Cloneable接口<br>3：逃避构造函数约束</p><p>####使用场景<br>1：资源优化<br>2：类初始化需要很多资源，<br>3：性能和安全要求场景<br>4：通过new产生对象需要非常繁琐的数据准备或者访问权限<br>5：一个对象多个修改者<br>6：一个对象需要提供给其他对象访问，并且多个调用者都需要修改其值，<br>7：实际项目中原型模式常根工厂模式一起，通过clone创建一个对象，如何由工厂方法提供给调用者，</p><p>####注意<br>和对一个类来实例化创建对象不同的是，原型模式是通过一个现有的对象生成一个新的对象，浅拷贝通过Cloneable ，深拷贝通过Serializable读取二进制流</p><p>####总结：通过实现cloneable的clone（） 方法来实现浅克隆 通过序列化获取二进制流 来进行深度克隆 就是自行创建一个可靠安全的原型 通过克隆方式获得该对象</p><p>####代码地址：<a href=\"https://github.com/xuxianyu/myGitHub/tree/master/DisignPattern/src/main/java/com/xxx/create/Prototype\" target=\"_blank\" rel=\"noopener\">https://github.com/xuxianyu/myGitHub/tree/master/DisignPattern/src/main/java/com/xxx/create/Prototype</a></p>","site":{"data":{}},"excerpt":"","more":"<p>##原型模式：（Prototype Pattern）</p><p>####意图<br>用原型实例来指定创建对象的种类，并且通过拷贝这些原型创建新的对象</p><p>####主要解决<br>在运行期建立和删除原型</p><p>####何时使用<br>1：当一个系统应该独立于它产品创建构成和表示的时候。<br>2：当要实例化的类是在运行时刻指定的时候 ，例如动态装载<br>3：为了避免创建一个与产品类层次平行的工厂类层次<br>4：当一个类的实例智能有几个不同状态组合中的一种时候，建立相应数目的原型并克隆他们 比每次用合适的状态的手工实例化该 类更方便一些</p><p>####如何解决<br>利用已有的一个原型对象，快速生成和原型对象一样的实例</p><p>####关键代码<br>1：实现克隆操作 利用Cloneable 重写clone(),<br>2:原型模式同样用于隔离类对象使用者和具体类型（易变类）之间耦合关系，要求易变类拥有稳定的接口</p><p>####实例<br>1：细胞分裂<br>2：java object clone() 方法</p><p>####优点<br>1：提高性能<br>2：避免构造函数约束</p><p>####缺点<br>1：配备克隆方法需要对类的功能进行通盘考虑，对于全新的类不麻烦，但是对于已经有的类不容易实现，特别是一个类引用不支持串行化的间接对象或者引用含有循环结构的适合<br>2：必须实现Cloneable接口<br>3：逃避构造函数约束</p><p>####使用场景<br>1：资源优化<br>2：类初始化需要很多资源，<br>3：性能和安全要求场景<br>4：通过new产生对象需要非常繁琐的数据准备或者访问权限<br>5：一个对象多个修改者<br>6：一个对象需要提供给其他对象访问，并且多个调用者都需要修改其值，<br>7：实际项目中原型模式常根工厂模式一起，通过clone创建一个对象，如何由工厂方法提供给调用者，</p><p>####注意<br>和对一个类来实例化创建对象不同的是，原型模式是通过一个现有的对象生成一个新的对象，浅拷贝通过Cloneable ，深拷贝通过Serializable读取二进制流</p><p>####总结：通过实现cloneable的clone（） 方法来实现浅克隆 通过序列化获取二进制流 来进行深度克隆 就是自行创建一个可靠安全的原型 通过克隆方式获得该对象</p><p>####代码地址：<a href=\"https://github.com/xuxianyu/myGitHub/tree/master/DisignPattern/src/main/java/com/xxx/create/Prototype\" target=\"_blank\" rel=\"noopener\">https://github.com/xuxianyu/myGitHub/tree/master/DisignPattern/src/main/java/com/xxx/create/Prototype</a></p>"},{"title":"设计模式笔记(三)：创建型-工厂模式","abbrlink":"80d0f7f9","date":"2017-11-10T16:00:00.000Z","_content":"##工厂模式(factory pattern):\n\t\t\t\n####意图\n定义一个创建对象的接口。让其子类决定实例化那一个工程类，工厂模式将其创建过程延迟到子类中\n####主要解决\n主要解决接口选择问题。\n####何时使用\n在不同条件下创建不同实例。\n####如何解决\n让其子类实现工厂接口，返回的也是一个抽象的产品。\n关键代码\n创建过程在其子类中执行。\n####优点\n1,一个调用者创建一个对象。只要知道对象名旧可以 。 \n\n2,扩展性高，想增加一个产品，扩展一个工厂类就可以。\n3,屏蔽产品实现。调用者只需要知道产品接口。\n####缺点\n每次增加产品，都需要增减一个实现类和对象实现工厂，增加系统复杂度。增加系统具体类依赖\n####使用场景\n1，日志记录，记录可能记录到硬盘，数据库，用户可以选择记录到哪里\n 2,数据库访问，当用户不知道访问什么类型数据库的时候，hibernate方言就是这\n3,设计链接服务器的框架，需要三个协议“pop3”，“imap”，“http” 设计成产品类，共同实现一个接口。\n####注意事项\n当需要生成一个复杂对象的时候使用。如果是简单对象。不要使用工厂模式。会增加系统复杂度\n\n####个人总结：工厂模式适合在那些大体相同。但是细节不同的相似对象。例如hibernate方言。为了能自动选择方言编写的自动方言工厂类，但是工厂模式不适用于简单对象。\n####代码地址：https://github.com/xuxianyu/myGitHub/tree/master/DisignPattern/src/main/java/com/xxx/create/factory\n","source":"_posts/设计模式/设计模式笔记(三)：创建型-工厂模式.md","raw":"---\ntitle: 设计模式笔记(三)：创建型-工厂模式\ncategories: 笔记\ntags:\n  - 设计模式\nabbrlink: 80d0f7f9\ndate: 2017-11-11 00:00:00\n---\n##工厂模式(factory pattern):\n\t\t\t\n####意图\n定义一个创建对象的接口。让其子类决定实例化那一个工程类，工厂模式将其创建过程延迟到子类中\n####主要解决\n主要解决接口选择问题。\n####何时使用\n在不同条件下创建不同实例。\n####如何解决\n让其子类实现工厂接口，返回的也是一个抽象的产品。\n关键代码\n创建过程在其子类中执行。\n####优点\n1,一个调用者创建一个对象。只要知道对象名旧可以 。 \n\n2,扩展性高，想增加一个产品，扩展一个工厂类就可以。\n3,屏蔽产品实现。调用者只需要知道产品接口。\n####缺点\n每次增加产品，都需要增减一个实现类和对象实现工厂，增加系统复杂度。增加系统具体类依赖\n####使用场景\n1，日志记录，记录可能记录到硬盘，数据库，用户可以选择记录到哪里\n 2,数据库访问，当用户不知道访问什么类型数据库的时候，hibernate方言就是这\n3,设计链接服务器的框架，需要三个协议“pop3”，“imap”，“http” 设计成产品类，共同实现一个接口。\n####注意事项\n当需要生成一个复杂对象的时候使用。如果是简单对象。不要使用工厂模式。会增加系统复杂度\n\n####个人总结：工厂模式适合在那些大体相同。但是细节不同的相似对象。例如hibernate方言。为了能自动选择方言编写的自动方言工厂类，但是工厂模式不适用于简单对象。\n####代码地址：https://github.com/xuxianyu/myGitHub/tree/master/DisignPattern/src/main/java/com/xxx/create/factory\n","slug":"设计模式/设计模式笔记(三)：创建型-工厂模式","published":1,"updated":"2018-08-17T08:10:03.923Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjo9uau08007qmwcziomprbkn","content":"<p>##工厂模式(factory pattern):</p><p>####意图<br>定义一个创建对象的接口。让其子类决定实例化那一个工程类，工厂模式将其创建过程延迟到子类中</p><p>####主要解决<br>主要解决接口选择问题。</p><p>####何时使用<br>在不同条件下创建不同实例。</p><p>####如何解决<br>让其子类实现工厂接口，返回的也是一个抽象的产品。<br>关键代码<br>创建过程在其子类中执行。</p><p>####优点<br>1,一个调用者创建一个对象。只要知道对象名旧可以 。</p><p>2,扩展性高，想增加一个产品，扩展一个工厂类就可以。<br>3,屏蔽产品实现。调用者只需要知道产品接口。</p><p>####缺点<br>每次增加产品，都需要增减一个实现类和对象实现工厂，增加系统复杂度。增加系统具体类依赖</p><p>####使用场景<br>1，日志记录，记录可能记录到硬盘，数据库，用户可以选择记录到哪里<br>2,数据库访问，当用户不知道访问什么类型数据库的时候，hibernate方言就是这<br>3,设计链接服务器的框架，需要三个协议“pop3”，“imap”，“http” 设计成产品类，共同实现一个接口。</p><p>####注意事项<br>当需要生成一个复杂对象的时候使用。如果是简单对象。不要使用工厂模式。会增加系统复杂度</p><p>####个人总结：工厂模式适合在那些大体相同。但是细节不同的相似对象。例如hibernate方言。为了能自动选择方言编写的自动方言工厂类，但是工厂模式不适用于简单对象。</p><p>####代码地址：<a href=\"https://github.com/xuxianyu/myGitHub/tree/master/DisignPattern/src/main/java/com/xxx/create/factory\" target=\"_blank\" rel=\"noopener\">https://github.com/xuxianyu/myGitHub/tree/master/DisignPattern/src/main/java/com/xxx/create/factory</a></p>","site":{"data":{}},"excerpt":"","more":"<p>##工厂模式(factory pattern):</p><p>####意图<br>定义一个创建对象的接口。让其子类决定实例化那一个工程类，工厂模式将其创建过程延迟到子类中</p><p>####主要解决<br>主要解决接口选择问题。</p><p>####何时使用<br>在不同条件下创建不同实例。</p><p>####如何解决<br>让其子类实现工厂接口，返回的也是一个抽象的产品。<br>关键代码<br>创建过程在其子类中执行。</p><p>####优点<br>1,一个调用者创建一个对象。只要知道对象名旧可以 。</p><p>2,扩展性高，想增加一个产品，扩展一个工厂类就可以。<br>3,屏蔽产品实现。调用者只需要知道产品接口。</p><p>####缺点<br>每次增加产品，都需要增减一个实现类和对象实现工厂，增加系统复杂度。增加系统具体类依赖</p><p>####使用场景<br>1，日志记录，记录可能记录到硬盘，数据库，用户可以选择记录到哪里<br>2,数据库访问，当用户不知道访问什么类型数据库的时候，hibernate方言就是这<br>3,设计链接服务器的框架，需要三个协议“pop3”，“imap”，“http” 设计成产品类，共同实现一个接口。</p><p>####注意事项<br>当需要生成一个复杂对象的时候使用。如果是简单对象。不要使用工厂模式。会增加系统复杂度</p><p>####个人总结：工厂模式适合在那些大体相同。但是细节不同的相似对象。例如hibernate方言。为了能自动选择方言编写的自动方言工厂类，但是工厂模式不适用于简单对象。</p><p>####代码地址：<a href=\"https://github.com/xuxianyu/myGitHub/tree/master/DisignPattern/src/main/java/com/xxx/create/factory\" target=\"_blank\" rel=\"noopener\">https://github.com/xuxianyu/myGitHub/tree/master/DisignPattern/src/main/java/com/xxx/create/factory</a></p>"},{"title":"设计模式笔记(九)：结构型-桥接模式","abbrlink":"ca9f8bd1","date":"2017-11-10T16:00:00.000Z","_content":"##桥接模式(Bridge Pattern)\n####意图\n将抽象部分和实现部分分离，使他们可以独立变化\n####主要解决\n在多种可能变化的情况下，用继承会造成类爆炸的问题，不好扩展\n####何时使用\n实现系统可以有多个角度分类，每一个角度都可能变化\n####如何解决\n把这种多角度分类分离出来，让他们独立变化，减少之间的耦合\n####关键代码\n抽象类依赖实现类\n####应用实例\n1：猪八戒从天蓬元帅投胎到猪转世投胎机制将尘世划分为肉体和灵魂 ，前者相当于实现化，后者相当于抽象化，生灵通过功能委派，调用肉体对象，\n2：开关\n####优点\n1：抽象和实现分离\n2：优秀扩展能力\n3：实现细节对客户透明\n####缺点\n桥接模式会增加系统理解和设计难度，由于聚合关联关系在抽象层，需要开发者对抽象进行设计和编程\n####使用场景\n1：如果一个系统需要在组件抽象化角色和具体化角色之间有更多的灵活性，避免在两个层次之间建立静态继承关系，通过桥接模式可以使他们在抽象层建立一个关联关系\n2：对于不希望因为使用继承或者因为多层次继承导致类中个数急剧增加的系统\n3：一个类存在两个独立变化的维度 ，并且两个维度都需要进行扩展\n####注意\n对于两个独立变化的维度 使用桥接模式最合适\n####总结：利用一个中间接口来把多种不同状态的类进行分离\n####代码地址：https://github.com/xuxianyu/myGitHub/tree/master/DisignPattern/src/main/java/com/xxx/structural/bridge\n","source":"_posts/设计模式/设计模式笔记(九)：结构型-桥接模式.md","raw":"---\ntitle: 设计模式笔记(九)：结构型-桥接模式\ncategories: 笔记\ntags:\n  - 设计模式\nabbrlink: ca9f8bd1\ndate: 2017-11-11 00:00:00\n---\n##桥接模式(Bridge Pattern)\n####意图\n将抽象部分和实现部分分离，使他们可以独立变化\n####主要解决\n在多种可能变化的情况下，用继承会造成类爆炸的问题，不好扩展\n####何时使用\n实现系统可以有多个角度分类，每一个角度都可能变化\n####如何解决\n把这种多角度分类分离出来，让他们独立变化，减少之间的耦合\n####关键代码\n抽象类依赖实现类\n####应用实例\n1：猪八戒从天蓬元帅投胎到猪转世投胎机制将尘世划分为肉体和灵魂 ，前者相当于实现化，后者相当于抽象化，生灵通过功能委派，调用肉体对象，\n2：开关\n####优点\n1：抽象和实现分离\n2：优秀扩展能力\n3：实现细节对客户透明\n####缺点\n桥接模式会增加系统理解和设计难度，由于聚合关联关系在抽象层，需要开发者对抽象进行设计和编程\n####使用场景\n1：如果一个系统需要在组件抽象化角色和具体化角色之间有更多的灵活性，避免在两个层次之间建立静态继承关系，通过桥接模式可以使他们在抽象层建立一个关联关系\n2：对于不希望因为使用继承或者因为多层次继承导致类中个数急剧增加的系统\n3：一个类存在两个独立变化的维度 ，并且两个维度都需要进行扩展\n####注意\n对于两个独立变化的维度 使用桥接模式最合适\n####总结：利用一个中间接口来把多种不同状态的类进行分离\n####代码地址：https://github.com/xuxianyu/myGitHub/tree/master/DisignPattern/src/main/java/com/xxx/structural/bridge\n","slug":"设计模式/设计模式笔记(九)：结构型-桥接模式","published":1,"updated":"2018-08-17T08:10:03.923Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjo9uau09007umwcz3z5u7wg1","content":"<p>##桥接模式(Bridge Pattern)</p><p>####意图<br>将抽象部分和实现部分分离，使他们可以独立变化</p><p>####主要解决<br>在多种可能变化的情况下，用继承会造成类爆炸的问题，不好扩展</p><p>####何时使用<br>实现系统可以有多个角度分类，每一个角度都可能变化</p><p>####如何解决<br>把这种多角度分类分离出来，让他们独立变化，减少之间的耦合</p><p>####关键代码<br>抽象类依赖实现类</p><p>####应用实例<br>1：猪八戒从天蓬元帅投胎到猪转世投胎机制将尘世划分为肉体和灵魂 ，前者相当于实现化，后者相当于抽象化，生灵通过功能委派，调用肉体对象，<br>2：开关</p><p>####优点<br>1：抽象和实现分离<br>2：优秀扩展能力<br>3：实现细节对客户透明</p><p>####缺点<br>桥接模式会增加系统理解和设计难度，由于聚合关联关系在抽象层，需要开发者对抽象进行设计和编程</p><p>####使用场景<br>1：如果一个系统需要在组件抽象化角色和具体化角色之间有更多的灵活性，避免在两个层次之间建立静态继承关系，通过桥接模式可以使他们在抽象层建立一个关联关系<br>2：对于不希望因为使用继承或者因为多层次继承导致类中个数急剧增加的系统<br>3：一个类存在两个独立变化的维度 ，并且两个维度都需要进行扩展</p><p>####注意<br>对于两个独立变化的维度 使用桥接模式最合适</p><p>####总结：利用一个中间接口来把多种不同状态的类进行分离</p><p>####代码地址：<a href=\"https://github.com/xuxianyu/myGitHub/tree/master/DisignPattern/src/main/java/com/xxx/structural/bridge\" target=\"_blank\" rel=\"noopener\">https://github.com/xuxianyu/myGitHub/tree/master/DisignPattern/src/main/java/com/xxx/structural/bridge</a></p>","site":{"data":{}},"excerpt":"","more":"<p>##桥接模式(Bridge Pattern)</p><p>####意图<br>将抽象部分和实现部分分离，使他们可以独立变化</p><p>####主要解决<br>在多种可能变化的情况下，用继承会造成类爆炸的问题，不好扩展</p><p>####何时使用<br>实现系统可以有多个角度分类，每一个角度都可能变化</p><p>####如何解决<br>把这种多角度分类分离出来，让他们独立变化，减少之间的耦合</p><p>####关键代码<br>抽象类依赖实现类</p><p>####应用实例<br>1：猪八戒从天蓬元帅投胎到猪转世投胎机制将尘世划分为肉体和灵魂 ，前者相当于实现化，后者相当于抽象化，生灵通过功能委派，调用肉体对象，<br>2：开关</p><p>####优点<br>1：抽象和实现分离<br>2：优秀扩展能力<br>3：实现细节对客户透明</p><p>####缺点<br>桥接模式会增加系统理解和设计难度，由于聚合关联关系在抽象层，需要开发者对抽象进行设计和编程</p><p>####使用场景<br>1：如果一个系统需要在组件抽象化角色和具体化角色之间有更多的灵活性，避免在两个层次之间建立静态继承关系，通过桥接模式可以使他们在抽象层建立一个关联关系<br>2：对于不希望因为使用继承或者因为多层次继承导致类中个数急剧增加的系统<br>3：一个类存在两个独立变化的维度 ，并且两个维度都需要进行扩展</p><p>####注意<br>对于两个独立变化的维度 使用桥接模式最合适</p><p>####总结：利用一个中间接口来把多种不同状态的类进行分离</p><p>####代码地址：<a href=\"https://github.com/xuxianyu/myGitHub/tree/master/DisignPattern/src/main/java/com/xxx/structural/bridge\" target=\"_blank\" rel=\"noopener\">https://github.com/xuxianyu/myGitHub/tree/master/DisignPattern/src/main/java/com/xxx/structural/bridge</a></p>"},{"title":"设计模式笔记(五)：创建型-单例模式","abbrlink":"b5989355","date":"2017-11-10T16:00:00.000Z","_content":"##单例模式（Singleton Pattern）\n####注意\n1：单例类只能有一个实例\n2：单例类必须自己创建自己唯一的实例\n3：单例类必须给其他对象提供这个实例\n####意图\n保证一个类仅有一个实例。并提供一个访问它的全局访问点\n####主要解决\n一个全局使用的类频繁创建销毁\n####何时使用\n控制实例数目。节省系统资源\n####如何解决\n判断系统是否已经有这个单例。如果有返回、没有创建\n####关键代码\n构造函数私有化\n####应用实例\n1：一个党只有一个主席\n2：多线程中对文件的处理必须是唯一的一个实例来进行。\n3：设备管理器常常被设计为单例模式。比如一个电脑有两台打印机。在输出的适合不能两台打印同一个文件\n####优点\n1：内存中只有一个实例，减少内存开销，\n2：避免对资源的多重占用\n####缺点：\n没有接口、不能继承。和单一职责冲突。\n####使用场景\n1：产生唯一序列号\n2：计数器\n3：创建比较耗费资源的对象比如io 与数据库链接等\n####总结：共有 懒汉式线程不安全、懒汉式线程安全（加锁）、饿汉式、双捡锁、登记式、枚举这些方式来创建单例  其中饿汉式，双捡锁，登记式，枚举比较适合平常用。懒汉式要么不 安全 要么效率低下不建议使用 \n####代码地址：https://github.com/xuxianyu/myGitHub/tree/master/DisignPattern/src/main/java/com/xxx/create/singleton\n","source":"_posts/设计模式/设计模式笔记(五)：创建型-单例模式.md","raw":"---\ntitle: 设计模式笔记(五)：创建型-单例模式\ncategories: 笔记\ntags:\n  - 设计模式\nabbrlink: b5989355\ndate: 2017-11-11 00:00:00\n---\n##单例模式（Singleton Pattern）\n####注意\n1：单例类只能有一个实例\n2：单例类必须自己创建自己唯一的实例\n3：单例类必须给其他对象提供这个实例\n####意图\n保证一个类仅有一个实例。并提供一个访问它的全局访问点\n####主要解决\n一个全局使用的类频繁创建销毁\n####何时使用\n控制实例数目。节省系统资源\n####如何解决\n判断系统是否已经有这个单例。如果有返回、没有创建\n####关键代码\n构造函数私有化\n####应用实例\n1：一个党只有一个主席\n2：多线程中对文件的处理必须是唯一的一个实例来进行。\n3：设备管理器常常被设计为单例模式。比如一个电脑有两台打印机。在输出的适合不能两台打印同一个文件\n####优点\n1：内存中只有一个实例，减少内存开销，\n2：避免对资源的多重占用\n####缺点：\n没有接口、不能继承。和单一职责冲突。\n####使用场景\n1：产生唯一序列号\n2：计数器\n3：创建比较耗费资源的对象比如io 与数据库链接等\n####总结：共有 懒汉式线程不安全、懒汉式线程安全（加锁）、饿汉式、双捡锁、登记式、枚举这些方式来创建单例  其中饿汉式，双捡锁，登记式，枚举比较适合平常用。懒汉式要么不 安全 要么效率低下不建议使用 \n####代码地址：https://github.com/xuxianyu/myGitHub/tree/master/DisignPattern/src/main/java/com/xxx/create/singleton\n","slug":"设计模式/设计模式笔记(五)：创建型-单例模式","published":1,"updated":"2018-08-17T08:10:03.927Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjo9uau0a007xmwczbh0ursd8","content":"<p>##单例模式（Singleton Pattern）</p><p>####注意<br>1：单例类只能有一个实例<br>2：单例类必须自己创建自己唯一的实例<br>3：单例类必须给其他对象提供这个实例</p><p>####意图<br>保证一个类仅有一个实例。并提供一个访问它的全局访问点</p><p>####主要解决<br>一个全局使用的类频繁创建销毁</p><p>####何时使用<br>控制实例数目。节省系统资源</p><p>####如何解决<br>判断系统是否已经有这个单例。如果有返回、没有创建</p><p>####关键代码<br>构造函数私有化</p><p>####应用实例<br>1：一个党只有一个主席<br>2：多线程中对文件的处理必须是唯一的一个实例来进行。<br>3：设备管理器常常被设计为单例模式。比如一个电脑有两台打印机。在输出的适合不能两台打印同一个文件</p><p>####优点<br>1：内存中只有一个实例，减少内存开销，<br>2：避免对资源的多重占用</p><p>####缺点：<br>没有接口、不能继承。和单一职责冲突。</p><p>####使用场景<br>1：产生唯一序列号<br>2：计数器<br>3：创建比较耗费资源的对象比如io 与数据库链接等</p><p>####总结：共有 懒汉式线程不安全、懒汉式线程安全（加锁）、饿汉式、双捡锁、登记式、枚举这些方式来创建单例 其中饿汉式，双捡锁，登记式，枚举比较适合平常用。懒汉式要么不 安全 要么效率低下不建议使用</p><p>####代码地址：<a href=\"https://github.com/xuxianyu/myGitHub/tree/master/DisignPattern/src/main/java/com/xxx/create/singleton\" target=\"_blank\" rel=\"noopener\">https://github.com/xuxianyu/myGitHub/tree/master/DisignPattern/src/main/java/com/xxx/create/singleton</a></p>","site":{"data":{}},"excerpt":"","more":"<p>##单例模式（Singleton Pattern）</p><p>####注意<br>1：单例类只能有一个实例<br>2：单例类必须自己创建自己唯一的实例<br>3：单例类必须给其他对象提供这个实例</p><p>####意图<br>保证一个类仅有一个实例。并提供一个访问它的全局访问点</p><p>####主要解决<br>一个全局使用的类频繁创建销毁</p><p>####何时使用<br>控制实例数目。节省系统资源</p><p>####如何解决<br>判断系统是否已经有这个单例。如果有返回、没有创建</p><p>####关键代码<br>构造函数私有化</p><p>####应用实例<br>1：一个党只有一个主席<br>2：多线程中对文件的处理必须是唯一的一个实例来进行。<br>3：设备管理器常常被设计为单例模式。比如一个电脑有两台打印机。在输出的适合不能两台打印同一个文件</p><p>####优点<br>1：内存中只有一个实例，减少内存开销，<br>2：避免对资源的多重占用</p><p>####缺点：<br>没有接口、不能继承。和单一职责冲突。</p><p>####使用场景<br>1：产生唯一序列号<br>2：计数器<br>3：创建比较耗费资源的对象比如io 与数据库链接等</p><p>####总结：共有 懒汉式线程不安全、懒汉式线程安全（加锁）、饿汉式、双捡锁、登记式、枚举这些方式来创建单例 其中饿汉式，双捡锁，登记式，枚举比较适合平常用。懒汉式要么不 安全 要么效率低下不建议使用</p><p>####代码地址：<a href=\"https://github.com/xuxianyu/myGitHub/tree/master/DisignPattern/src/main/java/com/xxx/create/singleton\" target=\"_blank\" rel=\"noopener\">https://github.com/xuxianyu/myGitHub/tree/master/DisignPattern/src/main/java/com/xxx/create/singleton</a></p>"},{"title":"设计模式笔记(八)：结构型-适配器模式","abbrlink":"6cd7a67e","date":"2017-11-10T16:00:00.000Z","_content":"##适配器模式(Adapter Pattern)\n####意图\n当一个类的接口转换成客户希望的另外一个接口的适合，适配器模式使得原本由于接口不兼容不能一起工作的类可以在一起工作\n####主要解决\n在系统中常常要将一些现存的对象放到新环境中，而新环境接口是现存对象不能满足的\n####何时使用\n1：系统需要使用现有的类，但是这个类的接口不满足系统需要\n2：想要建立一个可以重复使用的类，用于一些批次之间没有太大关联的一些类，包括一些可能在将来引进的类一起工作，这些源类不一定有一致的即可\n3：通过接口转换，将一个类插入到另一个类系中，（比如老虎和飞禽，现在多了一个能飞的老虎，在不增加实体需求下 增加一个适配器，里面包含虎对象，实现飞接口）\n####如何解决\n继承或者依赖\n####关键代码\n适配器继承或者依赖已经有的对象，实现想要的目标接口\n####实例\n1：美国电器110v 中国220v 需要一个适配器来转换\n2：jdk1.1提供Enumeration接口 现在1.2中提供了iterator接口 ，想要使用1.2jdk 就要把一起系统的Rnumeration接口转换iterator接口\n3：linux上运行windows程序\n4：jvm就是一个类似适配器的一个虚拟机 \n####优点\n1：可以让两个没有关联的类一起运行，\n2：提高类的复用\n3：增加类的透明\n4：灵活\n####缺点\n1：过多使用适配器，让系统显得凌乱 ，不容易把握整体，比如明明调用的是a接口但是内部适配成b接口的实现，一个系统中出现太多这种情况会爆炸，如果不是很有必要不适用适配器，而是对系统重构\n2：由于java只能继承一个类，所以最多只能适配一个适配类，而且目标类必须是抽象类\n####使用场景\n有动机的修改一个运行正常的系统接口\n####注意\n适配器不是详细设计时候设计的 而是解决在系统上线过程中出现问题\n####总结：通过一个中间适配器类来增加已有类的功能，这个只是补救方式 最好的方式还是重构项目\n####代码地址：https://github.com/xuxianyu/myGitHub/tree/master/DisignPattern/src/main/java/com/xxx/structural/adapter\n","source":"_posts/设计模式/设计模式笔记(八)：结构型-适配器模式.md","raw":"---\ntitle: 设计模式笔记(八)：结构型-适配器模式\ncategories: 笔记\ntags:\n  - 设计模式\nabbrlink: 6cd7a67e\ndate: 2017-11-11 00:00:00\n---\n##适配器模式(Adapter Pattern)\n####意图\n当一个类的接口转换成客户希望的另外一个接口的适合，适配器模式使得原本由于接口不兼容不能一起工作的类可以在一起工作\n####主要解决\n在系统中常常要将一些现存的对象放到新环境中，而新环境接口是现存对象不能满足的\n####何时使用\n1：系统需要使用现有的类，但是这个类的接口不满足系统需要\n2：想要建立一个可以重复使用的类，用于一些批次之间没有太大关联的一些类，包括一些可能在将来引进的类一起工作，这些源类不一定有一致的即可\n3：通过接口转换，将一个类插入到另一个类系中，（比如老虎和飞禽，现在多了一个能飞的老虎，在不增加实体需求下 增加一个适配器，里面包含虎对象，实现飞接口）\n####如何解决\n继承或者依赖\n####关键代码\n适配器继承或者依赖已经有的对象，实现想要的目标接口\n####实例\n1：美国电器110v 中国220v 需要一个适配器来转换\n2：jdk1.1提供Enumeration接口 现在1.2中提供了iterator接口 ，想要使用1.2jdk 就要把一起系统的Rnumeration接口转换iterator接口\n3：linux上运行windows程序\n4：jvm就是一个类似适配器的一个虚拟机 \n####优点\n1：可以让两个没有关联的类一起运行，\n2：提高类的复用\n3：增加类的透明\n4：灵活\n####缺点\n1：过多使用适配器，让系统显得凌乱 ，不容易把握整体，比如明明调用的是a接口但是内部适配成b接口的实现，一个系统中出现太多这种情况会爆炸，如果不是很有必要不适用适配器，而是对系统重构\n2：由于java只能继承一个类，所以最多只能适配一个适配类，而且目标类必须是抽象类\n####使用场景\n有动机的修改一个运行正常的系统接口\n####注意\n适配器不是详细设计时候设计的 而是解决在系统上线过程中出现问题\n####总结：通过一个中间适配器类来增加已有类的功能，这个只是补救方式 最好的方式还是重构项目\n####代码地址：https://github.com/xuxianyu/myGitHub/tree/master/DisignPattern/src/main/java/com/xxx/structural/adapter\n","slug":"设计模式/设计模式笔记(八)：结构型-适配器模式","published":1,"updated":"2018-08-17T08:10:03.927Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjo9uau0c0081mwczb1wdhl51","content":"<p>##适配器模式(Adapter Pattern)</p><p>####意图<br>当一个类的接口转换成客户希望的另外一个接口的适合，适配器模式使得原本由于接口不兼容不能一起工作的类可以在一起工作</p><p>####主要解决<br>在系统中常常要将一些现存的对象放到新环境中，而新环境接口是现存对象不能满足的</p><p>####何时使用<br>1：系统需要使用现有的类，但是这个类的接口不满足系统需要<br>2：想要建立一个可以重复使用的类，用于一些批次之间没有太大关联的一些类，包括一些可能在将来引进的类一起工作，这些源类不一定有一致的即可<br>3：通过接口转换，将一个类插入到另一个类系中，（比如老虎和飞禽，现在多了一个能飞的老虎，在不增加实体需求下 增加一个适配器，里面包含虎对象，实现飞接口）</p><p>####如何解决<br>继承或者依赖</p><p>####关键代码<br>适配器继承或者依赖已经有的对象，实现想要的目标接口</p><p>####实例<br>1：美国电器110v 中国220v 需要一个适配器来转换<br>2：jdk1.1提供Enumeration接口 现在1.2中提供了iterator接口 ，想要使用1.2jdk 就要把一起系统的Rnumeration接口转换iterator接口<br>3：linux上运行windows程序<br>4：jvm就是一个类似适配器的一个虚拟机</p><p>####优点<br>1：可以让两个没有关联的类一起运行，<br>2：提高类的复用<br>3：增加类的透明<br>4：灵活</p><p>####缺点<br>1：过多使用适配器，让系统显得凌乱 ，不容易把握整体，比如明明调用的是a接口但是内部适配成b接口的实现，一个系统中出现太多这种情况会爆炸，如果不是很有必要不适用适配器，而是对系统重构<br>2：由于java只能继承一个类，所以最多只能适配一个适配类，而且目标类必须是抽象类</p><p>####使用场景<br>有动机的修改一个运行正常的系统接口</p><p>####注意<br>适配器不是详细设计时候设计的 而是解决在系统上线过程中出现问题</p><p>####总结：通过一个中间适配器类来增加已有类的功能，这个只是补救方式 最好的方式还是重构项目</p><p>####代码地址：<a href=\"https://github.com/xuxianyu/myGitHub/tree/master/DisignPattern/src/main/java/com/xxx/structural/adapter\" target=\"_blank\" rel=\"noopener\">https://github.com/xuxianyu/myGitHub/tree/master/DisignPattern/src/main/java/com/xxx/structural/adapter</a></p>","site":{"data":{}},"excerpt":"","more":"<p>##适配器模式(Adapter Pattern)</p><p>####意图<br>当一个类的接口转换成客户希望的另外一个接口的适合，适配器模式使得原本由于接口不兼容不能一起工作的类可以在一起工作</p><p>####主要解决<br>在系统中常常要将一些现存的对象放到新环境中，而新环境接口是现存对象不能满足的</p><p>####何时使用<br>1：系统需要使用现有的类，但是这个类的接口不满足系统需要<br>2：想要建立一个可以重复使用的类，用于一些批次之间没有太大关联的一些类，包括一些可能在将来引进的类一起工作，这些源类不一定有一致的即可<br>3：通过接口转换，将一个类插入到另一个类系中，（比如老虎和飞禽，现在多了一个能飞的老虎，在不增加实体需求下 增加一个适配器，里面包含虎对象，实现飞接口）</p><p>####如何解决<br>继承或者依赖</p><p>####关键代码<br>适配器继承或者依赖已经有的对象，实现想要的目标接口</p><p>####实例<br>1：美国电器110v 中国220v 需要一个适配器来转换<br>2：jdk1.1提供Enumeration接口 现在1.2中提供了iterator接口 ，想要使用1.2jdk 就要把一起系统的Rnumeration接口转换iterator接口<br>3：linux上运行windows程序<br>4：jvm就是一个类似适配器的一个虚拟机</p><p>####优点<br>1：可以让两个没有关联的类一起运行，<br>2：提高类的复用<br>3：增加类的透明<br>4：灵活</p><p>####缺点<br>1：过多使用适配器，让系统显得凌乱 ，不容易把握整体，比如明明调用的是a接口但是内部适配成b接口的实现，一个系统中出现太多这种情况会爆炸，如果不是很有必要不适用适配器，而是对系统重构<br>2：由于java只能继承一个类，所以最多只能适配一个适配类，而且目标类必须是抽象类</p><p>####使用场景<br>有动机的修改一个运行正常的系统接口</p><p>####注意<br>适配器不是详细设计时候设计的 而是解决在系统上线过程中出现问题</p><p>####总结：通过一个中间适配器类来增加已有类的功能，这个只是补救方式 最好的方式还是重构项目</p><p>####代码地址：<a href=\"https://github.com/xuxianyu/myGitHub/tree/master/DisignPattern/src/main/java/com/xxx/structural/adapter\" target=\"_blank\" rel=\"noopener\">https://github.com/xuxianyu/myGitHub/tree/master/DisignPattern/src/main/java/com/xxx/structural/adapter</a></p>"},{"title":"设计模式笔记(六)：创建型-建造者模式","abbrlink":"67fc4778","date":"2017-11-10T16:00:00.000Z","_content":"##建造者模式(builder pattern)\n####意图\n将一个复杂构建与其标识相分离，使得同样构建过程构建出不一样的标识\n####主要解决\n在创建复杂对象过程中，通常是各个部分子对象用一定算法构建而成;由于需求变化，这个复杂对象各个部分经常面临剧烈变化，但是组合他们成为一个复杂算法是相对稳定的。\n####何时使用\n基本部件不变，但是组合经常变化（组合对象不定，算法固定）\n####如何解决\n变化部分和不变部分分离\n####关键代码\n1：建造者：创建和提供实例\n2：导演：管理建造出来的实例依赖关系\n####实例\n肯德基，有汉堡、可乐、薯条等是不变对象，但是其中他们组合是经常变化的\n####优点\n1：建造者独立，容易扩展\n2：便于细节风险控制\n####缺点\n1：产品必须有共通点，因此限制范围\n2：内部变化复杂的化会出现很多建造类\n####使用场景\n1：需要生成复杂对象有复杂的内部结构\n2：需要生成对象内部属性相互依赖\n####注意事项\n建造者模式更加关注零件装配的顺序\n而工厂模式关注的是产品结果\n####个人总结：在组合复杂对象的时候 可以采用建造者模式 这样只需要在构建类中区定义生成对象的依赖就可以了 \n####代码地址：https://github.com/xuxianyu/myGitHub/tree/master/DisignPattern/src/main/java/com/xxx/create/builder\n","source":"_posts/设计模式/设计模式笔记(六)：创建型-建造者模式.md","raw":"---\ntitle: 设计模式笔记(六)：创建型-建造者模式\ncategories: 笔记\ntags:\n  - 设计模式\nabbrlink: 67fc4778\ndate: 2017-11-11 00:00:00\n---\n##建造者模式(builder pattern)\n####意图\n将一个复杂构建与其标识相分离，使得同样构建过程构建出不一样的标识\n####主要解决\n在创建复杂对象过程中，通常是各个部分子对象用一定算法构建而成;由于需求变化，这个复杂对象各个部分经常面临剧烈变化，但是组合他们成为一个复杂算法是相对稳定的。\n####何时使用\n基本部件不变，但是组合经常变化（组合对象不定，算法固定）\n####如何解决\n变化部分和不变部分分离\n####关键代码\n1：建造者：创建和提供实例\n2：导演：管理建造出来的实例依赖关系\n####实例\n肯德基，有汉堡、可乐、薯条等是不变对象，但是其中他们组合是经常变化的\n####优点\n1：建造者独立，容易扩展\n2：便于细节风险控制\n####缺点\n1：产品必须有共通点，因此限制范围\n2：内部变化复杂的化会出现很多建造类\n####使用场景\n1：需要生成复杂对象有复杂的内部结构\n2：需要生成对象内部属性相互依赖\n####注意事项\n建造者模式更加关注零件装配的顺序\n而工厂模式关注的是产品结果\n####个人总结：在组合复杂对象的时候 可以采用建造者模式 这样只需要在构建类中区定义生成对象的依赖就可以了 \n####代码地址：https://github.com/xuxianyu/myGitHub/tree/master/DisignPattern/src/main/java/com/xxx/create/builder\n","slug":"设计模式/设计模式笔记(六)：创建型-建造者模式","published":1,"updated":"2018-08-17T08:10:03.927Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjo9uau0d0083mwczyfyzsysi","content":"<p>##建造者模式(builder pattern)</p><p>####意图<br>将一个复杂构建与其标识相分离，使得同样构建过程构建出不一样的标识</p><p>####主要解决<br>在创建复杂对象过程中，通常是各个部分子对象用一定算法构建而成;由于需求变化，这个复杂对象各个部分经常面临剧烈变化，但是组合他们成为一个复杂算法是相对稳定的。</p><p>####何时使用<br>基本部件不变，但是组合经常变化（组合对象不定，算法固定）</p><p>####如何解决<br>变化部分和不变部分分离</p><p>####关键代码<br>1：建造者：创建和提供实例<br>2：导演：管理建造出来的实例依赖关系</p><p>####实例<br>肯德基，有汉堡、可乐、薯条等是不变对象，但是其中他们组合是经常变化的</p><p>####优点<br>1：建造者独立，容易扩展<br>2：便于细节风险控制</p><p>####缺点<br>1：产品必须有共通点，因此限制范围<br>2：内部变化复杂的化会出现很多建造类</p><p>####使用场景<br>1：需要生成复杂对象有复杂的内部结构<br>2：需要生成对象内部属性相互依赖</p><p>####注意事项<br>建造者模式更加关注零件装配的顺序<br>而工厂模式关注的是产品结果</p><p>####个人总结：在组合复杂对象的时候 可以采用建造者模式 这样只需要在构建类中区定义生成对象的依赖就可以了</p><p>####代码地址：<a href=\"https://github.com/xuxianyu/myGitHub/tree/master/DisignPattern/src/main/java/com/xxx/create/builder\" target=\"_blank\" rel=\"noopener\">https://github.com/xuxianyu/myGitHub/tree/master/DisignPattern/src/main/java/com/xxx/create/builder</a></p>","site":{"data":{}},"excerpt":"","more":"<p>##建造者模式(builder pattern)</p><p>####意图<br>将一个复杂构建与其标识相分离，使得同样构建过程构建出不一样的标识</p><p>####主要解决<br>在创建复杂对象过程中，通常是各个部分子对象用一定算法构建而成;由于需求变化，这个复杂对象各个部分经常面临剧烈变化，但是组合他们成为一个复杂算法是相对稳定的。</p><p>####何时使用<br>基本部件不变，但是组合经常变化（组合对象不定，算法固定）</p><p>####如何解决<br>变化部分和不变部分分离</p><p>####关键代码<br>1：建造者：创建和提供实例<br>2：导演：管理建造出来的实例依赖关系</p><p>####实例<br>肯德基，有汉堡、可乐、薯条等是不变对象，但是其中他们组合是经常变化的</p><p>####优点<br>1：建造者独立，容易扩展<br>2：便于细节风险控制</p><p>####缺点<br>1：产品必须有共通点，因此限制范围<br>2：内部变化复杂的化会出现很多建造类</p><p>####使用场景<br>1：需要生成复杂对象有复杂的内部结构<br>2：需要生成对象内部属性相互依赖</p><p>####注意事项<br>建造者模式更加关注零件装配的顺序<br>而工厂模式关注的是产品结果</p><p>####个人总结：在组合复杂对象的时候 可以采用建造者模式 这样只需要在构建类中区定义生成对象的依赖就可以了</p><p>####代码地址：<a href=\"https://github.com/xuxianyu/myGitHub/tree/master/DisignPattern/src/main/java/com/xxx/create/builder\" target=\"_blank\" rel=\"noopener\">https://github.com/xuxianyu/myGitHub/tree/master/DisignPattern/src/main/java/com/xxx/create/builder</a></p>"},{"title":"设计模式笔记(四)：创建型-抽象工厂模式","abbrlink":"b2f1ab54","date":"2017-11-10T16:00:00.000Z","_content":"##抽象工厂模式（Abstract Factory Pattern）\n####意图\n提供一个创建一系列相关或者互相依赖的对象接口，无需指定他们具体类\n####主要解决\n解决接口选择问题\n####何时使用\n系统产品多于一个产品族，而系统只消费其中某一族产品\n####如何解决\n在一个产品族中定义多个产品\n####关键代码\n在一个工厂里聚合多个同类产品\n####实例\n假设生产衣服 有商务男装、商务女装、时尚男装、时尚女装等等、都放在各自种类衣柜中。衣柜就承当抽象工厂的作用。其中衣柜中上衣、裤子 都是单独的产品\n####优点\n当一个产品族中多个对象被设计成一起工作的时候，它能保证客户端始终只使用其中一个产品族 不会乱套\n####缺点\n产品族扩展困难。要增加一个系列的一个产品 既要在抽象工厂里面加代码又要在具体里面加代码\n####使用场景\n1：qq换肤2：生成不同操作系统的程序\n####注意事项\n产品族难维护。等级好扩展\n\n####个人总结：抽象工厂 用来生成工厂 然后来选择具体的产品 \n####代码地址：https://github.com/xuxianyu/myGitHub/tree/master/DisignPattern/src/main/java/com/xxx/create/abstractfactory\n","source":"_posts/设计模式/设计模式笔记(四)：创建型-抽象工厂模式.md","raw":"---\ntitle: 设计模式笔记(四)：创建型-抽象工厂模式\ncategories: 笔记\ntags:\n  - 设计模式\nabbrlink: b2f1ab54\ndate: 2017-11-11 00:00:00\n---\n##抽象工厂模式（Abstract Factory Pattern）\n####意图\n提供一个创建一系列相关或者互相依赖的对象接口，无需指定他们具体类\n####主要解决\n解决接口选择问题\n####何时使用\n系统产品多于一个产品族，而系统只消费其中某一族产品\n####如何解决\n在一个产品族中定义多个产品\n####关键代码\n在一个工厂里聚合多个同类产品\n####实例\n假设生产衣服 有商务男装、商务女装、时尚男装、时尚女装等等、都放在各自种类衣柜中。衣柜就承当抽象工厂的作用。其中衣柜中上衣、裤子 都是单独的产品\n####优点\n当一个产品族中多个对象被设计成一起工作的时候，它能保证客户端始终只使用其中一个产品族 不会乱套\n####缺点\n产品族扩展困难。要增加一个系列的一个产品 既要在抽象工厂里面加代码又要在具体里面加代码\n####使用场景\n1：qq换肤2：生成不同操作系统的程序\n####注意事项\n产品族难维护。等级好扩展\n\n####个人总结：抽象工厂 用来生成工厂 然后来选择具体的产品 \n####代码地址：https://github.com/xuxianyu/myGitHub/tree/master/DisignPattern/src/main/java/com/xxx/create/abstractfactory\n","slug":"设计模式/设计模式笔记(四)：创建型-抽象工厂模式","published":1,"updated":"2018-08-17T08:10:03.927Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjo9uau0g0087mwcz1z1fc0hs","content":"<p>##抽象工厂模式（Abstract Factory Pattern）</p><p>####意图<br>提供一个创建一系列相关或者互相依赖的对象接口，无需指定他们具体类</p><p>####主要解决<br>解决接口选择问题</p><p>####何时使用<br>系统产品多于一个产品族，而系统只消费其中某一族产品</p><p>####如何解决<br>在一个产品族中定义多个产品</p><p>####关键代码<br>在一个工厂里聚合多个同类产品</p><p>####实例<br>假设生产衣服 有商务男装、商务女装、时尚男装、时尚女装等等、都放在各自种类衣柜中。衣柜就承当抽象工厂的作用。其中衣柜中上衣、裤子 都是单独的产品</p><p>####优点<br>当一个产品族中多个对象被设计成一起工作的时候，它能保证客户端始终只使用其中一个产品族 不会乱套</p><p>####缺点<br>产品族扩展困难。要增加一个系列的一个产品 既要在抽象工厂里面加代码又要在具体里面加代码</p><p>####使用场景<br>1：qq换肤2：生成不同操作系统的程序</p><p>####注意事项<br>产品族难维护。等级好扩展</p><p>####个人总结：抽象工厂 用来生成工厂 然后来选择具体的产品</p><p>####代码地址：<a href=\"https://github.com/xuxianyu/myGitHub/tree/master/DisignPattern/src/main/java/com/xxx/create/abstractfactory\" target=\"_blank\" rel=\"noopener\">https://github.com/xuxianyu/myGitHub/tree/master/DisignPattern/src/main/java/com/xxx/create/abstractfactory</a></p>","site":{"data":{}},"excerpt":"","more":"<p>##抽象工厂模式（Abstract Factory Pattern）</p><p>####意图<br>提供一个创建一系列相关或者互相依赖的对象接口，无需指定他们具体类</p><p>####主要解决<br>解决接口选择问题</p><p>####何时使用<br>系统产品多于一个产品族，而系统只消费其中某一族产品</p><p>####如何解决<br>在一个产品族中定义多个产品</p><p>####关键代码<br>在一个工厂里聚合多个同类产品</p><p>####实例<br>假设生产衣服 有商务男装、商务女装、时尚男装、时尚女装等等、都放在各自种类衣柜中。衣柜就承当抽象工厂的作用。其中衣柜中上衣、裤子 都是单独的产品</p><p>####优点<br>当一个产品族中多个对象被设计成一起工作的时候，它能保证客户端始终只使用其中一个产品族 不会乱套</p><p>####缺点<br>产品族扩展困难。要增加一个系列的一个产品 既要在抽象工厂里面加代码又要在具体里面加代码</p><p>####使用场景<br>1：qq换肤2：生成不同操作系统的程序</p><p>####注意事项<br>产品族难维护。等级好扩展</p><p>####个人总结：抽象工厂 用来生成工厂 然后来选择具体的产品</p><p>####代码地址：<a href=\"https://github.com/xuxianyu/myGitHub/tree/master/DisignPattern/src/main/java/com/xxx/create/abstractfactory\" target=\"_blank\" rel=\"noopener\">https://github.com/xuxianyu/myGitHub/tree/master/DisignPattern/src/main/java/com/xxx/create/abstractfactory</a></p>"},{"title":"guava-cache笔记","abbrlink":"1be97d35","date":"2017-11-10T16:00:00.000Z","_content":"\n##　guava cache工具\n#### 示例\n```\n   /**\n      * 缓存示例\n      *\n      * @author ming\n      * @date 2017/8/7\n      */\n     @Test\n     public void helloWorldTest() throws ExecutionException {\n         LoadingCache<Long, String> strCache = CacheBuilder.newBuilder().maximumSize(1000)\n                 .expireAfterWrite(10, TimeUnit.MINUTES)\n                 .build(new CacheLoader<Long, String>() {\n                     //有这个键就从缓存中去 没有就根据load方法从新获取\n                     //如果load没有显示抛出异常 可以用getUnchecked查找缓存 如果显示抛出 就不能使用getUnchecked\n                     @Override\n                     public String load(Long o) throws Exception {\n                         return \"缓存:\" + o;\n                     }\n \n                     //批量加载\n                     @Override\n                     public Map<Long, String> loadAll(Iterable<? extends Long> keys) throws Exception {\n                         Map<Long,String> tempMap = Maps.newConcurrentMap();\n                         keys.forEach(key->{\n                             tempMap.put(key,\"缓存:\"+key);\n                         });\n                         return tempMap;\n                     }\n                     //重新加载\n                     @Override\n                     public ListenableFuture<String> reload(Long key, String oldValue) throws Exception {\n                         return super.reload(key, oldValue);\n                     }\n                 });\n         System.out.println(strCache.get(1L));\n         System.out.println(strCache.get(1L));\n         System.out.println(strCache.get(2L));\n     }\n```\n####适合的场景\n* 通过消耗内存提高速度\n* 预料到某些数据会被频繁查询\n* 缓存数量不会超过内存 \n####需要注意的点\n* 如果显示抛出异常 不可使用getUnchecked();\n* 可以通过重写load、loadAll、reload方法来进行单个加载获取、组合加载获取、重新加载\n* getAll 默认是通过load来加载没有缓存的信息 除非重写loadAll  \n####Callable加载\n可以通过不同的回调函数 来缓存从不同数据源来的数据 不局限于load方法来缓存数据\n```\n  /** 回调方式 执行获取缓存 方便实现\"如果有缓存则返回；否则运算、缓存、然后返回\"\n       * 可以在同一个cache对象中 通过不同方法获取 源数据\n      * @author ming\n      * @date 2017/8/7\n      */\n     @Test\n     public void callableTest() throws ExecutionException {\n         //创建缓存对象 不重写cacheLoader 利用callable来从源数据获取缓存 不管有没有重写 callable优先\n         Cache<Long,String> cache = CacheBuilder.newBuilder().maximumSize(1000).build(new CacheLoader<Long, String>() {\n             //使用带回调方式获取缓存 优先执行回调方法获取的缓存\n             @Override\n             public String load(Long key) throws Exception {\n                 return \"缓存:\"+key;\n             }\n         });\n \n         //创建 通过回调获取缓存\n         System.out.println(cache.get(1L, new Callable<String>() {\n             public String call() throws Exception{\n                 return \"回调缓存:\"+1L;\n             }\n         }));\n \n         System.out.println(cache.get(2L, new Callable<String>() {\n             @Override\n             public String call() throws Exception {\n                 return \"回调缓存2：\"+2;\n             }\n         }));\n     }\n```\n####缓存回收\n* 基于容量回收(size-based eviction)\n如果只是不超过固定值 直接使用maximumSize()构建  如果要通过不同的权重来计算实现Weigher \n\n* 定时回收(timed eviction)\n    expireAfterAccess(long, TimeUnit)：缓存项在给定时间内没有被读/写访问，则回收。请注意这种缓存的回收顺序和基于大小回收一样。\n    expireAfterWrite(long, TimeUnit)：缓存项在给定时间内没有被写访问（创建或覆盖），则回收。如果认为缓存数据总是在固定时候后变得陈旧不可用，这种回收方式是可取的。\n* 基于引用(Reference-based eviction)\n    CacheBuilder.weakKeys()：使用弱引用存储键。当键没有其它（强或软）引用时，缓存项可以被垃圾回收。因为垃圾回收仅依赖恒等式（==），使用弱引用键的缓存用==而不是equals比较键。\n    CacheBuilder.weakValues()：使用弱引用存储值。当值没有其它（强或软）引用时，缓存项可以被垃圾回收。因为垃圾回收仅依赖恒等式（==），使用弱引用值的缓存用==而不是equals比较值。\n    CacheBuilder.softValues()：使用软引用存储值。软引用只有在响应内存需要时，才按照全局最近最少使用的顺序回收。考虑到使用软引用的性能影响，我们通常建议使用更有性能预测性的缓存大小限定（见上文，基于容量回收）。使用软引用值的缓存同样用==而不是equals比较值。\n* 显示清除\n    个别清除：Cache.invalidate(key)\n    批量清除：Cache.invalidateAll(keys)\n    清除所有缓存项：Cache.invalidateAll()\n####监听器\nremovalListener默认是同步进行的 可以通过RemovalListeners.asynchronous(RemovalListener,Executor)装饰成 异步\n```\n    /**清除缓存监听器\n        * @author ming\n        * @date 2017/8/8\n        */\n        @Test\n        public void listenerTest() throws ExecutionException {\n            RemovalListener<Long,String> removalListener = new RemovalListener<Long, String>() {\n                //移除动作监听器  同步进行\n                @Override\n                public void onRemoval(RemovalNotification<Long, String> notification) {\n                    System.out.println(\"\\n删除缓存:\"+notification);\n                    System.out.println(notification.getKey());\n                    System.out.println(notification.getValue());\n                    //清除原因 返回是什么情况下清除的 例如超过大小、手动清除等\n                    System.out.println(notification.getCause());\n                    //是否是自动清除\n                    System.out.println(notification.wasEvicted());\n                }\n            };\n            //装饰成异步的\n            //RemovalListeners.asynchronous(removalListener, new Executor{...});\n            Cache<Long,String> cache= CacheBuilder.newBuilder().maximumSize(1000)\n                    .removalListener(removalListener).build();\n            //添加缓存\n            cache.get(1L, new Callable<String>() {\n                @Override\n                public String call() throws Exception {\n                    return \"回调缓存:\"+1L;\n                }\n            });\n            //显示删除缓存  被removalListener监听到\n            cache.invalidate(1L);\n        }\n```\n####刷新\n* 指定刷新 cache.refresh(key)\n* 定时刷新CacheBuilder.refreshAfterWrite(到时间、访问过期的数据才会触发)、CacheBuilder.expireAfterWrite(到时间直接刷新数据)\n```\n /**\n     * 刷新缓存\n     *\n     * @author ming\n     * @date 2017/8/8\n     */\n    @Test\n    public void refreshTest() throws ExecutionException, InterruptedException {\n        //定时执行服务\n        ScheduledExecutorService executor = new ScheduledThreadPoolExecutor(10);\n        LoadingCache<Integer, String> cache = CacheBuilder.newBuilder()\n                .maximumSize(1000)\n                //定时刷新 到时间后 访问过期数据后进行刷新 优先级比expireAfterWrite高\n                //.refreshAfterWrite(100,TimeUnit.MILLISECONDS)\n                //定时刷新 到时间直接刷新\n                //.expireAfterWrite(100,TimeUnit.MILLISECONDS)\n                .build(new CacheLoader<Integer, String>() {\n                    @Override\n                    public String load(Integer key) throws Exception {\n                        return \"load缓存+\" + key;\n                    }\n\n                    @Override\n                    public ListenableFuture<String> reload(Integer key, String oldValue) throws Exception {\n                        //当key <2的时候 直接刷新 当key>=2 异步刷新\n                        if (key < 2) {\n                            return Futures.immediateFuture(oldValue);\n                        } else {\n                            //异步\n                            ListenableFutureTask<String> task = ListenableFutureTask.create(new Callable<String>() {\n                                @Override\n                                public String call() throws Exception {\n                                    return \"异步刷新缓存\" + System.currentTimeMillis();\n                                }\n                            });\n                            executor.execute(task);\n                            return task;\n                        }\n                    }\n                });\n\n        System.out.println(cache.get(1));\n        System.out.println(cache.get(3));\n        //key<2\n        cache.refresh(1);\n        System.out.println(cache.get(1));\n        //key >= 2 异步刷新\n        cache.refresh(3);\n        //由于是异步刷新 获取最新数据 主线程休眠1s\n        Thread.sleep(1000);\n        System.out.println(cache.get(3));\n    }\n```\n####统计缓存信息 \nguava缓存提供统计缓存信息方法 CacheBuilder.recordStats()开启缓存  cache.stats()获取缓存\n```\n  /**\n     * 缓存统计信息\n     *\n     * @author ming\n     * @date 2017/8/8\n     */\n    @Test\n    public void statTest() throws ExecutionException {\n        LoadingCache<Integer, String> cache = CacheBuilder.newBuilder()\n                .maximumSize(1000)\n                //开启缓存统计功能\n                .recordStats()\n                .build(new CacheLoader<Integer, String>() {\n                    @Override\n                    public String load(Integer key) throws Exception {\n                        return \"缓存:\" + key;\n                    }\n                });\n        //查询缓存\n        for (int i = 0; i < 99; i++) {\n            cache.get(i);\n        }\n        //查询已经缓存的数据 此时命中率 1%\n        cache.get(1);\n        CacheStats stats = cache.stats();\n        //请求次数\n        System.out.println(\"请求中次数:\" + stats.requestCount());\n        //命中次数\n        System.out.println(\"命中次数:\" + stats.hitCount());\n        //命中率\n        System.out.println(\"命中率:\" + stats.hitRate());\n        //miss数量\n        System.out.println(\"miss数量:\" + stats.missCount());\n        //miss 比例\n        System.out.println(\"miss率:\" + stats.missRate());\n        //加载数量\n        System.out.println(\"加载总数量:\" + stats.loadCount());\n        //加载成功数量\n        System.out.println(\"加载成功数量:\" + stats.loadSuccessCount());\n        //加载异常数量\n        System.out.println(\"加载异常数量:\" + stats.loadExceptionCount());\n        //加载异常比例\n        System.out.println(\"加载异常比例\" + stats.loadExceptionRate());\n        //加载总耗时 ns\n        System.out.println(\"加载总耗时:\" + stats.totalLoadTime());\n        //加载新值的平均 时间  ns   (ns/1000 = ms)\n        System.out.println(\"加载源数据平均时间:\" + stats.averageLoadPenalty());\n        //缓存被回收的总数量 显示清除不算\n        System.out.println(\"被自动回收的数量:\" + stats.evictionCount());\n        // 减 本身-other 小于0  返回0\n        //System.out.println(stats.minus(new CacheStats(...)));\n        // 加 本身+other\n        //System.out.println(stats.plus(new CacheStats(...)));\n        System.out.println(stats);\n    }\n```\n#### 总结:guava的cache 适合那些微型项目、或者是一些小地方用用 ;大项目还是得靠 redis或者其他的方式来做;\n#### 不过这个guava的cache 真心好用  异步加载、缓存刷新、过期策略 、缓存监控、都相当好用\n","source":"_posts/java/guava-cache笔记.md","raw":"---\ntitle: guava-cache笔记\ncategories: 笔记\ntags:\n  - guava\n  - tools\nabbrlink: 1be97d35\ndate: 2017-11-11 00:00:00\n---\n\n##　guava cache工具\n#### 示例\n```\n   /**\n      * 缓存示例\n      *\n      * @author ming\n      * @date 2017/8/7\n      */\n     @Test\n     public void helloWorldTest() throws ExecutionException {\n         LoadingCache<Long, String> strCache = CacheBuilder.newBuilder().maximumSize(1000)\n                 .expireAfterWrite(10, TimeUnit.MINUTES)\n                 .build(new CacheLoader<Long, String>() {\n                     //有这个键就从缓存中去 没有就根据load方法从新获取\n                     //如果load没有显示抛出异常 可以用getUnchecked查找缓存 如果显示抛出 就不能使用getUnchecked\n                     @Override\n                     public String load(Long o) throws Exception {\n                         return \"缓存:\" + o;\n                     }\n \n                     //批量加载\n                     @Override\n                     public Map<Long, String> loadAll(Iterable<? extends Long> keys) throws Exception {\n                         Map<Long,String> tempMap = Maps.newConcurrentMap();\n                         keys.forEach(key->{\n                             tempMap.put(key,\"缓存:\"+key);\n                         });\n                         return tempMap;\n                     }\n                     //重新加载\n                     @Override\n                     public ListenableFuture<String> reload(Long key, String oldValue) throws Exception {\n                         return super.reload(key, oldValue);\n                     }\n                 });\n         System.out.println(strCache.get(1L));\n         System.out.println(strCache.get(1L));\n         System.out.println(strCache.get(2L));\n     }\n```\n####适合的场景\n* 通过消耗内存提高速度\n* 预料到某些数据会被频繁查询\n* 缓存数量不会超过内存 \n####需要注意的点\n* 如果显示抛出异常 不可使用getUnchecked();\n* 可以通过重写load、loadAll、reload方法来进行单个加载获取、组合加载获取、重新加载\n* getAll 默认是通过load来加载没有缓存的信息 除非重写loadAll  \n####Callable加载\n可以通过不同的回调函数 来缓存从不同数据源来的数据 不局限于load方法来缓存数据\n```\n  /** 回调方式 执行获取缓存 方便实现\"如果有缓存则返回；否则运算、缓存、然后返回\"\n       * 可以在同一个cache对象中 通过不同方法获取 源数据\n      * @author ming\n      * @date 2017/8/7\n      */\n     @Test\n     public void callableTest() throws ExecutionException {\n         //创建缓存对象 不重写cacheLoader 利用callable来从源数据获取缓存 不管有没有重写 callable优先\n         Cache<Long,String> cache = CacheBuilder.newBuilder().maximumSize(1000).build(new CacheLoader<Long, String>() {\n             //使用带回调方式获取缓存 优先执行回调方法获取的缓存\n             @Override\n             public String load(Long key) throws Exception {\n                 return \"缓存:\"+key;\n             }\n         });\n \n         //创建 通过回调获取缓存\n         System.out.println(cache.get(1L, new Callable<String>() {\n             public String call() throws Exception{\n                 return \"回调缓存:\"+1L;\n             }\n         }));\n \n         System.out.println(cache.get(2L, new Callable<String>() {\n             @Override\n             public String call() throws Exception {\n                 return \"回调缓存2：\"+2;\n             }\n         }));\n     }\n```\n####缓存回收\n* 基于容量回收(size-based eviction)\n如果只是不超过固定值 直接使用maximumSize()构建  如果要通过不同的权重来计算实现Weigher \n\n* 定时回收(timed eviction)\n    expireAfterAccess(long, TimeUnit)：缓存项在给定时间内没有被读/写访问，则回收。请注意这种缓存的回收顺序和基于大小回收一样。\n    expireAfterWrite(long, TimeUnit)：缓存项在给定时间内没有被写访问（创建或覆盖），则回收。如果认为缓存数据总是在固定时候后变得陈旧不可用，这种回收方式是可取的。\n* 基于引用(Reference-based eviction)\n    CacheBuilder.weakKeys()：使用弱引用存储键。当键没有其它（强或软）引用时，缓存项可以被垃圾回收。因为垃圾回收仅依赖恒等式（==），使用弱引用键的缓存用==而不是equals比较键。\n    CacheBuilder.weakValues()：使用弱引用存储值。当值没有其它（强或软）引用时，缓存项可以被垃圾回收。因为垃圾回收仅依赖恒等式（==），使用弱引用值的缓存用==而不是equals比较值。\n    CacheBuilder.softValues()：使用软引用存储值。软引用只有在响应内存需要时，才按照全局最近最少使用的顺序回收。考虑到使用软引用的性能影响，我们通常建议使用更有性能预测性的缓存大小限定（见上文，基于容量回收）。使用软引用值的缓存同样用==而不是equals比较值。\n* 显示清除\n    个别清除：Cache.invalidate(key)\n    批量清除：Cache.invalidateAll(keys)\n    清除所有缓存项：Cache.invalidateAll()\n####监听器\nremovalListener默认是同步进行的 可以通过RemovalListeners.asynchronous(RemovalListener,Executor)装饰成 异步\n```\n    /**清除缓存监听器\n        * @author ming\n        * @date 2017/8/8\n        */\n        @Test\n        public void listenerTest() throws ExecutionException {\n            RemovalListener<Long,String> removalListener = new RemovalListener<Long, String>() {\n                //移除动作监听器  同步进行\n                @Override\n                public void onRemoval(RemovalNotification<Long, String> notification) {\n                    System.out.println(\"\\n删除缓存:\"+notification);\n                    System.out.println(notification.getKey());\n                    System.out.println(notification.getValue());\n                    //清除原因 返回是什么情况下清除的 例如超过大小、手动清除等\n                    System.out.println(notification.getCause());\n                    //是否是自动清除\n                    System.out.println(notification.wasEvicted());\n                }\n            };\n            //装饰成异步的\n            //RemovalListeners.asynchronous(removalListener, new Executor{...});\n            Cache<Long,String> cache= CacheBuilder.newBuilder().maximumSize(1000)\n                    .removalListener(removalListener).build();\n            //添加缓存\n            cache.get(1L, new Callable<String>() {\n                @Override\n                public String call() throws Exception {\n                    return \"回调缓存:\"+1L;\n                }\n            });\n            //显示删除缓存  被removalListener监听到\n            cache.invalidate(1L);\n        }\n```\n####刷新\n* 指定刷新 cache.refresh(key)\n* 定时刷新CacheBuilder.refreshAfterWrite(到时间、访问过期的数据才会触发)、CacheBuilder.expireAfterWrite(到时间直接刷新数据)\n```\n /**\n     * 刷新缓存\n     *\n     * @author ming\n     * @date 2017/8/8\n     */\n    @Test\n    public void refreshTest() throws ExecutionException, InterruptedException {\n        //定时执行服务\n        ScheduledExecutorService executor = new ScheduledThreadPoolExecutor(10);\n        LoadingCache<Integer, String> cache = CacheBuilder.newBuilder()\n                .maximumSize(1000)\n                //定时刷新 到时间后 访问过期数据后进行刷新 优先级比expireAfterWrite高\n                //.refreshAfterWrite(100,TimeUnit.MILLISECONDS)\n                //定时刷新 到时间直接刷新\n                //.expireAfterWrite(100,TimeUnit.MILLISECONDS)\n                .build(new CacheLoader<Integer, String>() {\n                    @Override\n                    public String load(Integer key) throws Exception {\n                        return \"load缓存+\" + key;\n                    }\n\n                    @Override\n                    public ListenableFuture<String> reload(Integer key, String oldValue) throws Exception {\n                        //当key <2的时候 直接刷新 当key>=2 异步刷新\n                        if (key < 2) {\n                            return Futures.immediateFuture(oldValue);\n                        } else {\n                            //异步\n                            ListenableFutureTask<String> task = ListenableFutureTask.create(new Callable<String>() {\n                                @Override\n                                public String call() throws Exception {\n                                    return \"异步刷新缓存\" + System.currentTimeMillis();\n                                }\n                            });\n                            executor.execute(task);\n                            return task;\n                        }\n                    }\n                });\n\n        System.out.println(cache.get(1));\n        System.out.println(cache.get(3));\n        //key<2\n        cache.refresh(1);\n        System.out.println(cache.get(1));\n        //key >= 2 异步刷新\n        cache.refresh(3);\n        //由于是异步刷新 获取最新数据 主线程休眠1s\n        Thread.sleep(1000);\n        System.out.println(cache.get(3));\n    }\n```\n####统计缓存信息 \nguava缓存提供统计缓存信息方法 CacheBuilder.recordStats()开启缓存  cache.stats()获取缓存\n```\n  /**\n     * 缓存统计信息\n     *\n     * @author ming\n     * @date 2017/8/8\n     */\n    @Test\n    public void statTest() throws ExecutionException {\n        LoadingCache<Integer, String> cache = CacheBuilder.newBuilder()\n                .maximumSize(1000)\n                //开启缓存统计功能\n                .recordStats()\n                .build(new CacheLoader<Integer, String>() {\n                    @Override\n                    public String load(Integer key) throws Exception {\n                        return \"缓存:\" + key;\n                    }\n                });\n        //查询缓存\n        for (int i = 0; i < 99; i++) {\n            cache.get(i);\n        }\n        //查询已经缓存的数据 此时命中率 1%\n        cache.get(1);\n        CacheStats stats = cache.stats();\n        //请求次数\n        System.out.println(\"请求中次数:\" + stats.requestCount());\n        //命中次数\n        System.out.println(\"命中次数:\" + stats.hitCount());\n        //命中率\n        System.out.println(\"命中率:\" + stats.hitRate());\n        //miss数量\n        System.out.println(\"miss数量:\" + stats.missCount());\n        //miss 比例\n        System.out.println(\"miss率:\" + stats.missRate());\n        //加载数量\n        System.out.println(\"加载总数量:\" + stats.loadCount());\n        //加载成功数量\n        System.out.println(\"加载成功数量:\" + stats.loadSuccessCount());\n        //加载异常数量\n        System.out.println(\"加载异常数量:\" + stats.loadExceptionCount());\n        //加载异常比例\n        System.out.println(\"加载异常比例\" + stats.loadExceptionRate());\n        //加载总耗时 ns\n        System.out.println(\"加载总耗时:\" + stats.totalLoadTime());\n        //加载新值的平均 时间  ns   (ns/1000 = ms)\n        System.out.println(\"加载源数据平均时间:\" + stats.averageLoadPenalty());\n        //缓存被回收的总数量 显示清除不算\n        System.out.println(\"被自动回收的数量:\" + stats.evictionCount());\n        // 减 本身-other 小于0  返回0\n        //System.out.println(stats.minus(new CacheStats(...)));\n        // 加 本身+other\n        //System.out.println(stats.plus(new CacheStats(...)));\n        System.out.println(stats);\n    }\n```\n#### 总结:guava的cache 适合那些微型项目、或者是一些小地方用用 ;大项目还是得靠 redis或者其他的方式来做;\n#### 不过这个guava的cache 真心好用  异步加载、缓存刷新、过期策略 、缓存监控、都相当好用\n","slug":"java/guava-cache笔记","published":1,"updated":"2018-08-17T08:10:03.919Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjo9uau2u00bemwczqz24c7to","content":"<p>##　guava cache工具</p><h4 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\">   * 缓存示例</span><br><span class=\"line\">   *</span><br><span class=\"line\">   * @author ming</span><br><span class=\"line\">   * @date 2017/8/7</span><br><span class=\"line\">   */</span><br><span class=\"line\">  @Test</span><br><span class=\"line\">  public void helloWorldTest() throws ExecutionException &#123;</span><br><span class=\"line\">      LoadingCache&lt;Long, String&gt; strCache = CacheBuilder.newBuilder().maximumSize(1000)</span><br><span class=\"line\">              .expireAfterWrite(10, TimeUnit.MINUTES)</span><br><span class=\"line\">              .build(new CacheLoader&lt;Long, String&gt;() &#123;</span><br><span class=\"line\">                  //有这个键就从缓存中去 没有就根据load方法从新获取</span><br><span class=\"line\">                  //如果load没有显示抛出异常 可以用getUnchecked查找缓存 如果显示抛出 就不能使用getUnchecked</span><br><span class=\"line\">                  @Override</span><br><span class=\"line\">                  public String load(Long o) throws Exception &#123;</span><br><span class=\"line\">                      return &quot;缓存:&quot; + o;</span><br><span class=\"line\">                  &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">                  //批量加载</span><br><span class=\"line\">                  @Override</span><br><span class=\"line\">                  public Map&lt;Long, String&gt; loadAll(Iterable&lt;? extends Long&gt; keys) throws Exception &#123;</span><br><span class=\"line\">                      Map&lt;Long,String&gt; tempMap = Maps.newConcurrentMap();</span><br><span class=\"line\">                      keys.forEach(key-&gt;&#123;</span><br><span class=\"line\">                          tempMap.put(key,&quot;缓存:&quot;+key);</span><br><span class=\"line\">                      &#125;);</span><br><span class=\"line\">                      return tempMap;</span><br><span class=\"line\">                  &#125;</span><br><span class=\"line\">                  //重新加载</span><br><span class=\"line\">                  @Override</span><br><span class=\"line\">                  public ListenableFuture&lt;String&gt; reload(Long key, String oldValue) throws Exception &#123;</span><br><span class=\"line\">                      return super.reload(key, oldValue);</span><br><span class=\"line\">                  &#125;</span><br><span class=\"line\">              &#125;);</span><br><span class=\"line\">      System.out.println(strCache.get(1L));</span><br><span class=\"line\">      System.out.println(strCache.get(1L));</span><br><span class=\"line\">      System.out.println(strCache.get(2L));</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>####适合的场景</p>\n<ul>\n<li>通过消耗内存提高速度</li>\n<li>预料到某些数据会被频繁查询</li>\n<li>缓存数量不会超过内存<br>####需要注意的点</li>\n<li>如果显示抛出异常 不可使用getUnchecked();</li>\n<li>可以通过重写load、loadAll、reload方法来进行单个加载获取、组合加载获取、重新加载</li>\n<li>getAll 默认是通过load来加载没有缓存的信息 除非重写loadAll<br>####Callable加载<br>可以通过不同的回调函数 来缓存从不同数据源来的数据 不局限于load方法来缓存数据<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/** 回调方式 执行获取缓存 方便实现&quot;如果有缓存则返回；否则运算、缓存、然后返回&quot;</span><br><span class=\"line\">     * 可以在同一个cache对象中 通过不同方法获取 源数据</span><br><span class=\"line\">    * @author ming</span><br><span class=\"line\">    * @date 2017/8/7</span><br><span class=\"line\">    */</span><br><span class=\"line\">   @Test</span><br><span class=\"line\">   public void callableTest() throws ExecutionException &#123;</span><br><span class=\"line\">       //创建缓存对象 不重写cacheLoader 利用callable来从源数据获取缓存 不管有没有重写 callable优先</span><br><span class=\"line\">       Cache&lt;Long,String&gt; cache = CacheBuilder.newBuilder().maximumSize(1000).build(new CacheLoader&lt;Long, String&gt;() &#123;</span><br><span class=\"line\">           //使用带回调方式获取缓存 优先执行回调方法获取的缓存</span><br><span class=\"line\">           @Override</span><br><span class=\"line\">           public String load(Long key) throws Exception &#123;</span><br><span class=\"line\">               return &quot;缓存:&quot;+key;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;);</span><br><span class=\"line\"> </span><br><span class=\"line\">       //创建 通过回调获取缓存</span><br><span class=\"line\">       System.out.println(cache.get(1L, new Callable&lt;String&gt;() &#123;</span><br><span class=\"line\">           public String call() throws Exception&#123;</span><br><span class=\"line\">               return &quot;回调缓存:&quot;+1L;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;));</span><br><span class=\"line\"> </span><br><span class=\"line\">       System.out.println(cache.get(2L, new Callable&lt;String&gt;() &#123;</span><br><span class=\"line\">           @Override</span><br><span class=\"line\">           public String call() throws Exception &#123;</span><br><span class=\"line\">               return &quot;回调缓存2：&quot;+2;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;));</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>####缓存回收</p>\n<ul>\n<li><p>基于容量回收(size-based eviction)<br>如果只是不超过固定值 直接使用maximumSize()构建  如果要通过不同的权重来计算实现Weigher </p>\n</li>\n<li><p>定时回收(timed eviction)<br>  expireAfterAccess(long, TimeUnit)：缓存项在给定时间内没有被读/写访问，则回收。请注意这种缓存的回收顺序和基于大小回收一样。<br>  expireAfterWrite(long, TimeUnit)：缓存项在给定时间内没有被写访问（创建或覆盖），则回收。如果认为缓存数据总是在固定时候后变得陈旧不可用，这种回收方式是可取的。</p>\n</li>\n<li>基于引用(Reference-based eviction)<br>  CacheBuilder.weakKeys()：使用弱引用存储键。当键没有其它（强或软）引用时，缓存项可以被垃圾回收。因为垃圾回收仅依赖恒等式（==），使用弱引用键的缓存用==而不是equals比较键。<br>  CacheBuilder.weakValues()：使用弱引用存储值。当值没有其它（强或软）引用时，缓存项可以被垃圾回收。因为垃圾回收仅依赖恒等式（==），使用弱引用值的缓存用==而不是equals比较值。<br>  CacheBuilder.softValues()：使用软引用存储值。软引用只有在响应内存需要时，才按照全局最近最少使用的顺序回收。考虑到使用软引用的性能影响，我们通常建议使用更有性能预测性的缓存大小限定（见上文，基于容量回收）。使用软引用值的缓存同样用==而不是equals比较值。</li>\n<li>显示清除<br>  个别清除：Cache.invalidate(key)<br>  批量清除：Cache.invalidateAll(keys)<br>  清除所有缓存项：Cache.invalidateAll()<br>####监听器<br>removalListener默认是同步进行的 可以通过RemovalListeners.asynchronous(RemovalListener,Executor)装饰成 异步<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**清除缓存监听器</span><br><span class=\"line\">    * @author ming</span><br><span class=\"line\">    * @date 2017/8/8</span><br><span class=\"line\">    */</span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    public void listenerTest() throws ExecutionException &#123;</span><br><span class=\"line\">        RemovalListener&lt;Long,String&gt; removalListener = new RemovalListener&lt;Long, String&gt;() &#123;</span><br><span class=\"line\">            //移除动作监听器  同步进行</span><br><span class=\"line\">            @Override</span><br><span class=\"line\">            public void onRemoval(RemovalNotification&lt;Long, String&gt; notification) &#123;</span><br><span class=\"line\">                System.out.println(&quot;\\n删除缓存:&quot;+notification);</span><br><span class=\"line\">                System.out.println(notification.getKey());</span><br><span class=\"line\">                System.out.println(notification.getValue());</span><br><span class=\"line\">                //清除原因 返回是什么情况下清除的 例如超过大小、手动清除等</span><br><span class=\"line\">                System.out.println(notification.getCause());</span><br><span class=\"line\">                //是否是自动清除</span><br><span class=\"line\">                System.out.println(notification.wasEvicted());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        //装饰成异步的</span><br><span class=\"line\">        //RemovalListeners.asynchronous(removalListener, new Executor&#123;...&#125;);</span><br><span class=\"line\">        Cache&lt;Long,String&gt; cache= CacheBuilder.newBuilder().maximumSize(1000)</span><br><span class=\"line\">                .removalListener(removalListener).build();</span><br><span class=\"line\">        //添加缓存</span><br><span class=\"line\">        cache.get(1L, new Callable&lt;String&gt;() &#123;</span><br><span class=\"line\">            @Override</span><br><span class=\"line\">            public String call() throws Exception &#123;</span><br><span class=\"line\">                return &quot;回调缓存:&quot;+1L;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        //显示删除缓存  被removalListener监听到</span><br><span class=\"line\">        cache.invalidate(1L);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>####刷新</p>\n<ul>\n<li>指定刷新 cache.refresh(key)</li>\n<li>定时刷新CacheBuilder.refreshAfterWrite(到时间、访问过期的数据才会触发)、CacheBuilder.expireAfterWrite(到时间直接刷新数据)<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\">    * 刷新缓存</span><br><span class=\"line\">    *</span><br><span class=\"line\">    * @author ming</span><br><span class=\"line\">    * @date 2017/8/8</span><br><span class=\"line\">    */</span><br><span class=\"line\">   @Test</span><br><span class=\"line\">   public void refreshTest() throws ExecutionException, InterruptedException &#123;</span><br><span class=\"line\">       //定时执行服务</span><br><span class=\"line\">       ScheduledExecutorService executor = new ScheduledThreadPoolExecutor(10);</span><br><span class=\"line\">       LoadingCache&lt;Integer, String&gt; cache = CacheBuilder.newBuilder()</span><br><span class=\"line\">               .maximumSize(1000)</span><br><span class=\"line\">               //定时刷新 到时间后 访问过期数据后进行刷新 优先级比expireAfterWrite高</span><br><span class=\"line\">               //.refreshAfterWrite(100,TimeUnit.MILLISECONDS)</span><br><span class=\"line\">               //定时刷新 到时间直接刷新</span><br><span class=\"line\">               //.expireAfterWrite(100,TimeUnit.MILLISECONDS)</span><br><span class=\"line\">               .build(new CacheLoader&lt;Integer, String&gt;() &#123;</span><br><span class=\"line\">                   @Override</span><br><span class=\"line\">                   public String load(Integer key) throws Exception &#123;</span><br><span class=\"line\">                       return &quot;load缓存+&quot; + key;</span><br><span class=\"line\">                   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                   @Override</span><br><span class=\"line\">                   public ListenableFuture&lt;String&gt; reload(Integer key, String oldValue) throws Exception &#123;</span><br><span class=\"line\">                       //当key &lt;2的时候 直接刷新 当key&gt;=2 异步刷新</span><br><span class=\"line\">                       if (key &lt; 2) &#123;</span><br><span class=\"line\">                           return Futures.immediateFuture(oldValue);</span><br><span class=\"line\">                       &#125; else &#123;</span><br><span class=\"line\">                           //异步</span><br><span class=\"line\">                           ListenableFutureTask&lt;String&gt; task = ListenableFutureTask.create(new Callable&lt;String&gt;() &#123;</span><br><span class=\"line\">                               @Override</span><br><span class=\"line\">                               public String call() throws Exception &#123;</span><br><span class=\"line\">                                   return &quot;异步刷新缓存&quot; + System.currentTimeMillis();</span><br><span class=\"line\">                               &#125;</span><br><span class=\"line\">                           &#125;);</span><br><span class=\"line\">                           executor.execute(task);</span><br><span class=\"line\">                           return task;</span><br><span class=\"line\">                       &#125;</span><br><span class=\"line\">                   &#125;</span><br><span class=\"line\">               &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">       System.out.println(cache.get(1));</span><br><span class=\"line\">       System.out.println(cache.get(3));</span><br><span class=\"line\">       //key&lt;2</span><br><span class=\"line\">       cache.refresh(1);</span><br><span class=\"line\">       System.out.println(cache.get(1));</span><br><span class=\"line\">       //key &gt;= 2 异步刷新</span><br><span class=\"line\">       cache.refresh(3);</span><br><span class=\"line\">       //由于是异步刷新 获取最新数据 主线程休眠1s</span><br><span class=\"line\">       Thread.sleep(1000);</span><br><span class=\"line\">       System.out.println(cache.get(3));</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>####统计缓存信息<br>guava缓存提供统计缓存信息方法 CacheBuilder.recordStats()开启缓存  cache.stats()获取缓存<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\">   * 缓存统计信息</span><br><span class=\"line\">   *</span><br><span class=\"line\">   * @author ming</span><br><span class=\"line\">   * @date 2017/8/8</span><br><span class=\"line\">   */</span><br><span class=\"line\">  @Test</span><br><span class=\"line\">  public void statTest() throws ExecutionException &#123;</span><br><span class=\"line\">      LoadingCache&lt;Integer, String&gt; cache = CacheBuilder.newBuilder()</span><br><span class=\"line\">              .maximumSize(1000)</span><br><span class=\"line\">              //开启缓存统计功能</span><br><span class=\"line\">              .recordStats()</span><br><span class=\"line\">              .build(new CacheLoader&lt;Integer, String&gt;() &#123;</span><br><span class=\"line\">                  @Override</span><br><span class=\"line\">                  public String load(Integer key) throws Exception &#123;</span><br><span class=\"line\">                      return &quot;缓存:&quot; + key;</span><br><span class=\"line\">                  &#125;</span><br><span class=\"line\">              &#125;);</span><br><span class=\"line\">      //查询缓存</span><br><span class=\"line\">      for (int i = 0; i &lt; 99; i++) &#123;</span><br><span class=\"line\">          cache.get(i);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      //查询已经缓存的数据 此时命中率 1%</span><br><span class=\"line\">      cache.get(1);</span><br><span class=\"line\">      CacheStats stats = cache.stats();</span><br><span class=\"line\">      //请求次数</span><br><span class=\"line\">      System.out.println(&quot;请求中次数:&quot; + stats.requestCount());</span><br><span class=\"line\">      //命中次数</span><br><span class=\"line\">      System.out.println(&quot;命中次数:&quot; + stats.hitCount());</span><br><span class=\"line\">      //命中率</span><br><span class=\"line\">      System.out.println(&quot;命中率:&quot; + stats.hitRate());</span><br><span class=\"line\">      //miss数量</span><br><span class=\"line\">      System.out.println(&quot;miss数量:&quot; + stats.missCount());</span><br><span class=\"line\">      //miss 比例</span><br><span class=\"line\">      System.out.println(&quot;miss率:&quot; + stats.missRate());</span><br><span class=\"line\">      //加载数量</span><br><span class=\"line\">      System.out.println(&quot;加载总数量:&quot; + stats.loadCount());</span><br><span class=\"line\">      //加载成功数量</span><br><span class=\"line\">      System.out.println(&quot;加载成功数量:&quot; + stats.loadSuccessCount());</span><br><span class=\"line\">      //加载异常数量</span><br><span class=\"line\">      System.out.println(&quot;加载异常数量:&quot; + stats.loadExceptionCount());</span><br><span class=\"line\">      //加载异常比例</span><br><span class=\"line\">      System.out.println(&quot;加载异常比例&quot; + stats.loadExceptionRate());</span><br><span class=\"line\">      //加载总耗时 ns</span><br><span class=\"line\">      System.out.println(&quot;加载总耗时:&quot; + stats.totalLoadTime());</span><br><span class=\"line\">      //加载新值的平均 时间  ns   (ns/1000 = ms)</span><br><span class=\"line\">      System.out.println(&quot;加载源数据平均时间:&quot; + stats.averageLoadPenalty());</span><br><span class=\"line\">      //缓存被回收的总数量 显示清除不算</span><br><span class=\"line\">      System.out.println(&quot;被自动回收的数量:&quot; + stats.evictionCount());</span><br><span class=\"line\">      // 减 本身-other 小于0  返回0</span><br><span class=\"line\">      //System.out.println(stats.minus(new CacheStats(...)));</span><br><span class=\"line\">      // 加 本身+other</span><br><span class=\"line\">      //System.out.println(stats.plus(new CacheStats(...)));</span><br><span class=\"line\">      System.out.println(stats);</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure><p></p>\n<h4 id=\"总结-guava的cache-适合那些微型项目、或者是一些小地方用用-大项目还是得靠-redis或者其他的方式来做\"><a href=\"#总结-guava的cache-适合那些微型项目、或者是一些小地方用用-大项目还是得靠-redis或者其他的方式来做\" class=\"headerlink\" title=\"总结:guava的cache 适合那些微型项目、或者是一些小地方用用 ;大项目还是得靠 redis或者其他的方式来做;\"></a>总结:guava的cache 适合那些微型项目、或者是一些小地方用用 ;大项目还是得靠 redis或者其他的方式来做;</h4><h4 id=\"不过这个guava的cache-真心好用-异步加载、缓存刷新、过期策略-、缓存监控、都相当好用\"><a href=\"#不过这个guava的cache-真心好用-异步加载、缓存刷新、过期策略-、缓存监控、都相当好用\" class=\"headerlink\" title=\"不过这个guava的cache 真心好用  异步加载、缓存刷新、过期策略 、缓存监控、都相当好用\"></a>不过这个guava的cache 真心好用  异步加载、缓存刷新、过期策略 、缓存监控、都相当好用</h4>","site":{"data":{}},"excerpt":"","more":"<p>##　guava cache工具</p><h4 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\">   * 缓存示例</span><br><span class=\"line\">   *</span><br><span class=\"line\">   * @author ming</span><br><span class=\"line\">   * @date 2017/8/7</span><br><span class=\"line\">   */</span><br><span class=\"line\">  @Test</span><br><span class=\"line\">  public void helloWorldTest() throws ExecutionException &#123;</span><br><span class=\"line\">      LoadingCache&lt;Long, String&gt; strCache = CacheBuilder.newBuilder().maximumSize(1000)</span><br><span class=\"line\">              .expireAfterWrite(10, TimeUnit.MINUTES)</span><br><span class=\"line\">              .build(new CacheLoader&lt;Long, String&gt;() &#123;</span><br><span class=\"line\">                  //有这个键就从缓存中去 没有就根据load方法从新获取</span><br><span class=\"line\">                  //如果load没有显示抛出异常 可以用getUnchecked查找缓存 如果显示抛出 就不能使用getUnchecked</span><br><span class=\"line\">                  @Override</span><br><span class=\"line\">                  public String load(Long o) throws Exception &#123;</span><br><span class=\"line\">                      return &quot;缓存:&quot; + o;</span><br><span class=\"line\">                  &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">                  //批量加载</span><br><span class=\"line\">                  @Override</span><br><span class=\"line\">                  public Map&lt;Long, String&gt; loadAll(Iterable&lt;? extends Long&gt; keys) throws Exception &#123;</span><br><span class=\"line\">                      Map&lt;Long,String&gt; tempMap = Maps.newConcurrentMap();</span><br><span class=\"line\">                      keys.forEach(key-&gt;&#123;</span><br><span class=\"line\">                          tempMap.put(key,&quot;缓存:&quot;+key);</span><br><span class=\"line\">                      &#125;);</span><br><span class=\"line\">                      return tempMap;</span><br><span class=\"line\">                  &#125;</span><br><span class=\"line\">                  //重新加载</span><br><span class=\"line\">                  @Override</span><br><span class=\"line\">                  public ListenableFuture&lt;String&gt; reload(Long key, String oldValue) throws Exception &#123;</span><br><span class=\"line\">                      return super.reload(key, oldValue);</span><br><span class=\"line\">                  &#125;</span><br><span class=\"line\">              &#125;);</span><br><span class=\"line\">      System.out.println(strCache.get(1L));</span><br><span class=\"line\">      System.out.println(strCache.get(1L));</span><br><span class=\"line\">      System.out.println(strCache.get(2L));</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>####适合的场景</p>\n<ul>\n<li>通过消耗内存提高速度</li>\n<li>预料到某些数据会被频繁查询</li>\n<li>缓存数量不会超过内存<br>####需要注意的点</li>\n<li>如果显示抛出异常 不可使用getUnchecked();</li>\n<li>可以通过重写load、loadAll、reload方法来进行单个加载获取、组合加载获取、重新加载</li>\n<li>getAll 默认是通过load来加载没有缓存的信息 除非重写loadAll<br>####Callable加载<br>可以通过不同的回调函数 来缓存从不同数据源来的数据 不局限于load方法来缓存数据<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/** 回调方式 执行获取缓存 方便实现&quot;如果有缓存则返回；否则运算、缓存、然后返回&quot;</span><br><span class=\"line\">     * 可以在同一个cache对象中 通过不同方法获取 源数据</span><br><span class=\"line\">    * @author ming</span><br><span class=\"line\">    * @date 2017/8/7</span><br><span class=\"line\">    */</span><br><span class=\"line\">   @Test</span><br><span class=\"line\">   public void callableTest() throws ExecutionException &#123;</span><br><span class=\"line\">       //创建缓存对象 不重写cacheLoader 利用callable来从源数据获取缓存 不管有没有重写 callable优先</span><br><span class=\"line\">       Cache&lt;Long,String&gt; cache = CacheBuilder.newBuilder().maximumSize(1000).build(new CacheLoader&lt;Long, String&gt;() &#123;</span><br><span class=\"line\">           //使用带回调方式获取缓存 优先执行回调方法获取的缓存</span><br><span class=\"line\">           @Override</span><br><span class=\"line\">           public String load(Long key) throws Exception &#123;</span><br><span class=\"line\">               return &quot;缓存:&quot;+key;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;);</span><br><span class=\"line\"> </span><br><span class=\"line\">       //创建 通过回调获取缓存</span><br><span class=\"line\">       System.out.println(cache.get(1L, new Callable&lt;String&gt;() &#123;</span><br><span class=\"line\">           public String call() throws Exception&#123;</span><br><span class=\"line\">               return &quot;回调缓存:&quot;+1L;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;));</span><br><span class=\"line\"> </span><br><span class=\"line\">       System.out.println(cache.get(2L, new Callable&lt;String&gt;() &#123;</span><br><span class=\"line\">           @Override</span><br><span class=\"line\">           public String call() throws Exception &#123;</span><br><span class=\"line\">               return &quot;回调缓存2：&quot;+2;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;));</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>####缓存回收</p>\n<ul>\n<li><p>基于容量回收(size-based eviction)<br>如果只是不超过固定值 直接使用maximumSize()构建  如果要通过不同的权重来计算实现Weigher </p>\n</li>\n<li><p>定时回收(timed eviction)<br>  expireAfterAccess(long, TimeUnit)：缓存项在给定时间内没有被读/写访问，则回收。请注意这种缓存的回收顺序和基于大小回收一样。<br>  expireAfterWrite(long, TimeUnit)：缓存项在给定时间内没有被写访问（创建或覆盖），则回收。如果认为缓存数据总是在固定时候后变得陈旧不可用，这种回收方式是可取的。</p>\n</li>\n<li>基于引用(Reference-based eviction)<br>  CacheBuilder.weakKeys()：使用弱引用存储键。当键没有其它（强或软）引用时，缓存项可以被垃圾回收。因为垃圾回收仅依赖恒等式（==），使用弱引用键的缓存用==而不是equals比较键。<br>  CacheBuilder.weakValues()：使用弱引用存储值。当值没有其它（强或软）引用时，缓存项可以被垃圾回收。因为垃圾回收仅依赖恒等式（==），使用弱引用值的缓存用==而不是equals比较值。<br>  CacheBuilder.softValues()：使用软引用存储值。软引用只有在响应内存需要时，才按照全局最近最少使用的顺序回收。考虑到使用软引用的性能影响，我们通常建议使用更有性能预测性的缓存大小限定（见上文，基于容量回收）。使用软引用值的缓存同样用==而不是equals比较值。</li>\n<li>显示清除<br>  个别清除：Cache.invalidate(key)<br>  批量清除：Cache.invalidateAll(keys)<br>  清除所有缓存项：Cache.invalidateAll()<br>####监听器<br>removalListener默认是同步进行的 可以通过RemovalListeners.asynchronous(RemovalListener,Executor)装饰成 异步<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**清除缓存监听器</span><br><span class=\"line\">    * @author ming</span><br><span class=\"line\">    * @date 2017/8/8</span><br><span class=\"line\">    */</span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    public void listenerTest() throws ExecutionException &#123;</span><br><span class=\"line\">        RemovalListener&lt;Long,String&gt; removalListener = new RemovalListener&lt;Long, String&gt;() &#123;</span><br><span class=\"line\">            //移除动作监听器  同步进行</span><br><span class=\"line\">            @Override</span><br><span class=\"line\">            public void onRemoval(RemovalNotification&lt;Long, String&gt; notification) &#123;</span><br><span class=\"line\">                System.out.println(&quot;\\n删除缓存:&quot;+notification);</span><br><span class=\"line\">                System.out.println(notification.getKey());</span><br><span class=\"line\">                System.out.println(notification.getValue());</span><br><span class=\"line\">                //清除原因 返回是什么情况下清除的 例如超过大小、手动清除等</span><br><span class=\"line\">                System.out.println(notification.getCause());</span><br><span class=\"line\">                //是否是自动清除</span><br><span class=\"line\">                System.out.println(notification.wasEvicted());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        //装饰成异步的</span><br><span class=\"line\">        //RemovalListeners.asynchronous(removalListener, new Executor&#123;...&#125;);</span><br><span class=\"line\">        Cache&lt;Long,String&gt; cache= CacheBuilder.newBuilder().maximumSize(1000)</span><br><span class=\"line\">                .removalListener(removalListener).build();</span><br><span class=\"line\">        //添加缓存</span><br><span class=\"line\">        cache.get(1L, new Callable&lt;String&gt;() &#123;</span><br><span class=\"line\">            @Override</span><br><span class=\"line\">            public String call() throws Exception &#123;</span><br><span class=\"line\">                return &quot;回调缓存:&quot;+1L;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        //显示删除缓存  被removalListener监听到</span><br><span class=\"line\">        cache.invalidate(1L);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>####刷新</p>\n<ul>\n<li>指定刷新 cache.refresh(key)</li>\n<li>定时刷新CacheBuilder.refreshAfterWrite(到时间、访问过期的数据才会触发)、CacheBuilder.expireAfterWrite(到时间直接刷新数据)<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\">    * 刷新缓存</span><br><span class=\"line\">    *</span><br><span class=\"line\">    * @author ming</span><br><span class=\"line\">    * @date 2017/8/8</span><br><span class=\"line\">    */</span><br><span class=\"line\">   @Test</span><br><span class=\"line\">   public void refreshTest() throws ExecutionException, InterruptedException &#123;</span><br><span class=\"line\">       //定时执行服务</span><br><span class=\"line\">       ScheduledExecutorService executor = new ScheduledThreadPoolExecutor(10);</span><br><span class=\"line\">       LoadingCache&lt;Integer, String&gt; cache = CacheBuilder.newBuilder()</span><br><span class=\"line\">               .maximumSize(1000)</span><br><span class=\"line\">               //定时刷新 到时间后 访问过期数据后进行刷新 优先级比expireAfterWrite高</span><br><span class=\"line\">               //.refreshAfterWrite(100,TimeUnit.MILLISECONDS)</span><br><span class=\"line\">               //定时刷新 到时间直接刷新</span><br><span class=\"line\">               //.expireAfterWrite(100,TimeUnit.MILLISECONDS)</span><br><span class=\"line\">               .build(new CacheLoader&lt;Integer, String&gt;() &#123;</span><br><span class=\"line\">                   @Override</span><br><span class=\"line\">                   public String load(Integer key) throws Exception &#123;</span><br><span class=\"line\">                       return &quot;load缓存+&quot; + key;</span><br><span class=\"line\">                   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                   @Override</span><br><span class=\"line\">                   public ListenableFuture&lt;String&gt; reload(Integer key, String oldValue) throws Exception &#123;</span><br><span class=\"line\">                       //当key &lt;2的时候 直接刷新 当key&gt;=2 异步刷新</span><br><span class=\"line\">                       if (key &lt; 2) &#123;</span><br><span class=\"line\">                           return Futures.immediateFuture(oldValue);</span><br><span class=\"line\">                       &#125; else &#123;</span><br><span class=\"line\">                           //异步</span><br><span class=\"line\">                           ListenableFutureTask&lt;String&gt; task = ListenableFutureTask.create(new Callable&lt;String&gt;() &#123;</span><br><span class=\"line\">                               @Override</span><br><span class=\"line\">                               public String call() throws Exception &#123;</span><br><span class=\"line\">                                   return &quot;异步刷新缓存&quot; + System.currentTimeMillis();</span><br><span class=\"line\">                               &#125;</span><br><span class=\"line\">                           &#125;);</span><br><span class=\"line\">                           executor.execute(task);</span><br><span class=\"line\">                           return task;</span><br><span class=\"line\">                       &#125;</span><br><span class=\"line\">                   &#125;</span><br><span class=\"line\">               &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">       System.out.println(cache.get(1));</span><br><span class=\"line\">       System.out.println(cache.get(3));</span><br><span class=\"line\">       //key&lt;2</span><br><span class=\"line\">       cache.refresh(1);</span><br><span class=\"line\">       System.out.println(cache.get(1));</span><br><span class=\"line\">       //key &gt;= 2 异步刷新</span><br><span class=\"line\">       cache.refresh(3);</span><br><span class=\"line\">       //由于是异步刷新 获取最新数据 主线程休眠1s</span><br><span class=\"line\">       Thread.sleep(1000);</span><br><span class=\"line\">       System.out.println(cache.get(3));</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>####统计缓存信息<br>guava缓存提供统计缓存信息方法 CacheBuilder.recordStats()开启缓存  cache.stats()获取缓存<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\">   * 缓存统计信息</span><br><span class=\"line\">   *</span><br><span class=\"line\">   * @author ming</span><br><span class=\"line\">   * @date 2017/8/8</span><br><span class=\"line\">   */</span><br><span class=\"line\">  @Test</span><br><span class=\"line\">  public void statTest() throws ExecutionException &#123;</span><br><span class=\"line\">      LoadingCache&lt;Integer, String&gt; cache = CacheBuilder.newBuilder()</span><br><span class=\"line\">              .maximumSize(1000)</span><br><span class=\"line\">              //开启缓存统计功能</span><br><span class=\"line\">              .recordStats()</span><br><span class=\"line\">              .build(new CacheLoader&lt;Integer, String&gt;() &#123;</span><br><span class=\"line\">                  @Override</span><br><span class=\"line\">                  public String load(Integer key) throws Exception &#123;</span><br><span class=\"line\">                      return &quot;缓存:&quot; + key;</span><br><span class=\"line\">                  &#125;</span><br><span class=\"line\">              &#125;);</span><br><span class=\"line\">      //查询缓存</span><br><span class=\"line\">      for (int i = 0; i &lt; 99; i++) &#123;</span><br><span class=\"line\">          cache.get(i);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      //查询已经缓存的数据 此时命中率 1%</span><br><span class=\"line\">      cache.get(1);</span><br><span class=\"line\">      CacheStats stats = cache.stats();</span><br><span class=\"line\">      //请求次数</span><br><span class=\"line\">      System.out.println(&quot;请求中次数:&quot; + stats.requestCount());</span><br><span class=\"line\">      //命中次数</span><br><span class=\"line\">      System.out.println(&quot;命中次数:&quot; + stats.hitCount());</span><br><span class=\"line\">      //命中率</span><br><span class=\"line\">      System.out.println(&quot;命中率:&quot; + stats.hitRate());</span><br><span class=\"line\">      //miss数量</span><br><span class=\"line\">      System.out.println(&quot;miss数量:&quot; + stats.missCount());</span><br><span class=\"line\">      //miss 比例</span><br><span class=\"line\">      System.out.println(&quot;miss率:&quot; + stats.missRate());</span><br><span class=\"line\">      //加载数量</span><br><span class=\"line\">      System.out.println(&quot;加载总数量:&quot; + stats.loadCount());</span><br><span class=\"line\">      //加载成功数量</span><br><span class=\"line\">      System.out.println(&quot;加载成功数量:&quot; + stats.loadSuccessCount());</span><br><span class=\"line\">      //加载异常数量</span><br><span class=\"line\">      System.out.println(&quot;加载异常数量:&quot; + stats.loadExceptionCount());</span><br><span class=\"line\">      //加载异常比例</span><br><span class=\"line\">      System.out.println(&quot;加载异常比例&quot; + stats.loadExceptionRate());</span><br><span class=\"line\">      //加载总耗时 ns</span><br><span class=\"line\">      System.out.println(&quot;加载总耗时:&quot; + stats.totalLoadTime());</span><br><span class=\"line\">      //加载新值的平均 时间  ns   (ns/1000 = ms)</span><br><span class=\"line\">      System.out.println(&quot;加载源数据平均时间:&quot; + stats.averageLoadPenalty());</span><br><span class=\"line\">      //缓存被回收的总数量 显示清除不算</span><br><span class=\"line\">      System.out.println(&quot;被自动回收的数量:&quot; + stats.evictionCount());</span><br><span class=\"line\">      // 减 本身-other 小于0  返回0</span><br><span class=\"line\">      //System.out.println(stats.minus(new CacheStats(...)));</span><br><span class=\"line\">      // 加 本身+other</span><br><span class=\"line\">      //System.out.println(stats.plus(new CacheStats(...)));</span><br><span class=\"line\">      System.out.println(stats);</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure><p></p>\n<h4 id=\"总结-guava的cache-适合那些微型项目、或者是一些小地方用用-大项目还是得靠-redis或者其他的方式来做\"><a href=\"#总结-guava的cache-适合那些微型项目、或者是一些小地方用用-大项目还是得靠-redis或者其他的方式来做\" class=\"headerlink\" title=\"总结:guava的cache 适合那些微型项目、或者是一些小地方用用 ;大项目还是得靠 redis或者其他的方式来做;\"></a>总结:guava的cache 适合那些微型项目、或者是一些小地方用用 ;大项目还是得靠 redis或者其他的方式来做;</h4><h4 id=\"不过这个guava的cache-真心好用-异步加载、缓存刷新、过期策略-、缓存监控、都相当好用\"><a href=\"#不过这个guava的cache-真心好用-异步加载、缓存刷新、过期策略-、缓存监控、都相当好用\" class=\"headerlink\" title=\"不过这个guava的cache 真心好用  异步加载、缓存刷新、过期策略 、缓存监控、都相当好用\"></a>不过这个guava的cache 真心好用  异步加载、缓存刷新、过期策略 、缓存监控、都相当好用</h4>"},{"title":"jdk8-time笔记","comments":1,"abbrlink":"9c26946f","date":"2018-07-09T04:47:13.000Z","_content":"#### 前言\n在jdk8之前 如果要使用date 的类型 就需要把java.util.Date 之类的类组合起来使用   \n特别是在常用的时间加减、获取特定时间、格式化的时候 都必须要java.util.Calendar 、java.util.TimeZone、java.text.SimpleDateFormat这些类进行封装 或者需要引入第三方工具包来简化操作\n\n在jdk8中 time是以jodaTime这个工具包为模板 加入到jdk中的 对于时间的加减、获取特定时间、格式化、变更时区、获取更加精确的时间等等操作变的更加简单  而且是不可变并且线程安全的方法 \n\n#### 核心类和核心方法说明\n##### 核心类\n###### 核心时间对象类\n|名称|功能|备注|\n|:--|:--|:---|\n|Instant|获取从1970年开始的时间点|类似之前的java.util.Date、通过这个类可以获取到非常精确的时间|\n|LocalDate|本地年月日Date对象|获取当前年月日信息的对象|\n|LocalTime|本地时分秒Date对象|获取当前时分秒信息的对象|\n|LocalDateTime|本地年月日时分秒Date对象|获取当前年月日时分秒信息的对象|\n|OffsetTime|获取时分秒Date对象并且带上偏移时间信息||\n|OffsetDateTime|获取带年月日时分秒的Date对象并且带上偏移时间信息||\n|ZonedDateTime|获取带时区信息的年月日时分秒对象 并且带上时区信息||\n|Year|年对象||\n|YearMonth|年月对象||\n|MonthDay|月日对象||\n|Period|时间间隔区间对象|表示以年、月、日衡量的时长|\n|Duration|时间间隔区间对象|表示以秒和纳秒为基准的时长|\n\n###### 核心枚举类  \n\n* ChronoUnit 时间单位\n\n|名称|含义|备注|\n|:--|:--|:---|\n|NANOS|纳秒||\n|MICROS|微秒||\n|MILLIS|毫秒||\n|SECONDS|秒||\n|MINUTES|分||\n|HOURS|小时||\n|HALF_DAYS|半天|12个小时|\n|DAYS|一天|24个小时|\n|WEEKS|一周|7天|\n|MONTHS|一个月||\n|YEARS|一年||\n|DECADES|十年||\n|CENTURIES|百年||\n|MILLENNIA|千年||\n|ERAS|十亿年||\n|FOREVER|永远|Long.MAX_VALUE|\n\n\n* DateTimeFormatter 时间格式化格式\n\n|名称|表达式|备注|\n|:--|:----|:--|\n|ISO_LOCAL_DATE|yyyy-MM-dd||\n|ISO_OFFSET_DATE| yyyy-MM-dd+offset||\n|ISO_DATE| 'yyyy-MM-dd' or 'yyyy-MM-dd+offset'||\n|ISO_LOCAL_TIME |HH:mm or HH:mm:ss||\n|ISO_OFFSET_TIME| HH:mm+offset or HH:mm:ss+offset||\n|ISO_TIME |HH:mm or HH:mm:ss or HH:mm:ss+offset||\n|ISO_LOCAL_DATE_TIME| yyyy-MM-ddTHH:mm:ss||\n|ISO_OFFSET_DATE_TIME| yyyy-MM-ddTHH:mm:ss+offset||\n|ISO_ZONED_DATE_TIME |yyyy-MM-ddTHH:mm:ss+offset\\[zone]||\n|ISO_ORDINAL_DATE |yyyy-days||\n|ISO_WEEK_DATE |yyyy-week-days||\n|ISO_INSTANT |yyyy-MM-ddTHH:mm:ssZ||\n|BASIC_ISO_DATE |yyyyMMdd||\n|RFC_1123_DATE_TIME |'Tue, 3 Jun 2008 11:05:30 GMT'||\n\n\n\n\n##### 核心方法\n###### 通用核心方法\n|名称|功能|备注|\n|:--|:--|:--|\n|of|根据传入的数值转换成相应的时间对象||\n|parse|根据传入的字符串格式和DateTimeFormatter枚举转换成相应的时间对象||\n|get|根据时间对象获取相应的时间属性||\n|is|判断时间的某些属性是否符合方法的意义|使用isBefore或者isAfter来判断时间的前后|\n|with|获取一些特殊时间对象|例如这个月第一天之类的|\n|plus|时间相加|可以根据不同的时间单位进行相加|\n|minus|时间相减|可以根据不同的时间单位进行相减|\n|to|时间类型转换成其他时间类型|例如LocalDateTime to 成 LocalTime|\n|at|转换成带偏移量、时区之类的时间对象操作||\n|format|格式化时间类型|根据DateTimeFormatter对象来转换|\n\n###### 特殊方法\n* 判断是否是闰年\nLocalDate#isLeapYear();\n\n#### 实际案例\n```\npackage com.ming;\n\nimport org.junit.Test;\n\nimport java.text.SimpleDateFormat;\nimport java.time.*;\nimport java.time.format.DateTimeFormatter;\nimport java.time.temporal.ChronoUnit;\nimport java.time.temporal.TemporalAdjusters;\n\n/**\n * 该包的API提供了大量相关的方法，这些方法一般有一致的方法前缀：\n * <p>\n * of：静态工厂方法。\n * <p>\n * parse：静态工厂方法，关注于解析。\n * <p>\n * get：获取某些东西的值。\n * <p>\n * is：检查某些东西的是否是true。\n * <p>\n * with：不可变的setter等价物。\n * <p>\n * plus：加一些量到某个对象。\n * <p>\n * minus：从某个对象减去一些量。\n * <p>\n * to：转换到另一个类型。\n * <p>\n * at：把这个对象与另一个对象组合起来，例如： date.atTime(time)。\n * <p>\n * format：按照合适的格式 格式化成相应的格式的字符串\n * <p>\n *\n * @author ming\n * @date 2018-06-30 15:33:10\n */\npublic class TestTime {\n\n    /**\n     * 获取当前时间\n     *\n     * @author ming\n     * @date 2018-06-30 15:31:33\n     */\n    @Test\n    public void testNewDate() {\n        System.out.println(\"获取带纳秒的时间:\" + Instant.now());\n        System.out.println(\"获取年月日:\" + LocalDate.now());\n        System.out.println(\"获取时分秒:\" + LocalTime.now());\n        System.out.println(\"获取年月日时分秒:\" + LocalDateTime.now());\n        System.out.println(\"获取时分秒带时区:\" + OffsetTime.now());\n        System.out.println(\"获取年月日时分秒带时区:\" + OffsetDateTime.now());\n        System.out.println(\"获取时分秒带详细时区信息:\" + ZonedDateTime.now());\n        System.out.println(\"获取年:\" + Year.now());\n        System.out.println(\"获取年月:\" + YearMonth.now());\n        System.out.println(\"获取月日:\" + MonthDay.now());\n    }\n\n    /**\n     * 直接根据参数转换成时间类型\n     *\n     * @author ming\n     * @date 2018-06-30 15:32:59\n     */\n    @Test\n    public void testOf() {\n        System.out.println(\"根据秒数获取时间点:\" + Instant.ofEpochSecond(1000));\n        System.out.println(\"根据年月日获取年月日时间对象:\" + LocalDate.of(2018, 11, 11));\n        System.out.println(\"根据时分秒获取时分秒对象:\" + LocalTime.of(11, 11, 11));\n        System.out.println(\"根据年月日时分秒获取年月日时分秒时间对象:\" + LocalDateTime.of(2018, 11, 11, 11, 11, 11));\n        System.out.println(\"根据时分秒获取时分秒带时区对象:\" + OffsetTime.of(11, 11, 11, 1, ZoneOffset.UTC));\n        System.out.println(\"根据年月日时分秒获取年月日时分秒时间带时区对象:\" + OffsetDateTime.of(2018, 11, 11, 11, 11, 11, 11, ZoneOffset.UTC));\n        System.out.println(\"根据年月日时分秒获取年月日时分秒时间带时区对象:\" + ZonedDateTime.of(2018, 11, 11, 11, 11, 11, 11, ZoneId.systemDefault()));\n        System.out.println(\"根据年数转会成年对象:\" + Year.of(2018));\n        System.out.println(\"根据年月数获取年月对象:\" + YearMonth.of(2018, 11));\n        System.out.println(\"根据月日数获取月日对象\" + MonthDay.of(11, 11));\n    }\n\n\n    /**\n     * 将指定的文本转换成 指定格式的 time对象\n     *\n     * @author ming\n     * @date 2018-07-02 14:41:23\n     */\n    @Test\n    public void testParse() {\n        System.out.println(LocalDateTime.parse(\"2011-12-03T10:15:30\", DateTimeFormatter.ISO_LOCAL_DATE_TIME));\n        //.....略  跟 of差不多 主要是解析字符串成时间相关对象\n\n    }\n\n\n    /**\n     * 根据时间对象获取 属性\n     *\n     * @author ming\n     * @date 2018-07-05 16:49:34\n     */\n    @Test\n    public void testGet() {\n        System.out.println(\"获取当前时间点的时间戳(s)\" + Instant.now().getEpochSecond());\n        System.out.println(LocalDateTime.now().getDayOfWeek());\n    }\n\n\n    /**\n     * 判断某些属性  例如判断时间前后\n     *\n     * @author ming\n     * @date 2018-07-05 16:50:06\n     */\n    @Test\n    public void testIs() {\n        System.out.println(Instant.now().isAfter(Instant.now()));\n        System.out.println(Instant.now().isBefore(Instant.now()));\n    }\n\n    /**\n     * 获取一些特殊的时间点\n     *\n     * @author ming\n     * @date 2018-07-05 16:51:36\n     */\n    @Test\n    public void testWith() {\n        System.out.println(LocalDateTime.now().with(TemporalAdjusters.firstDayOfMonth()));\n    }\n\n    /**\n     * 时间相加\n     *\n     * @author ming\n     * @date 2018-07-05 16:52:49\n     */\n    @Test\n    public void testPlus() {\n        System.out.println(Instant.now().plusMillis(999999));\n    }\n\n    /**\n     * 时间相减\n     *\n     * @author ming\n     * @date 2018-07-05 16:52:59\n     */\n    @Test\n    public void testMinus() {\n        System.out.println(Instant.now().minusMillis(99999999));\n    }\n\n\n    /**\n     * 将时间对象转换成其他的time对象\n     *\n     * @author ming\n     * @date 2018-07-05 16:53:16\n     */\n    @Test\n    public void testTo() {\n        System.out.println(Instant.now().toEpochMilli());\n        System.out.println(LocalDateTime.now().toLocalTime());\n    }\n\n\n    /**\n     * 设置时区\n     *\n     * @author ming\n     * @date 2018-07-05 16:53:29\n     */\n    @Test\n    public void testAt() {\n        System.out.println(Instant.now().atOffset(ZoneOffset.UTC));\n        System.out.println(Instant.now().atZone(ZoneId.systemDefault()));\n    }\n\n    /**\n     * 时间加减\n     * ChronoUnit来控制加减的量级\n     *\n     * @author ming\n     * @date 2018-07-05 16:58:19\n     * @see ChronoUnit#NANOS 纳秒\n     * @see ChronoUnit#MICROS 微秒\n     * @see ChronoUnit#MILLIS 毫秒\n     * @see ChronoUnit#SECONDS 秒\n     * @see ChronoUnit#MINUTES 分\n     * @see ChronoUnit#HOURS 小时\n     * @see ChronoUnit#HALF_DAYS 半天  12小时\n     * @see ChronoUnit#DAYS 一天  24小时\n     * @see ChronoUnit#WEEKS 一周\n     * @see ChronoUnit#MONTHS 一月\n     * @see ChronoUnit#YEARS 一年\n     * @see ChronoUnit#DECADES 十年\n     * @see ChronoUnit#CENTURIES 百年\n     * @see ChronoUnit#MILLENNIA 千年\n     * @see ChronoUnit#ERAS 十亿年\n     * @see ChronoUnit#FOREVER 永远 Long.MAX_VALUE\n     */\n    @Test\n    public void testPlusAndMinus() {\n        System.out.println(\"加一天\" + LocalDateTime.now().plus(1, ChronoUnit.DAYS));\n        System.out.println(\"减一天\" + LocalDateTime.now().minus(1, ChronoUnit.DAYS));\n    }\n\n    /**\n     * 判断是否是闰年\n     *\n     * @author ming\n     * @date 2018-07-05 17:09:34\n     */\n    @Test\n    public void testLeapYear() {\n        System.out.println(LocalDateTime.now().toLocalDate().isLeapYear());\n    }\n\n    /**\n     * 计算两个时间之间的差值\n     *\n     * @author ming\n     * @date 2018-07-05 17:12:37\n     */\n    @Test\n    public void testPeriod() {\n        LocalDateTime localDateTime = LocalDateTime.of(2018, 1, 11, 11, 11, 11);\n        Period period = Period.between(localDateTime.toLocalDate(), LocalDate.now());\n        System.out.println(\"间隔时间:\" + period.getYears() + \"年\" + period.getMonths() + \"个月\" + period.getDays() + \"天\");\n    }\n\n    /**\n     * 根据formatter枚举格式化时间\n     *\n     * @author ming\n     * @date 2018-07-05 17:32:32\n     * @see DateTimeFormatter#ofPattern(String) 自定义格式化格式\n     * @see DateTimeFormatter#ISO_LOCAL_DATE yyyy-MM-dd\n     * @see DateTimeFormatter#ISO_OFFSET_DATE yyyy-MM-dd+offset\n     * @see DateTimeFormatter#ISO_DATE 'yyyy-MM-dd' or 'yyyy-MM-dd+offset'.\n     * @see DateTimeFormatter#ISO_LOCAL_TIME HH:mm or HH:mm:ss\n     * @see DateTimeFormatter#ISO_OFFSET_TIME HH:mm+offset or HH:mm:ss+offset\n     * @see DateTimeFormatter#ISO_TIME HH:mm or HH:mm:ss or HH:mm:ss+offset\n     * @see DateTimeFormatter#ISO_LOCAL_DATE_TIME yyyy-MM-ddTHH:mm:ss\n     * @see DateTimeFormatter#ISO_OFFSET_DATE_TIME yyyy-MM-ddTHH:mm:ss+offset\n     * @see DateTimeFormatter#ISO_ZONED_DATE_TIME yyyy-MM-ddTHH:mm:ss+offset[zone]\n     * @see DateTimeFormatter#ISO_ORDINAL_DATE yyyy-days\n     * @see DateTimeFormatter#ISO_WEEK_DATE yyyy-week-days\n     * @see DateTimeFormatter#ISO_INSTANT yyyy-MM-ddTHH:mm:ssZ\n     * @see DateTimeFormatter#BASIC_ISO_DATE yyyyMMdd\n     * @see DateTimeFormatter#RFC_1123_DATE_TIME 'Tue, 3 Jun 2008 11:05:30 GMT'\n     */\n    @Test\n    public void testFormat() {\n        System.out.println(LocalDate.parse(\"20181111\", DateTimeFormatter.BASIC_ISO_DATE));\n    }\n\n    /**\n     * 将时间 按照格式 格式化成string\n     *\n     * @author ming\n     * @date 2018-07-05 18:23:40\n     */\n    @Test\n    public void testFormatString() {\n        System.out.println(LocalDateTime.now().format(DateTimeFormatter.BASIC_ISO_DATE));\n    }\n\n\n    /**\n     * jdk8的time 和jdk8之前的date相关的类型转换\n     *\n     * @author ming\n     * @date 2018-07-05 18:29:21\n     */\n    @Test\n    public void testConverter() {\n        //jdk8 time 转换成Date\n        java.util.Date juDate = java.util.Date.from(Instant.now());\n        System.out.println(juDate);\n        java.util.Date juDate1 = java.util.Date.from(LocalDateTime.now().toInstant(ZoneOffset.UTC));\n        System.out.println(juDate1);\n\n        //Date 转换成jdk8 time\n        java.util.Date date = new java.util.Date();\n        System.out.println(date.toInstant());\n        System.out.println(date.toInstant().atZone(ZoneId.systemDefault()).toLocalDate());\n    }\n}\n\n```\n#### 总结 \n时间对象的操作在jdk8之前 其实很操蛋 只能通过使用一些自己封装或者 一些组织封装的dateUtils 来操作 有时候一些特殊的时间处理只能单独写工具了 很麻烦   \n现在jdk8 的time包 直接继承了jodaTime的操作 常用操作变成了 不可变而且线程安全的操作了 并且增强了对时间的 偏移和时区的处理 增加了 很多常规的时间处理方法 \n有点蛋疼的是需要考虑 框架之类的对于time包的兼容  特别是jdbc对于time包的对象的支持程度  \n不过  我可以使用Date转换成time的时间对象 在进行操作 然后再转换回去即可 ","source":"_posts/java/jdk8-time笔记.md","raw":"---\ntitle: jdk8-time笔记\ncomments: true\ncategories: 笔记\ntags:\n  - jdk8\n  - time\nabbrlink: 9c26946f\ndate: 2018-07-09 12:47:13\n---\n#### 前言\n在jdk8之前 如果要使用date 的类型 就需要把java.util.Date 之类的类组合起来使用   \n特别是在常用的时间加减、获取特定时间、格式化的时候 都必须要java.util.Calendar 、java.util.TimeZone、java.text.SimpleDateFormat这些类进行封装 或者需要引入第三方工具包来简化操作\n\n在jdk8中 time是以jodaTime这个工具包为模板 加入到jdk中的 对于时间的加减、获取特定时间、格式化、变更时区、获取更加精确的时间等等操作变的更加简单  而且是不可变并且线程安全的方法 \n\n#### 核心类和核心方法说明\n##### 核心类\n###### 核心时间对象类\n|名称|功能|备注|\n|:--|:--|:---|\n|Instant|获取从1970年开始的时间点|类似之前的java.util.Date、通过这个类可以获取到非常精确的时间|\n|LocalDate|本地年月日Date对象|获取当前年月日信息的对象|\n|LocalTime|本地时分秒Date对象|获取当前时分秒信息的对象|\n|LocalDateTime|本地年月日时分秒Date对象|获取当前年月日时分秒信息的对象|\n|OffsetTime|获取时分秒Date对象并且带上偏移时间信息||\n|OffsetDateTime|获取带年月日时分秒的Date对象并且带上偏移时间信息||\n|ZonedDateTime|获取带时区信息的年月日时分秒对象 并且带上时区信息||\n|Year|年对象||\n|YearMonth|年月对象||\n|MonthDay|月日对象||\n|Period|时间间隔区间对象|表示以年、月、日衡量的时长|\n|Duration|时间间隔区间对象|表示以秒和纳秒为基准的时长|\n\n###### 核心枚举类  \n\n* ChronoUnit 时间单位\n\n|名称|含义|备注|\n|:--|:--|:---|\n|NANOS|纳秒||\n|MICROS|微秒||\n|MILLIS|毫秒||\n|SECONDS|秒||\n|MINUTES|分||\n|HOURS|小时||\n|HALF_DAYS|半天|12个小时|\n|DAYS|一天|24个小时|\n|WEEKS|一周|7天|\n|MONTHS|一个月||\n|YEARS|一年||\n|DECADES|十年||\n|CENTURIES|百年||\n|MILLENNIA|千年||\n|ERAS|十亿年||\n|FOREVER|永远|Long.MAX_VALUE|\n\n\n* DateTimeFormatter 时间格式化格式\n\n|名称|表达式|备注|\n|:--|:----|:--|\n|ISO_LOCAL_DATE|yyyy-MM-dd||\n|ISO_OFFSET_DATE| yyyy-MM-dd+offset||\n|ISO_DATE| 'yyyy-MM-dd' or 'yyyy-MM-dd+offset'||\n|ISO_LOCAL_TIME |HH:mm or HH:mm:ss||\n|ISO_OFFSET_TIME| HH:mm+offset or HH:mm:ss+offset||\n|ISO_TIME |HH:mm or HH:mm:ss or HH:mm:ss+offset||\n|ISO_LOCAL_DATE_TIME| yyyy-MM-ddTHH:mm:ss||\n|ISO_OFFSET_DATE_TIME| yyyy-MM-ddTHH:mm:ss+offset||\n|ISO_ZONED_DATE_TIME |yyyy-MM-ddTHH:mm:ss+offset\\[zone]||\n|ISO_ORDINAL_DATE |yyyy-days||\n|ISO_WEEK_DATE |yyyy-week-days||\n|ISO_INSTANT |yyyy-MM-ddTHH:mm:ssZ||\n|BASIC_ISO_DATE |yyyyMMdd||\n|RFC_1123_DATE_TIME |'Tue, 3 Jun 2008 11:05:30 GMT'||\n\n\n\n\n##### 核心方法\n###### 通用核心方法\n|名称|功能|备注|\n|:--|:--|:--|\n|of|根据传入的数值转换成相应的时间对象||\n|parse|根据传入的字符串格式和DateTimeFormatter枚举转换成相应的时间对象||\n|get|根据时间对象获取相应的时间属性||\n|is|判断时间的某些属性是否符合方法的意义|使用isBefore或者isAfter来判断时间的前后|\n|with|获取一些特殊时间对象|例如这个月第一天之类的|\n|plus|时间相加|可以根据不同的时间单位进行相加|\n|minus|时间相减|可以根据不同的时间单位进行相减|\n|to|时间类型转换成其他时间类型|例如LocalDateTime to 成 LocalTime|\n|at|转换成带偏移量、时区之类的时间对象操作||\n|format|格式化时间类型|根据DateTimeFormatter对象来转换|\n\n###### 特殊方法\n* 判断是否是闰年\nLocalDate#isLeapYear();\n\n#### 实际案例\n```\npackage com.ming;\n\nimport org.junit.Test;\n\nimport java.text.SimpleDateFormat;\nimport java.time.*;\nimport java.time.format.DateTimeFormatter;\nimport java.time.temporal.ChronoUnit;\nimport java.time.temporal.TemporalAdjusters;\n\n/**\n * 该包的API提供了大量相关的方法，这些方法一般有一致的方法前缀：\n * <p>\n * of：静态工厂方法。\n * <p>\n * parse：静态工厂方法，关注于解析。\n * <p>\n * get：获取某些东西的值。\n * <p>\n * is：检查某些东西的是否是true。\n * <p>\n * with：不可变的setter等价物。\n * <p>\n * plus：加一些量到某个对象。\n * <p>\n * minus：从某个对象减去一些量。\n * <p>\n * to：转换到另一个类型。\n * <p>\n * at：把这个对象与另一个对象组合起来，例如： date.atTime(time)。\n * <p>\n * format：按照合适的格式 格式化成相应的格式的字符串\n * <p>\n *\n * @author ming\n * @date 2018-06-30 15:33:10\n */\npublic class TestTime {\n\n    /**\n     * 获取当前时间\n     *\n     * @author ming\n     * @date 2018-06-30 15:31:33\n     */\n    @Test\n    public void testNewDate() {\n        System.out.println(\"获取带纳秒的时间:\" + Instant.now());\n        System.out.println(\"获取年月日:\" + LocalDate.now());\n        System.out.println(\"获取时分秒:\" + LocalTime.now());\n        System.out.println(\"获取年月日时分秒:\" + LocalDateTime.now());\n        System.out.println(\"获取时分秒带时区:\" + OffsetTime.now());\n        System.out.println(\"获取年月日时分秒带时区:\" + OffsetDateTime.now());\n        System.out.println(\"获取时分秒带详细时区信息:\" + ZonedDateTime.now());\n        System.out.println(\"获取年:\" + Year.now());\n        System.out.println(\"获取年月:\" + YearMonth.now());\n        System.out.println(\"获取月日:\" + MonthDay.now());\n    }\n\n    /**\n     * 直接根据参数转换成时间类型\n     *\n     * @author ming\n     * @date 2018-06-30 15:32:59\n     */\n    @Test\n    public void testOf() {\n        System.out.println(\"根据秒数获取时间点:\" + Instant.ofEpochSecond(1000));\n        System.out.println(\"根据年月日获取年月日时间对象:\" + LocalDate.of(2018, 11, 11));\n        System.out.println(\"根据时分秒获取时分秒对象:\" + LocalTime.of(11, 11, 11));\n        System.out.println(\"根据年月日时分秒获取年月日时分秒时间对象:\" + LocalDateTime.of(2018, 11, 11, 11, 11, 11));\n        System.out.println(\"根据时分秒获取时分秒带时区对象:\" + OffsetTime.of(11, 11, 11, 1, ZoneOffset.UTC));\n        System.out.println(\"根据年月日时分秒获取年月日时分秒时间带时区对象:\" + OffsetDateTime.of(2018, 11, 11, 11, 11, 11, 11, ZoneOffset.UTC));\n        System.out.println(\"根据年月日时分秒获取年月日时分秒时间带时区对象:\" + ZonedDateTime.of(2018, 11, 11, 11, 11, 11, 11, ZoneId.systemDefault()));\n        System.out.println(\"根据年数转会成年对象:\" + Year.of(2018));\n        System.out.println(\"根据年月数获取年月对象:\" + YearMonth.of(2018, 11));\n        System.out.println(\"根据月日数获取月日对象\" + MonthDay.of(11, 11));\n    }\n\n\n    /**\n     * 将指定的文本转换成 指定格式的 time对象\n     *\n     * @author ming\n     * @date 2018-07-02 14:41:23\n     */\n    @Test\n    public void testParse() {\n        System.out.println(LocalDateTime.parse(\"2011-12-03T10:15:30\", DateTimeFormatter.ISO_LOCAL_DATE_TIME));\n        //.....略  跟 of差不多 主要是解析字符串成时间相关对象\n\n    }\n\n\n    /**\n     * 根据时间对象获取 属性\n     *\n     * @author ming\n     * @date 2018-07-05 16:49:34\n     */\n    @Test\n    public void testGet() {\n        System.out.println(\"获取当前时间点的时间戳(s)\" + Instant.now().getEpochSecond());\n        System.out.println(LocalDateTime.now().getDayOfWeek());\n    }\n\n\n    /**\n     * 判断某些属性  例如判断时间前后\n     *\n     * @author ming\n     * @date 2018-07-05 16:50:06\n     */\n    @Test\n    public void testIs() {\n        System.out.println(Instant.now().isAfter(Instant.now()));\n        System.out.println(Instant.now().isBefore(Instant.now()));\n    }\n\n    /**\n     * 获取一些特殊的时间点\n     *\n     * @author ming\n     * @date 2018-07-05 16:51:36\n     */\n    @Test\n    public void testWith() {\n        System.out.println(LocalDateTime.now().with(TemporalAdjusters.firstDayOfMonth()));\n    }\n\n    /**\n     * 时间相加\n     *\n     * @author ming\n     * @date 2018-07-05 16:52:49\n     */\n    @Test\n    public void testPlus() {\n        System.out.println(Instant.now().plusMillis(999999));\n    }\n\n    /**\n     * 时间相减\n     *\n     * @author ming\n     * @date 2018-07-05 16:52:59\n     */\n    @Test\n    public void testMinus() {\n        System.out.println(Instant.now().minusMillis(99999999));\n    }\n\n\n    /**\n     * 将时间对象转换成其他的time对象\n     *\n     * @author ming\n     * @date 2018-07-05 16:53:16\n     */\n    @Test\n    public void testTo() {\n        System.out.println(Instant.now().toEpochMilli());\n        System.out.println(LocalDateTime.now().toLocalTime());\n    }\n\n\n    /**\n     * 设置时区\n     *\n     * @author ming\n     * @date 2018-07-05 16:53:29\n     */\n    @Test\n    public void testAt() {\n        System.out.println(Instant.now().atOffset(ZoneOffset.UTC));\n        System.out.println(Instant.now().atZone(ZoneId.systemDefault()));\n    }\n\n    /**\n     * 时间加减\n     * ChronoUnit来控制加减的量级\n     *\n     * @author ming\n     * @date 2018-07-05 16:58:19\n     * @see ChronoUnit#NANOS 纳秒\n     * @see ChronoUnit#MICROS 微秒\n     * @see ChronoUnit#MILLIS 毫秒\n     * @see ChronoUnit#SECONDS 秒\n     * @see ChronoUnit#MINUTES 分\n     * @see ChronoUnit#HOURS 小时\n     * @see ChronoUnit#HALF_DAYS 半天  12小时\n     * @see ChronoUnit#DAYS 一天  24小时\n     * @see ChronoUnit#WEEKS 一周\n     * @see ChronoUnit#MONTHS 一月\n     * @see ChronoUnit#YEARS 一年\n     * @see ChronoUnit#DECADES 十年\n     * @see ChronoUnit#CENTURIES 百年\n     * @see ChronoUnit#MILLENNIA 千年\n     * @see ChronoUnit#ERAS 十亿年\n     * @see ChronoUnit#FOREVER 永远 Long.MAX_VALUE\n     */\n    @Test\n    public void testPlusAndMinus() {\n        System.out.println(\"加一天\" + LocalDateTime.now().plus(1, ChronoUnit.DAYS));\n        System.out.println(\"减一天\" + LocalDateTime.now().minus(1, ChronoUnit.DAYS));\n    }\n\n    /**\n     * 判断是否是闰年\n     *\n     * @author ming\n     * @date 2018-07-05 17:09:34\n     */\n    @Test\n    public void testLeapYear() {\n        System.out.println(LocalDateTime.now().toLocalDate().isLeapYear());\n    }\n\n    /**\n     * 计算两个时间之间的差值\n     *\n     * @author ming\n     * @date 2018-07-05 17:12:37\n     */\n    @Test\n    public void testPeriod() {\n        LocalDateTime localDateTime = LocalDateTime.of(2018, 1, 11, 11, 11, 11);\n        Period period = Period.between(localDateTime.toLocalDate(), LocalDate.now());\n        System.out.println(\"间隔时间:\" + period.getYears() + \"年\" + period.getMonths() + \"个月\" + period.getDays() + \"天\");\n    }\n\n    /**\n     * 根据formatter枚举格式化时间\n     *\n     * @author ming\n     * @date 2018-07-05 17:32:32\n     * @see DateTimeFormatter#ofPattern(String) 自定义格式化格式\n     * @see DateTimeFormatter#ISO_LOCAL_DATE yyyy-MM-dd\n     * @see DateTimeFormatter#ISO_OFFSET_DATE yyyy-MM-dd+offset\n     * @see DateTimeFormatter#ISO_DATE 'yyyy-MM-dd' or 'yyyy-MM-dd+offset'.\n     * @see DateTimeFormatter#ISO_LOCAL_TIME HH:mm or HH:mm:ss\n     * @see DateTimeFormatter#ISO_OFFSET_TIME HH:mm+offset or HH:mm:ss+offset\n     * @see DateTimeFormatter#ISO_TIME HH:mm or HH:mm:ss or HH:mm:ss+offset\n     * @see DateTimeFormatter#ISO_LOCAL_DATE_TIME yyyy-MM-ddTHH:mm:ss\n     * @see DateTimeFormatter#ISO_OFFSET_DATE_TIME yyyy-MM-ddTHH:mm:ss+offset\n     * @see DateTimeFormatter#ISO_ZONED_DATE_TIME yyyy-MM-ddTHH:mm:ss+offset[zone]\n     * @see DateTimeFormatter#ISO_ORDINAL_DATE yyyy-days\n     * @see DateTimeFormatter#ISO_WEEK_DATE yyyy-week-days\n     * @see DateTimeFormatter#ISO_INSTANT yyyy-MM-ddTHH:mm:ssZ\n     * @see DateTimeFormatter#BASIC_ISO_DATE yyyyMMdd\n     * @see DateTimeFormatter#RFC_1123_DATE_TIME 'Tue, 3 Jun 2008 11:05:30 GMT'\n     */\n    @Test\n    public void testFormat() {\n        System.out.println(LocalDate.parse(\"20181111\", DateTimeFormatter.BASIC_ISO_DATE));\n    }\n\n    /**\n     * 将时间 按照格式 格式化成string\n     *\n     * @author ming\n     * @date 2018-07-05 18:23:40\n     */\n    @Test\n    public void testFormatString() {\n        System.out.println(LocalDateTime.now().format(DateTimeFormatter.BASIC_ISO_DATE));\n    }\n\n\n    /**\n     * jdk8的time 和jdk8之前的date相关的类型转换\n     *\n     * @author ming\n     * @date 2018-07-05 18:29:21\n     */\n    @Test\n    public void testConverter() {\n        //jdk8 time 转换成Date\n        java.util.Date juDate = java.util.Date.from(Instant.now());\n        System.out.println(juDate);\n        java.util.Date juDate1 = java.util.Date.from(LocalDateTime.now().toInstant(ZoneOffset.UTC));\n        System.out.println(juDate1);\n\n        //Date 转换成jdk8 time\n        java.util.Date date = new java.util.Date();\n        System.out.println(date.toInstant());\n        System.out.println(date.toInstant().atZone(ZoneId.systemDefault()).toLocalDate());\n    }\n}\n\n```\n#### 总结 \n时间对象的操作在jdk8之前 其实很操蛋 只能通过使用一些自己封装或者 一些组织封装的dateUtils 来操作 有时候一些特殊的时间处理只能单独写工具了 很麻烦   \n现在jdk8 的time包 直接继承了jodaTime的操作 常用操作变成了 不可变而且线程安全的操作了 并且增强了对时间的 偏移和时区的处理 增加了 很多常规的时间处理方法 \n有点蛋疼的是需要考虑 框架之类的对于time包的兼容  特别是jdbc对于time包的对象的支持程度  \n不过  我可以使用Date转换成time的时间对象 在进行操作 然后再转换回去即可 ","slug":"java/jdk8-time笔记","published":1,"updated":"2018-08-17T08:10:03.923Z","layout":"post","photos":[],"link":"","_id":"cjo9uau2v00bfmwczxm4as00x","content":"<h4 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h4><p>在jdk8之前 如果要使用date 的类型 就需要把java.util.Date 之类的类组合起来使用<br>特别是在常用的时间加减、获取特定时间、格式化的时候 都必须要java.util.Calendar 、java.util.TimeZone、java.text.SimpleDateFormat这些类进行封装 或者需要引入第三方工具包来简化操作</p><p>在jdk8中 time是以jodaTime这个工具包为模板 加入到jdk中的 对于时间的加减、获取特定时间、格式化、变更时区、获取更加精确的时间等等操作变的更加简单 而且是不可变并且线程安全的方法</p><h4 id=\"核心类和核心方法说明\"><a href=\"#核心类和核心方法说明\" class=\"headerlink\" title=\"核心类和核心方法说明\"></a>核心类和核心方法说明</h4><h5 id=\"核心类\"><a href=\"#核心类\" class=\"headerlink\" title=\"核心类\"></a>核心类</h5><h6 id=\"核心时间对象类\"><a href=\"#核心时间对象类\" class=\"headerlink\" title=\"核心时间对象类\"></a>核心时间对象类</h6><table><thead><tr><th style=\"text-align:left\">名称</th><th style=\"text-align:left\">功能</th><th style=\"text-align:left\">备注</th></tr></thead><tbody><tr><td style=\"text-align:left\">Instant</td><td style=\"text-align:left\">获取从1970年开始的时间点</td><td style=\"text-align:left\">类似之前的java.util.Date、通过这个类可以获取到非常精确的时间</td></tr><tr><td style=\"text-align:left\">LocalDate</td><td style=\"text-align:left\">本地年月日Date对象</td><td style=\"text-align:left\">获取当前年月日信息的对象</td></tr><tr><td style=\"text-align:left\">LocalTime</td><td style=\"text-align:left\">本地时分秒Date对象</td><td style=\"text-align:left\">获取当前时分秒信息的对象</td></tr><tr><td style=\"text-align:left\">LocalDateTime</td><td style=\"text-align:left\">本地年月日时分秒Date对象</td><td style=\"text-align:left\">获取当前年月日时分秒信息的对象</td></tr><tr><td style=\"text-align:left\">OffsetTime</td><td style=\"text-align:left\">获取时分秒Date对象并且带上偏移时间信息</td><td style=\"text-align:left\"></td></tr><tr><td style=\"text-align:left\">OffsetDateTime</td><td style=\"text-align:left\">获取带年月日时分秒的Date对象并且带上偏移时间信息</td><td style=\"text-align:left\"></td></tr><tr><td style=\"text-align:left\">ZonedDateTime</td><td style=\"text-align:left\">获取带时区信息的年月日时分秒对象 并且带上时区信息</td><td style=\"text-align:left\"></td></tr><tr><td style=\"text-align:left\">Year</td><td style=\"text-align:left\">年对象</td><td style=\"text-align:left\"></td></tr><tr><td style=\"text-align:left\">YearMonth</td><td style=\"text-align:left\">年月对象</td><td style=\"text-align:left\"></td></tr><tr><td style=\"text-align:left\">MonthDay</td><td style=\"text-align:left\">月日对象</td><td style=\"text-align:left\"></td></tr><tr><td style=\"text-align:left\">Period</td><td style=\"text-align:left\">时间间隔区间对象</td><td style=\"text-align:left\">表示以年、月、日衡量的时长</td></tr><tr><td style=\"text-align:left\">Duration</td><td style=\"text-align:left\">时间间隔区间对象</td><td style=\"text-align:left\">表示以秒和纳秒为基准的时长</td></tr></tbody></table><h6 id=\"核心枚举类\"><a href=\"#核心枚举类\" class=\"headerlink\" title=\"核心枚举类\"></a>核心枚举类</h6><ul><li>ChronoUnit 时间单位</li></ul><table><thead><tr><th style=\"text-align:left\">名称</th><th style=\"text-align:left\">含义</th><th style=\"text-align:left\">备注</th></tr></thead><tbody><tr><td style=\"text-align:left\">NANOS</td><td style=\"text-align:left\">纳秒</td><td style=\"text-align:left\"></td></tr><tr><td style=\"text-align:left\">MICROS</td><td style=\"text-align:left\">微秒</td><td style=\"text-align:left\"></td></tr><tr><td style=\"text-align:left\">MILLIS</td><td style=\"text-align:left\">毫秒</td><td style=\"text-align:left\"></td></tr><tr><td style=\"text-align:left\">SECONDS</td><td style=\"text-align:left\">秒</td><td style=\"text-align:left\"></td></tr><tr><td style=\"text-align:left\">MINUTES</td><td style=\"text-align:left\">分</td><td style=\"text-align:left\"></td></tr><tr><td style=\"text-align:left\">HOURS</td><td style=\"text-align:left\">小时</td><td style=\"text-align:left\"></td></tr><tr><td style=\"text-align:left\">HALF_DAYS</td><td style=\"text-align:left\">半天</td><td style=\"text-align:left\">12个小时</td></tr><tr><td style=\"text-align:left\">DAYS</td><td style=\"text-align:left\">一天</td><td style=\"text-align:left\">24个小时</td></tr><tr><td style=\"text-align:left\">WEEKS</td><td style=\"text-align:left\">一周</td><td style=\"text-align:left\">7天</td></tr><tr><td style=\"text-align:left\">MONTHS</td><td style=\"text-align:left\">一个月</td><td style=\"text-align:left\"></td></tr><tr><td style=\"text-align:left\">YEARS</td><td style=\"text-align:left\">一年</td><td style=\"text-align:left\"></td></tr><tr><td style=\"text-align:left\">DECADES</td><td style=\"text-align:left\">十年</td><td style=\"text-align:left\"></td></tr><tr><td style=\"text-align:left\">CENTURIES</td><td style=\"text-align:left\">百年</td><td style=\"text-align:left\"></td></tr><tr><td style=\"text-align:left\">MILLENNIA</td><td style=\"text-align:left\">千年</td><td style=\"text-align:left\"></td></tr><tr><td style=\"text-align:left\">ERAS</td><td style=\"text-align:left\">十亿年</td><td style=\"text-align:left\"></td></tr><tr><td style=\"text-align:left\">FOREVER</td><td style=\"text-align:left\">永远</td><td style=\"text-align:left\">Long.MAX_VALUE</td></tr></tbody></table><ul><li>DateTimeFormatter 时间格式化格式</li></ul><table><thead><tr><th style=\"text-align:left\">名称</th><th style=\"text-align:left\">表达式</th><th style=\"text-align:left\">备注</th></tr></thead><tbody><tr><td style=\"text-align:left\">ISO_LOCAL_DATE</td><td style=\"text-align:left\">yyyy-MM-dd</td><td style=\"text-align:left\"></td></tr><tr><td style=\"text-align:left\">ISO_OFFSET_DATE</td><td style=\"text-align:left\">yyyy-MM-dd+offset</td><td style=\"text-align:left\"></td></tr><tr><td style=\"text-align:left\">ISO_DATE</td><td style=\"text-align:left\">‘yyyy-MM-dd’ or ‘yyyy-MM-dd+offset’</td><td style=\"text-align:left\"></td></tr><tr><td style=\"text-align:left\">ISO_LOCAL_TIME</td><td style=\"text-align:left\">HH:mm or HH:mm:ss</td><td style=\"text-align:left\"></td></tr><tr><td style=\"text-align:left\">ISO_OFFSET_TIME</td><td style=\"text-align:left\">HH:mm+offset or HH:mm:ss+offset</td><td style=\"text-align:left\"></td></tr><tr><td style=\"text-align:left\">ISO_TIME</td><td style=\"text-align:left\">HH:mm or HH:mm:ss or HH:mm:ss+offset</td><td style=\"text-align:left\"></td></tr><tr><td style=\"text-align:left\">ISO_LOCAL_DATE_TIME</td><td style=\"text-align:left\">yyyy-MM-ddTHH:mm:ss</td><td style=\"text-align:left\"></td></tr><tr><td style=\"text-align:left\">ISO_OFFSET_DATE_TIME</td><td style=\"text-align:left\">yyyy-MM-ddTHH:mm:ss+offset</td><td style=\"text-align:left\"></td></tr><tr><td style=\"text-align:left\">ISO_ZONED_DATE_TIME</td><td style=\"text-align:left\">yyyy-MM-ddTHH:mm:ss+offset[zone]</td><td style=\"text-align:left\"></td></tr><tr><td style=\"text-align:left\">ISO_ORDINAL_DATE</td><td style=\"text-align:left\">yyyy-days</td><td style=\"text-align:left\"></td></tr><tr><td style=\"text-align:left\">ISO_WEEK_DATE</td><td style=\"text-align:left\">yyyy-week-days</td><td style=\"text-align:left\"></td></tr><tr><td style=\"text-align:left\">ISO_INSTANT</td><td style=\"text-align:left\">yyyy-MM-ddTHH:mm:ssZ</td><td style=\"text-align:left\"></td></tr><tr><td style=\"text-align:left\">BASIC_ISO_DATE</td><td style=\"text-align:left\">yyyyMMdd</td><td style=\"text-align:left\"></td></tr><tr><td style=\"text-align:left\">RFC_1123_DATE_TIME</td><td style=\"text-align:left\">‘Tue, 3 Jun 2008 11:05:30 GMT’</td></tr></tbody></table><h5 id=\"核心方法\"><a href=\"#核心方法\" class=\"headerlink\" title=\"核心方法\"></a>核心方法</h5><h6 id=\"通用核心方法\"><a href=\"#通用核心方法\" class=\"headerlink\" title=\"通用核心方法\"></a>通用核心方法</h6><table><thead><tr><th style=\"text-align:left\">名称</th><th style=\"text-align:left\">功能</th><th style=\"text-align:left\">备注</th></tr></thead><tbody><tr><td style=\"text-align:left\">of</td><td style=\"text-align:left\">根据传入的数值转换成相应的时间对象</td><td style=\"text-align:left\"></td></tr><tr><td style=\"text-align:left\">parse</td><td style=\"text-align:left\">根据传入的字符串格式和DateTimeFormatter枚举转换成相应的时间对象</td><td style=\"text-align:left\"></td></tr><tr><td style=\"text-align:left\">get</td><td style=\"text-align:left\">根据时间对象获取相应的时间属性</td><td style=\"text-align:left\"></td></tr><tr><td style=\"text-align:left\">is</td><td style=\"text-align:left\">判断时间的某些属性是否符合方法的意义</td><td style=\"text-align:left\">使用isBefore或者isAfter来判断时间的前后</td></tr><tr><td style=\"text-align:left\">with</td><td style=\"text-align:left\">获取一些特殊时间对象</td><td style=\"text-align:left\">例如这个月第一天之类的</td></tr><tr><td style=\"text-align:left\">plus</td><td style=\"text-align:left\">时间相加</td><td style=\"text-align:left\">可以根据不同的时间单位进行相加</td></tr><tr><td style=\"text-align:left\">minus</td><td style=\"text-align:left\">时间相减</td><td style=\"text-align:left\">可以根据不同的时间单位进行相减</td></tr><tr><td style=\"text-align:left\">to</td><td style=\"text-align:left\">时间类型转换成其他时间类型</td><td style=\"text-align:left\">例如LocalDateTime to 成 LocalTime</td></tr><tr><td style=\"text-align:left\">at</td><td style=\"text-align:left\">转换成带偏移量、时区之类的时间对象操作</td><td style=\"text-align:left\"></td></tr><tr><td style=\"text-align:left\">format</td><td style=\"text-align:left\">格式化时间类型</td><td style=\"text-align:left\">根据DateTimeFormatter对象来转换</td></tr></tbody></table><h6 id=\"特殊方法\"><a href=\"#特殊方法\" class=\"headerlink\" title=\"特殊方法\"></a>特殊方法</h6><ul><li>判断是否是闰年<br>LocalDate#isLeapYear();</li></ul><h4 id=\"实际案例\"><a href=\"#实际案例\" class=\"headerlink\" title=\"实际案例\"></a>实际案例</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.ming;</span><br><span class=\"line\"></span><br><span class=\"line\">import org.junit.Test;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.text.SimpleDateFormat;</span><br><span class=\"line\">import java.time.*;</span><br><span class=\"line\">import java.time.format.DateTimeFormatter;</span><br><span class=\"line\">import java.time.temporal.ChronoUnit;</span><br><span class=\"line\">import java.time.temporal.TemporalAdjusters;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 该包的API提供了大量相关的方法，这些方法一般有一致的方法前缀：</span><br><span class=\"line\"> * &lt;p&gt;</span><br><span class=\"line\"> * of：静态工厂方法。</span><br><span class=\"line\"> * &lt;p&gt;</span><br><span class=\"line\"> * parse：静态工厂方法，关注于解析。</span><br><span class=\"line\"> * &lt;p&gt;</span><br><span class=\"line\"> * get：获取某些东西的值。</span><br><span class=\"line\"> * &lt;p&gt;</span><br><span class=\"line\"> * is：检查某些东西的是否是true。</span><br><span class=\"line\"> * &lt;p&gt;</span><br><span class=\"line\"> * with：不可变的setter等价物。</span><br><span class=\"line\"> * &lt;p&gt;</span><br><span class=\"line\"> * plus：加一些量到某个对象。</span><br><span class=\"line\"> * &lt;p&gt;</span><br><span class=\"line\"> * minus：从某个对象减去一些量。</span><br><span class=\"line\"> * &lt;p&gt;</span><br><span class=\"line\"> * to：转换到另一个类型。</span><br><span class=\"line\"> * &lt;p&gt;</span><br><span class=\"line\"> * at：把这个对象与另一个对象组合起来，例如： date.atTime(time)。</span><br><span class=\"line\"> * &lt;p&gt;</span><br><span class=\"line\"> * format：按照合适的格式 格式化成相应的格式的字符串</span><br><span class=\"line\"> * &lt;p&gt;</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @author ming</span><br><span class=\"line\"> * @date 2018-06-30 15:33:10</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class TestTime &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 获取当前时间</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @author ming</span><br><span class=\"line\">     * @date 2018-06-30 15:31:33</span><br><span class=\"line\">     */</span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    public void testNewDate() &#123;</span><br><span class=\"line\">        System.out.println(&quot;获取带纳秒的时间:&quot; + Instant.now());</span><br><span class=\"line\">        System.out.println(&quot;获取年月日:&quot; + LocalDate.now());</span><br><span class=\"line\">        System.out.println(&quot;获取时分秒:&quot; + LocalTime.now());</span><br><span class=\"line\">        System.out.println(&quot;获取年月日时分秒:&quot; + LocalDateTime.now());</span><br><span class=\"line\">        System.out.println(&quot;获取时分秒带时区:&quot; + OffsetTime.now());</span><br><span class=\"line\">        System.out.println(&quot;获取年月日时分秒带时区:&quot; + OffsetDateTime.now());</span><br><span class=\"line\">        System.out.println(&quot;获取时分秒带详细时区信息:&quot; + ZonedDateTime.now());</span><br><span class=\"line\">        System.out.println(&quot;获取年:&quot; + Year.now());</span><br><span class=\"line\">        System.out.println(&quot;获取年月:&quot; + YearMonth.now());</span><br><span class=\"line\">        System.out.println(&quot;获取月日:&quot; + MonthDay.now());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 直接根据参数转换成时间类型</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @author ming</span><br><span class=\"line\">     * @date 2018-06-30 15:32:59</span><br><span class=\"line\">     */</span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    public void testOf() &#123;</span><br><span class=\"line\">        System.out.println(&quot;根据秒数获取时间点:&quot; + Instant.ofEpochSecond(1000));</span><br><span class=\"line\">        System.out.println(&quot;根据年月日获取年月日时间对象:&quot; + LocalDate.of(2018, 11, 11));</span><br><span class=\"line\">        System.out.println(&quot;根据时分秒获取时分秒对象:&quot; + LocalTime.of(11, 11, 11));</span><br><span class=\"line\">        System.out.println(&quot;根据年月日时分秒获取年月日时分秒时间对象:&quot; + LocalDateTime.of(2018, 11, 11, 11, 11, 11));</span><br><span class=\"line\">        System.out.println(&quot;根据时分秒获取时分秒带时区对象:&quot; + OffsetTime.of(11, 11, 11, 1, ZoneOffset.UTC));</span><br><span class=\"line\">        System.out.println(&quot;根据年月日时分秒获取年月日时分秒时间带时区对象:&quot; + OffsetDateTime.of(2018, 11, 11, 11, 11, 11, 11, ZoneOffset.UTC));</span><br><span class=\"line\">        System.out.println(&quot;根据年月日时分秒获取年月日时分秒时间带时区对象:&quot; + ZonedDateTime.of(2018, 11, 11, 11, 11, 11, 11, ZoneId.systemDefault()));</span><br><span class=\"line\">        System.out.println(&quot;根据年数转会成年对象:&quot; + Year.of(2018));</span><br><span class=\"line\">        System.out.println(&quot;根据年月数获取年月对象:&quot; + YearMonth.of(2018, 11));</span><br><span class=\"line\">        System.out.println(&quot;根据月日数获取月日对象&quot; + MonthDay.of(11, 11));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 将指定的文本转换成 指定格式的 time对象</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @author ming</span><br><span class=\"line\">     * @date 2018-07-02 14:41:23</span><br><span class=\"line\">     */</span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    public void testParse() &#123;</span><br><span class=\"line\">        System.out.println(LocalDateTime.parse(&quot;2011-12-03T10:15:30&quot;, DateTimeFormatter.ISO_LOCAL_DATE_TIME));</span><br><span class=\"line\">        //.....略  跟 of差不多 主要是解析字符串成时间相关对象</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 根据时间对象获取 属性</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @author ming</span><br><span class=\"line\">     * @date 2018-07-05 16:49:34</span><br><span class=\"line\">     */</span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    public void testGet() &#123;</span><br><span class=\"line\">        System.out.println(&quot;获取当前时间点的时间戳(s)&quot; + Instant.now().getEpochSecond());</span><br><span class=\"line\">        System.out.println(LocalDateTime.now().getDayOfWeek());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 判断某些属性  例如判断时间前后</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @author ming</span><br><span class=\"line\">     * @date 2018-07-05 16:50:06</span><br><span class=\"line\">     */</span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    public void testIs() &#123;</span><br><span class=\"line\">        System.out.println(Instant.now().isAfter(Instant.now()));</span><br><span class=\"line\">        System.out.println(Instant.now().isBefore(Instant.now()));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 获取一些特殊的时间点</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @author ming</span><br><span class=\"line\">     * @date 2018-07-05 16:51:36</span><br><span class=\"line\">     */</span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    public void testWith() &#123;</span><br><span class=\"line\">        System.out.println(LocalDateTime.now().with(TemporalAdjusters.firstDayOfMonth()));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 时间相加</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @author ming</span><br><span class=\"line\">     * @date 2018-07-05 16:52:49</span><br><span class=\"line\">     */</span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    public void testPlus() &#123;</span><br><span class=\"line\">        System.out.println(Instant.now().plusMillis(999999));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 时间相减</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @author ming</span><br><span class=\"line\">     * @date 2018-07-05 16:52:59</span><br><span class=\"line\">     */</span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    public void testMinus() &#123;</span><br><span class=\"line\">        System.out.println(Instant.now().minusMillis(99999999));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 将时间对象转换成其他的time对象</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @author ming</span><br><span class=\"line\">     * @date 2018-07-05 16:53:16</span><br><span class=\"line\">     */</span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    public void testTo() &#123;</span><br><span class=\"line\">        System.out.println(Instant.now().toEpochMilli());</span><br><span class=\"line\">        System.out.println(LocalDateTime.now().toLocalTime());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 设置时区</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @author ming</span><br><span class=\"line\">     * @date 2018-07-05 16:53:29</span><br><span class=\"line\">     */</span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    public void testAt() &#123;</span><br><span class=\"line\">        System.out.println(Instant.now().atOffset(ZoneOffset.UTC));</span><br><span class=\"line\">        System.out.println(Instant.now().atZone(ZoneId.systemDefault()));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 时间加减</span><br><span class=\"line\">     * ChronoUnit来控制加减的量级</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @author ming</span><br><span class=\"line\">     * @date 2018-07-05 16:58:19</span><br><span class=\"line\">     * @see ChronoUnit#NANOS 纳秒</span><br><span class=\"line\">     * @see ChronoUnit#MICROS 微秒</span><br><span class=\"line\">     * @see ChronoUnit#MILLIS 毫秒</span><br><span class=\"line\">     * @see ChronoUnit#SECONDS 秒</span><br><span class=\"line\">     * @see ChronoUnit#MINUTES 分</span><br><span class=\"line\">     * @see ChronoUnit#HOURS 小时</span><br><span class=\"line\">     * @see ChronoUnit#HALF_DAYS 半天  12小时</span><br><span class=\"line\">     * @see ChronoUnit#DAYS 一天  24小时</span><br><span class=\"line\">     * @see ChronoUnit#WEEKS 一周</span><br><span class=\"line\">     * @see ChronoUnit#MONTHS 一月</span><br><span class=\"line\">     * @see ChronoUnit#YEARS 一年</span><br><span class=\"line\">     * @see ChronoUnit#DECADES 十年</span><br><span class=\"line\">     * @see ChronoUnit#CENTURIES 百年</span><br><span class=\"line\">     * @see ChronoUnit#MILLENNIA 千年</span><br><span class=\"line\">     * @see ChronoUnit#ERAS 十亿年</span><br><span class=\"line\">     * @see ChronoUnit#FOREVER 永远 Long.MAX_VALUE</span><br><span class=\"line\">     */</span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    public void testPlusAndMinus() &#123;</span><br><span class=\"line\">        System.out.println(&quot;加一天&quot; + LocalDateTime.now().plus(1, ChronoUnit.DAYS));</span><br><span class=\"line\">        System.out.println(&quot;减一天&quot; + LocalDateTime.now().minus(1, ChronoUnit.DAYS));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 判断是否是闰年</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @author ming</span><br><span class=\"line\">     * @date 2018-07-05 17:09:34</span><br><span class=\"line\">     */</span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    public void testLeapYear() &#123;</span><br><span class=\"line\">        System.out.println(LocalDateTime.now().toLocalDate().isLeapYear());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 计算两个时间之间的差值</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @author ming</span><br><span class=\"line\">     * @date 2018-07-05 17:12:37</span><br><span class=\"line\">     */</span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    public void testPeriod() &#123;</span><br><span class=\"line\">        LocalDateTime localDateTime = LocalDateTime.of(2018, 1, 11, 11, 11, 11);</span><br><span class=\"line\">        Period period = Period.between(localDateTime.toLocalDate(), LocalDate.now());</span><br><span class=\"line\">        System.out.println(&quot;间隔时间:&quot; + period.getYears() + &quot;年&quot; + period.getMonths() + &quot;个月&quot; + period.getDays() + &quot;天&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 根据formatter枚举格式化时间</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @author ming</span><br><span class=\"line\">     * @date 2018-07-05 17:32:32</span><br><span class=\"line\">     * @see DateTimeFormatter#ofPattern(String) 自定义格式化格式</span><br><span class=\"line\">     * @see DateTimeFormatter#ISO_LOCAL_DATE yyyy-MM-dd</span><br><span class=\"line\">     * @see DateTimeFormatter#ISO_OFFSET_DATE yyyy-MM-dd+offset</span><br><span class=\"line\">     * @see DateTimeFormatter#ISO_DATE &apos;yyyy-MM-dd&apos; or &apos;yyyy-MM-dd+offset&apos;.</span><br><span class=\"line\">     * @see DateTimeFormatter#ISO_LOCAL_TIME HH:mm or HH:mm:ss</span><br><span class=\"line\">     * @see DateTimeFormatter#ISO_OFFSET_TIME HH:mm+offset or HH:mm:ss+offset</span><br><span class=\"line\">     * @see DateTimeFormatter#ISO_TIME HH:mm or HH:mm:ss or HH:mm:ss+offset</span><br><span class=\"line\">     * @see DateTimeFormatter#ISO_LOCAL_DATE_TIME yyyy-MM-ddTHH:mm:ss</span><br><span class=\"line\">     * @see DateTimeFormatter#ISO_OFFSET_DATE_TIME yyyy-MM-ddTHH:mm:ss+offset</span><br><span class=\"line\">     * @see DateTimeFormatter#ISO_ZONED_DATE_TIME yyyy-MM-ddTHH:mm:ss+offset[zone]</span><br><span class=\"line\">     * @see DateTimeFormatter#ISO_ORDINAL_DATE yyyy-days</span><br><span class=\"line\">     * @see DateTimeFormatter#ISO_WEEK_DATE yyyy-week-days</span><br><span class=\"line\">     * @see DateTimeFormatter#ISO_INSTANT yyyy-MM-ddTHH:mm:ssZ</span><br><span class=\"line\">     * @see DateTimeFormatter#BASIC_ISO_DATE yyyyMMdd</span><br><span class=\"line\">     * @see DateTimeFormatter#RFC_1123_DATE_TIME &apos;Tue, 3 Jun 2008 11:05:30 GMT&apos;</span><br><span class=\"line\">     */</span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    public void testFormat() &#123;</span><br><span class=\"line\">        System.out.println(LocalDate.parse(&quot;20181111&quot;, DateTimeFormatter.BASIC_ISO_DATE));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 将时间 按照格式 格式化成string</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @author ming</span><br><span class=\"line\">     * @date 2018-07-05 18:23:40</span><br><span class=\"line\">     */</span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    public void testFormatString() &#123;</span><br><span class=\"line\">        System.out.println(LocalDateTime.now().format(DateTimeFormatter.BASIC_ISO_DATE));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * jdk8的time 和jdk8之前的date相关的类型转换</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @author ming</span><br><span class=\"line\">     * @date 2018-07-05 18:29:21</span><br><span class=\"line\">     */</span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    public void testConverter() &#123;</span><br><span class=\"line\">        //jdk8 time 转换成Date</span><br><span class=\"line\">        java.util.Date juDate = java.util.Date.from(Instant.now());</span><br><span class=\"line\">        System.out.println(juDate);</span><br><span class=\"line\">        java.util.Date juDate1 = java.util.Date.from(LocalDateTime.now().toInstant(ZoneOffset.UTC));</span><br><span class=\"line\">        System.out.println(juDate1);</span><br><span class=\"line\"></span><br><span class=\"line\">        //Date 转换成jdk8 time</span><br><span class=\"line\">        java.util.Date date = new java.util.Date();</span><br><span class=\"line\">        System.out.println(date.toInstant());</span><br><span class=\"line\">        System.out.println(date.toInstant().atZone(ZoneId.systemDefault()).toLocalDate());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><p>时间对象的操作在jdk8之前 其实很操蛋 只能通过使用一些自己封装或者 一些组织封装的dateUtils 来操作 有时候一些特殊的时间处理只能单独写工具了 很麻烦<br>现在jdk8 的time包 直接继承了jodaTime的操作 常用操作变成了 不可变而且线程安全的操作了 并且增强了对时间的 偏移和时区的处理 增加了 很多常规的时间处理方法<br>有点蛋疼的是需要考虑 框架之类的对于time包的兼容  特别是jdbc对于time包的对象的支持程度<br>不过  我可以使用Date转换成time的时间对象 在进行操作 然后再转换回去即可</p>","site":{"data":{}},"excerpt":"","more":"<h4 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h4><p>在jdk8之前 如果要使用date 的类型 就需要把java.util.Date 之类的类组合起来使用<br>特别是在常用的时间加减、获取特定时间、格式化的时候 都必须要java.util.Calendar 、java.util.TimeZone、java.text.SimpleDateFormat这些类进行封装 或者需要引入第三方工具包来简化操作</p><p>在jdk8中 time是以jodaTime这个工具包为模板 加入到jdk中的 对于时间的加减、获取特定时间、格式化、变更时区、获取更加精确的时间等等操作变的更加简单 而且是不可变并且线程安全的方法</p><h4 id=\"核心类和核心方法说明\"><a href=\"#核心类和核心方法说明\" class=\"headerlink\" title=\"核心类和核心方法说明\"></a>核心类和核心方法说明</h4><h5 id=\"核心类\"><a href=\"#核心类\" class=\"headerlink\" title=\"核心类\"></a>核心类</h5><h6 id=\"核心时间对象类\"><a href=\"#核心时间对象类\" class=\"headerlink\" title=\"核心时间对象类\"></a>核心时间对象类</h6><table><thead><tr><th style=\"text-align:left\">名称</th><th style=\"text-align:left\">功能</th><th style=\"text-align:left\">备注</th></tr></thead><tbody><tr><td style=\"text-align:left\">Instant</td><td style=\"text-align:left\">获取从1970年开始的时间点</td><td style=\"text-align:left\">类似之前的java.util.Date、通过这个类可以获取到非常精确的时间</td></tr><tr><td style=\"text-align:left\">LocalDate</td><td style=\"text-align:left\">本地年月日Date对象</td><td style=\"text-align:left\">获取当前年月日信息的对象</td></tr><tr><td style=\"text-align:left\">LocalTime</td><td style=\"text-align:left\">本地时分秒Date对象</td><td style=\"text-align:left\">获取当前时分秒信息的对象</td></tr><tr><td style=\"text-align:left\">LocalDateTime</td><td style=\"text-align:left\">本地年月日时分秒Date对象</td><td style=\"text-align:left\">获取当前年月日时分秒信息的对象</td></tr><tr><td style=\"text-align:left\">OffsetTime</td><td style=\"text-align:left\">获取时分秒Date对象并且带上偏移时间信息</td><td style=\"text-align:left\"></td></tr><tr><td style=\"text-align:left\">OffsetDateTime</td><td style=\"text-align:left\">获取带年月日时分秒的Date对象并且带上偏移时间信息</td><td style=\"text-align:left\"></td></tr><tr><td style=\"text-align:left\">ZonedDateTime</td><td style=\"text-align:left\">获取带时区信息的年月日时分秒对象 并且带上时区信息</td><td style=\"text-align:left\"></td></tr><tr><td style=\"text-align:left\">Year</td><td style=\"text-align:left\">年对象</td><td style=\"text-align:left\"></td></tr><tr><td style=\"text-align:left\">YearMonth</td><td style=\"text-align:left\">年月对象</td><td style=\"text-align:left\"></td></tr><tr><td style=\"text-align:left\">MonthDay</td><td style=\"text-align:left\">月日对象</td><td style=\"text-align:left\"></td></tr><tr><td style=\"text-align:left\">Period</td><td style=\"text-align:left\">时间间隔区间对象</td><td style=\"text-align:left\">表示以年、月、日衡量的时长</td></tr><tr><td style=\"text-align:left\">Duration</td><td style=\"text-align:left\">时间间隔区间对象</td><td style=\"text-align:left\">表示以秒和纳秒为基准的时长</td></tr></tbody></table><h6 id=\"核心枚举类\"><a href=\"#核心枚举类\" class=\"headerlink\" title=\"核心枚举类\"></a>核心枚举类</h6><ul><li>ChronoUnit 时间单位</li></ul><table><thead><tr><th style=\"text-align:left\">名称</th><th style=\"text-align:left\">含义</th><th style=\"text-align:left\">备注</th></tr></thead><tbody><tr><td style=\"text-align:left\">NANOS</td><td style=\"text-align:left\">纳秒</td><td style=\"text-align:left\"></td></tr><tr><td style=\"text-align:left\">MICROS</td><td style=\"text-align:left\">微秒</td><td style=\"text-align:left\"></td></tr><tr><td style=\"text-align:left\">MILLIS</td><td style=\"text-align:left\">毫秒</td><td style=\"text-align:left\"></td></tr><tr><td style=\"text-align:left\">SECONDS</td><td style=\"text-align:left\">秒</td><td style=\"text-align:left\"></td></tr><tr><td style=\"text-align:left\">MINUTES</td><td style=\"text-align:left\">分</td><td style=\"text-align:left\"></td></tr><tr><td style=\"text-align:left\">HOURS</td><td style=\"text-align:left\">小时</td><td style=\"text-align:left\"></td></tr><tr><td style=\"text-align:left\">HALF_DAYS</td><td style=\"text-align:left\">半天</td><td style=\"text-align:left\">12个小时</td></tr><tr><td style=\"text-align:left\">DAYS</td><td style=\"text-align:left\">一天</td><td style=\"text-align:left\">24个小时</td></tr><tr><td style=\"text-align:left\">WEEKS</td><td style=\"text-align:left\">一周</td><td style=\"text-align:left\">7天</td></tr><tr><td style=\"text-align:left\">MONTHS</td><td style=\"text-align:left\">一个月</td><td style=\"text-align:left\"></td></tr><tr><td style=\"text-align:left\">YEARS</td><td style=\"text-align:left\">一年</td><td style=\"text-align:left\"></td></tr><tr><td style=\"text-align:left\">DECADES</td><td style=\"text-align:left\">十年</td><td style=\"text-align:left\"></td></tr><tr><td style=\"text-align:left\">CENTURIES</td><td style=\"text-align:left\">百年</td><td style=\"text-align:left\"></td></tr><tr><td style=\"text-align:left\">MILLENNIA</td><td style=\"text-align:left\">千年</td><td style=\"text-align:left\"></td></tr><tr><td style=\"text-align:left\">ERAS</td><td style=\"text-align:left\">十亿年</td><td style=\"text-align:left\"></td></tr><tr><td style=\"text-align:left\">FOREVER</td><td style=\"text-align:left\">永远</td><td style=\"text-align:left\">Long.MAX_VALUE</td></tr></tbody></table><ul><li>DateTimeFormatter 时间格式化格式</li></ul><table><thead><tr><th style=\"text-align:left\">名称</th><th style=\"text-align:left\">表达式</th><th style=\"text-align:left\">备注</th></tr></thead><tbody><tr><td style=\"text-align:left\">ISO_LOCAL_DATE</td><td style=\"text-align:left\">yyyy-MM-dd</td><td style=\"text-align:left\"></td></tr><tr><td style=\"text-align:left\">ISO_OFFSET_DATE</td><td style=\"text-align:left\">yyyy-MM-dd+offset</td><td style=\"text-align:left\"></td></tr><tr><td style=\"text-align:left\">ISO_DATE</td><td style=\"text-align:left\">‘yyyy-MM-dd’ or ‘yyyy-MM-dd+offset’</td><td style=\"text-align:left\"></td></tr><tr><td style=\"text-align:left\">ISO_LOCAL_TIME</td><td style=\"text-align:left\">HH:mm or HH:mm:ss</td><td style=\"text-align:left\"></td></tr><tr><td style=\"text-align:left\">ISO_OFFSET_TIME</td><td style=\"text-align:left\">HH:mm+offset or HH:mm:ss+offset</td><td style=\"text-align:left\"></td></tr><tr><td style=\"text-align:left\">ISO_TIME</td><td style=\"text-align:left\">HH:mm or HH:mm:ss or HH:mm:ss+offset</td><td style=\"text-align:left\"></td></tr><tr><td style=\"text-align:left\">ISO_LOCAL_DATE_TIME</td><td style=\"text-align:left\">yyyy-MM-ddTHH:mm:ss</td><td style=\"text-align:left\"></td></tr><tr><td style=\"text-align:left\">ISO_OFFSET_DATE_TIME</td><td style=\"text-align:left\">yyyy-MM-ddTHH:mm:ss+offset</td><td style=\"text-align:left\"></td></tr><tr><td style=\"text-align:left\">ISO_ZONED_DATE_TIME</td><td style=\"text-align:left\">yyyy-MM-ddTHH:mm:ss+offset[zone]</td><td style=\"text-align:left\"></td></tr><tr><td style=\"text-align:left\">ISO_ORDINAL_DATE</td><td style=\"text-align:left\">yyyy-days</td><td style=\"text-align:left\"></td></tr><tr><td style=\"text-align:left\">ISO_WEEK_DATE</td><td style=\"text-align:left\">yyyy-week-days</td><td style=\"text-align:left\"></td></tr><tr><td style=\"text-align:left\">ISO_INSTANT</td><td style=\"text-align:left\">yyyy-MM-ddTHH:mm:ssZ</td><td style=\"text-align:left\"></td></tr><tr><td style=\"text-align:left\">BASIC_ISO_DATE</td><td style=\"text-align:left\">yyyyMMdd</td><td style=\"text-align:left\"></td></tr><tr><td style=\"text-align:left\">RFC_1123_DATE_TIME</td><td style=\"text-align:left\">‘Tue, 3 Jun 2008 11:05:30 GMT’</td></tr></tbody></table><h5 id=\"核心方法\"><a href=\"#核心方法\" class=\"headerlink\" title=\"核心方法\"></a>核心方法</h5><h6 id=\"通用核心方法\"><a href=\"#通用核心方法\" class=\"headerlink\" title=\"通用核心方法\"></a>通用核心方法</h6><table><thead><tr><th style=\"text-align:left\">名称</th><th style=\"text-align:left\">功能</th><th style=\"text-align:left\">备注</th></tr></thead><tbody><tr><td style=\"text-align:left\">of</td><td style=\"text-align:left\">根据传入的数值转换成相应的时间对象</td><td style=\"text-align:left\"></td></tr><tr><td style=\"text-align:left\">parse</td><td style=\"text-align:left\">根据传入的字符串格式和DateTimeFormatter枚举转换成相应的时间对象</td><td style=\"text-align:left\"></td></tr><tr><td style=\"text-align:left\">get</td><td style=\"text-align:left\">根据时间对象获取相应的时间属性</td><td style=\"text-align:left\"></td></tr><tr><td style=\"text-align:left\">is</td><td style=\"text-align:left\">判断时间的某些属性是否符合方法的意义</td><td style=\"text-align:left\">使用isBefore或者isAfter来判断时间的前后</td></tr><tr><td style=\"text-align:left\">with</td><td style=\"text-align:left\">获取一些特殊时间对象</td><td style=\"text-align:left\">例如这个月第一天之类的</td></tr><tr><td style=\"text-align:left\">plus</td><td style=\"text-align:left\">时间相加</td><td style=\"text-align:left\">可以根据不同的时间单位进行相加</td></tr><tr><td style=\"text-align:left\">minus</td><td style=\"text-align:left\">时间相减</td><td style=\"text-align:left\">可以根据不同的时间单位进行相减</td></tr><tr><td style=\"text-align:left\">to</td><td style=\"text-align:left\">时间类型转换成其他时间类型</td><td style=\"text-align:left\">例如LocalDateTime to 成 LocalTime</td></tr><tr><td style=\"text-align:left\">at</td><td style=\"text-align:left\">转换成带偏移量、时区之类的时间对象操作</td><td style=\"text-align:left\"></td></tr><tr><td style=\"text-align:left\">format</td><td style=\"text-align:left\">格式化时间类型</td><td style=\"text-align:left\">根据DateTimeFormatter对象来转换</td></tr></tbody></table><h6 id=\"特殊方法\"><a href=\"#特殊方法\" class=\"headerlink\" title=\"特殊方法\"></a>特殊方法</h6><ul><li>判断是否是闰年<br>LocalDate#isLeapYear();</li></ul><h4 id=\"实际案例\"><a href=\"#实际案例\" class=\"headerlink\" title=\"实际案例\"></a>实际案例</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.ming;</span><br><span class=\"line\"></span><br><span class=\"line\">import org.junit.Test;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.text.SimpleDateFormat;</span><br><span class=\"line\">import java.time.*;</span><br><span class=\"line\">import java.time.format.DateTimeFormatter;</span><br><span class=\"line\">import java.time.temporal.ChronoUnit;</span><br><span class=\"line\">import java.time.temporal.TemporalAdjusters;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 该包的API提供了大量相关的方法，这些方法一般有一致的方法前缀：</span><br><span class=\"line\"> * &lt;p&gt;</span><br><span class=\"line\"> * of：静态工厂方法。</span><br><span class=\"line\"> * &lt;p&gt;</span><br><span class=\"line\"> * parse：静态工厂方法，关注于解析。</span><br><span class=\"line\"> * &lt;p&gt;</span><br><span class=\"line\"> * get：获取某些东西的值。</span><br><span class=\"line\"> * &lt;p&gt;</span><br><span class=\"line\"> * is：检查某些东西的是否是true。</span><br><span class=\"line\"> * &lt;p&gt;</span><br><span class=\"line\"> * with：不可变的setter等价物。</span><br><span class=\"line\"> * &lt;p&gt;</span><br><span class=\"line\"> * plus：加一些量到某个对象。</span><br><span class=\"line\"> * &lt;p&gt;</span><br><span class=\"line\"> * minus：从某个对象减去一些量。</span><br><span class=\"line\"> * &lt;p&gt;</span><br><span class=\"line\"> * to：转换到另一个类型。</span><br><span class=\"line\"> * &lt;p&gt;</span><br><span class=\"line\"> * at：把这个对象与另一个对象组合起来，例如： date.atTime(time)。</span><br><span class=\"line\"> * &lt;p&gt;</span><br><span class=\"line\"> * format：按照合适的格式 格式化成相应的格式的字符串</span><br><span class=\"line\"> * &lt;p&gt;</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @author ming</span><br><span class=\"line\"> * @date 2018-06-30 15:33:10</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class TestTime &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 获取当前时间</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @author ming</span><br><span class=\"line\">     * @date 2018-06-30 15:31:33</span><br><span class=\"line\">     */</span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    public void testNewDate() &#123;</span><br><span class=\"line\">        System.out.println(&quot;获取带纳秒的时间:&quot; + Instant.now());</span><br><span class=\"line\">        System.out.println(&quot;获取年月日:&quot; + LocalDate.now());</span><br><span class=\"line\">        System.out.println(&quot;获取时分秒:&quot; + LocalTime.now());</span><br><span class=\"line\">        System.out.println(&quot;获取年月日时分秒:&quot; + LocalDateTime.now());</span><br><span class=\"line\">        System.out.println(&quot;获取时分秒带时区:&quot; + OffsetTime.now());</span><br><span class=\"line\">        System.out.println(&quot;获取年月日时分秒带时区:&quot; + OffsetDateTime.now());</span><br><span class=\"line\">        System.out.println(&quot;获取时分秒带详细时区信息:&quot; + ZonedDateTime.now());</span><br><span class=\"line\">        System.out.println(&quot;获取年:&quot; + Year.now());</span><br><span class=\"line\">        System.out.println(&quot;获取年月:&quot; + YearMonth.now());</span><br><span class=\"line\">        System.out.println(&quot;获取月日:&quot; + MonthDay.now());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 直接根据参数转换成时间类型</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @author ming</span><br><span class=\"line\">     * @date 2018-06-30 15:32:59</span><br><span class=\"line\">     */</span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    public void testOf() &#123;</span><br><span class=\"line\">        System.out.println(&quot;根据秒数获取时间点:&quot; + Instant.ofEpochSecond(1000));</span><br><span class=\"line\">        System.out.println(&quot;根据年月日获取年月日时间对象:&quot; + LocalDate.of(2018, 11, 11));</span><br><span class=\"line\">        System.out.println(&quot;根据时分秒获取时分秒对象:&quot; + LocalTime.of(11, 11, 11));</span><br><span class=\"line\">        System.out.println(&quot;根据年月日时分秒获取年月日时分秒时间对象:&quot; + LocalDateTime.of(2018, 11, 11, 11, 11, 11));</span><br><span class=\"line\">        System.out.println(&quot;根据时分秒获取时分秒带时区对象:&quot; + OffsetTime.of(11, 11, 11, 1, ZoneOffset.UTC));</span><br><span class=\"line\">        System.out.println(&quot;根据年月日时分秒获取年月日时分秒时间带时区对象:&quot; + OffsetDateTime.of(2018, 11, 11, 11, 11, 11, 11, ZoneOffset.UTC));</span><br><span class=\"line\">        System.out.println(&quot;根据年月日时分秒获取年月日时分秒时间带时区对象:&quot; + ZonedDateTime.of(2018, 11, 11, 11, 11, 11, 11, ZoneId.systemDefault()));</span><br><span class=\"line\">        System.out.println(&quot;根据年数转会成年对象:&quot; + Year.of(2018));</span><br><span class=\"line\">        System.out.println(&quot;根据年月数获取年月对象:&quot; + YearMonth.of(2018, 11));</span><br><span class=\"line\">        System.out.println(&quot;根据月日数获取月日对象&quot; + MonthDay.of(11, 11));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 将指定的文本转换成 指定格式的 time对象</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @author ming</span><br><span class=\"line\">     * @date 2018-07-02 14:41:23</span><br><span class=\"line\">     */</span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    public void testParse() &#123;</span><br><span class=\"line\">        System.out.println(LocalDateTime.parse(&quot;2011-12-03T10:15:30&quot;, DateTimeFormatter.ISO_LOCAL_DATE_TIME));</span><br><span class=\"line\">        //.....略  跟 of差不多 主要是解析字符串成时间相关对象</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 根据时间对象获取 属性</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @author ming</span><br><span class=\"line\">     * @date 2018-07-05 16:49:34</span><br><span class=\"line\">     */</span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    public void testGet() &#123;</span><br><span class=\"line\">        System.out.println(&quot;获取当前时间点的时间戳(s)&quot; + Instant.now().getEpochSecond());</span><br><span class=\"line\">        System.out.println(LocalDateTime.now().getDayOfWeek());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 判断某些属性  例如判断时间前后</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @author ming</span><br><span class=\"line\">     * @date 2018-07-05 16:50:06</span><br><span class=\"line\">     */</span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    public void testIs() &#123;</span><br><span class=\"line\">        System.out.println(Instant.now().isAfter(Instant.now()));</span><br><span class=\"line\">        System.out.println(Instant.now().isBefore(Instant.now()));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 获取一些特殊的时间点</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @author ming</span><br><span class=\"line\">     * @date 2018-07-05 16:51:36</span><br><span class=\"line\">     */</span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    public void testWith() &#123;</span><br><span class=\"line\">        System.out.println(LocalDateTime.now().with(TemporalAdjusters.firstDayOfMonth()));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 时间相加</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @author ming</span><br><span class=\"line\">     * @date 2018-07-05 16:52:49</span><br><span class=\"line\">     */</span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    public void testPlus() &#123;</span><br><span class=\"line\">        System.out.println(Instant.now().plusMillis(999999));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 时间相减</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @author ming</span><br><span class=\"line\">     * @date 2018-07-05 16:52:59</span><br><span class=\"line\">     */</span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    public void testMinus() &#123;</span><br><span class=\"line\">        System.out.println(Instant.now().minusMillis(99999999));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 将时间对象转换成其他的time对象</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @author ming</span><br><span class=\"line\">     * @date 2018-07-05 16:53:16</span><br><span class=\"line\">     */</span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    public void testTo() &#123;</span><br><span class=\"line\">        System.out.println(Instant.now().toEpochMilli());</span><br><span class=\"line\">        System.out.println(LocalDateTime.now().toLocalTime());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 设置时区</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @author ming</span><br><span class=\"line\">     * @date 2018-07-05 16:53:29</span><br><span class=\"line\">     */</span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    public void testAt() &#123;</span><br><span class=\"line\">        System.out.println(Instant.now().atOffset(ZoneOffset.UTC));</span><br><span class=\"line\">        System.out.println(Instant.now().atZone(ZoneId.systemDefault()));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 时间加减</span><br><span class=\"line\">     * ChronoUnit来控制加减的量级</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @author ming</span><br><span class=\"line\">     * @date 2018-07-05 16:58:19</span><br><span class=\"line\">     * @see ChronoUnit#NANOS 纳秒</span><br><span class=\"line\">     * @see ChronoUnit#MICROS 微秒</span><br><span class=\"line\">     * @see ChronoUnit#MILLIS 毫秒</span><br><span class=\"line\">     * @see ChronoUnit#SECONDS 秒</span><br><span class=\"line\">     * @see ChronoUnit#MINUTES 分</span><br><span class=\"line\">     * @see ChronoUnit#HOURS 小时</span><br><span class=\"line\">     * @see ChronoUnit#HALF_DAYS 半天  12小时</span><br><span class=\"line\">     * @see ChronoUnit#DAYS 一天  24小时</span><br><span class=\"line\">     * @see ChronoUnit#WEEKS 一周</span><br><span class=\"line\">     * @see ChronoUnit#MONTHS 一月</span><br><span class=\"line\">     * @see ChronoUnit#YEARS 一年</span><br><span class=\"line\">     * @see ChronoUnit#DECADES 十年</span><br><span class=\"line\">     * @see ChronoUnit#CENTURIES 百年</span><br><span class=\"line\">     * @see ChronoUnit#MILLENNIA 千年</span><br><span class=\"line\">     * @see ChronoUnit#ERAS 十亿年</span><br><span class=\"line\">     * @see ChronoUnit#FOREVER 永远 Long.MAX_VALUE</span><br><span class=\"line\">     */</span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    public void testPlusAndMinus() &#123;</span><br><span class=\"line\">        System.out.println(&quot;加一天&quot; + LocalDateTime.now().plus(1, ChronoUnit.DAYS));</span><br><span class=\"line\">        System.out.println(&quot;减一天&quot; + LocalDateTime.now().minus(1, ChronoUnit.DAYS));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 判断是否是闰年</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @author ming</span><br><span class=\"line\">     * @date 2018-07-05 17:09:34</span><br><span class=\"line\">     */</span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    public void testLeapYear() &#123;</span><br><span class=\"line\">        System.out.println(LocalDateTime.now().toLocalDate().isLeapYear());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 计算两个时间之间的差值</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @author ming</span><br><span class=\"line\">     * @date 2018-07-05 17:12:37</span><br><span class=\"line\">     */</span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    public void testPeriod() &#123;</span><br><span class=\"line\">        LocalDateTime localDateTime = LocalDateTime.of(2018, 1, 11, 11, 11, 11);</span><br><span class=\"line\">        Period period = Period.between(localDateTime.toLocalDate(), LocalDate.now());</span><br><span class=\"line\">        System.out.println(&quot;间隔时间:&quot; + period.getYears() + &quot;年&quot; + period.getMonths() + &quot;个月&quot; + period.getDays() + &quot;天&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 根据formatter枚举格式化时间</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @author ming</span><br><span class=\"line\">     * @date 2018-07-05 17:32:32</span><br><span class=\"line\">     * @see DateTimeFormatter#ofPattern(String) 自定义格式化格式</span><br><span class=\"line\">     * @see DateTimeFormatter#ISO_LOCAL_DATE yyyy-MM-dd</span><br><span class=\"line\">     * @see DateTimeFormatter#ISO_OFFSET_DATE yyyy-MM-dd+offset</span><br><span class=\"line\">     * @see DateTimeFormatter#ISO_DATE &apos;yyyy-MM-dd&apos; or &apos;yyyy-MM-dd+offset&apos;.</span><br><span class=\"line\">     * @see DateTimeFormatter#ISO_LOCAL_TIME HH:mm or HH:mm:ss</span><br><span class=\"line\">     * @see DateTimeFormatter#ISO_OFFSET_TIME HH:mm+offset or HH:mm:ss+offset</span><br><span class=\"line\">     * @see DateTimeFormatter#ISO_TIME HH:mm or HH:mm:ss or HH:mm:ss+offset</span><br><span class=\"line\">     * @see DateTimeFormatter#ISO_LOCAL_DATE_TIME yyyy-MM-ddTHH:mm:ss</span><br><span class=\"line\">     * @see DateTimeFormatter#ISO_OFFSET_DATE_TIME yyyy-MM-ddTHH:mm:ss+offset</span><br><span class=\"line\">     * @see DateTimeFormatter#ISO_ZONED_DATE_TIME yyyy-MM-ddTHH:mm:ss+offset[zone]</span><br><span class=\"line\">     * @see DateTimeFormatter#ISO_ORDINAL_DATE yyyy-days</span><br><span class=\"line\">     * @see DateTimeFormatter#ISO_WEEK_DATE yyyy-week-days</span><br><span class=\"line\">     * @see DateTimeFormatter#ISO_INSTANT yyyy-MM-ddTHH:mm:ssZ</span><br><span class=\"line\">     * @see DateTimeFormatter#BASIC_ISO_DATE yyyyMMdd</span><br><span class=\"line\">     * @see DateTimeFormatter#RFC_1123_DATE_TIME &apos;Tue, 3 Jun 2008 11:05:30 GMT&apos;</span><br><span class=\"line\">     */</span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    public void testFormat() &#123;</span><br><span class=\"line\">        System.out.println(LocalDate.parse(&quot;20181111&quot;, DateTimeFormatter.BASIC_ISO_DATE));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 将时间 按照格式 格式化成string</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @author ming</span><br><span class=\"line\">     * @date 2018-07-05 18:23:40</span><br><span class=\"line\">     */</span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    public void testFormatString() &#123;</span><br><span class=\"line\">        System.out.println(LocalDateTime.now().format(DateTimeFormatter.BASIC_ISO_DATE));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * jdk8的time 和jdk8之前的date相关的类型转换</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @author ming</span><br><span class=\"line\">     * @date 2018-07-05 18:29:21</span><br><span class=\"line\">     */</span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    public void testConverter() &#123;</span><br><span class=\"line\">        //jdk8 time 转换成Date</span><br><span class=\"line\">        java.util.Date juDate = java.util.Date.from(Instant.now());</span><br><span class=\"line\">        System.out.println(juDate);</span><br><span class=\"line\">        java.util.Date juDate1 = java.util.Date.from(LocalDateTime.now().toInstant(ZoneOffset.UTC));</span><br><span class=\"line\">        System.out.println(juDate1);</span><br><span class=\"line\"></span><br><span class=\"line\">        //Date 转换成jdk8 time</span><br><span class=\"line\">        java.util.Date date = new java.util.Date();</span><br><span class=\"line\">        System.out.println(date.toInstant());</span><br><span class=\"line\">        System.out.println(date.toInstant().atZone(ZoneId.systemDefault()).toLocalDate());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><p>时间对象的操作在jdk8之前 其实很操蛋 只能通过使用一些自己封装或者 一些组织封装的dateUtils 来操作 有时候一些特殊的时间处理只能单独写工具了 很麻烦<br>现在jdk8 的time包 直接继承了jodaTime的操作 常用操作变成了 不可变而且线程安全的操作了 并且增强了对时间的 偏移和时区的处理 增加了 很多常规的时间处理方法<br>有点蛋疼的是需要考虑 框架之类的对于time包的兼容  特别是jdbc对于time包的对象的支持程度<br>不过  我可以使用Date转换成time的时间对象 在进行操作 然后再转换回去即可</p>"},{"title":"stream集合操作符笔记","comments":1,"abbrlink":"8486f105","date":"2018-06-26T05:03:34.000Z","_content":"#### 前言\n用了这么久的jdk8 的stream集合 \n感觉还是很吊的 特别是作统计计算、集合转化之类的操作 \n\n虽然有parallelStream 来进行并行计算 但是 不推荐这么去使用 原因如下\n虽然有并行 但是 parallelStream 的并行数量是按照jvm的核心数量去启动的  这个时候就有点蛋疼了 如果真的需要并行 还是建议使用 threadPool去执行 而不是简单的使用 parallelStream\nparallelStream 只是把任务并行了 但是该有的竞争状态 还是有 就是说和你使用线程池是差不多的也是要考虑竞争状态的问题\n\n#### 常用操作符列表\n\n|名称|表达式|作用|备注|  \n|:---|:---|:--|:---|\n|filter|t->boolean|过滤数  据||\n|map|t->r|处理数据|为每一个数据作map中的操作|\n|flatMap|t->r.stream()|处理数据并且扁平化|为每个数据进行处理 并且会返回一个Stream 处理List<List>> 这种数据的时候可以通过此操作扁平化内部的那个list|\n|distinct|-|去重并且返回一个新的stream|进行数据去重的时候使用 必须是有限的stream|\n|sorted|-|排序并且返回一个新的stream|进行stream排序使用 但是这个必须要是有限的stream|\n|peek|t->void|预览、执行某个不返回的操作  每次返回新的stream 避免消耗stream|做一些void的操作使用|\n|limit|-|截断数据 |截断前x个数据 返回新的stream|\n|skip|-|跳过数据|跳过前x个数据 返回新的stream|\n|forEach|t->void|迭代数据|内部迭代 每啥好说的|\n|reduce|(identity,(x,y)->result)、((x,y)->result)|计数器|做一些复杂的综合统计适合|\n|collect|(void->t,r->void,r->void)、(collector)|收集结果|将结果收集返回给其他对象|\n|min|(o1,o2)->o1 or o2|获取最小的元素|必须是有限的元素|\n|max|(o1,o2)->o1 or o2|获取最大的元素|必须是有限的元素|\n|count|-|统计数量|统计数量|  \n|anyMatch|t->boolean|匹配|只要有一个匹配就返回true|  \n|allMatch|t->boolean|匹配|必须所有元素匹配才返回true|  \n|noneMatch|t->boolean|匹配|必须所有元素不匹配返回true|  \n|findFirst|-|获取第一个元素|获取到第一个元素马上返回|  \n|findAny|-|获取返回的元素||  \n\n#### 案例\n```\npackage com.ming;\n\nimport org.junit.Test;\n\nimport java.math.BigDecimal;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.stream.Collectors;\n\n/**\n * 测试 stream 用法\n *\n * @author ming\n * @date 2018-06-26 15:45:08\n */\npublic class TestStream {\n\n\n    /**\n     * 将List<T1>  转换成 Map<id,T1>\n     *\n     * @author ming\n     * @date 2018-06-26 15:54:54\n     */\n    @Test\n    public void listToMap() {\n        List<T1> list = new ArrayList<>();\n        for (int i = 0; i < 3; i++) {\n            list.add(new T1(\"id\" + i, \"name\" + i));\n        }\n        //转换成 id 为key  T1为value的map\n        Map<String, T1> map = list.stream().collect(Collectors.toMap(T1::getId, t -> t));\n        System.out.println(map);\n        //当出现重复值 按照 (oV, nV) -> nV 来选择新的value\n        Map<String, T1> map1 = list.stream().collect(Collectors.toMap(T1::getId, t -> t, (oV, nV) -> nV));\n        System.out.println(map1);\n    }\n\n\n    /**\n     * 获取List<T2> 中的t1的list的合集\n     *\n     * @author ming\n     * @date 2018-06-26 16:02:35\n     */\n    @Test\n    public void ListToFlatList() {\n        List<T2> list = new ArrayList<>();\n        for (int i = 0; i < 3; i++) {\n            List<T1> t1List = new ArrayList<>();\n            for (int j = 0; j < 3; j++) {\n                t1List.add(new T1(\"id\" + i, \"name\" + i));\n            }\n            list.add(new T2(\"id\" + i, \"name\" + i, t1List));\n        }\n        List<T1> resultList = list.stream().flatMap(f -> f.getT1List().stream()).collect(Collectors.toList());\n        System.out.println(resultList);\n    }\n\n    /**\n     * 将 List<T3>中的num进行累加计数\n     *\n     * @author ming\n     * @date 2018-06-26 16:06:24\n     */\n    @Test\n    public void numReduce() {\n        List<T3> list = new ArrayList<>();\n        for (int i = 0; i < 3; i++) {\n            list.add(new T3(\"id\" + i, i));\n        }\n        Integer countNum = list.stream().map(T3::getNum).reduce(0, (sum, item) -> sum + item);\n        System.out.println(countNum);\n        Integer countNum1 = list.stream().map(T3::getNum).reduce(0, Integer::sum);\n        System.out.println(countNum1);\n    }\n\n\n    /**\n     * 将List<T4>按照id 分组并且 累加price\n     * 分两种方案\n     * 一是先分组 然后map->reduce\n     * 二直接分组 进行reduce 取巧进行对象的累加\n     *\n     * @author ming\n     * @date 2018-07-05 09:58:01\n     */\n    @Test\n    public void testGroupByAndReduce() {\n        List<T4> list = new ArrayList<>();\n        list.add(new T4(1, BigDecimal.valueOf(1)));\n        list.add(new T4(1, BigDecimal.valueOf(10)));\n        list.add(new T4(2, BigDecimal.valueOf(1)));\n        list.add(new T4(2, BigDecimal.valueOf(10)));\n/*\n\n        //方案一 先分组 然后迭代处理\n        Map<Integer, BigDecimal> result = new HashMap<>();\n        list.stream().collect(Collectors.groupingBy(T4::getId, Collectors.toSet()))\n                .forEach((k, v) -> {\n                    result.put(k, v.stream().map(T4::getPrice).reduce(BigDecimal.ZERO, BigDecimal::add));\n                });\n        System.out.println(result);\n*/\n\n/*\n\n        //方案二 使用取巧的方案 进行对象累加  这样 分组id不变 而且内部的属性也可以按照自己的定义去计算\n        Map<Integer, T4> result = list.stream()\n                .collect(Collectors.groupingBy(T4::getId\n                        , Collectors.reducing(new T4(1, BigDecimal.ZERO), (o, item) -> new T4(o.getId(), o.getPrice().add(item.getPrice())))));\n        System.out.println(result);\n*/\n    }\n\n}\n\nclass T1 {\n    private String id;\n    private String name;\n\n\n    public T1() {\n    }\n\n    public T1(String id, String name) {\n        this.id = id;\n        this.name = name;\n    }\n\n    public String getId() {\n        return id;\n    }\n\n    public void setId(String id) {\n        this.id = id;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n}\n\nclass T2 {\n    private String id;\n    private String name;\n    private List<T1> t1List;\n\n    public T2() {\n    }\n\n    public T2(String id, String name, List<T1> t1List) {\n        this.id = id;\n        this.name = name;\n        this.t1List = t1List;\n    }\n\n    public String getId() {\n        return id;\n    }\n\n    public void setId(String id) {\n        this.id = id;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public List<T1> getT1List() {\n        return t1List;\n    }\n\n    public void setT1List(List<T1> t1List) {\n        this.t1List = t1List;\n    }\n}\n\nclass T3 {\n    private String id;\n    private Integer num;\n\n\n    public T3() {\n    }\n\n    public T3(String id, Integer num) {\n        this.id = id;\n        this.num = num;\n    }\n\n    public String getId() {\n        return id;\n    }\n\n    public void setId(String id) {\n        this.id = id;\n    }\n\n    public Integer getNum() {\n        return num;\n    }\n\n    public void setNum(Integer num) {\n        this.num = num;\n    }\n}\n\n\nclass T4 {\n    private Integer id;\n    private BigDecimal price;\n\n    public T4() {\n    }\n\n    public T4(Integer id, BigDecimal price) {\n        this.id = id;\n        this.price = price;\n    }\n\n    public Integer getId() {\n        return id;\n    }\n\n    public void setId(Integer id) {\n        this.id = id;\n    }\n\n    public BigDecimal getPrice() {\n        return price;\n    }\n\n    public void setPrice(BigDecimal price) {\n        this.price = price;\n    }\n\n    @Override\n    public String toString() {\n        return \"T4{\" +\n                \"id=\" + id +\n                \", price=\" + price +\n                '}';\n    }\n}\n```\n#### 总结\njdk8 出了很多实用的功能 这个stream只是其中之一  算是常用的 在大多数 集合转换、数据计算类型的操作中 用stream 操作会节省很多代码 而且看起来容易理解 并且性能还稍高一点\n\n\n\n\n\n","source":"_posts/java/stream集合操作符笔记.md","raw":"---\ntitle: stream集合操作符笔记\ncomments: true\ncategories: 笔记\ntags:\n  - java\n  - stream计算\nabbrlink: 8486f105\ndate: 2018-06-26 13:03:34\n---\n#### 前言\n用了这么久的jdk8 的stream集合 \n感觉还是很吊的 特别是作统计计算、集合转化之类的操作 \n\n虽然有parallelStream 来进行并行计算 但是 不推荐这么去使用 原因如下\n虽然有并行 但是 parallelStream 的并行数量是按照jvm的核心数量去启动的  这个时候就有点蛋疼了 如果真的需要并行 还是建议使用 threadPool去执行 而不是简单的使用 parallelStream\nparallelStream 只是把任务并行了 但是该有的竞争状态 还是有 就是说和你使用线程池是差不多的也是要考虑竞争状态的问题\n\n#### 常用操作符列表\n\n|名称|表达式|作用|备注|  \n|:---|:---|:--|:---|\n|filter|t->boolean|过滤数  据||\n|map|t->r|处理数据|为每一个数据作map中的操作|\n|flatMap|t->r.stream()|处理数据并且扁平化|为每个数据进行处理 并且会返回一个Stream 处理List<List>> 这种数据的时候可以通过此操作扁平化内部的那个list|\n|distinct|-|去重并且返回一个新的stream|进行数据去重的时候使用 必须是有限的stream|\n|sorted|-|排序并且返回一个新的stream|进行stream排序使用 但是这个必须要是有限的stream|\n|peek|t->void|预览、执行某个不返回的操作  每次返回新的stream 避免消耗stream|做一些void的操作使用|\n|limit|-|截断数据 |截断前x个数据 返回新的stream|\n|skip|-|跳过数据|跳过前x个数据 返回新的stream|\n|forEach|t->void|迭代数据|内部迭代 每啥好说的|\n|reduce|(identity,(x,y)->result)、((x,y)->result)|计数器|做一些复杂的综合统计适合|\n|collect|(void->t,r->void,r->void)、(collector)|收集结果|将结果收集返回给其他对象|\n|min|(o1,o2)->o1 or o2|获取最小的元素|必须是有限的元素|\n|max|(o1,o2)->o1 or o2|获取最大的元素|必须是有限的元素|\n|count|-|统计数量|统计数量|  \n|anyMatch|t->boolean|匹配|只要有一个匹配就返回true|  \n|allMatch|t->boolean|匹配|必须所有元素匹配才返回true|  \n|noneMatch|t->boolean|匹配|必须所有元素不匹配返回true|  \n|findFirst|-|获取第一个元素|获取到第一个元素马上返回|  \n|findAny|-|获取返回的元素||  \n\n#### 案例\n```\npackage com.ming;\n\nimport org.junit.Test;\n\nimport java.math.BigDecimal;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.stream.Collectors;\n\n/**\n * 测试 stream 用法\n *\n * @author ming\n * @date 2018-06-26 15:45:08\n */\npublic class TestStream {\n\n\n    /**\n     * 将List<T1>  转换成 Map<id,T1>\n     *\n     * @author ming\n     * @date 2018-06-26 15:54:54\n     */\n    @Test\n    public void listToMap() {\n        List<T1> list = new ArrayList<>();\n        for (int i = 0; i < 3; i++) {\n            list.add(new T1(\"id\" + i, \"name\" + i));\n        }\n        //转换成 id 为key  T1为value的map\n        Map<String, T1> map = list.stream().collect(Collectors.toMap(T1::getId, t -> t));\n        System.out.println(map);\n        //当出现重复值 按照 (oV, nV) -> nV 来选择新的value\n        Map<String, T1> map1 = list.stream().collect(Collectors.toMap(T1::getId, t -> t, (oV, nV) -> nV));\n        System.out.println(map1);\n    }\n\n\n    /**\n     * 获取List<T2> 中的t1的list的合集\n     *\n     * @author ming\n     * @date 2018-06-26 16:02:35\n     */\n    @Test\n    public void ListToFlatList() {\n        List<T2> list = new ArrayList<>();\n        for (int i = 0; i < 3; i++) {\n            List<T1> t1List = new ArrayList<>();\n            for (int j = 0; j < 3; j++) {\n                t1List.add(new T1(\"id\" + i, \"name\" + i));\n            }\n            list.add(new T2(\"id\" + i, \"name\" + i, t1List));\n        }\n        List<T1> resultList = list.stream().flatMap(f -> f.getT1List().stream()).collect(Collectors.toList());\n        System.out.println(resultList);\n    }\n\n    /**\n     * 将 List<T3>中的num进行累加计数\n     *\n     * @author ming\n     * @date 2018-06-26 16:06:24\n     */\n    @Test\n    public void numReduce() {\n        List<T3> list = new ArrayList<>();\n        for (int i = 0; i < 3; i++) {\n            list.add(new T3(\"id\" + i, i));\n        }\n        Integer countNum = list.stream().map(T3::getNum).reduce(0, (sum, item) -> sum + item);\n        System.out.println(countNum);\n        Integer countNum1 = list.stream().map(T3::getNum).reduce(0, Integer::sum);\n        System.out.println(countNum1);\n    }\n\n\n    /**\n     * 将List<T4>按照id 分组并且 累加price\n     * 分两种方案\n     * 一是先分组 然后map->reduce\n     * 二直接分组 进行reduce 取巧进行对象的累加\n     *\n     * @author ming\n     * @date 2018-07-05 09:58:01\n     */\n    @Test\n    public void testGroupByAndReduce() {\n        List<T4> list = new ArrayList<>();\n        list.add(new T4(1, BigDecimal.valueOf(1)));\n        list.add(new T4(1, BigDecimal.valueOf(10)));\n        list.add(new T4(2, BigDecimal.valueOf(1)));\n        list.add(new T4(2, BigDecimal.valueOf(10)));\n/*\n\n        //方案一 先分组 然后迭代处理\n        Map<Integer, BigDecimal> result = new HashMap<>();\n        list.stream().collect(Collectors.groupingBy(T4::getId, Collectors.toSet()))\n                .forEach((k, v) -> {\n                    result.put(k, v.stream().map(T4::getPrice).reduce(BigDecimal.ZERO, BigDecimal::add));\n                });\n        System.out.println(result);\n*/\n\n/*\n\n        //方案二 使用取巧的方案 进行对象累加  这样 分组id不变 而且内部的属性也可以按照自己的定义去计算\n        Map<Integer, T4> result = list.stream()\n                .collect(Collectors.groupingBy(T4::getId\n                        , Collectors.reducing(new T4(1, BigDecimal.ZERO), (o, item) -> new T4(o.getId(), o.getPrice().add(item.getPrice())))));\n        System.out.println(result);\n*/\n    }\n\n}\n\nclass T1 {\n    private String id;\n    private String name;\n\n\n    public T1() {\n    }\n\n    public T1(String id, String name) {\n        this.id = id;\n        this.name = name;\n    }\n\n    public String getId() {\n        return id;\n    }\n\n    public void setId(String id) {\n        this.id = id;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n}\n\nclass T2 {\n    private String id;\n    private String name;\n    private List<T1> t1List;\n\n    public T2() {\n    }\n\n    public T2(String id, String name, List<T1> t1List) {\n        this.id = id;\n        this.name = name;\n        this.t1List = t1List;\n    }\n\n    public String getId() {\n        return id;\n    }\n\n    public void setId(String id) {\n        this.id = id;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public List<T1> getT1List() {\n        return t1List;\n    }\n\n    public void setT1List(List<T1> t1List) {\n        this.t1List = t1List;\n    }\n}\n\nclass T3 {\n    private String id;\n    private Integer num;\n\n\n    public T3() {\n    }\n\n    public T3(String id, Integer num) {\n        this.id = id;\n        this.num = num;\n    }\n\n    public String getId() {\n        return id;\n    }\n\n    public void setId(String id) {\n        this.id = id;\n    }\n\n    public Integer getNum() {\n        return num;\n    }\n\n    public void setNum(Integer num) {\n        this.num = num;\n    }\n}\n\n\nclass T4 {\n    private Integer id;\n    private BigDecimal price;\n\n    public T4() {\n    }\n\n    public T4(Integer id, BigDecimal price) {\n        this.id = id;\n        this.price = price;\n    }\n\n    public Integer getId() {\n        return id;\n    }\n\n    public void setId(Integer id) {\n        this.id = id;\n    }\n\n    public BigDecimal getPrice() {\n        return price;\n    }\n\n    public void setPrice(BigDecimal price) {\n        this.price = price;\n    }\n\n    @Override\n    public String toString() {\n        return \"T4{\" +\n                \"id=\" + id +\n                \", price=\" + price +\n                '}';\n    }\n}\n```\n#### 总结\njdk8 出了很多实用的功能 这个stream只是其中之一  算是常用的 在大多数 集合转换、数据计算类型的操作中 用stream 操作会节省很多代码 而且看起来容易理解 并且性能还稍高一点\n\n\n\n\n\n","slug":"java/stream集合操作符笔记","published":1,"updated":"2018-08-17T08:10:03.923Z","layout":"post","photos":[],"link":"","_id":"cjo9uau2w00bhmwcz5rlhsaax","content":"<h4 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h4><p>用了这么久的jdk8 的stream集合<br>感觉还是很吊的 特别是作统计计算、集合转化之类的操作</p><p>虽然有parallelStream 来进行并行计算 但是 不推荐这么去使用 原因如下<br>虽然有并行 但是 parallelStream 的并行数量是按照jvm的核心数量去启动的 这个时候就有点蛋疼了 如果真的需要并行 还是建议使用 threadPool去执行 而不是简单的使用 parallelStream<br>parallelStream 只是把任务并行了 但是该有的竞争状态 还是有 就是说和你使用线程池是差不多的也是要考虑竞争状态的问题</p><h4 id=\"常用操作符列表\"><a href=\"#常用操作符列表\" class=\"headerlink\" title=\"常用操作符列表\"></a>常用操作符列表</h4><table><thead><tr><th style=\"text-align:left\">名称</th><th style=\"text-align:left\">表达式</th><th style=\"text-align:left\">作用</th><th style=\"text-align:left\">备注</th></tr></thead><tbody><tr><td style=\"text-align:left\">filter</td><td style=\"text-align:left\">t-&gt;boolean</td><td style=\"text-align:left\">过滤数 据</td><td style=\"text-align:left\"></td></tr><tr><td style=\"text-align:left\">map</td><td style=\"text-align:left\">t-&gt;r</td><td style=\"text-align:left\">处理数据</td><td style=\"text-align:left\">为每一个数据作map中的操作</td></tr><tr><td style=\"text-align:left\">flatMap</td><td style=\"text-align:left\">t-&gt;r.stream()</td><td style=\"text-align:left\">处理数据并且扁平化</td><td style=\"text-align:left\">为每个数据进行处理 并且会返回一个Stream 处理List<list>&gt; 这种数据的时候可以通过此操作扁平化内部的那个list</list></td></tr><tr><td style=\"text-align:left\">distinct</td><td style=\"text-align:left\">-</td><td style=\"text-align:left\">去重并且返回一个新的stream</td><td style=\"text-align:left\">进行数据去重的时候使用 必须是有限的stream</td></tr><tr><td style=\"text-align:left\">sorted</td><td style=\"text-align:left\">-</td><td style=\"text-align:left\">排序并且返回一个新的stream</td><td style=\"text-align:left\">进行stream排序使用 但是这个必须要是有限的stream</td></tr><tr><td style=\"text-align:left\">peek</td><td style=\"text-align:left\">t-&gt;void</td><td style=\"text-align:left\">预览、执行某个不返回的操作 每次返回新的stream 避免消耗stream</td><td style=\"text-align:left\">做一些void的操作使用</td></tr><tr><td style=\"text-align:left\">limit</td><td style=\"text-align:left\">-</td><td style=\"text-align:left\">截断数据</td><td style=\"text-align:left\">截断前x个数据 返回新的stream</td></tr><tr><td style=\"text-align:left\">skip</td><td style=\"text-align:left\">-</td><td style=\"text-align:left\">跳过数据</td><td style=\"text-align:left\">跳过前x个数据 返回新的stream</td></tr><tr><td style=\"text-align:left\">forEach</td><td style=\"text-align:left\">t-&gt;void</td><td style=\"text-align:left\">迭代数据</td><td style=\"text-align:left\">内部迭代 每啥好说的</td></tr><tr><td style=\"text-align:left\">reduce</td><td style=\"text-align:left\">(identity,(x,y)-&gt;result)、((x,y)-&gt;result)</td><td style=\"text-align:left\">计数器</td><td style=\"text-align:left\">做一些复杂的综合统计适合</td></tr><tr><td style=\"text-align:left\">collect</td><td style=\"text-align:left\">(void-&gt;t,r-&gt;void,r-&gt;void)、(collector)</td><td style=\"text-align:left\">收集结果</td><td style=\"text-align:left\">将结果收集返回给其他对象</td></tr><tr><td style=\"text-align:left\">min</td><td style=\"text-align:left\">(o1,o2)-&gt;o1 or o2</td><td style=\"text-align:left\">获取最小的元素</td><td style=\"text-align:left\">必须是有限的元素</td></tr><tr><td style=\"text-align:left\">max</td><td style=\"text-align:left\">(o1,o2)-&gt;o1 or o2</td><td style=\"text-align:left\">获取最大的元素</td><td style=\"text-align:left\">必须是有限的元素</td></tr><tr><td style=\"text-align:left\">count</td><td style=\"text-align:left\">-</td><td style=\"text-align:left\">统计数量</td><td style=\"text-align:left\">统计数量</td></tr><tr><td style=\"text-align:left\">anyMatch</td><td style=\"text-align:left\">t-&gt;boolean</td><td style=\"text-align:left\">匹配</td><td style=\"text-align:left\">只要有一个匹配就返回true</td></tr><tr><td style=\"text-align:left\">allMatch</td><td style=\"text-align:left\">t-&gt;boolean</td><td style=\"text-align:left\">匹配</td><td style=\"text-align:left\">必须所有元素匹配才返回true</td></tr><tr><td style=\"text-align:left\">noneMatch</td><td style=\"text-align:left\">t-&gt;boolean</td><td style=\"text-align:left\">匹配</td><td style=\"text-align:left\">必须所有元素不匹配返回true</td></tr><tr><td style=\"text-align:left\">findFirst</td><td style=\"text-align:left\">-</td><td style=\"text-align:left\">获取第一个元素</td><td style=\"text-align:left\">获取到第一个元素马上返回</td></tr><tr><td style=\"text-align:left\">findAny</td><td style=\"text-align:left\">-</td><td style=\"text-align:left\">获取返回的元素</td></tr></tbody></table><h4 id=\"案例\"><a href=\"#案例\" class=\"headerlink\" title=\"案例\"></a>案例</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.ming;</span><br><span class=\"line\"></span><br><span class=\"line\">import org.junit.Test;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.math.BigDecimal;</span><br><span class=\"line\">import java.util.ArrayList;</span><br><span class=\"line\">import java.util.List;</span><br><span class=\"line\">import java.util.Map;</span><br><span class=\"line\">import java.util.stream.Collectors;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 测试 stream 用法</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @author ming</span><br><span class=\"line\"> * @date 2018-06-26 15:45:08</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class TestStream &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 将List&lt;T1&gt;  转换成 Map&lt;id,T1&gt;</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @author ming</span><br><span class=\"line\">     * @date 2018-06-26 15:54:54</span><br><span class=\"line\">     */</span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    public void listToMap() &#123;</span><br><span class=\"line\">        List&lt;T1&gt; list = new ArrayList&lt;&gt;();</span><br><span class=\"line\">        for (int i = 0; i &lt; 3; i++) &#123;</span><br><span class=\"line\">            list.add(new T1(&quot;id&quot; + i, &quot;name&quot; + i));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        //转换成 id 为key  T1为value的map</span><br><span class=\"line\">        Map&lt;String, T1&gt; map = list.stream().collect(Collectors.toMap(T1::getId, t -&gt; t));</span><br><span class=\"line\">        System.out.println(map);</span><br><span class=\"line\">        //当出现重复值 按照 (oV, nV) -&gt; nV 来选择新的value</span><br><span class=\"line\">        Map&lt;String, T1&gt; map1 = list.stream().collect(Collectors.toMap(T1::getId, t -&gt; t, (oV, nV) -&gt; nV));</span><br><span class=\"line\">        System.out.println(map1);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 获取List&lt;T2&gt; 中的t1的list的合集</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @author ming</span><br><span class=\"line\">     * @date 2018-06-26 16:02:35</span><br><span class=\"line\">     */</span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    public void ListToFlatList() &#123;</span><br><span class=\"line\">        List&lt;T2&gt; list = new ArrayList&lt;&gt;();</span><br><span class=\"line\">        for (int i = 0; i &lt; 3; i++) &#123;</span><br><span class=\"line\">            List&lt;T1&gt; t1List = new ArrayList&lt;&gt;();</span><br><span class=\"line\">            for (int j = 0; j &lt; 3; j++) &#123;</span><br><span class=\"line\">                t1List.add(new T1(&quot;id&quot; + i, &quot;name&quot; + i));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            list.add(new T2(&quot;id&quot; + i, &quot;name&quot; + i, t1List));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        List&lt;T1&gt; resultList = list.stream().flatMap(f -&gt; f.getT1List().stream()).collect(Collectors.toList());</span><br><span class=\"line\">        System.out.println(resultList);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 将 List&lt;T3&gt;中的num进行累加计数</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @author ming</span><br><span class=\"line\">     * @date 2018-06-26 16:06:24</span><br><span class=\"line\">     */</span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    public void numReduce() &#123;</span><br><span class=\"line\">        List&lt;T3&gt; list = new ArrayList&lt;&gt;();</span><br><span class=\"line\">        for (int i = 0; i &lt; 3; i++) &#123;</span><br><span class=\"line\">            list.add(new T3(&quot;id&quot; + i, i));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Integer countNum = list.stream().map(T3::getNum).reduce(0, (sum, item) -&gt; sum + item);</span><br><span class=\"line\">        System.out.println(countNum);</span><br><span class=\"line\">        Integer countNum1 = list.stream().map(T3::getNum).reduce(0, Integer::sum);</span><br><span class=\"line\">        System.out.println(countNum1);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 将List&lt;T4&gt;按照id 分组并且 累加price</span><br><span class=\"line\">     * 分两种方案</span><br><span class=\"line\">     * 一是先分组 然后map-&gt;reduce</span><br><span class=\"line\">     * 二直接分组 进行reduce 取巧进行对象的累加</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @author ming</span><br><span class=\"line\">     * @date 2018-07-05 09:58:01</span><br><span class=\"line\">     */</span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    public void testGroupByAndReduce() &#123;</span><br><span class=\"line\">        List&lt;T4&gt; list = new ArrayList&lt;&gt;();</span><br><span class=\"line\">        list.add(new T4(1, BigDecimal.valueOf(1)));</span><br><span class=\"line\">        list.add(new T4(1, BigDecimal.valueOf(10)));</span><br><span class=\"line\">        list.add(new T4(2, BigDecimal.valueOf(1)));</span><br><span class=\"line\">        list.add(new T4(2, BigDecimal.valueOf(10)));</span><br><span class=\"line\">/*</span><br><span class=\"line\"></span><br><span class=\"line\">        //方案一 先分组 然后迭代处理</span><br><span class=\"line\">        Map&lt;Integer, BigDecimal&gt; result = new HashMap&lt;&gt;();</span><br><span class=\"line\">        list.stream().collect(Collectors.groupingBy(T4::getId, Collectors.toSet()))</span><br><span class=\"line\">                .forEach((k, v) -&gt; &#123;</span><br><span class=\"line\">                    result.put(k, v.stream().map(T4::getPrice).reduce(BigDecimal.ZERO, BigDecimal::add));</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">        System.out.println(result);</span><br><span class=\"line\">*/</span><br><span class=\"line\"></span><br><span class=\"line\">/*</span><br><span class=\"line\"></span><br><span class=\"line\">        //方案二 使用取巧的方案 进行对象累加  这样 分组id不变 而且内部的属性也可以按照自己的定义去计算</span><br><span class=\"line\">        Map&lt;Integer, T4&gt; result = list.stream()</span><br><span class=\"line\">                .collect(Collectors.groupingBy(T4::getId</span><br><span class=\"line\">                        , Collectors.reducing(new T4(1, BigDecimal.ZERO), (o, item) -&gt; new T4(o.getId(), o.getPrice().add(item.getPrice())))));</span><br><span class=\"line\">        System.out.println(result);</span><br><span class=\"line\">*/</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class T1 &#123;</span><br><span class=\"line\">    private String id;</span><br><span class=\"line\">    private String name;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    public T1() &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public T1(String id, String name) &#123;</span><br><span class=\"line\">        this.id = id;</span><br><span class=\"line\">        this.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public String getId() &#123;</span><br><span class=\"line\">        return id;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void setId(String id) &#123;</span><br><span class=\"line\">        this.id = id;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public String getName() &#123;</span><br><span class=\"line\">        return name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void setName(String name) &#123;</span><br><span class=\"line\">        this.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class T2 &#123;</span><br><span class=\"line\">    private String id;</span><br><span class=\"line\">    private String name;</span><br><span class=\"line\">    private List&lt;T1&gt; t1List;</span><br><span class=\"line\"></span><br><span class=\"line\">    public T2() &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public T2(String id, String name, List&lt;T1&gt; t1List) &#123;</span><br><span class=\"line\">        this.id = id;</span><br><span class=\"line\">        this.name = name;</span><br><span class=\"line\">        this.t1List = t1List;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public String getId() &#123;</span><br><span class=\"line\">        return id;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void setId(String id) &#123;</span><br><span class=\"line\">        this.id = id;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public String getName() &#123;</span><br><span class=\"line\">        return name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void setName(String name) &#123;</span><br><span class=\"line\">        this.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public List&lt;T1&gt; getT1List() &#123;</span><br><span class=\"line\">        return t1List;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void setT1List(List&lt;T1&gt; t1List) &#123;</span><br><span class=\"line\">        this.t1List = t1List;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class T3 &#123;</span><br><span class=\"line\">    private String id;</span><br><span class=\"line\">    private Integer num;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    public T3() &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public T3(String id, Integer num) &#123;</span><br><span class=\"line\">        this.id = id;</span><br><span class=\"line\">        this.num = num;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public String getId() &#123;</span><br><span class=\"line\">        return id;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void setId(String id) &#123;</span><br><span class=\"line\">        this.id = id;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public Integer getNum() &#123;</span><br><span class=\"line\">        return num;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void setNum(Integer num) &#123;</span><br><span class=\"line\">        this.num = num;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">class T4 &#123;</span><br><span class=\"line\">    private Integer id;</span><br><span class=\"line\">    private BigDecimal price;</span><br><span class=\"line\"></span><br><span class=\"line\">    public T4() &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public T4(Integer id, BigDecimal price) &#123;</span><br><span class=\"line\">        this.id = id;</span><br><span class=\"line\">        this.price = price;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public Integer getId() &#123;</span><br><span class=\"line\">        return id;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void setId(Integer id) &#123;</span><br><span class=\"line\">        this.id = id;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public BigDecimal getPrice() &#123;</span><br><span class=\"line\">        return price;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void setPrice(BigDecimal price) &#123;</span><br><span class=\"line\">        this.price = price;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public String toString() &#123;</span><br><span class=\"line\">        return &quot;T4&#123;&quot; +</span><br><span class=\"line\">                &quot;id=&quot; + id +</span><br><span class=\"line\">                &quot;, price=&quot; + price +</span><br><span class=\"line\">                &apos;&#125;&apos;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><p>jdk8 出了很多实用的功能 这个stream只是其中之一  算是常用的 在大多数 集合转换、数据计算类型的操作中 用stream 操作会节省很多代码 而且看起来容易理解 并且性能还稍高一点</p>","site":{"data":{}},"excerpt":"","more":"<h4 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h4><p>用了这么久的jdk8 的stream集合<br>感觉还是很吊的 特别是作统计计算、集合转化之类的操作</p><p>虽然有parallelStream 来进行并行计算 但是 不推荐这么去使用 原因如下<br>虽然有并行 但是 parallelStream 的并行数量是按照jvm的核心数量去启动的 这个时候就有点蛋疼了 如果真的需要并行 还是建议使用 threadPool去执行 而不是简单的使用 parallelStream<br>parallelStream 只是把任务并行了 但是该有的竞争状态 还是有 就是说和你使用线程池是差不多的也是要考虑竞争状态的问题</p><h4 id=\"常用操作符列表\"><a href=\"#常用操作符列表\" class=\"headerlink\" title=\"常用操作符列表\"></a>常用操作符列表</h4><table><thead><tr><th style=\"text-align:left\">名称</th><th style=\"text-align:left\">表达式</th><th style=\"text-align:left\">作用</th><th style=\"text-align:left\">备注</th></tr></thead><tbody><tr><td style=\"text-align:left\">filter</td><td style=\"text-align:left\">t-&gt;boolean</td><td style=\"text-align:left\">过滤数 据</td><td style=\"text-align:left\"></td></tr><tr><td style=\"text-align:left\">map</td><td style=\"text-align:left\">t-&gt;r</td><td style=\"text-align:left\">处理数据</td><td style=\"text-align:left\">为每一个数据作map中的操作</td></tr><tr><td style=\"text-align:left\">flatMap</td><td style=\"text-align:left\">t-&gt;r.stream()</td><td style=\"text-align:left\">处理数据并且扁平化</td><td style=\"text-align:left\">为每个数据进行处理 并且会返回一个Stream 处理List<list>&gt; 这种数据的时候可以通过此操作扁平化内部的那个list</list></td></tr><tr><td style=\"text-align:left\">distinct</td><td style=\"text-align:left\">-</td><td style=\"text-align:left\">去重并且返回一个新的stream</td><td style=\"text-align:left\">进行数据去重的时候使用 必须是有限的stream</td></tr><tr><td style=\"text-align:left\">sorted</td><td style=\"text-align:left\">-</td><td style=\"text-align:left\">排序并且返回一个新的stream</td><td style=\"text-align:left\">进行stream排序使用 但是这个必须要是有限的stream</td></tr><tr><td style=\"text-align:left\">peek</td><td style=\"text-align:left\">t-&gt;void</td><td style=\"text-align:left\">预览、执行某个不返回的操作 每次返回新的stream 避免消耗stream</td><td style=\"text-align:left\">做一些void的操作使用</td></tr><tr><td style=\"text-align:left\">limit</td><td style=\"text-align:left\">-</td><td style=\"text-align:left\">截断数据</td><td style=\"text-align:left\">截断前x个数据 返回新的stream</td></tr><tr><td style=\"text-align:left\">skip</td><td style=\"text-align:left\">-</td><td style=\"text-align:left\">跳过数据</td><td style=\"text-align:left\">跳过前x个数据 返回新的stream</td></tr><tr><td style=\"text-align:left\">forEach</td><td style=\"text-align:left\">t-&gt;void</td><td style=\"text-align:left\">迭代数据</td><td style=\"text-align:left\">内部迭代 每啥好说的</td></tr><tr><td style=\"text-align:left\">reduce</td><td style=\"text-align:left\">(identity,(x,y)-&gt;result)、((x,y)-&gt;result)</td><td style=\"text-align:left\">计数器</td><td style=\"text-align:left\">做一些复杂的综合统计适合</td></tr><tr><td style=\"text-align:left\">collect</td><td style=\"text-align:left\">(void-&gt;t,r-&gt;void,r-&gt;void)、(collector)</td><td style=\"text-align:left\">收集结果</td><td style=\"text-align:left\">将结果收集返回给其他对象</td></tr><tr><td style=\"text-align:left\">min</td><td style=\"text-align:left\">(o1,o2)-&gt;o1 or o2</td><td style=\"text-align:left\">获取最小的元素</td><td style=\"text-align:left\">必须是有限的元素</td></tr><tr><td style=\"text-align:left\">max</td><td style=\"text-align:left\">(o1,o2)-&gt;o1 or o2</td><td style=\"text-align:left\">获取最大的元素</td><td style=\"text-align:left\">必须是有限的元素</td></tr><tr><td style=\"text-align:left\">count</td><td style=\"text-align:left\">-</td><td style=\"text-align:left\">统计数量</td><td style=\"text-align:left\">统计数量</td></tr><tr><td style=\"text-align:left\">anyMatch</td><td style=\"text-align:left\">t-&gt;boolean</td><td style=\"text-align:left\">匹配</td><td style=\"text-align:left\">只要有一个匹配就返回true</td></tr><tr><td style=\"text-align:left\">allMatch</td><td style=\"text-align:left\">t-&gt;boolean</td><td style=\"text-align:left\">匹配</td><td style=\"text-align:left\">必须所有元素匹配才返回true</td></tr><tr><td style=\"text-align:left\">noneMatch</td><td style=\"text-align:left\">t-&gt;boolean</td><td style=\"text-align:left\">匹配</td><td style=\"text-align:left\">必须所有元素不匹配返回true</td></tr><tr><td style=\"text-align:left\">findFirst</td><td style=\"text-align:left\">-</td><td style=\"text-align:left\">获取第一个元素</td><td style=\"text-align:left\">获取到第一个元素马上返回</td></tr><tr><td style=\"text-align:left\">findAny</td><td style=\"text-align:left\">-</td><td style=\"text-align:left\">获取返回的元素</td></tr></tbody></table><h4 id=\"案例\"><a href=\"#案例\" class=\"headerlink\" title=\"案例\"></a>案例</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.ming;</span><br><span class=\"line\"></span><br><span class=\"line\">import org.junit.Test;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.math.BigDecimal;</span><br><span class=\"line\">import java.util.ArrayList;</span><br><span class=\"line\">import java.util.List;</span><br><span class=\"line\">import java.util.Map;</span><br><span class=\"line\">import java.util.stream.Collectors;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 测试 stream 用法</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @author ming</span><br><span class=\"line\"> * @date 2018-06-26 15:45:08</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class TestStream &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 将List&lt;T1&gt;  转换成 Map&lt;id,T1&gt;</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @author ming</span><br><span class=\"line\">     * @date 2018-06-26 15:54:54</span><br><span class=\"line\">     */</span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    public void listToMap() &#123;</span><br><span class=\"line\">        List&lt;T1&gt; list = new ArrayList&lt;&gt;();</span><br><span class=\"line\">        for (int i = 0; i &lt; 3; i++) &#123;</span><br><span class=\"line\">            list.add(new T1(&quot;id&quot; + i, &quot;name&quot; + i));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        //转换成 id 为key  T1为value的map</span><br><span class=\"line\">        Map&lt;String, T1&gt; map = list.stream().collect(Collectors.toMap(T1::getId, t -&gt; t));</span><br><span class=\"line\">        System.out.println(map);</span><br><span class=\"line\">        //当出现重复值 按照 (oV, nV) -&gt; nV 来选择新的value</span><br><span class=\"line\">        Map&lt;String, T1&gt; map1 = list.stream().collect(Collectors.toMap(T1::getId, t -&gt; t, (oV, nV) -&gt; nV));</span><br><span class=\"line\">        System.out.println(map1);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 获取List&lt;T2&gt; 中的t1的list的合集</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @author ming</span><br><span class=\"line\">     * @date 2018-06-26 16:02:35</span><br><span class=\"line\">     */</span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    public void ListToFlatList() &#123;</span><br><span class=\"line\">        List&lt;T2&gt; list = new ArrayList&lt;&gt;();</span><br><span class=\"line\">        for (int i = 0; i &lt; 3; i++) &#123;</span><br><span class=\"line\">            List&lt;T1&gt; t1List = new ArrayList&lt;&gt;();</span><br><span class=\"line\">            for (int j = 0; j &lt; 3; j++) &#123;</span><br><span class=\"line\">                t1List.add(new T1(&quot;id&quot; + i, &quot;name&quot; + i));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            list.add(new T2(&quot;id&quot; + i, &quot;name&quot; + i, t1List));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        List&lt;T1&gt; resultList = list.stream().flatMap(f -&gt; f.getT1List().stream()).collect(Collectors.toList());</span><br><span class=\"line\">        System.out.println(resultList);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 将 List&lt;T3&gt;中的num进行累加计数</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @author ming</span><br><span class=\"line\">     * @date 2018-06-26 16:06:24</span><br><span class=\"line\">     */</span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    public void numReduce() &#123;</span><br><span class=\"line\">        List&lt;T3&gt; list = new ArrayList&lt;&gt;();</span><br><span class=\"line\">        for (int i = 0; i &lt; 3; i++) &#123;</span><br><span class=\"line\">            list.add(new T3(&quot;id&quot; + i, i));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Integer countNum = list.stream().map(T3::getNum).reduce(0, (sum, item) -&gt; sum + item);</span><br><span class=\"line\">        System.out.println(countNum);</span><br><span class=\"line\">        Integer countNum1 = list.stream().map(T3::getNum).reduce(0, Integer::sum);</span><br><span class=\"line\">        System.out.println(countNum1);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 将List&lt;T4&gt;按照id 分组并且 累加price</span><br><span class=\"line\">     * 分两种方案</span><br><span class=\"line\">     * 一是先分组 然后map-&gt;reduce</span><br><span class=\"line\">     * 二直接分组 进行reduce 取巧进行对象的累加</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @author ming</span><br><span class=\"line\">     * @date 2018-07-05 09:58:01</span><br><span class=\"line\">     */</span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    public void testGroupByAndReduce() &#123;</span><br><span class=\"line\">        List&lt;T4&gt; list = new ArrayList&lt;&gt;();</span><br><span class=\"line\">        list.add(new T4(1, BigDecimal.valueOf(1)));</span><br><span class=\"line\">        list.add(new T4(1, BigDecimal.valueOf(10)));</span><br><span class=\"line\">        list.add(new T4(2, BigDecimal.valueOf(1)));</span><br><span class=\"line\">        list.add(new T4(2, BigDecimal.valueOf(10)));</span><br><span class=\"line\">/*</span><br><span class=\"line\"></span><br><span class=\"line\">        //方案一 先分组 然后迭代处理</span><br><span class=\"line\">        Map&lt;Integer, BigDecimal&gt; result = new HashMap&lt;&gt;();</span><br><span class=\"line\">        list.stream().collect(Collectors.groupingBy(T4::getId, Collectors.toSet()))</span><br><span class=\"line\">                .forEach((k, v) -&gt; &#123;</span><br><span class=\"line\">                    result.put(k, v.stream().map(T4::getPrice).reduce(BigDecimal.ZERO, BigDecimal::add));</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">        System.out.println(result);</span><br><span class=\"line\">*/</span><br><span class=\"line\"></span><br><span class=\"line\">/*</span><br><span class=\"line\"></span><br><span class=\"line\">        //方案二 使用取巧的方案 进行对象累加  这样 分组id不变 而且内部的属性也可以按照自己的定义去计算</span><br><span class=\"line\">        Map&lt;Integer, T4&gt; result = list.stream()</span><br><span class=\"line\">                .collect(Collectors.groupingBy(T4::getId</span><br><span class=\"line\">                        , Collectors.reducing(new T4(1, BigDecimal.ZERO), (o, item) -&gt; new T4(o.getId(), o.getPrice().add(item.getPrice())))));</span><br><span class=\"line\">        System.out.println(result);</span><br><span class=\"line\">*/</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class T1 &#123;</span><br><span class=\"line\">    private String id;</span><br><span class=\"line\">    private String name;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    public T1() &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public T1(String id, String name) &#123;</span><br><span class=\"line\">        this.id = id;</span><br><span class=\"line\">        this.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public String getId() &#123;</span><br><span class=\"line\">        return id;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void setId(String id) &#123;</span><br><span class=\"line\">        this.id = id;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public String getName() &#123;</span><br><span class=\"line\">        return name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void setName(String name) &#123;</span><br><span class=\"line\">        this.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class T2 &#123;</span><br><span class=\"line\">    private String id;</span><br><span class=\"line\">    private String name;</span><br><span class=\"line\">    private List&lt;T1&gt; t1List;</span><br><span class=\"line\"></span><br><span class=\"line\">    public T2() &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public T2(String id, String name, List&lt;T1&gt; t1List) &#123;</span><br><span class=\"line\">        this.id = id;</span><br><span class=\"line\">        this.name = name;</span><br><span class=\"line\">        this.t1List = t1List;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public String getId() &#123;</span><br><span class=\"line\">        return id;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void setId(String id) &#123;</span><br><span class=\"line\">        this.id = id;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public String getName() &#123;</span><br><span class=\"line\">        return name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void setName(String name) &#123;</span><br><span class=\"line\">        this.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public List&lt;T1&gt; getT1List() &#123;</span><br><span class=\"line\">        return t1List;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void setT1List(List&lt;T1&gt; t1List) &#123;</span><br><span class=\"line\">        this.t1List = t1List;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class T3 &#123;</span><br><span class=\"line\">    private String id;</span><br><span class=\"line\">    private Integer num;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    public T3() &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public T3(String id, Integer num) &#123;</span><br><span class=\"line\">        this.id = id;</span><br><span class=\"line\">        this.num = num;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public String getId() &#123;</span><br><span class=\"line\">        return id;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void setId(String id) &#123;</span><br><span class=\"line\">        this.id = id;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public Integer getNum() &#123;</span><br><span class=\"line\">        return num;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void setNum(Integer num) &#123;</span><br><span class=\"line\">        this.num = num;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">class T4 &#123;</span><br><span class=\"line\">    private Integer id;</span><br><span class=\"line\">    private BigDecimal price;</span><br><span class=\"line\"></span><br><span class=\"line\">    public T4() &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public T4(Integer id, BigDecimal price) &#123;</span><br><span class=\"line\">        this.id = id;</span><br><span class=\"line\">        this.price = price;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public Integer getId() &#123;</span><br><span class=\"line\">        return id;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void setId(Integer id) &#123;</span><br><span class=\"line\">        this.id = id;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public BigDecimal getPrice() &#123;</span><br><span class=\"line\">        return price;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void setPrice(BigDecimal price) &#123;</span><br><span class=\"line\">        this.price = price;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public String toString() &#123;</span><br><span class=\"line\">        return &quot;T4&#123;&quot; +</span><br><span class=\"line\">                &quot;id=&quot; + id +</span><br><span class=\"line\">                &quot;, price=&quot; + price +</span><br><span class=\"line\">                &apos;&#125;&apos;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><p>jdk8 出了很多实用的功能 这个stream只是其中之一  算是常用的 在大多数 集合转换、数据计算类型的操作中 用stream 操作会节省很多代码 而且看起来容易理解 并且性能还稍高一点</p>"},{"title":"深入理解jvm阅读笔记-内存区域划分","comments":1,"abbrlink":"c66acd17","date":"2018-07-10T02:57:42.000Z","_content":"#### 前言\n最近 在学习 jvm相关的知识 \n之前 一直看的一些博客 文章 没有静下心 看看 jvm相关的书籍  \n干脆买了一本 周志明大佬的jvm的书  \n\n#### 内存区域划分 \n![内存区域划分图](http://asset.xujiuming.com/private-asset/jvm_runtime_data_area.png)\n##### 程序计数器\n* 线程独有的信息  \n* 功能   \n用来指示执行的字节码的行号  所以这个必须是线程独有信息不能共享     \n字节码解释器通过改变计数器 来选取下一条的指令 去执行相关操作 如跳转、循环、异常、线程恢复等 \n* 特殊说明  \njvm虚拟机规范没有对这个区域规定内存错误(oom)的情况\n\n\n##### 虚拟机栈 \n* 线程独有信息   \n* 功能  \n线程栈帧 用来存储局部变量、操作数栈、动态链接、方法出口  每个方法调用执行完成 都对应一个栈帧 的入栈和出栈  \n局部变量存储了 基础类型 和引用类型的引用指针或者句柄  和返回数据的地址(returnAddress)\n* 特殊说明\n64位的long和double 占用两个局部变量空间(slot)其余的都是占用一个 \n局部变量需要的内存空间在编译的时期已经完成，当进入一个方法 局部变量的空间大小是确定的 运行期不会改变局部变量的内存大小  \n当线程请求的栈深度大于虚拟机允许的深度抛出 StackOverflowError  \n当虚拟机栈支持动态扩展 当扩展时候无法申请到足够的内存 抛出 OutOfMemoryError异常\n\n##### 本地方法栈 \n* 线程独有信息\n* 功能\n线程栈帧 不过是本地方法的栈帧 而不是虚拟机的栈帧  保存的是本地方法的栈帧信息 \n* 特殊说明\n当线程请求的栈深度大于虚拟机允许的深度抛出 StackOverflowError  \n当虚拟机栈支持动态扩展 当扩展时候无法申请到足够的内存 抛出 OutOfMemoryError异常\n\n##### java 堆 (gc 主要活动区 大致分为新生代、老年代)\n* 所有线程共享区域\n* 功能 \njava 堆内存  java中几乎所有的对象杜存放在堆上 \njava 垃圾收集主要就是收集 堆内存  (gc堆)\n根据现代垃圾收集器对于java堆内存的划分可细分为 新生代、老年代 或者更加细致 Eden、From Survivor、To Survivor 空间等 \n从内存分配角度 线程共享的java堆可能划分出多个线程私有的分配缓存区 、\n* 特殊说明\njava堆可以在物理上不连续的内存空间内 只要逻辑是连续的 可以实现固定的大小也可以可以扩展的形式 通过-Xmx、-Xms控制堆内存的最小最大范围 \n如果堆中没有内存完成是实例的分配并且堆无法再进行扩展 抛出 OutOfMemoryError \n\n\n##### 方法区\n* 所有线程共享区域\n* 功能\n存储虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码 \n别名非堆(Non-Heap) 目的和 java 堆内存区分开   \n* 特殊说明\n在HotSpot虚拟机中  方法区可以称之为永久代  但是在jdk7之后 HotSpot虚拟机也渐渐放弃永久代 改为Native Memory 在1.7中 String已经从常量池移除  \njava虚拟机规范对于方法区限制较为宽松 除了跟java堆一样不需要连续的物理内存和可以选择固定还是可扩展大小 还可以选择不实现垃圾收集   \n当方法区无法满足内存分配的需求的时候 抛出 OutOfMemoryError\n###### 运行期常量池\n* 归属于方法区的一部分 \n* 功能\n在编译期中 生成的各种字面量、符号引用等等 类加载后会直接加载进常量池 \n* 特殊说明\njava虚拟机对class文件每个部分都有严格限制 但是对于常量池没有细节要求  一般只是保存字面量、符号引用还有翻译出来的直接引用   \njava语言要求常量不一定只有编译的时候会产生 例如String.intern() 这种可以在运行期 产生新的常量到常量区  \n由于存在运行期间 增加常量 那么当常量池无法申请到内存抛出 OutOfMemoryError 异常 \n\n\n##### 直接内存\n* 不属于虚拟机运行的数据区 \n* 不是java虚拟机规范定义的内存区域 \n* 功能   \nChannel和Buffer的io方式 可以只用Native函数 直接分配堆外内存 通过存储在java堆中的 DirectByteBuffer 作为这块内存的引用进行操作  避免在java堆和Native堆中来回复制数据 \n* 特殊说明\n直接内存不受java虚拟机限制 当各个区域的内存和大于物理机的内存 那么也会抛出 OutOfMemoryError \n\n\n#### HotSpot对象的创建和内存布局、对象访问定位\n##### 普通的java对象创建\n当执行到new 指令 -> 检测能否在常量池中定位到一个类的符号引用 并且检测这个符合引用代表的类是否被加载、解析、初始化 如果没有先执行类加载 \n->执行完类加载检测 虚拟机为这个新对象分配内存。对象需要的内存大小在类加载后已经确定 为对象分配空间就是把一块确定大小的内存从堆中划分出来\n->将分配到的内存初始化为0 不包括对象头  如果使用的TLAB 这个过程会在TLAB分配时候进行  保证对象的实例字段在java中不赋值即可使用 程序直接访问某些字段的零值 \n->虚拟机堆对象进行必要的设置 如对象是那个类的实例、如何才能找到类的元数据、对象哈希码、对象gc分代年龄等信息 这些信息在对象头中 \n->这个时候虚拟机认为对象已经初始化完毕 java程序认为对象还未创建完毕  继续执行init方法 ->对象初始化完毕\n\n###### 内存划分方法\n* 指针碰撞 \n假设java堆内存绝对规整 所有用过的放在一边 空闲的放在另外一边 中间通过一个指针来作为指示器  那么内存划分只是把指针向空闲空间那边移动出来和对象大小相等的距离 \n\n* 空闲列表 \n虚拟机维护一个列表 记录那些内存可以用 在分配内存的时候 从列表中找出一块足够大的内存给对象 并且更新列表  \n\n根据gc是带有压缩规整功能  来选择 那种内存划分方法 \nSerial ParNew 带有压缩规整的 采用的是指针碰撞 \nCMS 采用空闲列表   \n###### 指针分配内存存在的并发问题\n* 对分配内存空间的动作进行同步处理   \n虚拟机采用cas配上失败重试方式保证更新操作都是原子性的操作  \n* 本地线程分配缓冲 (Thread Local Allocation Buffer) TLAB  \n把内存分配工作按照线程划分到不同的空间中进行 \n每个线程预先在java堆中申请一块内存 那个线程要分配内存就在那个线程的TLAB上分配 只有当TLAB使用完毕分配新的TLAB的时候 才需要同步锁定 \n虚拟机通过-XX:+/-UseTLAB参数设定 \n##### 对象内存布局\nHotSpot虚拟机中 对象在内存中存储的布局分为三块区域 对象头(header)、实例数据(instance data )、对齐填充(padding)\n* 对象头\n对象头分为两部分\n一: 存储对象自身运行时候的数据 \n如hashCode gc分代年龄、锁状态标志、线程持有的锁、偏向线程ID、偏向时间戳等 \n这部分数据在32位和64为虚拟机中分别为32bit 64bit大小 官方称之为 \"Mark Word\"\n二: 类型指针 \n指向类的元数据的指针 虚拟机通过这个指针 确定对象是那个类的实例 \n不是所有的虚拟机实现都必须在对象数据上找到保留的类型指针 \n* 实例数据\n存储对象真正有效的信息 至于存储顺序 受到虚拟机的分配策略参数和字段在java源码中定义的顺序影响 \nHotSpot虚拟机默认分配策略 longs/double、ints、 shorts/chars 、bytes/booleans 、oops\n* 对齐填充\nHotSpot自动内存管理要求对象的起始地址必须是8字节的整数倍 当对象的实例数据部分不是8的整数倍的时候 需要这一部分区补齐占位\n\n##### 对象访问定位\njava通过栈上的reference数据来操作堆上的具体对象 由于reference数据只是规定了一个指向对象的引用 没有定义如何去定位访问对象的具体位置 \n主流的实现方式有两种 \n* 句柄   \n在堆中划分句柄池 reference存储对象的句柄地址 句柄包含对象实例数据和类型数据的各自具体地址信息 \n好处:reference中的数据是稳定的句柄地址  对象被移动只会改变句柄中的信息 不会改变句柄的地址 reference不需要变化   \n坏处:增加了指针定位的开销   \n![java对象访问定位_句柄](http://asset.xujiuming.com/private-asset/java%E5%AF%B9%E8%B1%A1%E8%AE%BF%E9%97%AE%E5%AE%9A%E4%BD%8D_%E5%8F%A5%E6%9F%84.jpg)\n* 直接指针    \n需要java堆对象布局考虑如何放置访问类型数据的相关信息 reference中直接存储堆对象的地址 \n好处:直接访问对象 减少指针定位开销   \n坏处:当对象内存地址发生变化 reference中数据也需要调整  \n![java对象访问定位_指针](http://asset.xujiuming.com/private-asset/java%E5%AF%B9%E8%B1%A1%E8%AE%BF%E9%97%AE%E5%AE%9A%E4%BD%8D_%E7%9B%B4%E6%8E%A5%E6%8C%87%E9%92%88.jpg)\n\nHotSpot采用的是直接指针\n\n\n#### 常见区域内存溢出\n* java堆溢出   \n一直new对象 当超出最大堆限制即溢出  \n具体分析的时候 可以通过内存快照 分析到底是内存直接溢出导致还是因为内存泄漏导致的  \n如果是堆大小限制了 通过-Xmx配置最大值     \n如果是泄漏了 那么就只能找出那里泄漏了 然后修正了    \n* 虚拟机栈和本地方法栈溢出  \n当线程请求的栈深度大于虚拟机允许的最大深度 抛出StackOverflowError     \n当虚拟机扩展的时候无法申请到足够的内存 抛出 OutOfMemoryError  \n设置-Xss配置虚拟机栈和本地方法栈的大小  \n* 方法区和常量池溢出   \n一直新建String 并且使用.intern() 插入到方法区 就会造成 常量区溢出  \n二是 不断新建新的类加载到方法区域也会溢出  \n* 本机内存直接溢出   \nDirectMemory 通过-XX：MaxDirectMemorySize指定 如果不指定 那么默认和java堆一样大小 \n如果dump文件很小 程序中直接或者间接使用nio 那么 可能就是由于本机内存直接溢出  \n\n#### 总结 \njava的jvm规范 定义了 内存中 线程独享信息(本地方法栈、虚拟机栈、程序计数器) 线程共享的信息(方法区、堆)  \njvm中内存划分方式非为 指针碰撞、空间列表     \njvm中对象的寻址有句柄和直接指针的方式      \njvm中堆内存 大致分为 新生代和老年代  \njvm中方法区 又称之为永生区 永久代  新的jvm已经在慢慢作去永生代了 jdk1.7开始    \n\n","source":"_posts/java/深入理解jvm阅读笔记-内存区域划分.md","raw":"---\ntitle: 深入理解jvm阅读笔记-内存区域划分\ncomments: true\ncategories: 笔记\ntags:\n  - java\n  - jvm\nabbrlink: c66acd17\ndate: 2018-07-10 10:57:42\n---\n#### 前言\n最近 在学习 jvm相关的知识 \n之前 一直看的一些博客 文章 没有静下心 看看 jvm相关的书籍  \n干脆买了一本 周志明大佬的jvm的书  \n\n#### 内存区域划分 \n![内存区域划分图](http://asset.xujiuming.com/private-asset/jvm_runtime_data_area.png)\n##### 程序计数器\n* 线程独有的信息  \n* 功能   \n用来指示执行的字节码的行号  所以这个必须是线程独有信息不能共享     \n字节码解释器通过改变计数器 来选取下一条的指令 去执行相关操作 如跳转、循环、异常、线程恢复等 \n* 特殊说明  \njvm虚拟机规范没有对这个区域规定内存错误(oom)的情况\n\n\n##### 虚拟机栈 \n* 线程独有信息   \n* 功能  \n线程栈帧 用来存储局部变量、操作数栈、动态链接、方法出口  每个方法调用执行完成 都对应一个栈帧 的入栈和出栈  \n局部变量存储了 基础类型 和引用类型的引用指针或者句柄  和返回数据的地址(returnAddress)\n* 特殊说明\n64位的long和double 占用两个局部变量空间(slot)其余的都是占用一个 \n局部变量需要的内存空间在编译的时期已经完成，当进入一个方法 局部变量的空间大小是确定的 运行期不会改变局部变量的内存大小  \n当线程请求的栈深度大于虚拟机允许的深度抛出 StackOverflowError  \n当虚拟机栈支持动态扩展 当扩展时候无法申请到足够的内存 抛出 OutOfMemoryError异常\n\n##### 本地方法栈 \n* 线程独有信息\n* 功能\n线程栈帧 不过是本地方法的栈帧 而不是虚拟机的栈帧  保存的是本地方法的栈帧信息 \n* 特殊说明\n当线程请求的栈深度大于虚拟机允许的深度抛出 StackOverflowError  \n当虚拟机栈支持动态扩展 当扩展时候无法申请到足够的内存 抛出 OutOfMemoryError异常\n\n##### java 堆 (gc 主要活动区 大致分为新生代、老年代)\n* 所有线程共享区域\n* 功能 \njava 堆内存  java中几乎所有的对象杜存放在堆上 \njava 垃圾收集主要就是收集 堆内存  (gc堆)\n根据现代垃圾收集器对于java堆内存的划分可细分为 新生代、老年代 或者更加细致 Eden、From Survivor、To Survivor 空间等 \n从内存分配角度 线程共享的java堆可能划分出多个线程私有的分配缓存区 、\n* 特殊说明\njava堆可以在物理上不连续的内存空间内 只要逻辑是连续的 可以实现固定的大小也可以可以扩展的形式 通过-Xmx、-Xms控制堆内存的最小最大范围 \n如果堆中没有内存完成是实例的分配并且堆无法再进行扩展 抛出 OutOfMemoryError \n\n\n##### 方法区\n* 所有线程共享区域\n* 功能\n存储虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码 \n别名非堆(Non-Heap) 目的和 java 堆内存区分开   \n* 特殊说明\n在HotSpot虚拟机中  方法区可以称之为永久代  但是在jdk7之后 HotSpot虚拟机也渐渐放弃永久代 改为Native Memory 在1.7中 String已经从常量池移除  \njava虚拟机规范对于方法区限制较为宽松 除了跟java堆一样不需要连续的物理内存和可以选择固定还是可扩展大小 还可以选择不实现垃圾收集   \n当方法区无法满足内存分配的需求的时候 抛出 OutOfMemoryError\n###### 运行期常量池\n* 归属于方法区的一部分 \n* 功能\n在编译期中 生成的各种字面量、符号引用等等 类加载后会直接加载进常量池 \n* 特殊说明\njava虚拟机对class文件每个部分都有严格限制 但是对于常量池没有细节要求  一般只是保存字面量、符号引用还有翻译出来的直接引用   \njava语言要求常量不一定只有编译的时候会产生 例如String.intern() 这种可以在运行期 产生新的常量到常量区  \n由于存在运行期间 增加常量 那么当常量池无法申请到内存抛出 OutOfMemoryError 异常 \n\n\n##### 直接内存\n* 不属于虚拟机运行的数据区 \n* 不是java虚拟机规范定义的内存区域 \n* 功能   \nChannel和Buffer的io方式 可以只用Native函数 直接分配堆外内存 通过存储在java堆中的 DirectByteBuffer 作为这块内存的引用进行操作  避免在java堆和Native堆中来回复制数据 \n* 特殊说明\n直接内存不受java虚拟机限制 当各个区域的内存和大于物理机的内存 那么也会抛出 OutOfMemoryError \n\n\n#### HotSpot对象的创建和内存布局、对象访问定位\n##### 普通的java对象创建\n当执行到new 指令 -> 检测能否在常量池中定位到一个类的符号引用 并且检测这个符合引用代表的类是否被加载、解析、初始化 如果没有先执行类加载 \n->执行完类加载检测 虚拟机为这个新对象分配内存。对象需要的内存大小在类加载后已经确定 为对象分配空间就是把一块确定大小的内存从堆中划分出来\n->将分配到的内存初始化为0 不包括对象头  如果使用的TLAB 这个过程会在TLAB分配时候进行  保证对象的实例字段在java中不赋值即可使用 程序直接访问某些字段的零值 \n->虚拟机堆对象进行必要的设置 如对象是那个类的实例、如何才能找到类的元数据、对象哈希码、对象gc分代年龄等信息 这些信息在对象头中 \n->这个时候虚拟机认为对象已经初始化完毕 java程序认为对象还未创建完毕  继续执行init方法 ->对象初始化完毕\n\n###### 内存划分方法\n* 指针碰撞 \n假设java堆内存绝对规整 所有用过的放在一边 空闲的放在另外一边 中间通过一个指针来作为指示器  那么内存划分只是把指针向空闲空间那边移动出来和对象大小相等的距离 \n\n* 空闲列表 \n虚拟机维护一个列表 记录那些内存可以用 在分配内存的时候 从列表中找出一块足够大的内存给对象 并且更新列表  \n\n根据gc是带有压缩规整功能  来选择 那种内存划分方法 \nSerial ParNew 带有压缩规整的 采用的是指针碰撞 \nCMS 采用空闲列表   \n###### 指针分配内存存在的并发问题\n* 对分配内存空间的动作进行同步处理   \n虚拟机采用cas配上失败重试方式保证更新操作都是原子性的操作  \n* 本地线程分配缓冲 (Thread Local Allocation Buffer) TLAB  \n把内存分配工作按照线程划分到不同的空间中进行 \n每个线程预先在java堆中申请一块内存 那个线程要分配内存就在那个线程的TLAB上分配 只有当TLAB使用完毕分配新的TLAB的时候 才需要同步锁定 \n虚拟机通过-XX:+/-UseTLAB参数设定 \n##### 对象内存布局\nHotSpot虚拟机中 对象在内存中存储的布局分为三块区域 对象头(header)、实例数据(instance data )、对齐填充(padding)\n* 对象头\n对象头分为两部分\n一: 存储对象自身运行时候的数据 \n如hashCode gc分代年龄、锁状态标志、线程持有的锁、偏向线程ID、偏向时间戳等 \n这部分数据在32位和64为虚拟机中分别为32bit 64bit大小 官方称之为 \"Mark Word\"\n二: 类型指针 \n指向类的元数据的指针 虚拟机通过这个指针 确定对象是那个类的实例 \n不是所有的虚拟机实现都必须在对象数据上找到保留的类型指针 \n* 实例数据\n存储对象真正有效的信息 至于存储顺序 受到虚拟机的分配策略参数和字段在java源码中定义的顺序影响 \nHotSpot虚拟机默认分配策略 longs/double、ints、 shorts/chars 、bytes/booleans 、oops\n* 对齐填充\nHotSpot自动内存管理要求对象的起始地址必须是8字节的整数倍 当对象的实例数据部分不是8的整数倍的时候 需要这一部分区补齐占位\n\n##### 对象访问定位\njava通过栈上的reference数据来操作堆上的具体对象 由于reference数据只是规定了一个指向对象的引用 没有定义如何去定位访问对象的具体位置 \n主流的实现方式有两种 \n* 句柄   \n在堆中划分句柄池 reference存储对象的句柄地址 句柄包含对象实例数据和类型数据的各自具体地址信息 \n好处:reference中的数据是稳定的句柄地址  对象被移动只会改变句柄中的信息 不会改变句柄的地址 reference不需要变化   \n坏处:增加了指针定位的开销   \n![java对象访问定位_句柄](http://asset.xujiuming.com/private-asset/java%E5%AF%B9%E8%B1%A1%E8%AE%BF%E9%97%AE%E5%AE%9A%E4%BD%8D_%E5%8F%A5%E6%9F%84.jpg)\n* 直接指针    \n需要java堆对象布局考虑如何放置访问类型数据的相关信息 reference中直接存储堆对象的地址 \n好处:直接访问对象 减少指针定位开销   \n坏处:当对象内存地址发生变化 reference中数据也需要调整  \n![java对象访问定位_指针](http://asset.xujiuming.com/private-asset/java%E5%AF%B9%E8%B1%A1%E8%AE%BF%E9%97%AE%E5%AE%9A%E4%BD%8D_%E7%9B%B4%E6%8E%A5%E6%8C%87%E9%92%88.jpg)\n\nHotSpot采用的是直接指针\n\n\n#### 常见区域内存溢出\n* java堆溢出   \n一直new对象 当超出最大堆限制即溢出  \n具体分析的时候 可以通过内存快照 分析到底是内存直接溢出导致还是因为内存泄漏导致的  \n如果是堆大小限制了 通过-Xmx配置最大值     \n如果是泄漏了 那么就只能找出那里泄漏了 然后修正了    \n* 虚拟机栈和本地方法栈溢出  \n当线程请求的栈深度大于虚拟机允许的最大深度 抛出StackOverflowError     \n当虚拟机扩展的时候无法申请到足够的内存 抛出 OutOfMemoryError  \n设置-Xss配置虚拟机栈和本地方法栈的大小  \n* 方法区和常量池溢出   \n一直新建String 并且使用.intern() 插入到方法区 就会造成 常量区溢出  \n二是 不断新建新的类加载到方法区域也会溢出  \n* 本机内存直接溢出   \nDirectMemory 通过-XX：MaxDirectMemorySize指定 如果不指定 那么默认和java堆一样大小 \n如果dump文件很小 程序中直接或者间接使用nio 那么 可能就是由于本机内存直接溢出  \n\n#### 总结 \njava的jvm规范 定义了 内存中 线程独享信息(本地方法栈、虚拟机栈、程序计数器) 线程共享的信息(方法区、堆)  \njvm中内存划分方式非为 指针碰撞、空间列表     \njvm中对象的寻址有句柄和直接指针的方式      \njvm中堆内存 大致分为 新生代和老年代  \njvm中方法区 又称之为永生区 永久代  新的jvm已经在慢慢作去永生代了 jdk1.7开始    \n\n","slug":"java/深入理解jvm阅读笔记-内存区域划分","published":1,"updated":"2018-08-17T08:10:03.923Z","layout":"post","photos":[],"link":"","_id":"cjo9uau2x00bkmwczu7623m41","content":"<h4 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h4><p>最近 在学习 jvm相关的知识<br>之前 一直看的一些博客 文章 没有静下心 看看 jvm相关的书籍<br>干脆买了一本 周志明大佬的jvm的书</p><h4 id=\"内存区域划分\"><a href=\"#内存区域划分\" class=\"headerlink\" title=\"内存区域划分\"></a>内存区域划分</h4><p><img src=\"http://asset.xujiuming.com/private-asset/jvm_runtime_data_area.png\" alt=\"内存区域划分图\"></p><h5 id=\"程序计数器\"><a href=\"#程序计数器\" class=\"headerlink\" title=\"程序计数器\"></a>程序计数器</h5><ul><li>线程独有的信息</li><li>功能<br>用来指示执行的字节码的行号 所以这个必须是线程独有信息不能共享<br>字节码解释器通过改变计数器 来选取下一条的指令 去执行相关操作 如跳转、循环、异常、线程恢复等</li><li>特殊说明<br>jvm虚拟机规范没有对这个区域规定内存错误(oom)的情况</li></ul><h5 id=\"虚拟机栈\"><a href=\"#虚拟机栈\" class=\"headerlink\" title=\"虚拟机栈\"></a>虚拟机栈</h5><ul><li>线程独有信息</li><li>功能<br>线程栈帧 用来存储局部变量、操作数栈、动态链接、方法出口 每个方法调用执行完成 都对应一个栈帧 的入栈和出栈<br>局部变量存储了 基础类型 和引用类型的引用指针或者句柄 和返回数据的地址(returnAddress)</li><li>特殊说明<br>64位的long和double 占用两个局部变量空间(slot)其余的都是占用一个<br>局部变量需要的内存空间在编译的时期已经完成，当进入一个方法 局部变量的空间大小是确定的 运行期不会改变局部变量的内存大小<br>当线程请求的栈深度大于虚拟机允许的深度抛出 StackOverflowError<br>当虚拟机栈支持动态扩展 当扩展时候无法申请到足够的内存 抛出 OutOfMemoryError异常</li></ul><h5 id=\"本地方法栈\"><a href=\"#本地方法栈\" class=\"headerlink\" title=\"本地方法栈\"></a>本地方法栈</h5><ul><li>线程独有信息</li><li>功能<br>线程栈帧 不过是本地方法的栈帧 而不是虚拟机的栈帧 保存的是本地方法的栈帧信息</li><li>特殊说明<br>当线程请求的栈深度大于虚拟机允许的深度抛出 StackOverflowError<br>当虚拟机栈支持动态扩展 当扩展时候无法申请到足够的内存 抛出 OutOfMemoryError异常</li></ul><h5 id=\"java-堆-gc-主要活动区-大致分为新生代、老年代\"><a href=\"#java-堆-gc-主要活动区-大致分为新生代、老年代\" class=\"headerlink\" title=\"java 堆 (gc 主要活动区 大致分为新生代、老年代)\"></a>java 堆 (gc 主要活动区 大致分为新生代、老年代)</h5><ul><li>所有线程共享区域</li><li>功能<br>java 堆内存 java中几乎所有的对象杜存放在堆上<br>java 垃圾收集主要就是收集 堆内存 (gc堆)<br>根据现代垃圾收集器对于java堆内存的划分可细分为 新生代、老年代 或者更加细致 Eden、From Survivor、To Survivor 空间等<br>从内存分配角度 线程共享的java堆可能划分出多个线程私有的分配缓存区 、</li><li>特殊说明<br>java堆可以在物理上不连续的内存空间内 只要逻辑是连续的 可以实现固定的大小也可以可以扩展的形式 通过-Xmx、-Xms控制堆内存的最小最大范围<br>如果堆中没有内存完成是实例的分配并且堆无法再进行扩展 抛出 OutOfMemoryError</li></ul><h5 id=\"方法区\"><a href=\"#方法区\" class=\"headerlink\" title=\"方法区\"></a>方法区</h5><ul><li>所有线程共享区域</li><li>功能<br>存储虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码<br>别名非堆(Non-Heap) 目的和 java 堆内存区分开</li><li>特殊说明<br>在HotSpot虚拟机中 方法区可以称之为永久代 但是在jdk7之后 HotSpot虚拟机也渐渐放弃永久代 改为Native Memory 在1.7中 String已经从常量池移除<br>java虚拟机规范对于方法区限制较为宽松 除了跟java堆一样不需要连续的物理内存和可以选择固定还是可扩展大小 还可以选择不实现垃圾收集<br>当方法区无法满足内存分配的需求的时候 抛出 OutOfMemoryError<h6 id=\"运行期常量池\"><a href=\"#运行期常量池\" class=\"headerlink\" title=\"运行期常量池\"></a>运行期常量池</h6></li><li>归属于方法区的一部分</li><li>功能<br>在编译期中 生成的各种字面量、符号引用等等 类加载后会直接加载进常量池</li><li>特殊说明<br>java虚拟机对class文件每个部分都有严格限制 但是对于常量池没有细节要求 一般只是保存字面量、符号引用还有翻译出来的直接引用<br>java语言要求常量不一定只有编译的时候会产生 例如String.intern() 这种可以在运行期 产生新的常量到常量区<br>由于存在运行期间 增加常量 那么当常量池无法申请到内存抛出 OutOfMemoryError 异常</li></ul><h5 id=\"直接内存\"><a href=\"#直接内存\" class=\"headerlink\" title=\"直接内存\"></a>直接内存</h5><ul><li>不属于虚拟机运行的数据区</li><li>不是java虚拟机规范定义的内存区域</li><li>功能<br>Channel和Buffer的io方式 可以只用Native函数 直接分配堆外内存 通过存储在java堆中的 DirectByteBuffer 作为这块内存的引用进行操作 避免在java堆和Native堆中来回复制数据</li><li>特殊说明<br>直接内存不受java虚拟机限制 当各个区域的内存和大于物理机的内存 那么也会抛出 OutOfMemoryError</li></ul><h4 id=\"HotSpot对象的创建和内存布局、对象访问定位\"><a href=\"#HotSpot对象的创建和内存布局、对象访问定位\" class=\"headerlink\" title=\"HotSpot对象的创建和内存布局、对象访问定位\"></a>HotSpot对象的创建和内存布局、对象访问定位</h4><h5 id=\"普通的java对象创建\"><a href=\"#普通的java对象创建\" class=\"headerlink\" title=\"普通的java对象创建\"></a>普通的java对象创建</h5><p>当执行到new 指令 -&gt; 检测能否在常量池中定位到一个类的符号引用 并且检测这个符合引用代表的类是否被加载、解析、初始化 如果没有先执行类加载<br>-&gt;执行完类加载检测 虚拟机为这个新对象分配内存。对象需要的内存大小在类加载后已经确定 为对象分配空间就是把一块确定大小的内存从堆中划分出来<br>-&gt;将分配到的内存初始化为0 不包括对象头 如果使用的TLAB 这个过程会在TLAB分配时候进行 保证对象的实例字段在java中不赋值即可使用 程序直接访问某些字段的零值<br>-&gt;虚拟机堆对象进行必要的设置 如对象是那个类的实例、如何才能找到类的元数据、对象哈希码、对象gc分代年龄等信息 这些信息在对象头中<br>-&gt;这个时候虚拟机认为对象已经初始化完毕 java程序认为对象还未创建完毕 继续执行init方法 -&gt;对象初始化完毕</p><h6 id=\"内存划分方法\"><a href=\"#内存划分方法\" class=\"headerlink\" title=\"内存划分方法\"></a>内存划分方法</h6><ul><li><p>指针碰撞<br>假设java堆内存绝对规整 所有用过的放在一边 空闲的放在另外一边 中间通过一个指针来作为指示器 那么内存划分只是把指针向空闲空间那边移动出来和对象大小相等的距离</p></li><li><p>空闲列表<br>虚拟机维护一个列表 记录那些内存可以用 在分配内存的时候 从列表中找出一块足够大的内存给对象 并且更新列表</p></li></ul><p>根据gc是带有压缩规整功能 来选择 那种内存划分方法<br>Serial ParNew 带有压缩规整的 采用的是指针碰撞<br>CMS 采用空闲列表</p><h6 id=\"指针分配内存存在的并发问题\"><a href=\"#指针分配内存存在的并发问题\" class=\"headerlink\" title=\"指针分配内存存在的并发问题\"></a>指针分配内存存在的并发问题</h6><ul><li>对分配内存空间的动作进行同步处理<br>虚拟机采用cas配上失败重试方式保证更新操作都是原子性的操作</li><li>本地线程分配缓冲 (Thread Local Allocation Buffer) TLAB<br>把内存分配工作按照线程划分到不同的空间中进行<br>每个线程预先在java堆中申请一块内存 那个线程要分配内存就在那个线程的TLAB上分配 只有当TLAB使用完毕分配新的TLAB的时候 才需要同步锁定<br>虚拟机通过-XX:+/-UseTLAB参数设定<h5 id=\"对象内存布局\"><a href=\"#对象内存布局\" class=\"headerlink\" title=\"对象内存布局\"></a>对象内存布局</h5>HotSpot虚拟机中 对象在内存中存储的布局分为三块区域 对象头(header)、实例数据(instance data )、对齐填充(padding)</li><li>对象头<br>对象头分为两部分<br>一: 存储对象自身运行时候的数据<br>如hashCode gc分代年龄、锁状态标志、线程持有的锁、偏向线程ID、偏向时间戳等<br>这部分数据在32位和64为虚拟机中分别为32bit 64bit大小 官方称之为 “Mark Word”<br>二: 类型指针<br>指向类的元数据的指针 虚拟机通过这个指针 确定对象是那个类的实例<br>不是所有的虚拟机实现都必须在对象数据上找到保留的类型指针</li><li>实例数据<br>存储对象真正有效的信息 至于存储顺序 受到虚拟机的分配策略参数和字段在java源码中定义的顺序影响<br>HotSpot虚拟机默认分配策略 longs/double、ints、 shorts/chars 、bytes/booleans 、oops</li><li>对齐填充<br>HotSpot自动内存管理要求对象的起始地址必须是8字节的整数倍 当对象的实例数据部分不是8的整数倍的时候 需要这一部分区补齐占位</li></ul><h5 id=\"对象访问定位\"><a href=\"#对象访问定位\" class=\"headerlink\" title=\"对象访问定位\"></a>对象访问定位</h5><p>java通过栈上的reference数据来操作堆上的具体对象 由于reference数据只是规定了一个指向对象的引用 没有定义如何去定位访问对象的具体位置<br>主流的实现方式有两种</p><ul><li>句柄<br>在堆中划分句柄池 reference存储对象的句柄地址 句柄包含对象实例数据和类型数据的各自具体地址信息<br>好处:reference中的数据是稳定的句柄地址 对象被移动只会改变句柄中的信息 不会改变句柄的地址 reference不需要变化<br>坏处:增加了指针定位的开销<br><img src=\"http://asset.xujiuming.com/private-asset/java%E5%AF%B9%E8%B1%A1%E8%AE%BF%E9%97%AE%E5%AE%9A%E4%BD%8D_%E5%8F%A5%E6%9F%84.jpg\" alt=\"java对象访问定位_句柄\"></li><li>直接指针<br>需要java堆对象布局考虑如何放置访问类型数据的相关信息 reference中直接存储堆对象的地址<br>好处:直接访问对象 减少指针定位开销<br>坏处:当对象内存地址发生变化 reference中数据也需要调整<br><img src=\"http://asset.xujiuming.com/private-asset/java%E5%AF%B9%E8%B1%A1%E8%AE%BF%E9%97%AE%E5%AE%9A%E4%BD%8D_%E7%9B%B4%E6%8E%A5%E6%8C%87%E9%92%88.jpg\" alt=\"java对象访问定位_指针\"></li></ul><p>HotSpot采用的是直接指针</p><h4 id=\"常见区域内存溢出\"><a href=\"#常见区域内存溢出\" class=\"headerlink\" title=\"常见区域内存溢出\"></a>常见区域内存溢出</h4><ul><li>java堆溢出<br>一直new对象 当超出最大堆限制即溢出<br>具体分析的时候 可以通过内存快照 分析到底是内存直接溢出导致还是因为内存泄漏导致的<br>如果是堆大小限制了 通过-Xmx配置最大值<br>如果是泄漏了 那么就只能找出那里泄漏了 然后修正了</li><li>虚拟机栈和本地方法栈溢出<br>当线程请求的栈深度大于虚拟机允许的最大深度 抛出StackOverflowError<br>当虚拟机扩展的时候无法申请到足够的内存 抛出 OutOfMemoryError<br>设置-Xss配置虚拟机栈和本地方法栈的大小</li><li>方法区和常量池溢出<br>一直新建String 并且使用.intern() 插入到方法区 就会造成 常量区溢出<br>二是 不断新建新的类加载到方法区域也会溢出</li><li>本机内存直接溢出<br>DirectMemory 通过-XX：MaxDirectMemorySize指定 如果不指定 那么默认和java堆一样大小<br>如果dump文件很小 程序中直接或者间接使用nio 那么 可能就是由于本机内存直接溢出</li></ul><h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><p>java的jvm规范 定义了 内存中 线程独享信息(本地方法栈、虚拟机栈、程序计数器) 线程共享的信息(方法区、堆)<br>jvm中内存划分方式非为 指针碰撞、空间列表<br>jvm中对象的寻址有句柄和直接指针的方式<br>jvm中堆内存 大致分为 新生代和老年代<br>jvm中方法区 又称之为永生区 永久代 新的jvm已经在慢慢作去永生代了 jdk1.7开始</p>","site":{"data":{}},"excerpt":"","more":"<h4 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h4><p>最近 在学习 jvm相关的知识<br>之前 一直看的一些博客 文章 没有静下心 看看 jvm相关的书籍<br>干脆买了一本 周志明大佬的jvm的书</p><h4 id=\"内存区域划分\"><a href=\"#内存区域划分\" class=\"headerlink\" title=\"内存区域划分\"></a>内存区域划分</h4><p><img src=\"http://asset.xujiuming.com/private-asset/jvm_runtime_data_area.png\" alt=\"内存区域划分图\"></p><h5 id=\"程序计数器\"><a href=\"#程序计数器\" class=\"headerlink\" title=\"程序计数器\"></a>程序计数器</h5><ul><li>线程独有的信息</li><li>功能<br>用来指示执行的字节码的行号 所以这个必须是线程独有信息不能共享<br>字节码解释器通过改变计数器 来选取下一条的指令 去执行相关操作 如跳转、循环、异常、线程恢复等</li><li>特殊说明<br>jvm虚拟机规范没有对这个区域规定内存错误(oom)的情况</li></ul><h5 id=\"虚拟机栈\"><a href=\"#虚拟机栈\" class=\"headerlink\" title=\"虚拟机栈\"></a>虚拟机栈</h5><ul><li>线程独有信息</li><li>功能<br>线程栈帧 用来存储局部变量、操作数栈、动态链接、方法出口 每个方法调用执行完成 都对应一个栈帧 的入栈和出栈<br>局部变量存储了 基础类型 和引用类型的引用指针或者句柄 和返回数据的地址(returnAddress)</li><li>特殊说明<br>64位的long和double 占用两个局部变量空间(slot)其余的都是占用一个<br>局部变量需要的内存空间在编译的时期已经完成，当进入一个方法 局部变量的空间大小是确定的 运行期不会改变局部变量的内存大小<br>当线程请求的栈深度大于虚拟机允许的深度抛出 StackOverflowError<br>当虚拟机栈支持动态扩展 当扩展时候无法申请到足够的内存 抛出 OutOfMemoryError异常</li></ul><h5 id=\"本地方法栈\"><a href=\"#本地方法栈\" class=\"headerlink\" title=\"本地方法栈\"></a>本地方法栈</h5><ul><li>线程独有信息</li><li>功能<br>线程栈帧 不过是本地方法的栈帧 而不是虚拟机的栈帧 保存的是本地方法的栈帧信息</li><li>特殊说明<br>当线程请求的栈深度大于虚拟机允许的深度抛出 StackOverflowError<br>当虚拟机栈支持动态扩展 当扩展时候无法申请到足够的内存 抛出 OutOfMemoryError异常</li></ul><h5 id=\"java-堆-gc-主要活动区-大致分为新生代、老年代\"><a href=\"#java-堆-gc-主要活动区-大致分为新生代、老年代\" class=\"headerlink\" title=\"java 堆 (gc 主要活动区 大致分为新生代、老年代)\"></a>java 堆 (gc 主要活动区 大致分为新生代、老年代)</h5><ul><li>所有线程共享区域</li><li>功能<br>java 堆内存 java中几乎所有的对象杜存放在堆上<br>java 垃圾收集主要就是收集 堆内存 (gc堆)<br>根据现代垃圾收集器对于java堆内存的划分可细分为 新生代、老年代 或者更加细致 Eden、From Survivor、To Survivor 空间等<br>从内存分配角度 线程共享的java堆可能划分出多个线程私有的分配缓存区 、</li><li>特殊说明<br>java堆可以在物理上不连续的内存空间内 只要逻辑是连续的 可以实现固定的大小也可以可以扩展的形式 通过-Xmx、-Xms控制堆内存的最小最大范围<br>如果堆中没有内存完成是实例的分配并且堆无法再进行扩展 抛出 OutOfMemoryError</li></ul><h5 id=\"方法区\"><a href=\"#方法区\" class=\"headerlink\" title=\"方法区\"></a>方法区</h5><ul><li>所有线程共享区域</li><li>功能<br>存储虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码<br>别名非堆(Non-Heap) 目的和 java 堆内存区分开</li><li>特殊说明<br>在HotSpot虚拟机中 方法区可以称之为永久代 但是在jdk7之后 HotSpot虚拟机也渐渐放弃永久代 改为Native Memory 在1.7中 String已经从常量池移除<br>java虚拟机规范对于方法区限制较为宽松 除了跟java堆一样不需要连续的物理内存和可以选择固定还是可扩展大小 还可以选择不实现垃圾收集<br>当方法区无法满足内存分配的需求的时候 抛出 OutOfMemoryError<h6 id=\"运行期常量池\"><a href=\"#运行期常量池\" class=\"headerlink\" title=\"运行期常量池\"></a>运行期常量池</h6></li><li>归属于方法区的一部分</li><li>功能<br>在编译期中 生成的各种字面量、符号引用等等 类加载后会直接加载进常量池</li><li>特殊说明<br>java虚拟机对class文件每个部分都有严格限制 但是对于常量池没有细节要求 一般只是保存字面量、符号引用还有翻译出来的直接引用<br>java语言要求常量不一定只有编译的时候会产生 例如String.intern() 这种可以在运行期 产生新的常量到常量区<br>由于存在运行期间 增加常量 那么当常量池无法申请到内存抛出 OutOfMemoryError 异常</li></ul><h5 id=\"直接内存\"><a href=\"#直接内存\" class=\"headerlink\" title=\"直接内存\"></a>直接内存</h5><ul><li>不属于虚拟机运行的数据区</li><li>不是java虚拟机规范定义的内存区域</li><li>功能<br>Channel和Buffer的io方式 可以只用Native函数 直接分配堆外内存 通过存储在java堆中的 DirectByteBuffer 作为这块内存的引用进行操作 避免在java堆和Native堆中来回复制数据</li><li>特殊说明<br>直接内存不受java虚拟机限制 当各个区域的内存和大于物理机的内存 那么也会抛出 OutOfMemoryError</li></ul><h4 id=\"HotSpot对象的创建和内存布局、对象访问定位\"><a href=\"#HotSpot对象的创建和内存布局、对象访问定位\" class=\"headerlink\" title=\"HotSpot对象的创建和内存布局、对象访问定位\"></a>HotSpot对象的创建和内存布局、对象访问定位</h4><h5 id=\"普通的java对象创建\"><a href=\"#普通的java对象创建\" class=\"headerlink\" title=\"普通的java对象创建\"></a>普通的java对象创建</h5><p>当执行到new 指令 -&gt; 检测能否在常量池中定位到一个类的符号引用 并且检测这个符合引用代表的类是否被加载、解析、初始化 如果没有先执行类加载<br>-&gt;执行完类加载检测 虚拟机为这个新对象分配内存。对象需要的内存大小在类加载后已经确定 为对象分配空间就是把一块确定大小的内存从堆中划分出来<br>-&gt;将分配到的内存初始化为0 不包括对象头 如果使用的TLAB 这个过程会在TLAB分配时候进行 保证对象的实例字段在java中不赋值即可使用 程序直接访问某些字段的零值<br>-&gt;虚拟机堆对象进行必要的设置 如对象是那个类的实例、如何才能找到类的元数据、对象哈希码、对象gc分代年龄等信息 这些信息在对象头中<br>-&gt;这个时候虚拟机认为对象已经初始化完毕 java程序认为对象还未创建完毕 继续执行init方法 -&gt;对象初始化完毕</p><h6 id=\"内存划分方法\"><a href=\"#内存划分方法\" class=\"headerlink\" title=\"内存划分方法\"></a>内存划分方法</h6><ul><li><p>指针碰撞<br>假设java堆内存绝对规整 所有用过的放在一边 空闲的放在另外一边 中间通过一个指针来作为指示器 那么内存划分只是把指针向空闲空间那边移动出来和对象大小相等的距离</p></li><li><p>空闲列表<br>虚拟机维护一个列表 记录那些内存可以用 在分配内存的时候 从列表中找出一块足够大的内存给对象 并且更新列表</p></li></ul><p>根据gc是带有压缩规整功能 来选择 那种内存划分方法<br>Serial ParNew 带有压缩规整的 采用的是指针碰撞<br>CMS 采用空闲列表</p><h6 id=\"指针分配内存存在的并发问题\"><a href=\"#指针分配内存存在的并发问题\" class=\"headerlink\" title=\"指针分配内存存在的并发问题\"></a>指针分配内存存在的并发问题</h6><ul><li>对分配内存空间的动作进行同步处理<br>虚拟机采用cas配上失败重试方式保证更新操作都是原子性的操作</li><li>本地线程分配缓冲 (Thread Local Allocation Buffer) TLAB<br>把内存分配工作按照线程划分到不同的空间中进行<br>每个线程预先在java堆中申请一块内存 那个线程要分配内存就在那个线程的TLAB上分配 只有当TLAB使用完毕分配新的TLAB的时候 才需要同步锁定<br>虚拟机通过-XX:+/-UseTLAB参数设定<h5 id=\"对象内存布局\"><a href=\"#对象内存布局\" class=\"headerlink\" title=\"对象内存布局\"></a>对象内存布局</h5>HotSpot虚拟机中 对象在内存中存储的布局分为三块区域 对象头(header)、实例数据(instance data )、对齐填充(padding)</li><li>对象头<br>对象头分为两部分<br>一: 存储对象自身运行时候的数据<br>如hashCode gc分代年龄、锁状态标志、线程持有的锁、偏向线程ID、偏向时间戳等<br>这部分数据在32位和64为虚拟机中分别为32bit 64bit大小 官方称之为 “Mark Word”<br>二: 类型指针<br>指向类的元数据的指针 虚拟机通过这个指针 确定对象是那个类的实例<br>不是所有的虚拟机实现都必须在对象数据上找到保留的类型指针</li><li>实例数据<br>存储对象真正有效的信息 至于存储顺序 受到虚拟机的分配策略参数和字段在java源码中定义的顺序影响<br>HotSpot虚拟机默认分配策略 longs/double、ints、 shorts/chars 、bytes/booleans 、oops</li><li>对齐填充<br>HotSpot自动内存管理要求对象的起始地址必须是8字节的整数倍 当对象的实例数据部分不是8的整数倍的时候 需要这一部分区补齐占位</li></ul><h5 id=\"对象访问定位\"><a href=\"#对象访问定位\" class=\"headerlink\" title=\"对象访问定位\"></a>对象访问定位</h5><p>java通过栈上的reference数据来操作堆上的具体对象 由于reference数据只是规定了一个指向对象的引用 没有定义如何去定位访问对象的具体位置<br>主流的实现方式有两种</p><ul><li>句柄<br>在堆中划分句柄池 reference存储对象的句柄地址 句柄包含对象实例数据和类型数据的各自具体地址信息<br>好处:reference中的数据是稳定的句柄地址 对象被移动只会改变句柄中的信息 不会改变句柄的地址 reference不需要变化<br>坏处:增加了指针定位的开销<br><img src=\"http://asset.xujiuming.com/private-asset/java%E5%AF%B9%E8%B1%A1%E8%AE%BF%E9%97%AE%E5%AE%9A%E4%BD%8D_%E5%8F%A5%E6%9F%84.jpg\" alt=\"java对象访问定位_句柄\"></li><li>直接指针<br>需要java堆对象布局考虑如何放置访问类型数据的相关信息 reference中直接存储堆对象的地址<br>好处:直接访问对象 减少指针定位开销<br>坏处:当对象内存地址发生变化 reference中数据也需要调整<br><img src=\"http://asset.xujiuming.com/private-asset/java%E5%AF%B9%E8%B1%A1%E8%AE%BF%E9%97%AE%E5%AE%9A%E4%BD%8D_%E7%9B%B4%E6%8E%A5%E6%8C%87%E9%92%88.jpg\" alt=\"java对象访问定位_指针\"></li></ul><p>HotSpot采用的是直接指针</p><h4 id=\"常见区域内存溢出\"><a href=\"#常见区域内存溢出\" class=\"headerlink\" title=\"常见区域内存溢出\"></a>常见区域内存溢出</h4><ul><li>java堆溢出<br>一直new对象 当超出最大堆限制即溢出<br>具体分析的时候 可以通过内存快照 分析到底是内存直接溢出导致还是因为内存泄漏导致的<br>如果是堆大小限制了 通过-Xmx配置最大值<br>如果是泄漏了 那么就只能找出那里泄漏了 然后修正了</li><li>虚拟机栈和本地方法栈溢出<br>当线程请求的栈深度大于虚拟机允许的最大深度 抛出StackOverflowError<br>当虚拟机扩展的时候无法申请到足够的内存 抛出 OutOfMemoryError<br>设置-Xss配置虚拟机栈和本地方法栈的大小</li><li>方法区和常量池溢出<br>一直新建String 并且使用.intern() 插入到方法区 就会造成 常量区溢出<br>二是 不断新建新的类加载到方法区域也会溢出</li><li>本机内存直接溢出<br>DirectMemory 通过-XX：MaxDirectMemorySize指定 如果不指定 那么默认和java堆一样大小<br>如果dump文件很小 程序中直接或者间接使用nio 那么 可能就是由于本机内存直接溢出</li></ul><h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><p>java的jvm规范 定义了 内存中 线程独享信息(本地方法栈、虚拟机栈、程序计数器) 线程共享的信息(方法区、堆)<br>jvm中内存划分方式非为 指针碰撞、空间列表<br>jvm中对象的寻址有句柄和直接指针的方式<br>jvm中堆内存 大致分为 新生代和老年代<br>jvm中方法区 又称之为永生区 永久代 新的jvm已经在慢慢作去永生代了 jdk1.7开始</p>"},{"title":"spring-boot-cache使用实战","comments":1,"abbrlink":"a29d9e52","date":"2018-07-11T08:26:32.000Z","_content":"#### 前言\ncache可以说是后端提高响应速度、承载能力的标准套路了\nspring boot中提供spring boot starter cache 组件 配合spring boot starter redis 或者其他缓存组件 可以很简单的使用缓存 \n#### spring cache 介绍\n一套基于spring aop的方式 为函数添加缓存的 框架 \n\n##### 支持的缓存类型 \n* Generic   \n* JCache (JSR-107)  \n* EhCache 2.x  \n* Hazelcast  \n* Infinispan  \n* Redis  \n* Guava  \n* Simple  \n如果不满足上述的缓存方案  可以自实现 cacheManager   \n##### 注解介绍\n* @Cacheable \n获取缓存  如果有缓存 直接返回 \n\n\n|属性|类型|功能|\n|:--|:---|:--|\n|value|String[]|缓存的名称 和cacheNames功能一样|\n|cacheNames|String[]|缓存的名称和value功能一样|\n|key|String|缓存key的值、默认是以所有的参数作为key、也可以直接配置keyGenerator|\n|keyGenerator|String|缓存key的生成器|\n|cacheManager|String|配置使用那个缓存管理器、和cacheResolver排斥|\n|cacheResolver|String|定义使用那个拦截器、和cacheManager互斥|\n|condition|String|根据spel表达式来可以配置什么条件下进行缓存 默认全部缓存|\n|unless|String|和condition相反 |\n|sync|boolean|是否开启同步功能、默认不开启|\n\n* @CachePut\n执行并且更新缓存相关  不管如何 肯定会执行方法 然后返回 这样可以更新缓存的内容 \n\n|属性|类型|功能|\n|:--|:---|:--|\n|value|String[]|缓存的名称 和cacheNames功能一样|\n|cacheNames|String[]|缓存的名称和value功能一样|\n|key|String|缓存key的值、默认是以所有的参数作为key、也可以直接配置keyGenerator|\n|keyGenerator|String|缓存key的生成器|\n|cacheManager|String|配置使用那个缓存管理器、和cacheResolver排斥|\n|cacheResolver|String|定义使用那个拦截器、和cacheManager互斥|\n|condition|String|根据spel表达式来可以配置什么条件下进行缓存 默认全部缓存|\n|unless|String|和condition相反 |\n\n* @CacheEvict\n删除缓存相关\n\n|属性|类型|功能|\n|:--|:---|:--|\n|value|String[]|缓存的名称 和cacheNames功能一样|\n|cacheNames|String[]|缓存的名称和value功能一样|\n|key|String|缓存key的值、默认是以所有的参数作为key、也可以直接配置keyGenerator|\n|keyGenerator|String|缓存key的生成器|\n|cacheManager|String|配置使用那个缓存管理器、和cacheResolver排斥|\n|cacheResolver|String|定义使用那个拦截器、和cacheManager互斥|\n|condition|String|根据spel表达式来可以配置什么条件下进行缓存 默认全部缓存|\n|allEntries|boolean|是否删除所有键的缓存 默认不删除|\n|beforeInvocation|boolean|是否在调用此方法前 删除缓存 |\n\n\n* @CacheConfig\n在类级别统一的配置缓存公共配置 \n\n|属性|类型|功能|\n|:--|:---|:--|\n|cacheNames|String[]|缓存的名称和value功能一样|\n|keyGenerator|String|缓存key的生成器|\n|cacheManager|String|配置使用那个缓存管理器、和cacheResolver排斥|\n|cacheResolver|String|定义使用那个拦截器、和cacheManager互斥|\n\n* @EnableCaching\n开启缓存以及缓存的全局配置 \n\n\n|属性|类型|功能|\n|:--|:---|:--|\n|proxyTargetClass|boolean|是否要基于cglib生成代理去实现缓存|\n|mode|AdviceMode|配置那种模式去实现缓存、默认是AdviceMode.PROXY  可以切换为 AdviceMode#ASPECTJ|\n|order|int|设置缓存管理器执行的顺序|\n\n\n* @Caching\n对多个缓存组的配置   \n\n|属性|类型|功能|\n|:--|:---|:--|\n|cacheable|Cacheable|配置获取缓存相关的配置|\n|put|CachePut|配置如何更新缓存的相关配置|\n|evict|CacheEvict|配置如何删除缓存的相关配置|\n\n#### 实战\n##### gradle 依赖\n```\ncompile('org.springframework.boot:spring-boot-starter-web')\ncompile('org.springframework.boot:spring-boot-starter-data-redis')\ncompile('org.springframework.boot:spring-boot-starter-cache')\ntestCompile('org.springframework.boot:spring-boot-starter-test')\n```\n##### 启动引导开启缓存 \n```\npackage com.ming;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.cache.annotation.EnableCaching;\n\n@SpringBootApplication\n//开启缓存 \n@EnableCaching\npublic class Start {\n\n    public static void main(String[] args) {\n        SpringApplication.run(Start.class,args);\n    }\n}\n```\n##### 配置 \n```\nspring:\n  redis:\n    host: <ip>\n    port: <port>\n    password: <password>\n  cache:\n    # spring cache 缓存类型为redis  也可以是其他的实现 \n    type: redis\n```\n##### 使用cache\n###### 模拟带缓存的service\n```\npackage com.ming;\n\nimport org.springframework.cache.annotation.CacheConfig;\nimport org.springframework.cache.annotation.CacheEvict;\nimport org.springframework.cache.annotation.CachePut;\nimport org.springframework.cache.annotation.Cacheable;\nimport org.springframework.stereotype.Service;\n\n@Service\n//公共配置  可以在类上注释 注释本类的 缓存相关公共配置\n//@CacheConfig(cacheNames = TestCacheService.CACHE_KEY)\npublic class TestCacheService {\n\n    public static final String CACHE_KEY = \"test-cache\";\n\n    /**\n     * 获取信息  第二次访问会取缓存\n     *\n     * @author ming\n     * @date 2018-07-11 17:41:47\n     */\n    @Cacheable(cacheNames = CACHE_KEY)\n    public String testCache(String id) {\n        return getString(id);\n    }\n\n\n    /**\n     * 更新信息   更新缓存\n     *\n     * @author ming\n     * @date 2018-07-12 09:50:53\n     */\n    @CachePut(cacheNames = CACHE_KEY)\n    public String testCachePut(String id) {\n        return getString(id + \"update\");\n    }\n\n    /**\n     * 清除缓存\n     *\n     * @author ming\n     * @date 2018-07-12 09:51:22\n     */\n    @CacheEvict(cacheNames = CACHE_KEY)\n    public void removeCache(String id) {\n        System.out.println(\"删除缓存 \");\n    }\n\n\n    /**\n     * 获取string 模拟调用方法\n     *\n     * @author ming\n     * @date 2018-07-11 17:41:58\n     */\n    private String getString(String id) {\n        try {\n            Thread.sleep(3000L);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n        return id + \"load\";\n    }\n\n\n}\n\n```\n###### 测试用例\n```\npackage com.ming;\n\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.context.SpringBootTest;\nimport org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n\n@RunWith(SpringJUnit4ClassRunner.class)\n@SpringBootTest(classes = Start.class)\npublic class TestCache {\n\n    @Autowired\n    private TestCacheService testCacheService;\n\n    @Test\n    public void test() {\n        String id = \"ming\";\n        System.out.println(\"第一次访问没有缓存--------\");\n        long oneNow = System.currentTimeMillis();\n        System.out.println(testCacheService.testCache(id));\n        System.out.println(\"耗时:\" + (System.currentTimeMillis() - oneNow) + \"ms\");\n\n\n        System.out.println(\"第二次访问有缓存--------\");\n        long twoNow = System.currentTimeMillis();\n        System.out.println(testCacheService.testCache(id));\n        System.out.println(\"耗时:\" + (System.currentTimeMillis() - twoNow) + \"ms\");\n\n\n        System.out.println(\"更新缓存信息--------\");\n        long threeNow = System.currentTimeMillis();\n        System.out.println(testCacheService.testCachePut(id));\n        System.out.println(\"耗时:\" + (System.currentTimeMillis() - threeNow) + \"ms\");\n\n\n        System.out.println(\"获取更新后的缓存信息-------\");\n        long fourNow = System.currentTimeMillis();\n        System.out.println(testCacheService.testCache(id));\n        System.out.println(\"耗时:\" + (System.currentTimeMillis() - fourNow) + \"ms\");\n\n\n        System.out.println(\"移除缓存------并且调用testCache方法\");\n        testCacheService.removeCache(id);\n        long fiveNow = System.currentTimeMillis();\n        System.out.println(testCacheService.testCache(id));\n        System.out.println(\"耗时:\" + (System.currentTimeMillis() - fiveNow) + \"ms\");\n    }\n}\n\n```\n\n#### 坑  \n* @Cacheable 、@CachePut、@CacheEvict 必须要有 cacheNames  \n* 注解必须放在public修饰的方法上   \n* 如果只是获取缓存使用@Cacheable即可 如果要更新数据库并且更新缓存一定要使用@CachePut 否则@Cacheable会出现脏读   \n\n#### 总结 \nspring cache 为缓存提供了一套简单快捷的方案 可以在旧的功能上很快速添加上缓存 \n具体缓存的实现 也有更多的选择 也可以自己实现spring cache的缓存管理器皿 来实现自定义的缓存 \n本身提供的有很多 例如Generic、JCache (JSR-107)、EhCache 2.x、Hazelcast、Infinispan、Redis、Guava、Simple\n按需选择 如果没有 可以自己实现cacheManager去做 \n\n","source":"_posts/spring/spring-boot-cache使用实战.md","raw":"---\ntitle: spring-boot-cache使用实战\ncomments: true\ncategories: 实战\ntags:\n  - spring boot\n  - cache\n  - redis\nabbrlink: a29d9e52\ndate: 2018-07-11 16:26:32\n---\n#### 前言\ncache可以说是后端提高响应速度、承载能力的标准套路了\nspring boot中提供spring boot starter cache 组件 配合spring boot starter redis 或者其他缓存组件 可以很简单的使用缓存 \n#### spring cache 介绍\n一套基于spring aop的方式 为函数添加缓存的 框架 \n\n##### 支持的缓存类型 \n* Generic   \n* JCache (JSR-107)  \n* EhCache 2.x  \n* Hazelcast  \n* Infinispan  \n* Redis  \n* Guava  \n* Simple  \n如果不满足上述的缓存方案  可以自实现 cacheManager   \n##### 注解介绍\n* @Cacheable \n获取缓存  如果有缓存 直接返回 \n\n\n|属性|类型|功能|\n|:--|:---|:--|\n|value|String[]|缓存的名称 和cacheNames功能一样|\n|cacheNames|String[]|缓存的名称和value功能一样|\n|key|String|缓存key的值、默认是以所有的参数作为key、也可以直接配置keyGenerator|\n|keyGenerator|String|缓存key的生成器|\n|cacheManager|String|配置使用那个缓存管理器、和cacheResolver排斥|\n|cacheResolver|String|定义使用那个拦截器、和cacheManager互斥|\n|condition|String|根据spel表达式来可以配置什么条件下进行缓存 默认全部缓存|\n|unless|String|和condition相反 |\n|sync|boolean|是否开启同步功能、默认不开启|\n\n* @CachePut\n执行并且更新缓存相关  不管如何 肯定会执行方法 然后返回 这样可以更新缓存的内容 \n\n|属性|类型|功能|\n|:--|:---|:--|\n|value|String[]|缓存的名称 和cacheNames功能一样|\n|cacheNames|String[]|缓存的名称和value功能一样|\n|key|String|缓存key的值、默认是以所有的参数作为key、也可以直接配置keyGenerator|\n|keyGenerator|String|缓存key的生成器|\n|cacheManager|String|配置使用那个缓存管理器、和cacheResolver排斥|\n|cacheResolver|String|定义使用那个拦截器、和cacheManager互斥|\n|condition|String|根据spel表达式来可以配置什么条件下进行缓存 默认全部缓存|\n|unless|String|和condition相反 |\n\n* @CacheEvict\n删除缓存相关\n\n|属性|类型|功能|\n|:--|:---|:--|\n|value|String[]|缓存的名称 和cacheNames功能一样|\n|cacheNames|String[]|缓存的名称和value功能一样|\n|key|String|缓存key的值、默认是以所有的参数作为key、也可以直接配置keyGenerator|\n|keyGenerator|String|缓存key的生成器|\n|cacheManager|String|配置使用那个缓存管理器、和cacheResolver排斥|\n|cacheResolver|String|定义使用那个拦截器、和cacheManager互斥|\n|condition|String|根据spel表达式来可以配置什么条件下进行缓存 默认全部缓存|\n|allEntries|boolean|是否删除所有键的缓存 默认不删除|\n|beforeInvocation|boolean|是否在调用此方法前 删除缓存 |\n\n\n* @CacheConfig\n在类级别统一的配置缓存公共配置 \n\n|属性|类型|功能|\n|:--|:---|:--|\n|cacheNames|String[]|缓存的名称和value功能一样|\n|keyGenerator|String|缓存key的生成器|\n|cacheManager|String|配置使用那个缓存管理器、和cacheResolver排斥|\n|cacheResolver|String|定义使用那个拦截器、和cacheManager互斥|\n\n* @EnableCaching\n开启缓存以及缓存的全局配置 \n\n\n|属性|类型|功能|\n|:--|:---|:--|\n|proxyTargetClass|boolean|是否要基于cglib生成代理去实现缓存|\n|mode|AdviceMode|配置那种模式去实现缓存、默认是AdviceMode.PROXY  可以切换为 AdviceMode#ASPECTJ|\n|order|int|设置缓存管理器执行的顺序|\n\n\n* @Caching\n对多个缓存组的配置   \n\n|属性|类型|功能|\n|:--|:---|:--|\n|cacheable|Cacheable|配置获取缓存相关的配置|\n|put|CachePut|配置如何更新缓存的相关配置|\n|evict|CacheEvict|配置如何删除缓存的相关配置|\n\n#### 实战\n##### gradle 依赖\n```\ncompile('org.springframework.boot:spring-boot-starter-web')\ncompile('org.springframework.boot:spring-boot-starter-data-redis')\ncompile('org.springframework.boot:spring-boot-starter-cache')\ntestCompile('org.springframework.boot:spring-boot-starter-test')\n```\n##### 启动引导开启缓存 \n```\npackage com.ming;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.cache.annotation.EnableCaching;\n\n@SpringBootApplication\n//开启缓存 \n@EnableCaching\npublic class Start {\n\n    public static void main(String[] args) {\n        SpringApplication.run(Start.class,args);\n    }\n}\n```\n##### 配置 \n```\nspring:\n  redis:\n    host: <ip>\n    port: <port>\n    password: <password>\n  cache:\n    # spring cache 缓存类型为redis  也可以是其他的实现 \n    type: redis\n```\n##### 使用cache\n###### 模拟带缓存的service\n```\npackage com.ming;\n\nimport org.springframework.cache.annotation.CacheConfig;\nimport org.springframework.cache.annotation.CacheEvict;\nimport org.springframework.cache.annotation.CachePut;\nimport org.springframework.cache.annotation.Cacheable;\nimport org.springframework.stereotype.Service;\n\n@Service\n//公共配置  可以在类上注释 注释本类的 缓存相关公共配置\n//@CacheConfig(cacheNames = TestCacheService.CACHE_KEY)\npublic class TestCacheService {\n\n    public static final String CACHE_KEY = \"test-cache\";\n\n    /**\n     * 获取信息  第二次访问会取缓存\n     *\n     * @author ming\n     * @date 2018-07-11 17:41:47\n     */\n    @Cacheable(cacheNames = CACHE_KEY)\n    public String testCache(String id) {\n        return getString(id);\n    }\n\n\n    /**\n     * 更新信息   更新缓存\n     *\n     * @author ming\n     * @date 2018-07-12 09:50:53\n     */\n    @CachePut(cacheNames = CACHE_KEY)\n    public String testCachePut(String id) {\n        return getString(id + \"update\");\n    }\n\n    /**\n     * 清除缓存\n     *\n     * @author ming\n     * @date 2018-07-12 09:51:22\n     */\n    @CacheEvict(cacheNames = CACHE_KEY)\n    public void removeCache(String id) {\n        System.out.println(\"删除缓存 \");\n    }\n\n\n    /**\n     * 获取string 模拟调用方法\n     *\n     * @author ming\n     * @date 2018-07-11 17:41:58\n     */\n    private String getString(String id) {\n        try {\n            Thread.sleep(3000L);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n        return id + \"load\";\n    }\n\n\n}\n\n```\n###### 测试用例\n```\npackage com.ming;\n\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.context.SpringBootTest;\nimport org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n\n@RunWith(SpringJUnit4ClassRunner.class)\n@SpringBootTest(classes = Start.class)\npublic class TestCache {\n\n    @Autowired\n    private TestCacheService testCacheService;\n\n    @Test\n    public void test() {\n        String id = \"ming\";\n        System.out.println(\"第一次访问没有缓存--------\");\n        long oneNow = System.currentTimeMillis();\n        System.out.println(testCacheService.testCache(id));\n        System.out.println(\"耗时:\" + (System.currentTimeMillis() - oneNow) + \"ms\");\n\n\n        System.out.println(\"第二次访问有缓存--------\");\n        long twoNow = System.currentTimeMillis();\n        System.out.println(testCacheService.testCache(id));\n        System.out.println(\"耗时:\" + (System.currentTimeMillis() - twoNow) + \"ms\");\n\n\n        System.out.println(\"更新缓存信息--------\");\n        long threeNow = System.currentTimeMillis();\n        System.out.println(testCacheService.testCachePut(id));\n        System.out.println(\"耗时:\" + (System.currentTimeMillis() - threeNow) + \"ms\");\n\n\n        System.out.println(\"获取更新后的缓存信息-------\");\n        long fourNow = System.currentTimeMillis();\n        System.out.println(testCacheService.testCache(id));\n        System.out.println(\"耗时:\" + (System.currentTimeMillis() - fourNow) + \"ms\");\n\n\n        System.out.println(\"移除缓存------并且调用testCache方法\");\n        testCacheService.removeCache(id);\n        long fiveNow = System.currentTimeMillis();\n        System.out.println(testCacheService.testCache(id));\n        System.out.println(\"耗时:\" + (System.currentTimeMillis() - fiveNow) + \"ms\");\n    }\n}\n\n```\n\n#### 坑  \n* @Cacheable 、@CachePut、@CacheEvict 必须要有 cacheNames  \n* 注解必须放在public修饰的方法上   \n* 如果只是获取缓存使用@Cacheable即可 如果要更新数据库并且更新缓存一定要使用@CachePut 否则@Cacheable会出现脏读   \n\n#### 总结 \nspring cache 为缓存提供了一套简单快捷的方案 可以在旧的功能上很快速添加上缓存 \n具体缓存的实现 也有更多的选择 也可以自己实现spring cache的缓存管理器皿 来实现自定义的缓存 \n本身提供的有很多 例如Generic、JCache (JSR-107)、EhCache 2.x、Hazelcast、Infinispan、Redis、Guava、Simple\n按需选择 如果没有 可以自己实现cacheManager去做 \n\n","slug":"spring/spring-boot-cache使用实战","published":1,"updated":"2018-08-17T08:10:03.923Z","layout":"post","photos":[],"link":"","_id":"cjo9uau2y00bmmwcz1o8nupjm","content":"<h4 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h4><p>cache可以说是后端提高响应速度、承载能力的标准套路了<br>spring boot中提供spring boot starter cache 组件 配合spring boot starter redis 或者其他缓存组件 可以很简单的使用缓存</p><h4 id=\"spring-cache-介绍\"><a href=\"#spring-cache-介绍\" class=\"headerlink\" title=\"spring cache 介绍\"></a>spring cache 介绍</h4><p>一套基于spring aop的方式 为函数添加缓存的 框架</p><h5 id=\"支持的缓存类型\"><a href=\"#支持的缓存类型\" class=\"headerlink\" title=\"支持的缓存类型\"></a>支持的缓存类型</h5><ul><li>Generic</li><li>JCache (JSR-107)</li><li>EhCache 2.x</li><li>Hazelcast</li><li>Infinispan</li><li>Redis</li><li>Guava</li><li>Simple<br>如果不满足上述的缓存方案 可以自实现 cacheManager<h5 id=\"注解介绍\"><a href=\"#注解介绍\" class=\"headerlink\" title=\"注解介绍\"></a>注解介绍</h5></li><li>@Cacheable<br>获取缓存 如果有缓存 直接返回</li></ul><table><thead><tr><th style=\"text-align:left\">属性</th><th style=\"text-align:left\">类型</th><th style=\"text-align:left\">功能</th></tr></thead><tbody><tr><td style=\"text-align:left\">value</td><td style=\"text-align:left\">String[]</td><td style=\"text-align:left\">缓存的名称 和cacheNames功能一样</td></tr><tr><td style=\"text-align:left\">cacheNames</td><td style=\"text-align:left\">String[]</td><td style=\"text-align:left\">缓存的名称和value功能一样</td></tr><tr><td style=\"text-align:left\">key</td><td style=\"text-align:left\">String</td><td style=\"text-align:left\">缓存key的值、默认是以所有的参数作为key、也可以直接配置keyGenerator</td></tr><tr><td style=\"text-align:left\">keyGenerator</td><td style=\"text-align:left\">String</td><td style=\"text-align:left\">缓存key的生成器</td></tr><tr><td style=\"text-align:left\">cacheManager</td><td style=\"text-align:left\">String</td><td style=\"text-align:left\">配置使用那个缓存管理器、和cacheResolver排斥</td></tr><tr><td style=\"text-align:left\">cacheResolver</td><td style=\"text-align:left\">String</td><td style=\"text-align:left\">定义使用那个拦截器、和cacheManager互斥</td></tr><tr><td style=\"text-align:left\">condition</td><td style=\"text-align:left\">String</td><td style=\"text-align:left\">根据spel表达式来可以配置什么条件下进行缓存 默认全部缓存</td></tr><tr><td style=\"text-align:left\">unless</td><td style=\"text-align:left\">String</td><td style=\"text-align:left\">和condition相反</td></tr><tr><td style=\"text-align:left\">sync</td><td style=\"text-align:left\">boolean</td><td style=\"text-align:left\">是否开启同步功能、默认不开启</td></tr></tbody></table><ul><li>@CachePut<br>执行并且更新缓存相关 不管如何 肯定会执行方法 然后返回 这样可以更新缓存的内容</li></ul><table><thead><tr><th style=\"text-align:left\">属性</th><th style=\"text-align:left\">类型</th><th style=\"text-align:left\">功能</th></tr></thead><tbody><tr><td style=\"text-align:left\">value</td><td style=\"text-align:left\">String[]</td><td style=\"text-align:left\">缓存的名称 和cacheNames功能一样</td></tr><tr><td style=\"text-align:left\">cacheNames</td><td style=\"text-align:left\">String[]</td><td style=\"text-align:left\">缓存的名称和value功能一样</td></tr><tr><td style=\"text-align:left\">key</td><td style=\"text-align:left\">String</td><td style=\"text-align:left\">缓存key的值、默认是以所有的参数作为key、也可以直接配置keyGenerator</td></tr><tr><td style=\"text-align:left\">keyGenerator</td><td style=\"text-align:left\">String</td><td style=\"text-align:left\">缓存key的生成器</td></tr><tr><td style=\"text-align:left\">cacheManager</td><td style=\"text-align:left\">String</td><td style=\"text-align:left\">配置使用那个缓存管理器、和cacheResolver排斥</td></tr><tr><td style=\"text-align:left\">cacheResolver</td><td style=\"text-align:left\">String</td><td style=\"text-align:left\">定义使用那个拦截器、和cacheManager互斥</td></tr><tr><td style=\"text-align:left\">condition</td><td style=\"text-align:left\">String</td><td style=\"text-align:left\">根据spel表达式来可以配置什么条件下进行缓存 默认全部缓存</td></tr><tr><td style=\"text-align:left\">unless</td><td style=\"text-align:left\">String</td><td style=\"text-align:left\">和condition相反</td></tr></tbody></table><ul><li>@CacheEvict<br>删除缓存相关</li></ul><table><thead><tr><th style=\"text-align:left\">属性</th><th style=\"text-align:left\">类型</th><th style=\"text-align:left\">功能</th></tr></thead><tbody><tr><td style=\"text-align:left\">value</td><td style=\"text-align:left\">String[]</td><td style=\"text-align:left\">缓存的名称 和cacheNames功能一样</td></tr><tr><td style=\"text-align:left\">cacheNames</td><td style=\"text-align:left\">String[]</td><td style=\"text-align:left\">缓存的名称和value功能一样</td></tr><tr><td style=\"text-align:left\">key</td><td style=\"text-align:left\">String</td><td style=\"text-align:left\">缓存key的值、默认是以所有的参数作为key、也可以直接配置keyGenerator</td></tr><tr><td style=\"text-align:left\">keyGenerator</td><td style=\"text-align:left\">String</td><td style=\"text-align:left\">缓存key的生成器</td></tr><tr><td style=\"text-align:left\">cacheManager</td><td style=\"text-align:left\">String</td><td style=\"text-align:left\">配置使用那个缓存管理器、和cacheResolver排斥</td></tr><tr><td style=\"text-align:left\">cacheResolver</td><td style=\"text-align:left\">String</td><td style=\"text-align:left\">定义使用那个拦截器、和cacheManager互斥</td></tr><tr><td style=\"text-align:left\">condition</td><td style=\"text-align:left\">String</td><td style=\"text-align:left\">根据spel表达式来可以配置什么条件下进行缓存 默认全部缓存</td></tr><tr><td style=\"text-align:left\">allEntries</td><td style=\"text-align:left\">boolean</td><td style=\"text-align:left\">是否删除所有键的缓存 默认不删除</td></tr><tr><td style=\"text-align:left\">beforeInvocation</td><td style=\"text-align:left\">boolean</td><td style=\"text-align:left\">是否在调用此方法前 删除缓存</td></tr></tbody></table><ul><li>@CacheConfig<br>在类级别统一的配置缓存公共配置</li></ul><table><thead><tr><th style=\"text-align:left\">属性</th><th style=\"text-align:left\">类型</th><th style=\"text-align:left\">功能</th></tr></thead><tbody><tr><td style=\"text-align:left\">cacheNames</td><td style=\"text-align:left\">String[]</td><td style=\"text-align:left\">缓存的名称和value功能一样</td></tr><tr><td style=\"text-align:left\">keyGenerator</td><td style=\"text-align:left\">String</td><td style=\"text-align:left\">缓存key的生成器</td></tr><tr><td style=\"text-align:left\">cacheManager</td><td style=\"text-align:left\">String</td><td style=\"text-align:left\">配置使用那个缓存管理器、和cacheResolver排斥</td></tr><tr><td style=\"text-align:left\">cacheResolver</td><td style=\"text-align:left\">String</td><td style=\"text-align:left\">定义使用那个拦截器、和cacheManager互斥</td></tr></tbody></table><ul><li>@EnableCaching<br>开启缓存以及缓存的全局配置</li></ul><table><thead><tr><th style=\"text-align:left\">属性</th><th style=\"text-align:left\">类型</th><th style=\"text-align:left\">功能</th></tr></thead><tbody><tr><td style=\"text-align:left\">proxyTargetClass</td><td style=\"text-align:left\">boolean</td><td style=\"text-align:left\">是否要基于cglib生成代理去实现缓存</td></tr><tr><td style=\"text-align:left\">mode</td><td style=\"text-align:left\">AdviceMode</td><td style=\"text-align:left\">配置那种模式去实现缓存、默认是AdviceMode.PROXY 可以切换为 AdviceMode#ASPECTJ</td></tr><tr><td style=\"text-align:left\">order</td><td style=\"text-align:left\">int</td><td style=\"text-align:left\">设置缓存管理器执行的顺序</td></tr></tbody></table><ul><li>@Caching<br>对多个缓存组的配置</li></ul><table><thead><tr><th style=\"text-align:left\">属性</th><th style=\"text-align:left\">类型</th><th style=\"text-align:left\">功能</th></tr></thead><tbody><tr><td style=\"text-align:left\">cacheable</td><td style=\"text-align:left\">Cacheable</td><td style=\"text-align:left\">配置获取缓存相关的配置</td></tr><tr><td style=\"text-align:left\">put</td><td style=\"text-align:left\">CachePut</td><td style=\"text-align:left\">配置如何更新缓存的相关配置</td></tr><tr><td style=\"text-align:left\">evict</td><td style=\"text-align:left\">CacheEvict</td><td style=\"text-align:left\">配置如何删除缓存的相关配置</td></tr></tbody></table><h4 id=\"实战\"><a href=\"#实战\" class=\"headerlink\" title=\"实战\"></a>实战</h4><h5 id=\"gradle-依赖\"><a href=\"#gradle-依赖\" class=\"headerlink\" title=\"gradle 依赖\"></a>gradle 依赖</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">compile(&apos;org.springframework.boot:spring-boot-starter-web&apos;)</span><br><span class=\"line\">compile(&apos;org.springframework.boot:spring-boot-starter-data-redis&apos;)</span><br><span class=\"line\">compile(&apos;org.springframework.boot:spring-boot-starter-cache&apos;)</span><br><span class=\"line\">testCompile(&apos;org.springframework.boot:spring-boot-starter-test&apos;)</span><br></pre></td></tr></table></figure>\n<h5 id=\"启动引导开启缓存\"><a href=\"#启动引导开启缓存\" class=\"headerlink\" title=\"启动引导开启缓存\"></a>启动引导开启缓存</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.ming;</span><br><span class=\"line\"></span><br><span class=\"line\">import org.springframework.boot.SpringApplication;</span><br><span class=\"line\">import org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class=\"line\">import org.springframework.cache.annotation.EnableCaching;</span><br><span class=\"line\"></span><br><span class=\"line\">@SpringBootApplication</span><br><span class=\"line\">//开启缓存 </span><br><span class=\"line\">@EnableCaching</span><br><span class=\"line\">public class Start &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        SpringApplication.run(Start.class,args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">spring:</span><br><span class=\"line\">  redis:</span><br><span class=\"line\">    host: &lt;ip&gt;</span><br><span class=\"line\">    port: &lt;port&gt;</span><br><span class=\"line\">    password: &lt;password&gt;</span><br><span class=\"line\">  cache:</span><br><span class=\"line\">    # spring cache 缓存类型为redis  也可以是其他的实现 </span><br><span class=\"line\">    type: redis</span><br></pre></td></tr></table></figure>\n<h5 id=\"使用cache\"><a href=\"#使用cache\" class=\"headerlink\" title=\"使用cache\"></a>使用cache</h5><h6 id=\"模拟带缓存的service\"><a href=\"#模拟带缓存的service\" class=\"headerlink\" title=\"模拟带缓存的service\"></a>模拟带缓存的service</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.ming;</span><br><span class=\"line\"></span><br><span class=\"line\">import org.springframework.cache.annotation.CacheConfig;</span><br><span class=\"line\">import org.springframework.cache.annotation.CacheEvict;</span><br><span class=\"line\">import org.springframework.cache.annotation.CachePut;</span><br><span class=\"line\">import org.springframework.cache.annotation.Cacheable;</span><br><span class=\"line\">import org.springframework.stereotype.Service;</span><br><span class=\"line\"></span><br><span class=\"line\">@Service</span><br><span class=\"line\">//公共配置  可以在类上注释 注释本类的 缓存相关公共配置</span><br><span class=\"line\">//@CacheConfig(cacheNames = TestCacheService.CACHE_KEY)</span><br><span class=\"line\">public class TestCacheService &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static final String CACHE_KEY = &quot;test-cache&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 获取信息  第二次访问会取缓存</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @author ming</span><br><span class=\"line\">     * @date 2018-07-11 17:41:47</span><br><span class=\"line\">     */</span><br><span class=\"line\">    @Cacheable(cacheNames = CACHE_KEY)</span><br><span class=\"line\">    public String testCache(String id) &#123;</span><br><span class=\"line\">        return getString(id);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 更新信息   更新缓存</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @author ming</span><br><span class=\"line\">     * @date 2018-07-12 09:50:53</span><br><span class=\"line\">     */</span><br><span class=\"line\">    @CachePut(cacheNames = CACHE_KEY)</span><br><span class=\"line\">    public String testCachePut(String id) &#123;</span><br><span class=\"line\">        return getString(id + &quot;update&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 清除缓存</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @author ming</span><br><span class=\"line\">     * @date 2018-07-12 09:51:22</span><br><span class=\"line\">     */</span><br><span class=\"line\">    @CacheEvict(cacheNames = CACHE_KEY)</span><br><span class=\"line\">    public void removeCache(String id) &#123;</span><br><span class=\"line\">        System.out.println(&quot;删除缓存 &quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 获取string 模拟调用方法</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @author ming</span><br><span class=\"line\">     * @date 2018-07-11 17:41:58</span><br><span class=\"line\">     */</span><br><span class=\"line\">    private String getString(String id) &#123;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            Thread.sleep(3000L);</span><br><span class=\"line\">        &#125; catch (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return id + &quot;load&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h6 id=\"测试用例\"><a href=\"#测试用例\" class=\"headerlink\" title=\"测试用例\"></a>测试用例</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.ming;</span><br><span class=\"line\"></span><br><span class=\"line\">import org.junit.Test;</span><br><span class=\"line\">import org.junit.runner.RunWith;</span><br><span class=\"line\">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\">import org.springframework.boot.test.context.SpringBootTest;</span><br><span class=\"line\">import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</span><br><span class=\"line\"></span><br><span class=\"line\">@RunWith(SpringJUnit4ClassRunner.class)</span><br><span class=\"line\">@SpringBootTest(classes = Start.class)</span><br><span class=\"line\">public class TestCache &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Autowired</span><br><span class=\"line\">    private TestCacheService testCacheService;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    public void test() &#123;</span><br><span class=\"line\">        String id = &quot;ming&quot;;</span><br><span class=\"line\">        System.out.println(&quot;第一次访问没有缓存--------&quot;);</span><br><span class=\"line\">        long oneNow = System.currentTimeMillis();</span><br><span class=\"line\">        System.out.println(testCacheService.testCache(id));</span><br><span class=\"line\">        System.out.println(&quot;耗时:&quot; + (System.currentTimeMillis() - oneNow) + &quot;ms&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(&quot;第二次访问有缓存--------&quot;);</span><br><span class=\"line\">        long twoNow = System.currentTimeMillis();</span><br><span class=\"line\">        System.out.println(testCacheService.testCache(id));</span><br><span class=\"line\">        System.out.println(&quot;耗时:&quot; + (System.currentTimeMillis() - twoNow) + &quot;ms&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(&quot;更新缓存信息--------&quot;);</span><br><span class=\"line\">        long threeNow = System.currentTimeMillis();</span><br><span class=\"line\">        System.out.println(testCacheService.testCachePut(id));</span><br><span class=\"line\">        System.out.println(&quot;耗时:&quot; + (System.currentTimeMillis() - threeNow) + &quot;ms&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(&quot;获取更新后的缓存信息-------&quot;);</span><br><span class=\"line\">        long fourNow = System.currentTimeMillis();</span><br><span class=\"line\">        System.out.println(testCacheService.testCache(id));</span><br><span class=\"line\">        System.out.println(&quot;耗时:&quot; + (System.currentTimeMillis() - fourNow) + &quot;ms&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(&quot;移除缓存------并且调用testCache方法&quot;);</span><br><span class=\"line\">        testCacheService.removeCache(id);</span><br><span class=\"line\">        long fiveNow = System.currentTimeMillis();</span><br><span class=\"line\">        System.out.println(testCacheService.testCache(id));</span><br><span class=\"line\">        System.out.println(&quot;耗时:&quot; + (System.currentTimeMillis() - fiveNow) + &quot;ms&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"坑\"><a href=\"#坑\" class=\"headerlink\" title=\"坑\"></a>坑</h4><ul>\n<li>@Cacheable 、@CachePut、@CacheEvict 必须要有 cacheNames  </li>\n<li>注解必须放在public修饰的方法上   </li>\n<li>如果只是获取缓存使用@Cacheable即可 如果要更新数据库并且更新缓存一定要使用@CachePut 否则@Cacheable会出现脏读   </li>\n</ul>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><p>spring cache 为缓存提供了一套简单快捷的方案 可以在旧的功能上很快速添加上缓存<br>具体缓存的实现 也有更多的选择 也可以自己实现spring cache的缓存管理器皿 来实现自定义的缓存<br>本身提供的有很多 例如Generic、JCache (JSR-107)、EhCache 2.x、Hazelcast、Infinispan、Redis、Guava、Simple<br>按需选择 如果没有 可以自己实现cacheManager去做</p>","site":{"data":{}},"excerpt":"","more":"<h4 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h4><p>cache可以说是后端提高响应速度、承载能力的标准套路了<br>spring boot中提供spring boot starter cache 组件 配合spring boot starter redis 或者其他缓存组件 可以很简单的使用缓存</p><h4 id=\"spring-cache-介绍\"><a href=\"#spring-cache-介绍\" class=\"headerlink\" title=\"spring cache 介绍\"></a>spring cache 介绍</h4><p>一套基于spring aop的方式 为函数添加缓存的 框架</p><h5 id=\"支持的缓存类型\"><a href=\"#支持的缓存类型\" class=\"headerlink\" title=\"支持的缓存类型\"></a>支持的缓存类型</h5><ul><li>Generic</li><li>JCache (JSR-107)</li><li>EhCache 2.x</li><li>Hazelcast</li><li>Infinispan</li><li>Redis</li><li>Guava</li><li>Simple<br>如果不满足上述的缓存方案 可以自实现 cacheManager<h5 id=\"注解介绍\"><a href=\"#注解介绍\" class=\"headerlink\" title=\"注解介绍\"></a>注解介绍</h5></li><li>@Cacheable<br>获取缓存 如果有缓存 直接返回</li></ul><table><thead><tr><th style=\"text-align:left\">属性</th><th style=\"text-align:left\">类型</th><th style=\"text-align:left\">功能</th></tr></thead><tbody><tr><td style=\"text-align:left\">value</td><td style=\"text-align:left\">String[]</td><td style=\"text-align:left\">缓存的名称 和cacheNames功能一样</td></tr><tr><td style=\"text-align:left\">cacheNames</td><td style=\"text-align:left\">String[]</td><td style=\"text-align:left\">缓存的名称和value功能一样</td></tr><tr><td style=\"text-align:left\">key</td><td style=\"text-align:left\">String</td><td style=\"text-align:left\">缓存key的值、默认是以所有的参数作为key、也可以直接配置keyGenerator</td></tr><tr><td style=\"text-align:left\">keyGenerator</td><td style=\"text-align:left\">String</td><td style=\"text-align:left\">缓存key的生成器</td></tr><tr><td style=\"text-align:left\">cacheManager</td><td style=\"text-align:left\">String</td><td style=\"text-align:left\">配置使用那个缓存管理器、和cacheResolver排斥</td></tr><tr><td style=\"text-align:left\">cacheResolver</td><td style=\"text-align:left\">String</td><td style=\"text-align:left\">定义使用那个拦截器、和cacheManager互斥</td></tr><tr><td style=\"text-align:left\">condition</td><td style=\"text-align:left\">String</td><td style=\"text-align:left\">根据spel表达式来可以配置什么条件下进行缓存 默认全部缓存</td></tr><tr><td style=\"text-align:left\">unless</td><td style=\"text-align:left\">String</td><td style=\"text-align:left\">和condition相反</td></tr><tr><td style=\"text-align:left\">sync</td><td style=\"text-align:left\">boolean</td><td style=\"text-align:left\">是否开启同步功能、默认不开启</td></tr></tbody></table><ul><li>@CachePut<br>执行并且更新缓存相关 不管如何 肯定会执行方法 然后返回 这样可以更新缓存的内容</li></ul><table><thead><tr><th style=\"text-align:left\">属性</th><th style=\"text-align:left\">类型</th><th style=\"text-align:left\">功能</th></tr></thead><tbody><tr><td style=\"text-align:left\">value</td><td style=\"text-align:left\">String[]</td><td style=\"text-align:left\">缓存的名称 和cacheNames功能一样</td></tr><tr><td style=\"text-align:left\">cacheNames</td><td style=\"text-align:left\">String[]</td><td style=\"text-align:left\">缓存的名称和value功能一样</td></tr><tr><td style=\"text-align:left\">key</td><td style=\"text-align:left\">String</td><td style=\"text-align:left\">缓存key的值、默认是以所有的参数作为key、也可以直接配置keyGenerator</td></tr><tr><td style=\"text-align:left\">keyGenerator</td><td style=\"text-align:left\">String</td><td style=\"text-align:left\">缓存key的生成器</td></tr><tr><td style=\"text-align:left\">cacheManager</td><td style=\"text-align:left\">String</td><td style=\"text-align:left\">配置使用那个缓存管理器、和cacheResolver排斥</td></tr><tr><td style=\"text-align:left\">cacheResolver</td><td style=\"text-align:left\">String</td><td style=\"text-align:left\">定义使用那个拦截器、和cacheManager互斥</td></tr><tr><td style=\"text-align:left\">condition</td><td style=\"text-align:left\">String</td><td style=\"text-align:left\">根据spel表达式来可以配置什么条件下进行缓存 默认全部缓存</td></tr><tr><td style=\"text-align:left\">unless</td><td style=\"text-align:left\">String</td><td style=\"text-align:left\">和condition相反</td></tr></tbody></table><ul><li>@CacheEvict<br>删除缓存相关</li></ul><table><thead><tr><th style=\"text-align:left\">属性</th><th style=\"text-align:left\">类型</th><th style=\"text-align:left\">功能</th></tr></thead><tbody><tr><td style=\"text-align:left\">value</td><td style=\"text-align:left\">String[]</td><td style=\"text-align:left\">缓存的名称 和cacheNames功能一样</td></tr><tr><td style=\"text-align:left\">cacheNames</td><td style=\"text-align:left\">String[]</td><td style=\"text-align:left\">缓存的名称和value功能一样</td></tr><tr><td style=\"text-align:left\">key</td><td style=\"text-align:left\">String</td><td style=\"text-align:left\">缓存key的值、默认是以所有的参数作为key、也可以直接配置keyGenerator</td></tr><tr><td style=\"text-align:left\">keyGenerator</td><td style=\"text-align:left\">String</td><td style=\"text-align:left\">缓存key的生成器</td></tr><tr><td style=\"text-align:left\">cacheManager</td><td style=\"text-align:left\">String</td><td style=\"text-align:left\">配置使用那个缓存管理器、和cacheResolver排斥</td></tr><tr><td style=\"text-align:left\">cacheResolver</td><td style=\"text-align:left\">String</td><td style=\"text-align:left\">定义使用那个拦截器、和cacheManager互斥</td></tr><tr><td style=\"text-align:left\">condition</td><td style=\"text-align:left\">String</td><td style=\"text-align:left\">根据spel表达式来可以配置什么条件下进行缓存 默认全部缓存</td></tr><tr><td style=\"text-align:left\">allEntries</td><td style=\"text-align:left\">boolean</td><td style=\"text-align:left\">是否删除所有键的缓存 默认不删除</td></tr><tr><td style=\"text-align:left\">beforeInvocation</td><td style=\"text-align:left\">boolean</td><td style=\"text-align:left\">是否在调用此方法前 删除缓存</td></tr></tbody></table><ul><li>@CacheConfig<br>在类级别统一的配置缓存公共配置</li></ul><table><thead><tr><th style=\"text-align:left\">属性</th><th style=\"text-align:left\">类型</th><th style=\"text-align:left\">功能</th></tr></thead><tbody><tr><td style=\"text-align:left\">cacheNames</td><td style=\"text-align:left\">String[]</td><td style=\"text-align:left\">缓存的名称和value功能一样</td></tr><tr><td style=\"text-align:left\">keyGenerator</td><td style=\"text-align:left\">String</td><td style=\"text-align:left\">缓存key的生成器</td></tr><tr><td style=\"text-align:left\">cacheManager</td><td style=\"text-align:left\">String</td><td style=\"text-align:left\">配置使用那个缓存管理器、和cacheResolver排斥</td></tr><tr><td style=\"text-align:left\">cacheResolver</td><td style=\"text-align:left\">String</td><td style=\"text-align:left\">定义使用那个拦截器、和cacheManager互斥</td></tr></tbody></table><ul><li>@EnableCaching<br>开启缓存以及缓存的全局配置</li></ul><table><thead><tr><th style=\"text-align:left\">属性</th><th style=\"text-align:left\">类型</th><th style=\"text-align:left\">功能</th></tr></thead><tbody><tr><td style=\"text-align:left\">proxyTargetClass</td><td style=\"text-align:left\">boolean</td><td style=\"text-align:left\">是否要基于cglib生成代理去实现缓存</td></tr><tr><td style=\"text-align:left\">mode</td><td style=\"text-align:left\">AdviceMode</td><td style=\"text-align:left\">配置那种模式去实现缓存、默认是AdviceMode.PROXY 可以切换为 AdviceMode#ASPECTJ</td></tr><tr><td style=\"text-align:left\">order</td><td style=\"text-align:left\">int</td><td style=\"text-align:left\">设置缓存管理器执行的顺序</td></tr></tbody></table><ul><li>@Caching<br>对多个缓存组的配置</li></ul><table><thead><tr><th style=\"text-align:left\">属性</th><th style=\"text-align:left\">类型</th><th style=\"text-align:left\">功能</th></tr></thead><tbody><tr><td style=\"text-align:left\">cacheable</td><td style=\"text-align:left\">Cacheable</td><td style=\"text-align:left\">配置获取缓存相关的配置</td></tr><tr><td style=\"text-align:left\">put</td><td style=\"text-align:left\">CachePut</td><td style=\"text-align:left\">配置如何更新缓存的相关配置</td></tr><tr><td style=\"text-align:left\">evict</td><td style=\"text-align:left\">CacheEvict</td><td style=\"text-align:left\">配置如何删除缓存的相关配置</td></tr></tbody></table><h4 id=\"实战\"><a href=\"#实战\" class=\"headerlink\" title=\"实战\"></a>实战</h4><h5 id=\"gradle-依赖\"><a href=\"#gradle-依赖\" class=\"headerlink\" title=\"gradle 依赖\"></a>gradle 依赖</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">compile(&apos;org.springframework.boot:spring-boot-starter-web&apos;)</span><br><span class=\"line\">compile(&apos;org.springframework.boot:spring-boot-starter-data-redis&apos;)</span><br><span class=\"line\">compile(&apos;org.springframework.boot:spring-boot-starter-cache&apos;)</span><br><span class=\"line\">testCompile(&apos;org.springframework.boot:spring-boot-starter-test&apos;)</span><br></pre></td></tr></table></figure>\n<h5 id=\"启动引导开启缓存\"><a href=\"#启动引导开启缓存\" class=\"headerlink\" title=\"启动引导开启缓存\"></a>启动引导开启缓存</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.ming;</span><br><span class=\"line\"></span><br><span class=\"line\">import org.springframework.boot.SpringApplication;</span><br><span class=\"line\">import org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class=\"line\">import org.springframework.cache.annotation.EnableCaching;</span><br><span class=\"line\"></span><br><span class=\"line\">@SpringBootApplication</span><br><span class=\"line\">//开启缓存 </span><br><span class=\"line\">@EnableCaching</span><br><span class=\"line\">public class Start &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        SpringApplication.run(Start.class,args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">spring:</span><br><span class=\"line\">  redis:</span><br><span class=\"line\">    host: &lt;ip&gt;</span><br><span class=\"line\">    port: &lt;port&gt;</span><br><span class=\"line\">    password: &lt;password&gt;</span><br><span class=\"line\">  cache:</span><br><span class=\"line\">    # spring cache 缓存类型为redis  也可以是其他的实现 </span><br><span class=\"line\">    type: redis</span><br></pre></td></tr></table></figure>\n<h5 id=\"使用cache\"><a href=\"#使用cache\" class=\"headerlink\" title=\"使用cache\"></a>使用cache</h5><h6 id=\"模拟带缓存的service\"><a href=\"#模拟带缓存的service\" class=\"headerlink\" title=\"模拟带缓存的service\"></a>模拟带缓存的service</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.ming;</span><br><span class=\"line\"></span><br><span class=\"line\">import org.springframework.cache.annotation.CacheConfig;</span><br><span class=\"line\">import org.springframework.cache.annotation.CacheEvict;</span><br><span class=\"line\">import org.springframework.cache.annotation.CachePut;</span><br><span class=\"line\">import org.springframework.cache.annotation.Cacheable;</span><br><span class=\"line\">import org.springframework.stereotype.Service;</span><br><span class=\"line\"></span><br><span class=\"line\">@Service</span><br><span class=\"line\">//公共配置  可以在类上注释 注释本类的 缓存相关公共配置</span><br><span class=\"line\">//@CacheConfig(cacheNames = TestCacheService.CACHE_KEY)</span><br><span class=\"line\">public class TestCacheService &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static final String CACHE_KEY = &quot;test-cache&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 获取信息  第二次访问会取缓存</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @author ming</span><br><span class=\"line\">     * @date 2018-07-11 17:41:47</span><br><span class=\"line\">     */</span><br><span class=\"line\">    @Cacheable(cacheNames = CACHE_KEY)</span><br><span class=\"line\">    public String testCache(String id) &#123;</span><br><span class=\"line\">        return getString(id);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 更新信息   更新缓存</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @author ming</span><br><span class=\"line\">     * @date 2018-07-12 09:50:53</span><br><span class=\"line\">     */</span><br><span class=\"line\">    @CachePut(cacheNames = CACHE_KEY)</span><br><span class=\"line\">    public String testCachePut(String id) &#123;</span><br><span class=\"line\">        return getString(id + &quot;update&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 清除缓存</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @author ming</span><br><span class=\"line\">     * @date 2018-07-12 09:51:22</span><br><span class=\"line\">     */</span><br><span class=\"line\">    @CacheEvict(cacheNames = CACHE_KEY)</span><br><span class=\"line\">    public void removeCache(String id) &#123;</span><br><span class=\"line\">        System.out.println(&quot;删除缓存 &quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 获取string 模拟调用方法</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @author ming</span><br><span class=\"line\">     * @date 2018-07-11 17:41:58</span><br><span class=\"line\">     */</span><br><span class=\"line\">    private String getString(String id) &#123;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            Thread.sleep(3000L);</span><br><span class=\"line\">        &#125; catch (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return id + &quot;load&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h6 id=\"测试用例\"><a href=\"#测试用例\" class=\"headerlink\" title=\"测试用例\"></a>测试用例</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.ming;</span><br><span class=\"line\"></span><br><span class=\"line\">import org.junit.Test;</span><br><span class=\"line\">import org.junit.runner.RunWith;</span><br><span class=\"line\">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\">import org.springframework.boot.test.context.SpringBootTest;</span><br><span class=\"line\">import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</span><br><span class=\"line\"></span><br><span class=\"line\">@RunWith(SpringJUnit4ClassRunner.class)</span><br><span class=\"line\">@SpringBootTest(classes = Start.class)</span><br><span class=\"line\">public class TestCache &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Autowired</span><br><span class=\"line\">    private TestCacheService testCacheService;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    public void test() &#123;</span><br><span class=\"line\">        String id = &quot;ming&quot;;</span><br><span class=\"line\">        System.out.println(&quot;第一次访问没有缓存--------&quot;);</span><br><span class=\"line\">        long oneNow = System.currentTimeMillis();</span><br><span class=\"line\">        System.out.println(testCacheService.testCache(id));</span><br><span class=\"line\">        System.out.println(&quot;耗时:&quot; + (System.currentTimeMillis() - oneNow) + &quot;ms&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(&quot;第二次访问有缓存--------&quot;);</span><br><span class=\"line\">        long twoNow = System.currentTimeMillis();</span><br><span class=\"line\">        System.out.println(testCacheService.testCache(id));</span><br><span class=\"line\">        System.out.println(&quot;耗时:&quot; + (System.currentTimeMillis() - twoNow) + &quot;ms&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(&quot;更新缓存信息--------&quot;);</span><br><span class=\"line\">        long threeNow = System.currentTimeMillis();</span><br><span class=\"line\">        System.out.println(testCacheService.testCachePut(id));</span><br><span class=\"line\">        System.out.println(&quot;耗时:&quot; + (System.currentTimeMillis() - threeNow) + &quot;ms&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(&quot;获取更新后的缓存信息-------&quot;);</span><br><span class=\"line\">        long fourNow = System.currentTimeMillis();</span><br><span class=\"line\">        System.out.println(testCacheService.testCache(id));</span><br><span class=\"line\">        System.out.println(&quot;耗时:&quot; + (System.currentTimeMillis() - fourNow) + &quot;ms&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(&quot;移除缓存------并且调用testCache方法&quot;);</span><br><span class=\"line\">        testCacheService.removeCache(id);</span><br><span class=\"line\">        long fiveNow = System.currentTimeMillis();</span><br><span class=\"line\">        System.out.println(testCacheService.testCache(id));</span><br><span class=\"line\">        System.out.println(&quot;耗时:&quot; + (System.currentTimeMillis() - fiveNow) + &quot;ms&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"坑\"><a href=\"#坑\" class=\"headerlink\" title=\"坑\"></a>坑</h4><ul>\n<li>@Cacheable 、@CachePut、@CacheEvict 必须要有 cacheNames  </li>\n<li>注解必须放在public修饰的方法上   </li>\n<li>如果只是获取缓存使用@Cacheable即可 如果要更新数据库并且更新缓存一定要使用@CachePut 否则@Cacheable会出现脏读   </li>\n</ul>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><p>spring cache 为缓存提供了一套简单快捷的方案 可以在旧的功能上很快速添加上缓存<br>具体缓存的实现 也有更多的选择 也可以自己实现spring cache的缓存管理器皿 来实现自定义的缓存<br>本身提供的有很多 例如Generic、JCache (JSR-107)、EhCache 2.x、Hazelcast、Infinispan、Redis、Guava、Simple<br>按需选择 如果没有 可以自己实现cacheManager去做</p>"},{"title":"springCloudConfigServer的git、svn版本实现及相关实战案例","comments":1,"abbrlink":"7ced3fa5","date":"2018-02-27T07:01:39.000Z","_content":"### 配置中心\n在分布式 环境中 配置中心是必不可少的一个组件 不管是国内的 disconf 、Apollo之类 还是spring cloud的config server 都是一个套路 \n将配置统一管理 通过namespace、项目名称之类的 进行区分 加入一些操作审计、配置加密之类的功能  有的是基于数据库、有的是基于文件+版本管理\n由于技术栈和个人习惯  我个人更加喜欢spring 社区的config server  基于文件和版本管理来实现的配置 可以很方便的管理配置的版本和内容 \n\n个人觉得 在整个集群中管踏马是什么配置 都可以丢进配置中心进行统一管理 例如app的打包配置、集群的参数配置等等 反正只要是配置都可以放进去 \n#### spring cloud config server \n这个是属于spring cloud 项目中的一个组件  \n它基于 svn或者git 去管理配置文件 提供各种各样的配置文件的管理 、提供敏感配置加密(对称、非对称都支持)、访问控制等等  \njava中使用 config server client 客户端读取配置直接提供不停机更新配置功能 等等  \n非java项目 可以通过http接口获取配置  \n#### 需要技能\n* git、svn熟练 \n* java相关技能熟练 例如maven之类的\n* docker 熟练 涉及到项目打包成docker image \n\n#### git版本\ngit版本就简单了 毕竟git好用 大部分书籍、博客都是介绍git版本的 \n1：新建maven java项目\npom配置\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xmlns=\"http://maven.apache.org/POM/4.0.0\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <parent>\n        <artifactId>parent</artifactId>\n        <groupId>ming</groupId>\n        <version>1.0.0</version>\n    </parent>\n    <modelVersion>4.0.0</modelVersion>\n\n    <artifactId>configServer</artifactId>\n\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework.cloud</groupId>\n            <artifactId>spring-cloud-config-server</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.cloud</groupId>\n            <artifactId>spring-cloud-starter-eureka</artifactId>\n        </dependency>\n        <!-- <dependency>\n             <groupId>org.springframework.boot</groupId>\n             <artifactId>spring-boot-starter-security</artifactId>\n         </dependency>-->\n    </dependencies>\n</project>\n```\n2:application.yml配置\n```\nspring:\n  application:\n    name: config\n  cloud:\n    config:\n      server:\n        git:\n          uri: \"https://github.com/xuxianyu/springcloud.git\"\n          #仓库的搜索路径 这里可以指定 git的目录  config/spring-repo/{目录} 这种方式就可以按照项目区分配置目录了 \n          search-paths: config/spring-repo/ming\n#config server 访问账户密码\nsecurity:\n  user:\n    name: ming\n    password: ming\n#设定 对称加密密钥\n#encrypt:\n#  key: ming\n          #username: 18120580001@163.com\n          #password:\n```\n3：配置启动类\n```\npackage com.ming;\n\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.boot.builder.SpringApplicationBuilder;\nimport org.springframework.cloud.client.discovery.EnableDiscoveryClient;\nimport org.springframework.cloud.config.server.EnableConfigServer;\n\n/**\n * config server 启动类\n *\n * @author ming\n * @date 2017-10-30 11:18\n */\n//开启config 服务\n@EnableConfigServer\n//注册到注册中心\n@EnableDiscoveryClient\n@SpringBootApplication\npublic class StartConfig {\n\n    public static void main(String[] args) {\n        new SpringApplicationBuilder(StartConfig.class).web(true).run(args);\n    }\n}\n```\n4：访问配置 \n在git仓库中建立ming/config-dev.yaml  master分支\n```\nname: ming\n```\n浏览器访问 http://localhost:8888/master/config-dev.yaml\n\n实例地址: https://github.com/xuxianyu/springcloud/tree/master/configServer\n#### svn版本\n1:新建maven java项目 \npom配置\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>com.onlyedu</groupId>\n    <artifactId>configServer</artifactId>\n    <version>1.0-SNAPSHOT</version>\n    <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>1.5.1.RELEASE</version>\n    </parent>\n    <properties>\n        <!-- spring cloud version -->\n        <spring.cloud.version>Camden.SR5</spring.cloud.version>\n        <!-- svnkit version -->\n        <svnkit.version>1.9.0</svnkit.version>\n    </properties>\n\n    <!--仓库-->\n    <repositories>\n        <!--aliyun repository-->\n        <repository>\n            <id>aliyun</id>\n            <name>aliyun nexus repository</name>\n            <url>http://maven.aliyun.com/nexus/content/groups/public/</url>\n        </repository>\n\n\n    </repositories>\n\n\n    <dependencies>\n        <!-- spring cloud  config -->\n        <dependency>\n            <groupId>org.springframework.cloud</groupId>\n            <artifactId>spring-cloud-config-server</artifactId>\n        </dependency>\n        <!-- spring cloud config svn repository -->\n        <dependency>\n            <groupId>org.tmatesoft.svnkit</groupId>\n            <artifactId>svnkit</artifactId>\n            <version>${svnkit.version}</version>\n        </dependency>\n        <!-- spring  boot security 访问控制 -->\n         <dependency>\n             <groupId>org.springframework.boot</groupId>\n             <artifactId>spring-boot-starter-security</artifactId>\n         </dependency>\n    </dependencies>\n\n\n    <dependencyManagement>\n        <!--spring cloud parent pom-->\n        <dependencies>\n            <dependency>\n                <groupId>org.springframework.cloud</groupId>\n                <artifactId>spring-cloud-dependencies</artifactId>\n                <version>${spring.cloud.version}</version>\n                <type>pom</type>\n                <scope>import</scope>\n            </dependency>\n        </dependencies>\n    </dependencyManagement>\n\n\n    <!--构建插件-->\n    <build>\n\n        <plugins>\n            <!--docker 插件-->\n            <!--<plugin>\n                <groupId>com.spotify</groupId>\n                <artifactId>docker-maven-plugin</artifactId>\n                <version>${maven.docker.version}</version>\n                <configuration>\n                    &lt;!&ndash;镜像名称&ndash;&gt;\n                    <imageName>${docker.image.prefix}/${project.artifactId}</imageName>\n                    &lt;!&ndash;docker file位置&ndash;&gt;\n                    <dockerDirectory>src/main/docker</dockerDirectory>\n                    <resources>\n                        <resource>\n                            &lt;!&ndash; 编译jar路径 &ndash;&gt;\n                            <targetPath>/</targetPath>\n                            &lt;!&ndash;编译jar 所在文件夹&ndash;&gt;\n                            <directory>${project.build.directory}</directory>\n                            &lt;!&ndash;编译的jar 名称&ndash;&gt;\n                            <include>${project.build.finalName}.jar</include>\n                        </resource>\n                    </resources>\n                </configuration>\n            </plugin>-->\n            <!--指定编译jdk版本 默认为1.5-->\n            <plugin>\n                <artifactId>maven-compiler-plugin</artifactId>\n                <configuration>\n                    <source>1.8</source>\n                    <target>1.8</target>\n                    <encoding>UTF-8</encoding>\n                </configuration>\n            </plugin>\n\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n            </plugin>\n\n            <!-- 解决资源文件的编码问题 -->\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-resources-plugin</artifactId>\n                <configuration>\n                    <encoding>UTF-8</encoding>\n                </configuration>\n            </plugin>\n\n\n        </plugins>\n    </build>\n</project>\n```\n2：配置 application.yml\n```\n# default port\nserver:\n  port: 8888\nspring:\n  cloud:\n    config:\n      server:\n        svn:\n          # svn 配置仓库地址\n          uri: https://repo.xujiuming.com/svn/ming/trunk/confDir\n          # svn 访问账户\n          username: ming\n          # svn 访问密码\n          password: mingpwd\n          # 这个设置是访问时候没有带label默认的label  用处不大\n          default-label: trunk\n  # 使用 svn 作仓库  必须要填写\n  profiles:\n    active: subversion\n\n# 访问控制\nsecurity:\n  user:\n    name: ming\n    password: ming\nencrypt:\n  # rsa 密钥 设定 使用resources 下的 configServer.keystore\n  key-store:\n    location: configServer.keystore\n    alias: configServer\n    #  生成 密钥时候的密码\n    password: ming2\n    # 生成 密钥时候的签名\n    secret: ming1\n```\n3：生成敏感数据密钥包\n必须替换jce相关jar 或者直接使用我选择的docker 镜像 那个镜像是替换好jce相关jar包的\n\n因为 config server 使用的是aes256 加密 所以必须替换jce 相关jar \n就算使用rsa 加密方式 也是需要jce相关jar 的  因为他还是用的aes256加密\nrsa 加密方式配置\n* 生成 rsa 密钥包  直接到控制台执行即可  使用的是jdk 的keytool \n```\nconfigserver rsa 秘钥生成命令 有效时间 10000天\nkeytool -genkeypair -alias configServer -keyalg RSA \\\n-dname \"CN=ming,OU=ming,O=ming,L=ming,ST=ming,C=ming\" \\\n-keypass ming1 \\\n-keystore configServer.keystore \\\n-storepass ming2 \\\n-validity 10000 \\\n```\n配置中使用 数据加密\n* 使用加密字符串替换 原始字符串\n```\n访问 configServer的 {[/encrypt],methods=[POST]} 接口  参数为要加密的字符串  返回加密字符串\n例如 加密前 字符串a   通过接口获取加密后字符串 b\n在a配置的地方 使用 {cipher}b  替换a  即可 \n加密前\npasswd=a\n加密后\npasswd={cipher}b  \n```\n将生成的configServer.keystore 文件复制到resources目录中去\n4:配置spring boot 项目启动类\n```\npackage com.ming;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.cloud.config.server.EnableConfigServer;\n\n/** config server start class\n *\n * @author  ming\n * @date  2017-12-06 10:08\n * */\n@EnableConfigServer\n@SpringBootApplication\npublic class StartConfigServer {\n\n    public static void main(String[] args) {\n        SpringApplication.run(StartConfigServer.class,args);\n    }\n}\n\n```\n5:配置dockerfile\n```\nFROM docker.io/fabric8/java-alpine-openjdk8-jdk\nMAINTAINER \"ming\"\n\n# create  workspace\nRUN  mkdir /workspace\n# copy app.jar\nCOPY target/configServer-1.0-SNAPSHOT.jar /workspace\n# open port\nEXPOSE 8888\n# 运行jar\nCMD  java -jar /workspace/configServer-1.0-SNAPSHOT.jar\n```\n6:打包成docker\n```\nmvn package \nsudo docker build -t config-server-ming:1.0.0 .\n```\n7：启动容器\n```\nsudo docker run -d -p 8888:8888 --name mingconfigserver config-server-ming:1.0.0\n```\n8：访问配置 \n在svn仓库中建立ming/config-dev.yaml \n```\nname: ming\n```\n浏览器访问 http://localhost:8888/ming/config-dev.yaml\n\n实例地址: https://github.com/xuxianyu/springcloud/tree/master/configServerSvn\n#### 访问配置文件url 详细解释\n参数解释:\n1:git\n在git仓库中目录 配置文件的目录/配置文件前缀-配置文件后缀.配置文件类型  如在svn仓库目录下的ming/app-dev.yaml master分支  那么 master就是label app就是name  profiles就是dev  path就是app-dev.yaml git配置可以通过配置 区分文件夹 不是跟svn一样 把文件夹当作label \n\n```\nname: 前缀\nprofiles: 后缀\nlabel: 分支\npath： 完整文件名\n```\n2:svn\n在svn仓库中目录 配置文件的目录/配置文件前缀-配置文件后缀.配置文件类型  如在svn仓库目录下的ming/app-dev.yaml  那么 ming就是label app就是name  profiles就是dev  path就是app-dev.yaml\n```\nname: 配置文件前缀\nprofiles: 配置文件后缀\nlabel: 文件夹目录名称\npath:配置文件全称包含.后面的类型  \n```\n\n访问properties、yaml、json格式 访问方式  \n/{name}/{profiles:.\\*\\[^-].\\*}   \n/{name}/{profiles}/{label:.*}   \n/{name}-{profiles}.properties  \n/{label}/{name}   \n/{profiles}.properties  \n/{name}-{profiles}.json   \n/{label}/{name}-{profiles}.json   \n\n\n访问非 java适配的配置文件 只能以文本模式 读取\n参考博客地址:http://www.voidcn.com/article/p-yhrhfyla-bqr.html\n/{name}/{profile}/{label}/{path}\n\n\n#### 实际案例  \n1：java web项目启动拉取配置中心配置  \n在spring cloud 接入config server的项目中   \nbootstrap.yml 优先级最高 在一启动就会加载 在这里配置 链接config server的配置、链接配置中心的配置 等等 \napplication.yml是在config client 拉取配置后才加载 如果在这里配置链接config server配置不会生效\n\n增加pom依赖\n```\n<dependency>\n   <groupId>org.springframework.cloud</groupId>\n   <artifactId>spring-cloud-starter-config</artifactId>\n</dependency>\n```\n配置bootstrap.yml\n```\nspring:\n cloud:\n     config:\n       # 拉取后缀为dev的配置\n       profile: dev\n       # 拉取master分支的配置\n       label: master\n       username: ming\n       password: ming\n       uri: \"http://localhost:8888\"\n       #开启 以服务方式访问配置中心\n       #discovery:\n       #  enabled: true\n       #  service-id: CONFIG\n       #开启预检\n       #fail-fast: true\n       #重试参数\n       #retry:\n         #重试间隔\n         #multiplier: 2000\n         #下一个间隔\n         #initial-interval: 2000\n         #最大间隔\n         #max-interval: 5000\n         #最大重试次数\n         #max-attempts: 3\n\n application:\n   # 拉取前缀为ming的配置\n   name: ming\n       #fail-fast: true\n```\n在配置仓库配置相关配置\n然后启动项目 打个断点 查询spring env bean 即可查看是否加载到配置中心的配置\n\n\n\n2: docker启动 时候拉取容器环境配置\n思路: 重写镜像的 启动命令 在启动的时候拉取配置中心的配置覆盖容器中的配置文件 \n如果配置中心设置的账户密码 需要获取配置中心 访问接口的token \n浏览器访问一下配置输入账户密码  抓http请求包 报头中有个 Authorization: Basic xxxxxxx 报头 \n使用curl命令获取配置\n```\ncurl -H \"Authorization: Basic xxxxxxx\" http://configServer地址//{name}/{profile}/{label}/{path} > /etc/nginx/conf.d/default.conf\n```\n调整dockerfile中的默认启动命令\nCMD 或者ENTRYPOINT  一定要用&&  不能使用& 这个是并行执行 但是大部分容器是需要先加载完毕配置才能启动的\n```\nENTRYPOINT curl -H \"Authorization: Basic xxxxxxx\" http://configServer地址//{name}/{profile}/{label}/{path} > /etc/nginx/conf.d/default.conf && run.sh\n```\n#### 总结: \n总的来说 spring cloud config server基本满足需求   \n如果需要什么配置操作审计 完全可以在svn或者git操作上进行    \n如果是java项目可以通过引入 spring cloud config client jar来使用  \n非java项目 可以通过http接口获取配置信息   \n关于高可用 就是多启动几台config server 注册到注册中心就行 客户端通过注册中心去访问http接口 \n\n","source":"_posts/spring/springCloudConfigServer的git、svn版本实现及相关实战案例.md","raw":"---\ntitle: springCloudConfigServer的git、svn版本实现及相关实战案例\ncomments: true\ncategories: 实例\ntags:\n  - 实用\n  - spring cloud\n  - 分布式\nabbrlink: 7ced3fa5\ndate: 2018-02-27 15:01:39\n---\n### 配置中心\n在分布式 环境中 配置中心是必不可少的一个组件 不管是国内的 disconf 、Apollo之类 还是spring cloud的config server 都是一个套路 \n将配置统一管理 通过namespace、项目名称之类的 进行区分 加入一些操作审计、配置加密之类的功能  有的是基于数据库、有的是基于文件+版本管理\n由于技术栈和个人习惯  我个人更加喜欢spring 社区的config server  基于文件和版本管理来实现的配置 可以很方便的管理配置的版本和内容 \n\n个人觉得 在整个集群中管踏马是什么配置 都可以丢进配置中心进行统一管理 例如app的打包配置、集群的参数配置等等 反正只要是配置都可以放进去 \n#### spring cloud config server \n这个是属于spring cloud 项目中的一个组件  \n它基于 svn或者git 去管理配置文件 提供各种各样的配置文件的管理 、提供敏感配置加密(对称、非对称都支持)、访问控制等等  \njava中使用 config server client 客户端读取配置直接提供不停机更新配置功能 等等  \n非java项目 可以通过http接口获取配置  \n#### 需要技能\n* git、svn熟练 \n* java相关技能熟练 例如maven之类的\n* docker 熟练 涉及到项目打包成docker image \n\n#### git版本\ngit版本就简单了 毕竟git好用 大部分书籍、博客都是介绍git版本的 \n1：新建maven java项目\npom配置\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xmlns=\"http://maven.apache.org/POM/4.0.0\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <parent>\n        <artifactId>parent</artifactId>\n        <groupId>ming</groupId>\n        <version>1.0.0</version>\n    </parent>\n    <modelVersion>4.0.0</modelVersion>\n\n    <artifactId>configServer</artifactId>\n\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework.cloud</groupId>\n            <artifactId>spring-cloud-config-server</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.cloud</groupId>\n            <artifactId>spring-cloud-starter-eureka</artifactId>\n        </dependency>\n        <!-- <dependency>\n             <groupId>org.springframework.boot</groupId>\n             <artifactId>spring-boot-starter-security</artifactId>\n         </dependency>-->\n    </dependencies>\n</project>\n```\n2:application.yml配置\n```\nspring:\n  application:\n    name: config\n  cloud:\n    config:\n      server:\n        git:\n          uri: \"https://github.com/xuxianyu/springcloud.git\"\n          #仓库的搜索路径 这里可以指定 git的目录  config/spring-repo/{目录} 这种方式就可以按照项目区分配置目录了 \n          search-paths: config/spring-repo/ming\n#config server 访问账户密码\nsecurity:\n  user:\n    name: ming\n    password: ming\n#设定 对称加密密钥\n#encrypt:\n#  key: ming\n          #username: 18120580001@163.com\n          #password:\n```\n3：配置启动类\n```\npackage com.ming;\n\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.boot.builder.SpringApplicationBuilder;\nimport org.springframework.cloud.client.discovery.EnableDiscoveryClient;\nimport org.springframework.cloud.config.server.EnableConfigServer;\n\n/**\n * config server 启动类\n *\n * @author ming\n * @date 2017-10-30 11:18\n */\n//开启config 服务\n@EnableConfigServer\n//注册到注册中心\n@EnableDiscoveryClient\n@SpringBootApplication\npublic class StartConfig {\n\n    public static void main(String[] args) {\n        new SpringApplicationBuilder(StartConfig.class).web(true).run(args);\n    }\n}\n```\n4：访问配置 \n在git仓库中建立ming/config-dev.yaml  master分支\n```\nname: ming\n```\n浏览器访问 http://localhost:8888/master/config-dev.yaml\n\n实例地址: https://github.com/xuxianyu/springcloud/tree/master/configServer\n#### svn版本\n1:新建maven java项目 \npom配置\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>com.onlyedu</groupId>\n    <artifactId>configServer</artifactId>\n    <version>1.0-SNAPSHOT</version>\n    <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>1.5.1.RELEASE</version>\n    </parent>\n    <properties>\n        <!-- spring cloud version -->\n        <spring.cloud.version>Camden.SR5</spring.cloud.version>\n        <!-- svnkit version -->\n        <svnkit.version>1.9.0</svnkit.version>\n    </properties>\n\n    <!--仓库-->\n    <repositories>\n        <!--aliyun repository-->\n        <repository>\n            <id>aliyun</id>\n            <name>aliyun nexus repository</name>\n            <url>http://maven.aliyun.com/nexus/content/groups/public/</url>\n        </repository>\n\n\n    </repositories>\n\n\n    <dependencies>\n        <!-- spring cloud  config -->\n        <dependency>\n            <groupId>org.springframework.cloud</groupId>\n            <artifactId>spring-cloud-config-server</artifactId>\n        </dependency>\n        <!-- spring cloud config svn repository -->\n        <dependency>\n            <groupId>org.tmatesoft.svnkit</groupId>\n            <artifactId>svnkit</artifactId>\n            <version>${svnkit.version}</version>\n        </dependency>\n        <!-- spring  boot security 访问控制 -->\n         <dependency>\n             <groupId>org.springframework.boot</groupId>\n             <artifactId>spring-boot-starter-security</artifactId>\n         </dependency>\n    </dependencies>\n\n\n    <dependencyManagement>\n        <!--spring cloud parent pom-->\n        <dependencies>\n            <dependency>\n                <groupId>org.springframework.cloud</groupId>\n                <artifactId>spring-cloud-dependencies</artifactId>\n                <version>${spring.cloud.version}</version>\n                <type>pom</type>\n                <scope>import</scope>\n            </dependency>\n        </dependencies>\n    </dependencyManagement>\n\n\n    <!--构建插件-->\n    <build>\n\n        <plugins>\n            <!--docker 插件-->\n            <!--<plugin>\n                <groupId>com.spotify</groupId>\n                <artifactId>docker-maven-plugin</artifactId>\n                <version>${maven.docker.version}</version>\n                <configuration>\n                    &lt;!&ndash;镜像名称&ndash;&gt;\n                    <imageName>${docker.image.prefix}/${project.artifactId}</imageName>\n                    &lt;!&ndash;docker file位置&ndash;&gt;\n                    <dockerDirectory>src/main/docker</dockerDirectory>\n                    <resources>\n                        <resource>\n                            &lt;!&ndash; 编译jar路径 &ndash;&gt;\n                            <targetPath>/</targetPath>\n                            &lt;!&ndash;编译jar 所在文件夹&ndash;&gt;\n                            <directory>${project.build.directory}</directory>\n                            &lt;!&ndash;编译的jar 名称&ndash;&gt;\n                            <include>${project.build.finalName}.jar</include>\n                        </resource>\n                    </resources>\n                </configuration>\n            </plugin>-->\n            <!--指定编译jdk版本 默认为1.5-->\n            <plugin>\n                <artifactId>maven-compiler-plugin</artifactId>\n                <configuration>\n                    <source>1.8</source>\n                    <target>1.8</target>\n                    <encoding>UTF-8</encoding>\n                </configuration>\n            </plugin>\n\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n            </plugin>\n\n            <!-- 解决资源文件的编码问题 -->\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-resources-plugin</artifactId>\n                <configuration>\n                    <encoding>UTF-8</encoding>\n                </configuration>\n            </plugin>\n\n\n        </plugins>\n    </build>\n</project>\n```\n2：配置 application.yml\n```\n# default port\nserver:\n  port: 8888\nspring:\n  cloud:\n    config:\n      server:\n        svn:\n          # svn 配置仓库地址\n          uri: https://repo.xujiuming.com/svn/ming/trunk/confDir\n          # svn 访问账户\n          username: ming\n          # svn 访问密码\n          password: mingpwd\n          # 这个设置是访问时候没有带label默认的label  用处不大\n          default-label: trunk\n  # 使用 svn 作仓库  必须要填写\n  profiles:\n    active: subversion\n\n# 访问控制\nsecurity:\n  user:\n    name: ming\n    password: ming\nencrypt:\n  # rsa 密钥 设定 使用resources 下的 configServer.keystore\n  key-store:\n    location: configServer.keystore\n    alias: configServer\n    #  生成 密钥时候的密码\n    password: ming2\n    # 生成 密钥时候的签名\n    secret: ming1\n```\n3：生成敏感数据密钥包\n必须替换jce相关jar 或者直接使用我选择的docker 镜像 那个镜像是替换好jce相关jar包的\n\n因为 config server 使用的是aes256 加密 所以必须替换jce 相关jar \n就算使用rsa 加密方式 也是需要jce相关jar 的  因为他还是用的aes256加密\nrsa 加密方式配置\n* 生成 rsa 密钥包  直接到控制台执行即可  使用的是jdk 的keytool \n```\nconfigserver rsa 秘钥生成命令 有效时间 10000天\nkeytool -genkeypair -alias configServer -keyalg RSA \\\n-dname \"CN=ming,OU=ming,O=ming,L=ming,ST=ming,C=ming\" \\\n-keypass ming1 \\\n-keystore configServer.keystore \\\n-storepass ming2 \\\n-validity 10000 \\\n```\n配置中使用 数据加密\n* 使用加密字符串替换 原始字符串\n```\n访问 configServer的 {[/encrypt],methods=[POST]} 接口  参数为要加密的字符串  返回加密字符串\n例如 加密前 字符串a   通过接口获取加密后字符串 b\n在a配置的地方 使用 {cipher}b  替换a  即可 \n加密前\npasswd=a\n加密后\npasswd={cipher}b  \n```\n将生成的configServer.keystore 文件复制到resources目录中去\n4:配置spring boot 项目启动类\n```\npackage com.ming;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.cloud.config.server.EnableConfigServer;\n\n/** config server start class\n *\n * @author  ming\n * @date  2017-12-06 10:08\n * */\n@EnableConfigServer\n@SpringBootApplication\npublic class StartConfigServer {\n\n    public static void main(String[] args) {\n        SpringApplication.run(StartConfigServer.class,args);\n    }\n}\n\n```\n5:配置dockerfile\n```\nFROM docker.io/fabric8/java-alpine-openjdk8-jdk\nMAINTAINER \"ming\"\n\n# create  workspace\nRUN  mkdir /workspace\n# copy app.jar\nCOPY target/configServer-1.0-SNAPSHOT.jar /workspace\n# open port\nEXPOSE 8888\n# 运行jar\nCMD  java -jar /workspace/configServer-1.0-SNAPSHOT.jar\n```\n6:打包成docker\n```\nmvn package \nsudo docker build -t config-server-ming:1.0.0 .\n```\n7：启动容器\n```\nsudo docker run -d -p 8888:8888 --name mingconfigserver config-server-ming:1.0.0\n```\n8：访问配置 \n在svn仓库中建立ming/config-dev.yaml \n```\nname: ming\n```\n浏览器访问 http://localhost:8888/ming/config-dev.yaml\n\n实例地址: https://github.com/xuxianyu/springcloud/tree/master/configServerSvn\n#### 访问配置文件url 详细解释\n参数解释:\n1:git\n在git仓库中目录 配置文件的目录/配置文件前缀-配置文件后缀.配置文件类型  如在svn仓库目录下的ming/app-dev.yaml master分支  那么 master就是label app就是name  profiles就是dev  path就是app-dev.yaml git配置可以通过配置 区分文件夹 不是跟svn一样 把文件夹当作label \n\n```\nname: 前缀\nprofiles: 后缀\nlabel: 分支\npath： 完整文件名\n```\n2:svn\n在svn仓库中目录 配置文件的目录/配置文件前缀-配置文件后缀.配置文件类型  如在svn仓库目录下的ming/app-dev.yaml  那么 ming就是label app就是name  profiles就是dev  path就是app-dev.yaml\n```\nname: 配置文件前缀\nprofiles: 配置文件后缀\nlabel: 文件夹目录名称\npath:配置文件全称包含.后面的类型  \n```\n\n访问properties、yaml、json格式 访问方式  \n/{name}/{profiles:.\\*\\[^-].\\*}   \n/{name}/{profiles}/{label:.*}   \n/{name}-{profiles}.properties  \n/{label}/{name}   \n/{profiles}.properties  \n/{name}-{profiles}.json   \n/{label}/{name}-{profiles}.json   \n\n\n访问非 java适配的配置文件 只能以文本模式 读取\n参考博客地址:http://www.voidcn.com/article/p-yhrhfyla-bqr.html\n/{name}/{profile}/{label}/{path}\n\n\n#### 实际案例  \n1：java web项目启动拉取配置中心配置  \n在spring cloud 接入config server的项目中   \nbootstrap.yml 优先级最高 在一启动就会加载 在这里配置 链接config server的配置、链接配置中心的配置 等等 \napplication.yml是在config client 拉取配置后才加载 如果在这里配置链接config server配置不会生效\n\n增加pom依赖\n```\n<dependency>\n   <groupId>org.springframework.cloud</groupId>\n   <artifactId>spring-cloud-starter-config</artifactId>\n</dependency>\n```\n配置bootstrap.yml\n```\nspring:\n cloud:\n     config:\n       # 拉取后缀为dev的配置\n       profile: dev\n       # 拉取master分支的配置\n       label: master\n       username: ming\n       password: ming\n       uri: \"http://localhost:8888\"\n       #开启 以服务方式访问配置中心\n       #discovery:\n       #  enabled: true\n       #  service-id: CONFIG\n       #开启预检\n       #fail-fast: true\n       #重试参数\n       #retry:\n         #重试间隔\n         #multiplier: 2000\n         #下一个间隔\n         #initial-interval: 2000\n         #最大间隔\n         #max-interval: 5000\n         #最大重试次数\n         #max-attempts: 3\n\n application:\n   # 拉取前缀为ming的配置\n   name: ming\n       #fail-fast: true\n```\n在配置仓库配置相关配置\n然后启动项目 打个断点 查询spring env bean 即可查看是否加载到配置中心的配置\n\n\n\n2: docker启动 时候拉取容器环境配置\n思路: 重写镜像的 启动命令 在启动的时候拉取配置中心的配置覆盖容器中的配置文件 \n如果配置中心设置的账户密码 需要获取配置中心 访问接口的token \n浏览器访问一下配置输入账户密码  抓http请求包 报头中有个 Authorization: Basic xxxxxxx 报头 \n使用curl命令获取配置\n```\ncurl -H \"Authorization: Basic xxxxxxx\" http://configServer地址//{name}/{profile}/{label}/{path} > /etc/nginx/conf.d/default.conf\n```\n调整dockerfile中的默认启动命令\nCMD 或者ENTRYPOINT  一定要用&&  不能使用& 这个是并行执行 但是大部分容器是需要先加载完毕配置才能启动的\n```\nENTRYPOINT curl -H \"Authorization: Basic xxxxxxx\" http://configServer地址//{name}/{profile}/{label}/{path} > /etc/nginx/conf.d/default.conf && run.sh\n```\n#### 总结: \n总的来说 spring cloud config server基本满足需求   \n如果需要什么配置操作审计 完全可以在svn或者git操作上进行    \n如果是java项目可以通过引入 spring cloud config client jar来使用  \n非java项目 可以通过http接口获取配置信息   \n关于高可用 就是多启动几台config server 注册到注册中心就行 客户端通过注册中心去访问http接口 \n\n","slug":"spring/springCloudConfigServer的git、svn版本实现及相关实战案例","published":1,"updated":"2018-08-17T08:10:03.923Z","layout":"post","photos":[],"link":"","_id":"cjo9uau2z00bpmwczqkwp4wzd","content":"<h3 id=\"配置中心\"><a href=\"#配置中心\" class=\"headerlink\" title=\"配置中心\"></a>配置中心</h3><p>在分布式 环境中 配置中心是必不可少的一个组件 不管是国内的 disconf 、Apollo之类 还是spring cloud的config server 都是一个套路<br>将配置统一管理 通过namespace、项目名称之类的 进行区分 加入一些操作审计、配置加密之类的功能 有的是基于数据库、有的是基于文件+版本管理<br>由于技术栈和个人习惯 我个人更加喜欢spring 社区的config server 基于文件和版本管理来实现的配置 可以很方便的管理配置的版本和内容</p><p>个人觉得 在整个集群中管踏马是什么配置 都可以丢进配置中心进行统一管理 例如app的打包配置、集群的参数配置等等 反正只要是配置都可以放进去</p><h4 id=\"spring-cloud-config-server\"><a href=\"#spring-cloud-config-server\" class=\"headerlink\" title=\"spring cloud config server\"></a>spring cloud config server</h4><p>这个是属于spring cloud 项目中的一个组件<br>它基于 svn或者git 去管理配置文件 提供各种各样的配置文件的管理 、提供敏感配置加密(对称、非对称都支持)、访问控制等等<br>java中使用 config server client 客户端读取配置直接提供不停机更新配置功能 等等<br>非java项目 可以通过http接口获取配置</p><h4 id=\"需要技能\"><a href=\"#需要技能\" class=\"headerlink\" title=\"需要技能\"></a>需要技能</h4><ul><li>git、svn熟练</li><li>java相关技能熟练 例如maven之类的</li><li>docker 熟练 涉及到项目打包成docker image</li></ul><h4 id=\"git版本\"><a href=\"#git版本\" class=\"headerlink\" title=\"git版本\"></a>git版本</h4><p>git版本就简单了 毕竟git好用 大部分书籍、博客都是介绍git版本的<br>1：新建maven java项目<br>pom配置<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class=\"line\">&lt;project xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class=\"line\">         xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;</span><br><span class=\"line\">         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class=\"line\">    &lt;parent&gt;</span><br><span class=\"line\">        &lt;artifactId&gt;parent&lt;/artifactId&gt;</span><br><span class=\"line\">        &lt;groupId&gt;ming&lt;/groupId&gt;</span><br><span class=\"line\">        &lt;version&gt;1.0.0&lt;/version&gt;</span><br><span class=\"line\">    &lt;/parent&gt;</span><br><span class=\"line\">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;artifactId&gt;configServer&lt;/artifactId&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;dependencies&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;spring-cloud-config-server&lt;/artifactId&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;spring-cloud-starter-eureka&lt;/artifactId&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br><span class=\"line\">        &lt;!-- &lt;dependency&gt;</span><br><span class=\"line\">             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">             &lt;artifactId&gt;spring-boot-starter-security&lt;/artifactId&gt;</span><br><span class=\"line\">         &lt;/dependency&gt;--&gt;</span><br><span class=\"line\">    &lt;/dependencies&gt;</span><br><span class=\"line\">&lt;/project&gt;</span><br></pre></td></tr></table></figure><p></p>\n<p>2:application.yml配置<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">spring:</span><br><span class=\"line\">  application:</span><br><span class=\"line\">    name: config</span><br><span class=\"line\">  cloud:</span><br><span class=\"line\">    config:</span><br><span class=\"line\">      server:</span><br><span class=\"line\">        git:</span><br><span class=\"line\">          uri: &quot;https://github.com/xuxianyu/springcloud.git&quot;</span><br><span class=\"line\">          #仓库的搜索路径 这里可以指定 git的目录  config/spring-repo/&#123;目录&#125; 这种方式就可以按照项目区分配置目录了 </span><br><span class=\"line\">          search-paths: config/spring-repo/ming</span><br><span class=\"line\">#config server 访问账户密码</span><br><span class=\"line\">security:</span><br><span class=\"line\">  user:</span><br><span class=\"line\">    name: ming</span><br><span class=\"line\">    password: ming</span><br><span class=\"line\">#设定 对称加密密钥</span><br><span class=\"line\">#encrypt:</span><br><span class=\"line\">#  key: ming</span><br><span class=\"line\">          #username: 18120580001@163.com</span><br><span class=\"line\">          #password:</span><br></pre></td></tr></table></figure><p></p>\n<p>3：配置启动类<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.ming;</span><br><span class=\"line\"></span><br><span class=\"line\">import org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class=\"line\">import org.springframework.boot.builder.SpringApplicationBuilder;</span><br><span class=\"line\">import org.springframework.cloud.client.discovery.EnableDiscoveryClient;</span><br><span class=\"line\">import org.springframework.cloud.config.server.EnableConfigServer;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * config server 启动类</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @author ming</span><br><span class=\"line\"> * @date 2017-10-30 11:18</span><br><span class=\"line\"> */</span><br><span class=\"line\">//开启config 服务</span><br><span class=\"line\">@EnableConfigServer</span><br><span class=\"line\">//注册到注册中心</span><br><span class=\"line\">@EnableDiscoveryClient</span><br><span class=\"line\">@SpringBootApplication</span><br><span class=\"line\">public class StartConfig &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        new SpringApplicationBuilder(StartConfig.class).web(true).run(args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p>\n<p>4：访问配置<br>在git仓库中建立ming/config-dev.yaml  master分支<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name: ming</span><br></pre></td></tr></table></figure><p></p>\n<p>浏览器访问 <a href=\"http://localhost:8888/master/config-dev.yaml\" target=\"_blank\" rel=\"noopener\">http://localhost:8888/master/config-dev.yaml</a></p>\n<p>实例地址: <a href=\"https://github.com/xuxianyu/springcloud/tree/master/configServer\" target=\"_blank\" rel=\"noopener\">https://github.com/xuxianyu/springcloud/tree/master/configServer</a></p>\n<h4 id=\"svn版本\"><a href=\"#svn版本\" class=\"headerlink\" title=\"svn版本\"></a>svn版本</h4><p>1:新建maven java项目<br>pom配置<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class=\"line\">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;</span><br><span class=\"line\">         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class=\"line\">         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class=\"line\">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;groupId&gt;com.onlyedu&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;configServer&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class=\"line\">    &lt;parent&gt;</span><br><span class=\"line\">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</span><br><span class=\"line\">        &lt;version&gt;1.5.1.RELEASE&lt;/version&gt;</span><br><span class=\"line\">    &lt;/parent&gt;</span><br><span class=\"line\">    &lt;properties&gt;</span><br><span class=\"line\">        &lt;!-- spring cloud version --&gt;</span><br><span class=\"line\">        &lt;spring.cloud.version&gt;Camden.SR5&lt;/spring.cloud.version&gt;</span><br><span class=\"line\">        &lt;!-- svnkit version --&gt;</span><br><span class=\"line\">        &lt;svnkit.version&gt;1.9.0&lt;/svnkit.version&gt;</span><br><span class=\"line\">    &lt;/properties&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;!--仓库--&gt;</span><br><span class=\"line\">    &lt;repositories&gt;</span><br><span class=\"line\">        &lt;!--aliyun repository--&gt;</span><br><span class=\"line\">        &lt;repository&gt;</span><br><span class=\"line\">            &lt;id&gt;aliyun&lt;/id&gt;</span><br><span class=\"line\">            &lt;name&gt;aliyun nexus repository&lt;/name&gt;</span><br><span class=\"line\">            &lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public/&lt;/url&gt;</span><br><span class=\"line\">        &lt;/repository&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;/repositories&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;dependencies&gt;</span><br><span class=\"line\">        &lt;!-- spring cloud  config --&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;spring-cloud-config-server&lt;/artifactId&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br><span class=\"line\">        &lt;!-- spring cloud config svn repository --&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.tmatesoft.svnkit&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;svnkit&lt;/artifactId&gt;</span><br><span class=\"line\">            &lt;version&gt;$&#123;svnkit.version&#125;&lt;/version&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br><span class=\"line\">        &lt;!-- spring  boot security 访问控制 --&gt;</span><br><span class=\"line\">         &lt;dependency&gt;</span><br><span class=\"line\">             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">             &lt;artifactId&gt;spring-boot-starter-security&lt;/artifactId&gt;</span><br><span class=\"line\">         &lt;/dependency&gt;</span><br><span class=\"line\">    &lt;/dependencies&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;dependencyManagement&gt;</span><br><span class=\"line\">        &lt;!--spring cloud parent pom--&gt;</span><br><span class=\"line\">        &lt;dependencies&gt;</span><br><span class=\"line\">            &lt;dependency&gt;</span><br><span class=\"line\">                &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class=\"line\">                &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;</span><br><span class=\"line\">                &lt;version&gt;$&#123;spring.cloud.version&#125;&lt;/version&gt;</span><br><span class=\"line\">                &lt;type&gt;pom&lt;/type&gt;</span><br><span class=\"line\">                &lt;scope&gt;import&lt;/scope&gt;</span><br><span class=\"line\">            &lt;/dependency&gt;</span><br><span class=\"line\">        &lt;/dependencies&gt;</span><br><span class=\"line\">    &lt;/dependencyManagement&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;!--构建插件--&gt;</span><br><span class=\"line\">    &lt;build&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;plugins&gt;</span><br><span class=\"line\">            &lt;!--docker 插件--&gt;</span><br><span class=\"line\">            &lt;!--&lt;plugin&gt;</span><br><span class=\"line\">                &lt;groupId&gt;com.spotify&lt;/groupId&gt;</span><br><span class=\"line\">                &lt;artifactId&gt;docker-maven-plugin&lt;/artifactId&gt;</span><br><span class=\"line\">                &lt;version&gt;$&#123;maven.docker.version&#125;&lt;/version&gt;</span><br><span class=\"line\">                &lt;configuration&gt;</span><br><span class=\"line\">                    &amp;lt;!&amp;ndash;镜像名称&amp;ndash;&amp;gt;</span><br><span class=\"line\">                    &lt;imageName&gt;$&#123;docker.image.prefix&#125;/$&#123;project.artifactId&#125;&lt;/imageName&gt;</span><br><span class=\"line\">                    &amp;lt;!&amp;ndash;docker file位置&amp;ndash;&amp;gt;</span><br><span class=\"line\">                    &lt;dockerDirectory&gt;src/main/docker&lt;/dockerDirectory&gt;</span><br><span class=\"line\">                    &lt;resources&gt;</span><br><span class=\"line\">                        &lt;resource&gt;</span><br><span class=\"line\">                            &amp;lt;!&amp;ndash; 编译jar路径 &amp;ndash;&amp;gt;</span><br><span class=\"line\">                            &lt;targetPath&gt;/&lt;/targetPath&gt;</span><br><span class=\"line\">                            &amp;lt;!&amp;ndash;编译jar 所在文件夹&amp;ndash;&amp;gt;</span><br><span class=\"line\">                            &lt;directory&gt;$&#123;project.build.directory&#125;&lt;/directory&gt;</span><br><span class=\"line\">                            &amp;lt;!&amp;ndash;编译的jar 名称&amp;ndash;&amp;gt;</span><br><span class=\"line\">                            &lt;include&gt;$&#123;project.build.finalName&#125;.jar&lt;/include&gt;</span><br><span class=\"line\">                        &lt;/resource&gt;</span><br><span class=\"line\">                    &lt;/resources&gt;</span><br><span class=\"line\">                &lt;/configuration&gt;</span><br><span class=\"line\">            &lt;/plugin&gt;--&gt;</span><br><span class=\"line\">            &lt;!--指定编译jdk版本 默认为1.5--&gt;</span><br><span class=\"line\">            &lt;plugin&gt;</span><br><span class=\"line\">                &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;</span><br><span class=\"line\">                &lt;configuration&gt;</span><br><span class=\"line\">                    &lt;source&gt;1.8&lt;/source&gt;</span><br><span class=\"line\">                    &lt;target&gt;1.8&lt;/target&gt;</span><br><span class=\"line\">                    &lt;encoding&gt;UTF-8&lt;/encoding&gt;</span><br><span class=\"line\">                &lt;/configuration&gt;</span><br><span class=\"line\">            &lt;/plugin&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">            &lt;plugin&gt;</span><br><span class=\"line\">                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class=\"line\">            &lt;/plugin&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">            &lt;!-- 解决资源文件的编码问题 --&gt;</span><br><span class=\"line\">            &lt;plugin&gt;</span><br><span class=\"line\">                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class=\"line\">                &lt;artifactId&gt;maven-resources-plugin&lt;/artifactId&gt;</span><br><span class=\"line\">                &lt;configuration&gt;</span><br><span class=\"line\">                    &lt;encoding&gt;UTF-8&lt;/encoding&gt;</span><br><span class=\"line\">                &lt;/configuration&gt;</span><br><span class=\"line\">            &lt;/plugin&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;/plugins&gt;</span><br><span class=\"line\">    &lt;/build&gt;</span><br><span class=\"line\">&lt;/project&gt;</span><br></pre></td></tr></table></figure><p></p>\n<p>2：配置 application.yml<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># default port</span><br><span class=\"line\">server:</span><br><span class=\"line\">  port: 8888</span><br><span class=\"line\">spring:</span><br><span class=\"line\">  cloud:</span><br><span class=\"line\">    config:</span><br><span class=\"line\">      server:</span><br><span class=\"line\">        svn:</span><br><span class=\"line\">          # svn 配置仓库地址</span><br><span class=\"line\">          uri: https://repo.xujiuming.com/svn/ming/trunk/confDir</span><br><span class=\"line\">          # svn 访问账户</span><br><span class=\"line\">          username: ming</span><br><span class=\"line\">          # svn 访问密码</span><br><span class=\"line\">          password: mingpwd</span><br><span class=\"line\">          # 这个设置是访问时候没有带label默认的label  用处不大</span><br><span class=\"line\">          default-label: trunk</span><br><span class=\"line\">  # 使用 svn 作仓库  必须要填写</span><br><span class=\"line\">  profiles:</span><br><span class=\"line\">    active: subversion</span><br><span class=\"line\"></span><br><span class=\"line\"># 访问控制</span><br><span class=\"line\">security:</span><br><span class=\"line\">  user:</span><br><span class=\"line\">    name: ming</span><br><span class=\"line\">    password: ming</span><br><span class=\"line\">encrypt:</span><br><span class=\"line\">  # rsa 密钥 设定 使用resources 下的 configServer.keystore</span><br><span class=\"line\">  key-store:</span><br><span class=\"line\">    location: configServer.keystore</span><br><span class=\"line\">    alias: configServer</span><br><span class=\"line\">    #  生成 密钥时候的密码</span><br><span class=\"line\">    password: ming2</span><br><span class=\"line\">    # 生成 密钥时候的签名</span><br><span class=\"line\">    secret: ming1</span><br></pre></td></tr></table></figure><p></p>\n<p>3：生成敏感数据密钥包<br>必须替换jce相关jar 或者直接使用我选择的docker 镜像 那个镜像是替换好jce相关jar包的</p>\n<p>因为 config server 使用的是aes256 加密 所以必须替换jce 相关jar<br>就算使用rsa 加密方式 也是需要jce相关jar 的  因为他还是用的aes256加密<br>rsa 加密方式配置</p>\n<ul>\n<li>生成 rsa 密钥包  直接到控制台执行即可  使用的是jdk 的keytool <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">configserver rsa 秘钥生成命令 有效时间 10000天</span><br><span class=\"line\">keytool -genkeypair -alias configServer -keyalg RSA \\</span><br><span class=\"line\">-dname &quot;CN=ming,OU=ming,O=ming,L=ming,ST=ming,C=ming&quot; \\</span><br><span class=\"line\">-keypass ming1 \\</span><br><span class=\"line\">-keystore configServer.keystore \\</span><br><span class=\"line\">-storepass ming2 \\</span><br><span class=\"line\">-validity 10000 \\</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>配置中使用 数据加密</p>\n<ul>\n<li>使用加密字符串替换 原始字符串<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">访问 configServer的 &#123;[/encrypt],methods=[POST]&#125; 接口  参数为要加密的字符串  返回加密字符串</span><br><span class=\"line\">例如 加密前 字符串a   通过接口获取加密后字符串 b</span><br><span class=\"line\">在a配置的地方 使用 &#123;cipher&#125;b  替换a  即可 </span><br><span class=\"line\">加密前</span><br><span class=\"line\">passwd=a</span><br><span class=\"line\">加密后</span><br><span class=\"line\">passwd=&#123;cipher&#125;b</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>将生成的configServer.keystore 文件复制到resources目录中去<br>4:配置spring boot 项目启动类<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.ming;</span><br><span class=\"line\"></span><br><span class=\"line\">import org.springframework.boot.SpringApplication;</span><br><span class=\"line\">import org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class=\"line\">import org.springframework.cloud.config.server.EnableConfigServer;</span><br><span class=\"line\"></span><br><span class=\"line\">/** config server start class</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @author  ming</span><br><span class=\"line\"> * @date  2017-12-06 10:08</span><br><span class=\"line\"> * */</span><br><span class=\"line\">@EnableConfigServer</span><br><span class=\"line\">@SpringBootApplication</span><br><span class=\"line\">public class StartConfigServer &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        SpringApplication.run(StartConfigServer.class,args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p>\n<p>5:配置dockerfile<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM docker.io/fabric8/java-alpine-openjdk8-jdk</span><br><span class=\"line\">MAINTAINER &quot;ming&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"># create  workspace</span><br><span class=\"line\">RUN  mkdir /workspace</span><br><span class=\"line\"># copy app.jar</span><br><span class=\"line\">COPY target/configServer-1.0-SNAPSHOT.jar /workspace</span><br><span class=\"line\"># open port</span><br><span class=\"line\">EXPOSE 8888</span><br><span class=\"line\"># 运行jar</span><br><span class=\"line\">CMD  java -jar /workspace/configServer-1.0-SNAPSHOT.jar</span><br></pre></td></tr></table></figure><p></p>\n<p>6:打包成docker<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mvn package </span><br><span class=\"line\">sudo docker build -t config-server-ming:1.0.0 .</span><br></pre></td></tr></table></figure><p></p>\n<p>7：启动容器<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo docker run -d -p 8888:8888 --name mingconfigserver config-server-ming:1.0.0</span><br></pre></td></tr></table></figure><p></p>\n<p>8：访问配置<br>在svn仓库中建立ming/config-dev.yaml<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name: ming</span><br></pre></td></tr></table></figure><p></p>\n<p>浏览器访问 <a href=\"http://localhost:8888/ming/config-dev.yaml\" target=\"_blank\" rel=\"noopener\">http://localhost:8888/ming/config-dev.yaml</a></p>\n<p>实例地址: <a href=\"https://github.com/xuxianyu/springcloud/tree/master/configServerSvn\" target=\"_blank\" rel=\"noopener\">https://github.com/xuxianyu/springcloud/tree/master/configServerSvn</a></p>\n<h4 id=\"访问配置文件url-详细解释\"><a href=\"#访问配置文件url-详细解释\" class=\"headerlink\" title=\"访问配置文件url 详细解释\"></a>访问配置文件url 详细解释</h4><p>参数解释:<br>1:git<br>在git仓库中目录 配置文件的目录/配置文件前缀-配置文件后缀.配置文件类型  如在svn仓库目录下的ming/app-dev.yaml master分支  那么 master就是label app就是name  profiles就是dev  path就是app-dev.yaml git配置可以通过配置 区分文件夹 不是跟svn一样 把文件夹当作label </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name: 前缀</span><br><span class=\"line\">profiles: 后缀</span><br><span class=\"line\">label: 分支</span><br><span class=\"line\">path： 完整文件名</span><br></pre></td></tr></table></figure>\n<p>2:svn<br>在svn仓库中目录 配置文件的目录/配置文件前缀-配置文件后缀.配置文件类型  如在svn仓库目录下的ming/app-dev.yaml  那么 ming就是label app就是name  profiles就是dev  path就是app-dev.yaml<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name: 配置文件前缀</span><br><span class=\"line\">profiles: 配置文件后缀</span><br><span class=\"line\">label: 文件夹目录名称</span><br><span class=\"line\">path:配置文件全称包含.后面的类型</span><br></pre></td></tr></table></figure><p></p>\n<p>访问properties、yaml、json格式 访问方式<br>/{name}/{profiles:.*[^-].*}<br>/{name}/{profiles}/{label:.*}<br>/{name}-{profiles}.properties<br>/{label}/{name}<br>/{profiles}.properties<br>/{name}-{profiles}.json<br>/{label}/{name}-{profiles}.json   </p>\n<p>访问非 java适配的配置文件 只能以文本模式 读取<br>参考博客地址:<a href=\"http://www.voidcn.com/article/p-yhrhfyla-bqr.html\" target=\"_blank\" rel=\"noopener\">http://www.voidcn.com/article/p-yhrhfyla-bqr.html</a><br>/{name}/{profile}/{label}/{path}</p>\n<h4 id=\"实际案例\"><a href=\"#实际案例\" class=\"headerlink\" title=\"实际案例\"></a>实际案例</h4><p>1：java web项目启动拉取配置中心配置<br>在spring cloud 接入config server的项目中<br>bootstrap.yml 优先级最高 在一启动就会加载 在这里配置 链接config server的配置、链接配置中心的配置 等等<br>application.yml是在config client 拉取配置后才加载 如果在这里配置链接config server配置不会生效</p>\n<p>增加pom依赖<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">   &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class=\"line\">   &lt;artifactId&gt;spring-cloud-starter-config&lt;/artifactId&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p></p>\n<p>配置bootstrap.yml<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">spring:</span><br><span class=\"line\"> cloud:</span><br><span class=\"line\">     config:</span><br><span class=\"line\">       # 拉取后缀为dev的配置</span><br><span class=\"line\">       profile: dev</span><br><span class=\"line\">       # 拉取master分支的配置</span><br><span class=\"line\">       label: master</span><br><span class=\"line\">       username: ming</span><br><span class=\"line\">       password: ming</span><br><span class=\"line\">       uri: &quot;http://localhost:8888&quot;</span><br><span class=\"line\">       #开启 以服务方式访问配置中心</span><br><span class=\"line\">       #discovery:</span><br><span class=\"line\">       #  enabled: true</span><br><span class=\"line\">       #  service-id: CONFIG</span><br><span class=\"line\">       #开启预检</span><br><span class=\"line\">       #fail-fast: true</span><br><span class=\"line\">       #重试参数</span><br><span class=\"line\">       #retry:</span><br><span class=\"line\">         #重试间隔</span><br><span class=\"line\">         #multiplier: 2000</span><br><span class=\"line\">         #下一个间隔</span><br><span class=\"line\">         #initial-interval: 2000</span><br><span class=\"line\">         #最大间隔</span><br><span class=\"line\">         #max-interval: 5000</span><br><span class=\"line\">         #最大重试次数</span><br><span class=\"line\">         #max-attempts: 3</span><br><span class=\"line\"></span><br><span class=\"line\"> application:</span><br><span class=\"line\">   # 拉取前缀为ming的配置</span><br><span class=\"line\">   name: ming</span><br><span class=\"line\">       #fail-fast: true</span><br></pre></td></tr></table></figure><p></p>\n<p>在配置仓库配置相关配置<br>然后启动项目 打个断点 查询spring env bean 即可查看是否加载到配置中心的配置</p>\n<p>2: docker启动 时候拉取容器环境配置<br>思路: 重写镜像的 启动命令 在启动的时候拉取配置中心的配置覆盖容器中的配置文件<br>如果配置中心设置的账户密码 需要获取配置中心 访问接口的token<br>浏览器访问一下配置输入账户密码  抓http请求包 报头中有个 Authorization: Basic xxxxxxx 报头<br>使用curl命令获取配置<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -H &quot;Authorization: Basic xxxxxxx&quot; http://configServer地址//&#123;name&#125;/&#123;profile&#125;/&#123;label&#125;/&#123;path&#125; &gt; /etc/nginx/conf.d/default.conf</span><br></pre></td></tr></table></figure><p></p>\n<p>调整dockerfile中的默认启动命令<br>CMD 或者ENTRYPOINT  一定要用&amp;&amp;  不能使用&amp; 这个是并行执行 但是大部分容器是需要先加载完毕配置才能启动的<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ENTRYPOINT curl -H &quot;Authorization: Basic xxxxxxx&quot; http://configServer地址//&#123;name&#125;/&#123;profile&#125;/&#123;label&#125;/&#123;path&#125; &gt; /etc/nginx/conf.d/default.conf &amp;&amp; run.sh</span><br></pre></td></tr></table></figure><p></p>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结:\"></a>总结:</h4><p>总的来说 spring cloud config server基本满足需求<br>如果需要什么配置操作审计 完全可以在svn或者git操作上进行<br>如果是java项目可以通过引入 spring cloud config client jar来使用<br>非java项目 可以通过http接口获取配置信息<br>关于高可用 就是多启动几台config server 注册到注册中心就行 客户端通过注册中心去访问http接口</p>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"配置中心\"><a href=\"#配置中心\" class=\"headerlink\" title=\"配置中心\"></a>配置中心</h3><p>在分布式 环境中 配置中心是必不可少的一个组件 不管是国内的 disconf 、Apollo之类 还是spring cloud的config server 都是一个套路<br>将配置统一管理 通过namespace、项目名称之类的 进行区分 加入一些操作审计、配置加密之类的功能 有的是基于数据库、有的是基于文件+版本管理<br>由于技术栈和个人习惯 我个人更加喜欢spring 社区的config server 基于文件和版本管理来实现的配置 可以很方便的管理配置的版本和内容</p><p>个人觉得 在整个集群中管踏马是什么配置 都可以丢进配置中心进行统一管理 例如app的打包配置、集群的参数配置等等 反正只要是配置都可以放进去</p><h4 id=\"spring-cloud-config-server\"><a href=\"#spring-cloud-config-server\" class=\"headerlink\" title=\"spring cloud config server\"></a>spring cloud config server</h4><p>这个是属于spring cloud 项目中的一个组件<br>它基于 svn或者git 去管理配置文件 提供各种各样的配置文件的管理 、提供敏感配置加密(对称、非对称都支持)、访问控制等等<br>java中使用 config server client 客户端读取配置直接提供不停机更新配置功能 等等<br>非java项目 可以通过http接口获取配置</p><h4 id=\"需要技能\"><a href=\"#需要技能\" class=\"headerlink\" title=\"需要技能\"></a>需要技能</h4><ul><li>git、svn熟练</li><li>java相关技能熟练 例如maven之类的</li><li>docker 熟练 涉及到项目打包成docker image</li></ul><h4 id=\"git版本\"><a href=\"#git版本\" class=\"headerlink\" title=\"git版本\"></a>git版本</h4><p>git版本就简单了 毕竟git好用 大部分书籍、博客都是介绍git版本的<br>1：新建maven java项目<br>pom配置<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class=\"line\">&lt;project xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class=\"line\">         xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;</span><br><span class=\"line\">         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class=\"line\">    &lt;parent&gt;</span><br><span class=\"line\">        &lt;artifactId&gt;parent&lt;/artifactId&gt;</span><br><span class=\"line\">        &lt;groupId&gt;ming&lt;/groupId&gt;</span><br><span class=\"line\">        &lt;version&gt;1.0.0&lt;/version&gt;</span><br><span class=\"line\">    &lt;/parent&gt;</span><br><span class=\"line\">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;artifactId&gt;configServer&lt;/artifactId&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;dependencies&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;spring-cloud-config-server&lt;/artifactId&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;spring-cloud-starter-eureka&lt;/artifactId&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br><span class=\"line\">        &lt;!-- &lt;dependency&gt;</span><br><span class=\"line\">             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">             &lt;artifactId&gt;spring-boot-starter-security&lt;/artifactId&gt;</span><br><span class=\"line\">         &lt;/dependency&gt;--&gt;</span><br><span class=\"line\">    &lt;/dependencies&gt;</span><br><span class=\"line\">&lt;/project&gt;</span><br></pre></td></tr></table></figure><p></p>\n<p>2:application.yml配置<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">spring:</span><br><span class=\"line\">  application:</span><br><span class=\"line\">    name: config</span><br><span class=\"line\">  cloud:</span><br><span class=\"line\">    config:</span><br><span class=\"line\">      server:</span><br><span class=\"line\">        git:</span><br><span class=\"line\">          uri: &quot;https://github.com/xuxianyu/springcloud.git&quot;</span><br><span class=\"line\">          #仓库的搜索路径 这里可以指定 git的目录  config/spring-repo/&#123;目录&#125; 这种方式就可以按照项目区分配置目录了 </span><br><span class=\"line\">          search-paths: config/spring-repo/ming</span><br><span class=\"line\">#config server 访问账户密码</span><br><span class=\"line\">security:</span><br><span class=\"line\">  user:</span><br><span class=\"line\">    name: ming</span><br><span class=\"line\">    password: ming</span><br><span class=\"line\">#设定 对称加密密钥</span><br><span class=\"line\">#encrypt:</span><br><span class=\"line\">#  key: ming</span><br><span class=\"line\">          #username: 18120580001@163.com</span><br><span class=\"line\">          #password:</span><br></pre></td></tr></table></figure><p></p>\n<p>3：配置启动类<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.ming;</span><br><span class=\"line\"></span><br><span class=\"line\">import org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class=\"line\">import org.springframework.boot.builder.SpringApplicationBuilder;</span><br><span class=\"line\">import org.springframework.cloud.client.discovery.EnableDiscoveryClient;</span><br><span class=\"line\">import org.springframework.cloud.config.server.EnableConfigServer;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * config server 启动类</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @author ming</span><br><span class=\"line\"> * @date 2017-10-30 11:18</span><br><span class=\"line\"> */</span><br><span class=\"line\">//开启config 服务</span><br><span class=\"line\">@EnableConfigServer</span><br><span class=\"line\">//注册到注册中心</span><br><span class=\"line\">@EnableDiscoveryClient</span><br><span class=\"line\">@SpringBootApplication</span><br><span class=\"line\">public class StartConfig &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        new SpringApplicationBuilder(StartConfig.class).web(true).run(args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p>\n<p>4：访问配置<br>在git仓库中建立ming/config-dev.yaml  master分支<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name: ming</span><br></pre></td></tr></table></figure><p></p>\n<p>浏览器访问 <a href=\"http://localhost:8888/master/config-dev.yaml\" target=\"_blank\" rel=\"noopener\">http://localhost:8888/master/config-dev.yaml</a></p>\n<p>实例地址: <a href=\"https://github.com/xuxianyu/springcloud/tree/master/configServer\" target=\"_blank\" rel=\"noopener\">https://github.com/xuxianyu/springcloud/tree/master/configServer</a></p>\n<h4 id=\"svn版本\"><a href=\"#svn版本\" class=\"headerlink\" title=\"svn版本\"></a>svn版本</h4><p>1:新建maven java项目<br>pom配置<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class=\"line\">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;</span><br><span class=\"line\">         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class=\"line\">         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class=\"line\">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;groupId&gt;com.onlyedu&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;configServer&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class=\"line\">    &lt;parent&gt;</span><br><span class=\"line\">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</span><br><span class=\"line\">        &lt;version&gt;1.5.1.RELEASE&lt;/version&gt;</span><br><span class=\"line\">    &lt;/parent&gt;</span><br><span class=\"line\">    &lt;properties&gt;</span><br><span class=\"line\">        &lt;!-- spring cloud version --&gt;</span><br><span class=\"line\">        &lt;spring.cloud.version&gt;Camden.SR5&lt;/spring.cloud.version&gt;</span><br><span class=\"line\">        &lt;!-- svnkit version --&gt;</span><br><span class=\"line\">        &lt;svnkit.version&gt;1.9.0&lt;/svnkit.version&gt;</span><br><span class=\"line\">    &lt;/properties&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;!--仓库--&gt;</span><br><span class=\"line\">    &lt;repositories&gt;</span><br><span class=\"line\">        &lt;!--aliyun repository--&gt;</span><br><span class=\"line\">        &lt;repository&gt;</span><br><span class=\"line\">            &lt;id&gt;aliyun&lt;/id&gt;</span><br><span class=\"line\">            &lt;name&gt;aliyun nexus repository&lt;/name&gt;</span><br><span class=\"line\">            &lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public/&lt;/url&gt;</span><br><span class=\"line\">        &lt;/repository&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;/repositories&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;dependencies&gt;</span><br><span class=\"line\">        &lt;!-- spring cloud  config --&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;spring-cloud-config-server&lt;/artifactId&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br><span class=\"line\">        &lt;!-- spring cloud config svn repository --&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.tmatesoft.svnkit&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;svnkit&lt;/artifactId&gt;</span><br><span class=\"line\">            &lt;version&gt;$&#123;svnkit.version&#125;&lt;/version&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br><span class=\"line\">        &lt;!-- spring  boot security 访问控制 --&gt;</span><br><span class=\"line\">         &lt;dependency&gt;</span><br><span class=\"line\">             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">             &lt;artifactId&gt;spring-boot-starter-security&lt;/artifactId&gt;</span><br><span class=\"line\">         &lt;/dependency&gt;</span><br><span class=\"line\">    &lt;/dependencies&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;dependencyManagement&gt;</span><br><span class=\"line\">        &lt;!--spring cloud parent pom--&gt;</span><br><span class=\"line\">        &lt;dependencies&gt;</span><br><span class=\"line\">            &lt;dependency&gt;</span><br><span class=\"line\">                &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class=\"line\">                &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;</span><br><span class=\"line\">                &lt;version&gt;$&#123;spring.cloud.version&#125;&lt;/version&gt;</span><br><span class=\"line\">                &lt;type&gt;pom&lt;/type&gt;</span><br><span class=\"line\">                &lt;scope&gt;import&lt;/scope&gt;</span><br><span class=\"line\">            &lt;/dependency&gt;</span><br><span class=\"line\">        &lt;/dependencies&gt;</span><br><span class=\"line\">    &lt;/dependencyManagement&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;!--构建插件--&gt;</span><br><span class=\"line\">    &lt;build&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;plugins&gt;</span><br><span class=\"line\">            &lt;!--docker 插件--&gt;</span><br><span class=\"line\">            &lt;!--&lt;plugin&gt;</span><br><span class=\"line\">                &lt;groupId&gt;com.spotify&lt;/groupId&gt;</span><br><span class=\"line\">                &lt;artifactId&gt;docker-maven-plugin&lt;/artifactId&gt;</span><br><span class=\"line\">                &lt;version&gt;$&#123;maven.docker.version&#125;&lt;/version&gt;</span><br><span class=\"line\">                &lt;configuration&gt;</span><br><span class=\"line\">                    &amp;lt;!&amp;ndash;镜像名称&amp;ndash;&amp;gt;</span><br><span class=\"line\">                    &lt;imageName&gt;$&#123;docker.image.prefix&#125;/$&#123;project.artifactId&#125;&lt;/imageName&gt;</span><br><span class=\"line\">                    &amp;lt;!&amp;ndash;docker file位置&amp;ndash;&amp;gt;</span><br><span class=\"line\">                    &lt;dockerDirectory&gt;src/main/docker&lt;/dockerDirectory&gt;</span><br><span class=\"line\">                    &lt;resources&gt;</span><br><span class=\"line\">                        &lt;resource&gt;</span><br><span class=\"line\">                            &amp;lt;!&amp;ndash; 编译jar路径 &amp;ndash;&amp;gt;</span><br><span class=\"line\">                            &lt;targetPath&gt;/&lt;/targetPath&gt;</span><br><span class=\"line\">                            &amp;lt;!&amp;ndash;编译jar 所在文件夹&amp;ndash;&amp;gt;</span><br><span class=\"line\">                            &lt;directory&gt;$&#123;project.build.directory&#125;&lt;/directory&gt;</span><br><span class=\"line\">                            &amp;lt;!&amp;ndash;编译的jar 名称&amp;ndash;&amp;gt;</span><br><span class=\"line\">                            &lt;include&gt;$&#123;project.build.finalName&#125;.jar&lt;/include&gt;</span><br><span class=\"line\">                        &lt;/resource&gt;</span><br><span class=\"line\">                    &lt;/resources&gt;</span><br><span class=\"line\">                &lt;/configuration&gt;</span><br><span class=\"line\">            &lt;/plugin&gt;--&gt;</span><br><span class=\"line\">            &lt;!--指定编译jdk版本 默认为1.5--&gt;</span><br><span class=\"line\">            &lt;plugin&gt;</span><br><span class=\"line\">                &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;</span><br><span class=\"line\">                &lt;configuration&gt;</span><br><span class=\"line\">                    &lt;source&gt;1.8&lt;/source&gt;</span><br><span class=\"line\">                    &lt;target&gt;1.8&lt;/target&gt;</span><br><span class=\"line\">                    &lt;encoding&gt;UTF-8&lt;/encoding&gt;</span><br><span class=\"line\">                &lt;/configuration&gt;</span><br><span class=\"line\">            &lt;/plugin&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">            &lt;plugin&gt;</span><br><span class=\"line\">                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class=\"line\">            &lt;/plugin&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">            &lt;!-- 解决资源文件的编码问题 --&gt;</span><br><span class=\"line\">            &lt;plugin&gt;</span><br><span class=\"line\">                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class=\"line\">                &lt;artifactId&gt;maven-resources-plugin&lt;/artifactId&gt;</span><br><span class=\"line\">                &lt;configuration&gt;</span><br><span class=\"line\">                    &lt;encoding&gt;UTF-8&lt;/encoding&gt;</span><br><span class=\"line\">                &lt;/configuration&gt;</span><br><span class=\"line\">            &lt;/plugin&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;/plugins&gt;</span><br><span class=\"line\">    &lt;/build&gt;</span><br><span class=\"line\">&lt;/project&gt;</span><br></pre></td></tr></table></figure><p></p>\n<p>2：配置 application.yml<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># default port</span><br><span class=\"line\">server:</span><br><span class=\"line\">  port: 8888</span><br><span class=\"line\">spring:</span><br><span class=\"line\">  cloud:</span><br><span class=\"line\">    config:</span><br><span class=\"line\">      server:</span><br><span class=\"line\">        svn:</span><br><span class=\"line\">          # svn 配置仓库地址</span><br><span class=\"line\">          uri: https://repo.xujiuming.com/svn/ming/trunk/confDir</span><br><span class=\"line\">          # svn 访问账户</span><br><span class=\"line\">          username: ming</span><br><span class=\"line\">          # svn 访问密码</span><br><span class=\"line\">          password: mingpwd</span><br><span class=\"line\">          # 这个设置是访问时候没有带label默认的label  用处不大</span><br><span class=\"line\">          default-label: trunk</span><br><span class=\"line\">  # 使用 svn 作仓库  必须要填写</span><br><span class=\"line\">  profiles:</span><br><span class=\"line\">    active: subversion</span><br><span class=\"line\"></span><br><span class=\"line\"># 访问控制</span><br><span class=\"line\">security:</span><br><span class=\"line\">  user:</span><br><span class=\"line\">    name: ming</span><br><span class=\"line\">    password: ming</span><br><span class=\"line\">encrypt:</span><br><span class=\"line\">  # rsa 密钥 设定 使用resources 下的 configServer.keystore</span><br><span class=\"line\">  key-store:</span><br><span class=\"line\">    location: configServer.keystore</span><br><span class=\"line\">    alias: configServer</span><br><span class=\"line\">    #  生成 密钥时候的密码</span><br><span class=\"line\">    password: ming2</span><br><span class=\"line\">    # 生成 密钥时候的签名</span><br><span class=\"line\">    secret: ming1</span><br></pre></td></tr></table></figure><p></p>\n<p>3：生成敏感数据密钥包<br>必须替换jce相关jar 或者直接使用我选择的docker 镜像 那个镜像是替换好jce相关jar包的</p>\n<p>因为 config server 使用的是aes256 加密 所以必须替换jce 相关jar<br>就算使用rsa 加密方式 也是需要jce相关jar 的  因为他还是用的aes256加密<br>rsa 加密方式配置</p>\n<ul>\n<li>生成 rsa 密钥包  直接到控制台执行即可  使用的是jdk 的keytool <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">configserver rsa 秘钥生成命令 有效时间 10000天</span><br><span class=\"line\">keytool -genkeypair -alias configServer -keyalg RSA \\</span><br><span class=\"line\">-dname &quot;CN=ming,OU=ming,O=ming,L=ming,ST=ming,C=ming&quot; \\</span><br><span class=\"line\">-keypass ming1 \\</span><br><span class=\"line\">-keystore configServer.keystore \\</span><br><span class=\"line\">-storepass ming2 \\</span><br><span class=\"line\">-validity 10000 \\</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>配置中使用 数据加密</p>\n<ul>\n<li>使用加密字符串替换 原始字符串<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">访问 configServer的 &#123;[/encrypt],methods=[POST]&#125; 接口  参数为要加密的字符串  返回加密字符串</span><br><span class=\"line\">例如 加密前 字符串a   通过接口获取加密后字符串 b</span><br><span class=\"line\">在a配置的地方 使用 &#123;cipher&#125;b  替换a  即可 </span><br><span class=\"line\">加密前</span><br><span class=\"line\">passwd=a</span><br><span class=\"line\">加密后</span><br><span class=\"line\">passwd=&#123;cipher&#125;b</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>将生成的configServer.keystore 文件复制到resources目录中去<br>4:配置spring boot 项目启动类<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.ming;</span><br><span class=\"line\"></span><br><span class=\"line\">import org.springframework.boot.SpringApplication;</span><br><span class=\"line\">import org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class=\"line\">import org.springframework.cloud.config.server.EnableConfigServer;</span><br><span class=\"line\"></span><br><span class=\"line\">/** config server start class</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @author  ming</span><br><span class=\"line\"> * @date  2017-12-06 10:08</span><br><span class=\"line\"> * */</span><br><span class=\"line\">@EnableConfigServer</span><br><span class=\"line\">@SpringBootApplication</span><br><span class=\"line\">public class StartConfigServer &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        SpringApplication.run(StartConfigServer.class,args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p>\n<p>5:配置dockerfile<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM docker.io/fabric8/java-alpine-openjdk8-jdk</span><br><span class=\"line\">MAINTAINER &quot;ming&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"># create  workspace</span><br><span class=\"line\">RUN  mkdir /workspace</span><br><span class=\"line\"># copy app.jar</span><br><span class=\"line\">COPY target/configServer-1.0-SNAPSHOT.jar /workspace</span><br><span class=\"line\"># open port</span><br><span class=\"line\">EXPOSE 8888</span><br><span class=\"line\"># 运行jar</span><br><span class=\"line\">CMD  java -jar /workspace/configServer-1.0-SNAPSHOT.jar</span><br></pre></td></tr></table></figure><p></p>\n<p>6:打包成docker<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mvn package </span><br><span class=\"line\">sudo docker build -t config-server-ming:1.0.0 .</span><br></pre></td></tr></table></figure><p></p>\n<p>7：启动容器<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo docker run -d -p 8888:8888 --name mingconfigserver config-server-ming:1.0.0</span><br></pre></td></tr></table></figure><p></p>\n<p>8：访问配置<br>在svn仓库中建立ming/config-dev.yaml<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name: ming</span><br></pre></td></tr></table></figure><p></p>\n<p>浏览器访问 <a href=\"http://localhost:8888/ming/config-dev.yaml\" target=\"_blank\" rel=\"noopener\">http://localhost:8888/ming/config-dev.yaml</a></p>\n<p>实例地址: <a href=\"https://github.com/xuxianyu/springcloud/tree/master/configServerSvn\" target=\"_blank\" rel=\"noopener\">https://github.com/xuxianyu/springcloud/tree/master/configServerSvn</a></p>\n<h4 id=\"访问配置文件url-详细解释\"><a href=\"#访问配置文件url-详细解释\" class=\"headerlink\" title=\"访问配置文件url 详细解释\"></a>访问配置文件url 详细解释</h4><p>参数解释:<br>1:git<br>在git仓库中目录 配置文件的目录/配置文件前缀-配置文件后缀.配置文件类型  如在svn仓库目录下的ming/app-dev.yaml master分支  那么 master就是label app就是name  profiles就是dev  path就是app-dev.yaml git配置可以通过配置 区分文件夹 不是跟svn一样 把文件夹当作label </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name: 前缀</span><br><span class=\"line\">profiles: 后缀</span><br><span class=\"line\">label: 分支</span><br><span class=\"line\">path： 完整文件名</span><br></pre></td></tr></table></figure>\n<p>2:svn<br>在svn仓库中目录 配置文件的目录/配置文件前缀-配置文件后缀.配置文件类型  如在svn仓库目录下的ming/app-dev.yaml  那么 ming就是label app就是name  profiles就是dev  path就是app-dev.yaml<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name: 配置文件前缀</span><br><span class=\"line\">profiles: 配置文件后缀</span><br><span class=\"line\">label: 文件夹目录名称</span><br><span class=\"line\">path:配置文件全称包含.后面的类型</span><br></pre></td></tr></table></figure><p></p>\n<p>访问properties、yaml、json格式 访问方式<br>/{name}/{profiles:.*[^-].*}<br>/{name}/{profiles}/{label:.*}<br>/{name}-{profiles}.properties<br>/{label}/{name}<br>/{profiles}.properties<br>/{name}-{profiles}.json<br>/{label}/{name}-{profiles}.json   </p>\n<p>访问非 java适配的配置文件 只能以文本模式 读取<br>参考博客地址:<a href=\"http://www.voidcn.com/article/p-yhrhfyla-bqr.html\" target=\"_blank\" rel=\"noopener\">http://www.voidcn.com/article/p-yhrhfyla-bqr.html</a><br>/{name}/{profile}/{label}/{path}</p>\n<h4 id=\"实际案例\"><a href=\"#实际案例\" class=\"headerlink\" title=\"实际案例\"></a>实际案例</h4><p>1：java web项目启动拉取配置中心配置<br>在spring cloud 接入config server的项目中<br>bootstrap.yml 优先级最高 在一启动就会加载 在这里配置 链接config server的配置、链接配置中心的配置 等等<br>application.yml是在config client 拉取配置后才加载 如果在这里配置链接config server配置不会生效</p>\n<p>增加pom依赖<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">   &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class=\"line\">   &lt;artifactId&gt;spring-cloud-starter-config&lt;/artifactId&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p></p>\n<p>配置bootstrap.yml<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">spring:</span><br><span class=\"line\"> cloud:</span><br><span class=\"line\">     config:</span><br><span class=\"line\">       # 拉取后缀为dev的配置</span><br><span class=\"line\">       profile: dev</span><br><span class=\"line\">       # 拉取master分支的配置</span><br><span class=\"line\">       label: master</span><br><span class=\"line\">       username: ming</span><br><span class=\"line\">       password: ming</span><br><span class=\"line\">       uri: &quot;http://localhost:8888&quot;</span><br><span class=\"line\">       #开启 以服务方式访问配置中心</span><br><span class=\"line\">       #discovery:</span><br><span class=\"line\">       #  enabled: true</span><br><span class=\"line\">       #  service-id: CONFIG</span><br><span class=\"line\">       #开启预检</span><br><span class=\"line\">       #fail-fast: true</span><br><span class=\"line\">       #重试参数</span><br><span class=\"line\">       #retry:</span><br><span class=\"line\">         #重试间隔</span><br><span class=\"line\">         #multiplier: 2000</span><br><span class=\"line\">         #下一个间隔</span><br><span class=\"line\">         #initial-interval: 2000</span><br><span class=\"line\">         #最大间隔</span><br><span class=\"line\">         #max-interval: 5000</span><br><span class=\"line\">         #最大重试次数</span><br><span class=\"line\">         #max-attempts: 3</span><br><span class=\"line\"></span><br><span class=\"line\"> application:</span><br><span class=\"line\">   # 拉取前缀为ming的配置</span><br><span class=\"line\">   name: ming</span><br><span class=\"line\">       #fail-fast: true</span><br></pre></td></tr></table></figure><p></p>\n<p>在配置仓库配置相关配置<br>然后启动项目 打个断点 查询spring env bean 即可查看是否加载到配置中心的配置</p>\n<p>2: docker启动 时候拉取容器环境配置<br>思路: 重写镜像的 启动命令 在启动的时候拉取配置中心的配置覆盖容器中的配置文件<br>如果配置中心设置的账户密码 需要获取配置中心 访问接口的token<br>浏览器访问一下配置输入账户密码  抓http请求包 报头中有个 Authorization: Basic xxxxxxx 报头<br>使用curl命令获取配置<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -H &quot;Authorization: Basic xxxxxxx&quot; http://configServer地址//&#123;name&#125;/&#123;profile&#125;/&#123;label&#125;/&#123;path&#125; &gt; /etc/nginx/conf.d/default.conf</span><br></pre></td></tr></table></figure><p></p>\n<p>调整dockerfile中的默认启动命令<br>CMD 或者ENTRYPOINT  一定要用&amp;&amp;  不能使用&amp; 这个是并行执行 但是大部分容器是需要先加载完毕配置才能启动的<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ENTRYPOINT curl -H &quot;Authorization: Basic xxxxxxx&quot; http://configServer地址//&#123;name&#125;/&#123;profile&#125;/&#123;label&#125;/&#123;path&#125; &gt; /etc/nginx/conf.d/default.conf &amp;&amp; run.sh</span><br></pre></td></tr></table></figure><p></p>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结:\"></a>总结:</h4><p>总的来说 spring cloud config server基本满足需求<br>如果需要什么配置操作审计 完全可以在svn或者git操作上进行<br>如果是java项目可以通过引入 spring cloud config client jar来使用<br>非java项目 可以通过http接口获取配置信息<br>关于高可用 就是多启动几台config server 注册到注册中心就行 客户端通过注册中心去访问http接口</p>"},{"title":"spring boot  + quartz实现 动态定时任务笔记及其想法","abbrlink":"b7d64853","date":"2017-11-10T16:00:00.000Z","_content":"#### quartz 集成 到spring boot 中\n有个偷懒的方法 直接引用 这个  但是这个不是spring组织搞 的\n\n1:gradle 依赖配置\n```\nbuildscript {\n\text {\n\t\tspringBootVersion = '1.5.8.RELEASE'\n\t}\n\trepositories {\n\t\tmavenCentral()\n\t}\n\tdependencies {\n\t\tclasspath(\"org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}\")\n\t}\n}\n\napply plugin: 'java'\napply plugin: 'eclipse'\napply plugin: 'org.springframework.boot'\n\ngroup = 'com.ming'\nversion = '1.0'\nsourceCompatibility = 1.8\ntargetCompatibility = 1.8\njar {\n\t//指定 main class\n\tmanifest{\n\t\tattributes 'Main-Class': 'com.ming.StartMing'\n\t}\n}\n\nrepositories {\n\n\tmaven { url \"http://maven.aliyun.com/nexus/content/groups/public/\" }\n\tmaven { url \"http://repo.maven.apache.org/maven2\" }\n\tmavenCentral()\n}\n\n\ndependencies {\n\tcompile('org.springframework.boot:spring-boot-starter-actuator')\n\tcompile('org.springframework.boot:spring-boot-starter-aop')\n\tcompile('org.springframework.boot:spring-boot-starter-data-jpa')\n\tcompile('org.springframework.boot:spring-boot-starter-mail')\n\tcompile('org.springframework.boot:spring-boot-starter-thymeleaf')\n\tcompile('org.springframework.boot:spring-boot-starter-validation')\n\tcompile('org.springframework.boot:spring-boot-starter-web')\n\truntime('org.springframework.boot:spring-boot-devtools')\n\truntime('mysql:mysql-connector-java')\n\t//lombok http://blog.csdn.net/victor_cindy1/article/details/72772841\n\tcompile('org.projectlombok:lombok')\n\ttestCompile('org.springframework.boot:spring-boot-starter-test')\n\tcompile group: 'de.chandre.quartz', name: 'spring-boot-starter-quartz', version: '1.0.1'\n\tcompile group: 'org.apache.shiro', name: 'shiro-spring', version: '1.4.0'\n\tcompile group: 'org.apache.shiro', name: 'shiro-core', version: '1.4.0'\n\tcompile group: 'com.google.guava', name: 'guava', version: '22.0'\n\tcompile group: 'com.alibaba', name: 'fastjson', version: '1.2.33'\n\tcompile group: 'org.apache.commons', name: 'commons-lang3', version: '3.6'\n\tcompile group: 'org.apache.httpcomponents', name: 'httpcore', version: '4.4.6'\n\tcompile(group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.3') {\n\t\texclude(module: 'commons-logging')\n\t}\n\tcompile group: 'commons-io', name: 'commons-io', version: '2.5'\n\tcompile group: 'commons-codec', name: 'commons-codec', version: '1.8'\n}\n\n\n\n```\n\n\n2:指明 quartz 配置文件\n这个是那个starter-quartz中的配置\n```\nquartz:\n  properties-config-location: classpath:/config/application-quatrz.properties\n```\n3:配置 quartz  \n就是从 quartz 中copy出来的 改成jdbc 存储\n```\norg.quartz.scheduler.instanceName:DefaultQuartzScheduler\norg.quartz.scheduler.rmi.export:false\norg.quartz.scheduler.rmi.proxy:false\norg.quartz.scheduler.wrapJobExecutionInUserTransaction:false\norg.quartz.threadPool.class:org.quartz.simpl.SimpleThreadPool\norg.quartz.threadPool.threadCount:10\norg.quartz.threadPool.threadPriority:5\norg.quartz.threadPool.threadsInheritContextClassLoaderOfInitializingThread:true\norg.quartz.jobStore.misfireThreshold:60000\n#org.quartz.jobStore.class: org.quartz.simpl.RAMJobStore\n# jdbc\norg.quartz.jobStore.class=org.quartz.impl.jdbcjobstore.JobStoreTX\norg.quartz.jobStore.tablePrefix=QRTZ_\norg.quartz.jobStore.dataSource=qzDS\norg.quartz.dataSource.qzDS.driver=com.mysql.jdbc.Driver\norg.quartz.dataSource.qzDS.URL=jdbc:mysql://localhost:3306/ming?useUnicode=true&characterEncoding=UTF-8\norg.quartz.dataSource.qzDS.user=root\norg.quartz.dataSource.qzDS.password=ming1234\norg.quartz.dataSource.qzDS.maxConnections=10\n\n```\n4:重头戏 代理job  使用spring bean 中定义的job \n先声明  这个是抄袭的 加上我自己的一点点想法   \n原方案 只能支持spring bean 的 我扩展了一波 可使用groovy 来扩充配置、扩充bean  \n前几个步骤都是集成进来 这一步 是将 quartz 的job 代理执行 使用注册在spring 中的job bean 执行 任务 \n* 方便管理\n* 可以使用 groovy 动态注入配置,job\n* 方便嵌入其他业务 如日志 等等 \n4.1:继承spring中QuartzJobBean 实现基础的job抽象类\n通过建立抽象方法doExecute 将任务执行内容代理到实现这个抽象方法的job中 \n```\nimport org.quartz.DisallowConcurrentExecution;\nimport org.quartz.JobExecutionContext;\nimport org.quartz.JobExecutionException;\nimport org.quartz.PersistJobDataAfterExecution;\nimport org.springframework.scheduling.quartz.QuartzJobBean;\n\nimport java.io.Serializable;\n\n/**\n * 基础job  抽象类\n *\n * @author ming\n * @date 2017-11-09 16:32\n */\n//表示 Quartz 将会在成功执行 execute() 方法后（没有抛出异常）更新 JobDetail 的 JobDataMap，下一次执行相同的任务（JobDetail）将会得到更新后的值，而不是原始的值。\n@PersistJobDataAfterExecution\n//禁止 并发执行 job\n@DisallowConcurrentExecution\npublic abstract class BaseJob extends QuartzJobBean implements Serializable {\n\n\n    @Override\n    protected void executeInternal(JobExecutionContext context) throws JobExecutionException {\n        doExecute(context);\n    }\n\n    /**\n     * 使用代理执行\n     *\n     * @param context\n     * @throws JobExecutionException\n     * @author ming\n     * @date 2017-11-09 16:08\n     */\n    protected abstract void doExecute(JobExecutionContext context) throws JobExecutionException;\n}\n```\n4.2：建立代理执行类\n实现doExecute 方法 \n第一 指定 job实例来源于spring 容器\n第二 可以插入其他业务 例如日志 之类的\n```\n/**\n * 代理执行 job  前后处理日志\n *\n * @author ming\n * @date 2017-11-09 16:11\n */\n@Slf4j\npublic class ProxyJob extends BaseJob {\n\n    @Override\n    protected void doExecute(JobExecutionContext context) throws JobExecutionException {\n       /* if (schedulerManageDao == null) {\n            schedulerManageDao = applicationContext.getBean(SchedulerManageDao.class);\n        }*/\n        // 执行\n        JobDetail jobDetail = context.getJobDetail();\n        String jobName = jobDetail.getKey().getName();\n        BaseProxyJob job;\n        Date beginTime = new Date();\n        // Long dispatchId = schedulerManageDao.addDispatchLog(ApplicationConfig.SCHEDULER_CLUSTER_NAME,  ApplicationConfig.SCHEDULER_INSTANCE_NAME, beginTime.getTime(), 0L, jobName, ScheduleExecuteLog.STATUS_BEGIN, 0L, \"\");\n        try {\n            job = SpringBeanManager.getbeanByNameAndType(jobName, BaseProxyJob.class);\n            job.execute();\n            log.info(\"[执行成功]\" + jobName);\n            Date endTime = new Date();\n            // 记录任务完成\n            //schedulerManageDao.updateDispatchLogById(dispatchId, ScheduleExecuteLog.STATUS_SUCCESS, endTime.getTime(), endTime.getTime() - beginTime.getTime(), null);\n        } catch (Exception e) {\n            log.error(\"[执行异常]\" + jobName + \":::\" + e.getMessage());\n            Date endTime = new Date();\n            // 打印异常并发送异常\n            // String exceptionMessage = ExceptionUtils.getStackTrace(e);\n            //logger.error(\"[doProcess][job({}) 异常：{}]\", jobName, exceptionMessage);\n            //if (dispatchId != null) {\n            //    schedulerManageDao.updateDispatchLogById(dispatchId, ScheduleExecuteLog.STATUS_FAILURE, endTime.getTime(), endTime.getTime() - beginTime.getTime(), exceptionMessage);\n            //}\n        }\n    }\n}\n\n```\n4.3:建立基础代理job抽象类\n```\n\nimport lombok.extern.slf4j.Slf4j;\n\n/**\n * 定时器具体任务实现任务基类。所有子类需要继承它.\n * <pre>\n *     2. 使用{@link #setMemo(String)}可以设置任务结束后备注\n *     3. 当任务出现异常时，会被记录到日志里并标记任务失败。所以任务的异常需要抛出来，不要catch掉不抛出。\n *     4. 记得实现类加{@link org.springframework.stereotype.Service}注解，让它可以被spring扫描到\n * </pre>\n *\n * @author ming\n * @date 2017-11-09 16:32\n */\n@Slf4j\npublic abstract class BaseProxyJob {\n\n    /**\n     * 任务执行完之后的备注\n     */\n    private String memo;\n\n    /**\n     * 实现\n     */\n    public abstract void execute();\n\n    public String getMemo() {\n        return memo;\n    }\n\n    /**\n     * 设置执行后备注\n     *\n     * @param memo 备注\n     */\n    public void setMemo(String memo) {\n        this.memo = memo;\n    }\n}\n```\n4.4:细分job类型\n这个是在上面的基础上继续细化job的来源类型\n方便针对不同的job来进行处理 例如 groovy 脚本写的抽象类 需要从数据库中读取相关数据 动态注入到spring 容器中 \n所有的来自groovy 脚本的job抽象类\n```\n/**\n * groovy job 实现这个接口\n *\n * @author ming\n * @date 2017-11-08 16:59\n */\npublic abstract class BaseScriptJob extends BaseProxyJob {\n}\n```\n所有直接java写的编译好的job抽象类\n```\n\n/**\n * java 实现的 实现这个接口\n *\n * @author ming\n * @date 2017-11-08 16:59\n */\npublic abstract class BaseSimpleJob extends BaseProxyJob {\n}\n```\n具体demo请参考:http://github.xujiuming.com  下mingqz项目 \n####总结:通过编写抽象类  将 具体要执行的业务 代理执行掉  这样 就可以利用spring 的特性 去用groovy 做动态job 避免每次变更 都要从新部署  \n","source":"_posts/spring/springboot-集成quartz笔记(支持groovy-script-job).md","raw":"---\ntitle: spring boot  + quartz实现 动态定时任务笔记及其想法\ncategories: 骚想法\ntags:\n  - spring\n  - quartz\nabbrlink: b7d64853\ndate: 2017-11-11 00:00:00\n---\n#### quartz 集成 到spring boot 中\n有个偷懒的方法 直接引用 这个  但是这个不是spring组织搞 的\n\n1:gradle 依赖配置\n```\nbuildscript {\n\text {\n\t\tspringBootVersion = '1.5.8.RELEASE'\n\t}\n\trepositories {\n\t\tmavenCentral()\n\t}\n\tdependencies {\n\t\tclasspath(\"org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}\")\n\t}\n}\n\napply plugin: 'java'\napply plugin: 'eclipse'\napply plugin: 'org.springframework.boot'\n\ngroup = 'com.ming'\nversion = '1.0'\nsourceCompatibility = 1.8\ntargetCompatibility = 1.8\njar {\n\t//指定 main class\n\tmanifest{\n\t\tattributes 'Main-Class': 'com.ming.StartMing'\n\t}\n}\n\nrepositories {\n\n\tmaven { url \"http://maven.aliyun.com/nexus/content/groups/public/\" }\n\tmaven { url \"http://repo.maven.apache.org/maven2\" }\n\tmavenCentral()\n}\n\n\ndependencies {\n\tcompile('org.springframework.boot:spring-boot-starter-actuator')\n\tcompile('org.springframework.boot:spring-boot-starter-aop')\n\tcompile('org.springframework.boot:spring-boot-starter-data-jpa')\n\tcompile('org.springframework.boot:spring-boot-starter-mail')\n\tcompile('org.springframework.boot:spring-boot-starter-thymeleaf')\n\tcompile('org.springframework.boot:spring-boot-starter-validation')\n\tcompile('org.springframework.boot:spring-boot-starter-web')\n\truntime('org.springframework.boot:spring-boot-devtools')\n\truntime('mysql:mysql-connector-java')\n\t//lombok http://blog.csdn.net/victor_cindy1/article/details/72772841\n\tcompile('org.projectlombok:lombok')\n\ttestCompile('org.springframework.boot:spring-boot-starter-test')\n\tcompile group: 'de.chandre.quartz', name: 'spring-boot-starter-quartz', version: '1.0.1'\n\tcompile group: 'org.apache.shiro', name: 'shiro-spring', version: '1.4.0'\n\tcompile group: 'org.apache.shiro', name: 'shiro-core', version: '1.4.0'\n\tcompile group: 'com.google.guava', name: 'guava', version: '22.0'\n\tcompile group: 'com.alibaba', name: 'fastjson', version: '1.2.33'\n\tcompile group: 'org.apache.commons', name: 'commons-lang3', version: '3.6'\n\tcompile group: 'org.apache.httpcomponents', name: 'httpcore', version: '4.4.6'\n\tcompile(group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.3') {\n\t\texclude(module: 'commons-logging')\n\t}\n\tcompile group: 'commons-io', name: 'commons-io', version: '2.5'\n\tcompile group: 'commons-codec', name: 'commons-codec', version: '1.8'\n}\n\n\n\n```\n\n\n2:指明 quartz 配置文件\n这个是那个starter-quartz中的配置\n```\nquartz:\n  properties-config-location: classpath:/config/application-quatrz.properties\n```\n3:配置 quartz  \n就是从 quartz 中copy出来的 改成jdbc 存储\n```\norg.quartz.scheduler.instanceName:DefaultQuartzScheduler\norg.quartz.scheduler.rmi.export:false\norg.quartz.scheduler.rmi.proxy:false\norg.quartz.scheduler.wrapJobExecutionInUserTransaction:false\norg.quartz.threadPool.class:org.quartz.simpl.SimpleThreadPool\norg.quartz.threadPool.threadCount:10\norg.quartz.threadPool.threadPriority:5\norg.quartz.threadPool.threadsInheritContextClassLoaderOfInitializingThread:true\norg.quartz.jobStore.misfireThreshold:60000\n#org.quartz.jobStore.class: org.quartz.simpl.RAMJobStore\n# jdbc\norg.quartz.jobStore.class=org.quartz.impl.jdbcjobstore.JobStoreTX\norg.quartz.jobStore.tablePrefix=QRTZ_\norg.quartz.jobStore.dataSource=qzDS\norg.quartz.dataSource.qzDS.driver=com.mysql.jdbc.Driver\norg.quartz.dataSource.qzDS.URL=jdbc:mysql://localhost:3306/ming?useUnicode=true&characterEncoding=UTF-8\norg.quartz.dataSource.qzDS.user=root\norg.quartz.dataSource.qzDS.password=ming1234\norg.quartz.dataSource.qzDS.maxConnections=10\n\n```\n4:重头戏 代理job  使用spring bean 中定义的job \n先声明  这个是抄袭的 加上我自己的一点点想法   \n原方案 只能支持spring bean 的 我扩展了一波 可使用groovy 来扩充配置、扩充bean  \n前几个步骤都是集成进来 这一步 是将 quartz 的job 代理执行 使用注册在spring 中的job bean 执行 任务 \n* 方便管理\n* 可以使用 groovy 动态注入配置,job\n* 方便嵌入其他业务 如日志 等等 \n4.1:继承spring中QuartzJobBean 实现基础的job抽象类\n通过建立抽象方法doExecute 将任务执行内容代理到实现这个抽象方法的job中 \n```\nimport org.quartz.DisallowConcurrentExecution;\nimport org.quartz.JobExecutionContext;\nimport org.quartz.JobExecutionException;\nimport org.quartz.PersistJobDataAfterExecution;\nimport org.springframework.scheduling.quartz.QuartzJobBean;\n\nimport java.io.Serializable;\n\n/**\n * 基础job  抽象类\n *\n * @author ming\n * @date 2017-11-09 16:32\n */\n//表示 Quartz 将会在成功执行 execute() 方法后（没有抛出异常）更新 JobDetail 的 JobDataMap，下一次执行相同的任务（JobDetail）将会得到更新后的值，而不是原始的值。\n@PersistJobDataAfterExecution\n//禁止 并发执行 job\n@DisallowConcurrentExecution\npublic abstract class BaseJob extends QuartzJobBean implements Serializable {\n\n\n    @Override\n    protected void executeInternal(JobExecutionContext context) throws JobExecutionException {\n        doExecute(context);\n    }\n\n    /**\n     * 使用代理执行\n     *\n     * @param context\n     * @throws JobExecutionException\n     * @author ming\n     * @date 2017-11-09 16:08\n     */\n    protected abstract void doExecute(JobExecutionContext context) throws JobExecutionException;\n}\n```\n4.2：建立代理执行类\n实现doExecute 方法 \n第一 指定 job实例来源于spring 容器\n第二 可以插入其他业务 例如日志 之类的\n```\n/**\n * 代理执行 job  前后处理日志\n *\n * @author ming\n * @date 2017-11-09 16:11\n */\n@Slf4j\npublic class ProxyJob extends BaseJob {\n\n    @Override\n    protected void doExecute(JobExecutionContext context) throws JobExecutionException {\n       /* if (schedulerManageDao == null) {\n            schedulerManageDao = applicationContext.getBean(SchedulerManageDao.class);\n        }*/\n        // 执行\n        JobDetail jobDetail = context.getJobDetail();\n        String jobName = jobDetail.getKey().getName();\n        BaseProxyJob job;\n        Date beginTime = new Date();\n        // Long dispatchId = schedulerManageDao.addDispatchLog(ApplicationConfig.SCHEDULER_CLUSTER_NAME,  ApplicationConfig.SCHEDULER_INSTANCE_NAME, beginTime.getTime(), 0L, jobName, ScheduleExecuteLog.STATUS_BEGIN, 0L, \"\");\n        try {\n            job = SpringBeanManager.getbeanByNameAndType(jobName, BaseProxyJob.class);\n            job.execute();\n            log.info(\"[执行成功]\" + jobName);\n            Date endTime = new Date();\n            // 记录任务完成\n            //schedulerManageDao.updateDispatchLogById(dispatchId, ScheduleExecuteLog.STATUS_SUCCESS, endTime.getTime(), endTime.getTime() - beginTime.getTime(), null);\n        } catch (Exception e) {\n            log.error(\"[执行异常]\" + jobName + \":::\" + e.getMessage());\n            Date endTime = new Date();\n            // 打印异常并发送异常\n            // String exceptionMessage = ExceptionUtils.getStackTrace(e);\n            //logger.error(\"[doProcess][job({}) 异常：{}]\", jobName, exceptionMessage);\n            //if (dispatchId != null) {\n            //    schedulerManageDao.updateDispatchLogById(dispatchId, ScheduleExecuteLog.STATUS_FAILURE, endTime.getTime(), endTime.getTime() - beginTime.getTime(), exceptionMessage);\n            //}\n        }\n    }\n}\n\n```\n4.3:建立基础代理job抽象类\n```\n\nimport lombok.extern.slf4j.Slf4j;\n\n/**\n * 定时器具体任务实现任务基类。所有子类需要继承它.\n * <pre>\n *     2. 使用{@link #setMemo(String)}可以设置任务结束后备注\n *     3. 当任务出现异常时，会被记录到日志里并标记任务失败。所以任务的异常需要抛出来，不要catch掉不抛出。\n *     4. 记得实现类加{@link org.springframework.stereotype.Service}注解，让它可以被spring扫描到\n * </pre>\n *\n * @author ming\n * @date 2017-11-09 16:32\n */\n@Slf4j\npublic abstract class BaseProxyJob {\n\n    /**\n     * 任务执行完之后的备注\n     */\n    private String memo;\n\n    /**\n     * 实现\n     */\n    public abstract void execute();\n\n    public String getMemo() {\n        return memo;\n    }\n\n    /**\n     * 设置执行后备注\n     *\n     * @param memo 备注\n     */\n    public void setMemo(String memo) {\n        this.memo = memo;\n    }\n}\n```\n4.4:细分job类型\n这个是在上面的基础上继续细化job的来源类型\n方便针对不同的job来进行处理 例如 groovy 脚本写的抽象类 需要从数据库中读取相关数据 动态注入到spring 容器中 \n所有的来自groovy 脚本的job抽象类\n```\n/**\n * groovy job 实现这个接口\n *\n * @author ming\n * @date 2017-11-08 16:59\n */\npublic abstract class BaseScriptJob extends BaseProxyJob {\n}\n```\n所有直接java写的编译好的job抽象类\n```\n\n/**\n * java 实现的 实现这个接口\n *\n * @author ming\n * @date 2017-11-08 16:59\n */\npublic abstract class BaseSimpleJob extends BaseProxyJob {\n}\n```\n具体demo请参考:http://github.xujiuming.com  下mingqz项目 \n####总结:通过编写抽象类  将 具体要执行的业务 代理执行掉  这样 就可以利用spring 的特性 去用groovy 做动态job 避免每次变更 都要从新部署  \n","slug":"spring/springboot-集成quartz笔记(支持groovy-script-job)","published":1,"updated":"2018-08-17T08:10:03.923Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjo9uau3000btmwczphcgorww","content":"<h4 id=\"quartz-集成-到spring-boot-中\"><a href=\"#quartz-集成-到spring-boot-中\" class=\"headerlink\" title=\"quartz 集成 到spring boot 中\"></a>quartz 集成 到spring boot 中</h4><p>有个偷懒的方法 直接引用 这个 但是这个不是spring组织搞 的</p><p>1:gradle 依赖配置<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">buildscript &#123;</span><br><span class=\"line\">\text &#123;</span><br><span class=\"line\">\t\tspringBootVersion = &apos;1.5.8.RELEASE&apos;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\trepositories &#123;</span><br><span class=\"line\">\t\tmavenCentral()</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tdependencies &#123;</span><br><span class=\"line\">\t\tclasspath(&quot;org.springframework.boot:spring-boot-gradle-plugin:$&#123;springBootVersion&#125;&quot;)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">apply plugin: &apos;java&apos;</span><br><span class=\"line\">apply plugin: &apos;eclipse&apos;</span><br><span class=\"line\">apply plugin: &apos;org.springframework.boot&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">group = &apos;com.ming&apos;</span><br><span class=\"line\">version = &apos;1.0&apos;</span><br><span class=\"line\">sourceCompatibility = 1.8</span><br><span class=\"line\">targetCompatibility = 1.8</span><br><span class=\"line\">jar &#123;</span><br><span class=\"line\">\t//指定 main class</span><br><span class=\"line\">\tmanifest&#123;</span><br><span class=\"line\">\t\tattributes &apos;Main-Class&apos;: &apos;com.ming.StartMing&apos;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">repositories &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tmaven &#123; url &quot;http://maven.aliyun.com/nexus/content/groups/public/&quot; &#125;</span><br><span class=\"line\">\tmaven &#123; url &quot;http://repo.maven.apache.org/maven2&quot; &#125;</span><br><span class=\"line\">\tmavenCentral()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">dependencies &#123;</span><br><span class=\"line\">\tcompile(&apos;org.springframework.boot:spring-boot-starter-actuator&apos;)</span><br><span class=\"line\">\tcompile(&apos;org.springframework.boot:spring-boot-starter-aop&apos;)</span><br><span class=\"line\">\tcompile(&apos;org.springframework.boot:spring-boot-starter-data-jpa&apos;)</span><br><span class=\"line\">\tcompile(&apos;org.springframework.boot:spring-boot-starter-mail&apos;)</span><br><span class=\"line\">\tcompile(&apos;org.springframework.boot:spring-boot-starter-thymeleaf&apos;)</span><br><span class=\"line\">\tcompile(&apos;org.springframework.boot:spring-boot-starter-validation&apos;)</span><br><span class=\"line\">\tcompile(&apos;org.springframework.boot:spring-boot-starter-web&apos;)</span><br><span class=\"line\">\truntime(&apos;org.springframework.boot:spring-boot-devtools&apos;)</span><br><span class=\"line\">\truntime(&apos;mysql:mysql-connector-java&apos;)</span><br><span class=\"line\">\t//lombok http://blog.csdn.net/victor_cindy1/article/details/72772841</span><br><span class=\"line\">\tcompile(&apos;org.projectlombok:lombok&apos;)</span><br><span class=\"line\">\ttestCompile(&apos;org.springframework.boot:spring-boot-starter-test&apos;)</span><br><span class=\"line\">\tcompile group: &apos;de.chandre.quartz&apos;, name: &apos;spring-boot-starter-quartz&apos;, version: &apos;1.0.1&apos;</span><br><span class=\"line\">\tcompile group: &apos;org.apache.shiro&apos;, name: &apos;shiro-spring&apos;, version: &apos;1.4.0&apos;</span><br><span class=\"line\">\tcompile group: &apos;org.apache.shiro&apos;, name: &apos;shiro-core&apos;, version: &apos;1.4.0&apos;</span><br><span class=\"line\">\tcompile group: &apos;com.google.guava&apos;, name: &apos;guava&apos;, version: &apos;22.0&apos;</span><br><span class=\"line\">\tcompile group: &apos;com.alibaba&apos;, name: &apos;fastjson&apos;, version: &apos;1.2.33&apos;</span><br><span class=\"line\">\tcompile group: &apos;org.apache.commons&apos;, name: &apos;commons-lang3&apos;, version: &apos;3.6&apos;</span><br><span class=\"line\">\tcompile group: &apos;org.apache.httpcomponents&apos;, name: &apos;httpcore&apos;, version: &apos;4.4.6&apos;</span><br><span class=\"line\">\tcompile(group: &apos;org.apache.httpcomponents&apos;, name: &apos;httpclient&apos;, version: &apos;4.5.3&apos;) &#123;</span><br><span class=\"line\">\t\texclude(module: &apos;commons-logging&apos;)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tcompile group: &apos;commons-io&apos;, name: &apos;commons-io&apos;, version: &apos;2.5&apos;</span><br><span class=\"line\">\tcompile group: &apos;commons-codec&apos;, name: &apos;commons-codec&apos;, version: &apos;1.8&apos;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p>\n<p>2:指明 quartz 配置文件<br>这个是那个starter-quartz中的配置<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">quartz:</span><br><span class=\"line\">  properties-config-location: classpath:/config/application-quatrz.properties</span><br></pre></td></tr></table></figure><p></p>\n<p>3:配置 quartz<br>就是从 quartz 中copy出来的 改成jdbc 存储<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">org.quartz.scheduler.instanceName:DefaultQuartzScheduler</span><br><span class=\"line\">org.quartz.scheduler.rmi.export:false</span><br><span class=\"line\">org.quartz.scheduler.rmi.proxy:false</span><br><span class=\"line\">org.quartz.scheduler.wrapJobExecutionInUserTransaction:false</span><br><span class=\"line\">org.quartz.threadPool.class:org.quartz.simpl.SimpleThreadPool</span><br><span class=\"line\">org.quartz.threadPool.threadCount:10</span><br><span class=\"line\">org.quartz.threadPool.threadPriority:5</span><br><span class=\"line\">org.quartz.threadPool.threadsInheritContextClassLoaderOfInitializingThread:true</span><br><span class=\"line\">org.quartz.jobStore.misfireThreshold:60000</span><br><span class=\"line\">#org.quartz.jobStore.class: org.quartz.simpl.RAMJobStore</span><br><span class=\"line\"># jdbc</span><br><span class=\"line\">org.quartz.jobStore.class=org.quartz.impl.jdbcjobstore.JobStoreTX</span><br><span class=\"line\">org.quartz.jobStore.tablePrefix=QRTZ_</span><br><span class=\"line\">org.quartz.jobStore.dataSource=qzDS</span><br><span class=\"line\">org.quartz.dataSource.qzDS.driver=com.mysql.jdbc.Driver</span><br><span class=\"line\">org.quartz.dataSource.qzDS.URL=jdbc:mysql://localhost:3306/ming?useUnicode=true&amp;characterEncoding=UTF-8</span><br><span class=\"line\">org.quartz.dataSource.qzDS.user=root</span><br><span class=\"line\">org.quartz.dataSource.qzDS.password=ming1234</span><br><span class=\"line\">org.quartz.dataSource.qzDS.maxConnections=10</span><br></pre></td></tr></table></figure><p></p>\n<p>4:重头戏 代理job  使用spring bean 中定义的job<br>先声明  这个是抄袭的 加上我自己的一点点想法<br>原方案 只能支持spring bean 的 我扩展了一波 可使用groovy 来扩充配置、扩充bean<br>前几个步骤都是集成进来 这一步 是将 quartz 的job 代理执行 使用注册在spring 中的job bean 执行 任务 </p>\n<ul>\n<li>方便管理</li>\n<li>可以使用 groovy 动态注入配置,job</li>\n<li>方便嵌入其他业务 如日志 等等<br>4.1:继承spring中QuartzJobBean 实现基础的job抽象类<br>通过建立抽象方法doExecute 将任务执行内容代理到实现这个抽象方法的job中 <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import org.quartz.DisallowConcurrentExecution;</span><br><span class=\"line\">import org.quartz.JobExecutionContext;</span><br><span class=\"line\">import org.quartz.JobExecutionException;</span><br><span class=\"line\">import org.quartz.PersistJobDataAfterExecution;</span><br><span class=\"line\">import org.springframework.scheduling.quartz.QuartzJobBean;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.io.Serializable;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 基础job  抽象类</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @author ming</span><br><span class=\"line\"> * @date 2017-11-09 16:32</span><br><span class=\"line\"> */</span><br><span class=\"line\">//表示 Quartz 将会在成功执行 execute() 方法后（没有抛出异常）更新 JobDetail 的 JobDataMap，下一次执行相同的任务（JobDetail）将会得到更新后的值，而不是原始的值。</span><br><span class=\"line\">@PersistJobDataAfterExecution</span><br><span class=\"line\">//禁止 并发执行 job</span><br><span class=\"line\">@DisallowConcurrentExecution</span><br><span class=\"line\">public abstract class BaseJob extends QuartzJobBean implements Serializable &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected void executeInternal(JobExecutionContext context) throws JobExecutionException &#123;</span><br><span class=\"line\">        doExecute(context);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 使用代理执行</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param context</span><br><span class=\"line\">     * @throws JobExecutionException</span><br><span class=\"line\">     * @author ming</span><br><span class=\"line\">     * @date 2017-11-09 16:08</span><br><span class=\"line\">     */</span><br><span class=\"line\">    protected abstract void doExecute(JobExecutionContext context) throws JobExecutionException;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>4.2：建立代理执行类<br>实现doExecute 方法<br>第一 指定 job实例来源于spring 容器<br>第二 可以插入其他业务 例如日志 之类的<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * 代理执行 job  前后处理日志</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @author ming</span><br><span class=\"line\"> * @date 2017-11-09 16:11</span><br><span class=\"line\"> */</span><br><span class=\"line\">@Slf4j</span><br><span class=\"line\">public class ProxyJob extends BaseJob &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected void doExecute(JobExecutionContext context) throws JobExecutionException &#123;</span><br><span class=\"line\">       /* if (schedulerManageDao == null) &#123;</span><br><span class=\"line\">            schedulerManageDao = applicationContext.getBean(SchedulerManageDao.class);</span><br><span class=\"line\">        &#125;*/</span><br><span class=\"line\">        // 执行</span><br><span class=\"line\">        JobDetail jobDetail = context.getJobDetail();</span><br><span class=\"line\">        String jobName = jobDetail.getKey().getName();</span><br><span class=\"line\">        BaseProxyJob job;</span><br><span class=\"line\">        Date beginTime = new Date();</span><br><span class=\"line\">        // Long dispatchId = schedulerManageDao.addDispatchLog(ApplicationConfig.SCHEDULER_CLUSTER_NAME,  ApplicationConfig.SCHEDULER_INSTANCE_NAME, beginTime.getTime(), 0L, jobName, ScheduleExecuteLog.STATUS_BEGIN, 0L, &quot;&quot;);</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            job = SpringBeanManager.getbeanByNameAndType(jobName, BaseProxyJob.class);</span><br><span class=\"line\">            job.execute();</span><br><span class=\"line\">            log.info(&quot;[执行成功]&quot; + jobName);</span><br><span class=\"line\">            Date endTime = new Date();</span><br><span class=\"line\">            // 记录任务完成</span><br><span class=\"line\">            //schedulerManageDao.updateDispatchLogById(dispatchId, ScheduleExecuteLog.STATUS_SUCCESS, endTime.getTime(), endTime.getTime() - beginTime.getTime(), null);</span><br><span class=\"line\">        &#125; catch (Exception e) &#123;</span><br><span class=\"line\">            log.error(&quot;[执行异常]&quot; + jobName + &quot;:::&quot; + e.getMessage());</span><br><span class=\"line\">            Date endTime = new Date();</span><br><span class=\"line\">            // 打印异常并发送异常</span><br><span class=\"line\">            // String exceptionMessage = ExceptionUtils.getStackTrace(e);</span><br><span class=\"line\">            //logger.error(&quot;[doProcess][job(&#123;&#125;) 异常：&#123;&#125;]&quot;, jobName, exceptionMessage);</span><br><span class=\"line\">            //if (dispatchId != null) &#123;</span><br><span class=\"line\">            //    schedulerManageDao.updateDispatchLogById(dispatchId, ScheduleExecuteLog.STATUS_FAILURE, endTime.getTime(), endTime.getTime() - beginTime.getTime(), exceptionMessage);</span><br><span class=\"line\">            //&#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p>\n<p>4.3:建立基础代理job抽象类<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">import lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 定时器具体任务实现任务基类。所有子类需要继承它.</span><br><span class=\"line\"> * &lt;pre&gt;</span><br><span class=\"line\"> *     2. 使用&#123;@link #setMemo(String)&#125;可以设置任务结束后备注</span><br><span class=\"line\"> *     3. 当任务出现异常时，会被记录到日志里并标记任务失败。所以任务的异常需要抛出来，不要catch掉不抛出。</span><br><span class=\"line\"> *     4. 记得实现类加&#123;@link org.springframework.stereotype.Service&#125;注解，让它可以被spring扫描到</span><br><span class=\"line\"> * &lt;/pre&gt;</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @author ming</span><br><span class=\"line\"> * @date 2017-11-09 16:32</span><br><span class=\"line\"> */</span><br><span class=\"line\">@Slf4j</span><br><span class=\"line\">public abstract class BaseProxyJob &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 任务执行完之后的备注</span><br><span class=\"line\">     */</span><br><span class=\"line\">    private String memo;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 实现</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public abstract void execute();</span><br><span class=\"line\"></span><br><span class=\"line\">    public String getMemo() &#123;</span><br><span class=\"line\">        return memo;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 设置执行后备注</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param memo 备注</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public void setMemo(String memo) &#123;</span><br><span class=\"line\">        this.memo = memo;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p>\n<p>4.4:细分job类型<br>这个是在上面的基础上继续细化job的来源类型<br>方便针对不同的job来进行处理 例如 groovy 脚本写的抽象类 需要从数据库中读取相关数据 动态注入到spring 容器中<br>所有的来自groovy 脚本的job抽象类<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * groovy job 实现这个接口</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @author ming</span><br><span class=\"line\"> * @date 2017-11-08 16:59</span><br><span class=\"line\"> */</span><br><span class=\"line\">public abstract class BaseScriptJob extends BaseProxyJob &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p>\n<p>所有直接java写的编译好的job抽象类<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * java 实现的 实现这个接口</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @author ming</span><br><span class=\"line\"> * @date 2017-11-08 16:59</span><br><span class=\"line\"> */</span><br><span class=\"line\">public abstract class BaseSimpleJob extends BaseProxyJob &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p>\n<p>具体demo请参考:<a href=\"http://github.xujiuming.com\" target=\"_blank\" rel=\"noopener\">http://github.xujiuming.com</a>  下mingqz项目 </p>\n<p>####总结:通过编写抽象类  将 具体要执行的业务 代理执行掉  这样 就可以利用spring 的特性 去用groovy 做动态job 避免每次变更 都要从新部署</p>","site":{"data":{}},"excerpt":"","more":"<h4 id=\"quartz-集成-到spring-boot-中\"><a href=\"#quartz-集成-到spring-boot-中\" class=\"headerlink\" title=\"quartz 集成 到spring boot 中\"></a>quartz 集成 到spring boot 中</h4><p>有个偷懒的方法 直接引用 这个 但是这个不是spring组织搞 的</p><p>1:gradle 依赖配置<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">buildscript &#123;</span><br><span class=\"line\">\text &#123;</span><br><span class=\"line\">\t\tspringBootVersion = &apos;1.5.8.RELEASE&apos;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\trepositories &#123;</span><br><span class=\"line\">\t\tmavenCentral()</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tdependencies &#123;</span><br><span class=\"line\">\t\tclasspath(&quot;org.springframework.boot:spring-boot-gradle-plugin:$&#123;springBootVersion&#125;&quot;)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">apply plugin: &apos;java&apos;</span><br><span class=\"line\">apply plugin: &apos;eclipse&apos;</span><br><span class=\"line\">apply plugin: &apos;org.springframework.boot&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">group = &apos;com.ming&apos;</span><br><span class=\"line\">version = &apos;1.0&apos;</span><br><span class=\"line\">sourceCompatibility = 1.8</span><br><span class=\"line\">targetCompatibility = 1.8</span><br><span class=\"line\">jar &#123;</span><br><span class=\"line\">\t//指定 main class</span><br><span class=\"line\">\tmanifest&#123;</span><br><span class=\"line\">\t\tattributes &apos;Main-Class&apos;: &apos;com.ming.StartMing&apos;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">repositories &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tmaven &#123; url &quot;http://maven.aliyun.com/nexus/content/groups/public/&quot; &#125;</span><br><span class=\"line\">\tmaven &#123; url &quot;http://repo.maven.apache.org/maven2&quot; &#125;</span><br><span class=\"line\">\tmavenCentral()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">dependencies &#123;</span><br><span class=\"line\">\tcompile(&apos;org.springframework.boot:spring-boot-starter-actuator&apos;)</span><br><span class=\"line\">\tcompile(&apos;org.springframework.boot:spring-boot-starter-aop&apos;)</span><br><span class=\"line\">\tcompile(&apos;org.springframework.boot:spring-boot-starter-data-jpa&apos;)</span><br><span class=\"line\">\tcompile(&apos;org.springframework.boot:spring-boot-starter-mail&apos;)</span><br><span class=\"line\">\tcompile(&apos;org.springframework.boot:spring-boot-starter-thymeleaf&apos;)</span><br><span class=\"line\">\tcompile(&apos;org.springframework.boot:spring-boot-starter-validation&apos;)</span><br><span class=\"line\">\tcompile(&apos;org.springframework.boot:spring-boot-starter-web&apos;)</span><br><span class=\"line\">\truntime(&apos;org.springframework.boot:spring-boot-devtools&apos;)</span><br><span class=\"line\">\truntime(&apos;mysql:mysql-connector-java&apos;)</span><br><span class=\"line\">\t//lombok http://blog.csdn.net/victor_cindy1/article/details/72772841</span><br><span class=\"line\">\tcompile(&apos;org.projectlombok:lombok&apos;)</span><br><span class=\"line\">\ttestCompile(&apos;org.springframework.boot:spring-boot-starter-test&apos;)</span><br><span class=\"line\">\tcompile group: &apos;de.chandre.quartz&apos;, name: &apos;spring-boot-starter-quartz&apos;, version: &apos;1.0.1&apos;</span><br><span class=\"line\">\tcompile group: &apos;org.apache.shiro&apos;, name: &apos;shiro-spring&apos;, version: &apos;1.4.0&apos;</span><br><span class=\"line\">\tcompile group: &apos;org.apache.shiro&apos;, name: &apos;shiro-core&apos;, version: &apos;1.4.0&apos;</span><br><span class=\"line\">\tcompile group: &apos;com.google.guava&apos;, name: &apos;guava&apos;, version: &apos;22.0&apos;</span><br><span class=\"line\">\tcompile group: &apos;com.alibaba&apos;, name: &apos;fastjson&apos;, version: &apos;1.2.33&apos;</span><br><span class=\"line\">\tcompile group: &apos;org.apache.commons&apos;, name: &apos;commons-lang3&apos;, version: &apos;3.6&apos;</span><br><span class=\"line\">\tcompile group: &apos;org.apache.httpcomponents&apos;, name: &apos;httpcore&apos;, version: &apos;4.4.6&apos;</span><br><span class=\"line\">\tcompile(group: &apos;org.apache.httpcomponents&apos;, name: &apos;httpclient&apos;, version: &apos;4.5.3&apos;) &#123;</span><br><span class=\"line\">\t\texclude(module: &apos;commons-logging&apos;)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tcompile group: &apos;commons-io&apos;, name: &apos;commons-io&apos;, version: &apos;2.5&apos;</span><br><span class=\"line\">\tcompile group: &apos;commons-codec&apos;, name: &apos;commons-codec&apos;, version: &apos;1.8&apos;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p>\n<p>2:指明 quartz 配置文件<br>这个是那个starter-quartz中的配置<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">quartz:</span><br><span class=\"line\">  properties-config-location: classpath:/config/application-quatrz.properties</span><br></pre></td></tr></table></figure><p></p>\n<p>3:配置 quartz<br>就是从 quartz 中copy出来的 改成jdbc 存储<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">org.quartz.scheduler.instanceName:DefaultQuartzScheduler</span><br><span class=\"line\">org.quartz.scheduler.rmi.export:false</span><br><span class=\"line\">org.quartz.scheduler.rmi.proxy:false</span><br><span class=\"line\">org.quartz.scheduler.wrapJobExecutionInUserTransaction:false</span><br><span class=\"line\">org.quartz.threadPool.class:org.quartz.simpl.SimpleThreadPool</span><br><span class=\"line\">org.quartz.threadPool.threadCount:10</span><br><span class=\"line\">org.quartz.threadPool.threadPriority:5</span><br><span class=\"line\">org.quartz.threadPool.threadsInheritContextClassLoaderOfInitializingThread:true</span><br><span class=\"line\">org.quartz.jobStore.misfireThreshold:60000</span><br><span class=\"line\">#org.quartz.jobStore.class: org.quartz.simpl.RAMJobStore</span><br><span class=\"line\"># jdbc</span><br><span class=\"line\">org.quartz.jobStore.class=org.quartz.impl.jdbcjobstore.JobStoreTX</span><br><span class=\"line\">org.quartz.jobStore.tablePrefix=QRTZ_</span><br><span class=\"line\">org.quartz.jobStore.dataSource=qzDS</span><br><span class=\"line\">org.quartz.dataSource.qzDS.driver=com.mysql.jdbc.Driver</span><br><span class=\"line\">org.quartz.dataSource.qzDS.URL=jdbc:mysql://localhost:3306/ming?useUnicode=true&amp;characterEncoding=UTF-8</span><br><span class=\"line\">org.quartz.dataSource.qzDS.user=root</span><br><span class=\"line\">org.quartz.dataSource.qzDS.password=ming1234</span><br><span class=\"line\">org.quartz.dataSource.qzDS.maxConnections=10</span><br></pre></td></tr></table></figure><p></p>\n<p>4:重头戏 代理job  使用spring bean 中定义的job<br>先声明  这个是抄袭的 加上我自己的一点点想法<br>原方案 只能支持spring bean 的 我扩展了一波 可使用groovy 来扩充配置、扩充bean<br>前几个步骤都是集成进来 这一步 是将 quartz 的job 代理执行 使用注册在spring 中的job bean 执行 任务 </p>\n<ul>\n<li>方便管理</li>\n<li>可以使用 groovy 动态注入配置,job</li>\n<li>方便嵌入其他业务 如日志 等等<br>4.1:继承spring中QuartzJobBean 实现基础的job抽象类<br>通过建立抽象方法doExecute 将任务执行内容代理到实现这个抽象方法的job中 <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import org.quartz.DisallowConcurrentExecution;</span><br><span class=\"line\">import org.quartz.JobExecutionContext;</span><br><span class=\"line\">import org.quartz.JobExecutionException;</span><br><span class=\"line\">import org.quartz.PersistJobDataAfterExecution;</span><br><span class=\"line\">import org.springframework.scheduling.quartz.QuartzJobBean;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.io.Serializable;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 基础job  抽象类</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @author ming</span><br><span class=\"line\"> * @date 2017-11-09 16:32</span><br><span class=\"line\"> */</span><br><span class=\"line\">//表示 Quartz 将会在成功执行 execute() 方法后（没有抛出异常）更新 JobDetail 的 JobDataMap，下一次执行相同的任务（JobDetail）将会得到更新后的值，而不是原始的值。</span><br><span class=\"line\">@PersistJobDataAfterExecution</span><br><span class=\"line\">//禁止 并发执行 job</span><br><span class=\"line\">@DisallowConcurrentExecution</span><br><span class=\"line\">public abstract class BaseJob extends QuartzJobBean implements Serializable &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected void executeInternal(JobExecutionContext context) throws JobExecutionException &#123;</span><br><span class=\"line\">        doExecute(context);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 使用代理执行</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param context</span><br><span class=\"line\">     * @throws JobExecutionException</span><br><span class=\"line\">     * @author ming</span><br><span class=\"line\">     * @date 2017-11-09 16:08</span><br><span class=\"line\">     */</span><br><span class=\"line\">    protected abstract void doExecute(JobExecutionContext context) throws JobExecutionException;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>4.2：建立代理执行类<br>实现doExecute 方法<br>第一 指定 job实例来源于spring 容器<br>第二 可以插入其他业务 例如日志 之类的<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * 代理执行 job  前后处理日志</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @author ming</span><br><span class=\"line\"> * @date 2017-11-09 16:11</span><br><span class=\"line\"> */</span><br><span class=\"line\">@Slf4j</span><br><span class=\"line\">public class ProxyJob extends BaseJob &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected void doExecute(JobExecutionContext context) throws JobExecutionException &#123;</span><br><span class=\"line\">       /* if (schedulerManageDao == null) &#123;</span><br><span class=\"line\">            schedulerManageDao = applicationContext.getBean(SchedulerManageDao.class);</span><br><span class=\"line\">        &#125;*/</span><br><span class=\"line\">        // 执行</span><br><span class=\"line\">        JobDetail jobDetail = context.getJobDetail();</span><br><span class=\"line\">        String jobName = jobDetail.getKey().getName();</span><br><span class=\"line\">        BaseProxyJob job;</span><br><span class=\"line\">        Date beginTime = new Date();</span><br><span class=\"line\">        // Long dispatchId = schedulerManageDao.addDispatchLog(ApplicationConfig.SCHEDULER_CLUSTER_NAME,  ApplicationConfig.SCHEDULER_INSTANCE_NAME, beginTime.getTime(), 0L, jobName, ScheduleExecuteLog.STATUS_BEGIN, 0L, &quot;&quot;);</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            job = SpringBeanManager.getbeanByNameAndType(jobName, BaseProxyJob.class);</span><br><span class=\"line\">            job.execute();</span><br><span class=\"line\">            log.info(&quot;[执行成功]&quot; + jobName);</span><br><span class=\"line\">            Date endTime = new Date();</span><br><span class=\"line\">            // 记录任务完成</span><br><span class=\"line\">            //schedulerManageDao.updateDispatchLogById(dispatchId, ScheduleExecuteLog.STATUS_SUCCESS, endTime.getTime(), endTime.getTime() - beginTime.getTime(), null);</span><br><span class=\"line\">        &#125; catch (Exception e) &#123;</span><br><span class=\"line\">            log.error(&quot;[执行异常]&quot; + jobName + &quot;:::&quot; + e.getMessage());</span><br><span class=\"line\">            Date endTime = new Date();</span><br><span class=\"line\">            // 打印异常并发送异常</span><br><span class=\"line\">            // String exceptionMessage = ExceptionUtils.getStackTrace(e);</span><br><span class=\"line\">            //logger.error(&quot;[doProcess][job(&#123;&#125;) 异常：&#123;&#125;]&quot;, jobName, exceptionMessage);</span><br><span class=\"line\">            //if (dispatchId != null) &#123;</span><br><span class=\"line\">            //    schedulerManageDao.updateDispatchLogById(dispatchId, ScheduleExecuteLog.STATUS_FAILURE, endTime.getTime(), endTime.getTime() - beginTime.getTime(), exceptionMessage);</span><br><span class=\"line\">            //&#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p>\n<p>4.3:建立基础代理job抽象类<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">import lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 定时器具体任务实现任务基类。所有子类需要继承它.</span><br><span class=\"line\"> * &lt;pre&gt;</span><br><span class=\"line\"> *     2. 使用&#123;@link #setMemo(String)&#125;可以设置任务结束后备注</span><br><span class=\"line\"> *     3. 当任务出现异常时，会被记录到日志里并标记任务失败。所以任务的异常需要抛出来，不要catch掉不抛出。</span><br><span class=\"line\"> *     4. 记得实现类加&#123;@link org.springframework.stereotype.Service&#125;注解，让它可以被spring扫描到</span><br><span class=\"line\"> * &lt;/pre&gt;</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @author ming</span><br><span class=\"line\"> * @date 2017-11-09 16:32</span><br><span class=\"line\"> */</span><br><span class=\"line\">@Slf4j</span><br><span class=\"line\">public abstract class BaseProxyJob &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 任务执行完之后的备注</span><br><span class=\"line\">     */</span><br><span class=\"line\">    private String memo;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 实现</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public abstract void execute();</span><br><span class=\"line\"></span><br><span class=\"line\">    public String getMemo() &#123;</span><br><span class=\"line\">        return memo;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 设置执行后备注</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param memo 备注</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public void setMemo(String memo) &#123;</span><br><span class=\"line\">        this.memo = memo;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p>\n<p>4.4:细分job类型<br>这个是在上面的基础上继续细化job的来源类型<br>方便针对不同的job来进行处理 例如 groovy 脚本写的抽象类 需要从数据库中读取相关数据 动态注入到spring 容器中<br>所有的来自groovy 脚本的job抽象类<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * groovy job 实现这个接口</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @author ming</span><br><span class=\"line\"> * @date 2017-11-08 16:59</span><br><span class=\"line\"> */</span><br><span class=\"line\">public abstract class BaseScriptJob extends BaseProxyJob &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p>\n<p>所有直接java写的编译好的job抽象类<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * java 实现的 实现这个接口</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @author ming</span><br><span class=\"line\"> * @date 2017-11-08 16:59</span><br><span class=\"line\"> */</span><br><span class=\"line\">public abstract class BaseSimpleJob extends BaseProxyJob &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p>\n<p>具体demo请参考:<a href=\"http://github.xujiuming.com\" target=\"_blank\" rel=\"noopener\">http://github.xujiuming.com</a>  下mingqz项目 </p>\n<p>####总结:通过编写抽象类  将 具体要执行的业务 代理执行掉  这样 就可以利用spring 的特性 去用groovy 做动态job 避免每次变更 都要从新部署</p>"},{"title":"k8s集群暴露集群服务的各种方案的优劣","comments":1,"abbrlink":"c013ae57","date":"2018-02-12T00:57:52.000Z","_content":"参考文档:   \nhttp://blog.csdn.net/liyingke112/article/details/76022267   \nhttps://www.kubernetes.org.cn/1885.html\nk8s集群暴露服务 常见的就四种   \n\n\n#### 1: clusterIp  \nclusterIp就是service的ip  k8s在创建service的时候 会给service一个ip 集群内部可以通过这个clusterIp访问相应的service  \n这种方式呢稍微麻烦 最终要暴露外部服务 还是要建立nginx之类的反向代理 然后再暴露出集群   \n实践:\n这个需要在集群中的一个节点去访问 \n登陆集群中同一个命名空间的容器  直接ping 对应的clusterIp 或者直接telnet 访问clusterIp:clusterPort  clusterPort就是service配置中的targetPort\n```\nping <clusterIp>\ntelnet <clusterIp> <targetPort>\n```\n#### 2:nodePort  \nnode在k8s中表示是一台物理机或者虚拟机 nodePort是k8s集群在创建service的时候 会在每个node上暴露出nodePort 外部可以直接通过nodeIp:nodePort访问 服务   \n这种方式 很容易实现 但是不太符合实际生产环境 因为在新开服务或者新增node的时候需要增加配置 会导致依赖一个外部的负载均衡器去分发各个node \n配置太多了 不利于维护   nodePort模式依旧存在clusterIp 依旧可以通过第一种方式访问 \n实例:\n配置 service\n```\nkubectl edit service <serviceName>\n```\ntype 为NodePort  拥有port、targetPort、nodePort\n这个如果不是这个配置 可以修改  \n```\n。。。\nspec:\n  clusterIP: 10.103.100.161\n  externalTrafficPolicy: Cluster\n  ports:\n  - nodePort: 30115\n    port: 8080\n    protocol: TCP\n    targetPort: 8080\n  selector:\n    run: hello-node\n  sessionAffinity: None\n  type: NodePort\n  。。。\n```\n直接ping node的ip 或者直接通过telnet 访问nodeIp:nodePort\n```\nping <nodeIp>\ntelnet <nodeIp> <nodePort>\n```\n#### 3:loadbalance\n必须要在支持 这个模式的云平台上才能用 基于nodePort 只不过 这个模式会请求底层云平台的服务创建一个负载均衡器 来访问   \n这种方式 要看各个云平台的支持 例如阿里云就有点坑爹 每个服务都为你申请一个负载均衡器 贵的很 而且还不如直接用nodePort模式然后自己做负载均衡来的直接 简单  \n\n这个 哎 懒的尝试没必要 直接请求云平台的负载均衡服务 略坑 太贵 而且不好管理  建议就算了把  有用这个 不如直接使用nodePort 或者ic 或者自己维护nginx方式来做 \n#### 4:ingress \n这个是k8s 算是比较官方的一种解决方案了   \n大神也总结的有文档 \nhttp://blog.csdn.net/liyingke112/article/details/77066814  \nhttps://www.kubernetes.org.cn/1885.html   \nhttps://mritd.me/2017/03/04/how-to-use-nginx-ingress/#%E4%B8%80ingress-%E4%BB%8B%E7%BB%8D\nhttps://mritd.me/2016/12/06/try-traefik-on-kubernetes/\n比较麻烦 只有当集群大了之后 可以  小集群 需求并不大\n主要就是 ingress 和ingress controller 、代理负载均衡器(例如nginx 之类的)\ningress : 配置规则的地方  \ningress controller :将ingress中配置的规则 生成相应的配置 例如生成nginx的配置 \n负载均衡器: 例如nginx 具体分发流量的软件   ingress controller 通过ingress获取配置 自动刷新nginx中的配置 \n#### 5：自定义方案   \nnginx+config server \n用nginx 直接分发service  配置通过config server 进行刷新   \n其实跟ingress差不多 只不过 由开发去维护 这个代理作用的nginx的pod 而不是直接由k8s直接管理   因为懂nginx配置的人多  懂ingress的人并不多\n这个方案缺点就是要配置很多不同的service的配置 比较麻烦 只能手动配置  但是 这个配合loadbalancer 就可以很不错的做到代理分发 并且屏蔽底层serviceIp变化\n最后通过暴露nginx的nodePort去给外部服务访问  \n1:按照http://docs.kubernetes.org.cn/126.html 这个教程搭建 minikube 的hello-node 服务 这个时候可以通过nodePort 访问hello-node服务的   \n2:通过如下配置启动一个nginx-all deployment\n```\n{\n  \"kind\": \"Deployment\",\n  \"apiVersion\": \"extensions/v1beta1\",\n  \"metadata\": {\n    \"name\": \"nginx-all\",\n    \"namespace\": \"default\",\n    \"selfLink\": \"/apis/extensions/v1beta1/namespaces/default/deployments/nginx-all\",\n    \"uid\": \"050be590-1b6d-11e8-a211-080027fc8712\",\n    \"resourceVersion\": \"45623\",\n    \"generation\": 1,\n    \"creationTimestamp\": \"2018-02-27T03:19:28Z\",\n    \"labels\": {\n      \"k8s-app\": \"nginx-all\"\n    },\n    \"annotations\": {\n      \"deployment.kubernetes.io/revision\": \"1\"\n    }\n  },\n  \"spec\": {\n    \"replicas\": 1,\n    \"selector\": {\n      \"matchLabels\": {\n        \"k8s-app\": \"nginx-all\"\n      }\n    },\n    \"template\": {\n      \"metadata\": {\n        \"name\": \"nginx-all\",\n        \"creationTimestamp\": null,\n        \"labels\": {\n          \"k8s-app\": \"nginx-all\"\n        }\n      },\n      \"spec\": {\n        \"containers\": [\n          {\n            \"name\": \"nginx-all\",\n            \"image\": \"nginx:1.13.8-alpine\",\n            \"resources\": {},\n            \"terminationMessagePath\": \"/dev/termination-log\",\n            \"terminationMessagePolicy\": \"File\",\n            \"imagePullPolicy\": \"IfNotPresent\",\n            \"securityContext\": {\n              \"privileged\": false\n            }\n          }\n        ],\n        \"restartPolicy\": \"Always\",\n        \"terminationGracePeriodSeconds\": 30,\n        \"dnsPolicy\": \"ClusterFirst\",\n        \"securityContext\": {},\n        \"schedulerName\": \"default-scheduler\"\n      }\n    },\n    \"strategy\": {\n      \"type\": \"RollingUpdate\",\n      \"rollingUpdate\": {\n        \"maxUnavailable\": \"25%\",\n        \"maxSurge\": \"25%\"\n      }\n    },\n    \"revisionHistoryLimit\": 10,\n    \"progressDeadlineSeconds\": 600\n  },\n  \"status\": {\n    \"observedGeneration\": 1,\n    \"replicas\": 1,\n    \"updatedReplicas\": 1,\n    \"readyReplicas\": 1,\n    \"availableReplicas\": 1,\n    \"conditions\": [\n      {\n        \"type\": \"Available\",\n        \"status\": \"True\",\n        \"lastUpdateTime\": \"2018-02-27T03:19:29Z\",\n        \"lastTransitionTime\": \"2018-02-27T03:19:29Z\",\n        \"reason\": \"MinimumReplicasAvailable\",\n        \"message\": \"Deployment has minimum availability.\"\n      },\n      {\n        \"type\": \"Progressing\",\n        \"status\": \"True\",\n        \"lastUpdateTime\": \"2018-02-27T03:19:29Z\",\n        \"lastTransitionTime\": \"2018-02-27T03:19:28Z\",\n        \"reason\": \"NewReplicaSetAvailable\",\n        \"message\": \"ReplicaSet \\\"nginx-all-9bf75995b\\\" has successfully progressed.\"\n      }\n    ]\n  }\n}\n```\n3:登陆 nginx-all容器 修改/etc/nginx/conf.d/default.conf  这一步 可以通过配合config server 来实现重启容器更新配置来实现配置的刷新\n\n{% post_link 综合应用/非java应用接入springConfigServer11 %} \n\n```\nserver {\n    listen       80;\n    server_name  localhost;\n\n    #charset koi8-r;\n    #access_log  /var/log/nginx/host.access.log  main;\n\n    location / {\n        root   /usr/share/nginx/html;\n        index  index.html index.htm;\n    }\n\n\n    location /test{\n        # 配置 服务名称+port 不需要使用nodePort直接使用启动容器时候映射的那个port  hello-node 启动参数为-p 8080:80 所以这里使用8080 即可 \n        proxy_pass http://hello-node:8080;\n    }\n\n\n    error_page   500 502 503 504  /50x.html;\n    location = /50x.html {\n        root   /usr/share/nginx/html;\n    }\n\n}\n\n```\n4：配置nginx service\n配置 nginx service的nodePort\n```\nkubectl edit service  nginx-all\n```\n修改配置如下 就是配置 nodePort\n```\n{\n  \"kind\": \"Service\",\n  \"apiVersion\": \"v1\",\n  \"metadata\": {\n    \"name\": \"nginx-all\",\n    \"namespace\": \"default\",\n    \"selfLink\": \"/api/v1/namespaces/default/services/nginx-all\",\n    \"uid\": \"050ea702-1b6d-11e8-a211-080027fc8712\",\n    \"resourceVersion\": \"45659\",\n    \"creationTimestamp\": \"2018-02-27T03:19:28Z\",\n    \"labels\": {\n      \"k8s-app\": \"nginx-all\"\n    }\n  },\n  \"spec\": {\n    \"ports\": [\n      {\n        \"name\": \"tcp-8080-80-cvw8l\",\n        \"protocol\": \"TCP\",\n        \"port\": 8080,\n        \"targetPort\": 80,\n        \"nodePort\": 31000\n      }\n    ],\n    \"selector\": {\n      \"k8s-app\": \"nginx-all\"\n    },\n    \"clusterIP\": \"10.102.241.166\",\n    \"type\": \"NodePort\",\n    \"sessionAffinity\": \"None\",\n    \"externalTrafficPolicy\": \"Cluster\"\n  },\n  \"status\": {\n    \"loadBalancer\": {}\n  }\n}\n```\n6:通过nginx访问hello-node服务\nminikube的 node ip 默认为192.168.99.100\n访问 http://192.168.99.100:31000/test 就是通过nginx代理访问了hello-node 服务  \n\n\n#### 6: service loadbalancer  \n可以用一个clusterIP 共享一个ip   \n配合自定义代理可以做到一个ip 多个不同端口访问不同服务 配合nginx做代理 做到不受服务的变更 只需要一个clusterIp即可配置nginx 屏蔽底层的serviceIp变化  \n这种方案 有单点故障的隐患 和性能问题 暂时不成熟\n\n\n## 总结: \n说到底 暴露服务还是要通过k8s内部的网络去做   \n如果像我一样懒 那就选择ingress  \n当然我最终选择还是 自定义方案  \n没啥别的 就是nginx配置 之前就有  ingress的配置 特么还要我自己写 肯定选择自定义方案 \n如果是新项目 或者不偷懒 建议选择ingress方案 因为毕竟是官方的套路 很多人实践过 后续简单  自定义方案最终还是需要一个基佬去维护配置的  \n这里有个坑  就是 如果为了方便 配置 建议所有服务节点一定要有一个统一前缀  如果没有 请尽量推动各位基佬增加一个统一前缀 不然写配置 要写疯    \n\n\n\n\n\n\n\n\n\n","source":"_posts/综合应用/k8s集群暴露集群服务的各种方案的优劣.md","raw":"---\ntitle: k8s集群暴露集群服务的各种方案的优劣\ncomments: true\ncategories: k8s\ntags:\n  - k8s\n  - docker\n  - 实用\nabbrlink: c013ae57\ndate: 2018-02-12 08:57:52\n---\n参考文档:   \nhttp://blog.csdn.net/liyingke112/article/details/76022267   \nhttps://www.kubernetes.org.cn/1885.html\nk8s集群暴露服务 常见的就四种   \n\n\n#### 1: clusterIp  \nclusterIp就是service的ip  k8s在创建service的时候 会给service一个ip 集群内部可以通过这个clusterIp访问相应的service  \n这种方式呢稍微麻烦 最终要暴露外部服务 还是要建立nginx之类的反向代理 然后再暴露出集群   \n实践:\n这个需要在集群中的一个节点去访问 \n登陆集群中同一个命名空间的容器  直接ping 对应的clusterIp 或者直接telnet 访问clusterIp:clusterPort  clusterPort就是service配置中的targetPort\n```\nping <clusterIp>\ntelnet <clusterIp> <targetPort>\n```\n#### 2:nodePort  \nnode在k8s中表示是一台物理机或者虚拟机 nodePort是k8s集群在创建service的时候 会在每个node上暴露出nodePort 外部可以直接通过nodeIp:nodePort访问 服务   \n这种方式 很容易实现 但是不太符合实际生产环境 因为在新开服务或者新增node的时候需要增加配置 会导致依赖一个外部的负载均衡器去分发各个node \n配置太多了 不利于维护   nodePort模式依旧存在clusterIp 依旧可以通过第一种方式访问 \n实例:\n配置 service\n```\nkubectl edit service <serviceName>\n```\ntype 为NodePort  拥有port、targetPort、nodePort\n这个如果不是这个配置 可以修改  \n```\n。。。\nspec:\n  clusterIP: 10.103.100.161\n  externalTrafficPolicy: Cluster\n  ports:\n  - nodePort: 30115\n    port: 8080\n    protocol: TCP\n    targetPort: 8080\n  selector:\n    run: hello-node\n  sessionAffinity: None\n  type: NodePort\n  。。。\n```\n直接ping node的ip 或者直接通过telnet 访问nodeIp:nodePort\n```\nping <nodeIp>\ntelnet <nodeIp> <nodePort>\n```\n#### 3:loadbalance\n必须要在支持 这个模式的云平台上才能用 基于nodePort 只不过 这个模式会请求底层云平台的服务创建一个负载均衡器 来访问   \n这种方式 要看各个云平台的支持 例如阿里云就有点坑爹 每个服务都为你申请一个负载均衡器 贵的很 而且还不如直接用nodePort模式然后自己做负载均衡来的直接 简单  \n\n这个 哎 懒的尝试没必要 直接请求云平台的负载均衡服务 略坑 太贵 而且不好管理  建议就算了把  有用这个 不如直接使用nodePort 或者ic 或者自己维护nginx方式来做 \n#### 4:ingress \n这个是k8s 算是比较官方的一种解决方案了   \n大神也总结的有文档 \nhttp://blog.csdn.net/liyingke112/article/details/77066814  \nhttps://www.kubernetes.org.cn/1885.html   \nhttps://mritd.me/2017/03/04/how-to-use-nginx-ingress/#%E4%B8%80ingress-%E4%BB%8B%E7%BB%8D\nhttps://mritd.me/2016/12/06/try-traefik-on-kubernetes/\n比较麻烦 只有当集群大了之后 可以  小集群 需求并不大\n主要就是 ingress 和ingress controller 、代理负载均衡器(例如nginx 之类的)\ningress : 配置规则的地方  \ningress controller :将ingress中配置的规则 生成相应的配置 例如生成nginx的配置 \n负载均衡器: 例如nginx 具体分发流量的软件   ingress controller 通过ingress获取配置 自动刷新nginx中的配置 \n#### 5：自定义方案   \nnginx+config server \n用nginx 直接分发service  配置通过config server 进行刷新   \n其实跟ingress差不多 只不过 由开发去维护 这个代理作用的nginx的pod 而不是直接由k8s直接管理   因为懂nginx配置的人多  懂ingress的人并不多\n这个方案缺点就是要配置很多不同的service的配置 比较麻烦 只能手动配置  但是 这个配合loadbalancer 就可以很不错的做到代理分发 并且屏蔽底层serviceIp变化\n最后通过暴露nginx的nodePort去给外部服务访问  \n1:按照http://docs.kubernetes.org.cn/126.html 这个教程搭建 minikube 的hello-node 服务 这个时候可以通过nodePort 访问hello-node服务的   \n2:通过如下配置启动一个nginx-all deployment\n```\n{\n  \"kind\": \"Deployment\",\n  \"apiVersion\": \"extensions/v1beta1\",\n  \"metadata\": {\n    \"name\": \"nginx-all\",\n    \"namespace\": \"default\",\n    \"selfLink\": \"/apis/extensions/v1beta1/namespaces/default/deployments/nginx-all\",\n    \"uid\": \"050be590-1b6d-11e8-a211-080027fc8712\",\n    \"resourceVersion\": \"45623\",\n    \"generation\": 1,\n    \"creationTimestamp\": \"2018-02-27T03:19:28Z\",\n    \"labels\": {\n      \"k8s-app\": \"nginx-all\"\n    },\n    \"annotations\": {\n      \"deployment.kubernetes.io/revision\": \"1\"\n    }\n  },\n  \"spec\": {\n    \"replicas\": 1,\n    \"selector\": {\n      \"matchLabels\": {\n        \"k8s-app\": \"nginx-all\"\n      }\n    },\n    \"template\": {\n      \"metadata\": {\n        \"name\": \"nginx-all\",\n        \"creationTimestamp\": null,\n        \"labels\": {\n          \"k8s-app\": \"nginx-all\"\n        }\n      },\n      \"spec\": {\n        \"containers\": [\n          {\n            \"name\": \"nginx-all\",\n            \"image\": \"nginx:1.13.8-alpine\",\n            \"resources\": {},\n            \"terminationMessagePath\": \"/dev/termination-log\",\n            \"terminationMessagePolicy\": \"File\",\n            \"imagePullPolicy\": \"IfNotPresent\",\n            \"securityContext\": {\n              \"privileged\": false\n            }\n          }\n        ],\n        \"restartPolicy\": \"Always\",\n        \"terminationGracePeriodSeconds\": 30,\n        \"dnsPolicy\": \"ClusterFirst\",\n        \"securityContext\": {},\n        \"schedulerName\": \"default-scheduler\"\n      }\n    },\n    \"strategy\": {\n      \"type\": \"RollingUpdate\",\n      \"rollingUpdate\": {\n        \"maxUnavailable\": \"25%\",\n        \"maxSurge\": \"25%\"\n      }\n    },\n    \"revisionHistoryLimit\": 10,\n    \"progressDeadlineSeconds\": 600\n  },\n  \"status\": {\n    \"observedGeneration\": 1,\n    \"replicas\": 1,\n    \"updatedReplicas\": 1,\n    \"readyReplicas\": 1,\n    \"availableReplicas\": 1,\n    \"conditions\": [\n      {\n        \"type\": \"Available\",\n        \"status\": \"True\",\n        \"lastUpdateTime\": \"2018-02-27T03:19:29Z\",\n        \"lastTransitionTime\": \"2018-02-27T03:19:29Z\",\n        \"reason\": \"MinimumReplicasAvailable\",\n        \"message\": \"Deployment has minimum availability.\"\n      },\n      {\n        \"type\": \"Progressing\",\n        \"status\": \"True\",\n        \"lastUpdateTime\": \"2018-02-27T03:19:29Z\",\n        \"lastTransitionTime\": \"2018-02-27T03:19:28Z\",\n        \"reason\": \"NewReplicaSetAvailable\",\n        \"message\": \"ReplicaSet \\\"nginx-all-9bf75995b\\\" has successfully progressed.\"\n      }\n    ]\n  }\n}\n```\n3:登陆 nginx-all容器 修改/etc/nginx/conf.d/default.conf  这一步 可以通过配合config server 来实现重启容器更新配置来实现配置的刷新\n\n{% post_link 综合应用/非java应用接入springConfigServer11 %} \n\n```\nserver {\n    listen       80;\n    server_name  localhost;\n\n    #charset koi8-r;\n    #access_log  /var/log/nginx/host.access.log  main;\n\n    location / {\n        root   /usr/share/nginx/html;\n        index  index.html index.htm;\n    }\n\n\n    location /test{\n        # 配置 服务名称+port 不需要使用nodePort直接使用启动容器时候映射的那个port  hello-node 启动参数为-p 8080:80 所以这里使用8080 即可 \n        proxy_pass http://hello-node:8080;\n    }\n\n\n    error_page   500 502 503 504  /50x.html;\n    location = /50x.html {\n        root   /usr/share/nginx/html;\n    }\n\n}\n\n```\n4：配置nginx service\n配置 nginx service的nodePort\n```\nkubectl edit service  nginx-all\n```\n修改配置如下 就是配置 nodePort\n```\n{\n  \"kind\": \"Service\",\n  \"apiVersion\": \"v1\",\n  \"metadata\": {\n    \"name\": \"nginx-all\",\n    \"namespace\": \"default\",\n    \"selfLink\": \"/api/v1/namespaces/default/services/nginx-all\",\n    \"uid\": \"050ea702-1b6d-11e8-a211-080027fc8712\",\n    \"resourceVersion\": \"45659\",\n    \"creationTimestamp\": \"2018-02-27T03:19:28Z\",\n    \"labels\": {\n      \"k8s-app\": \"nginx-all\"\n    }\n  },\n  \"spec\": {\n    \"ports\": [\n      {\n        \"name\": \"tcp-8080-80-cvw8l\",\n        \"protocol\": \"TCP\",\n        \"port\": 8080,\n        \"targetPort\": 80,\n        \"nodePort\": 31000\n      }\n    ],\n    \"selector\": {\n      \"k8s-app\": \"nginx-all\"\n    },\n    \"clusterIP\": \"10.102.241.166\",\n    \"type\": \"NodePort\",\n    \"sessionAffinity\": \"None\",\n    \"externalTrafficPolicy\": \"Cluster\"\n  },\n  \"status\": {\n    \"loadBalancer\": {}\n  }\n}\n```\n6:通过nginx访问hello-node服务\nminikube的 node ip 默认为192.168.99.100\n访问 http://192.168.99.100:31000/test 就是通过nginx代理访问了hello-node 服务  \n\n\n#### 6: service loadbalancer  \n可以用一个clusterIP 共享一个ip   \n配合自定义代理可以做到一个ip 多个不同端口访问不同服务 配合nginx做代理 做到不受服务的变更 只需要一个clusterIp即可配置nginx 屏蔽底层的serviceIp变化  \n这种方案 有单点故障的隐患 和性能问题 暂时不成熟\n\n\n## 总结: \n说到底 暴露服务还是要通过k8s内部的网络去做   \n如果像我一样懒 那就选择ingress  \n当然我最终选择还是 自定义方案  \n没啥别的 就是nginx配置 之前就有  ingress的配置 特么还要我自己写 肯定选择自定义方案 \n如果是新项目 或者不偷懒 建议选择ingress方案 因为毕竟是官方的套路 很多人实践过 后续简单  自定义方案最终还是需要一个基佬去维护配置的  \n这里有个坑  就是 如果为了方便 配置 建议所有服务节点一定要有一个统一前缀  如果没有 请尽量推动各位基佬增加一个统一前缀 不然写配置 要写疯    \n\n\n\n\n\n\n\n\n\n","slug":"综合应用/k8s集群暴露集群服务的各种方案的优劣","published":1,"updated":"2018-08-17T08:10:03.923Z","layout":"post","photos":[],"link":"","_id":"cjo9uau3100bwmwczjuyy4pz0","content":"<p>参考文档:<br><a href=\"http://blog.csdn.net/liyingke112/article/details/76022267\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/liyingke112/article/details/76022267</a><br><a href=\"https://www.kubernetes.org.cn/1885.html\" target=\"_blank\" rel=\"noopener\">https://www.kubernetes.org.cn/1885.html</a><br>k8s集群暴露服务 常见的就四种</p><h4 id=\"1-clusterIp\"><a href=\"#1-clusterIp\" class=\"headerlink\" title=\"1: clusterIp\"></a>1: clusterIp</h4><p>clusterIp就是service的ip k8s在创建service的时候 会给service一个ip 集群内部可以通过这个clusterIp访问相应的service<br>这种方式呢稍微麻烦 最终要暴露外部服务 还是要建立nginx之类的反向代理 然后再暴露出集群<br>实践:<br>这个需要在集群中的一个节点去访问<br>登陆集群中同一个命名空间的容器 直接ping 对应的clusterIp 或者直接telnet 访问clusterIp:clusterPort clusterPort就是service配置中的targetPort<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ping &lt;clusterIp&gt;</span><br><span class=\"line\">telnet &lt;clusterIp&gt; &lt;targetPort&gt;</span><br></pre></td></tr></table></figure><p></p>\n<h4 id=\"2-nodePort\"><a href=\"#2-nodePort\" class=\"headerlink\" title=\"2:nodePort\"></a>2:nodePort</h4><p>node在k8s中表示是一台物理机或者虚拟机 nodePort是k8s集群在创建service的时候 会在每个node上暴露出nodePort 外部可以直接通过nodeIp:nodePort访问 服务<br>这种方式 很容易实现 但是不太符合实际生产环境 因为在新开服务或者新增node的时候需要增加配置 会导致依赖一个外部的负载均衡器去分发各个node<br>配置太多了 不利于维护   nodePort模式依旧存在clusterIp 依旧可以通过第一种方式访问<br>实例:<br>配置 service<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl edit service &lt;serviceName&gt;</span><br></pre></td></tr></table></figure><p></p>\n<p>type 为NodePort  拥有port、targetPort、nodePort<br>这个如果不是这个配置 可以修改<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">。。。</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  clusterIP: 10.103.100.161</span><br><span class=\"line\">  externalTrafficPolicy: Cluster</span><br><span class=\"line\">  ports:</span><br><span class=\"line\">  - nodePort: 30115</span><br><span class=\"line\">    port: 8080</span><br><span class=\"line\">    protocol: TCP</span><br><span class=\"line\">    targetPort: 8080</span><br><span class=\"line\">  selector:</span><br><span class=\"line\">    run: hello-node</span><br><span class=\"line\">  sessionAffinity: None</span><br><span class=\"line\">  type: NodePort</span><br><span class=\"line\">  。。。</span><br></pre></td></tr></table></figure><p></p>\n<p>直接ping node的ip 或者直接通过telnet 访问nodeIp:nodePort<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ping &lt;nodeIp&gt;</span><br><span class=\"line\">telnet &lt;nodeIp&gt; &lt;nodePort&gt;</span><br></pre></td></tr></table></figure><p></p>\n<h4 id=\"3-loadbalance\"><a href=\"#3-loadbalance\" class=\"headerlink\" title=\"3:loadbalance\"></a>3:loadbalance</h4><p>必须要在支持 这个模式的云平台上才能用 基于nodePort 只不过 这个模式会请求底层云平台的服务创建一个负载均衡器 来访问<br>这种方式 要看各个云平台的支持 例如阿里云就有点坑爹 每个服务都为你申请一个负载均衡器 贵的很 而且还不如直接用nodePort模式然后自己做负载均衡来的直接 简单  </p>\n<p>这个 哎 懒的尝试没必要 直接请求云平台的负载均衡服务 略坑 太贵 而且不好管理  建议就算了把  有用这个 不如直接使用nodePort 或者ic 或者自己维护nginx方式来做 </p>\n<h4 id=\"4-ingress\"><a href=\"#4-ingress\" class=\"headerlink\" title=\"4:ingress\"></a>4:ingress</h4><p>这个是k8s 算是比较官方的一种解决方案了<br>大神也总结的有文档<br><a href=\"http://blog.csdn.net/liyingke112/article/details/77066814\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/liyingke112/article/details/77066814</a><br><a href=\"https://www.kubernetes.org.cn/1885.html\" target=\"_blank\" rel=\"noopener\">https://www.kubernetes.org.cn/1885.html</a><br><a href=\"https://mritd.me/2017/03/04/how-to-use-nginx-ingress/#%E4%B8%80ingress-%E4%BB%8B%E7%BB%8D\" target=\"_blank\" rel=\"noopener\">https://mritd.me/2017/03/04/how-to-use-nginx-ingress/#%E4%B8%80ingress-%E4%BB%8B%E7%BB%8D</a><br><a href=\"https://mritd.me/2016/12/06/try-traefik-on-kubernetes/\" target=\"_blank\" rel=\"noopener\">https://mritd.me/2016/12/06/try-traefik-on-kubernetes/</a><br>比较麻烦 只有当集群大了之后 可以  小集群 需求并不大<br>主要就是 ingress 和ingress controller 、代理负载均衡器(例如nginx 之类的)<br>ingress : 配置规则的地方<br>ingress controller :将ingress中配置的规则 生成相应的配置 例如生成nginx的配置<br>负载均衡器: 例如nginx 具体分发流量的软件   ingress controller 通过ingress获取配置 自动刷新nginx中的配置 </p>\n<h4 id=\"5：自定义方案\"><a href=\"#5：自定义方案\" class=\"headerlink\" title=\"5：自定义方案\"></a>5：自定义方案</h4><p>nginx+config server<br>用nginx 直接分发service  配置通过config server 进行刷新<br>其实跟ingress差不多 只不过 由开发去维护 这个代理作用的nginx的pod 而不是直接由k8s直接管理   因为懂nginx配置的人多  懂ingress的人并不多<br>这个方案缺点就是要配置很多不同的service的配置 比较麻烦 只能手动配置  但是 这个配合loadbalancer 就可以很不错的做到代理分发 并且屏蔽底层serviceIp变化<br>最后通过暴露nginx的nodePort去给外部服务访问<br>1:按照<a href=\"http://docs.kubernetes.org.cn/126.html\" target=\"_blank\" rel=\"noopener\">http://docs.kubernetes.org.cn/126.html</a> 这个教程搭建 minikube 的hello-node 服务 这个时候可以通过nodePort 访问hello-node服务的<br>2:通过如下配置启动一个nginx-all deployment<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;kind&quot;: &quot;Deployment&quot;,</span><br><span class=\"line\">  &quot;apiVersion&quot;: &quot;extensions/v1beta1&quot;,</span><br><span class=\"line\">  &quot;metadata&quot;: &#123;</span><br><span class=\"line\">    &quot;name&quot;: &quot;nginx-all&quot;,</span><br><span class=\"line\">    &quot;namespace&quot;: &quot;default&quot;,</span><br><span class=\"line\">    &quot;selfLink&quot;: &quot;/apis/extensions/v1beta1/namespaces/default/deployments/nginx-all&quot;,</span><br><span class=\"line\">    &quot;uid&quot;: &quot;050be590-1b6d-11e8-a211-080027fc8712&quot;,</span><br><span class=\"line\">    &quot;resourceVersion&quot;: &quot;45623&quot;,</span><br><span class=\"line\">    &quot;generation&quot;: 1,</span><br><span class=\"line\">    &quot;creationTimestamp&quot;: &quot;2018-02-27T03:19:28Z&quot;,</span><br><span class=\"line\">    &quot;labels&quot;: &#123;</span><br><span class=\"line\">      &quot;k8s-app&quot;: &quot;nginx-all&quot;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &quot;annotations&quot;: &#123;</span><br><span class=\"line\">      &quot;deployment.kubernetes.io/revision&quot;: &quot;1&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &quot;spec&quot;: &#123;</span><br><span class=\"line\">    &quot;replicas&quot;: 1,</span><br><span class=\"line\">    &quot;selector&quot;: &#123;</span><br><span class=\"line\">      &quot;matchLabels&quot;: &#123;</span><br><span class=\"line\">        &quot;k8s-app&quot;: &quot;nginx-all&quot;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &quot;template&quot;: &#123;</span><br><span class=\"line\">      &quot;metadata&quot;: &#123;</span><br><span class=\"line\">        &quot;name&quot;: &quot;nginx-all&quot;,</span><br><span class=\"line\">        &quot;creationTimestamp&quot;: null,</span><br><span class=\"line\">        &quot;labels&quot;: &#123;</span><br><span class=\"line\">          &quot;k8s-app&quot;: &quot;nginx-all&quot;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &quot;spec&quot;: &#123;</span><br><span class=\"line\">        &quot;containers&quot;: [</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            &quot;name&quot;: &quot;nginx-all&quot;,</span><br><span class=\"line\">            &quot;image&quot;: &quot;nginx:1.13.8-alpine&quot;,</span><br><span class=\"line\">            &quot;resources&quot;: &#123;&#125;,</span><br><span class=\"line\">            &quot;terminationMessagePath&quot;: &quot;/dev/termination-log&quot;,</span><br><span class=\"line\">            &quot;terminationMessagePolicy&quot;: &quot;File&quot;,</span><br><span class=\"line\">            &quot;imagePullPolicy&quot;: &quot;IfNotPresent&quot;,</span><br><span class=\"line\">            &quot;securityContext&quot;: &#123;</span><br><span class=\"line\">              &quot;privileged&quot;: false</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        ],</span><br><span class=\"line\">        &quot;restartPolicy&quot;: &quot;Always&quot;,</span><br><span class=\"line\">        &quot;terminationGracePeriodSeconds&quot;: 30,</span><br><span class=\"line\">        &quot;dnsPolicy&quot;: &quot;ClusterFirst&quot;,</span><br><span class=\"line\">        &quot;securityContext&quot;: &#123;&#125;,</span><br><span class=\"line\">        &quot;schedulerName&quot;: &quot;default-scheduler&quot;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &quot;strategy&quot;: &#123;</span><br><span class=\"line\">      &quot;type&quot;: &quot;RollingUpdate&quot;,</span><br><span class=\"line\">      &quot;rollingUpdate&quot;: &#123;</span><br><span class=\"line\">        &quot;maxUnavailable&quot;: &quot;25%&quot;,</span><br><span class=\"line\">        &quot;maxSurge&quot;: &quot;25%&quot;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &quot;revisionHistoryLimit&quot;: 10,</span><br><span class=\"line\">    &quot;progressDeadlineSeconds&quot;: 600</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &quot;status&quot;: &#123;</span><br><span class=\"line\">    &quot;observedGeneration&quot;: 1,</span><br><span class=\"line\">    &quot;replicas&quot;: 1,</span><br><span class=\"line\">    &quot;updatedReplicas&quot;: 1,</span><br><span class=\"line\">    &quot;readyReplicas&quot;: 1,</span><br><span class=\"line\">    &quot;availableReplicas&quot;: 1,</span><br><span class=\"line\">    &quot;conditions&quot;: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        &quot;type&quot;: &quot;Available&quot;,</span><br><span class=\"line\">        &quot;status&quot;: &quot;True&quot;,</span><br><span class=\"line\">        &quot;lastUpdateTime&quot;: &quot;2018-02-27T03:19:29Z&quot;,</span><br><span class=\"line\">        &quot;lastTransitionTime&quot;: &quot;2018-02-27T03:19:29Z&quot;,</span><br><span class=\"line\">        &quot;reason&quot;: &quot;MinimumReplicasAvailable&quot;,</span><br><span class=\"line\">        &quot;message&quot;: &quot;Deployment has minimum availability.&quot;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        &quot;type&quot;: &quot;Progressing&quot;,</span><br><span class=\"line\">        &quot;status&quot;: &quot;True&quot;,</span><br><span class=\"line\">        &quot;lastUpdateTime&quot;: &quot;2018-02-27T03:19:29Z&quot;,</span><br><span class=\"line\">        &quot;lastTransitionTime&quot;: &quot;2018-02-27T03:19:28Z&quot;,</span><br><span class=\"line\">        &quot;reason&quot;: &quot;NewReplicaSetAvailable&quot;,</span><br><span class=\"line\">        &quot;message&quot;: &quot;ReplicaSet \\&quot;nginx-all-9bf75995b\\&quot; has successfully progressed.&quot;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p>\n<p>3:登陆 nginx-all容器 修改/etc/nginx/conf.d/default.conf  这一步 可以通过配合config server 来实现重启容器更新配置来实现配置的刷新</p>\n \n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen       80;</span><br><span class=\"line\">    server_name  localhost;</span><br><span class=\"line\"></span><br><span class=\"line\">    #charset koi8-r;</span><br><span class=\"line\">    #access_log  /var/log/nginx/host.access.log  main;</span><br><span class=\"line\"></span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        root   /usr/share/nginx/html;</span><br><span class=\"line\">        index  index.html index.htm;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    location /test&#123;</span><br><span class=\"line\">        # 配置 服务名称+port 不需要使用nodePort直接使用启动容器时候映射的那个port  hello-node 启动参数为-p 8080:80 所以这里使用8080 即可 </span><br><span class=\"line\">        proxy_pass http://hello-node:8080;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    error_page   500 502 503 504  /50x.html;</span><br><span class=\"line\">    location = /50x.html &#123;</span><br><span class=\"line\">        root   /usr/share/nginx/html;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>4：配置nginx service<br>配置 nginx service的nodePort<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl edit service  nginx-all</span><br></pre></td></tr></table></figure><p></p>\n<p>修改配置如下 就是配置 nodePort<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;kind&quot;: &quot;Service&quot;,</span><br><span class=\"line\">  &quot;apiVersion&quot;: &quot;v1&quot;,</span><br><span class=\"line\">  &quot;metadata&quot;: &#123;</span><br><span class=\"line\">    &quot;name&quot;: &quot;nginx-all&quot;,</span><br><span class=\"line\">    &quot;namespace&quot;: &quot;default&quot;,</span><br><span class=\"line\">    &quot;selfLink&quot;: &quot;/api/v1/namespaces/default/services/nginx-all&quot;,</span><br><span class=\"line\">    &quot;uid&quot;: &quot;050ea702-1b6d-11e8-a211-080027fc8712&quot;,</span><br><span class=\"line\">    &quot;resourceVersion&quot;: &quot;45659&quot;,</span><br><span class=\"line\">    &quot;creationTimestamp&quot;: &quot;2018-02-27T03:19:28Z&quot;,</span><br><span class=\"line\">    &quot;labels&quot;: &#123;</span><br><span class=\"line\">      &quot;k8s-app&quot;: &quot;nginx-all&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &quot;spec&quot;: &#123;</span><br><span class=\"line\">    &quot;ports&quot;: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        &quot;name&quot;: &quot;tcp-8080-80-cvw8l&quot;,</span><br><span class=\"line\">        &quot;protocol&quot;: &quot;TCP&quot;,</span><br><span class=\"line\">        &quot;port&quot;: 8080,</span><br><span class=\"line\">        &quot;targetPort&quot;: 80,</span><br><span class=\"line\">        &quot;nodePort&quot;: 31000</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    &quot;selector&quot;: &#123;</span><br><span class=\"line\">      &quot;k8s-app&quot;: &quot;nginx-all&quot;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &quot;clusterIP&quot;: &quot;10.102.241.166&quot;,</span><br><span class=\"line\">    &quot;type&quot;: &quot;NodePort&quot;,</span><br><span class=\"line\">    &quot;sessionAffinity&quot;: &quot;None&quot;,</span><br><span class=\"line\">    &quot;externalTrafficPolicy&quot;: &quot;Cluster&quot;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &quot;status&quot;: &#123;</span><br><span class=\"line\">    &quot;loadBalancer&quot;: &#123;&#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p>\n<p>6:通过nginx访问hello-node服务<br>minikube的 node ip 默认为192.168.99.100<br>访问 <a href=\"http://192.168.99.100:31000/test\" target=\"_blank\" rel=\"noopener\">http://192.168.99.100:31000/test</a> 就是通过nginx代理访问了hello-node 服务  </p>\n<h4 id=\"6-service-loadbalancer\"><a href=\"#6-service-loadbalancer\" class=\"headerlink\" title=\"6: service loadbalancer\"></a>6: service loadbalancer</h4><p>可以用一个clusterIP 共享一个ip<br>配合自定义代理可以做到一个ip 多个不同端口访问不同服务 配合nginx做代理 做到不受服务的变更 只需要一个clusterIp即可配置nginx 屏蔽底层的serviceIp变化<br>这种方案 有单点故障的隐患 和性能问题 暂时不成熟</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结:\"></a>总结:</h2><p>说到底 暴露服务还是要通过k8s内部的网络去做<br>如果像我一样懒 那就选择ingress<br>当然我最终选择还是 自定义方案<br>没啥别的 就是nginx配置 之前就有  ingress的配置 特么还要我自己写 肯定选择自定义方案<br>如果是新项目 或者不偷懒 建议选择ingress方案 因为毕竟是官方的套路 很多人实践过 后续简单  自定义方案最终还是需要一个基佬去维护配置的<br>这里有个坑  就是 如果为了方便 配置 建议所有服务节点一定要有一个统一前缀  如果没有 请尽量推动各位基佬增加一个统一前缀 不然写配置 要写疯</p>","site":{"data":{}},"excerpt":"","more":"<p>参考文档:<br><a href=\"http://blog.csdn.net/liyingke112/article/details/76022267\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/liyingke112/article/details/76022267</a><br><a href=\"https://www.kubernetes.org.cn/1885.html\" target=\"_blank\" rel=\"noopener\">https://www.kubernetes.org.cn/1885.html</a><br>k8s集群暴露服务 常见的就四种</p><h4 id=\"1-clusterIp\"><a href=\"#1-clusterIp\" class=\"headerlink\" title=\"1: clusterIp\"></a>1: clusterIp</h4><p>clusterIp就是service的ip k8s在创建service的时候 会给service一个ip 集群内部可以通过这个clusterIp访问相应的service<br>这种方式呢稍微麻烦 最终要暴露外部服务 还是要建立nginx之类的反向代理 然后再暴露出集群<br>实践:<br>这个需要在集群中的一个节点去访问<br>登陆集群中同一个命名空间的容器 直接ping 对应的clusterIp 或者直接telnet 访问clusterIp:clusterPort clusterPort就是service配置中的targetPort<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ping &lt;clusterIp&gt;</span><br><span class=\"line\">telnet &lt;clusterIp&gt; &lt;targetPort&gt;</span><br></pre></td></tr></table></figure><p></p>\n<h4 id=\"2-nodePort\"><a href=\"#2-nodePort\" class=\"headerlink\" title=\"2:nodePort\"></a>2:nodePort</h4><p>node在k8s中表示是一台物理机或者虚拟机 nodePort是k8s集群在创建service的时候 会在每个node上暴露出nodePort 外部可以直接通过nodeIp:nodePort访问 服务<br>这种方式 很容易实现 但是不太符合实际生产环境 因为在新开服务或者新增node的时候需要增加配置 会导致依赖一个外部的负载均衡器去分发各个node<br>配置太多了 不利于维护   nodePort模式依旧存在clusterIp 依旧可以通过第一种方式访问<br>实例:<br>配置 service<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl edit service &lt;serviceName&gt;</span><br></pre></td></tr></table></figure><p></p>\n<p>type 为NodePort  拥有port、targetPort、nodePort<br>这个如果不是这个配置 可以修改<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">。。。</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  clusterIP: 10.103.100.161</span><br><span class=\"line\">  externalTrafficPolicy: Cluster</span><br><span class=\"line\">  ports:</span><br><span class=\"line\">  - nodePort: 30115</span><br><span class=\"line\">    port: 8080</span><br><span class=\"line\">    protocol: TCP</span><br><span class=\"line\">    targetPort: 8080</span><br><span class=\"line\">  selector:</span><br><span class=\"line\">    run: hello-node</span><br><span class=\"line\">  sessionAffinity: None</span><br><span class=\"line\">  type: NodePort</span><br><span class=\"line\">  。。。</span><br></pre></td></tr></table></figure><p></p>\n<p>直接ping node的ip 或者直接通过telnet 访问nodeIp:nodePort<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ping &lt;nodeIp&gt;</span><br><span class=\"line\">telnet &lt;nodeIp&gt; &lt;nodePort&gt;</span><br></pre></td></tr></table></figure><p></p>\n<h4 id=\"3-loadbalance\"><a href=\"#3-loadbalance\" class=\"headerlink\" title=\"3:loadbalance\"></a>3:loadbalance</h4><p>必须要在支持 这个模式的云平台上才能用 基于nodePort 只不过 这个模式会请求底层云平台的服务创建一个负载均衡器 来访问<br>这种方式 要看各个云平台的支持 例如阿里云就有点坑爹 每个服务都为你申请一个负载均衡器 贵的很 而且还不如直接用nodePort模式然后自己做负载均衡来的直接 简单  </p>\n<p>这个 哎 懒的尝试没必要 直接请求云平台的负载均衡服务 略坑 太贵 而且不好管理  建议就算了把  有用这个 不如直接使用nodePort 或者ic 或者自己维护nginx方式来做 </p>\n<h4 id=\"4-ingress\"><a href=\"#4-ingress\" class=\"headerlink\" title=\"4:ingress\"></a>4:ingress</h4><p>这个是k8s 算是比较官方的一种解决方案了<br>大神也总结的有文档<br><a href=\"http://blog.csdn.net/liyingke112/article/details/77066814\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/liyingke112/article/details/77066814</a><br><a href=\"https://www.kubernetes.org.cn/1885.html\" target=\"_blank\" rel=\"noopener\">https://www.kubernetes.org.cn/1885.html</a><br><a href=\"https://mritd.me/2017/03/04/how-to-use-nginx-ingress/#%E4%B8%80ingress-%E4%BB%8B%E7%BB%8D\" target=\"_blank\" rel=\"noopener\">https://mritd.me/2017/03/04/how-to-use-nginx-ingress/#%E4%B8%80ingress-%E4%BB%8B%E7%BB%8D</a><br><a href=\"https://mritd.me/2016/12/06/try-traefik-on-kubernetes/\" target=\"_blank\" rel=\"noopener\">https://mritd.me/2016/12/06/try-traefik-on-kubernetes/</a><br>比较麻烦 只有当集群大了之后 可以  小集群 需求并不大<br>主要就是 ingress 和ingress controller 、代理负载均衡器(例如nginx 之类的)<br>ingress : 配置规则的地方<br>ingress controller :将ingress中配置的规则 生成相应的配置 例如生成nginx的配置<br>负载均衡器: 例如nginx 具体分发流量的软件   ingress controller 通过ingress获取配置 自动刷新nginx中的配置 </p>\n<h4 id=\"5：自定义方案\"><a href=\"#5：自定义方案\" class=\"headerlink\" title=\"5：自定义方案\"></a>5：自定义方案</h4><p>nginx+config server<br>用nginx 直接分发service  配置通过config server 进行刷新<br>其实跟ingress差不多 只不过 由开发去维护 这个代理作用的nginx的pod 而不是直接由k8s直接管理   因为懂nginx配置的人多  懂ingress的人并不多<br>这个方案缺点就是要配置很多不同的service的配置 比较麻烦 只能手动配置  但是 这个配合loadbalancer 就可以很不错的做到代理分发 并且屏蔽底层serviceIp变化<br>最后通过暴露nginx的nodePort去给外部服务访问<br>1:按照<a href=\"http://docs.kubernetes.org.cn/126.html\" target=\"_blank\" rel=\"noopener\">http://docs.kubernetes.org.cn/126.html</a> 这个教程搭建 minikube 的hello-node 服务 这个时候可以通过nodePort 访问hello-node服务的<br>2:通过如下配置启动一个nginx-all deployment<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;kind&quot;: &quot;Deployment&quot;,</span><br><span class=\"line\">  &quot;apiVersion&quot;: &quot;extensions/v1beta1&quot;,</span><br><span class=\"line\">  &quot;metadata&quot;: &#123;</span><br><span class=\"line\">    &quot;name&quot;: &quot;nginx-all&quot;,</span><br><span class=\"line\">    &quot;namespace&quot;: &quot;default&quot;,</span><br><span class=\"line\">    &quot;selfLink&quot;: &quot;/apis/extensions/v1beta1/namespaces/default/deployments/nginx-all&quot;,</span><br><span class=\"line\">    &quot;uid&quot;: &quot;050be590-1b6d-11e8-a211-080027fc8712&quot;,</span><br><span class=\"line\">    &quot;resourceVersion&quot;: &quot;45623&quot;,</span><br><span class=\"line\">    &quot;generation&quot;: 1,</span><br><span class=\"line\">    &quot;creationTimestamp&quot;: &quot;2018-02-27T03:19:28Z&quot;,</span><br><span class=\"line\">    &quot;labels&quot;: &#123;</span><br><span class=\"line\">      &quot;k8s-app&quot;: &quot;nginx-all&quot;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &quot;annotations&quot;: &#123;</span><br><span class=\"line\">      &quot;deployment.kubernetes.io/revision&quot;: &quot;1&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &quot;spec&quot;: &#123;</span><br><span class=\"line\">    &quot;replicas&quot;: 1,</span><br><span class=\"line\">    &quot;selector&quot;: &#123;</span><br><span class=\"line\">      &quot;matchLabels&quot;: &#123;</span><br><span class=\"line\">        &quot;k8s-app&quot;: &quot;nginx-all&quot;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &quot;template&quot;: &#123;</span><br><span class=\"line\">      &quot;metadata&quot;: &#123;</span><br><span class=\"line\">        &quot;name&quot;: &quot;nginx-all&quot;,</span><br><span class=\"line\">        &quot;creationTimestamp&quot;: null,</span><br><span class=\"line\">        &quot;labels&quot;: &#123;</span><br><span class=\"line\">          &quot;k8s-app&quot;: &quot;nginx-all&quot;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &quot;spec&quot;: &#123;</span><br><span class=\"line\">        &quot;containers&quot;: [</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            &quot;name&quot;: &quot;nginx-all&quot;,</span><br><span class=\"line\">            &quot;image&quot;: &quot;nginx:1.13.8-alpine&quot;,</span><br><span class=\"line\">            &quot;resources&quot;: &#123;&#125;,</span><br><span class=\"line\">            &quot;terminationMessagePath&quot;: &quot;/dev/termination-log&quot;,</span><br><span class=\"line\">            &quot;terminationMessagePolicy&quot;: &quot;File&quot;,</span><br><span class=\"line\">            &quot;imagePullPolicy&quot;: &quot;IfNotPresent&quot;,</span><br><span class=\"line\">            &quot;securityContext&quot;: &#123;</span><br><span class=\"line\">              &quot;privileged&quot;: false</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        ],</span><br><span class=\"line\">        &quot;restartPolicy&quot;: &quot;Always&quot;,</span><br><span class=\"line\">        &quot;terminationGracePeriodSeconds&quot;: 30,</span><br><span class=\"line\">        &quot;dnsPolicy&quot;: &quot;ClusterFirst&quot;,</span><br><span class=\"line\">        &quot;securityContext&quot;: &#123;&#125;,</span><br><span class=\"line\">        &quot;schedulerName&quot;: &quot;default-scheduler&quot;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &quot;strategy&quot;: &#123;</span><br><span class=\"line\">      &quot;type&quot;: &quot;RollingUpdate&quot;,</span><br><span class=\"line\">      &quot;rollingUpdate&quot;: &#123;</span><br><span class=\"line\">        &quot;maxUnavailable&quot;: &quot;25%&quot;,</span><br><span class=\"line\">        &quot;maxSurge&quot;: &quot;25%&quot;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &quot;revisionHistoryLimit&quot;: 10,</span><br><span class=\"line\">    &quot;progressDeadlineSeconds&quot;: 600</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &quot;status&quot;: &#123;</span><br><span class=\"line\">    &quot;observedGeneration&quot;: 1,</span><br><span class=\"line\">    &quot;replicas&quot;: 1,</span><br><span class=\"line\">    &quot;updatedReplicas&quot;: 1,</span><br><span class=\"line\">    &quot;readyReplicas&quot;: 1,</span><br><span class=\"line\">    &quot;availableReplicas&quot;: 1,</span><br><span class=\"line\">    &quot;conditions&quot;: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        &quot;type&quot;: &quot;Available&quot;,</span><br><span class=\"line\">        &quot;status&quot;: &quot;True&quot;,</span><br><span class=\"line\">        &quot;lastUpdateTime&quot;: &quot;2018-02-27T03:19:29Z&quot;,</span><br><span class=\"line\">        &quot;lastTransitionTime&quot;: &quot;2018-02-27T03:19:29Z&quot;,</span><br><span class=\"line\">        &quot;reason&quot;: &quot;MinimumReplicasAvailable&quot;,</span><br><span class=\"line\">        &quot;message&quot;: &quot;Deployment has minimum availability.&quot;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        &quot;type&quot;: &quot;Progressing&quot;,</span><br><span class=\"line\">        &quot;status&quot;: &quot;True&quot;,</span><br><span class=\"line\">        &quot;lastUpdateTime&quot;: &quot;2018-02-27T03:19:29Z&quot;,</span><br><span class=\"line\">        &quot;lastTransitionTime&quot;: &quot;2018-02-27T03:19:28Z&quot;,</span><br><span class=\"line\">        &quot;reason&quot;: &quot;NewReplicaSetAvailable&quot;,</span><br><span class=\"line\">        &quot;message&quot;: &quot;ReplicaSet \\&quot;nginx-all-9bf75995b\\&quot; has successfully progressed.&quot;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p>\n<p>3:登陆 nginx-all容器 修改/etc/nginx/conf.d/default.conf  这一步 可以通过配合config server 来实现重启容器更新配置来实现配置的刷新</p>\n \n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen       80;</span><br><span class=\"line\">    server_name  localhost;</span><br><span class=\"line\"></span><br><span class=\"line\">    #charset koi8-r;</span><br><span class=\"line\">    #access_log  /var/log/nginx/host.access.log  main;</span><br><span class=\"line\"></span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        root   /usr/share/nginx/html;</span><br><span class=\"line\">        index  index.html index.htm;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    location /test&#123;</span><br><span class=\"line\">        # 配置 服务名称+port 不需要使用nodePort直接使用启动容器时候映射的那个port  hello-node 启动参数为-p 8080:80 所以这里使用8080 即可 </span><br><span class=\"line\">        proxy_pass http://hello-node:8080;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    error_page   500 502 503 504  /50x.html;</span><br><span class=\"line\">    location = /50x.html &#123;</span><br><span class=\"line\">        root   /usr/share/nginx/html;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>4：配置nginx service<br>配置 nginx service的nodePort<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl edit service  nginx-all</span><br></pre></td></tr></table></figure><p></p>\n<p>修改配置如下 就是配置 nodePort<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;kind&quot;: &quot;Service&quot;,</span><br><span class=\"line\">  &quot;apiVersion&quot;: &quot;v1&quot;,</span><br><span class=\"line\">  &quot;metadata&quot;: &#123;</span><br><span class=\"line\">    &quot;name&quot;: &quot;nginx-all&quot;,</span><br><span class=\"line\">    &quot;namespace&quot;: &quot;default&quot;,</span><br><span class=\"line\">    &quot;selfLink&quot;: &quot;/api/v1/namespaces/default/services/nginx-all&quot;,</span><br><span class=\"line\">    &quot;uid&quot;: &quot;050ea702-1b6d-11e8-a211-080027fc8712&quot;,</span><br><span class=\"line\">    &quot;resourceVersion&quot;: &quot;45659&quot;,</span><br><span class=\"line\">    &quot;creationTimestamp&quot;: &quot;2018-02-27T03:19:28Z&quot;,</span><br><span class=\"line\">    &quot;labels&quot;: &#123;</span><br><span class=\"line\">      &quot;k8s-app&quot;: &quot;nginx-all&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &quot;spec&quot;: &#123;</span><br><span class=\"line\">    &quot;ports&quot;: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        &quot;name&quot;: &quot;tcp-8080-80-cvw8l&quot;,</span><br><span class=\"line\">        &quot;protocol&quot;: &quot;TCP&quot;,</span><br><span class=\"line\">        &quot;port&quot;: 8080,</span><br><span class=\"line\">        &quot;targetPort&quot;: 80,</span><br><span class=\"line\">        &quot;nodePort&quot;: 31000</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    &quot;selector&quot;: &#123;</span><br><span class=\"line\">      &quot;k8s-app&quot;: &quot;nginx-all&quot;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &quot;clusterIP&quot;: &quot;10.102.241.166&quot;,</span><br><span class=\"line\">    &quot;type&quot;: &quot;NodePort&quot;,</span><br><span class=\"line\">    &quot;sessionAffinity&quot;: &quot;None&quot;,</span><br><span class=\"line\">    &quot;externalTrafficPolicy&quot;: &quot;Cluster&quot;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &quot;status&quot;: &#123;</span><br><span class=\"line\">    &quot;loadBalancer&quot;: &#123;&#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p>\n<p>6:通过nginx访问hello-node服务<br>minikube的 node ip 默认为192.168.99.100<br>访问 <a href=\"http://192.168.99.100:31000/test\" target=\"_blank\" rel=\"noopener\">http://192.168.99.100:31000/test</a> 就是通过nginx代理访问了hello-node 服务  </p>\n<h4 id=\"6-service-loadbalancer\"><a href=\"#6-service-loadbalancer\" class=\"headerlink\" title=\"6: service loadbalancer\"></a>6: service loadbalancer</h4><p>可以用一个clusterIP 共享一个ip<br>配合自定义代理可以做到一个ip 多个不同端口访问不同服务 配合nginx做代理 做到不受服务的变更 只需要一个clusterIp即可配置nginx 屏蔽底层的serviceIp变化<br>这种方案 有单点故障的隐患 和性能问题 暂时不成熟</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结:\"></a>总结:</h2><p>说到底 暴露服务还是要通过k8s内部的网络去做<br>如果像我一样懒 那就选择ingress<br>当然我最终选择还是 自定义方案<br>没啥别的 就是nginx配置 之前就有  ingress的配置 特么还要我自己写 肯定选择自定义方案<br>如果是新项目 或者不偷懒 建议选择ingress方案 因为毕竟是官方的套路 很多人实践过 后续简单  自定义方案最终还是需要一个基佬去维护配置的<br>这里有个坑  就是 如果为了方便 配置 建议所有服务节点一定要有一个统一前缀  如果没有 请尽量推动各位基佬增加一个统一前缀 不然写配置 要写疯</p>"},{"title":"log4j2通过socket发送日志到elk平台","comments":1,"abbrlink":"b83d1b10","date":"2018-06-25T06:09:00.000Z","_content":"#### 前言\n尝试过很多 spring cloud中日志的方案 好多还是需要 集群的支持 \n但是现在公司还没有那么吊的基础设施 那么 这个时候 就需要 项目能够自己直接通过tcp或者udp直接投递日志到elk或者生成日志文件去采集了\n但是 项目是使用docker 去部署在swarm或者k8s中 这个时候 生成日志文件 相对来说有点扯淡  \n但是公司的swarm集群又没有办法采集到标准输出和错误输出  那么就需要项目自己去投递日志到elk或者队列中让elk去接受了\n由于时间较为紧急 直接采用log4j2的socketAppender 来投递日志 使用自定义jsonLayout去格式化 并且适配logstash \n#### 实践\n\n##### 编写jsonLayout\n```\npackage com.ming.log;\n\nimport com.fasterxml.jackson.core.JsonProcessingException;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport org.apache.commons.lang3.time.DateFormatUtils;\nimport org.apache.logging.log4j.core.Layout;\nimport org.apache.logging.log4j.core.LogEvent;\nimport org.apache.logging.log4j.core.config.Configuration;\nimport org.apache.logging.log4j.core.config.Node;\nimport org.apache.logging.log4j.core.config.plugins.*;\nimport org.apache.logging.log4j.core.layout.AbstractStringLayout;\nimport org.apache.logging.log4j.core.layout.PatternLayout;\nimport org.apache.logging.log4j.core.layout.PatternSelector;\nimport org.apache.logging.log4j.core.pattern.RegexReplacement;\n\nimport java.io.File;\nimport java.nio.charset.Charset;\n\n/**\n * boss json格式日志\n * <p>\n * 配合elk的配置 使用\n * 原作者文章地址: https://blog.csdn.net/lnkToKing/article/details/79563460\n *\n * @author ming\n * @date 2018-06-22 10:59:56\n */\n@Plugin(name = \"MingJsonPatternLayout\", category = Node.CATEGORY, elementType = Layout.ELEMENT_TYPE, printObject = true)\npublic class MingJsonPatternLayout extends AbstractStringLayout {\n    /**\n     * 项目路径\n     */\n    private static String PROJECT_PATH;\n\n    private PatternLayout patternLayout;\n\n    private String projectName;\n    private String logType;\n\n    static {\n        PROJECT_PATH = new File(\"\").getAbsolutePath();\n    }\n\n    private BossJsonPatternLayout(Configuration config, RegexReplacement replace, String eventPattern,\n                                  PatternSelector patternSelector, Charset charset, boolean alwaysWriteExceptions,\n                                  boolean noConsoleNoAnsi, String headerPattern, String footerPattern, String projectName, String logType) {\n        super(config, charset,\n                PatternLayout.createSerializer(config, replace, headerPattern, null, patternSelector, alwaysWriteExceptions,\n                        noConsoleNoAnsi),\n                PatternLayout.createSerializer(config, replace, footerPattern, null, patternSelector, alwaysWriteExceptions,\n                        noConsoleNoAnsi));\n\n        this.projectName = projectName;\n        this.logType = logType;\n        this.patternLayout = PatternLayout.newBuilder()\n                .withPattern(eventPattern)\n                .withPatternSelector(patternSelector)\n                .withConfiguration(config)\n                .withRegexReplacement(replace)\n                .withCharset(charset)\n                .withAlwaysWriteExceptions(alwaysWriteExceptions)\n                .withNoConsoleNoAnsi(noConsoleNoAnsi)\n                .withHeader(headerPattern)\n                .withFooter(footerPattern)\n                .build();\n    }\n\n    @Override\n    public String toSerializable(LogEvent event) {\n        //在这里处理日志内容\n        String message = patternLayout.toSerializable(event);\n        String jsonStr = new JsonLoggerInfo(projectName, message, event.getLevel().name(), logType, event.getTimeMillis()).toString();\n        return jsonStr + \"\\n\";\n    }\n\n    @PluginFactory\n    public static BossJsonPatternLayout createLayout(\n            @PluginAttribute(value = \"pattern\", defaultString = PatternLayout.DEFAULT_CONVERSION_PATTERN) final String pattern,\n            @PluginElement(\"PatternSelector\") final PatternSelector patternSelector,\n            @PluginConfiguration final Configuration config,\n            @PluginElement(\"Replace\") final RegexReplacement replace,\n            // LOG4J2-783 use platform default by default, so do not specify defaultString for charset\n            @PluginAttribute(value = \"charset\") final Charset charset,\n            @PluginAttribute(value = \"alwaysWriteExceptions\", defaultBoolean = true) final boolean alwaysWriteExceptions,\n            @PluginAttribute(value = \"noConsoleNoAnsi\", defaultBoolean = false) final boolean noConsoleNoAnsi,\n            @PluginAttribute(\"header\") final String headerPattern,\n            @PluginAttribute(\"footer\") final String footerPattern,\n            @PluginAttribute(\"projectName\") final String projectName,\n            @PluginAttribute(\"logType\") final String logType) {\n\n\n        return new BossJsonPatternLayout(config, replace, pattern, patternSelector, charset,\n                alwaysWriteExceptions, noConsoleNoAnsi, headerPattern, footerPattern, projectName, logType);\n    }\n\n    /**\n     * 输出的日志内容\n     */\n    public static class JsonLoggerInfo {\n        /**\n         * 项目名\n         */\n        private String projectName;\n        /**\n         * 项目目录路径\n         */\n        private String projectPath;\n        /**\n         * 日志信息\n         */\n        private String message;\n        /**\n         * 日志级别\n         */\n        private String level;\n        /**\n         * 日志分类\n         */\n        private String logType;\n        /**\n         * 日志时间\n         */\n        private String time;\n\n        public JsonLoggerInfo(String projectName, String message, String level, String logType, long timeMillis) {\n            this.projectName = projectName;\n            this.projectPath = PROJECT_PATH;\n            this.message = message;\n            this.level = level;\n            this.logType = logType;\n            this.time = DateFormatUtils.format(timeMillis, \"yyyy-MM-dd HH:mm:ss.SSS\");\n        }\n\n        public String getProjectName() {\n            return projectName;\n        }\n\n        public String getProjectPath() {\n            return projectPath;\n        }\n\n        public String getMessage() {\n            return message;\n        }\n\n        public String getLevel() {\n            return level;\n        }\n\n        public String getLogType() {\n            return logType;\n        }\n\n        public String getTime() {\n            return time;\n        }\n\n        @Override\n        public String toString() {\n            try {\n                return new ObjectMapper().writeValueAsString(this);\n            } catch (JsonProcessingException e) {\n                e.printStackTrace();\n            }\n            return null;\n        }\n    }\n}\n\n```\n#####  配置log4j2.xml\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!-- monitorInterval=\"60\"表示每60秒配置文件会动态加载一次。在程序运行过程中，如果修改配置文件，程序会随之改变。 -->\n<configuration status=\"warn\" monitorInterval=\"1\">\n    <!-- 定义通用的属性 -->\n    <Properties>\n        <Property name=\"PROJECT_NAME\">ming</Property>\n        <Property name=\"ELK_LOG_PATTERN\">%d{yyyy-MM-dd HH:mm:ss} %-5p  thread[%thread] %l  %msg %n</Property>\n    </Properties>\n\n    <appenders>\n        <!--测试环境 elk的logstash 入口-->\n        <Socket name=\"logstash\" host=\"<logstash-ip>\" port=\"<logstash-port>\" protocol=\"TCP\">\n            <MingJsonPatternLayout pattern=\"${ELK_LOG_PATTERN}\" projectName=\"${PROJECT_NAME}\" logType=\"ming\" />\n        </Socket>\n\n    </appenders>\n\n\n    <Loggers>\n\n        <!-- 配置项目的 日志等级输出 -->\n        <root level=\"DEBUG\">\n            <!-- 通过tcp 传输到logstash-->\n            <appender-ref ref=\"logstash\"/>\n        </root>\n    </Loggers>\n</configuration>\n```\n替换xml中 <logstash-ip> <logstash-port>为自己的 logstash ip和port\n\n##### 配置 logstash\n\n```\ninput {\n    #开启远程输入日志服务\n    tcp {\n        port => \"<logstash-port>\"\n        mode => \"server\"\n        type => \"log4j2\"\n    }\n}\n\nfilter {\n    #将日志转成json对象\n    json {\n        source => \"message\"\n    }\n    #将远程客户端的日志时间设置为插入时间，不设置默认为当前系统时间，可能会存在时间误差\n    date {\n        match => [\"time\", \"yyyy-MM-dd HH:mm:ss.SSS\"]\n        remove_field => [\"time\"]\n    }\n}\n\noutput {\n    elasticsearch {\n        hosts => [\"<es-ip>:<es-port>\"]\n        index  => \"application-%{+YYYY.MM.dd}\"\n    }\n}\n```\n替换上面配置中的<logstash-port>(和log4j2中port保持一致)、<es-ip>、<es-port>(默认为9200)\n修改后重启logstash 启动配置 即可\n\n#### 总结\n其实最终是期望 项目直接输出标准输出和错误输出 由swarm或者k8s直接统一采集 标准输出和错误输出 这样 又避免了生成实际文件 有简化了项目的配置 \n这个直接使用socketAppender投递日志存在缺陷 一是socket比较简略 如果追求高性能需要自己重写 socketAppender 二个 需要logstash的解析和log4j2中的Layout进行匹配 \n否则 输出的日志 一坨翔  \n\n","source":"_posts/综合应用/log4j2通过socket发送日志到elk平台.md","raw":"---\ntitle: log4j2通过socket发送日志到elk平台\ncomments: true\ncategories: 实战\ntags: \n  -log4j2 \n  -socket \n  -elk\nabbrlink: b83d1b10\ndate: 2018-06-25 14:09:00\n---\n#### 前言\n尝试过很多 spring cloud中日志的方案 好多还是需要 集群的支持 \n但是现在公司还没有那么吊的基础设施 那么 这个时候 就需要 项目能够自己直接通过tcp或者udp直接投递日志到elk或者生成日志文件去采集了\n但是 项目是使用docker 去部署在swarm或者k8s中 这个时候 生成日志文件 相对来说有点扯淡  \n但是公司的swarm集群又没有办法采集到标准输出和错误输出  那么就需要项目自己去投递日志到elk或者队列中让elk去接受了\n由于时间较为紧急 直接采用log4j2的socketAppender 来投递日志 使用自定义jsonLayout去格式化 并且适配logstash \n#### 实践\n\n##### 编写jsonLayout\n```\npackage com.ming.log;\n\nimport com.fasterxml.jackson.core.JsonProcessingException;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport org.apache.commons.lang3.time.DateFormatUtils;\nimport org.apache.logging.log4j.core.Layout;\nimport org.apache.logging.log4j.core.LogEvent;\nimport org.apache.logging.log4j.core.config.Configuration;\nimport org.apache.logging.log4j.core.config.Node;\nimport org.apache.logging.log4j.core.config.plugins.*;\nimport org.apache.logging.log4j.core.layout.AbstractStringLayout;\nimport org.apache.logging.log4j.core.layout.PatternLayout;\nimport org.apache.logging.log4j.core.layout.PatternSelector;\nimport org.apache.logging.log4j.core.pattern.RegexReplacement;\n\nimport java.io.File;\nimport java.nio.charset.Charset;\n\n/**\n * boss json格式日志\n * <p>\n * 配合elk的配置 使用\n * 原作者文章地址: https://blog.csdn.net/lnkToKing/article/details/79563460\n *\n * @author ming\n * @date 2018-06-22 10:59:56\n */\n@Plugin(name = \"MingJsonPatternLayout\", category = Node.CATEGORY, elementType = Layout.ELEMENT_TYPE, printObject = true)\npublic class MingJsonPatternLayout extends AbstractStringLayout {\n    /**\n     * 项目路径\n     */\n    private static String PROJECT_PATH;\n\n    private PatternLayout patternLayout;\n\n    private String projectName;\n    private String logType;\n\n    static {\n        PROJECT_PATH = new File(\"\").getAbsolutePath();\n    }\n\n    private BossJsonPatternLayout(Configuration config, RegexReplacement replace, String eventPattern,\n                                  PatternSelector patternSelector, Charset charset, boolean alwaysWriteExceptions,\n                                  boolean noConsoleNoAnsi, String headerPattern, String footerPattern, String projectName, String logType) {\n        super(config, charset,\n                PatternLayout.createSerializer(config, replace, headerPattern, null, patternSelector, alwaysWriteExceptions,\n                        noConsoleNoAnsi),\n                PatternLayout.createSerializer(config, replace, footerPattern, null, patternSelector, alwaysWriteExceptions,\n                        noConsoleNoAnsi));\n\n        this.projectName = projectName;\n        this.logType = logType;\n        this.patternLayout = PatternLayout.newBuilder()\n                .withPattern(eventPattern)\n                .withPatternSelector(patternSelector)\n                .withConfiguration(config)\n                .withRegexReplacement(replace)\n                .withCharset(charset)\n                .withAlwaysWriteExceptions(alwaysWriteExceptions)\n                .withNoConsoleNoAnsi(noConsoleNoAnsi)\n                .withHeader(headerPattern)\n                .withFooter(footerPattern)\n                .build();\n    }\n\n    @Override\n    public String toSerializable(LogEvent event) {\n        //在这里处理日志内容\n        String message = patternLayout.toSerializable(event);\n        String jsonStr = new JsonLoggerInfo(projectName, message, event.getLevel().name(), logType, event.getTimeMillis()).toString();\n        return jsonStr + \"\\n\";\n    }\n\n    @PluginFactory\n    public static BossJsonPatternLayout createLayout(\n            @PluginAttribute(value = \"pattern\", defaultString = PatternLayout.DEFAULT_CONVERSION_PATTERN) final String pattern,\n            @PluginElement(\"PatternSelector\") final PatternSelector patternSelector,\n            @PluginConfiguration final Configuration config,\n            @PluginElement(\"Replace\") final RegexReplacement replace,\n            // LOG4J2-783 use platform default by default, so do not specify defaultString for charset\n            @PluginAttribute(value = \"charset\") final Charset charset,\n            @PluginAttribute(value = \"alwaysWriteExceptions\", defaultBoolean = true) final boolean alwaysWriteExceptions,\n            @PluginAttribute(value = \"noConsoleNoAnsi\", defaultBoolean = false) final boolean noConsoleNoAnsi,\n            @PluginAttribute(\"header\") final String headerPattern,\n            @PluginAttribute(\"footer\") final String footerPattern,\n            @PluginAttribute(\"projectName\") final String projectName,\n            @PluginAttribute(\"logType\") final String logType) {\n\n\n        return new BossJsonPatternLayout(config, replace, pattern, patternSelector, charset,\n                alwaysWriteExceptions, noConsoleNoAnsi, headerPattern, footerPattern, projectName, logType);\n    }\n\n    /**\n     * 输出的日志内容\n     */\n    public static class JsonLoggerInfo {\n        /**\n         * 项目名\n         */\n        private String projectName;\n        /**\n         * 项目目录路径\n         */\n        private String projectPath;\n        /**\n         * 日志信息\n         */\n        private String message;\n        /**\n         * 日志级别\n         */\n        private String level;\n        /**\n         * 日志分类\n         */\n        private String logType;\n        /**\n         * 日志时间\n         */\n        private String time;\n\n        public JsonLoggerInfo(String projectName, String message, String level, String logType, long timeMillis) {\n            this.projectName = projectName;\n            this.projectPath = PROJECT_PATH;\n            this.message = message;\n            this.level = level;\n            this.logType = logType;\n            this.time = DateFormatUtils.format(timeMillis, \"yyyy-MM-dd HH:mm:ss.SSS\");\n        }\n\n        public String getProjectName() {\n            return projectName;\n        }\n\n        public String getProjectPath() {\n            return projectPath;\n        }\n\n        public String getMessage() {\n            return message;\n        }\n\n        public String getLevel() {\n            return level;\n        }\n\n        public String getLogType() {\n            return logType;\n        }\n\n        public String getTime() {\n            return time;\n        }\n\n        @Override\n        public String toString() {\n            try {\n                return new ObjectMapper().writeValueAsString(this);\n            } catch (JsonProcessingException e) {\n                e.printStackTrace();\n            }\n            return null;\n        }\n    }\n}\n\n```\n#####  配置log4j2.xml\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!-- monitorInterval=\"60\"表示每60秒配置文件会动态加载一次。在程序运行过程中，如果修改配置文件，程序会随之改变。 -->\n<configuration status=\"warn\" monitorInterval=\"1\">\n    <!-- 定义通用的属性 -->\n    <Properties>\n        <Property name=\"PROJECT_NAME\">ming</Property>\n        <Property name=\"ELK_LOG_PATTERN\">%d{yyyy-MM-dd HH:mm:ss} %-5p  thread[%thread] %l  %msg %n</Property>\n    </Properties>\n\n    <appenders>\n        <!--测试环境 elk的logstash 入口-->\n        <Socket name=\"logstash\" host=\"<logstash-ip>\" port=\"<logstash-port>\" protocol=\"TCP\">\n            <MingJsonPatternLayout pattern=\"${ELK_LOG_PATTERN}\" projectName=\"${PROJECT_NAME}\" logType=\"ming\" />\n        </Socket>\n\n    </appenders>\n\n\n    <Loggers>\n\n        <!-- 配置项目的 日志等级输出 -->\n        <root level=\"DEBUG\">\n            <!-- 通过tcp 传输到logstash-->\n            <appender-ref ref=\"logstash\"/>\n        </root>\n    </Loggers>\n</configuration>\n```\n替换xml中 <logstash-ip> <logstash-port>为自己的 logstash ip和port\n\n##### 配置 logstash\n\n```\ninput {\n    #开启远程输入日志服务\n    tcp {\n        port => \"<logstash-port>\"\n        mode => \"server\"\n        type => \"log4j2\"\n    }\n}\n\nfilter {\n    #将日志转成json对象\n    json {\n        source => \"message\"\n    }\n    #将远程客户端的日志时间设置为插入时间，不设置默认为当前系统时间，可能会存在时间误差\n    date {\n        match => [\"time\", \"yyyy-MM-dd HH:mm:ss.SSS\"]\n        remove_field => [\"time\"]\n    }\n}\n\noutput {\n    elasticsearch {\n        hosts => [\"<es-ip>:<es-port>\"]\n        index  => \"application-%{+YYYY.MM.dd}\"\n    }\n}\n```\n替换上面配置中的<logstash-port>(和log4j2中port保持一致)、<es-ip>、<es-port>(默认为9200)\n修改后重启logstash 启动配置 即可\n\n#### 总结\n其实最终是期望 项目直接输出标准输出和错误输出 由swarm或者k8s直接统一采集 标准输出和错误输出 这样 又避免了生成实际文件 有简化了项目的配置 \n这个直接使用socketAppender投递日志存在缺陷 一是socket比较简略 如果追求高性能需要自己重写 socketAppender 二个 需要logstash的解析和log4j2中的Layout进行匹配 \n否则 输出的日志 一坨翔  \n\n","slug":"综合应用/log4j2通过socket发送日志到elk平台","published":1,"updated":"2018-08-17T08:10:03.923Z","layout":"post","photos":[],"link":"","_id":"cjo9uau3200bzmwczojbumkf4","content":"<h4 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h4><p>尝试过很多 spring cloud中日志的方案 好多还是需要 集群的支持<br>但是现在公司还没有那么吊的基础设施 那么 这个时候 就需要 项目能够自己直接通过tcp或者udp直接投递日志到elk或者生成日志文件去采集了<br>但是 项目是使用docker 去部署在swarm或者k8s中 这个时候 生成日志文件 相对来说有点扯淡<br>但是公司的swarm集群又没有办法采集到标准输出和错误输出 那么就需要项目自己去投递日志到elk或者队列中让elk去接受了<br>由于时间较为紧急 直接采用log4j2的socketAppender 来投递日志 使用自定义jsonLayout去格式化 并且适配logstash</p><h4 id=\"实践\"><a href=\"#实践\" class=\"headerlink\" title=\"实践\"></a>实践</h4><h5 id=\"编写jsonLayout\"><a href=\"#编写jsonLayout\" class=\"headerlink\" title=\"编写jsonLayout\"></a>编写jsonLayout</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.ming.log;</span><br><span class=\"line\"></span><br><span class=\"line\">import com.fasterxml.jackson.core.JsonProcessingException;</span><br><span class=\"line\">import com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class=\"line\">import org.apache.commons.lang3.time.DateFormatUtils;</span><br><span class=\"line\">import org.apache.logging.log4j.core.Layout;</span><br><span class=\"line\">import org.apache.logging.log4j.core.LogEvent;</span><br><span class=\"line\">import org.apache.logging.log4j.core.config.Configuration;</span><br><span class=\"line\">import org.apache.logging.log4j.core.config.Node;</span><br><span class=\"line\">import org.apache.logging.log4j.core.config.plugins.*;</span><br><span class=\"line\">import org.apache.logging.log4j.core.layout.AbstractStringLayout;</span><br><span class=\"line\">import org.apache.logging.log4j.core.layout.PatternLayout;</span><br><span class=\"line\">import org.apache.logging.log4j.core.layout.PatternSelector;</span><br><span class=\"line\">import org.apache.logging.log4j.core.pattern.RegexReplacement;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.io.File;</span><br><span class=\"line\">import java.nio.charset.Charset;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * boss json格式日志</span><br><span class=\"line\"> * &lt;p&gt;</span><br><span class=\"line\"> * 配合elk的配置 使用</span><br><span class=\"line\"> * 原作者文章地址: https://blog.csdn.net/lnkToKing/article/details/79563460</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @author ming</span><br><span class=\"line\"> * @date 2018-06-22 10:59:56</span><br><span class=\"line\"> */</span><br><span class=\"line\">@Plugin(name = &quot;MingJsonPatternLayout&quot;, category = Node.CATEGORY, elementType = Layout.ELEMENT_TYPE, printObject = true)</span><br><span class=\"line\">public class MingJsonPatternLayout extends AbstractStringLayout &#123;</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 项目路径</span><br><span class=\"line\">     */</span><br><span class=\"line\">    private static String PROJECT_PATH;</span><br><span class=\"line\"></span><br><span class=\"line\">    private PatternLayout patternLayout;</span><br><span class=\"line\"></span><br><span class=\"line\">    private String projectName;</span><br><span class=\"line\">    private String logType;</span><br><span class=\"line\"></span><br><span class=\"line\">    static &#123;</span><br><span class=\"line\">        PROJECT_PATH = new File(&quot;&quot;).getAbsolutePath();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private BossJsonPatternLayout(Configuration config, RegexReplacement replace, String eventPattern,</span><br><span class=\"line\">                                  PatternSelector patternSelector, Charset charset, boolean alwaysWriteExceptions,</span><br><span class=\"line\">                                  boolean noConsoleNoAnsi, String headerPattern, String footerPattern, String projectName, String logType) &#123;</span><br><span class=\"line\">        super(config, charset,</span><br><span class=\"line\">                PatternLayout.createSerializer(config, replace, headerPattern, null, patternSelector, alwaysWriteExceptions,</span><br><span class=\"line\">                        noConsoleNoAnsi),</span><br><span class=\"line\">                PatternLayout.createSerializer(config, replace, footerPattern, null, patternSelector, alwaysWriteExceptions,</span><br><span class=\"line\">                        noConsoleNoAnsi));</span><br><span class=\"line\"></span><br><span class=\"line\">        this.projectName = projectName;</span><br><span class=\"line\">        this.logType = logType;</span><br><span class=\"line\">        this.patternLayout = PatternLayout.newBuilder()</span><br><span class=\"line\">                .withPattern(eventPattern)</span><br><span class=\"line\">                .withPatternSelector(patternSelector)</span><br><span class=\"line\">                .withConfiguration(config)</span><br><span class=\"line\">                .withRegexReplacement(replace)</span><br><span class=\"line\">                .withCharset(charset)</span><br><span class=\"line\">                .withAlwaysWriteExceptions(alwaysWriteExceptions)</span><br><span class=\"line\">                .withNoConsoleNoAnsi(noConsoleNoAnsi)</span><br><span class=\"line\">                .withHeader(headerPattern)</span><br><span class=\"line\">                .withFooter(footerPattern)</span><br><span class=\"line\">                .build();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public String toSerializable(LogEvent event) &#123;</span><br><span class=\"line\">        //在这里处理日志内容</span><br><span class=\"line\">        String message = patternLayout.toSerializable(event);</span><br><span class=\"line\">        String jsonStr = new JsonLoggerInfo(projectName, message, event.getLevel().name(), logType, event.getTimeMillis()).toString();</span><br><span class=\"line\">        return jsonStr + &quot;\\n&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @PluginFactory</span><br><span class=\"line\">    public static BossJsonPatternLayout createLayout(</span><br><span class=\"line\">            @PluginAttribute(value = &quot;pattern&quot;, defaultString = PatternLayout.DEFAULT_CONVERSION_PATTERN) final String pattern,</span><br><span class=\"line\">            @PluginElement(&quot;PatternSelector&quot;) final PatternSelector patternSelector,</span><br><span class=\"line\">            @PluginConfiguration final Configuration config,</span><br><span class=\"line\">            @PluginElement(&quot;Replace&quot;) final RegexReplacement replace,</span><br><span class=\"line\">            // LOG4J2-783 use platform default by default, so do not specify defaultString for charset</span><br><span class=\"line\">            @PluginAttribute(value = &quot;charset&quot;) final Charset charset,</span><br><span class=\"line\">            @PluginAttribute(value = &quot;alwaysWriteExceptions&quot;, defaultBoolean = true) final boolean alwaysWriteExceptions,</span><br><span class=\"line\">            @PluginAttribute(value = &quot;noConsoleNoAnsi&quot;, defaultBoolean = false) final boolean noConsoleNoAnsi,</span><br><span class=\"line\">            @PluginAttribute(&quot;header&quot;) final String headerPattern,</span><br><span class=\"line\">            @PluginAttribute(&quot;footer&quot;) final String footerPattern,</span><br><span class=\"line\">            @PluginAttribute(&quot;projectName&quot;) final String projectName,</span><br><span class=\"line\">            @PluginAttribute(&quot;logType&quot;) final String logType) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        return new BossJsonPatternLayout(config, replace, pattern, patternSelector, charset,</span><br><span class=\"line\">                alwaysWriteExceptions, noConsoleNoAnsi, headerPattern, footerPattern, projectName, logType);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 输出的日志内容</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static class JsonLoggerInfo &#123;</span><br><span class=\"line\">        /**</span><br><span class=\"line\">         * 项目名</span><br><span class=\"line\">         */</span><br><span class=\"line\">        private String projectName;</span><br><span class=\"line\">        /**</span><br><span class=\"line\">         * 项目目录路径</span><br><span class=\"line\">         */</span><br><span class=\"line\">        private String projectPath;</span><br><span class=\"line\">        /**</span><br><span class=\"line\">         * 日志信息</span><br><span class=\"line\">         */</span><br><span class=\"line\">        private String message;</span><br><span class=\"line\">        /**</span><br><span class=\"line\">         * 日志级别</span><br><span class=\"line\">         */</span><br><span class=\"line\">        private String level;</span><br><span class=\"line\">        /**</span><br><span class=\"line\">         * 日志分类</span><br><span class=\"line\">         */</span><br><span class=\"line\">        private String logType;</span><br><span class=\"line\">        /**</span><br><span class=\"line\">         * 日志时间</span><br><span class=\"line\">         */</span><br><span class=\"line\">        private String time;</span><br><span class=\"line\"></span><br><span class=\"line\">        public JsonLoggerInfo(String projectName, String message, String level, String logType, long timeMillis) &#123;</span><br><span class=\"line\">            this.projectName = projectName;</span><br><span class=\"line\">            this.projectPath = PROJECT_PATH;</span><br><span class=\"line\">            this.message = message;</span><br><span class=\"line\">            this.level = level;</span><br><span class=\"line\">            this.logType = logType;</span><br><span class=\"line\">            this.time = DateFormatUtils.format(timeMillis, &quot;yyyy-MM-dd HH:mm:ss.SSS&quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        public String getProjectName() &#123;</span><br><span class=\"line\">            return projectName;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        public String getProjectPath() &#123;</span><br><span class=\"line\">            return projectPath;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        public String getMessage() &#123;</span><br><span class=\"line\">            return message;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        public String getLevel() &#123;</span><br><span class=\"line\">            return level;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        public String getLogType() &#123;</span><br><span class=\"line\">            return logType;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        public String getTime() &#123;</span><br><span class=\"line\">            return time;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        @Override</span><br><span class=\"line\">        public String toString() &#123;</span><br><span class=\"line\">            try &#123;</span><br><span class=\"line\">                return new ObjectMapper().writeValueAsString(this);</span><br><span class=\"line\">            &#125; catch (JsonProcessingException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            return null;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"配置log4j2-xml\"><a href=\"#配置log4j2-xml\" class=\"headerlink\" title=\"配置log4j2.xml\"></a>配置log4j2.xml</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class=\"line\">&lt;!-- monitorInterval=&quot;60&quot;表示每60秒配置文件会动态加载一次。在程序运行过程中，如果修改配置文件，程序会随之改变。 --&gt;</span><br><span class=\"line\">&lt;configuration status=&quot;warn&quot; monitorInterval=&quot;1&quot;&gt;</span><br><span class=\"line\">    &lt;!-- 定义通用的属性 --&gt;</span><br><span class=\"line\">    &lt;Properties&gt;</span><br><span class=\"line\">        &lt;Property name=&quot;PROJECT_NAME&quot;&gt;ming&lt;/Property&gt;</span><br><span class=\"line\">        &lt;Property name=&quot;ELK_LOG_PATTERN&quot;&gt;%d&#123;yyyy-MM-dd HH:mm:ss&#125; %-5p  thread[%thread] %l  %msg %n&lt;/Property&gt;</span><br><span class=\"line\">    &lt;/Properties&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;appenders&gt;</span><br><span class=\"line\">        &lt;!--测试环境 elk的logstash 入口--&gt;</span><br><span class=\"line\">        &lt;Socket name=&quot;logstash&quot; host=&quot;&lt;logstash-ip&gt;&quot; port=&quot;&lt;logstash-port&gt;&quot; protocol=&quot;TCP&quot;&gt;</span><br><span class=\"line\">            &lt;MingJsonPatternLayout pattern=&quot;$&#123;ELK_LOG_PATTERN&#125;&quot; projectName=&quot;$&#123;PROJECT_NAME&#125;&quot; logType=&quot;ming&quot; /&gt;</span><br><span class=\"line\">        &lt;/Socket&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;/appenders&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;Loggers&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;!-- 配置项目的 日志等级输出 --&gt;</span><br><span class=\"line\">        &lt;root level=&quot;DEBUG&quot;&gt;</span><br><span class=\"line\">            &lt;!-- 通过tcp 传输到logstash--&gt;</span><br><span class=\"line\">            &lt;appender-ref ref=&quot;logstash&quot;/&gt;</span><br><span class=\"line\">        &lt;/root&gt;</span><br><span class=\"line\">    &lt;/Loggers&gt;</span><br><span class=\"line\">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure>\n<p>替换xml中 <logstash-ip> <logstash-port>为自己的 logstash ip和port</logstash-port></logstash-ip></p>\n<h5 id=\"配置-logstash\"><a href=\"#配置-logstash\" class=\"headerlink\" title=\"配置 logstash\"></a>配置 logstash</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">input &#123;</span><br><span class=\"line\">    #开启远程输入日志服务</span><br><span class=\"line\">    tcp &#123;</span><br><span class=\"line\">        port =&gt; &quot;&lt;logstash-port&gt;&quot;</span><br><span class=\"line\">        mode =&gt; &quot;server&quot;</span><br><span class=\"line\">        type =&gt; &quot;log4j2&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">filter &#123;</span><br><span class=\"line\">    #将日志转成json对象</span><br><span class=\"line\">    json &#123;</span><br><span class=\"line\">        source =&gt; &quot;message&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    #将远程客户端的日志时间设置为插入时间，不设置默认为当前系统时间，可能会存在时间误差</span><br><span class=\"line\">    date &#123;</span><br><span class=\"line\">        match =&gt; [&quot;time&quot;, &quot;yyyy-MM-dd HH:mm:ss.SSS&quot;]</span><br><span class=\"line\">        remove_field =&gt; [&quot;time&quot;]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">output &#123;</span><br><span class=\"line\">    elasticsearch &#123;</span><br><span class=\"line\">        hosts =&gt; [&quot;&lt;es-ip&gt;:&lt;es-port&gt;&quot;]</span><br><span class=\"line\">        index  =&gt; &quot;application-%&#123;+YYYY.MM.dd&#125;&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>替换上面配置中的<logstash-port>(和log4j2中port保持一致)、<es-ip>、<es-port>(默认为9200)<br>修改后重启logstash 启动配置 即可</es-port></es-ip></logstash-port></p>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><p>其实最终是期望 项目直接输出标准输出和错误输出 由swarm或者k8s直接统一采集 标准输出和错误输出 这样 又避免了生成实际文件 有简化了项目的配置<br>这个直接使用socketAppender投递日志存在缺陷 一是socket比较简略 如果追求高性能需要自己重写 socketAppender 二个 需要logstash的解析和log4j2中的Layout进行匹配<br>否则 输出的日志 一坨翔</p>","site":{"data":{}},"excerpt":"","more":"<h4 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h4><p>尝试过很多 spring cloud中日志的方案 好多还是需要 集群的支持<br>但是现在公司还没有那么吊的基础设施 那么 这个时候 就需要 项目能够自己直接通过tcp或者udp直接投递日志到elk或者生成日志文件去采集了<br>但是 项目是使用docker 去部署在swarm或者k8s中 这个时候 生成日志文件 相对来说有点扯淡<br>但是公司的swarm集群又没有办法采集到标准输出和错误输出 那么就需要项目自己去投递日志到elk或者队列中让elk去接受了<br>由于时间较为紧急 直接采用log4j2的socketAppender 来投递日志 使用自定义jsonLayout去格式化 并且适配logstash</p><h4 id=\"实践\"><a href=\"#实践\" class=\"headerlink\" title=\"实践\"></a>实践</h4><h5 id=\"编写jsonLayout\"><a href=\"#编写jsonLayout\" class=\"headerlink\" title=\"编写jsonLayout\"></a>编写jsonLayout</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.ming.log;</span><br><span class=\"line\"></span><br><span class=\"line\">import com.fasterxml.jackson.core.JsonProcessingException;</span><br><span class=\"line\">import com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class=\"line\">import org.apache.commons.lang3.time.DateFormatUtils;</span><br><span class=\"line\">import org.apache.logging.log4j.core.Layout;</span><br><span class=\"line\">import org.apache.logging.log4j.core.LogEvent;</span><br><span class=\"line\">import org.apache.logging.log4j.core.config.Configuration;</span><br><span class=\"line\">import org.apache.logging.log4j.core.config.Node;</span><br><span class=\"line\">import org.apache.logging.log4j.core.config.plugins.*;</span><br><span class=\"line\">import org.apache.logging.log4j.core.layout.AbstractStringLayout;</span><br><span class=\"line\">import org.apache.logging.log4j.core.layout.PatternLayout;</span><br><span class=\"line\">import org.apache.logging.log4j.core.layout.PatternSelector;</span><br><span class=\"line\">import org.apache.logging.log4j.core.pattern.RegexReplacement;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.io.File;</span><br><span class=\"line\">import java.nio.charset.Charset;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * boss json格式日志</span><br><span class=\"line\"> * &lt;p&gt;</span><br><span class=\"line\"> * 配合elk的配置 使用</span><br><span class=\"line\"> * 原作者文章地址: https://blog.csdn.net/lnkToKing/article/details/79563460</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @author ming</span><br><span class=\"line\"> * @date 2018-06-22 10:59:56</span><br><span class=\"line\"> */</span><br><span class=\"line\">@Plugin(name = &quot;MingJsonPatternLayout&quot;, category = Node.CATEGORY, elementType = Layout.ELEMENT_TYPE, printObject = true)</span><br><span class=\"line\">public class MingJsonPatternLayout extends AbstractStringLayout &#123;</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 项目路径</span><br><span class=\"line\">     */</span><br><span class=\"line\">    private static String PROJECT_PATH;</span><br><span class=\"line\"></span><br><span class=\"line\">    private PatternLayout patternLayout;</span><br><span class=\"line\"></span><br><span class=\"line\">    private String projectName;</span><br><span class=\"line\">    private String logType;</span><br><span class=\"line\"></span><br><span class=\"line\">    static &#123;</span><br><span class=\"line\">        PROJECT_PATH = new File(&quot;&quot;).getAbsolutePath();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private BossJsonPatternLayout(Configuration config, RegexReplacement replace, String eventPattern,</span><br><span class=\"line\">                                  PatternSelector patternSelector, Charset charset, boolean alwaysWriteExceptions,</span><br><span class=\"line\">                                  boolean noConsoleNoAnsi, String headerPattern, String footerPattern, String projectName, String logType) &#123;</span><br><span class=\"line\">        super(config, charset,</span><br><span class=\"line\">                PatternLayout.createSerializer(config, replace, headerPattern, null, patternSelector, alwaysWriteExceptions,</span><br><span class=\"line\">                        noConsoleNoAnsi),</span><br><span class=\"line\">                PatternLayout.createSerializer(config, replace, footerPattern, null, patternSelector, alwaysWriteExceptions,</span><br><span class=\"line\">                        noConsoleNoAnsi));</span><br><span class=\"line\"></span><br><span class=\"line\">        this.projectName = projectName;</span><br><span class=\"line\">        this.logType = logType;</span><br><span class=\"line\">        this.patternLayout = PatternLayout.newBuilder()</span><br><span class=\"line\">                .withPattern(eventPattern)</span><br><span class=\"line\">                .withPatternSelector(patternSelector)</span><br><span class=\"line\">                .withConfiguration(config)</span><br><span class=\"line\">                .withRegexReplacement(replace)</span><br><span class=\"line\">                .withCharset(charset)</span><br><span class=\"line\">                .withAlwaysWriteExceptions(alwaysWriteExceptions)</span><br><span class=\"line\">                .withNoConsoleNoAnsi(noConsoleNoAnsi)</span><br><span class=\"line\">                .withHeader(headerPattern)</span><br><span class=\"line\">                .withFooter(footerPattern)</span><br><span class=\"line\">                .build();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public String toSerializable(LogEvent event) &#123;</span><br><span class=\"line\">        //在这里处理日志内容</span><br><span class=\"line\">        String message = patternLayout.toSerializable(event);</span><br><span class=\"line\">        String jsonStr = new JsonLoggerInfo(projectName, message, event.getLevel().name(), logType, event.getTimeMillis()).toString();</span><br><span class=\"line\">        return jsonStr + &quot;\\n&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @PluginFactory</span><br><span class=\"line\">    public static BossJsonPatternLayout createLayout(</span><br><span class=\"line\">            @PluginAttribute(value = &quot;pattern&quot;, defaultString = PatternLayout.DEFAULT_CONVERSION_PATTERN) final String pattern,</span><br><span class=\"line\">            @PluginElement(&quot;PatternSelector&quot;) final PatternSelector patternSelector,</span><br><span class=\"line\">            @PluginConfiguration final Configuration config,</span><br><span class=\"line\">            @PluginElement(&quot;Replace&quot;) final RegexReplacement replace,</span><br><span class=\"line\">            // LOG4J2-783 use platform default by default, so do not specify defaultString for charset</span><br><span class=\"line\">            @PluginAttribute(value = &quot;charset&quot;) final Charset charset,</span><br><span class=\"line\">            @PluginAttribute(value = &quot;alwaysWriteExceptions&quot;, defaultBoolean = true) final boolean alwaysWriteExceptions,</span><br><span class=\"line\">            @PluginAttribute(value = &quot;noConsoleNoAnsi&quot;, defaultBoolean = false) final boolean noConsoleNoAnsi,</span><br><span class=\"line\">            @PluginAttribute(&quot;header&quot;) final String headerPattern,</span><br><span class=\"line\">            @PluginAttribute(&quot;footer&quot;) final String footerPattern,</span><br><span class=\"line\">            @PluginAttribute(&quot;projectName&quot;) final String projectName,</span><br><span class=\"line\">            @PluginAttribute(&quot;logType&quot;) final String logType) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        return new BossJsonPatternLayout(config, replace, pattern, patternSelector, charset,</span><br><span class=\"line\">                alwaysWriteExceptions, noConsoleNoAnsi, headerPattern, footerPattern, projectName, logType);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 输出的日志内容</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static class JsonLoggerInfo &#123;</span><br><span class=\"line\">        /**</span><br><span class=\"line\">         * 项目名</span><br><span class=\"line\">         */</span><br><span class=\"line\">        private String projectName;</span><br><span class=\"line\">        /**</span><br><span class=\"line\">         * 项目目录路径</span><br><span class=\"line\">         */</span><br><span class=\"line\">        private String projectPath;</span><br><span class=\"line\">        /**</span><br><span class=\"line\">         * 日志信息</span><br><span class=\"line\">         */</span><br><span class=\"line\">        private String message;</span><br><span class=\"line\">        /**</span><br><span class=\"line\">         * 日志级别</span><br><span class=\"line\">         */</span><br><span class=\"line\">        private String level;</span><br><span class=\"line\">        /**</span><br><span class=\"line\">         * 日志分类</span><br><span class=\"line\">         */</span><br><span class=\"line\">        private String logType;</span><br><span class=\"line\">        /**</span><br><span class=\"line\">         * 日志时间</span><br><span class=\"line\">         */</span><br><span class=\"line\">        private String time;</span><br><span class=\"line\"></span><br><span class=\"line\">        public JsonLoggerInfo(String projectName, String message, String level, String logType, long timeMillis) &#123;</span><br><span class=\"line\">            this.projectName = projectName;</span><br><span class=\"line\">            this.projectPath = PROJECT_PATH;</span><br><span class=\"line\">            this.message = message;</span><br><span class=\"line\">            this.level = level;</span><br><span class=\"line\">            this.logType = logType;</span><br><span class=\"line\">            this.time = DateFormatUtils.format(timeMillis, &quot;yyyy-MM-dd HH:mm:ss.SSS&quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        public String getProjectName() &#123;</span><br><span class=\"line\">            return projectName;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        public String getProjectPath() &#123;</span><br><span class=\"line\">            return projectPath;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        public String getMessage() &#123;</span><br><span class=\"line\">            return message;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        public String getLevel() &#123;</span><br><span class=\"line\">            return level;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        public String getLogType() &#123;</span><br><span class=\"line\">            return logType;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        public String getTime() &#123;</span><br><span class=\"line\">            return time;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        @Override</span><br><span class=\"line\">        public String toString() &#123;</span><br><span class=\"line\">            try &#123;</span><br><span class=\"line\">                return new ObjectMapper().writeValueAsString(this);</span><br><span class=\"line\">            &#125; catch (JsonProcessingException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            return null;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"配置log4j2-xml\"><a href=\"#配置log4j2-xml\" class=\"headerlink\" title=\"配置log4j2.xml\"></a>配置log4j2.xml</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class=\"line\">&lt;!-- monitorInterval=&quot;60&quot;表示每60秒配置文件会动态加载一次。在程序运行过程中，如果修改配置文件，程序会随之改变。 --&gt;</span><br><span class=\"line\">&lt;configuration status=&quot;warn&quot; monitorInterval=&quot;1&quot;&gt;</span><br><span class=\"line\">    &lt;!-- 定义通用的属性 --&gt;</span><br><span class=\"line\">    &lt;Properties&gt;</span><br><span class=\"line\">        &lt;Property name=&quot;PROJECT_NAME&quot;&gt;ming&lt;/Property&gt;</span><br><span class=\"line\">        &lt;Property name=&quot;ELK_LOG_PATTERN&quot;&gt;%d&#123;yyyy-MM-dd HH:mm:ss&#125; %-5p  thread[%thread] %l  %msg %n&lt;/Property&gt;</span><br><span class=\"line\">    &lt;/Properties&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;appenders&gt;</span><br><span class=\"line\">        &lt;!--测试环境 elk的logstash 入口--&gt;</span><br><span class=\"line\">        &lt;Socket name=&quot;logstash&quot; host=&quot;&lt;logstash-ip&gt;&quot; port=&quot;&lt;logstash-port&gt;&quot; protocol=&quot;TCP&quot;&gt;</span><br><span class=\"line\">            &lt;MingJsonPatternLayout pattern=&quot;$&#123;ELK_LOG_PATTERN&#125;&quot; projectName=&quot;$&#123;PROJECT_NAME&#125;&quot; logType=&quot;ming&quot; /&gt;</span><br><span class=\"line\">        &lt;/Socket&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;/appenders&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;Loggers&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;!-- 配置项目的 日志等级输出 --&gt;</span><br><span class=\"line\">        &lt;root level=&quot;DEBUG&quot;&gt;</span><br><span class=\"line\">            &lt;!-- 通过tcp 传输到logstash--&gt;</span><br><span class=\"line\">            &lt;appender-ref ref=&quot;logstash&quot;/&gt;</span><br><span class=\"line\">        &lt;/root&gt;</span><br><span class=\"line\">    &lt;/Loggers&gt;</span><br><span class=\"line\">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure>\n<p>替换xml中 <logstash-ip> <logstash-port>为自己的 logstash ip和port</logstash-port></logstash-ip></p>\n<h5 id=\"配置-logstash\"><a href=\"#配置-logstash\" class=\"headerlink\" title=\"配置 logstash\"></a>配置 logstash</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">input &#123;</span><br><span class=\"line\">    #开启远程输入日志服务</span><br><span class=\"line\">    tcp &#123;</span><br><span class=\"line\">        port =&gt; &quot;&lt;logstash-port&gt;&quot;</span><br><span class=\"line\">        mode =&gt; &quot;server&quot;</span><br><span class=\"line\">        type =&gt; &quot;log4j2&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">filter &#123;</span><br><span class=\"line\">    #将日志转成json对象</span><br><span class=\"line\">    json &#123;</span><br><span class=\"line\">        source =&gt; &quot;message&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    #将远程客户端的日志时间设置为插入时间，不设置默认为当前系统时间，可能会存在时间误差</span><br><span class=\"line\">    date &#123;</span><br><span class=\"line\">        match =&gt; [&quot;time&quot;, &quot;yyyy-MM-dd HH:mm:ss.SSS&quot;]</span><br><span class=\"line\">        remove_field =&gt; [&quot;time&quot;]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">output &#123;</span><br><span class=\"line\">    elasticsearch &#123;</span><br><span class=\"line\">        hosts =&gt; [&quot;&lt;es-ip&gt;:&lt;es-port&gt;&quot;]</span><br><span class=\"line\">        index  =&gt; &quot;application-%&#123;+YYYY.MM.dd&#125;&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>替换上面配置中的<logstash-port>(和log4j2中port保持一致)、<es-ip>、<es-port>(默认为9200)<br>修改后重启logstash 启动配置 即可</es-port></es-ip></logstash-port></p>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><p>其实最终是期望 项目直接输出标准输出和错误输出 由swarm或者k8s直接统一采集 标准输出和错误输出 这样 又避免了生成实际文件 有简化了项目的配置<br>这个直接使用socketAppender投递日志存在缺陷 一是socket比较简略 如果追求高性能需要自己重写 socketAppender 二个 需要logstash的解析和log4j2中的Layout进行匹配<br>否则 输出的日志 一坨翔</p>"},{"title":"netty-传输手段笔记","comments":1,"abbrlink":"597b09c9","date":"2018-05-22T08:38:36.000Z","_content":"###传输案例 \n#### java oio\n```\npackage com.ming;\n\nimport java.io.IOException;\nimport java.io.OutputStream;\nimport java.net.ServerSocket;\nimport java.net.Socket;\nimport java.nio.charset.Charset;\n\n/**\n * 基于java 阻塞io的 服务端案例\n *\n * @author ming\n * @date 2018-04-11 14:53\n */\npublic class JavaOio {\n\n    public static void main(String[] args) throws IOException {\n        new JavaOio().Start(20000);\n    }\n\n    /**\n     * 启动java oio 方法\n     *\n     * @param port\n     * @author ming\n     * @date 2018-04-11 14:57\n     */\n    public void Start(int port) throws IOException {\n        final ServerSocket socket = new ServerSocket(port);\n        for (; ; ) {\n            //接受链接\n            final Socket clientSocket = socket.accept();\n            System.out.println(\"accept client::\" + clientSocket);\n            //建立新线程执行 客户端的请求\n            new Thread(() -> {\n                OutputStream outputStream = null;\n                try {\n                    //获取输出流\n                    outputStream = clientSocket.getOutputStream();\n                    //输出数据\n                    outputStream.write(\"hi ming \".getBytes(Charset.forName(\"UTF-8\")));\n                    //刷新数据\n                    outputStream.flush();\n                    clientSocket.close();\n                } catch (IOException e) {\n                    e.printStackTrace();\n                } finally {\n                    try {\n                        outputStream.close();\n                    } catch (IOException e) {\n                        e.printStackTrace();\n                    }\n                }\n            }).start();\n        }\n    }\n}\n\n```\n#### java nio\n```\npackage com.ming;\n\nimport java.io.IOException;\nimport java.net.InetSocketAddress;\nimport java.net.ServerSocket;\nimport java.nio.ByteBuffer;\nimport java.nio.channels.SelectionKey;\nimport java.nio.channels.Selector;\nimport java.nio.channels.ServerSocketChannel;\nimport java.nio.channels.SocketChannel;\nimport java.util.Set;\n\n/**\n * java 实现nio 模式的服务端\n *\n * @author ming\n * @date 2018-04-11 15:08\n */\npublic class JavaNio {\n\n\n    public static void main(String[] args) throws IOException {\n        new JavaNio().Start(20000);\n    }\n\n    /**\n     * 启动java nio 服务端\n     *\n     * @param port\n     * @author ming\n     * @date 2018-04-11 15:09\n     */\n    public void Start(int port) throws IOException {\n        //打开 server socket channel\n        ServerSocketChannel serverSocketChannel = ServerSocketChannel.open();\n        //设置 为非阻塞队列\n        serverSocketChannel.configureBlocking(false);\n        //通过socket channel 获取socket\n        ServerSocket socket = serverSocketChannel.socket();\n        //获取socket 的地址\n        InetSocketAddress socketAddress = new InetSocketAddress(port);\n        //绑定 socket地址到socket\n        socket.bind(socketAddress);\n        //打开selector\n        Selector selector = Selector.open();\n        //将socket channel 注册到selector上\n        serverSocketChannel.register(selector, SelectionKey.OP_ACCEPT);\n        //返回客户端的消息\n        final ByteBuffer msg = ByteBuffer.wrap(\"hi ming \".getBytes(\"UTF-8\"));\n\n        for (; ; ) {\n            try {\n                //阻塞等待需要处理的新事件\n                selector.select();\n            } catch (IOException e) {\n                e.printStackTrace();\n                break;\n            }\n            //获取所有连接事件的 select key\n            Set<SelectionKey> readyKeys = selector.selectedKeys();\n            readyKeys.forEach(key -> {\n                        try {\n                            //检查时间 是否是一个新的 可以被接受的链接\n                            if (key.isAcceptable()) {\n                                ServerSocketChannel server = (ServerSocketChannel) key.channel();\n                                SocketChannel client = server.accept();\n                                if (null == client) {\n                                    return;\n                                }\n                                client.configureBlocking(false);\n                                client.register(selector, SelectionKey.OP_WRITE | SelectionKey.OP_READ, msg.duplicate());\n                                System.out.println(\"accept from \" + client);\n                            }\n                            //检查socket是否准备好写数据\n                            if (key.isWritable()) {\n                                SocketChannel client = (SocketChannel) key.channel();\n                                ByteBuffer byteBuffer = (ByteBuffer) key.attachment();\n                                while (byteBuffer.hasRemaining()) {\n                                    if (client.write(byteBuffer) == 0) {\n                                        break;\n                                    }\n                                }\n                                client.close();\n                            }\n\n                        } catch (IOException e) {\n                            key.cancel();\n                            try {\n                                key.channel().close();\n                            } catch (IOException e1) {\n                                e1.printStackTrace();\n                            }\n                        }\n                    }\n            );\n        }\n    }\n}\n\n```\n#### netty oio \n```\npackage com.ming;\n\nimport io.netty.bootstrap.ServerBootstrap;\nimport io.netty.buffer.ByteBuf;\nimport io.netty.buffer.Unpooled;\nimport io.netty.channel.*;\nimport io.netty.channel.oio.OioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.oio.OioServerSocketChannel;\nimport io.netty.util.CharsetUtil;\n\nimport java.net.InetSocketAddress;\n\n/**\n * netty oio 实现\n *\n * @author ming\n * @date 2018-04-16 15:56\n */\npublic class NettyOio {\n    public static void main(String[] args) throws InterruptedException {\n        new NettyOio().Start(20000);\n    }\n\n    /**\n     * netty oio bootstrap\n     *\n     * @author ming\n     * @date 2018-04-16 15:56\n     */\n    public void Start(int port) throws InterruptedException {\n        final ByteBuf byteBuf = Unpooled.unreleasableBuffer(Unpooled.copiedBuffer(\"hi ming \", CharsetUtil.UTF_8));\n        // 使用 oio 事件循环处理\n        EventLoopGroup eventLoopGroup = new OioEventLoopGroup();\n        try {\n            ServerBootstrap serverBootstrap = new ServerBootstrap();\n            serverBootstrap.group(eventLoopGroup)\n                    //使用oio 渠道\n                    .channel(OioServerSocketChannel.class)\n                    .localAddress(new InetSocketAddress(port))\n                    .childHandler(new ChannelInitializer<SocketChannel>() {\n                        @Override\n                        protected void initChannel(SocketChannel ch) throws Exception {\n                            ch.pipeline().addLast(new ChannelInboundHandlerAdapter() {\n                                @Override\n                                public void channelActive(ChannelHandlerContext ctx) throws Exception {\n                                    System.out.println(\"accept \" + ctx);\n                                    //输出一条信息 关闭 渠道\n                                    ctx.writeAndFlush(byteBuf.duplicate())\n                                            .addListener(ChannelFutureListener.CLOSE);\n                                }\n                            });\n                        }\n                    });\n            //绑定服务器\n            ChannelFuture future = serverBootstrap.bind().sync();\n            future.channel().closeFuture().sync();\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        } finally {\n            eventLoopGroup.shutdownGracefully().sync();\n        }\n    }\n}\n\n```\n#### netty nio \n```\npackage com.ming;\n\nimport io.netty.bootstrap.ServerBootstrap;\nimport io.netty.buffer.ByteBuf;\nimport io.netty.buffer.Unpooled;\nimport io.netty.channel.*;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.util.CharsetUtil;\n\nimport java.net.InetSocketAddress;\n\n/**\n * netty nio 实现\n *\n * @author ming\n * @date 2018-04-16 16:11\n */\npublic class NettyNio {\n\n    public static void main(String[] args) throws InterruptedException {\n        new NettyNio().Start(20000);\n    }\n\n    /**\n     * 启动 netty nio server\n     *\n     * @author ming\n     * @date 2018-04-16 16:12\n     */\n    public void Start(int port) throws InterruptedException {\n        final ByteBuf byteBuf = Unpooled.unreleasableBuffer(Unpooled.copiedBuffer(\"hi ming \", CharsetUtil.UTF_8));\n        //使用 nio 事件循环处理器\n        EventLoopGroup eventLoopGroup = new NioEventLoopGroup();\n        try {\n            ServerBootstrap serverBootstrap = new ServerBootstrap();\n            serverBootstrap.group(eventLoopGroup)\n                    //使用nio渠道\n                    .channel(NioServerSocketChannel.class)\n                    .localAddress(new InetSocketAddress(port))\n                    .childHandler(new ChannelInitializer<SocketChannel>() {\n                        @Override\n                        protected void initChannel(SocketChannel ch) throws Exception {\n                            ch.pipeline().addLast(new ChannelInboundHandlerAdapter() {\n                                @Override\n                                public void channelActive(ChannelHandlerContext ctx) throws Exception {\n                                    System.out.println(\"accept \" + ctx);\n                                    ctx.writeAndFlush(byteBuf.duplicate()).addListener(ChannelFutureListener.CLOSE);\n                                }\n                            });\n                        }\n                    });\n            ChannelFuture future = serverBootstrap.bind().sync();\n            future.channel().closeFuture().sync();\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        } finally {\n            eventLoopGroup.shutdownGracefully().sync();\n        }\n\n\n    }\n}\n\n```\n#### epoll\n```\npackage com.ming;\n\nimport io.netty.bootstrap.ServerBootstrap;\nimport io.netty.buffer.ByteBuf;\nimport io.netty.buffer.Unpooled;\nimport io.netty.channel.*;\nimport io.netty.channel.epoll.EpollEventLoopGroup;\nimport io.netty.channel.epoll.EpollServerSocketChannel;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.util.CharsetUtil;\n\nimport java.net.InetSocketAddress;\n\n/**\n * 基于linux 的Epoll 非阻塞 方式实现的 io传输\n *\n * @author ming\n * @date 2018-04-16 17:28\n */\npublic class NettyEpoll {\n\n    public static void main(String[] args) throws InterruptedException {\n        new NettyEpoll().Start(20000);\n    }\n\n    /**\n     * 启动 基于 epoll 的server\n     *\n     * @author ming\n     * @date 2018-04-16 17:29\n     */\n    public void Start(int port) throws InterruptedException {\n        final ByteBuf byteBuf = Unpooled.unreleasableBuffer(Unpooled.copiedBuffer(\"hi ming \", CharsetUtil.UTF_8));\n        //使用epoll\n        EventLoopGroup eventLoopGroup = new EpollEventLoopGroup();\n        try {\n            ServerBootstrap serverBootstrap = new ServerBootstrap();\n            serverBootstrap.group(eventLoopGroup)\n                    .channel(EpollServerSocketChannel.class)\n                    .localAddress(new InetSocketAddress(port))\n                    .childHandler(new ChannelInitializer<SocketChannel>() {\n                        @Override\n                        protected void initChannel(SocketChannel ch) throws Exception {\n                            ch.pipeline().addLast(new ChannelInboundHandlerAdapter() {\n                                @Override\n                                public void channelActive(ChannelHandlerContext ctx) throws Exception {\n                                    System.out.println(\"accept\" + ctx);\n                                    ctx.writeAndFlush(byteBuf.duplicate()).addListener(ChannelFutureListener.CLOSE);\n                                }\n                            });\n\n                        }\n                    });\n            ChannelFuture future = serverBootstrap.bind().sync();\n            future.channel().closeFuture().sync();\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        } finally {\n            eventLoopGroup.shutdownGracefully().sync();\n        }\n    }\n\n}\n\n```\n#### jvm local\n1:jvm local server \n```\npackage com.ming.JvmLocal;\n\nimport io.netty.bootstrap.ServerBootstrap;\nimport io.netty.buffer.ByteBuf;\nimport io.netty.buffer.Unpooled;\nimport io.netty.channel.*;\nimport io.netty.channel.local.LocalAddress;\nimport io.netty.channel.local.LocalChannel;\nimport io.netty.channel.local.LocalEventLoopGroup;\nimport io.netty.channel.local.LocalServerChannel;\nimport io.netty.util.CharsetUtil;\n\n/**\n * netty 基于jvm内部本地通信 server实现\n *\n * @author ming\n * @date 2018-04-17 13:45\n */\npublic class NettyJvmLocalServer {\n\n\n    /**\n     * 启动方法\n     *\n     * @author ming\n     * @date 2018-04-17 13:50\n     */\n    public void Start() throws InterruptedException {\n        final ByteBuf byteBuf = Unpooled.unreleasableBuffer(Unpooled.copiedBuffer(\"hi ming \", CharsetUtil.UTF_8));\n        //注册 local 事件处理器\n        EventLoopGroup eventLoopGroup = new LocalEventLoopGroup();\n\n        try {\n            ServerBootstrap serverBootstrap = new ServerBootstrap();\n            serverBootstrap.group(eventLoopGroup)\n                    //使用Local server channel\n                    .channel(LocalServerChannel.class)\n                    //使用 local 地址\n                    .localAddress(new LocalAddress(NettyJvmLocal.LOCAL_ADDRESS))\n                    .childHandler(new ChannelInitializer<LocalChannel>() {\n                        @Override\n                        protected void initChannel(LocalChannel ch) throws Exception {\n                            ch.pipeline().addLast(new ChannelInboundHandlerAdapter() {\n                                @Override\n                                public void channelActive(ChannelHandlerContext ctx) throws Exception {\n                                    System.out.println(\"accept \" + ctx);\n                                    ctx.writeAndFlush(byteBuf).addListener(ChannelFutureListener.CLOSE);\n                                }\n                            });\n                        }\n                    });\n            ChannelFuture future = serverBootstrap.bind().sync();\n            future.channel().closeFuture().sync();\n\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        } finally {\n            eventLoopGroup.shutdownGracefully().sync();\n        }\n\n\n    }\n\n}\n\n```\n2: jvm local client \n```\npackage com.ming.JvmLocal;\n\nimport io.netty.bootstrap.Bootstrap;\nimport io.netty.buffer.ByteBuf;\nimport io.netty.buffer.Unpooled;\nimport io.netty.channel.*;\nimport io.netty.channel.local.LocalAddress;\nimport io.netty.channel.local.LocalChannel;\nimport io.netty.channel.local.LocalEventLoopGroup;\nimport io.netty.util.CharsetUtil;\n\n/**\n * netty 基于jvm内部本地通信 client 实现\n *\n * @author ming\n * @date 2018-04-17 13:45\n */\npublic class NettyJvmLocalClient {\n\n\n    /**\n     * 启动方法\n     *\n     * @author ming\n     * @date 2018-04-17 13:50\n     */\n    public void Start() throws InterruptedException {\n        final ByteBuf byteBuf = Unpooled.unreleasableBuffer(Unpooled.copiedBuffer(\"hi ming client\", CharsetUtil.UTF_8));\n        //注册 local 事件处理器\n        EventLoopGroup eventLoopGroup = new LocalEventLoopGroup();\n\n        try {\n            Bootstrap bootstrap = new Bootstrap();\n            bootstrap.group(eventLoopGroup)\n                    //使用 localChannel渠道\n                    .channel(LocalChannel.class)\n                    //注册 local模式的地址\n                    .remoteAddress(new LocalAddress(NettyJvmLocal.LOCAL_ADDRESS))\n                    .handler(new ChannelInitializer<LocalChannel>() {\n                        @Override\n                        protected void initChannel(LocalChannel ch) throws Exception {\n                            ch.pipeline().addLast(new ChannelInboundHandlerAdapter() {\n                                @Override\n                                public void channelActive(ChannelHandlerContext ctx) throws Exception {\n                                    System.out.println(\"connect \" + ctx);\n                                    ctx.writeAndFlush(byteBuf).addListener(ChannelFutureListener.CLOSE);\n                                }\n                            });\n                        }\n                    });\n            ChannelFuture future = bootstrap.connect().sync();\n            future.channel().closeFuture().sync();\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        } finally {\n            eventLoopGroup.shutdownGracefully().sync();\n        }\n    }\n\n}\n\n```\n3:jvm local demo \n```\npackage com.ming.JvmLocal;\n\n/**\n * 调用 netty jvm  local server 和client 的客户端\n *\n * @author ming\n * @date 2018-04-17 14:09\n */\npublic class NettyJvmLocal {\n    /**\n     * 本地地址\n     *\n     * @author ming\n     * @date 2018-04-17 14:16\n     */\n    public static final String LOCAL_ADDRESS = \"ming\";\n\n    public static void main(String[] args) throws InterruptedException {\n        // 启动 server\n        new Thread(() -> {\n            try {\n                new NettyJvmLocalServer().Start();\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        }).start();\n\n        //暂停 线程 1s 等待server 启动完毕\n        Thread.sleep(1000L);\n\n        //启动client\n        new Thread(() -> {\n            try {\n                new NettyJvmLocalClient().Start();\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        }).start();\n    }\n\n}\n\n```\n### 传输\n传输是基于channel 的  \n\nchannel是有顺序的 因为继承 java.lang.Comparable   \nchannelHandler:常规用途  \n* 数据格式转换   \n* 异常处理  \n* 提供channel 状态变更通知  \n* 提供channel 注册或者注销 EventLoop中的通知  \n* 提供用户自定义事件通知  \n\nchannel 线程安全 并且保证顺序发送   \n\n### 内置传输手段\n|名称|包|备注|    \n|:--|:-|:--|    \n|NIO|io.netty.channel.socket.nio|使用java nio|     \n|Epoll|io.netty.channel.epoll|基于jni驱动的epoll()和非阻塞io 只能在linux上支持 比NIO快 并且完全非阻塞|  \n|OIO|io.netty.channel.socket.oio|使用java net包 阻塞流|  \n|Local|io.netty.channel.local|直接使用jvm内部管道通信|  \n|Embedded|io.netty.channel.embedded|测试channelHandler使用的不依赖网络|   \n\n### nio  非阻塞 io\n基于selector \n状态变化:  \n* 新的channel 已经被接受并且准备就绪   \n* channel 链接完成  \n* channel 有就绪的可供读取的数据  \n* channel 可用于写数据  \n通过java.nio.channels.SelectionKey定义的位 组合成一组应用程序正在请求通知的状态变化集合  \n|名称|描述|  \n|:--|:--|  \n|OP_ACCEPT|请求接受新链接创建channel获得通知|  \n|OP_CONNECT|请求建立第一个链接时候获得通知|  \n|OP_READ|请求数据就绪 可从channel 读取时获得通知|  \n|OP_WRITE|请求当可以向 channel中写入数据时候 获得通知、|  \n\n### Epoll 基于linux的本地非阻塞传输  \n在linux 2.5.44内核引入的功能   比POSIX 的select poll 更加牛逼  \n不考虑 夸平台  只考虑linux 的话  epoll 直接走起     \n### oio 阻塞io  \n基于jdk  java.net包的阻塞io   \n是netty 为了兼容 可能存在的老旧的系统 保留的 oio支持   \n### 基于jvm内部的local传输  \n在同一个jvm中运行的客户端和服务端程序直接的异步通信使用这种 可以大幅度提高速度   \n\n\n### 总结：   \njava实现oio和nio的代码 提供的api 区别比较大     \noio 不需要selector 直接server socket接受 处理    \nnio 通过selector 协调 分配给相应的 socket 处理   \nnetty 实现oio和nio 提供的api 基本相同 就是在使用发送方式和发送渠道时候 需要保持一致   \n例如 使用NioEventLoopGroup 那么传输渠道必须是NioServerChannelSocket   \n使用OioEventLoopGroup那么必须使用OioServerChannelSocket   \n\n\n### 传输支持的协议\n|传输类型|支持类型|  \n|:-----|:-----|   \n|NIO| tcp、udp、sctp、udt|  \n|Epoll(linux)|tcp、udp|   \n|OIO|tcp、udp、sctp、udt|   \n\nsctp 增强版本的tcp  \nudt  增强版本的udp  \n\n### 传输类型选择:  \n|需求类型|推荐传输类型|备注|  \n|:-----|:---------|:--|  \n|非阻塞代码、常规套路|nio、或者epoll| 如果不考虑跨平台等功能 并且只考虑linux 平台运行 那么 epoll 是肯定的 毕竟是个特殊优化的非阻塞模式|  \n|阻塞代码|oio|处理遗留代码的时候选择|  \n|同jvm通信|jvm local|在同一个jvm中 进行通信的话 选择jvm local 可以直接省掉网络io的开销|  \n|测试ChannelHandler|Embedded|只有写单元测试用用 |   \n\n零拷贝:  \n```\n   零拷贝(zero-copy)是一种目前只有在使用 NIO 和 Epoll 传输时才可使用的特性。它使你可以快速\n   高效地将数据从文件系统移动到网络接口,而不需要将其从内核空间复制到用户空间,其在像 FTP 或者\n   HTTP 这样的协议中可以显著地提升性能。但是,并不是所有的操作系统都支持这一特性。特别地,它对\n   于实现了数据加密或者压缩的文件系统是不可用的——只能传输文件的原始内容。反过来说,传输已被\n   加密的文件则不是问题。\n```","source":"_posts/综合应用/netty-传输手段笔记.md","raw":"---\ntitle: netty-传输手段笔记\ncomments: true\ncategories: 笔记\ntags:\n  - netty\n  - 传输协议\nabbrlink: 597b09c9\ndate: 2018-05-22 16:38:36\n---\n###传输案例 \n#### java oio\n```\npackage com.ming;\n\nimport java.io.IOException;\nimport java.io.OutputStream;\nimport java.net.ServerSocket;\nimport java.net.Socket;\nimport java.nio.charset.Charset;\n\n/**\n * 基于java 阻塞io的 服务端案例\n *\n * @author ming\n * @date 2018-04-11 14:53\n */\npublic class JavaOio {\n\n    public static void main(String[] args) throws IOException {\n        new JavaOio().Start(20000);\n    }\n\n    /**\n     * 启动java oio 方法\n     *\n     * @param port\n     * @author ming\n     * @date 2018-04-11 14:57\n     */\n    public void Start(int port) throws IOException {\n        final ServerSocket socket = new ServerSocket(port);\n        for (; ; ) {\n            //接受链接\n            final Socket clientSocket = socket.accept();\n            System.out.println(\"accept client::\" + clientSocket);\n            //建立新线程执行 客户端的请求\n            new Thread(() -> {\n                OutputStream outputStream = null;\n                try {\n                    //获取输出流\n                    outputStream = clientSocket.getOutputStream();\n                    //输出数据\n                    outputStream.write(\"hi ming \".getBytes(Charset.forName(\"UTF-8\")));\n                    //刷新数据\n                    outputStream.flush();\n                    clientSocket.close();\n                } catch (IOException e) {\n                    e.printStackTrace();\n                } finally {\n                    try {\n                        outputStream.close();\n                    } catch (IOException e) {\n                        e.printStackTrace();\n                    }\n                }\n            }).start();\n        }\n    }\n}\n\n```\n#### java nio\n```\npackage com.ming;\n\nimport java.io.IOException;\nimport java.net.InetSocketAddress;\nimport java.net.ServerSocket;\nimport java.nio.ByteBuffer;\nimport java.nio.channels.SelectionKey;\nimport java.nio.channels.Selector;\nimport java.nio.channels.ServerSocketChannel;\nimport java.nio.channels.SocketChannel;\nimport java.util.Set;\n\n/**\n * java 实现nio 模式的服务端\n *\n * @author ming\n * @date 2018-04-11 15:08\n */\npublic class JavaNio {\n\n\n    public static void main(String[] args) throws IOException {\n        new JavaNio().Start(20000);\n    }\n\n    /**\n     * 启动java nio 服务端\n     *\n     * @param port\n     * @author ming\n     * @date 2018-04-11 15:09\n     */\n    public void Start(int port) throws IOException {\n        //打开 server socket channel\n        ServerSocketChannel serverSocketChannel = ServerSocketChannel.open();\n        //设置 为非阻塞队列\n        serverSocketChannel.configureBlocking(false);\n        //通过socket channel 获取socket\n        ServerSocket socket = serverSocketChannel.socket();\n        //获取socket 的地址\n        InetSocketAddress socketAddress = new InetSocketAddress(port);\n        //绑定 socket地址到socket\n        socket.bind(socketAddress);\n        //打开selector\n        Selector selector = Selector.open();\n        //将socket channel 注册到selector上\n        serverSocketChannel.register(selector, SelectionKey.OP_ACCEPT);\n        //返回客户端的消息\n        final ByteBuffer msg = ByteBuffer.wrap(\"hi ming \".getBytes(\"UTF-8\"));\n\n        for (; ; ) {\n            try {\n                //阻塞等待需要处理的新事件\n                selector.select();\n            } catch (IOException e) {\n                e.printStackTrace();\n                break;\n            }\n            //获取所有连接事件的 select key\n            Set<SelectionKey> readyKeys = selector.selectedKeys();\n            readyKeys.forEach(key -> {\n                        try {\n                            //检查时间 是否是一个新的 可以被接受的链接\n                            if (key.isAcceptable()) {\n                                ServerSocketChannel server = (ServerSocketChannel) key.channel();\n                                SocketChannel client = server.accept();\n                                if (null == client) {\n                                    return;\n                                }\n                                client.configureBlocking(false);\n                                client.register(selector, SelectionKey.OP_WRITE | SelectionKey.OP_READ, msg.duplicate());\n                                System.out.println(\"accept from \" + client);\n                            }\n                            //检查socket是否准备好写数据\n                            if (key.isWritable()) {\n                                SocketChannel client = (SocketChannel) key.channel();\n                                ByteBuffer byteBuffer = (ByteBuffer) key.attachment();\n                                while (byteBuffer.hasRemaining()) {\n                                    if (client.write(byteBuffer) == 0) {\n                                        break;\n                                    }\n                                }\n                                client.close();\n                            }\n\n                        } catch (IOException e) {\n                            key.cancel();\n                            try {\n                                key.channel().close();\n                            } catch (IOException e1) {\n                                e1.printStackTrace();\n                            }\n                        }\n                    }\n            );\n        }\n    }\n}\n\n```\n#### netty oio \n```\npackage com.ming;\n\nimport io.netty.bootstrap.ServerBootstrap;\nimport io.netty.buffer.ByteBuf;\nimport io.netty.buffer.Unpooled;\nimport io.netty.channel.*;\nimport io.netty.channel.oio.OioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.oio.OioServerSocketChannel;\nimport io.netty.util.CharsetUtil;\n\nimport java.net.InetSocketAddress;\n\n/**\n * netty oio 实现\n *\n * @author ming\n * @date 2018-04-16 15:56\n */\npublic class NettyOio {\n    public static void main(String[] args) throws InterruptedException {\n        new NettyOio().Start(20000);\n    }\n\n    /**\n     * netty oio bootstrap\n     *\n     * @author ming\n     * @date 2018-04-16 15:56\n     */\n    public void Start(int port) throws InterruptedException {\n        final ByteBuf byteBuf = Unpooled.unreleasableBuffer(Unpooled.copiedBuffer(\"hi ming \", CharsetUtil.UTF_8));\n        // 使用 oio 事件循环处理\n        EventLoopGroup eventLoopGroup = new OioEventLoopGroup();\n        try {\n            ServerBootstrap serverBootstrap = new ServerBootstrap();\n            serverBootstrap.group(eventLoopGroup)\n                    //使用oio 渠道\n                    .channel(OioServerSocketChannel.class)\n                    .localAddress(new InetSocketAddress(port))\n                    .childHandler(new ChannelInitializer<SocketChannel>() {\n                        @Override\n                        protected void initChannel(SocketChannel ch) throws Exception {\n                            ch.pipeline().addLast(new ChannelInboundHandlerAdapter() {\n                                @Override\n                                public void channelActive(ChannelHandlerContext ctx) throws Exception {\n                                    System.out.println(\"accept \" + ctx);\n                                    //输出一条信息 关闭 渠道\n                                    ctx.writeAndFlush(byteBuf.duplicate())\n                                            .addListener(ChannelFutureListener.CLOSE);\n                                }\n                            });\n                        }\n                    });\n            //绑定服务器\n            ChannelFuture future = serverBootstrap.bind().sync();\n            future.channel().closeFuture().sync();\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        } finally {\n            eventLoopGroup.shutdownGracefully().sync();\n        }\n    }\n}\n\n```\n#### netty nio \n```\npackage com.ming;\n\nimport io.netty.bootstrap.ServerBootstrap;\nimport io.netty.buffer.ByteBuf;\nimport io.netty.buffer.Unpooled;\nimport io.netty.channel.*;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.util.CharsetUtil;\n\nimport java.net.InetSocketAddress;\n\n/**\n * netty nio 实现\n *\n * @author ming\n * @date 2018-04-16 16:11\n */\npublic class NettyNio {\n\n    public static void main(String[] args) throws InterruptedException {\n        new NettyNio().Start(20000);\n    }\n\n    /**\n     * 启动 netty nio server\n     *\n     * @author ming\n     * @date 2018-04-16 16:12\n     */\n    public void Start(int port) throws InterruptedException {\n        final ByteBuf byteBuf = Unpooled.unreleasableBuffer(Unpooled.copiedBuffer(\"hi ming \", CharsetUtil.UTF_8));\n        //使用 nio 事件循环处理器\n        EventLoopGroup eventLoopGroup = new NioEventLoopGroup();\n        try {\n            ServerBootstrap serverBootstrap = new ServerBootstrap();\n            serverBootstrap.group(eventLoopGroup)\n                    //使用nio渠道\n                    .channel(NioServerSocketChannel.class)\n                    .localAddress(new InetSocketAddress(port))\n                    .childHandler(new ChannelInitializer<SocketChannel>() {\n                        @Override\n                        protected void initChannel(SocketChannel ch) throws Exception {\n                            ch.pipeline().addLast(new ChannelInboundHandlerAdapter() {\n                                @Override\n                                public void channelActive(ChannelHandlerContext ctx) throws Exception {\n                                    System.out.println(\"accept \" + ctx);\n                                    ctx.writeAndFlush(byteBuf.duplicate()).addListener(ChannelFutureListener.CLOSE);\n                                }\n                            });\n                        }\n                    });\n            ChannelFuture future = serverBootstrap.bind().sync();\n            future.channel().closeFuture().sync();\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        } finally {\n            eventLoopGroup.shutdownGracefully().sync();\n        }\n\n\n    }\n}\n\n```\n#### epoll\n```\npackage com.ming;\n\nimport io.netty.bootstrap.ServerBootstrap;\nimport io.netty.buffer.ByteBuf;\nimport io.netty.buffer.Unpooled;\nimport io.netty.channel.*;\nimport io.netty.channel.epoll.EpollEventLoopGroup;\nimport io.netty.channel.epoll.EpollServerSocketChannel;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.util.CharsetUtil;\n\nimport java.net.InetSocketAddress;\n\n/**\n * 基于linux 的Epoll 非阻塞 方式实现的 io传输\n *\n * @author ming\n * @date 2018-04-16 17:28\n */\npublic class NettyEpoll {\n\n    public static void main(String[] args) throws InterruptedException {\n        new NettyEpoll().Start(20000);\n    }\n\n    /**\n     * 启动 基于 epoll 的server\n     *\n     * @author ming\n     * @date 2018-04-16 17:29\n     */\n    public void Start(int port) throws InterruptedException {\n        final ByteBuf byteBuf = Unpooled.unreleasableBuffer(Unpooled.copiedBuffer(\"hi ming \", CharsetUtil.UTF_8));\n        //使用epoll\n        EventLoopGroup eventLoopGroup = new EpollEventLoopGroup();\n        try {\n            ServerBootstrap serverBootstrap = new ServerBootstrap();\n            serverBootstrap.group(eventLoopGroup)\n                    .channel(EpollServerSocketChannel.class)\n                    .localAddress(new InetSocketAddress(port))\n                    .childHandler(new ChannelInitializer<SocketChannel>() {\n                        @Override\n                        protected void initChannel(SocketChannel ch) throws Exception {\n                            ch.pipeline().addLast(new ChannelInboundHandlerAdapter() {\n                                @Override\n                                public void channelActive(ChannelHandlerContext ctx) throws Exception {\n                                    System.out.println(\"accept\" + ctx);\n                                    ctx.writeAndFlush(byteBuf.duplicate()).addListener(ChannelFutureListener.CLOSE);\n                                }\n                            });\n\n                        }\n                    });\n            ChannelFuture future = serverBootstrap.bind().sync();\n            future.channel().closeFuture().sync();\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        } finally {\n            eventLoopGroup.shutdownGracefully().sync();\n        }\n    }\n\n}\n\n```\n#### jvm local\n1:jvm local server \n```\npackage com.ming.JvmLocal;\n\nimport io.netty.bootstrap.ServerBootstrap;\nimport io.netty.buffer.ByteBuf;\nimport io.netty.buffer.Unpooled;\nimport io.netty.channel.*;\nimport io.netty.channel.local.LocalAddress;\nimport io.netty.channel.local.LocalChannel;\nimport io.netty.channel.local.LocalEventLoopGroup;\nimport io.netty.channel.local.LocalServerChannel;\nimport io.netty.util.CharsetUtil;\n\n/**\n * netty 基于jvm内部本地通信 server实现\n *\n * @author ming\n * @date 2018-04-17 13:45\n */\npublic class NettyJvmLocalServer {\n\n\n    /**\n     * 启动方法\n     *\n     * @author ming\n     * @date 2018-04-17 13:50\n     */\n    public void Start() throws InterruptedException {\n        final ByteBuf byteBuf = Unpooled.unreleasableBuffer(Unpooled.copiedBuffer(\"hi ming \", CharsetUtil.UTF_8));\n        //注册 local 事件处理器\n        EventLoopGroup eventLoopGroup = new LocalEventLoopGroup();\n\n        try {\n            ServerBootstrap serverBootstrap = new ServerBootstrap();\n            serverBootstrap.group(eventLoopGroup)\n                    //使用Local server channel\n                    .channel(LocalServerChannel.class)\n                    //使用 local 地址\n                    .localAddress(new LocalAddress(NettyJvmLocal.LOCAL_ADDRESS))\n                    .childHandler(new ChannelInitializer<LocalChannel>() {\n                        @Override\n                        protected void initChannel(LocalChannel ch) throws Exception {\n                            ch.pipeline().addLast(new ChannelInboundHandlerAdapter() {\n                                @Override\n                                public void channelActive(ChannelHandlerContext ctx) throws Exception {\n                                    System.out.println(\"accept \" + ctx);\n                                    ctx.writeAndFlush(byteBuf).addListener(ChannelFutureListener.CLOSE);\n                                }\n                            });\n                        }\n                    });\n            ChannelFuture future = serverBootstrap.bind().sync();\n            future.channel().closeFuture().sync();\n\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        } finally {\n            eventLoopGroup.shutdownGracefully().sync();\n        }\n\n\n    }\n\n}\n\n```\n2: jvm local client \n```\npackage com.ming.JvmLocal;\n\nimport io.netty.bootstrap.Bootstrap;\nimport io.netty.buffer.ByteBuf;\nimport io.netty.buffer.Unpooled;\nimport io.netty.channel.*;\nimport io.netty.channel.local.LocalAddress;\nimport io.netty.channel.local.LocalChannel;\nimport io.netty.channel.local.LocalEventLoopGroup;\nimport io.netty.util.CharsetUtil;\n\n/**\n * netty 基于jvm内部本地通信 client 实现\n *\n * @author ming\n * @date 2018-04-17 13:45\n */\npublic class NettyJvmLocalClient {\n\n\n    /**\n     * 启动方法\n     *\n     * @author ming\n     * @date 2018-04-17 13:50\n     */\n    public void Start() throws InterruptedException {\n        final ByteBuf byteBuf = Unpooled.unreleasableBuffer(Unpooled.copiedBuffer(\"hi ming client\", CharsetUtil.UTF_8));\n        //注册 local 事件处理器\n        EventLoopGroup eventLoopGroup = new LocalEventLoopGroup();\n\n        try {\n            Bootstrap bootstrap = new Bootstrap();\n            bootstrap.group(eventLoopGroup)\n                    //使用 localChannel渠道\n                    .channel(LocalChannel.class)\n                    //注册 local模式的地址\n                    .remoteAddress(new LocalAddress(NettyJvmLocal.LOCAL_ADDRESS))\n                    .handler(new ChannelInitializer<LocalChannel>() {\n                        @Override\n                        protected void initChannel(LocalChannel ch) throws Exception {\n                            ch.pipeline().addLast(new ChannelInboundHandlerAdapter() {\n                                @Override\n                                public void channelActive(ChannelHandlerContext ctx) throws Exception {\n                                    System.out.println(\"connect \" + ctx);\n                                    ctx.writeAndFlush(byteBuf).addListener(ChannelFutureListener.CLOSE);\n                                }\n                            });\n                        }\n                    });\n            ChannelFuture future = bootstrap.connect().sync();\n            future.channel().closeFuture().sync();\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        } finally {\n            eventLoopGroup.shutdownGracefully().sync();\n        }\n    }\n\n}\n\n```\n3:jvm local demo \n```\npackage com.ming.JvmLocal;\n\n/**\n * 调用 netty jvm  local server 和client 的客户端\n *\n * @author ming\n * @date 2018-04-17 14:09\n */\npublic class NettyJvmLocal {\n    /**\n     * 本地地址\n     *\n     * @author ming\n     * @date 2018-04-17 14:16\n     */\n    public static final String LOCAL_ADDRESS = \"ming\";\n\n    public static void main(String[] args) throws InterruptedException {\n        // 启动 server\n        new Thread(() -> {\n            try {\n                new NettyJvmLocalServer().Start();\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        }).start();\n\n        //暂停 线程 1s 等待server 启动完毕\n        Thread.sleep(1000L);\n\n        //启动client\n        new Thread(() -> {\n            try {\n                new NettyJvmLocalClient().Start();\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        }).start();\n    }\n\n}\n\n```\n### 传输\n传输是基于channel 的  \n\nchannel是有顺序的 因为继承 java.lang.Comparable   \nchannelHandler:常规用途  \n* 数据格式转换   \n* 异常处理  \n* 提供channel 状态变更通知  \n* 提供channel 注册或者注销 EventLoop中的通知  \n* 提供用户自定义事件通知  \n\nchannel 线程安全 并且保证顺序发送   \n\n### 内置传输手段\n|名称|包|备注|    \n|:--|:-|:--|    \n|NIO|io.netty.channel.socket.nio|使用java nio|     \n|Epoll|io.netty.channel.epoll|基于jni驱动的epoll()和非阻塞io 只能在linux上支持 比NIO快 并且完全非阻塞|  \n|OIO|io.netty.channel.socket.oio|使用java net包 阻塞流|  \n|Local|io.netty.channel.local|直接使用jvm内部管道通信|  \n|Embedded|io.netty.channel.embedded|测试channelHandler使用的不依赖网络|   \n\n### nio  非阻塞 io\n基于selector \n状态变化:  \n* 新的channel 已经被接受并且准备就绪   \n* channel 链接完成  \n* channel 有就绪的可供读取的数据  \n* channel 可用于写数据  \n通过java.nio.channels.SelectionKey定义的位 组合成一组应用程序正在请求通知的状态变化集合  \n|名称|描述|  \n|:--|:--|  \n|OP_ACCEPT|请求接受新链接创建channel获得通知|  \n|OP_CONNECT|请求建立第一个链接时候获得通知|  \n|OP_READ|请求数据就绪 可从channel 读取时获得通知|  \n|OP_WRITE|请求当可以向 channel中写入数据时候 获得通知、|  \n\n### Epoll 基于linux的本地非阻塞传输  \n在linux 2.5.44内核引入的功能   比POSIX 的select poll 更加牛逼  \n不考虑 夸平台  只考虑linux 的话  epoll 直接走起     \n### oio 阻塞io  \n基于jdk  java.net包的阻塞io   \n是netty 为了兼容 可能存在的老旧的系统 保留的 oio支持   \n### 基于jvm内部的local传输  \n在同一个jvm中运行的客户端和服务端程序直接的异步通信使用这种 可以大幅度提高速度   \n\n\n### 总结：   \njava实现oio和nio的代码 提供的api 区别比较大     \noio 不需要selector 直接server socket接受 处理    \nnio 通过selector 协调 分配给相应的 socket 处理   \nnetty 实现oio和nio 提供的api 基本相同 就是在使用发送方式和发送渠道时候 需要保持一致   \n例如 使用NioEventLoopGroup 那么传输渠道必须是NioServerChannelSocket   \n使用OioEventLoopGroup那么必须使用OioServerChannelSocket   \n\n\n### 传输支持的协议\n|传输类型|支持类型|  \n|:-----|:-----|   \n|NIO| tcp、udp、sctp、udt|  \n|Epoll(linux)|tcp、udp|   \n|OIO|tcp、udp、sctp、udt|   \n\nsctp 增强版本的tcp  \nudt  增强版本的udp  \n\n### 传输类型选择:  \n|需求类型|推荐传输类型|备注|  \n|:-----|:---------|:--|  \n|非阻塞代码、常规套路|nio、或者epoll| 如果不考虑跨平台等功能 并且只考虑linux 平台运行 那么 epoll 是肯定的 毕竟是个特殊优化的非阻塞模式|  \n|阻塞代码|oio|处理遗留代码的时候选择|  \n|同jvm通信|jvm local|在同一个jvm中 进行通信的话 选择jvm local 可以直接省掉网络io的开销|  \n|测试ChannelHandler|Embedded|只有写单元测试用用 |   \n\n零拷贝:  \n```\n   零拷贝(zero-copy)是一种目前只有在使用 NIO 和 Epoll 传输时才可使用的特性。它使你可以快速\n   高效地将数据从文件系统移动到网络接口,而不需要将其从内核空间复制到用户空间,其在像 FTP 或者\n   HTTP 这样的协议中可以显著地提升性能。但是,并不是所有的操作系统都支持这一特性。特别地,它对\n   于实现了数据加密或者压缩的文件系统是不可用的——只能传输文件的原始内容。反过来说,传输已被\n   加密的文件则不是问题。\n```","slug":"综合应用/netty-传输手段笔记","published":1,"updated":"2018-08-17T08:10:03.923Z","layout":"post","photos":[],"link":"","_id":"cjo9uau3i00csmwczt5cyjvg8","content":"<p>###传输案例</p><h4 id=\"java-oio\"><a href=\"#java-oio\" class=\"headerlink\" title=\"java oio\"></a>java oio</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.ming;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.io.IOException;</span><br><span class=\"line\">import java.io.OutputStream;</span><br><span class=\"line\">import java.net.ServerSocket;</span><br><span class=\"line\">import java.net.Socket;</span><br><span class=\"line\">import java.nio.charset.Charset;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 基于java 阻塞io的 服务端案例</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @author ming</span><br><span class=\"line\"> * @date 2018-04-11 14:53</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class JavaOio &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) throws IOException &#123;</span><br><span class=\"line\">        new JavaOio().Start(20000);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 启动java oio 方法</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param port</span><br><span class=\"line\">     * @author ming</span><br><span class=\"line\">     * @date 2018-04-11 14:57</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public void Start(int port) throws IOException &#123;</span><br><span class=\"line\">        final ServerSocket socket = new ServerSocket(port);</span><br><span class=\"line\">        for (; ; ) &#123;</span><br><span class=\"line\">            //接受链接</span><br><span class=\"line\">            final Socket clientSocket = socket.accept();</span><br><span class=\"line\">            System.out.println(&quot;accept client::&quot; + clientSocket);</span><br><span class=\"line\">            //建立新线程执行 客户端的请求</span><br><span class=\"line\">            new Thread(() -&gt; &#123;</span><br><span class=\"line\">                OutputStream outputStream = null;</span><br><span class=\"line\">                try &#123;</span><br><span class=\"line\">                    //获取输出流</span><br><span class=\"line\">                    outputStream = clientSocket.getOutputStream();</span><br><span class=\"line\">                    //输出数据</span><br><span class=\"line\">                    outputStream.write(&quot;hi ming &quot;.getBytes(Charset.forName(&quot;UTF-8&quot;)));</span><br><span class=\"line\">                    //刷新数据</span><br><span class=\"line\">                    outputStream.flush();</span><br><span class=\"line\">                    clientSocket.close();</span><br><span class=\"line\">                &#125; catch (IOException e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125; finally &#123;</span><br><span class=\"line\">                    try &#123;</span><br><span class=\"line\">                        outputStream.close();</span><br><span class=\"line\">                    &#125; catch (IOException e) &#123;</span><br><span class=\"line\">                        e.printStackTrace();</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;).start();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"java-nio\"><a href=\"#java-nio\" class=\"headerlink\" title=\"java nio\"></a>java nio</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.ming;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.io.IOException;</span><br><span class=\"line\">import java.net.InetSocketAddress;</span><br><span class=\"line\">import java.net.ServerSocket;</span><br><span class=\"line\">import java.nio.ByteBuffer;</span><br><span class=\"line\">import java.nio.channels.SelectionKey;</span><br><span class=\"line\">import java.nio.channels.Selector;</span><br><span class=\"line\">import java.nio.channels.ServerSocketChannel;</span><br><span class=\"line\">import java.nio.channels.SocketChannel;</span><br><span class=\"line\">import java.util.Set;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * java 实现nio 模式的服务端</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @author ming</span><br><span class=\"line\"> * @date 2018-04-11 15:08</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class JavaNio &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) throws IOException &#123;</span><br><span class=\"line\">        new JavaNio().Start(20000);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 启动java nio 服务端</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param port</span><br><span class=\"line\">     * @author ming</span><br><span class=\"line\">     * @date 2018-04-11 15:09</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public void Start(int port) throws IOException &#123;</span><br><span class=\"line\">        //打开 server socket channel</span><br><span class=\"line\">        ServerSocketChannel serverSocketChannel = ServerSocketChannel.open();</span><br><span class=\"line\">        //设置 为非阻塞队列</span><br><span class=\"line\">        serverSocketChannel.configureBlocking(false);</span><br><span class=\"line\">        //通过socket channel 获取socket</span><br><span class=\"line\">        ServerSocket socket = serverSocketChannel.socket();</span><br><span class=\"line\">        //获取socket 的地址</span><br><span class=\"line\">        InetSocketAddress socketAddress = new InetSocketAddress(port);</span><br><span class=\"line\">        //绑定 socket地址到socket</span><br><span class=\"line\">        socket.bind(socketAddress);</span><br><span class=\"line\">        //打开selector</span><br><span class=\"line\">        Selector selector = Selector.open();</span><br><span class=\"line\">        //将socket channel 注册到selector上</span><br><span class=\"line\">        serverSocketChannel.register(selector, SelectionKey.OP_ACCEPT);</span><br><span class=\"line\">        //返回客户端的消息</span><br><span class=\"line\">        final ByteBuffer msg = ByteBuffer.wrap(&quot;hi ming &quot;.getBytes(&quot;UTF-8&quot;));</span><br><span class=\"line\"></span><br><span class=\"line\">        for (; ; ) &#123;</span><br><span class=\"line\">            try &#123;</span><br><span class=\"line\">                //阻塞等待需要处理的新事件</span><br><span class=\"line\">                selector.select();</span><br><span class=\"line\">            &#125; catch (IOException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">                break;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            //获取所有连接事件的 select key</span><br><span class=\"line\">            Set&lt;SelectionKey&gt; readyKeys = selector.selectedKeys();</span><br><span class=\"line\">            readyKeys.forEach(key -&gt; &#123;</span><br><span class=\"line\">                        try &#123;</span><br><span class=\"line\">                            //检查时间 是否是一个新的 可以被接受的链接</span><br><span class=\"line\">                            if (key.isAcceptable()) &#123;</span><br><span class=\"line\">                                ServerSocketChannel server = (ServerSocketChannel) key.channel();</span><br><span class=\"line\">                                SocketChannel client = server.accept();</span><br><span class=\"line\">                                if (null == client) &#123;</span><br><span class=\"line\">                                    return;</span><br><span class=\"line\">                                &#125;</span><br><span class=\"line\">                                client.configureBlocking(false);</span><br><span class=\"line\">                                client.register(selector, SelectionKey.OP_WRITE | SelectionKey.OP_READ, msg.duplicate());</span><br><span class=\"line\">                                System.out.println(&quot;accept from &quot; + client);</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                            //检查socket是否准备好写数据</span><br><span class=\"line\">                            if (key.isWritable()) &#123;</span><br><span class=\"line\">                                SocketChannel client = (SocketChannel) key.channel();</span><br><span class=\"line\">                                ByteBuffer byteBuffer = (ByteBuffer) key.attachment();</span><br><span class=\"line\">                                while (byteBuffer.hasRemaining()) &#123;</span><br><span class=\"line\">                                    if (client.write(byteBuffer) == 0) &#123;</span><br><span class=\"line\">                                        break;</span><br><span class=\"line\">                                    &#125;</span><br><span class=\"line\">                                &#125;</span><br><span class=\"line\">                                client.close();</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                        &#125; catch (IOException e) &#123;</span><br><span class=\"line\">                            key.cancel();</span><br><span class=\"line\">                            try &#123;</span><br><span class=\"line\">                                key.channel().close();</span><br><span class=\"line\">                            &#125; catch (IOException e1) &#123;</span><br><span class=\"line\">                                e1.printStackTrace();</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">            );</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"netty-oio\"><a href=\"#netty-oio\" class=\"headerlink\" title=\"netty oio\"></a>netty oio</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.ming;</span><br><span class=\"line\"></span><br><span class=\"line\">import io.netty.bootstrap.ServerBootstrap;</span><br><span class=\"line\">import io.netty.buffer.ByteBuf;</span><br><span class=\"line\">import io.netty.buffer.Unpooled;</span><br><span class=\"line\">import io.netty.channel.*;</span><br><span class=\"line\">import io.netty.channel.oio.OioEventLoopGroup;</span><br><span class=\"line\">import io.netty.channel.socket.SocketChannel;</span><br><span class=\"line\">import io.netty.channel.socket.oio.OioServerSocketChannel;</span><br><span class=\"line\">import io.netty.util.CharsetUtil;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.net.InetSocketAddress;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * netty oio 实现</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @author ming</span><br><span class=\"line\"> * @date 2018-04-16 15:56</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class NettyOio &#123;</span><br><span class=\"line\">    public static void main(String[] args) throws InterruptedException &#123;</span><br><span class=\"line\">        new NettyOio().Start(20000);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * netty oio bootstrap</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @author ming</span><br><span class=\"line\">     * @date 2018-04-16 15:56</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public void Start(int port) throws InterruptedException &#123;</span><br><span class=\"line\">        final ByteBuf byteBuf = Unpooled.unreleasableBuffer(Unpooled.copiedBuffer(&quot;hi ming &quot;, CharsetUtil.UTF_8));</span><br><span class=\"line\">        // 使用 oio 事件循环处理</span><br><span class=\"line\">        EventLoopGroup eventLoopGroup = new OioEventLoopGroup();</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            ServerBootstrap serverBootstrap = new ServerBootstrap();</span><br><span class=\"line\">            serverBootstrap.group(eventLoopGroup)</span><br><span class=\"line\">                    //使用oio 渠道</span><br><span class=\"line\">                    .channel(OioServerSocketChannel.class)</span><br><span class=\"line\">                    .localAddress(new InetSocketAddress(port))</span><br><span class=\"line\">                    .childHandler(new ChannelInitializer&lt;SocketChannel&gt;() &#123;</span><br><span class=\"line\">                        @Override</span><br><span class=\"line\">                        protected void initChannel(SocketChannel ch) throws Exception &#123;</span><br><span class=\"line\">                            ch.pipeline().addLast(new ChannelInboundHandlerAdapter() &#123;</span><br><span class=\"line\">                                @Override</span><br><span class=\"line\">                                public void channelActive(ChannelHandlerContext ctx) throws Exception &#123;</span><br><span class=\"line\">                                    System.out.println(&quot;accept &quot; + ctx);</span><br><span class=\"line\">                                    //输出一条信息 关闭 渠道</span><br><span class=\"line\">                                    ctx.writeAndFlush(byteBuf.duplicate())</span><br><span class=\"line\">                                            .addListener(ChannelFutureListener.CLOSE);</span><br><span class=\"line\">                                &#125;</span><br><span class=\"line\">                            &#125;);</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;);</span><br><span class=\"line\">            //绑定服务器</span><br><span class=\"line\">            ChannelFuture future = serverBootstrap.bind().sync();</span><br><span class=\"line\">            future.channel().closeFuture().sync();</span><br><span class=\"line\">        &#125; catch (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; finally &#123;</span><br><span class=\"line\">            eventLoopGroup.shutdownGracefully().sync();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"netty-nio\"><a href=\"#netty-nio\" class=\"headerlink\" title=\"netty nio\"></a>netty nio</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.ming;</span><br><span class=\"line\"></span><br><span class=\"line\">import io.netty.bootstrap.ServerBootstrap;</span><br><span class=\"line\">import io.netty.buffer.ByteBuf;</span><br><span class=\"line\">import io.netty.buffer.Unpooled;</span><br><span class=\"line\">import io.netty.channel.*;</span><br><span class=\"line\">import io.netty.channel.nio.NioEventLoopGroup;</span><br><span class=\"line\">import io.netty.channel.socket.SocketChannel;</span><br><span class=\"line\">import io.netty.channel.socket.nio.NioServerSocketChannel;</span><br><span class=\"line\">import io.netty.util.CharsetUtil;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.net.InetSocketAddress;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * netty nio 实现</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @author ming</span><br><span class=\"line\"> * @date 2018-04-16 16:11</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class NettyNio &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) throws InterruptedException &#123;</span><br><span class=\"line\">        new NettyNio().Start(20000);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 启动 netty nio server</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @author ming</span><br><span class=\"line\">     * @date 2018-04-16 16:12</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public void Start(int port) throws InterruptedException &#123;</span><br><span class=\"line\">        final ByteBuf byteBuf = Unpooled.unreleasableBuffer(Unpooled.copiedBuffer(&quot;hi ming &quot;, CharsetUtil.UTF_8));</span><br><span class=\"line\">        //使用 nio 事件循环处理器</span><br><span class=\"line\">        EventLoopGroup eventLoopGroup = new NioEventLoopGroup();</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            ServerBootstrap serverBootstrap = new ServerBootstrap();</span><br><span class=\"line\">            serverBootstrap.group(eventLoopGroup)</span><br><span class=\"line\">                    //使用nio渠道</span><br><span class=\"line\">                    .channel(NioServerSocketChannel.class)</span><br><span class=\"line\">                    .localAddress(new InetSocketAddress(port))</span><br><span class=\"line\">                    .childHandler(new ChannelInitializer&lt;SocketChannel&gt;() &#123;</span><br><span class=\"line\">                        @Override</span><br><span class=\"line\">                        protected void initChannel(SocketChannel ch) throws Exception &#123;</span><br><span class=\"line\">                            ch.pipeline().addLast(new ChannelInboundHandlerAdapter() &#123;</span><br><span class=\"line\">                                @Override</span><br><span class=\"line\">                                public void channelActive(ChannelHandlerContext ctx) throws Exception &#123;</span><br><span class=\"line\">                                    System.out.println(&quot;accept &quot; + ctx);</span><br><span class=\"line\">                                    ctx.writeAndFlush(byteBuf.duplicate()).addListener(ChannelFutureListener.CLOSE);</span><br><span class=\"line\">                                &#125;</span><br><span class=\"line\">                            &#125;);</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;);</span><br><span class=\"line\">            ChannelFuture future = serverBootstrap.bind().sync();</span><br><span class=\"line\">            future.channel().closeFuture().sync();</span><br><span class=\"line\">        &#125; catch (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; finally &#123;</span><br><span class=\"line\">            eventLoopGroup.shutdownGracefully().sync();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"epoll\"><a href=\"#epoll\" class=\"headerlink\" title=\"epoll\"></a>epoll</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.ming;</span><br><span class=\"line\"></span><br><span class=\"line\">import io.netty.bootstrap.ServerBootstrap;</span><br><span class=\"line\">import io.netty.buffer.ByteBuf;</span><br><span class=\"line\">import io.netty.buffer.Unpooled;</span><br><span class=\"line\">import io.netty.channel.*;</span><br><span class=\"line\">import io.netty.channel.epoll.EpollEventLoopGroup;</span><br><span class=\"line\">import io.netty.channel.epoll.EpollServerSocketChannel;</span><br><span class=\"line\">import io.netty.channel.socket.SocketChannel;</span><br><span class=\"line\">import io.netty.util.CharsetUtil;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.net.InetSocketAddress;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 基于linux 的Epoll 非阻塞 方式实现的 io传输</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @author ming</span><br><span class=\"line\"> * @date 2018-04-16 17:28</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class NettyEpoll &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) throws InterruptedException &#123;</span><br><span class=\"line\">        new NettyEpoll().Start(20000);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 启动 基于 epoll 的server</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @author ming</span><br><span class=\"line\">     * @date 2018-04-16 17:29</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public void Start(int port) throws InterruptedException &#123;</span><br><span class=\"line\">        final ByteBuf byteBuf = Unpooled.unreleasableBuffer(Unpooled.copiedBuffer(&quot;hi ming &quot;, CharsetUtil.UTF_8));</span><br><span class=\"line\">        //使用epoll</span><br><span class=\"line\">        EventLoopGroup eventLoopGroup = new EpollEventLoopGroup();</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            ServerBootstrap serverBootstrap = new ServerBootstrap();</span><br><span class=\"line\">            serverBootstrap.group(eventLoopGroup)</span><br><span class=\"line\">                    .channel(EpollServerSocketChannel.class)</span><br><span class=\"line\">                    .localAddress(new InetSocketAddress(port))</span><br><span class=\"line\">                    .childHandler(new ChannelInitializer&lt;SocketChannel&gt;() &#123;</span><br><span class=\"line\">                        @Override</span><br><span class=\"line\">                        protected void initChannel(SocketChannel ch) throws Exception &#123;</span><br><span class=\"line\">                            ch.pipeline().addLast(new ChannelInboundHandlerAdapter() &#123;</span><br><span class=\"line\">                                @Override</span><br><span class=\"line\">                                public void channelActive(ChannelHandlerContext ctx) throws Exception &#123;</span><br><span class=\"line\">                                    System.out.println(&quot;accept&quot; + ctx);</span><br><span class=\"line\">                                    ctx.writeAndFlush(byteBuf.duplicate()).addListener(ChannelFutureListener.CLOSE);</span><br><span class=\"line\">                                &#125;</span><br><span class=\"line\">                            &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;);</span><br><span class=\"line\">            ChannelFuture future = serverBootstrap.bind().sync();</span><br><span class=\"line\">            future.channel().closeFuture().sync();</span><br><span class=\"line\">        &#125; catch (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; finally &#123;</span><br><span class=\"line\">            eventLoopGroup.shutdownGracefully().sync();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"jvm-local\"><a href=\"#jvm-local\" class=\"headerlink\" title=\"jvm local\"></a>jvm local</h4><p>1:jvm local server<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.ming.JvmLocal;</span><br><span class=\"line\"></span><br><span class=\"line\">import io.netty.bootstrap.ServerBootstrap;</span><br><span class=\"line\">import io.netty.buffer.ByteBuf;</span><br><span class=\"line\">import io.netty.buffer.Unpooled;</span><br><span class=\"line\">import io.netty.channel.*;</span><br><span class=\"line\">import io.netty.channel.local.LocalAddress;</span><br><span class=\"line\">import io.netty.channel.local.LocalChannel;</span><br><span class=\"line\">import io.netty.channel.local.LocalEventLoopGroup;</span><br><span class=\"line\">import io.netty.channel.local.LocalServerChannel;</span><br><span class=\"line\">import io.netty.util.CharsetUtil;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * netty 基于jvm内部本地通信 server实现</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @author ming</span><br><span class=\"line\"> * @date 2018-04-17 13:45</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class NettyJvmLocalServer &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 启动方法</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @author ming</span><br><span class=\"line\">     * @date 2018-04-17 13:50</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public void Start() throws InterruptedException &#123;</span><br><span class=\"line\">        final ByteBuf byteBuf = Unpooled.unreleasableBuffer(Unpooled.copiedBuffer(&quot;hi ming &quot;, CharsetUtil.UTF_8));</span><br><span class=\"line\">        //注册 local 事件处理器</span><br><span class=\"line\">        EventLoopGroup eventLoopGroup = new LocalEventLoopGroup();</span><br><span class=\"line\"></span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            ServerBootstrap serverBootstrap = new ServerBootstrap();</span><br><span class=\"line\">            serverBootstrap.group(eventLoopGroup)</span><br><span class=\"line\">                    //使用Local server channel</span><br><span class=\"line\">                    .channel(LocalServerChannel.class)</span><br><span class=\"line\">                    //使用 local 地址</span><br><span class=\"line\">                    .localAddress(new LocalAddress(NettyJvmLocal.LOCAL_ADDRESS))</span><br><span class=\"line\">                    .childHandler(new ChannelInitializer&lt;LocalChannel&gt;() &#123;</span><br><span class=\"line\">                        @Override</span><br><span class=\"line\">                        protected void initChannel(LocalChannel ch) throws Exception &#123;</span><br><span class=\"line\">                            ch.pipeline().addLast(new ChannelInboundHandlerAdapter() &#123;</span><br><span class=\"line\">                                @Override</span><br><span class=\"line\">                                public void channelActive(ChannelHandlerContext ctx) throws Exception &#123;</span><br><span class=\"line\">                                    System.out.println(&quot;accept &quot; + ctx);</span><br><span class=\"line\">                                    ctx.writeAndFlush(byteBuf).addListener(ChannelFutureListener.CLOSE);</span><br><span class=\"line\">                                &#125;</span><br><span class=\"line\">                            &#125;);</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;);</span><br><span class=\"line\">            ChannelFuture future = serverBootstrap.bind().sync();</span><br><span class=\"line\">            future.channel().closeFuture().sync();</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125; catch (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; finally &#123;</span><br><span class=\"line\">            eventLoopGroup.shutdownGracefully().sync();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p>\n<p>2: jvm local client<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.ming.JvmLocal;</span><br><span class=\"line\"></span><br><span class=\"line\">import io.netty.bootstrap.Bootstrap;</span><br><span class=\"line\">import io.netty.buffer.ByteBuf;</span><br><span class=\"line\">import io.netty.buffer.Unpooled;</span><br><span class=\"line\">import io.netty.channel.*;</span><br><span class=\"line\">import io.netty.channel.local.LocalAddress;</span><br><span class=\"line\">import io.netty.channel.local.LocalChannel;</span><br><span class=\"line\">import io.netty.channel.local.LocalEventLoopGroup;</span><br><span class=\"line\">import io.netty.util.CharsetUtil;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * netty 基于jvm内部本地通信 client 实现</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @author ming</span><br><span class=\"line\"> * @date 2018-04-17 13:45</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class NettyJvmLocalClient &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 启动方法</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @author ming</span><br><span class=\"line\">     * @date 2018-04-17 13:50</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public void Start() throws InterruptedException &#123;</span><br><span class=\"line\">        final ByteBuf byteBuf = Unpooled.unreleasableBuffer(Unpooled.copiedBuffer(&quot;hi ming client&quot;, CharsetUtil.UTF_8));</span><br><span class=\"line\">        //注册 local 事件处理器</span><br><span class=\"line\">        EventLoopGroup eventLoopGroup = new LocalEventLoopGroup();</span><br><span class=\"line\"></span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            Bootstrap bootstrap = new Bootstrap();</span><br><span class=\"line\">            bootstrap.group(eventLoopGroup)</span><br><span class=\"line\">                    //使用 localChannel渠道</span><br><span class=\"line\">                    .channel(LocalChannel.class)</span><br><span class=\"line\">                    //注册 local模式的地址</span><br><span class=\"line\">                    .remoteAddress(new LocalAddress(NettyJvmLocal.LOCAL_ADDRESS))</span><br><span class=\"line\">                    .handler(new ChannelInitializer&lt;LocalChannel&gt;() &#123;</span><br><span class=\"line\">                        @Override</span><br><span class=\"line\">                        protected void initChannel(LocalChannel ch) throws Exception &#123;</span><br><span class=\"line\">                            ch.pipeline().addLast(new ChannelInboundHandlerAdapter() &#123;</span><br><span class=\"line\">                                @Override</span><br><span class=\"line\">                                public void channelActive(ChannelHandlerContext ctx) throws Exception &#123;</span><br><span class=\"line\">                                    System.out.println(&quot;connect &quot; + ctx);</span><br><span class=\"line\">                                    ctx.writeAndFlush(byteBuf).addListener(ChannelFutureListener.CLOSE);</span><br><span class=\"line\">                                &#125;</span><br><span class=\"line\">                            &#125;);</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;);</span><br><span class=\"line\">            ChannelFuture future = bootstrap.connect().sync();</span><br><span class=\"line\">            future.channel().closeFuture().sync();</span><br><span class=\"line\">        &#125; catch (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; finally &#123;</span><br><span class=\"line\">            eventLoopGroup.shutdownGracefully().sync();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p>\n<p>3:jvm local demo<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.ming.JvmLocal;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 调用 netty jvm  local server 和client 的客户端</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @author ming</span><br><span class=\"line\"> * @date 2018-04-17 14:09</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class NettyJvmLocal &#123;</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 本地地址</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @author ming</span><br><span class=\"line\">     * @date 2018-04-17 14:16</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static final String LOCAL_ADDRESS = &quot;ming&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) throws InterruptedException &#123;</span><br><span class=\"line\">        // 启动 server</span><br><span class=\"line\">        new Thread(() -&gt; &#123;</span><br><span class=\"line\">            try &#123;</span><br><span class=\"line\">                new NettyJvmLocalServer().Start();</span><br><span class=\"line\">            &#125; catch (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;).start();</span><br><span class=\"line\"></span><br><span class=\"line\">        //暂停 线程 1s 等待server 启动完毕</span><br><span class=\"line\">        Thread.sleep(1000L);</span><br><span class=\"line\"></span><br><span class=\"line\">        //启动client</span><br><span class=\"line\">        new Thread(() -&gt; &#123;</span><br><span class=\"line\">            try &#123;</span><br><span class=\"line\">                new NettyJvmLocalClient().Start();</span><br><span class=\"line\">            &#125; catch (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p>\n<h3 id=\"传输\"><a href=\"#传输\" class=\"headerlink\" title=\"传输\"></a>传输</h3><p>传输是基于channel 的  </p>\n<p>channel是有顺序的 因为继承 java.lang.Comparable<br>channelHandler:常规用途  </p>\n<ul>\n<li>数据格式转换   </li>\n<li>异常处理  </li>\n<li>提供channel 状态变更通知  </li>\n<li>提供channel 注册或者注销 EventLoop中的通知  </li>\n<li>提供用户自定义事件通知  </li>\n</ul>\n<p>channel 线程安全 并且保证顺序发送   </p>\n<h3 id=\"内置传输手段\"><a href=\"#内置传输手段\" class=\"headerlink\" title=\"内置传输手段\"></a>内置传输手段</h3><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">名称</th>\n<th style=\"text-align:left\">包</th>\n<th style=\"text-align:left\">备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">NIO</td>\n<td style=\"text-align:left\">io.netty.channel.socket.nio</td>\n<td style=\"text-align:left\">使用java nio</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Epoll</td>\n<td style=\"text-align:left\">io.netty.channel.epoll</td>\n<td style=\"text-align:left\">基于jni驱动的epoll()和非阻塞io 只能在linux上支持 比NIO快 并且完全非阻塞</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">OIO</td>\n<td style=\"text-align:left\">io.netty.channel.socket.oio</td>\n<td style=\"text-align:left\">使用java net包 阻塞流</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Local</td>\n<td style=\"text-align:left\">io.netty.channel.local</td>\n<td style=\"text-align:left\">直接使用jvm内部管道通信</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Embedded</td>\n<td style=\"text-align:left\">io.netty.channel.embedded</td>\n<td style=\"text-align:left\">测试channelHandler使用的不依赖网络</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"nio-非阻塞-io\"><a href=\"#nio-非阻塞-io\" class=\"headerlink\" title=\"nio  非阻塞 io\"></a>nio  非阻塞 io</h3><p>基于selector<br>状态变化:  </p>\n<ul>\n<li>新的channel 已经被接受并且准备就绪   </li>\n<li>channel 链接完成  </li>\n<li>channel 有就绪的可供读取的数据  </li>\n<li>channel 可用于写数据<br>通过java.nio.channels.SelectionKey定义的位 组合成一组应用程序正在请求通知的状态变化集合<br>|名称|描述|<br>|:–|:–|<br>|OP_ACCEPT|请求接受新链接创建channel获得通知|<br>|OP_CONNECT|请求建立第一个链接时候获得通知|<br>|OP_READ|请求数据就绪 可从channel 读取时获得通知|<br>|OP_WRITE|请求当可以向 channel中写入数据时候 获得通知、|  </li>\n</ul>\n<h3 id=\"Epoll-基于linux的本地非阻塞传输\"><a href=\"#Epoll-基于linux的本地非阻塞传输\" class=\"headerlink\" title=\"Epoll 基于linux的本地非阻塞传输\"></a>Epoll 基于linux的本地非阻塞传输</h3><p>在linux 2.5.44内核引入的功能   比POSIX 的select poll 更加牛逼<br>不考虑 夸平台  只考虑linux 的话  epoll 直接走起     </p>\n<h3 id=\"oio-阻塞io\"><a href=\"#oio-阻塞io\" class=\"headerlink\" title=\"oio 阻塞io\"></a>oio 阻塞io</h3><p>基于jdk  java.net包的阻塞io<br>是netty 为了兼容 可能存在的老旧的系统 保留的 oio支持   </p>\n<h3 id=\"基于jvm内部的local传输\"><a href=\"#基于jvm内部的local传输\" class=\"headerlink\" title=\"基于jvm内部的local传输\"></a>基于jvm内部的local传输</h3><p>在同一个jvm中运行的客户端和服务端程序直接的异步通信使用这种 可以大幅度提高速度   </p>\n<h3 id=\"总结：\"><a href=\"#总结：\" class=\"headerlink\" title=\"总结：\"></a>总结：</h3><p>java实现oio和nio的代码 提供的api 区别比较大<br>oio 不需要selector 直接server socket接受 处理<br>nio 通过selector 协调 分配给相应的 socket 处理<br>netty 实现oio和nio 提供的api 基本相同 就是在使用发送方式和发送渠道时候 需要保持一致<br>例如 使用NioEventLoopGroup 那么传输渠道必须是NioServerChannelSocket<br>使用OioEventLoopGroup那么必须使用OioServerChannelSocket   </p>\n<h3 id=\"传输支持的协议\"><a href=\"#传输支持的协议\" class=\"headerlink\" title=\"传输支持的协议\"></a>传输支持的协议</h3><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">传输类型</th>\n<th style=\"text-align:left\">支持类型</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">NIO</td>\n<td style=\"text-align:left\">tcp、udp、sctp、udt</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Epoll(linux)</td>\n<td style=\"text-align:left\">tcp、udp</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">OIO</td>\n<td style=\"text-align:left\">tcp、udp、sctp、udt</td>\n</tr>\n</tbody>\n</table>\n<p>sctp 增强版本的tcp<br>udt  增强版本的udp  </p>\n<h3 id=\"传输类型选择\"><a href=\"#传输类型选择\" class=\"headerlink\" title=\"传输类型选择:\"></a>传输类型选择:</h3><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">需求类型</th>\n<th style=\"text-align:left\">推荐传输类型</th>\n<th style=\"text-align:left\">备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">非阻塞代码、常规套路</td>\n<td style=\"text-align:left\">nio、或者epoll</td>\n<td style=\"text-align:left\">如果不考虑跨平台等功能 并且只考虑linux 平台运行 那么 epoll 是肯定的 毕竟是个特殊优化的非阻塞模式</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">阻塞代码</td>\n<td style=\"text-align:left\">oio</td>\n<td style=\"text-align:left\">处理遗留代码的时候选择</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">同jvm通信</td>\n<td style=\"text-align:left\">jvm local</td>\n<td style=\"text-align:left\">在同一个jvm中 进行通信的话 选择jvm local 可以直接省掉网络io的开销</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">测试ChannelHandler</td>\n<td style=\"text-align:left\">Embedded</td>\n<td style=\"text-align:left\">只有写单元测试用用</td>\n</tr>\n</tbody>\n</table>\n<p>零拷贝:<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">零拷贝(zero-copy)是一种目前只有在使用 NIO 和 Epoll 传输时才可使用的特性。它使你可以快速</span><br><span class=\"line\">高效地将数据从文件系统移动到网络接口,而不需要将其从内核空间复制到用户空间,其在像 FTP 或者</span><br><span class=\"line\">HTTP 这样的协议中可以显著地提升性能。但是,并不是所有的操作系统都支持这一特性。特别地,它对</span><br><span class=\"line\">于实现了数据加密或者压缩的文件系统是不可用的——只能传输文件的原始内容。反过来说,传输已被</span><br><span class=\"line\">加密的文件则不是问题。</span><br></pre></td></tr></table></figure><p></p>","site":{"data":{}},"excerpt":"","more":"<p>###传输案例</p><h4 id=\"java-oio\"><a href=\"#java-oio\" class=\"headerlink\" title=\"java oio\"></a>java oio</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.ming;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.io.IOException;</span><br><span class=\"line\">import java.io.OutputStream;</span><br><span class=\"line\">import java.net.ServerSocket;</span><br><span class=\"line\">import java.net.Socket;</span><br><span class=\"line\">import java.nio.charset.Charset;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 基于java 阻塞io的 服务端案例</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @author ming</span><br><span class=\"line\"> * @date 2018-04-11 14:53</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class JavaOio &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) throws IOException &#123;</span><br><span class=\"line\">        new JavaOio().Start(20000);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 启动java oio 方法</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param port</span><br><span class=\"line\">     * @author ming</span><br><span class=\"line\">     * @date 2018-04-11 14:57</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public void Start(int port) throws IOException &#123;</span><br><span class=\"line\">        final ServerSocket socket = new ServerSocket(port);</span><br><span class=\"line\">        for (; ; ) &#123;</span><br><span class=\"line\">            //接受链接</span><br><span class=\"line\">            final Socket clientSocket = socket.accept();</span><br><span class=\"line\">            System.out.println(&quot;accept client::&quot; + clientSocket);</span><br><span class=\"line\">            //建立新线程执行 客户端的请求</span><br><span class=\"line\">            new Thread(() -&gt; &#123;</span><br><span class=\"line\">                OutputStream outputStream = null;</span><br><span class=\"line\">                try &#123;</span><br><span class=\"line\">                    //获取输出流</span><br><span class=\"line\">                    outputStream = clientSocket.getOutputStream();</span><br><span class=\"line\">                    //输出数据</span><br><span class=\"line\">                    outputStream.write(&quot;hi ming &quot;.getBytes(Charset.forName(&quot;UTF-8&quot;)));</span><br><span class=\"line\">                    //刷新数据</span><br><span class=\"line\">                    outputStream.flush();</span><br><span class=\"line\">                    clientSocket.close();</span><br><span class=\"line\">                &#125; catch (IOException e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125; finally &#123;</span><br><span class=\"line\">                    try &#123;</span><br><span class=\"line\">                        outputStream.close();</span><br><span class=\"line\">                    &#125; catch (IOException e) &#123;</span><br><span class=\"line\">                        e.printStackTrace();</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;).start();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"java-nio\"><a href=\"#java-nio\" class=\"headerlink\" title=\"java nio\"></a>java nio</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.ming;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.io.IOException;</span><br><span class=\"line\">import java.net.InetSocketAddress;</span><br><span class=\"line\">import java.net.ServerSocket;</span><br><span class=\"line\">import java.nio.ByteBuffer;</span><br><span class=\"line\">import java.nio.channels.SelectionKey;</span><br><span class=\"line\">import java.nio.channels.Selector;</span><br><span class=\"line\">import java.nio.channels.ServerSocketChannel;</span><br><span class=\"line\">import java.nio.channels.SocketChannel;</span><br><span class=\"line\">import java.util.Set;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * java 实现nio 模式的服务端</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @author ming</span><br><span class=\"line\"> * @date 2018-04-11 15:08</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class JavaNio &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) throws IOException &#123;</span><br><span class=\"line\">        new JavaNio().Start(20000);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 启动java nio 服务端</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param port</span><br><span class=\"line\">     * @author ming</span><br><span class=\"line\">     * @date 2018-04-11 15:09</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public void Start(int port) throws IOException &#123;</span><br><span class=\"line\">        //打开 server socket channel</span><br><span class=\"line\">        ServerSocketChannel serverSocketChannel = ServerSocketChannel.open();</span><br><span class=\"line\">        //设置 为非阻塞队列</span><br><span class=\"line\">        serverSocketChannel.configureBlocking(false);</span><br><span class=\"line\">        //通过socket channel 获取socket</span><br><span class=\"line\">        ServerSocket socket = serverSocketChannel.socket();</span><br><span class=\"line\">        //获取socket 的地址</span><br><span class=\"line\">        InetSocketAddress socketAddress = new InetSocketAddress(port);</span><br><span class=\"line\">        //绑定 socket地址到socket</span><br><span class=\"line\">        socket.bind(socketAddress);</span><br><span class=\"line\">        //打开selector</span><br><span class=\"line\">        Selector selector = Selector.open();</span><br><span class=\"line\">        //将socket channel 注册到selector上</span><br><span class=\"line\">        serverSocketChannel.register(selector, SelectionKey.OP_ACCEPT);</span><br><span class=\"line\">        //返回客户端的消息</span><br><span class=\"line\">        final ByteBuffer msg = ByteBuffer.wrap(&quot;hi ming &quot;.getBytes(&quot;UTF-8&quot;));</span><br><span class=\"line\"></span><br><span class=\"line\">        for (; ; ) &#123;</span><br><span class=\"line\">            try &#123;</span><br><span class=\"line\">                //阻塞等待需要处理的新事件</span><br><span class=\"line\">                selector.select();</span><br><span class=\"line\">            &#125; catch (IOException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">                break;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            //获取所有连接事件的 select key</span><br><span class=\"line\">            Set&lt;SelectionKey&gt; readyKeys = selector.selectedKeys();</span><br><span class=\"line\">            readyKeys.forEach(key -&gt; &#123;</span><br><span class=\"line\">                        try &#123;</span><br><span class=\"line\">                            //检查时间 是否是一个新的 可以被接受的链接</span><br><span class=\"line\">                            if (key.isAcceptable()) &#123;</span><br><span class=\"line\">                                ServerSocketChannel server = (ServerSocketChannel) key.channel();</span><br><span class=\"line\">                                SocketChannel client = server.accept();</span><br><span class=\"line\">                                if (null == client) &#123;</span><br><span class=\"line\">                                    return;</span><br><span class=\"line\">                                &#125;</span><br><span class=\"line\">                                client.configureBlocking(false);</span><br><span class=\"line\">                                client.register(selector, SelectionKey.OP_WRITE | SelectionKey.OP_READ, msg.duplicate());</span><br><span class=\"line\">                                System.out.println(&quot;accept from &quot; + client);</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                            //检查socket是否准备好写数据</span><br><span class=\"line\">                            if (key.isWritable()) &#123;</span><br><span class=\"line\">                                SocketChannel client = (SocketChannel) key.channel();</span><br><span class=\"line\">                                ByteBuffer byteBuffer = (ByteBuffer) key.attachment();</span><br><span class=\"line\">                                while (byteBuffer.hasRemaining()) &#123;</span><br><span class=\"line\">                                    if (client.write(byteBuffer) == 0) &#123;</span><br><span class=\"line\">                                        break;</span><br><span class=\"line\">                                    &#125;</span><br><span class=\"line\">                                &#125;</span><br><span class=\"line\">                                client.close();</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                        &#125; catch (IOException e) &#123;</span><br><span class=\"line\">                            key.cancel();</span><br><span class=\"line\">                            try &#123;</span><br><span class=\"line\">                                key.channel().close();</span><br><span class=\"line\">                            &#125; catch (IOException e1) &#123;</span><br><span class=\"line\">                                e1.printStackTrace();</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">            );</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"netty-oio\"><a href=\"#netty-oio\" class=\"headerlink\" title=\"netty oio\"></a>netty oio</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.ming;</span><br><span class=\"line\"></span><br><span class=\"line\">import io.netty.bootstrap.ServerBootstrap;</span><br><span class=\"line\">import io.netty.buffer.ByteBuf;</span><br><span class=\"line\">import io.netty.buffer.Unpooled;</span><br><span class=\"line\">import io.netty.channel.*;</span><br><span class=\"line\">import io.netty.channel.oio.OioEventLoopGroup;</span><br><span class=\"line\">import io.netty.channel.socket.SocketChannel;</span><br><span class=\"line\">import io.netty.channel.socket.oio.OioServerSocketChannel;</span><br><span class=\"line\">import io.netty.util.CharsetUtil;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.net.InetSocketAddress;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * netty oio 实现</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @author ming</span><br><span class=\"line\"> * @date 2018-04-16 15:56</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class NettyOio &#123;</span><br><span class=\"line\">    public static void main(String[] args) throws InterruptedException &#123;</span><br><span class=\"line\">        new NettyOio().Start(20000);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * netty oio bootstrap</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @author ming</span><br><span class=\"line\">     * @date 2018-04-16 15:56</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public void Start(int port) throws InterruptedException &#123;</span><br><span class=\"line\">        final ByteBuf byteBuf = Unpooled.unreleasableBuffer(Unpooled.copiedBuffer(&quot;hi ming &quot;, CharsetUtil.UTF_8));</span><br><span class=\"line\">        // 使用 oio 事件循环处理</span><br><span class=\"line\">        EventLoopGroup eventLoopGroup = new OioEventLoopGroup();</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            ServerBootstrap serverBootstrap = new ServerBootstrap();</span><br><span class=\"line\">            serverBootstrap.group(eventLoopGroup)</span><br><span class=\"line\">                    //使用oio 渠道</span><br><span class=\"line\">                    .channel(OioServerSocketChannel.class)</span><br><span class=\"line\">                    .localAddress(new InetSocketAddress(port))</span><br><span class=\"line\">                    .childHandler(new ChannelInitializer&lt;SocketChannel&gt;() &#123;</span><br><span class=\"line\">                        @Override</span><br><span class=\"line\">                        protected void initChannel(SocketChannel ch) throws Exception &#123;</span><br><span class=\"line\">                            ch.pipeline().addLast(new ChannelInboundHandlerAdapter() &#123;</span><br><span class=\"line\">                                @Override</span><br><span class=\"line\">                                public void channelActive(ChannelHandlerContext ctx) throws Exception &#123;</span><br><span class=\"line\">                                    System.out.println(&quot;accept &quot; + ctx);</span><br><span class=\"line\">                                    //输出一条信息 关闭 渠道</span><br><span class=\"line\">                                    ctx.writeAndFlush(byteBuf.duplicate())</span><br><span class=\"line\">                                            .addListener(ChannelFutureListener.CLOSE);</span><br><span class=\"line\">                                &#125;</span><br><span class=\"line\">                            &#125;);</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;);</span><br><span class=\"line\">            //绑定服务器</span><br><span class=\"line\">            ChannelFuture future = serverBootstrap.bind().sync();</span><br><span class=\"line\">            future.channel().closeFuture().sync();</span><br><span class=\"line\">        &#125; catch (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; finally &#123;</span><br><span class=\"line\">            eventLoopGroup.shutdownGracefully().sync();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"netty-nio\"><a href=\"#netty-nio\" class=\"headerlink\" title=\"netty nio\"></a>netty nio</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.ming;</span><br><span class=\"line\"></span><br><span class=\"line\">import io.netty.bootstrap.ServerBootstrap;</span><br><span class=\"line\">import io.netty.buffer.ByteBuf;</span><br><span class=\"line\">import io.netty.buffer.Unpooled;</span><br><span class=\"line\">import io.netty.channel.*;</span><br><span class=\"line\">import io.netty.channel.nio.NioEventLoopGroup;</span><br><span class=\"line\">import io.netty.channel.socket.SocketChannel;</span><br><span class=\"line\">import io.netty.channel.socket.nio.NioServerSocketChannel;</span><br><span class=\"line\">import io.netty.util.CharsetUtil;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.net.InetSocketAddress;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * netty nio 实现</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @author ming</span><br><span class=\"line\"> * @date 2018-04-16 16:11</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class NettyNio &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) throws InterruptedException &#123;</span><br><span class=\"line\">        new NettyNio().Start(20000);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 启动 netty nio server</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @author ming</span><br><span class=\"line\">     * @date 2018-04-16 16:12</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public void Start(int port) throws InterruptedException &#123;</span><br><span class=\"line\">        final ByteBuf byteBuf = Unpooled.unreleasableBuffer(Unpooled.copiedBuffer(&quot;hi ming &quot;, CharsetUtil.UTF_8));</span><br><span class=\"line\">        //使用 nio 事件循环处理器</span><br><span class=\"line\">        EventLoopGroup eventLoopGroup = new NioEventLoopGroup();</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            ServerBootstrap serverBootstrap = new ServerBootstrap();</span><br><span class=\"line\">            serverBootstrap.group(eventLoopGroup)</span><br><span class=\"line\">                    //使用nio渠道</span><br><span class=\"line\">                    .channel(NioServerSocketChannel.class)</span><br><span class=\"line\">                    .localAddress(new InetSocketAddress(port))</span><br><span class=\"line\">                    .childHandler(new ChannelInitializer&lt;SocketChannel&gt;() &#123;</span><br><span class=\"line\">                        @Override</span><br><span class=\"line\">                        protected void initChannel(SocketChannel ch) throws Exception &#123;</span><br><span class=\"line\">                            ch.pipeline().addLast(new ChannelInboundHandlerAdapter() &#123;</span><br><span class=\"line\">                                @Override</span><br><span class=\"line\">                                public void channelActive(ChannelHandlerContext ctx) throws Exception &#123;</span><br><span class=\"line\">                                    System.out.println(&quot;accept &quot; + ctx);</span><br><span class=\"line\">                                    ctx.writeAndFlush(byteBuf.duplicate()).addListener(ChannelFutureListener.CLOSE);</span><br><span class=\"line\">                                &#125;</span><br><span class=\"line\">                            &#125;);</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;);</span><br><span class=\"line\">            ChannelFuture future = serverBootstrap.bind().sync();</span><br><span class=\"line\">            future.channel().closeFuture().sync();</span><br><span class=\"line\">        &#125; catch (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; finally &#123;</span><br><span class=\"line\">            eventLoopGroup.shutdownGracefully().sync();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"epoll\"><a href=\"#epoll\" class=\"headerlink\" title=\"epoll\"></a>epoll</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.ming;</span><br><span class=\"line\"></span><br><span class=\"line\">import io.netty.bootstrap.ServerBootstrap;</span><br><span class=\"line\">import io.netty.buffer.ByteBuf;</span><br><span class=\"line\">import io.netty.buffer.Unpooled;</span><br><span class=\"line\">import io.netty.channel.*;</span><br><span class=\"line\">import io.netty.channel.epoll.EpollEventLoopGroup;</span><br><span class=\"line\">import io.netty.channel.epoll.EpollServerSocketChannel;</span><br><span class=\"line\">import io.netty.channel.socket.SocketChannel;</span><br><span class=\"line\">import io.netty.util.CharsetUtil;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.net.InetSocketAddress;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 基于linux 的Epoll 非阻塞 方式实现的 io传输</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @author ming</span><br><span class=\"line\"> * @date 2018-04-16 17:28</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class NettyEpoll &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) throws InterruptedException &#123;</span><br><span class=\"line\">        new NettyEpoll().Start(20000);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 启动 基于 epoll 的server</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @author ming</span><br><span class=\"line\">     * @date 2018-04-16 17:29</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public void Start(int port) throws InterruptedException &#123;</span><br><span class=\"line\">        final ByteBuf byteBuf = Unpooled.unreleasableBuffer(Unpooled.copiedBuffer(&quot;hi ming &quot;, CharsetUtil.UTF_8));</span><br><span class=\"line\">        //使用epoll</span><br><span class=\"line\">        EventLoopGroup eventLoopGroup = new EpollEventLoopGroup();</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            ServerBootstrap serverBootstrap = new ServerBootstrap();</span><br><span class=\"line\">            serverBootstrap.group(eventLoopGroup)</span><br><span class=\"line\">                    .channel(EpollServerSocketChannel.class)</span><br><span class=\"line\">                    .localAddress(new InetSocketAddress(port))</span><br><span class=\"line\">                    .childHandler(new ChannelInitializer&lt;SocketChannel&gt;() &#123;</span><br><span class=\"line\">                        @Override</span><br><span class=\"line\">                        protected void initChannel(SocketChannel ch) throws Exception &#123;</span><br><span class=\"line\">                            ch.pipeline().addLast(new ChannelInboundHandlerAdapter() &#123;</span><br><span class=\"line\">                                @Override</span><br><span class=\"line\">                                public void channelActive(ChannelHandlerContext ctx) throws Exception &#123;</span><br><span class=\"line\">                                    System.out.println(&quot;accept&quot; + ctx);</span><br><span class=\"line\">                                    ctx.writeAndFlush(byteBuf.duplicate()).addListener(ChannelFutureListener.CLOSE);</span><br><span class=\"line\">                                &#125;</span><br><span class=\"line\">                            &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;);</span><br><span class=\"line\">            ChannelFuture future = serverBootstrap.bind().sync();</span><br><span class=\"line\">            future.channel().closeFuture().sync();</span><br><span class=\"line\">        &#125; catch (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; finally &#123;</span><br><span class=\"line\">            eventLoopGroup.shutdownGracefully().sync();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"jvm-local\"><a href=\"#jvm-local\" class=\"headerlink\" title=\"jvm local\"></a>jvm local</h4><p>1:jvm local server<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.ming.JvmLocal;</span><br><span class=\"line\"></span><br><span class=\"line\">import io.netty.bootstrap.ServerBootstrap;</span><br><span class=\"line\">import io.netty.buffer.ByteBuf;</span><br><span class=\"line\">import io.netty.buffer.Unpooled;</span><br><span class=\"line\">import io.netty.channel.*;</span><br><span class=\"line\">import io.netty.channel.local.LocalAddress;</span><br><span class=\"line\">import io.netty.channel.local.LocalChannel;</span><br><span class=\"line\">import io.netty.channel.local.LocalEventLoopGroup;</span><br><span class=\"line\">import io.netty.channel.local.LocalServerChannel;</span><br><span class=\"line\">import io.netty.util.CharsetUtil;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * netty 基于jvm内部本地通信 server实现</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @author ming</span><br><span class=\"line\"> * @date 2018-04-17 13:45</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class NettyJvmLocalServer &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 启动方法</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @author ming</span><br><span class=\"line\">     * @date 2018-04-17 13:50</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public void Start() throws InterruptedException &#123;</span><br><span class=\"line\">        final ByteBuf byteBuf = Unpooled.unreleasableBuffer(Unpooled.copiedBuffer(&quot;hi ming &quot;, CharsetUtil.UTF_8));</span><br><span class=\"line\">        //注册 local 事件处理器</span><br><span class=\"line\">        EventLoopGroup eventLoopGroup = new LocalEventLoopGroup();</span><br><span class=\"line\"></span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            ServerBootstrap serverBootstrap = new ServerBootstrap();</span><br><span class=\"line\">            serverBootstrap.group(eventLoopGroup)</span><br><span class=\"line\">                    //使用Local server channel</span><br><span class=\"line\">                    .channel(LocalServerChannel.class)</span><br><span class=\"line\">                    //使用 local 地址</span><br><span class=\"line\">                    .localAddress(new LocalAddress(NettyJvmLocal.LOCAL_ADDRESS))</span><br><span class=\"line\">                    .childHandler(new ChannelInitializer&lt;LocalChannel&gt;() &#123;</span><br><span class=\"line\">                        @Override</span><br><span class=\"line\">                        protected void initChannel(LocalChannel ch) throws Exception &#123;</span><br><span class=\"line\">                            ch.pipeline().addLast(new ChannelInboundHandlerAdapter() &#123;</span><br><span class=\"line\">                                @Override</span><br><span class=\"line\">                                public void channelActive(ChannelHandlerContext ctx) throws Exception &#123;</span><br><span class=\"line\">                                    System.out.println(&quot;accept &quot; + ctx);</span><br><span class=\"line\">                                    ctx.writeAndFlush(byteBuf).addListener(ChannelFutureListener.CLOSE);</span><br><span class=\"line\">                                &#125;</span><br><span class=\"line\">                            &#125;);</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;);</span><br><span class=\"line\">            ChannelFuture future = serverBootstrap.bind().sync();</span><br><span class=\"line\">            future.channel().closeFuture().sync();</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125; catch (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; finally &#123;</span><br><span class=\"line\">            eventLoopGroup.shutdownGracefully().sync();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p>\n<p>2: jvm local client<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.ming.JvmLocal;</span><br><span class=\"line\"></span><br><span class=\"line\">import io.netty.bootstrap.Bootstrap;</span><br><span class=\"line\">import io.netty.buffer.ByteBuf;</span><br><span class=\"line\">import io.netty.buffer.Unpooled;</span><br><span class=\"line\">import io.netty.channel.*;</span><br><span class=\"line\">import io.netty.channel.local.LocalAddress;</span><br><span class=\"line\">import io.netty.channel.local.LocalChannel;</span><br><span class=\"line\">import io.netty.channel.local.LocalEventLoopGroup;</span><br><span class=\"line\">import io.netty.util.CharsetUtil;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * netty 基于jvm内部本地通信 client 实现</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @author ming</span><br><span class=\"line\"> * @date 2018-04-17 13:45</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class NettyJvmLocalClient &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 启动方法</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @author ming</span><br><span class=\"line\">     * @date 2018-04-17 13:50</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public void Start() throws InterruptedException &#123;</span><br><span class=\"line\">        final ByteBuf byteBuf = Unpooled.unreleasableBuffer(Unpooled.copiedBuffer(&quot;hi ming client&quot;, CharsetUtil.UTF_8));</span><br><span class=\"line\">        //注册 local 事件处理器</span><br><span class=\"line\">        EventLoopGroup eventLoopGroup = new LocalEventLoopGroup();</span><br><span class=\"line\"></span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            Bootstrap bootstrap = new Bootstrap();</span><br><span class=\"line\">            bootstrap.group(eventLoopGroup)</span><br><span class=\"line\">                    //使用 localChannel渠道</span><br><span class=\"line\">                    .channel(LocalChannel.class)</span><br><span class=\"line\">                    //注册 local模式的地址</span><br><span class=\"line\">                    .remoteAddress(new LocalAddress(NettyJvmLocal.LOCAL_ADDRESS))</span><br><span class=\"line\">                    .handler(new ChannelInitializer&lt;LocalChannel&gt;() &#123;</span><br><span class=\"line\">                        @Override</span><br><span class=\"line\">                        protected void initChannel(LocalChannel ch) throws Exception &#123;</span><br><span class=\"line\">                            ch.pipeline().addLast(new ChannelInboundHandlerAdapter() &#123;</span><br><span class=\"line\">                                @Override</span><br><span class=\"line\">                                public void channelActive(ChannelHandlerContext ctx) throws Exception &#123;</span><br><span class=\"line\">                                    System.out.println(&quot;connect &quot; + ctx);</span><br><span class=\"line\">                                    ctx.writeAndFlush(byteBuf).addListener(ChannelFutureListener.CLOSE);</span><br><span class=\"line\">                                &#125;</span><br><span class=\"line\">                            &#125;);</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;);</span><br><span class=\"line\">            ChannelFuture future = bootstrap.connect().sync();</span><br><span class=\"line\">            future.channel().closeFuture().sync();</span><br><span class=\"line\">        &#125; catch (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; finally &#123;</span><br><span class=\"line\">            eventLoopGroup.shutdownGracefully().sync();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p>\n<p>3:jvm local demo<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.ming.JvmLocal;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 调用 netty jvm  local server 和client 的客户端</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @author ming</span><br><span class=\"line\"> * @date 2018-04-17 14:09</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class NettyJvmLocal &#123;</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 本地地址</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @author ming</span><br><span class=\"line\">     * @date 2018-04-17 14:16</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static final String LOCAL_ADDRESS = &quot;ming&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) throws InterruptedException &#123;</span><br><span class=\"line\">        // 启动 server</span><br><span class=\"line\">        new Thread(() -&gt; &#123;</span><br><span class=\"line\">            try &#123;</span><br><span class=\"line\">                new NettyJvmLocalServer().Start();</span><br><span class=\"line\">            &#125; catch (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;).start();</span><br><span class=\"line\"></span><br><span class=\"line\">        //暂停 线程 1s 等待server 启动完毕</span><br><span class=\"line\">        Thread.sleep(1000L);</span><br><span class=\"line\"></span><br><span class=\"line\">        //启动client</span><br><span class=\"line\">        new Thread(() -&gt; &#123;</span><br><span class=\"line\">            try &#123;</span><br><span class=\"line\">                new NettyJvmLocalClient().Start();</span><br><span class=\"line\">            &#125; catch (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p>\n<h3 id=\"传输\"><a href=\"#传输\" class=\"headerlink\" title=\"传输\"></a>传输</h3><p>传输是基于channel 的  </p>\n<p>channel是有顺序的 因为继承 java.lang.Comparable<br>channelHandler:常规用途  </p>\n<ul>\n<li>数据格式转换   </li>\n<li>异常处理  </li>\n<li>提供channel 状态变更通知  </li>\n<li>提供channel 注册或者注销 EventLoop中的通知  </li>\n<li>提供用户自定义事件通知  </li>\n</ul>\n<p>channel 线程安全 并且保证顺序发送   </p>\n<h3 id=\"内置传输手段\"><a href=\"#内置传输手段\" class=\"headerlink\" title=\"内置传输手段\"></a>内置传输手段</h3><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">名称</th>\n<th style=\"text-align:left\">包</th>\n<th style=\"text-align:left\">备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">NIO</td>\n<td style=\"text-align:left\">io.netty.channel.socket.nio</td>\n<td style=\"text-align:left\">使用java nio</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Epoll</td>\n<td style=\"text-align:left\">io.netty.channel.epoll</td>\n<td style=\"text-align:left\">基于jni驱动的epoll()和非阻塞io 只能在linux上支持 比NIO快 并且完全非阻塞</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">OIO</td>\n<td style=\"text-align:left\">io.netty.channel.socket.oio</td>\n<td style=\"text-align:left\">使用java net包 阻塞流</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Local</td>\n<td style=\"text-align:left\">io.netty.channel.local</td>\n<td style=\"text-align:left\">直接使用jvm内部管道通信</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Embedded</td>\n<td style=\"text-align:left\">io.netty.channel.embedded</td>\n<td style=\"text-align:left\">测试channelHandler使用的不依赖网络</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"nio-非阻塞-io\"><a href=\"#nio-非阻塞-io\" class=\"headerlink\" title=\"nio  非阻塞 io\"></a>nio  非阻塞 io</h3><p>基于selector<br>状态变化:  </p>\n<ul>\n<li>新的channel 已经被接受并且准备就绪   </li>\n<li>channel 链接完成  </li>\n<li>channel 有就绪的可供读取的数据  </li>\n<li>channel 可用于写数据<br>通过java.nio.channels.SelectionKey定义的位 组合成一组应用程序正在请求通知的状态变化集合<br>|名称|描述|<br>|:–|:–|<br>|OP_ACCEPT|请求接受新链接创建channel获得通知|<br>|OP_CONNECT|请求建立第一个链接时候获得通知|<br>|OP_READ|请求数据就绪 可从channel 读取时获得通知|<br>|OP_WRITE|请求当可以向 channel中写入数据时候 获得通知、|  </li>\n</ul>\n<h3 id=\"Epoll-基于linux的本地非阻塞传输\"><a href=\"#Epoll-基于linux的本地非阻塞传输\" class=\"headerlink\" title=\"Epoll 基于linux的本地非阻塞传输\"></a>Epoll 基于linux的本地非阻塞传输</h3><p>在linux 2.5.44内核引入的功能   比POSIX 的select poll 更加牛逼<br>不考虑 夸平台  只考虑linux 的话  epoll 直接走起     </p>\n<h3 id=\"oio-阻塞io\"><a href=\"#oio-阻塞io\" class=\"headerlink\" title=\"oio 阻塞io\"></a>oio 阻塞io</h3><p>基于jdk  java.net包的阻塞io<br>是netty 为了兼容 可能存在的老旧的系统 保留的 oio支持   </p>\n<h3 id=\"基于jvm内部的local传输\"><a href=\"#基于jvm内部的local传输\" class=\"headerlink\" title=\"基于jvm内部的local传输\"></a>基于jvm内部的local传输</h3><p>在同一个jvm中运行的客户端和服务端程序直接的异步通信使用这种 可以大幅度提高速度   </p>\n<h3 id=\"总结：\"><a href=\"#总结：\" class=\"headerlink\" title=\"总结：\"></a>总结：</h3><p>java实现oio和nio的代码 提供的api 区别比较大<br>oio 不需要selector 直接server socket接受 处理<br>nio 通过selector 协调 分配给相应的 socket 处理<br>netty 实现oio和nio 提供的api 基本相同 就是在使用发送方式和发送渠道时候 需要保持一致<br>例如 使用NioEventLoopGroup 那么传输渠道必须是NioServerChannelSocket<br>使用OioEventLoopGroup那么必须使用OioServerChannelSocket   </p>\n<h3 id=\"传输支持的协议\"><a href=\"#传输支持的协议\" class=\"headerlink\" title=\"传输支持的协议\"></a>传输支持的协议</h3><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">传输类型</th>\n<th style=\"text-align:left\">支持类型</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">NIO</td>\n<td style=\"text-align:left\">tcp、udp、sctp、udt</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Epoll(linux)</td>\n<td style=\"text-align:left\">tcp、udp</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">OIO</td>\n<td style=\"text-align:left\">tcp、udp、sctp、udt</td>\n</tr>\n</tbody>\n</table>\n<p>sctp 增强版本的tcp<br>udt  增强版本的udp  </p>\n<h3 id=\"传输类型选择\"><a href=\"#传输类型选择\" class=\"headerlink\" title=\"传输类型选择:\"></a>传输类型选择:</h3><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">需求类型</th>\n<th style=\"text-align:left\">推荐传输类型</th>\n<th style=\"text-align:left\">备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">非阻塞代码、常规套路</td>\n<td style=\"text-align:left\">nio、或者epoll</td>\n<td style=\"text-align:left\">如果不考虑跨平台等功能 并且只考虑linux 平台运行 那么 epoll 是肯定的 毕竟是个特殊优化的非阻塞模式</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">阻塞代码</td>\n<td style=\"text-align:left\">oio</td>\n<td style=\"text-align:left\">处理遗留代码的时候选择</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">同jvm通信</td>\n<td style=\"text-align:left\">jvm local</td>\n<td style=\"text-align:left\">在同一个jvm中 进行通信的话 选择jvm local 可以直接省掉网络io的开销</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">测试ChannelHandler</td>\n<td style=\"text-align:left\">Embedded</td>\n<td style=\"text-align:left\">只有写单元测试用用</td>\n</tr>\n</tbody>\n</table>\n<p>零拷贝:<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">零拷贝(zero-copy)是一种目前只有在使用 NIO 和 Epoll 传输时才可使用的特性。它使你可以快速</span><br><span class=\"line\">高效地将数据从文件系统移动到网络接口,而不需要将其从内核空间复制到用户空间,其在像 FTP 或者</span><br><span class=\"line\">HTTP 这样的协议中可以显著地提升性能。但是,并不是所有的操作系统都支持这一特性。特别地,它对</span><br><span class=\"line\">于实现了数据加密或者压缩的文件系统是不可用的——只能传输文件的原始内容。反过来说,传输已被</span><br><span class=\"line\">加密的文件则不是问题。</span><br></pre></td></tr></table></figure><p></p>"},{"title":"使用阿里云的oss+cdn搭建高速访问的静态博客","comments":1,"abbrlink":"3c3d59e1","date":"2018-02-09T05:42:02.000Z","_content":"\n之前一直想搭建一个博客 但是一直没找到便宜 并且访问速度快的方案  前几种方案\n1:git pages + cdn    \n国内访问速度简直吃屎  不知道 同行是如何忍受的 cdn从源站拉取资源的时候 慢到无法忍受    \n2:coding pages+cdn  \n不想用 coding pages  还不如直接用git pages   \n3: 购买vps或者静态托管服务器   \n博客初期完全用不起   太特么贵了  穷吊 用不起   \n\n综上所述 我需要的博客大致需要  \n1:源站访问速度快     \n2:cdn 好用    \n3:域名     \n4:https  http2访问  \n5:价格相对便宜     \n6:管理相对方便   \n7:增加ca证书方便\n\n最终选择方案 \n全部使用阿里云的相关资源 \n域名：万网\ncdn:阿里云 cdn \n源站:使用阿里云的oss对象存储\n```\noss  原本只是 阿里云的一个放文件的一个功能 后来他支持设定首页 就可以用来托管静态页面 \n速度不用说 肯定快 而且支持 https   \n```\nca证书:阿里云 ca免费赛门铁克证书 \n静态博客:hexo + next主题\n\n其实这些主要是选择  具体如何使用 直接操作阿里云控制台就是的 没啥难度 \n\n遇到的麻烦的点:\n1: oss 存储hexo生成的静态资源 路由问题\n由于oss 里面 文件夹也是可访问的一种资源 这就导致 hexo初始生成的路由 例如/tags/ming/  这个时候他访问的是oss里面的/tags/ming/ 文件夹 然后是空白       \n解决办法: 修改站点配置_config.yaml 中permalink参数 \n我是用abbrlink 来重写url了 如果不用 就是在hexo的permalink中 后面加上.html 即可\n```\n# 使用abbrlink 来重写固定url  https://segmentfault.com/a/1190000005799711\npermalink: ming/:abbrlink.html\npermalink_defaults:\n```\n标签、归档、分页相关路由   调整\n修改 当前目录下node_modules/hexo/lib/plugins/helper/index.js 中关于 标签、归档、分页相关的插件\n```\n'use strict';\n\nmodule.exports = function (ctx) {\n。。。\n\n//重写 归档 js  增加index.html 路径 配合 oss 访问\n//    helper.register('list_categories', require('./list_categories'));\n    helper.register('list_categories', require('./ming_list_categories'));\n    \n。。。   \n\n//重写分页相关地址 配合oss\n//    helper.register('paginator', require('./paginator'));\n    helper.register('paginator', require('./ming_paginator'));\n    \n。。。\n\n//  var tagcloud = require('./tagcloud');\n//  helper.register('tagcloud', tagcloud);\n//  helper.register('tag_cloud', tagcloud);\n    //引入 自定义 tag cloud 标签  修改生成路径的函数 适应oss\n    var ming_tag = require('./ming_tag')\n    helper.register('tagcloud', ming_tag);\n    helper.register('tag_cloud', ming_tag);\n。。。\n\n```\n在index.js目录下\n新增下面三个文件 \n\n归档插件的实现\n新增 ming_list_categories.js文件\n复制如下内容进去\n```\n'use strict';\n\nfunction listCategoriesHelper(categories, options) {\n  if (!options && (!categories || !categories.hasOwnProperty('length'))) {\n    options = categories;\n    categories = this.site.categories;\n  }\n\n  if (!categories || !categories.length) return '';\n  options = options || {};\n\n  var style = options.hasOwnProperty('style') ? options.style : 'list';\n  var showCount = options.hasOwnProperty('show_count') ? options.show_count : true;\n  var className = options.class || 'category';\n  var depth = options.depth ? parseInt(options.depth, 10) : 0;\n  var orderby = options.orderby || 'name';\n  var order = options.order || 1;\n  var transform = options.transform;\n  var separator = options.hasOwnProperty('separator') ? options.separator : ', ';\n  var showCurrent = options.show_current || false;\n    // 添加 /index.html 配合oss 访问\n    //var suffix = options.suffix || '';\n  var suffix = \"index.html\";\n  var childrenIndicator = options.hasOwnProperty('children_indicator') ? options.children_indicator : false;\n  var result = '';\n  var self = this;\n\n  function prepareQuery(parent) {\n    var query = {};\n\n    if (parent) {\n      query.parent = parent;\n    } else {\n      query.parent = {$exists: false};\n    }\n\n    return categories.find(query).sort(orderby, order).filter(function(cat) {\n      return cat.length;\n    });\n  }\n\n  function hierarchicalList(level, parent) {\n    var result = '';\n\n    prepareQuery(parent).forEach(function(cat, i) {\n      var child;\n      if (!depth || level + 1 < depth) {\n        child = hierarchicalList(level + 1, cat._id);\n      }\n\n      var isCurrent = false;\n      if (showCurrent && self.page) {\n        for (var j = 0; j < cat.length; j++) {\n          var post = cat.posts.data[j];\n          if (post && post._id === self.page._id) {\n            isCurrent = true;\n            break;\n          }\n        }\n\n        // special case: category page\n        if (!isCurrent && self.page.base) {\n          if (self.page.base.indexOf(cat.path) === 0) {\n            isCurrent = true;\n          }\n        }\n      }\n\n      var additionalClassName = '';\n      if (child && childrenIndicator) {\n        additionalClassName = ' ' + childrenIndicator;\n      }\n\n      result += '<li class=\"' + className + '-list-item' + additionalClassName + '\">';\n      result += '<a class=\"' + className + '-list-link' + (isCurrent ? ' current' : '') + '\" href=\"' + self.url_for(cat.path) + suffix + '\">';\n      result += transform ? transform(cat.name) : cat.name;\n      result += '</a>';\n\n      if (showCount) {\n        result += '<span class=\"' + className + '-list-count\">' + cat.length + '</span>';\n      }\n\n      if (child) {\n        result += '<ul class=\"' + className + '-list-child\">' + child + '</ul>';\n      }\n\n      result += '</li>';\n    });\n\n    return result;\n  }\n\n  function flatList(level, parent) {\n    var result = '';\n\n    prepareQuery(parent).forEach(function(cat, i) {\n      if (i || level) result += separator;\n\n      result += '<a class=\"' + className + '-link\" href=\"' + self.url_for(cat.path) + suffix + '\">';\n      result += transform ? transform(cat.name) : cat.name;\n\n      if (showCount) {\n        result += '<span class=\"' + className + '-count\">' + cat.length + '</span>';\n      }\n\n      result += '</a>';\n\n      if (!depth || level + 1 < depth) {\n        result += flatList(level + 1, cat._id);\n      }\n    });\n\n    return result;\n  }\n\n  if (style === 'list') {\n    result += '<ul class=\"' + className + '-list\">' + hierarchicalList(0) + '</ul>';\n  } else {\n    result += flatList(0);\n  }\n\n  return result;\n}\n\nmodule.exports = listCategoriesHelper;\n```\n\n分页插件的实现\n新增 ming_paginator.js文件\n复制如下内容进去\n```\n'use strict';\n\nfunction paginatorHelper(options) {\n  options = options || {};\n\n  var current = options.current || this.page.current || 0;\n  var total = options.total || this.page.total || 1;\n  var endSize = options.hasOwnProperty('end_size') ? +options.end_size : 1;\n  var midSize = options.hasOwnProperty('mid_size') ? +options.mid_size : 2;\n  var space = options.hasOwnProperty('space') ? options.space : '&hellip;';\n  var base = options.base || this.page.base || '';\n  var format = options.format || this.config.pagination_dir + '/%d/';\n  var prevText = options.prev_text || 'Prev';\n  var nextText = options.next_text || 'Next';\n  var prevNext = options.hasOwnProperty('prev_next') ? options.prev_next : true;\n  var transform = options.transform;\n  var self = this;\n  var result = '';\n  var i;\n  //配合 oss 使用index.html\n  var suffix = \"index.html\";\n\n\n    if (!current) return '';\n\n  var currentPage = '<span class=\"page-number current\">' +\n    (transform ? transform(current) : current) +\n    '</span>';\n\n  function link(i) {\n    return self.url_for(i === 1 ? base : base + format.replace('%d', i));\n  }\n\n  function pageLink(i) {\n    return '<a class=\"page-number\" href=\"' + link(i) + suffix +'\">' +\n      (transform ? transform(i) : i) +\n      '</a>';\n  }\n\n  // Display the link to the previous page\n  if (prevNext && current > 1) {\n    result += '<a class=\"extend prev\" rel=\"prev\" href=\"' + link(current - 1) + suffix +'\">' + prevText + '</a>';\n  }\n\n  if (options.show_all) {\n    // Display pages on the left side of the current page\n    for (i = 1; i < current; i++) {\n      result += pageLink(i);\n    }\n\n    // Display the current page\n    result += currentPage;\n\n    // Display pages on the right side of the current page\n    for (i = current + 1; i <= total; i++) {\n      result += pageLink(i);\n    }\n  } else {\n    // It's too complicated. May need refactor.\n    var leftEnd = current <= endSize ? current - 1 : endSize;\n    var rightEnd = total - current <= endSize ? current + 1 : total - endSize + 1;\n    var leftMid = current - midSize <= endSize ? leftEnd + 1 : current - midSize;\n    var rightMid = current + midSize + endSize > total ? rightEnd - 1 : current + midSize;\n    var spaceHtml = '<span class=\"space\">' + space + '</span>';\n\n    // Display pages on the left edge\n    for (i = 1; i <= leftEnd; i++) {\n      result += pageLink(i);\n    }\n\n    // Display spaces between edges and middle pages\n    if (space && current - endSize - midSize > 1) {\n      result += spaceHtml;\n    }\n\n    // Display left middle pages\n    if (leftMid > leftEnd) {\n      for (i = leftMid; i < current; i++) {\n        result += pageLink(i);\n      }\n    }\n\n    // Display the current page\n    result += currentPage;\n\n    // Display right middle pages\n    if (rightMid < rightEnd) {\n      for (i = current + 1; i <= rightMid; i++) {\n        result += pageLink(i);\n      }\n    }\n\n    // Display spaces between edges and middle pages\n    if (space && total - endSize - midSize > current) {\n      result += spaceHtml;\n    }\n\n    // Dispaly pages on the right edge\n    for (i = rightEnd; i <= total; i++) {\n      result += pageLink(i);\n    }\n  }\n\n  // Display the link to the next page\n  if (prevNext && current < total) {\n    result += '<a class=\"extend next\" rel=\"next\" href=\"' + link(current + 1) + suffix+ '\">' + nextText + '</a>';\n  }\n\n  return result;\n}\n\nmodule.exports = paginatorHelper;\n```\n\n\n标签插件的实现\n新增 ming_tag.js文件\n复制如下内容进去\n```\n'use strict';\n\n// https://github.com/imathis/hsl-picker/blob/master/assets/javascripts/modules/color.coffee\nvar rHex3 = /^#([0-9a-f]{3})$/;\nvar rHex6 = /^#([0-9a-f]{6})$/;\nvar rRGB = /^rgba?\\(\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})\\s*,?\\s*(0?\\.?\\d+)?\\s*\\)$/;\nvar rHSL = /^hsla?\\(\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})%\\s*,\\s*(\\d{1,3})%\\s*,?\\s*(0?\\.?\\d+)?\\s*\\)$/;\n\n// http://www.w3.org/TR/css3-color/#svg-color\nvar colorNames = {\n    aliceblue: {r: 240, g: 248, b: 255, a: 1},\n    antiquewhite: {r: 250, g: 235, b: 215, a: 1},\n    aqua: {r: 0, g: 255, b: 255, a: 1},\n    aquamarine: {r: 127, g: 255, b: 212, a: 1},\n    azure: {r: 240, g: 255, b: 255, a: 1},\n    beige: {r: 245, g: 245, b: 220, a: 1},\n    bisque: {r: 255, g: 228, b: 196, a: 1},\n    black: {r: 0, g: 0, b: 0, a: 1},\n    blanchedalmond: {r: 255, g: 235, b: 205, a: 1},\n    blue: {r: 0, g: 0, b: 255, a: 1},\n    blueviolet: {r: 138, g: 43, b: 226, a: 1},\n    brown: {r: 165, g: 42, b: 42, a: 1},\n    burlywood: {r: 222, g: 184, b: 135, a: 1},\n    cadetblue: {r: 95, g: 158, b: 160, a: 1},\n    chartreuse: {r: 127, g: 255, b: 0, a: 1},\n    chocolate: {r: 210, g: 105, b: 30, a: 1},\n    coral: {r: 255, g: 127, b: 80, a: 1},\n    cornflowerblue: {r: 100, g: 149, b: 237, a: 1},\n    cornsilk: {r: 255, g: 248, b: 220, a: 1},\n    crimson: {r: 220, g: 20, b: 60, a: 1},\n    cyan: {r: 0, g: 255, b: 255, a: 1},\n    darkblue: {r: 0, g: 0, b: 139, a: 1},\n    darkcyan: {r: 0, g: 139, b: 139, a: 1},\n    darkgoldenrod: {r: 184, g: 134, b: 11, a: 1},\n    darkgray: {r: 169, g: 169, b: 169, a: 1},\n    darkgreen: {r: 0, g: 100, b: 0, a: 1},\n    darkgrey: {r: 169, g: 169, b: 169, a: 1},\n    darkkhaki: {r: 189, g: 183, b: 107, a: 1},\n    darkmagenta: {r: 139, g: 0, b: 139, a: 1},\n    darkolivegreen: {r: 85, g: 107, b: 47, a: 1},\n    darkorange: {r: 255, g: 140, b: 0, a: 1},\n    darkorchid: {r: 153, g: 50, b: 204, a: 1},\n    darkred: {r: 139, g: 0, b: 0, a: 1},\n    darksalmon: {r: 233, g: 150, b: 122, a: 1},\n    darkseagreen: {r: 143, g: 188, b: 143, a: 1},\n    darkslateblue: {r: 72, g: 61, b: 139, a: 1},\n    darkslategray: {r: 47, g: 79, b: 79, a: 1},\n    darkslategrey: {r: 47, g: 79, b: 79, a: 1},\n    darkturquoise: {r: 0, g: 206, b: 209, a: 1},\n    darkviolet: {r: 148, g: 0, b: 211, a: 1},\n    deeppink: {r: 255, g: 20, b: 147, a: 1},\n    deepskyblue: {r: 0, g: 191, b: 255, a: 1},\n    dimgray: {r: 105, g: 105, b: 105, a: 1},\n    dimgrey: {r: 105, g: 105, b: 105, a: 1},\n    dodgerblue: {r: 30, g: 144, b: 255, a: 1},\n    firebrick: {r: 178, g: 34, b: 34, a: 1},\n    floralwhite: {r: 255, g: 250, b: 240, a: 1},\n    forestgreen: {r: 34, g: 139, b: 34, a: 1},\n    fuchsia: {r: 255, g: 0, b: 255, a: 1},\n    gainsboro: {r: 220, g: 220, b: 220, a: 1},\n    ghostwhite: {r: 248, g: 248, b: 255, a: 1},\n    gold: {r: 255, g: 215, b: 0, a: 1},\n    goldenrod: {r: 218, g: 165, b: 32, a: 1},\n    gray: {r: 128, g: 128, b: 128, a: 1},\n    green: {r: 0, g: 128, b: 0, a: 1},\n    greenyellow: {r: 173, g: 255, b: 47, a: 1},\n    grey: {r: 128, g: 128, b: 128, a: 1},\n    honeydew: {r: 240, g: 255, b: 240, a: 1},\n    hotpink: {r: 255, g: 105, b: 180, a: 1},\n    indianred: {r: 205, g: 92, b: 92, a: 1},\n    indigo: {r: 75, g: 0, b: 130, a: 1},\n    ivory: {r: 255, g: 255, b: 240, a: 1},\n    khaki: {r: 240, g: 230, b: 140, a: 1},\n    lavender: {r: 230, g: 230, b: 250, a: 1},\n    lavenderblush: {r: 255, g: 240, b: 245, a: 1},\n    lawngreen: {r: 124, g: 252, b: 0, a: 1},\n    lemonchiffon: {r: 255, g: 250, b: 205, a: 1},\n    lightblue: {r: 173, g: 216, b: 230, a: 1},\n    lightcoral: {r: 240, g: 128, b: 128, a: 1},\n    lightcyan: {r: 224, g: 255, b: 255, a: 1},\n    lightgoldenrodyellow: {r: 250, g: 250, b: 210, a: 1},\n    lightgray: {r: 211, g: 211, b: 211, a: 1},\n    lightgreen: {r: 144, g: 238, b: 144, a: 1},\n    lightgrey: {r: 211, g: 211, b: 211, a: 1},\n    lightpink: {r: 255, g: 182, b: 193, a: 1},\n    lightsalmon: {r: 255, g: 160, b: 122, a: 1},\n    lightseagreen: {r: 32, g: 178, b: 170, a: 1},\n    lightskyblue: {r: 135, g: 206, b: 250, a: 1},\n    lightslategray: {r: 119, g: 136, b: 153, a: 1},\n    lightslategrey: {r: 119, g: 136, b: 153, a: 1},\n    lightsteelblue: {r: 176, g: 196, b: 222, a: 1},\n    lightyellow: {r: 255, g: 255, b: 224, a: 1},\n    lime: {r: 0, g: 255, b: 0, a: 1},\n    limegreen: {r: 50, g: 205, b: 50, a: 1},\n    linen: {r: 250, g: 240, b: 230, a: 1},\n    magenta: {r: 255, g: 0, b: 255, a: 1},\n    maroon: {r: 128, g: 0, b: 0, a: 1},\n    mediumaquamarine: {r: 102, g: 205, b: 170, a: 1},\n    mediumblue: {r: 0, g: 0, b: 205, a: 1},\n    mediumorchid: {r: 186, g: 85, b: 211, a: 1},\n    mediumpurple: {r: 147, g: 112, b: 219, a: 1},\n    mediumseagreen: {r: 60, g: 179, b: 113, a: 1},\n    mediumslateblue: {r: 123, g: 104, b: 238, a: 1},\n    mediumspringgreen: {r: 0, g: 250, b: 154, a: 1},\n    mediumturquoise: {r: 72, g: 209, b: 204, a: 1},\n    mediumvioletred: {r: 199, g: 21, b: 133, a: 1},\n    midnightblue: {r: 25, g: 25, b: 112, a: 1},\n    mintcream: {r: 245, g: 255, b: 250, a: 1},\n    mistyrose: {r: 255, g: 228, b: 225, a: 1},\n    moccasin: {r: 255, g: 228, b: 181, a: 1},\n    navajowhite: {r: 255, g: 222, b: 173, a: 1},\n    navy: {r: 0, g: 0, b: 128, a: 1},\n    oldlace: {r: 253, g: 245, b: 230, a: 1},\n    olive: {r: 128, g: 128, b: 0, a: 1},\n    olivedrab: {r: 107, g: 142, b: 35, a: 1},\n    orange: {r: 255, g: 165, b: 0, a: 1},\n    orangered: {r: 255, g: 69, b: 0, a: 1},\n    orchid: {r: 218, g: 112, b: 214, a: 1},\n    palegoldenrod: {r: 238, g: 232, b: 170, a: 1},\n    palegreen: {r: 152, g: 251, b: 152, a: 1},\n    paleturquoise: {r: 175, g: 238, b: 238, a: 1},\n    palevioletred: {r: 219, g: 112, b: 147, a: 1},\n    papayawhip: {r: 255, g: 239, b: 213, a: 1},\n    peachpuff: {r: 255, g: 218, b: 185, a: 1},\n    peru: {r: 205, g: 133, b: 63, a: 1},\n    pink: {r: 255, g: 192, b: 203, a: 1},\n    plum: {r: 221, g: 160, b: 221, a: 1},\n    powderblue: {r: 176, g: 224, b: 230, a: 1},\n    purple: {r: 128, g: 0, b: 128, a: 1},\n    red: {r: 255, g: 0, b: 0, a: 1},\n    rosybrown: {r: 188, g: 143, b: 143, a: 1},\n    royalblue: {r: 65, g: 105, b: 225, a: 1},\n    saddlebrown: {r: 139, g: 69, b: 19, a: 1},\n    salmon: {r: 250, g: 128, b: 114, a: 1},\n    sandybrown: {r: 244, g: 164, b: 96, a: 1},\n    seagreen: {r: 46, g: 139, b: 87, a: 1},\n    seashell: {r: 255, g: 245, b: 238, a: 1},\n    sienna: {r: 160, g: 82, b: 45, a: 1},\n    silver: {r: 192, g: 192, b: 192, a: 1},\n    skyblue: {r: 135, g: 206, b: 235, a: 1},\n    slateblue: {r: 106, g: 90, b: 205, a: 1},\n    slategray: {r: 112, g: 128, b: 144, a: 1},\n    slategrey: {r: 112, g: 128, b: 144, a: 1},\n    snow: {r: 255, g: 250, b: 250, a: 1},\n    springgreen: {r: 0, g: 255, b: 127, a: 1},\n    steelblue: {r: 70, g: 130, b: 180, a: 1},\n    tan: {r: 210, g: 180, b: 140, a: 1},\n    teal: {r: 0, g: 128, b: 128, a: 1},\n    thistle: {r: 216, g: 191, b: 216, a: 1},\n    tomato: {r: 255, g: 99, b: 71, a: 1},\n    turquoise: {r: 64, g: 224, b: 208, a: 1},\n    violet: {r: 238, g: 130, b: 238, a: 1},\n    wheat: {r: 245, g: 222, b: 179, a: 1},\n    white: {r: 255, g: 255, b: 255, a: 1},\n    whitesmoke: {r: 245, g: 245, b: 245, a: 1},\n    yellow: {r: 255, g: 255, b: 0, a: 1},\n    yellowgreen: {r: 154, g: 205, b: 50, a: 1}\n};\n\nfunction tagcloudHelper(tags, options) {\n    if (!options && (!tags || !tags.hasOwnProperty('length'))) {\n        options = tags;\n        tags = this.site.tags;\n    }\n\n    if (!tags || !tags.length) return '';\n    options = options || {};\n\n    var min = options.min_font || 10;\n    var max = options.max_font || 20;\n    var orderby = options.orderby || 'name';\n    var order = options.order || 1;\n    var unit = options.unit || 'px';\n    var color = options.color;\n    var transform = options.transform;\n    var separator = options.separator || ' ';\n    var result = [];\n    var self = this;\n    var startColor, endColor;\n\n    if (color) {\n        startColor = new Color(options.start_color);\n        endColor = new Color(options.end_color);\n\n        if (!startColor || !endColor) color = false;\n    }\n\n    // Sort the tags\n    if (orderby === 'random' || orderby === 'rand') {\n        tags = tags.random();\n    } else {\n        tags = tags.sort(orderby, order);\n    }\n\n    // Ignore tags with zero posts\n    tags = tags.filter(function(tag) {\n        return tag.length;\n    });\n\n    // Limit the number of tags\n    if (options.amount) {\n        tags = tags.limit(options.amount);\n    }\n\n    var sizes = [];\n\n    tags.sort('length').forEach(function(tag) {\n        var length = tag.length;\n        if (~sizes.indexOf(length)) return;\n\n        sizes.push(length);\n    });\n\n    var length = sizes.length - 1;\n\n    tags.forEach(function(tag) {\n        var ratio = length ? sizes.indexOf(tag.length) / length : 0;\n        var size = min + ((max - min) * ratio);\n        var style = 'font-size: ' + parseFloat(size.toFixed(2)) + unit + ';';\n\n        if (color) {\n            var midColor = startColor.mix(endColor, ratio);\n            style += ' color: ' + midColor.toString();\n        }\n\n        result.push(\n            // 增加/index.html  跳转地址   \n            '<a href=\"' + self.url_for(tag.path) + 'index.html\" style=\"' + style + '\">' +\n            (transform ? transform(tag.name) : tag.name) +\n            '</a>'\n        );\n    });\n\n    return result.join(separator);\n}\n\nfunction Color(color) {\n    if (typeof color === 'object') {\n        this.r = color.r;\n        this.g = color.g;\n        this.b = color.b;\n        this.a = color.a;\n    } else if (typeof color === 'string') {\n        this.parse(color);\n    } else {\n        throw new TypeError('color is required!');\n    }\n\n    if (this.r < 0 || this.r > 255 ||\n        this.g < 0 || this.g > 255 ||\n        this.b < 0 || this.b > 255 ||\n        this.a < 0 || this.a > 1) {\n        throw new Error(color + ' is invalid.');\n    }\n}\n\nColor.prototype.parse = function(color) {\n    color = color.toLowerCase();\n\n    if (colorNames.hasOwnProperty(color)) {\n        var obj = colorNames[color];\n\n        this.r = obj.r;\n        this.g = obj.g;\n        this.b = obj.b;\n        this.a = obj.a;\n\n        return;\n    }\n\n    var match, txt, code;\n\n    if (rHex3.test(color)) {\n        txt = color.substring(1);\n        code = parseInt(txt, 16);\n\n        this.r = ((code & 0xF00) >> 8) * 17;\n        this.g = ((code & 0xF0) >> 4) * 17;\n        this.b = (code & 0xF) * 17;\n        this.a = 1;\n    } else if (rHex6.test(color)) {\n        txt = color.substring(1);\n        code = parseInt(txt, 16);\n\n        this.r = (code & 0xFF0000) >> 16;\n        this.g = (code & 0xFF00) >> 8;\n        this.b = code & 0xFF;\n        this.a = 1;\n    } else if (rRGB.test(color)) {\n        match = color.match(rRGB);\n\n        this.r = match[1] | 0;\n        this.g = match[2] | 0;\n        this.b = match[3] | 0;\n        this.a = match[4] ? +match[4] : 1;\n    } else if (rHSL.test(color)) {\n        match = color.match(rHSL);\n\n        var h = +match[1] / 360;\n        var s = +match[2] / 100;\n        var l = +match[3] / 100;\n\n        this.a = match[4] ? +match[4] : 1;\n\n        if (!s) {\n            this.r = this.g = this.b = l * 255;\n        }\n\n        var q = l < 0.5 ? l * (1 + s) : l + s - (l * s);\n        var p = (2 * l) - q;\n\n        var rt = h + (1 / 3);\n        var gt = h;\n        var bt = h - (1 / 3);\n\n        this.r = convertHue(p, q, rt);\n        this.g = convertHue(p, q, gt);\n        this.b = convertHue(p, q, bt);\n    } else {\n        throw new Error(color + ' is not a supported color format.');\n    }\n};\n\nColor.prototype.toString = function() {\n    if (this.a === 1) {\n        var r = convertRGB(this.r);\n        var g = convertRGB(this.g);\n        var b = convertRGB(this.b);\n\n        if (this.r % 17 || this.g % 17 || this.b % 17) {\n            return '#' + r + g + b;\n        }\n\n        return '#' + r[0] + g[0] + b[0];\n    }\n\n    return 'rgba(' + this.r + ', ' + this.g + ', ' + this.b + ', ' + parseFloat(this.a.toFixed(2)) + ')';\n};\n\nColor.prototype.mix = function(color, ratio) {\n    switch (ratio) {\n        case 0:\n            return new Color(this);\n\n        case 1:\n            return new Color(color);\n    }\n\n    return new Color({\n        r: Math.round(mixValue(this.r, color.r, ratio)),\n        g: Math.round(mixValue(this.g, color.g, ratio)),\n        b: Math.round(mixValue(this.b, color.b, ratio)),\n        a: mixValue(this.a, color.a, ratio)\n    });\n};\n\nfunction convertHue(p, q, h) {\n    if (h < 0) h++;\n    if (h > 1) h--;\n\n    var color;\n\n    if (h * 6 < 1) {\n        color = p + ((q - p) * h * 6);\n    } else if (h * 2 < 1) {\n        color = q;\n    } else if (h * 3 < 2) {\n        color = p + ((q - p) * ((2 / 3) - h) * 6);\n    } else {\n        color = p;\n    }\n\n    return Math.round(color * 255);\n}\n\nfunction convertRGB(value) {\n    var str = value.toString(16);\n    if (value < 16) return '0' + str;\n\n    return str;\n}\n\nfunction mixValue(a, b, ratio) {\n    return a + ((b - a) * ratio);\n}\n\nmodule.exports = tagcloudHelper;\n\n```\n\n参考地址: https://github.com/xuxianyu/ming/tree/master/hexo \n\n实例地址: https://www.xujiuming.com  本网站就是采用这种方法实现的   \n\n\n","source":"_posts/综合应用/使用阿里云的oss-cdn搭建高速访问的静态博客.md","raw":"---\ntitle: 使用阿里云的oss+cdn搭建高速访问的静态博客\ncomments: true\ncategories: 骚想法\ntags:\n  - cdn\n  - oss\n  - http/https\n  - 阿里云\nabbrlink: 3c3d59e1\ndate: 2018-02-09 13:42:02\n---\n\n之前一直想搭建一个博客 但是一直没找到便宜 并且访问速度快的方案  前几种方案\n1:git pages + cdn    \n国内访问速度简直吃屎  不知道 同行是如何忍受的 cdn从源站拉取资源的时候 慢到无法忍受    \n2:coding pages+cdn  \n不想用 coding pages  还不如直接用git pages   \n3: 购买vps或者静态托管服务器   \n博客初期完全用不起   太特么贵了  穷吊 用不起   \n\n综上所述 我需要的博客大致需要  \n1:源站访问速度快     \n2:cdn 好用    \n3:域名     \n4:https  http2访问  \n5:价格相对便宜     \n6:管理相对方便   \n7:增加ca证书方便\n\n最终选择方案 \n全部使用阿里云的相关资源 \n域名：万网\ncdn:阿里云 cdn \n源站:使用阿里云的oss对象存储\n```\noss  原本只是 阿里云的一个放文件的一个功能 后来他支持设定首页 就可以用来托管静态页面 \n速度不用说 肯定快 而且支持 https   \n```\nca证书:阿里云 ca免费赛门铁克证书 \n静态博客:hexo + next主题\n\n其实这些主要是选择  具体如何使用 直接操作阿里云控制台就是的 没啥难度 \n\n遇到的麻烦的点:\n1: oss 存储hexo生成的静态资源 路由问题\n由于oss 里面 文件夹也是可访问的一种资源 这就导致 hexo初始生成的路由 例如/tags/ming/  这个时候他访问的是oss里面的/tags/ming/ 文件夹 然后是空白       \n解决办法: 修改站点配置_config.yaml 中permalink参数 \n我是用abbrlink 来重写url了 如果不用 就是在hexo的permalink中 后面加上.html 即可\n```\n# 使用abbrlink 来重写固定url  https://segmentfault.com/a/1190000005799711\npermalink: ming/:abbrlink.html\npermalink_defaults:\n```\n标签、归档、分页相关路由   调整\n修改 当前目录下node_modules/hexo/lib/plugins/helper/index.js 中关于 标签、归档、分页相关的插件\n```\n'use strict';\n\nmodule.exports = function (ctx) {\n。。。\n\n//重写 归档 js  增加index.html 路径 配合 oss 访问\n//    helper.register('list_categories', require('./list_categories'));\n    helper.register('list_categories', require('./ming_list_categories'));\n    \n。。。   \n\n//重写分页相关地址 配合oss\n//    helper.register('paginator', require('./paginator'));\n    helper.register('paginator', require('./ming_paginator'));\n    \n。。。\n\n//  var tagcloud = require('./tagcloud');\n//  helper.register('tagcloud', tagcloud);\n//  helper.register('tag_cloud', tagcloud);\n    //引入 自定义 tag cloud 标签  修改生成路径的函数 适应oss\n    var ming_tag = require('./ming_tag')\n    helper.register('tagcloud', ming_tag);\n    helper.register('tag_cloud', ming_tag);\n。。。\n\n```\n在index.js目录下\n新增下面三个文件 \n\n归档插件的实现\n新增 ming_list_categories.js文件\n复制如下内容进去\n```\n'use strict';\n\nfunction listCategoriesHelper(categories, options) {\n  if (!options && (!categories || !categories.hasOwnProperty('length'))) {\n    options = categories;\n    categories = this.site.categories;\n  }\n\n  if (!categories || !categories.length) return '';\n  options = options || {};\n\n  var style = options.hasOwnProperty('style') ? options.style : 'list';\n  var showCount = options.hasOwnProperty('show_count') ? options.show_count : true;\n  var className = options.class || 'category';\n  var depth = options.depth ? parseInt(options.depth, 10) : 0;\n  var orderby = options.orderby || 'name';\n  var order = options.order || 1;\n  var transform = options.transform;\n  var separator = options.hasOwnProperty('separator') ? options.separator : ', ';\n  var showCurrent = options.show_current || false;\n    // 添加 /index.html 配合oss 访问\n    //var suffix = options.suffix || '';\n  var suffix = \"index.html\";\n  var childrenIndicator = options.hasOwnProperty('children_indicator') ? options.children_indicator : false;\n  var result = '';\n  var self = this;\n\n  function prepareQuery(parent) {\n    var query = {};\n\n    if (parent) {\n      query.parent = parent;\n    } else {\n      query.parent = {$exists: false};\n    }\n\n    return categories.find(query).sort(orderby, order).filter(function(cat) {\n      return cat.length;\n    });\n  }\n\n  function hierarchicalList(level, parent) {\n    var result = '';\n\n    prepareQuery(parent).forEach(function(cat, i) {\n      var child;\n      if (!depth || level + 1 < depth) {\n        child = hierarchicalList(level + 1, cat._id);\n      }\n\n      var isCurrent = false;\n      if (showCurrent && self.page) {\n        for (var j = 0; j < cat.length; j++) {\n          var post = cat.posts.data[j];\n          if (post && post._id === self.page._id) {\n            isCurrent = true;\n            break;\n          }\n        }\n\n        // special case: category page\n        if (!isCurrent && self.page.base) {\n          if (self.page.base.indexOf(cat.path) === 0) {\n            isCurrent = true;\n          }\n        }\n      }\n\n      var additionalClassName = '';\n      if (child && childrenIndicator) {\n        additionalClassName = ' ' + childrenIndicator;\n      }\n\n      result += '<li class=\"' + className + '-list-item' + additionalClassName + '\">';\n      result += '<a class=\"' + className + '-list-link' + (isCurrent ? ' current' : '') + '\" href=\"' + self.url_for(cat.path) + suffix + '\">';\n      result += transform ? transform(cat.name) : cat.name;\n      result += '</a>';\n\n      if (showCount) {\n        result += '<span class=\"' + className + '-list-count\">' + cat.length + '</span>';\n      }\n\n      if (child) {\n        result += '<ul class=\"' + className + '-list-child\">' + child + '</ul>';\n      }\n\n      result += '</li>';\n    });\n\n    return result;\n  }\n\n  function flatList(level, parent) {\n    var result = '';\n\n    prepareQuery(parent).forEach(function(cat, i) {\n      if (i || level) result += separator;\n\n      result += '<a class=\"' + className + '-link\" href=\"' + self.url_for(cat.path) + suffix + '\">';\n      result += transform ? transform(cat.name) : cat.name;\n\n      if (showCount) {\n        result += '<span class=\"' + className + '-count\">' + cat.length + '</span>';\n      }\n\n      result += '</a>';\n\n      if (!depth || level + 1 < depth) {\n        result += flatList(level + 1, cat._id);\n      }\n    });\n\n    return result;\n  }\n\n  if (style === 'list') {\n    result += '<ul class=\"' + className + '-list\">' + hierarchicalList(0) + '</ul>';\n  } else {\n    result += flatList(0);\n  }\n\n  return result;\n}\n\nmodule.exports = listCategoriesHelper;\n```\n\n分页插件的实现\n新增 ming_paginator.js文件\n复制如下内容进去\n```\n'use strict';\n\nfunction paginatorHelper(options) {\n  options = options || {};\n\n  var current = options.current || this.page.current || 0;\n  var total = options.total || this.page.total || 1;\n  var endSize = options.hasOwnProperty('end_size') ? +options.end_size : 1;\n  var midSize = options.hasOwnProperty('mid_size') ? +options.mid_size : 2;\n  var space = options.hasOwnProperty('space') ? options.space : '&hellip;';\n  var base = options.base || this.page.base || '';\n  var format = options.format || this.config.pagination_dir + '/%d/';\n  var prevText = options.prev_text || 'Prev';\n  var nextText = options.next_text || 'Next';\n  var prevNext = options.hasOwnProperty('prev_next') ? options.prev_next : true;\n  var transform = options.transform;\n  var self = this;\n  var result = '';\n  var i;\n  //配合 oss 使用index.html\n  var suffix = \"index.html\";\n\n\n    if (!current) return '';\n\n  var currentPage = '<span class=\"page-number current\">' +\n    (transform ? transform(current) : current) +\n    '</span>';\n\n  function link(i) {\n    return self.url_for(i === 1 ? base : base + format.replace('%d', i));\n  }\n\n  function pageLink(i) {\n    return '<a class=\"page-number\" href=\"' + link(i) + suffix +'\">' +\n      (transform ? transform(i) : i) +\n      '</a>';\n  }\n\n  // Display the link to the previous page\n  if (prevNext && current > 1) {\n    result += '<a class=\"extend prev\" rel=\"prev\" href=\"' + link(current - 1) + suffix +'\">' + prevText + '</a>';\n  }\n\n  if (options.show_all) {\n    // Display pages on the left side of the current page\n    for (i = 1; i < current; i++) {\n      result += pageLink(i);\n    }\n\n    // Display the current page\n    result += currentPage;\n\n    // Display pages on the right side of the current page\n    for (i = current + 1; i <= total; i++) {\n      result += pageLink(i);\n    }\n  } else {\n    // It's too complicated. May need refactor.\n    var leftEnd = current <= endSize ? current - 1 : endSize;\n    var rightEnd = total - current <= endSize ? current + 1 : total - endSize + 1;\n    var leftMid = current - midSize <= endSize ? leftEnd + 1 : current - midSize;\n    var rightMid = current + midSize + endSize > total ? rightEnd - 1 : current + midSize;\n    var spaceHtml = '<span class=\"space\">' + space + '</span>';\n\n    // Display pages on the left edge\n    for (i = 1; i <= leftEnd; i++) {\n      result += pageLink(i);\n    }\n\n    // Display spaces between edges and middle pages\n    if (space && current - endSize - midSize > 1) {\n      result += spaceHtml;\n    }\n\n    // Display left middle pages\n    if (leftMid > leftEnd) {\n      for (i = leftMid; i < current; i++) {\n        result += pageLink(i);\n      }\n    }\n\n    // Display the current page\n    result += currentPage;\n\n    // Display right middle pages\n    if (rightMid < rightEnd) {\n      for (i = current + 1; i <= rightMid; i++) {\n        result += pageLink(i);\n      }\n    }\n\n    // Display spaces between edges and middle pages\n    if (space && total - endSize - midSize > current) {\n      result += spaceHtml;\n    }\n\n    // Dispaly pages on the right edge\n    for (i = rightEnd; i <= total; i++) {\n      result += pageLink(i);\n    }\n  }\n\n  // Display the link to the next page\n  if (prevNext && current < total) {\n    result += '<a class=\"extend next\" rel=\"next\" href=\"' + link(current + 1) + suffix+ '\">' + nextText + '</a>';\n  }\n\n  return result;\n}\n\nmodule.exports = paginatorHelper;\n```\n\n\n标签插件的实现\n新增 ming_tag.js文件\n复制如下内容进去\n```\n'use strict';\n\n// https://github.com/imathis/hsl-picker/blob/master/assets/javascripts/modules/color.coffee\nvar rHex3 = /^#([0-9a-f]{3})$/;\nvar rHex6 = /^#([0-9a-f]{6})$/;\nvar rRGB = /^rgba?\\(\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})\\s*,?\\s*(0?\\.?\\d+)?\\s*\\)$/;\nvar rHSL = /^hsla?\\(\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})%\\s*,\\s*(\\d{1,3})%\\s*,?\\s*(0?\\.?\\d+)?\\s*\\)$/;\n\n// http://www.w3.org/TR/css3-color/#svg-color\nvar colorNames = {\n    aliceblue: {r: 240, g: 248, b: 255, a: 1},\n    antiquewhite: {r: 250, g: 235, b: 215, a: 1},\n    aqua: {r: 0, g: 255, b: 255, a: 1},\n    aquamarine: {r: 127, g: 255, b: 212, a: 1},\n    azure: {r: 240, g: 255, b: 255, a: 1},\n    beige: {r: 245, g: 245, b: 220, a: 1},\n    bisque: {r: 255, g: 228, b: 196, a: 1},\n    black: {r: 0, g: 0, b: 0, a: 1},\n    blanchedalmond: {r: 255, g: 235, b: 205, a: 1},\n    blue: {r: 0, g: 0, b: 255, a: 1},\n    blueviolet: {r: 138, g: 43, b: 226, a: 1},\n    brown: {r: 165, g: 42, b: 42, a: 1},\n    burlywood: {r: 222, g: 184, b: 135, a: 1},\n    cadetblue: {r: 95, g: 158, b: 160, a: 1},\n    chartreuse: {r: 127, g: 255, b: 0, a: 1},\n    chocolate: {r: 210, g: 105, b: 30, a: 1},\n    coral: {r: 255, g: 127, b: 80, a: 1},\n    cornflowerblue: {r: 100, g: 149, b: 237, a: 1},\n    cornsilk: {r: 255, g: 248, b: 220, a: 1},\n    crimson: {r: 220, g: 20, b: 60, a: 1},\n    cyan: {r: 0, g: 255, b: 255, a: 1},\n    darkblue: {r: 0, g: 0, b: 139, a: 1},\n    darkcyan: {r: 0, g: 139, b: 139, a: 1},\n    darkgoldenrod: {r: 184, g: 134, b: 11, a: 1},\n    darkgray: {r: 169, g: 169, b: 169, a: 1},\n    darkgreen: {r: 0, g: 100, b: 0, a: 1},\n    darkgrey: {r: 169, g: 169, b: 169, a: 1},\n    darkkhaki: {r: 189, g: 183, b: 107, a: 1},\n    darkmagenta: {r: 139, g: 0, b: 139, a: 1},\n    darkolivegreen: {r: 85, g: 107, b: 47, a: 1},\n    darkorange: {r: 255, g: 140, b: 0, a: 1},\n    darkorchid: {r: 153, g: 50, b: 204, a: 1},\n    darkred: {r: 139, g: 0, b: 0, a: 1},\n    darksalmon: {r: 233, g: 150, b: 122, a: 1},\n    darkseagreen: {r: 143, g: 188, b: 143, a: 1},\n    darkslateblue: {r: 72, g: 61, b: 139, a: 1},\n    darkslategray: {r: 47, g: 79, b: 79, a: 1},\n    darkslategrey: {r: 47, g: 79, b: 79, a: 1},\n    darkturquoise: {r: 0, g: 206, b: 209, a: 1},\n    darkviolet: {r: 148, g: 0, b: 211, a: 1},\n    deeppink: {r: 255, g: 20, b: 147, a: 1},\n    deepskyblue: {r: 0, g: 191, b: 255, a: 1},\n    dimgray: {r: 105, g: 105, b: 105, a: 1},\n    dimgrey: {r: 105, g: 105, b: 105, a: 1},\n    dodgerblue: {r: 30, g: 144, b: 255, a: 1},\n    firebrick: {r: 178, g: 34, b: 34, a: 1},\n    floralwhite: {r: 255, g: 250, b: 240, a: 1},\n    forestgreen: {r: 34, g: 139, b: 34, a: 1},\n    fuchsia: {r: 255, g: 0, b: 255, a: 1},\n    gainsboro: {r: 220, g: 220, b: 220, a: 1},\n    ghostwhite: {r: 248, g: 248, b: 255, a: 1},\n    gold: {r: 255, g: 215, b: 0, a: 1},\n    goldenrod: {r: 218, g: 165, b: 32, a: 1},\n    gray: {r: 128, g: 128, b: 128, a: 1},\n    green: {r: 0, g: 128, b: 0, a: 1},\n    greenyellow: {r: 173, g: 255, b: 47, a: 1},\n    grey: {r: 128, g: 128, b: 128, a: 1},\n    honeydew: {r: 240, g: 255, b: 240, a: 1},\n    hotpink: {r: 255, g: 105, b: 180, a: 1},\n    indianred: {r: 205, g: 92, b: 92, a: 1},\n    indigo: {r: 75, g: 0, b: 130, a: 1},\n    ivory: {r: 255, g: 255, b: 240, a: 1},\n    khaki: {r: 240, g: 230, b: 140, a: 1},\n    lavender: {r: 230, g: 230, b: 250, a: 1},\n    lavenderblush: {r: 255, g: 240, b: 245, a: 1},\n    lawngreen: {r: 124, g: 252, b: 0, a: 1},\n    lemonchiffon: {r: 255, g: 250, b: 205, a: 1},\n    lightblue: {r: 173, g: 216, b: 230, a: 1},\n    lightcoral: {r: 240, g: 128, b: 128, a: 1},\n    lightcyan: {r: 224, g: 255, b: 255, a: 1},\n    lightgoldenrodyellow: {r: 250, g: 250, b: 210, a: 1},\n    lightgray: {r: 211, g: 211, b: 211, a: 1},\n    lightgreen: {r: 144, g: 238, b: 144, a: 1},\n    lightgrey: {r: 211, g: 211, b: 211, a: 1},\n    lightpink: {r: 255, g: 182, b: 193, a: 1},\n    lightsalmon: {r: 255, g: 160, b: 122, a: 1},\n    lightseagreen: {r: 32, g: 178, b: 170, a: 1},\n    lightskyblue: {r: 135, g: 206, b: 250, a: 1},\n    lightslategray: {r: 119, g: 136, b: 153, a: 1},\n    lightslategrey: {r: 119, g: 136, b: 153, a: 1},\n    lightsteelblue: {r: 176, g: 196, b: 222, a: 1},\n    lightyellow: {r: 255, g: 255, b: 224, a: 1},\n    lime: {r: 0, g: 255, b: 0, a: 1},\n    limegreen: {r: 50, g: 205, b: 50, a: 1},\n    linen: {r: 250, g: 240, b: 230, a: 1},\n    magenta: {r: 255, g: 0, b: 255, a: 1},\n    maroon: {r: 128, g: 0, b: 0, a: 1},\n    mediumaquamarine: {r: 102, g: 205, b: 170, a: 1},\n    mediumblue: {r: 0, g: 0, b: 205, a: 1},\n    mediumorchid: {r: 186, g: 85, b: 211, a: 1},\n    mediumpurple: {r: 147, g: 112, b: 219, a: 1},\n    mediumseagreen: {r: 60, g: 179, b: 113, a: 1},\n    mediumslateblue: {r: 123, g: 104, b: 238, a: 1},\n    mediumspringgreen: {r: 0, g: 250, b: 154, a: 1},\n    mediumturquoise: {r: 72, g: 209, b: 204, a: 1},\n    mediumvioletred: {r: 199, g: 21, b: 133, a: 1},\n    midnightblue: {r: 25, g: 25, b: 112, a: 1},\n    mintcream: {r: 245, g: 255, b: 250, a: 1},\n    mistyrose: {r: 255, g: 228, b: 225, a: 1},\n    moccasin: {r: 255, g: 228, b: 181, a: 1},\n    navajowhite: {r: 255, g: 222, b: 173, a: 1},\n    navy: {r: 0, g: 0, b: 128, a: 1},\n    oldlace: {r: 253, g: 245, b: 230, a: 1},\n    olive: {r: 128, g: 128, b: 0, a: 1},\n    olivedrab: {r: 107, g: 142, b: 35, a: 1},\n    orange: {r: 255, g: 165, b: 0, a: 1},\n    orangered: {r: 255, g: 69, b: 0, a: 1},\n    orchid: {r: 218, g: 112, b: 214, a: 1},\n    palegoldenrod: {r: 238, g: 232, b: 170, a: 1},\n    palegreen: {r: 152, g: 251, b: 152, a: 1},\n    paleturquoise: {r: 175, g: 238, b: 238, a: 1},\n    palevioletred: {r: 219, g: 112, b: 147, a: 1},\n    papayawhip: {r: 255, g: 239, b: 213, a: 1},\n    peachpuff: {r: 255, g: 218, b: 185, a: 1},\n    peru: {r: 205, g: 133, b: 63, a: 1},\n    pink: {r: 255, g: 192, b: 203, a: 1},\n    plum: {r: 221, g: 160, b: 221, a: 1},\n    powderblue: {r: 176, g: 224, b: 230, a: 1},\n    purple: {r: 128, g: 0, b: 128, a: 1},\n    red: {r: 255, g: 0, b: 0, a: 1},\n    rosybrown: {r: 188, g: 143, b: 143, a: 1},\n    royalblue: {r: 65, g: 105, b: 225, a: 1},\n    saddlebrown: {r: 139, g: 69, b: 19, a: 1},\n    salmon: {r: 250, g: 128, b: 114, a: 1},\n    sandybrown: {r: 244, g: 164, b: 96, a: 1},\n    seagreen: {r: 46, g: 139, b: 87, a: 1},\n    seashell: {r: 255, g: 245, b: 238, a: 1},\n    sienna: {r: 160, g: 82, b: 45, a: 1},\n    silver: {r: 192, g: 192, b: 192, a: 1},\n    skyblue: {r: 135, g: 206, b: 235, a: 1},\n    slateblue: {r: 106, g: 90, b: 205, a: 1},\n    slategray: {r: 112, g: 128, b: 144, a: 1},\n    slategrey: {r: 112, g: 128, b: 144, a: 1},\n    snow: {r: 255, g: 250, b: 250, a: 1},\n    springgreen: {r: 0, g: 255, b: 127, a: 1},\n    steelblue: {r: 70, g: 130, b: 180, a: 1},\n    tan: {r: 210, g: 180, b: 140, a: 1},\n    teal: {r: 0, g: 128, b: 128, a: 1},\n    thistle: {r: 216, g: 191, b: 216, a: 1},\n    tomato: {r: 255, g: 99, b: 71, a: 1},\n    turquoise: {r: 64, g: 224, b: 208, a: 1},\n    violet: {r: 238, g: 130, b: 238, a: 1},\n    wheat: {r: 245, g: 222, b: 179, a: 1},\n    white: {r: 255, g: 255, b: 255, a: 1},\n    whitesmoke: {r: 245, g: 245, b: 245, a: 1},\n    yellow: {r: 255, g: 255, b: 0, a: 1},\n    yellowgreen: {r: 154, g: 205, b: 50, a: 1}\n};\n\nfunction tagcloudHelper(tags, options) {\n    if (!options && (!tags || !tags.hasOwnProperty('length'))) {\n        options = tags;\n        tags = this.site.tags;\n    }\n\n    if (!tags || !tags.length) return '';\n    options = options || {};\n\n    var min = options.min_font || 10;\n    var max = options.max_font || 20;\n    var orderby = options.orderby || 'name';\n    var order = options.order || 1;\n    var unit = options.unit || 'px';\n    var color = options.color;\n    var transform = options.transform;\n    var separator = options.separator || ' ';\n    var result = [];\n    var self = this;\n    var startColor, endColor;\n\n    if (color) {\n        startColor = new Color(options.start_color);\n        endColor = new Color(options.end_color);\n\n        if (!startColor || !endColor) color = false;\n    }\n\n    // Sort the tags\n    if (orderby === 'random' || orderby === 'rand') {\n        tags = tags.random();\n    } else {\n        tags = tags.sort(orderby, order);\n    }\n\n    // Ignore tags with zero posts\n    tags = tags.filter(function(tag) {\n        return tag.length;\n    });\n\n    // Limit the number of tags\n    if (options.amount) {\n        tags = tags.limit(options.amount);\n    }\n\n    var sizes = [];\n\n    tags.sort('length').forEach(function(tag) {\n        var length = tag.length;\n        if (~sizes.indexOf(length)) return;\n\n        sizes.push(length);\n    });\n\n    var length = sizes.length - 1;\n\n    tags.forEach(function(tag) {\n        var ratio = length ? sizes.indexOf(tag.length) / length : 0;\n        var size = min + ((max - min) * ratio);\n        var style = 'font-size: ' + parseFloat(size.toFixed(2)) + unit + ';';\n\n        if (color) {\n            var midColor = startColor.mix(endColor, ratio);\n            style += ' color: ' + midColor.toString();\n        }\n\n        result.push(\n            // 增加/index.html  跳转地址   \n            '<a href=\"' + self.url_for(tag.path) + 'index.html\" style=\"' + style + '\">' +\n            (transform ? transform(tag.name) : tag.name) +\n            '</a>'\n        );\n    });\n\n    return result.join(separator);\n}\n\nfunction Color(color) {\n    if (typeof color === 'object') {\n        this.r = color.r;\n        this.g = color.g;\n        this.b = color.b;\n        this.a = color.a;\n    } else if (typeof color === 'string') {\n        this.parse(color);\n    } else {\n        throw new TypeError('color is required!');\n    }\n\n    if (this.r < 0 || this.r > 255 ||\n        this.g < 0 || this.g > 255 ||\n        this.b < 0 || this.b > 255 ||\n        this.a < 0 || this.a > 1) {\n        throw new Error(color + ' is invalid.');\n    }\n}\n\nColor.prototype.parse = function(color) {\n    color = color.toLowerCase();\n\n    if (colorNames.hasOwnProperty(color)) {\n        var obj = colorNames[color];\n\n        this.r = obj.r;\n        this.g = obj.g;\n        this.b = obj.b;\n        this.a = obj.a;\n\n        return;\n    }\n\n    var match, txt, code;\n\n    if (rHex3.test(color)) {\n        txt = color.substring(1);\n        code = parseInt(txt, 16);\n\n        this.r = ((code & 0xF00) >> 8) * 17;\n        this.g = ((code & 0xF0) >> 4) * 17;\n        this.b = (code & 0xF) * 17;\n        this.a = 1;\n    } else if (rHex6.test(color)) {\n        txt = color.substring(1);\n        code = parseInt(txt, 16);\n\n        this.r = (code & 0xFF0000) >> 16;\n        this.g = (code & 0xFF00) >> 8;\n        this.b = code & 0xFF;\n        this.a = 1;\n    } else if (rRGB.test(color)) {\n        match = color.match(rRGB);\n\n        this.r = match[1] | 0;\n        this.g = match[2] | 0;\n        this.b = match[3] | 0;\n        this.a = match[4] ? +match[4] : 1;\n    } else if (rHSL.test(color)) {\n        match = color.match(rHSL);\n\n        var h = +match[1] / 360;\n        var s = +match[2] / 100;\n        var l = +match[3] / 100;\n\n        this.a = match[4] ? +match[4] : 1;\n\n        if (!s) {\n            this.r = this.g = this.b = l * 255;\n        }\n\n        var q = l < 0.5 ? l * (1 + s) : l + s - (l * s);\n        var p = (2 * l) - q;\n\n        var rt = h + (1 / 3);\n        var gt = h;\n        var bt = h - (1 / 3);\n\n        this.r = convertHue(p, q, rt);\n        this.g = convertHue(p, q, gt);\n        this.b = convertHue(p, q, bt);\n    } else {\n        throw new Error(color + ' is not a supported color format.');\n    }\n};\n\nColor.prototype.toString = function() {\n    if (this.a === 1) {\n        var r = convertRGB(this.r);\n        var g = convertRGB(this.g);\n        var b = convertRGB(this.b);\n\n        if (this.r % 17 || this.g % 17 || this.b % 17) {\n            return '#' + r + g + b;\n        }\n\n        return '#' + r[0] + g[0] + b[0];\n    }\n\n    return 'rgba(' + this.r + ', ' + this.g + ', ' + this.b + ', ' + parseFloat(this.a.toFixed(2)) + ')';\n};\n\nColor.prototype.mix = function(color, ratio) {\n    switch (ratio) {\n        case 0:\n            return new Color(this);\n\n        case 1:\n            return new Color(color);\n    }\n\n    return new Color({\n        r: Math.round(mixValue(this.r, color.r, ratio)),\n        g: Math.round(mixValue(this.g, color.g, ratio)),\n        b: Math.round(mixValue(this.b, color.b, ratio)),\n        a: mixValue(this.a, color.a, ratio)\n    });\n};\n\nfunction convertHue(p, q, h) {\n    if (h < 0) h++;\n    if (h > 1) h--;\n\n    var color;\n\n    if (h * 6 < 1) {\n        color = p + ((q - p) * h * 6);\n    } else if (h * 2 < 1) {\n        color = q;\n    } else if (h * 3 < 2) {\n        color = p + ((q - p) * ((2 / 3) - h) * 6);\n    } else {\n        color = p;\n    }\n\n    return Math.round(color * 255);\n}\n\nfunction convertRGB(value) {\n    var str = value.toString(16);\n    if (value < 16) return '0' + str;\n\n    return str;\n}\n\nfunction mixValue(a, b, ratio) {\n    return a + ((b - a) * ratio);\n}\n\nmodule.exports = tagcloudHelper;\n\n```\n\n参考地址: https://github.com/xuxianyu/ming/tree/master/hexo \n\n实例地址: https://www.xujiuming.com  本网站就是采用这种方法实现的   \n\n\n","slug":"综合应用/使用阿里云的oss-cdn搭建高速访问的静态博客","published":1,"updated":"2018-08-17T08:10:03.923Z","layout":"post","photos":[],"link":"","_id":"cjo9uau3j00ctmwczx01h02wn","content":"<p>之前一直想搭建一个博客 但是一直没找到便宜 并且访问速度快的方案 前几种方案<br>1:git pages + cdn<br>国内访问速度简直吃屎 不知道 同行是如何忍受的 cdn从源站拉取资源的时候 慢到无法忍受<br>2:coding pages+cdn<br>不想用 coding pages 还不如直接用git pages<br>3: 购买vps或者静态托管服务器<br>博客初期完全用不起 太特么贵了 穷吊 用不起</p><p>综上所述 我需要的博客大致需要<br>1:源站访问速度快<br>2:cdn 好用<br>3:域名<br>4:https http2访问<br>5:价格相对便宜<br>6:管理相对方便<br>7:增加ca证书方便</p><p>最终选择方案<br>全部使用阿里云的相关资源<br>域名：万网<br>cdn:阿里云 cdn<br>源站:使用阿里云的oss对象存储<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">oss  原本只是 阿里云的一个放文件的一个功能 后来他支持设定首页 就可以用来托管静态页面 </span><br><span class=\"line\">速度不用说 肯定快 而且支持 https</span><br></pre></td></tr></table></figure><p></p>\n<p>ca证书:阿里云 ca免费赛门铁克证书<br>静态博客:hexo + next主题</p>\n<p>其实这些主要是选择  具体如何使用 直接操作阿里云控制台就是的 没啥难度 </p>\n<p>遇到的麻烦的点:<br>1: oss 存储hexo生成的静态资源 路由问题<br>由于oss 里面 文件夹也是可访问的一种资源 这就导致 hexo初始生成的路由 例如/tags/ming/  这个时候他访问的是oss里面的/tags/ming/ 文件夹 然后是空白<br>解决办法: 修改站点配置_config.yaml 中permalink参数<br>我是用abbrlink 来重写url了 如果不用 就是在hexo的permalink中 后面加上.html 即可<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 使用abbrlink 来重写固定url  https://segmentfault.com/a/1190000005799711</span><br><span class=\"line\">permalink: ming/:abbrlink.html</span><br><span class=\"line\">permalink_defaults:</span><br></pre></td></tr></table></figure><p></p>\n<p>标签、归档、分页相关路由   调整<br>修改 当前目录下node_modules/hexo/lib/plugins/helper/index.js 中关于 标签、归档、分页相关的插件<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&apos;use strict&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports = function (ctx) &#123;</span><br><span class=\"line\">。。。</span><br><span class=\"line\"></span><br><span class=\"line\">//重写 归档 js  增加index.html 路径 配合 oss 访问</span><br><span class=\"line\">//    helper.register(&apos;list_categories&apos;, require(&apos;./list_categories&apos;));</span><br><span class=\"line\">    helper.register(&apos;list_categories&apos;, require(&apos;./ming_list_categories&apos;));</span><br><span class=\"line\">    </span><br><span class=\"line\">。。。   </span><br><span class=\"line\"></span><br><span class=\"line\">//重写分页相关地址 配合oss</span><br><span class=\"line\">//    helper.register(&apos;paginator&apos;, require(&apos;./paginator&apos;));</span><br><span class=\"line\">    helper.register(&apos;paginator&apos;, require(&apos;./ming_paginator&apos;));</span><br><span class=\"line\">    </span><br><span class=\"line\">。。。</span><br><span class=\"line\"></span><br><span class=\"line\">//  var tagcloud = require(&apos;./tagcloud&apos;);</span><br><span class=\"line\">//  helper.register(&apos;tagcloud&apos;, tagcloud);</span><br><span class=\"line\">//  helper.register(&apos;tag_cloud&apos;, tagcloud);</span><br><span class=\"line\">    //引入 自定义 tag cloud 标签  修改生成路径的函数 适应oss</span><br><span class=\"line\">    var ming_tag = require(&apos;./ming_tag&apos;)</span><br><span class=\"line\">    helper.register(&apos;tagcloud&apos;, ming_tag);</span><br><span class=\"line\">    helper.register(&apos;tag_cloud&apos;, ming_tag);</span><br><span class=\"line\">。。。</span><br></pre></td></tr></table></figure><p></p>\n<p>在index.js目录下<br>新增下面三个文件 </p>\n<p>归档插件的实现<br>新增 ming_list_categories.js文件<br>复制如下内容进去<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&apos;use strict&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">function listCategoriesHelper(categories, options) &#123;</span><br><span class=\"line\">  if (!options &amp;&amp; (!categories || !categories.hasOwnProperty(&apos;length&apos;))) &#123;</span><br><span class=\"line\">    options = categories;</span><br><span class=\"line\">    categories = this.site.categories;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  if (!categories || !categories.length) return &apos;&apos;;</span><br><span class=\"line\">  options = options || &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  var style = options.hasOwnProperty(&apos;style&apos;) ? options.style : &apos;list&apos;;</span><br><span class=\"line\">  var showCount = options.hasOwnProperty(&apos;show_count&apos;) ? options.show_count : true;</span><br><span class=\"line\">  var className = options.class || &apos;category&apos;;</span><br><span class=\"line\">  var depth = options.depth ? parseInt(options.depth, 10) : 0;</span><br><span class=\"line\">  var orderby = options.orderby || &apos;name&apos;;</span><br><span class=\"line\">  var order = options.order || 1;</span><br><span class=\"line\">  var transform = options.transform;</span><br><span class=\"line\">  var separator = options.hasOwnProperty(&apos;separator&apos;) ? options.separator : &apos;, &apos;;</span><br><span class=\"line\">  var showCurrent = options.show_current || false;</span><br><span class=\"line\">    // 添加 /index.html 配合oss 访问</span><br><span class=\"line\">    //var suffix = options.suffix || &apos;&apos;;</span><br><span class=\"line\">  var suffix = &quot;index.html&quot;;</span><br><span class=\"line\">  var childrenIndicator = options.hasOwnProperty(&apos;children_indicator&apos;) ? options.children_indicator : false;</span><br><span class=\"line\">  var result = &apos;&apos;;</span><br><span class=\"line\">  var self = this;</span><br><span class=\"line\"></span><br><span class=\"line\">  function prepareQuery(parent) &#123;</span><br><span class=\"line\">    var query = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    if (parent) &#123;</span><br><span class=\"line\">      query.parent = parent;</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">      query.parent = &#123;$exists: false&#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    return categories.find(query).sort(orderby, order).filter(function(cat) &#123;</span><br><span class=\"line\">      return cat.length;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  function hierarchicalList(level, parent) &#123;</span><br><span class=\"line\">    var result = &apos;&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">    prepareQuery(parent).forEach(function(cat, i) &#123;</span><br><span class=\"line\">      var child;</span><br><span class=\"line\">      if (!depth || level + 1 &lt; depth) &#123;</span><br><span class=\"line\">        child = hierarchicalList(level + 1, cat._id);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      var isCurrent = false;</span><br><span class=\"line\">      if (showCurrent &amp;&amp; self.page) &#123;</span><br><span class=\"line\">        for (var j = 0; j &lt; cat.length; j++) &#123;</span><br><span class=\"line\">          var post = cat.posts.data[j];</span><br><span class=\"line\">          if (post &amp;&amp; post._id === self.page._id) &#123;</span><br><span class=\"line\">            isCurrent = true;</span><br><span class=\"line\">            break;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        // special case: category page</span><br><span class=\"line\">        if (!isCurrent &amp;&amp; self.page.base) &#123;</span><br><span class=\"line\">          if (self.page.base.indexOf(cat.path) === 0) &#123;</span><br><span class=\"line\">            isCurrent = true;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      var additionalClassName = &apos;&apos;;</span><br><span class=\"line\">      if (child &amp;&amp; childrenIndicator) &#123;</span><br><span class=\"line\">        additionalClassName = &apos; &apos; + childrenIndicator;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      result += &apos;&lt;li class=&quot;&apos; + className + &apos;-list-item&apos; + additionalClassName + &apos;&quot;&gt;&apos;;</span><br><span class=\"line\">      result += &apos;&lt;a class=&quot;&apos; + className + &apos;-list-link&apos; + (isCurrent ? &apos; current&apos; : &apos;&apos;) + &apos;&quot; href=&quot;&apos; + self.url_for(cat.path) + suffix + &apos;&quot;&gt;&apos;;</span><br><span class=\"line\">      result += transform ? transform(cat.name) : cat.name;</span><br><span class=\"line\">      result += &apos;&lt;/a&gt;&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">      if (showCount) &#123;</span><br><span class=\"line\">        result += &apos;&lt;span class=&quot;&apos; + className + &apos;-list-count&quot;&gt;&apos; + cat.length + &apos;&lt;/span&gt;&apos;;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      if (child) &#123;</span><br><span class=\"line\">        result += &apos;&lt;ul class=&quot;&apos; + className + &apos;-list-child&quot;&gt;&apos; + child + &apos;&lt;/ul&gt;&apos;;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      result += &apos;&lt;/li&gt;&apos;;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    return result;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  function flatList(level, parent) &#123;</span><br><span class=\"line\">    var result = &apos;&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">    prepareQuery(parent).forEach(function(cat, i) &#123;</span><br><span class=\"line\">      if (i || level) result += separator;</span><br><span class=\"line\"></span><br><span class=\"line\">      result += &apos;&lt;a class=&quot;&apos; + className + &apos;-link&quot; href=&quot;&apos; + self.url_for(cat.path) + suffix + &apos;&quot;&gt;&apos;;</span><br><span class=\"line\">      result += transform ? transform(cat.name) : cat.name;</span><br><span class=\"line\"></span><br><span class=\"line\">      if (showCount) &#123;</span><br><span class=\"line\">        result += &apos;&lt;span class=&quot;&apos; + className + &apos;-count&quot;&gt;&apos; + cat.length + &apos;&lt;/span&gt;&apos;;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      result += &apos;&lt;/a&gt;&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">      if (!depth || level + 1 &lt; depth) &#123;</span><br><span class=\"line\">        result += flatList(level + 1, cat._id);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    return result;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  if (style === &apos;list&apos;) &#123;</span><br><span class=\"line\">    result += &apos;&lt;ul class=&quot;&apos; + className + &apos;-list&quot;&gt;&apos; + hierarchicalList(0) + &apos;&lt;/ul&gt;&apos;;</span><br><span class=\"line\">  &#125; else &#123;</span><br><span class=\"line\">    result += flatList(0);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  return result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports = listCategoriesHelper;</span><br></pre></td></tr></table></figure><p></p>\n<p>分页插件的实现<br>新增 ming_paginator.js文件<br>复制如下内容进去<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&apos;use strict&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">function paginatorHelper(options) &#123;</span><br><span class=\"line\">  options = options || &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  var current = options.current || this.page.current || 0;</span><br><span class=\"line\">  var total = options.total || this.page.total || 1;</span><br><span class=\"line\">  var endSize = options.hasOwnProperty(&apos;end_size&apos;) ? +options.end_size : 1;</span><br><span class=\"line\">  var midSize = options.hasOwnProperty(&apos;mid_size&apos;) ? +options.mid_size : 2;</span><br><span class=\"line\">  var space = options.hasOwnProperty(&apos;space&apos;) ? options.space : &apos;&amp;hellip;&apos;;</span><br><span class=\"line\">  var base = options.base || this.page.base || &apos;&apos;;</span><br><span class=\"line\">  var format = options.format || this.config.pagination_dir + &apos;/%d/&apos;;</span><br><span class=\"line\">  var prevText = options.prev_text || &apos;Prev&apos;;</span><br><span class=\"line\">  var nextText = options.next_text || &apos;Next&apos;;</span><br><span class=\"line\">  var prevNext = options.hasOwnProperty(&apos;prev_next&apos;) ? options.prev_next : true;</span><br><span class=\"line\">  var transform = options.transform;</span><br><span class=\"line\">  var self = this;</span><br><span class=\"line\">  var result = &apos;&apos;;</span><br><span class=\"line\">  var i;</span><br><span class=\"line\">  //配合 oss 使用index.html</span><br><span class=\"line\">  var suffix = &quot;index.html&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    if (!current) return &apos;&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">  var currentPage = &apos;&lt;span class=&quot;page-number current&quot;&gt;&apos; +</span><br><span class=\"line\">    (transform ? transform(current) : current) +</span><br><span class=\"line\">    &apos;&lt;/span&gt;&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">  function link(i) &#123;</span><br><span class=\"line\">    return self.url_for(i === 1 ? base : base + format.replace(&apos;%d&apos;, i));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  function pageLink(i) &#123;</span><br><span class=\"line\">    return &apos;&lt;a class=&quot;page-number&quot; href=&quot;&apos; + link(i) + suffix +&apos;&quot;&gt;&apos; +</span><br><span class=\"line\">      (transform ? transform(i) : i) +</span><br><span class=\"line\">      &apos;&lt;/a&gt;&apos;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  // Display the link to the previous page</span><br><span class=\"line\">  if (prevNext &amp;&amp; current &gt; 1) &#123;</span><br><span class=\"line\">    result += &apos;&lt;a class=&quot;extend prev&quot; rel=&quot;prev&quot; href=&quot;&apos; + link(current - 1) + suffix +&apos;&quot;&gt;&apos; + prevText + &apos;&lt;/a&gt;&apos;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  if (options.show_all) &#123;</span><br><span class=\"line\">    // Display pages on the left side of the current page</span><br><span class=\"line\">    for (i = 1; i &lt; current; i++) &#123;</span><br><span class=\"line\">      result += pageLink(i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // Display the current page</span><br><span class=\"line\">    result += currentPage;</span><br><span class=\"line\"></span><br><span class=\"line\">    // Display pages on the right side of the current page</span><br><span class=\"line\">    for (i = current + 1; i &lt;= total; i++) &#123;</span><br><span class=\"line\">      result += pageLink(i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125; else &#123;</span><br><span class=\"line\">    // It&apos;s too complicated. May need refactor.</span><br><span class=\"line\">    var leftEnd = current &lt;= endSize ? current - 1 : endSize;</span><br><span class=\"line\">    var rightEnd = total - current &lt;= endSize ? current + 1 : total - endSize + 1;</span><br><span class=\"line\">    var leftMid = current - midSize &lt;= endSize ? leftEnd + 1 : current - midSize;</span><br><span class=\"line\">    var rightMid = current + midSize + endSize &gt; total ? rightEnd - 1 : current + midSize;</span><br><span class=\"line\">    var spaceHtml = &apos;&lt;span class=&quot;space&quot;&gt;&apos; + space + &apos;&lt;/span&gt;&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">    // Display pages on the left edge</span><br><span class=\"line\">    for (i = 1; i &lt;= leftEnd; i++) &#123;</span><br><span class=\"line\">      result += pageLink(i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // Display spaces between edges and middle pages</span><br><span class=\"line\">    if (space &amp;&amp; current - endSize - midSize &gt; 1) &#123;</span><br><span class=\"line\">      result += spaceHtml;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // Display left middle pages</span><br><span class=\"line\">    if (leftMid &gt; leftEnd) &#123;</span><br><span class=\"line\">      for (i = leftMid; i &lt; current; i++) &#123;</span><br><span class=\"line\">        result += pageLink(i);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // Display the current page</span><br><span class=\"line\">    result += currentPage;</span><br><span class=\"line\"></span><br><span class=\"line\">    // Display right middle pages</span><br><span class=\"line\">    if (rightMid &lt; rightEnd) &#123;</span><br><span class=\"line\">      for (i = current + 1; i &lt;= rightMid; i++) &#123;</span><br><span class=\"line\">        result += pageLink(i);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // Display spaces between edges and middle pages</span><br><span class=\"line\">    if (space &amp;&amp; total - endSize - midSize &gt; current) &#123;</span><br><span class=\"line\">      result += spaceHtml;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // Dispaly pages on the right edge</span><br><span class=\"line\">    for (i = rightEnd; i &lt;= total; i++) &#123;</span><br><span class=\"line\">      result += pageLink(i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  // Display the link to the next page</span><br><span class=\"line\">  if (prevNext &amp;&amp; current &lt; total) &#123;</span><br><span class=\"line\">    result += &apos;&lt;a class=&quot;extend next&quot; rel=&quot;next&quot; href=&quot;&apos; + link(current + 1) + suffix+ &apos;&quot;&gt;&apos; + nextText + &apos;&lt;/a&gt;&apos;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  return result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports = paginatorHelper;</span><br></pre></td></tr></table></figure><p></p>\n<p>标签插件的实现<br>新增 ming_tag.js文件<br>复制如下内容进去<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br><span class=\"line\">335</span><br><span class=\"line\">336</span><br><span class=\"line\">337</span><br><span class=\"line\">338</span><br><span class=\"line\">339</span><br><span class=\"line\">340</span><br><span class=\"line\">341</span><br><span class=\"line\">342</span><br><span class=\"line\">343</span><br><span class=\"line\">344</span><br><span class=\"line\">345</span><br><span class=\"line\">346</span><br><span class=\"line\">347</span><br><span class=\"line\">348</span><br><span class=\"line\">349</span><br><span class=\"line\">350</span><br><span class=\"line\">351</span><br><span class=\"line\">352</span><br><span class=\"line\">353</span><br><span class=\"line\">354</span><br><span class=\"line\">355</span><br><span class=\"line\">356</span><br><span class=\"line\">357</span><br><span class=\"line\">358</span><br><span class=\"line\">359</span><br><span class=\"line\">360</span><br><span class=\"line\">361</span><br><span class=\"line\">362</span><br><span class=\"line\">363</span><br><span class=\"line\">364</span><br><span class=\"line\">365</span><br><span class=\"line\">366</span><br><span class=\"line\">367</span><br><span class=\"line\">368</span><br><span class=\"line\">369</span><br><span class=\"line\">370</span><br><span class=\"line\">371</span><br><span class=\"line\">372</span><br><span class=\"line\">373</span><br><span class=\"line\">374</span><br><span class=\"line\">375</span><br><span class=\"line\">376</span><br><span class=\"line\">377</span><br><span class=\"line\">378</span><br><span class=\"line\">379</span><br><span class=\"line\">380</span><br><span class=\"line\">381</span><br><span class=\"line\">382</span><br><span class=\"line\">383</span><br><span class=\"line\">384</span><br><span class=\"line\">385</span><br><span class=\"line\">386</span><br><span class=\"line\">387</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&apos;use strict&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">// https://github.com/imathis/hsl-picker/blob/master/assets/javascripts/modules/color.coffee</span><br><span class=\"line\">var rHex3 = /^#([0-9a-f]&#123;3&#125;)$/;</span><br><span class=\"line\">var rHex6 = /^#([0-9a-f]&#123;6&#125;)$/;</span><br><span class=\"line\">var rRGB = /^rgba?\\(\\s*(\\d&#123;1,3&#125;)\\s*,\\s*(\\d&#123;1,3&#125;)\\s*,\\s*(\\d&#123;1,3&#125;)\\s*,?\\s*(0?\\.?\\d+)?\\s*\\)$/;</span><br><span class=\"line\">var rHSL = /^hsla?\\(\\s*(\\d&#123;1,3&#125;)\\s*,\\s*(\\d&#123;1,3&#125;)%\\s*,\\s*(\\d&#123;1,3&#125;)%\\s*,?\\s*(0?\\.?\\d+)?\\s*\\)$/;</span><br><span class=\"line\"></span><br><span class=\"line\">// http://www.w3.org/TR/css3-color/#svg-color</span><br><span class=\"line\">var colorNames = &#123;</span><br><span class=\"line\">    aliceblue: &#123;r: 240, g: 248, b: 255, a: 1&#125;,</span><br><span class=\"line\">    antiquewhite: &#123;r: 250, g: 235, b: 215, a: 1&#125;,</span><br><span class=\"line\">    aqua: &#123;r: 0, g: 255, b: 255, a: 1&#125;,</span><br><span class=\"line\">    aquamarine: &#123;r: 127, g: 255, b: 212, a: 1&#125;,</span><br><span class=\"line\">    azure: &#123;r: 240, g: 255, b: 255, a: 1&#125;,</span><br><span class=\"line\">    beige: &#123;r: 245, g: 245, b: 220, a: 1&#125;,</span><br><span class=\"line\">    bisque: &#123;r: 255, g: 228, b: 196, a: 1&#125;,</span><br><span class=\"line\">    black: &#123;r: 0, g: 0, b: 0, a: 1&#125;,</span><br><span class=\"line\">    blanchedalmond: &#123;r: 255, g: 235, b: 205, a: 1&#125;,</span><br><span class=\"line\">    blue: &#123;r: 0, g: 0, b: 255, a: 1&#125;,</span><br><span class=\"line\">    blueviolet: &#123;r: 138, g: 43, b: 226, a: 1&#125;,</span><br><span class=\"line\">    brown: &#123;r: 165, g: 42, b: 42, a: 1&#125;,</span><br><span class=\"line\">    burlywood: &#123;r: 222, g: 184, b: 135, a: 1&#125;,</span><br><span class=\"line\">    cadetblue: &#123;r: 95, g: 158, b: 160, a: 1&#125;,</span><br><span class=\"line\">    chartreuse: &#123;r: 127, g: 255, b: 0, a: 1&#125;,</span><br><span class=\"line\">    chocolate: &#123;r: 210, g: 105, b: 30, a: 1&#125;,</span><br><span class=\"line\">    coral: &#123;r: 255, g: 127, b: 80, a: 1&#125;,</span><br><span class=\"line\">    cornflowerblue: &#123;r: 100, g: 149, b: 237, a: 1&#125;,</span><br><span class=\"line\">    cornsilk: &#123;r: 255, g: 248, b: 220, a: 1&#125;,</span><br><span class=\"line\">    crimson: &#123;r: 220, g: 20, b: 60, a: 1&#125;,</span><br><span class=\"line\">    cyan: &#123;r: 0, g: 255, b: 255, a: 1&#125;,</span><br><span class=\"line\">    darkblue: &#123;r: 0, g: 0, b: 139, a: 1&#125;,</span><br><span class=\"line\">    darkcyan: &#123;r: 0, g: 139, b: 139, a: 1&#125;,</span><br><span class=\"line\">    darkgoldenrod: &#123;r: 184, g: 134, b: 11, a: 1&#125;,</span><br><span class=\"line\">    darkgray: &#123;r: 169, g: 169, b: 169, a: 1&#125;,</span><br><span class=\"line\">    darkgreen: &#123;r: 0, g: 100, b: 0, a: 1&#125;,</span><br><span class=\"line\">    darkgrey: &#123;r: 169, g: 169, b: 169, a: 1&#125;,</span><br><span class=\"line\">    darkkhaki: &#123;r: 189, g: 183, b: 107, a: 1&#125;,</span><br><span class=\"line\">    darkmagenta: &#123;r: 139, g: 0, b: 139, a: 1&#125;,</span><br><span class=\"line\">    darkolivegreen: &#123;r: 85, g: 107, b: 47, a: 1&#125;,</span><br><span class=\"line\">    darkorange: &#123;r: 255, g: 140, b: 0, a: 1&#125;,</span><br><span class=\"line\">    darkorchid: &#123;r: 153, g: 50, b: 204, a: 1&#125;,</span><br><span class=\"line\">    darkred: &#123;r: 139, g: 0, b: 0, a: 1&#125;,</span><br><span class=\"line\">    darksalmon: &#123;r: 233, g: 150, b: 122, a: 1&#125;,</span><br><span class=\"line\">    darkseagreen: &#123;r: 143, g: 188, b: 143, a: 1&#125;,</span><br><span class=\"line\">    darkslateblue: &#123;r: 72, g: 61, b: 139, a: 1&#125;,</span><br><span class=\"line\">    darkslategray: &#123;r: 47, g: 79, b: 79, a: 1&#125;,</span><br><span class=\"line\">    darkslategrey: &#123;r: 47, g: 79, b: 79, a: 1&#125;,</span><br><span class=\"line\">    darkturquoise: &#123;r: 0, g: 206, b: 209, a: 1&#125;,</span><br><span class=\"line\">    darkviolet: &#123;r: 148, g: 0, b: 211, a: 1&#125;,</span><br><span class=\"line\">    deeppink: &#123;r: 255, g: 20, b: 147, a: 1&#125;,</span><br><span class=\"line\">    deepskyblue: &#123;r: 0, g: 191, b: 255, a: 1&#125;,</span><br><span class=\"line\">    dimgray: &#123;r: 105, g: 105, b: 105, a: 1&#125;,</span><br><span class=\"line\">    dimgrey: &#123;r: 105, g: 105, b: 105, a: 1&#125;,</span><br><span class=\"line\">    dodgerblue: &#123;r: 30, g: 144, b: 255, a: 1&#125;,</span><br><span class=\"line\">    firebrick: &#123;r: 178, g: 34, b: 34, a: 1&#125;,</span><br><span class=\"line\">    floralwhite: &#123;r: 255, g: 250, b: 240, a: 1&#125;,</span><br><span class=\"line\">    forestgreen: &#123;r: 34, g: 139, b: 34, a: 1&#125;,</span><br><span class=\"line\">    fuchsia: &#123;r: 255, g: 0, b: 255, a: 1&#125;,</span><br><span class=\"line\">    gainsboro: &#123;r: 220, g: 220, b: 220, a: 1&#125;,</span><br><span class=\"line\">    ghostwhite: &#123;r: 248, g: 248, b: 255, a: 1&#125;,</span><br><span class=\"line\">    gold: &#123;r: 255, g: 215, b: 0, a: 1&#125;,</span><br><span class=\"line\">    goldenrod: &#123;r: 218, g: 165, b: 32, a: 1&#125;,</span><br><span class=\"line\">    gray: &#123;r: 128, g: 128, b: 128, a: 1&#125;,</span><br><span class=\"line\">    green: &#123;r: 0, g: 128, b: 0, a: 1&#125;,</span><br><span class=\"line\">    greenyellow: &#123;r: 173, g: 255, b: 47, a: 1&#125;,</span><br><span class=\"line\">    grey: &#123;r: 128, g: 128, b: 128, a: 1&#125;,</span><br><span class=\"line\">    honeydew: &#123;r: 240, g: 255, b: 240, a: 1&#125;,</span><br><span class=\"line\">    hotpink: &#123;r: 255, g: 105, b: 180, a: 1&#125;,</span><br><span class=\"line\">    indianred: &#123;r: 205, g: 92, b: 92, a: 1&#125;,</span><br><span class=\"line\">    indigo: &#123;r: 75, g: 0, b: 130, a: 1&#125;,</span><br><span class=\"line\">    ivory: &#123;r: 255, g: 255, b: 240, a: 1&#125;,</span><br><span class=\"line\">    khaki: &#123;r: 240, g: 230, b: 140, a: 1&#125;,</span><br><span class=\"line\">    lavender: &#123;r: 230, g: 230, b: 250, a: 1&#125;,</span><br><span class=\"line\">    lavenderblush: &#123;r: 255, g: 240, b: 245, a: 1&#125;,</span><br><span class=\"line\">    lawngreen: &#123;r: 124, g: 252, b: 0, a: 1&#125;,</span><br><span class=\"line\">    lemonchiffon: &#123;r: 255, g: 250, b: 205, a: 1&#125;,</span><br><span class=\"line\">    lightblue: &#123;r: 173, g: 216, b: 230, a: 1&#125;,</span><br><span class=\"line\">    lightcoral: &#123;r: 240, g: 128, b: 128, a: 1&#125;,</span><br><span class=\"line\">    lightcyan: &#123;r: 224, g: 255, b: 255, a: 1&#125;,</span><br><span class=\"line\">    lightgoldenrodyellow: &#123;r: 250, g: 250, b: 210, a: 1&#125;,</span><br><span class=\"line\">    lightgray: &#123;r: 211, g: 211, b: 211, a: 1&#125;,</span><br><span class=\"line\">    lightgreen: &#123;r: 144, g: 238, b: 144, a: 1&#125;,</span><br><span class=\"line\">    lightgrey: &#123;r: 211, g: 211, b: 211, a: 1&#125;,</span><br><span class=\"line\">    lightpink: &#123;r: 255, g: 182, b: 193, a: 1&#125;,</span><br><span class=\"line\">    lightsalmon: &#123;r: 255, g: 160, b: 122, a: 1&#125;,</span><br><span class=\"line\">    lightseagreen: &#123;r: 32, g: 178, b: 170, a: 1&#125;,</span><br><span class=\"line\">    lightskyblue: &#123;r: 135, g: 206, b: 250, a: 1&#125;,</span><br><span class=\"line\">    lightslategray: &#123;r: 119, g: 136, b: 153, a: 1&#125;,</span><br><span class=\"line\">    lightslategrey: &#123;r: 119, g: 136, b: 153, a: 1&#125;,</span><br><span class=\"line\">    lightsteelblue: &#123;r: 176, g: 196, b: 222, a: 1&#125;,</span><br><span class=\"line\">    lightyellow: &#123;r: 255, g: 255, b: 224, a: 1&#125;,</span><br><span class=\"line\">    lime: &#123;r: 0, g: 255, b: 0, a: 1&#125;,</span><br><span class=\"line\">    limegreen: &#123;r: 50, g: 205, b: 50, a: 1&#125;,</span><br><span class=\"line\">    linen: &#123;r: 250, g: 240, b: 230, a: 1&#125;,</span><br><span class=\"line\">    magenta: &#123;r: 255, g: 0, b: 255, a: 1&#125;,</span><br><span class=\"line\">    maroon: &#123;r: 128, g: 0, b: 0, a: 1&#125;,</span><br><span class=\"line\">    mediumaquamarine: &#123;r: 102, g: 205, b: 170, a: 1&#125;,</span><br><span class=\"line\">    mediumblue: &#123;r: 0, g: 0, b: 205, a: 1&#125;,</span><br><span class=\"line\">    mediumorchid: &#123;r: 186, g: 85, b: 211, a: 1&#125;,</span><br><span class=\"line\">    mediumpurple: &#123;r: 147, g: 112, b: 219, a: 1&#125;,</span><br><span class=\"line\">    mediumseagreen: &#123;r: 60, g: 179, b: 113, a: 1&#125;,</span><br><span class=\"line\">    mediumslateblue: &#123;r: 123, g: 104, b: 238, a: 1&#125;,</span><br><span class=\"line\">    mediumspringgreen: &#123;r: 0, g: 250, b: 154, a: 1&#125;,</span><br><span class=\"line\">    mediumturquoise: &#123;r: 72, g: 209, b: 204, a: 1&#125;,</span><br><span class=\"line\">    mediumvioletred: &#123;r: 199, g: 21, b: 133, a: 1&#125;,</span><br><span class=\"line\">    midnightblue: &#123;r: 25, g: 25, b: 112, a: 1&#125;,</span><br><span class=\"line\">    mintcream: &#123;r: 245, g: 255, b: 250, a: 1&#125;,</span><br><span class=\"line\">    mistyrose: &#123;r: 255, g: 228, b: 225, a: 1&#125;,</span><br><span class=\"line\">    moccasin: &#123;r: 255, g: 228, b: 181, a: 1&#125;,</span><br><span class=\"line\">    navajowhite: &#123;r: 255, g: 222, b: 173, a: 1&#125;,</span><br><span class=\"line\">    navy: &#123;r: 0, g: 0, b: 128, a: 1&#125;,</span><br><span class=\"line\">    oldlace: &#123;r: 253, g: 245, b: 230, a: 1&#125;,</span><br><span class=\"line\">    olive: &#123;r: 128, g: 128, b: 0, a: 1&#125;,</span><br><span class=\"line\">    olivedrab: &#123;r: 107, g: 142, b: 35, a: 1&#125;,</span><br><span class=\"line\">    orange: &#123;r: 255, g: 165, b: 0, a: 1&#125;,</span><br><span class=\"line\">    orangered: &#123;r: 255, g: 69, b: 0, a: 1&#125;,</span><br><span class=\"line\">    orchid: &#123;r: 218, g: 112, b: 214, a: 1&#125;,</span><br><span class=\"line\">    palegoldenrod: &#123;r: 238, g: 232, b: 170, a: 1&#125;,</span><br><span class=\"line\">    palegreen: &#123;r: 152, g: 251, b: 152, a: 1&#125;,</span><br><span class=\"line\">    paleturquoise: &#123;r: 175, g: 238, b: 238, a: 1&#125;,</span><br><span class=\"line\">    palevioletred: &#123;r: 219, g: 112, b: 147, a: 1&#125;,</span><br><span class=\"line\">    papayawhip: &#123;r: 255, g: 239, b: 213, a: 1&#125;,</span><br><span class=\"line\">    peachpuff: &#123;r: 255, g: 218, b: 185, a: 1&#125;,</span><br><span class=\"line\">    peru: &#123;r: 205, g: 133, b: 63, a: 1&#125;,</span><br><span class=\"line\">    pink: &#123;r: 255, g: 192, b: 203, a: 1&#125;,</span><br><span class=\"line\">    plum: &#123;r: 221, g: 160, b: 221, a: 1&#125;,</span><br><span class=\"line\">    powderblue: &#123;r: 176, g: 224, b: 230, a: 1&#125;,</span><br><span class=\"line\">    purple: &#123;r: 128, g: 0, b: 128, a: 1&#125;,</span><br><span class=\"line\">    red: &#123;r: 255, g: 0, b: 0, a: 1&#125;,</span><br><span class=\"line\">    rosybrown: &#123;r: 188, g: 143, b: 143, a: 1&#125;,</span><br><span class=\"line\">    royalblue: &#123;r: 65, g: 105, b: 225, a: 1&#125;,</span><br><span class=\"line\">    saddlebrown: &#123;r: 139, g: 69, b: 19, a: 1&#125;,</span><br><span class=\"line\">    salmon: &#123;r: 250, g: 128, b: 114, a: 1&#125;,</span><br><span class=\"line\">    sandybrown: &#123;r: 244, g: 164, b: 96, a: 1&#125;,</span><br><span class=\"line\">    seagreen: &#123;r: 46, g: 139, b: 87, a: 1&#125;,</span><br><span class=\"line\">    seashell: &#123;r: 255, g: 245, b: 238, a: 1&#125;,</span><br><span class=\"line\">    sienna: &#123;r: 160, g: 82, b: 45, a: 1&#125;,</span><br><span class=\"line\">    silver: &#123;r: 192, g: 192, b: 192, a: 1&#125;,</span><br><span class=\"line\">    skyblue: &#123;r: 135, g: 206, b: 235, a: 1&#125;,</span><br><span class=\"line\">    slateblue: &#123;r: 106, g: 90, b: 205, a: 1&#125;,</span><br><span class=\"line\">    slategray: &#123;r: 112, g: 128, b: 144, a: 1&#125;,</span><br><span class=\"line\">    slategrey: &#123;r: 112, g: 128, b: 144, a: 1&#125;,</span><br><span class=\"line\">    snow: &#123;r: 255, g: 250, b: 250, a: 1&#125;,</span><br><span class=\"line\">    springgreen: &#123;r: 0, g: 255, b: 127, a: 1&#125;,</span><br><span class=\"line\">    steelblue: &#123;r: 70, g: 130, b: 180, a: 1&#125;,</span><br><span class=\"line\">    tan: &#123;r: 210, g: 180, b: 140, a: 1&#125;,</span><br><span class=\"line\">    teal: &#123;r: 0, g: 128, b: 128, a: 1&#125;,</span><br><span class=\"line\">    thistle: &#123;r: 216, g: 191, b: 216, a: 1&#125;,</span><br><span class=\"line\">    tomato: &#123;r: 255, g: 99, b: 71, a: 1&#125;,</span><br><span class=\"line\">    turquoise: &#123;r: 64, g: 224, b: 208, a: 1&#125;,</span><br><span class=\"line\">    violet: &#123;r: 238, g: 130, b: 238, a: 1&#125;,</span><br><span class=\"line\">    wheat: &#123;r: 245, g: 222, b: 179, a: 1&#125;,</span><br><span class=\"line\">    white: &#123;r: 255, g: 255, b: 255, a: 1&#125;,</span><br><span class=\"line\">    whitesmoke: &#123;r: 245, g: 245, b: 245, a: 1&#125;,</span><br><span class=\"line\">    yellow: &#123;r: 255, g: 255, b: 0, a: 1&#125;,</span><br><span class=\"line\">    yellowgreen: &#123;r: 154, g: 205, b: 50, a: 1&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">function tagcloudHelper(tags, options) &#123;</span><br><span class=\"line\">    if (!options &amp;&amp; (!tags || !tags.hasOwnProperty(&apos;length&apos;))) &#123;</span><br><span class=\"line\">        options = tags;</span><br><span class=\"line\">        tags = this.site.tags;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    if (!tags || !tags.length) return &apos;&apos;;</span><br><span class=\"line\">    options = options || &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    var min = options.min_font || 10;</span><br><span class=\"line\">    var max = options.max_font || 20;</span><br><span class=\"line\">    var orderby = options.orderby || &apos;name&apos;;</span><br><span class=\"line\">    var order = options.order || 1;</span><br><span class=\"line\">    var unit = options.unit || &apos;px&apos;;</span><br><span class=\"line\">    var color = options.color;</span><br><span class=\"line\">    var transform = options.transform;</span><br><span class=\"line\">    var separator = options.separator || &apos; &apos;;</span><br><span class=\"line\">    var result = [];</span><br><span class=\"line\">    var self = this;</span><br><span class=\"line\">    var startColor, endColor;</span><br><span class=\"line\"></span><br><span class=\"line\">    if (color) &#123;</span><br><span class=\"line\">        startColor = new Color(options.start_color);</span><br><span class=\"line\">        endColor = new Color(options.end_color);</span><br><span class=\"line\"></span><br><span class=\"line\">        if (!startColor || !endColor) color = false;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // Sort the tags</span><br><span class=\"line\">    if (orderby === &apos;random&apos; || orderby === &apos;rand&apos;) &#123;</span><br><span class=\"line\">        tags = tags.random();</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        tags = tags.sort(orderby, order);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // Ignore tags with zero posts</span><br><span class=\"line\">    tags = tags.filter(function(tag) &#123;</span><br><span class=\"line\">        return tag.length;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    // Limit the number of tags</span><br><span class=\"line\">    if (options.amount) &#123;</span><br><span class=\"line\">        tags = tags.limit(options.amount);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    var sizes = [];</span><br><span class=\"line\"></span><br><span class=\"line\">    tags.sort(&apos;length&apos;).forEach(function(tag) &#123;</span><br><span class=\"line\">        var length = tag.length;</span><br><span class=\"line\">        if (~sizes.indexOf(length)) return;</span><br><span class=\"line\"></span><br><span class=\"line\">        sizes.push(length);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    var length = sizes.length - 1;</span><br><span class=\"line\"></span><br><span class=\"line\">    tags.forEach(function(tag) &#123;</span><br><span class=\"line\">        var ratio = length ? sizes.indexOf(tag.length) / length : 0;</span><br><span class=\"line\">        var size = min + ((max - min) * ratio);</span><br><span class=\"line\">        var style = &apos;font-size: &apos; + parseFloat(size.toFixed(2)) + unit + &apos;;&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">        if (color) &#123;</span><br><span class=\"line\">            var midColor = startColor.mix(endColor, ratio);</span><br><span class=\"line\">            style += &apos; color: &apos; + midColor.toString();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        result.push(</span><br><span class=\"line\">            // 增加/index.html  跳转地址   </span><br><span class=\"line\">            &apos;&lt;a href=&quot;&apos; + self.url_for(tag.path) + &apos;index.html&quot; style=&quot;&apos; + style + &apos;&quot;&gt;&apos; +</span><br><span class=\"line\">            (transform ? transform(tag.name) : tag.name) +</span><br><span class=\"line\">            &apos;&lt;/a&gt;&apos;</span><br><span class=\"line\">        );</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    return result.join(separator);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function Color(color) &#123;</span><br><span class=\"line\">    if (typeof color === &apos;object&apos;) &#123;</span><br><span class=\"line\">        this.r = color.r;</span><br><span class=\"line\">        this.g = color.g;</span><br><span class=\"line\">        this.b = color.b;</span><br><span class=\"line\">        this.a = color.a;</span><br><span class=\"line\">    &#125; else if (typeof color === &apos;string&apos;) &#123;</span><br><span class=\"line\">        this.parse(color);</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        throw new TypeError(&apos;color is required!&apos;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    if (this.r &lt; 0 || this.r &gt; 255 ||</span><br><span class=\"line\">        this.g &lt; 0 || this.g &gt; 255 ||</span><br><span class=\"line\">        this.b &lt; 0 || this.b &gt; 255 ||</span><br><span class=\"line\">        this.a &lt; 0 || this.a &gt; 1) &#123;</span><br><span class=\"line\">        throw new Error(color + &apos; is invalid.&apos;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Color.prototype.parse = function(color) &#123;</span><br><span class=\"line\">    color = color.toLowerCase();</span><br><span class=\"line\"></span><br><span class=\"line\">    if (colorNames.hasOwnProperty(color)) &#123;</span><br><span class=\"line\">        var obj = colorNames[color];</span><br><span class=\"line\"></span><br><span class=\"line\">        this.r = obj.r;</span><br><span class=\"line\">        this.g = obj.g;</span><br><span class=\"line\">        this.b = obj.b;</span><br><span class=\"line\">        this.a = obj.a;</span><br><span class=\"line\"></span><br><span class=\"line\">        return;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    var match, txt, code;</span><br><span class=\"line\"></span><br><span class=\"line\">    if (rHex3.test(color)) &#123;</span><br><span class=\"line\">        txt = color.substring(1);</span><br><span class=\"line\">        code = parseInt(txt, 16);</span><br><span class=\"line\"></span><br><span class=\"line\">        this.r = ((code &amp; 0xF00) &gt;&gt; 8) * 17;</span><br><span class=\"line\">        this.g = ((code &amp; 0xF0) &gt;&gt; 4) * 17;</span><br><span class=\"line\">        this.b = (code &amp; 0xF) * 17;</span><br><span class=\"line\">        this.a = 1;</span><br><span class=\"line\">    &#125; else if (rHex6.test(color)) &#123;</span><br><span class=\"line\">        txt = color.substring(1);</span><br><span class=\"line\">        code = parseInt(txt, 16);</span><br><span class=\"line\"></span><br><span class=\"line\">        this.r = (code &amp; 0xFF0000) &gt;&gt; 16;</span><br><span class=\"line\">        this.g = (code &amp; 0xFF00) &gt;&gt; 8;</span><br><span class=\"line\">        this.b = code &amp; 0xFF;</span><br><span class=\"line\">        this.a = 1;</span><br><span class=\"line\">    &#125; else if (rRGB.test(color)) &#123;</span><br><span class=\"line\">        match = color.match(rRGB);</span><br><span class=\"line\"></span><br><span class=\"line\">        this.r = match[1] | 0;</span><br><span class=\"line\">        this.g = match[2] | 0;</span><br><span class=\"line\">        this.b = match[3] | 0;</span><br><span class=\"line\">        this.a = match[4] ? +match[4] : 1;</span><br><span class=\"line\">    &#125; else if (rHSL.test(color)) &#123;</span><br><span class=\"line\">        match = color.match(rHSL);</span><br><span class=\"line\"></span><br><span class=\"line\">        var h = +match[1] / 360;</span><br><span class=\"line\">        var s = +match[2] / 100;</span><br><span class=\"line\">        var l = +match[3] / 100;</span><br><span class=\"line\"></span><br><span class=\"line\">        this.a = match[4] ? +match[4] : 1;</span><br><span class=\"line\"></span><br><span class=\"line\">        if (!s) &#123;</span><br><span class=\"line\">            this.r = this.g = this.b = l * 255;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        var q = l &lt; 0.5 ? l * (1 + s) : l + s - (l * s);</span><br><span class=\"line\">        var p = (2 * l) - q;</span><br><span class=\"line\"></span><br><span class=\"line\">        var rt = h + (1 / 3);</span><br><span class=\"line\">        var gt = h;</span><br><span class=\"line\">        var bt = h - (1 / 3);</span><br><span class=\"line\"></span><br><span class=\"line\">        this.r = convertHue(p, q, rt);</span><br><span class=\"line\">        this.g = convertHue(p, q, gt);</span><br><span class=\"line\">        this.b = convertHue(p, q, bt);</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        throw new Error(color + &apos; is not a supported color format.&apos;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">Color.prototype.toString = function() &#123;</span><br><span class=\"line\">    if (this.a === 1) &#123;</span><br><span class=\"line\">        var r = convertRGB(this.r);</span><br><span class=\"line\">        var g = convertRGB(this.g);</span><br><span class=\"line\">        var b = convertRGB(this.b);</span><br><span class=\"line\"></span><br><span class=\"line\">        if (this.r % 17 || this.g % 17 || this.b % 17) &#123;</span><br><span class=\"line\">            return &apos;#&apos; + r + g + b;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        return &apos;#&apos; + r[0] + g[0] + b[0];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    return &apos;rgba(&apos; + this.r + &apos;, &apos; + this.g + &apos;, &apos; + this.b + &apos;, &apos; + parseFloat(this.a.toFixed(2)) + &apos;)&apos;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">Color.prototype.mix = function(color, ratio) &#123;</span><br><span class=\"line\">    switch (ratio) &#123;</span><br><span class=\"line\">        case 0:</span><br><span class=\"line\">            return new Color(this);</span><br><span class=\"line\"></span><br><span class=\"line\">        case 1:</span><br><span class=\"line\">            return new Color(color);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    return new Color(&#123;</span><br><span class=\"line\">        r: Math.round(mixValue(this.r, color.r, ratio)),</span><br><span class=\"line\">        g: Math.round(mixValue(this.g, color.g, ratio)),</span><br><span class=\"line\">        b: Math.round(mixValue(this.b, color.b, ratio)),</span><br><span class=\"line\">        a: mixValue(this.a, color.a, ratio)</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">function convertHue(p, q, h) &#123;</span><br><span class=\"line\">    if (h &lt; 0) h++;</span><br><span class=\"line\">    if (h &gt; 1) h--;</span><br><span class=\"line\"></span><br><span class=\"line\">    var color;</span><br><span class=\"line\"></span><br><span class=\"line\">    if (h * 6 &lt; 1) &#123;</span><br><span class=\"line\">        color = p + ((q - p) * h * 6);</span><br><span class=\"line\">    &#125; else if (h * 2 &lt; 1) &#123;</span><br><span class=\"line\">        color = q;</span><br><span class=\"line\">    &#125; else if (h * 3 &lt; 2) &#123;</span><br><span class=\"line\">        color = p + ((q - p) * ((2 / 3) - h) * 6);</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        color = p;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    return Math.round(color * 255);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function convertRGB(value) &#123;</span><br><span class=\"line\">    var str = value.toString(16);</span><br><span class=\"line\">    if (value &lt; 16) return &apos;0&apos; + str;</span><br><span class=\"line\"></span><br><span class=\"line\">    return str;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function mixValue(a, b, ratio) &#123;</span><br><span class=\"line\">    return a + ((b - a) * ratio);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports = tagcloudHelper;</span><br></pre></td></tr></table></figure><p></p>\n<p>参考地址: <a href=\"https://github.com/xuxianyu/ming/tree/master/hexo\" target=\"_blank\" rel=\"noopener\">https://github.com/xuxianyu/ming/tree/master/hexo</a> </p>\n<p>实例地址: <a href=\"https://www.xujiuming.com\">https://www.xujiuming.com</a>  本网站就是采用这种方法实现的</p>","site":{"data":{}},"excerpt":"","more":"<p>之前一直想搭建一个博客 但是一直没找到便宜 并且访问速度快的方案 前几种方案<br>1:git pages + cdn<br>国内访问速度简直吃屎 不知道 同行是如何忍受的 cdn从源站拉取资源的时候 慢到无法忍受<br>2:coding pages+cdn<br>不想用 coding pages 还不如直接用git pages<br>3: 购买vps或者静态托管服务器<br>博客初期完全用不起 太特么贵了 穷吊 用不起</p><p>综上所述 我需要的博客大致需要<br>1:源站访问速度快<br>2:cdn 好用<br>3:域名<br>4:https http2访问<br>5:价格相对便宜<br>6:管理相对方便<br>7:增加ca证书方便</p><p>最终选择方案<br>全部使用阿里云的相关资源<br>域名：万网<br>cdn:阿里云 cdn<br>源站:使用阿里云的oss对象存储<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">oss  原本只是 阿里云的一个放文件的一个功能 后来他支持设定首页 就可以用来托管静态页面 </span><br><span class=\"line\">速度不用说 肯定快 而且支持 https</span><br></pre></td></tr></table></figure><p></p>\n<p>ca证书:阿里云 ca免费赛门铁克证书<br>静态博客:hexo + next主题</p>\n<p>其实这些主要是选择  具体如何使用 直接操作阿里云控制台就是的 没啥难度 </p>\n<p>遇到的麻烦的点:<br>1: oss 存储hexo生成的静态资源 路由问题<br>由于oss 里面 文件夹也是可访问的一种资源 这就导致 hexo初始生成的路由 例如/tags/ming/  这个时候他访问的是oss里面的/tags/ming/ 文件夹 然后是空白<br>解决办法: 修改站点配置_config.yaml 中permalink参数<br>我是用abbrlink 来重写url了 如果不用 就是在hexo的permalink中 后面加上.html 即可<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 使用abbrlink 来重写固定url  https://segmentfault.com/a/1190000005799711</span><br><span class=\"line\">permalink: ming/:abbrlink.html</span><br><span class=\"line\">permalink_defaults:</span><br></pre></td></tr></table></figure><p></p>\n<p>标签、归档、分页相关路由   调整<br>修改 当前目录下node_modules/hexo/lib/plugins/helper/index.js 中关于 标签、归档、分页相关的插件<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&apos;use strict&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports = function (ctx) &#123;</span><br><span class=\"line\">。。。</span><br><span class=\"line\"></span><br><span class=\"line\">//重写 归档 js  增加index.html 路径 配合 oss 访问</span><br><span class=\"line\">//    helper.register(&apos;list_categories&apos;, require(&apos;./list_categories&apos;));</span><br><span class=\"line\">    helper.register(&apos;list_categories&apos;, require(&apos;./ming_list_categories&apos;));</span><br><span class=\"line\">    </span><br><span class=\"line\">。。。   </span><br><span class=\"line\"></span><br><span class=\"line\">//重写分页相关地址 配合oss</span><br><span class=\"line\">//    helper.register(&apos;paginator&apos;, require(&apos;./paginator&apos;));</span><br><span class=\"line\">    helper.register(&apos;paginator&apos;, require(&apos;./ming_paginator&apos;));</span><br><span class=\"line\">    </span><br><span class=\"line\">。。。</span><br><span class=\"line\"></span><br><span class=\"line\">//  var tagcloud = require(&apos;./tagcloud&apos;);</span><br><span class=\"line\">//  helper.register(&apos;tagcloud&apos;, tagcloud);</span><br><span class=\"line\">//  helper.register(&apos;tag_cloud&apos;, tagcloud);</span><br><span class=\"line\">    //引入 自定义 tag cloud 标签  修改生成路径的函数 适应oss</span><br><span class=\"line\">    var ming_tag = require(&apos;./ming_tag&apos;)</span><br><span class=\"line\">    helper.register(&apos;tagcloud&apos;, ming_tag);</span><br><span class=\"line\">    helper.register(&apos;tag_cloud&apos;, ming_tag);</span><br><span class=\"line\">。。。</span><br></pre></td></tr></table></figure><p></p>\n<p>在index.js目录下<br>新增下面三个文件 </p>\n<p>归档插件的实现<br>新增 ming_list_categories.js文件<br>复制如下内容进去<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&apos;use strict&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">function listCategoriesHelper(categories, options) &#123;</span><br><span class=\"line\">  if (!options &amp;&amp; (!categories || !categories.hasOwnProperty(&apos;length&apos;))) &#123;</span><br><span class=\"line\">    options = categories;</span><br><span class=\"line\">    categories = this.site.categories;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  if (!categories || !categories.length) return &apos;&apos;;</span><br><span class=\"line\">  options = options || &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  var style = options.hasOwnProperty(&apos;style&apos;) ? options.style : &apos;list&apos;;</span><br><span class=\"line\">  var showCount = options.hasOwnProperty(&apos;show_count&apos;) ? options.show_count : true;</span><br><span class=\"line\">  var className = options.class || &apos;category&apos;;</span><br><span class=\"line\">  var depth = options.depth ? parseInt(options.depth, 10) : 0;</span><br><span class=\"line\">  var orderby = options.orderby || &apos;name&apos;;</span><br><span class=\"line\">  var order = options.order || 1;</span><br><span class=\"line\">  var transform = options.transform;</span><br><span class=\"line\">  var separator = options.hasOwnProperty(&apos;separator&apos;) ? options.separator : &apos;, &apos;;</span><br><span class=\"line\">  var showCurrent = options.show_current || false;</span><br><span class=\"line\">    // 添加 /index.html 配合oss 访问</span><br><span class=\"line\">    //var suffix = options.suffix || &apos;&apos;;</span><br><span class=\"line\">  var suffix = &quot;index.html&quot;;</span><br><span class=\"line\">  var childrenIndicator = options.hasOwnProperty(&apos;children_indicator&apos;) ? options.children_indicator : false;</span><br><span class=\"line\">  var result = &apos;&apos;;</span><br><span class=\"line\">  var self = this;</span><br><span class=\"line\"></span><br><span class=\"line\">  function prepareQuery(parent) &#123;</span><br><span class=\"line\">    var query = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    if (parent) &#123;</span><br><span class=\"line\">      query.parent = parent;</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">      query.parent = &#123;$exists: false&#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    return categories.find(query).sort(orderby, order).filter(function(cat) &#123;</span><br><span class=\"line\">      return cat.length;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  function hierarchicalList(level, parent) &#123;</span><br><span class=\"line\">    var result = &apos;&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">    prepareQuery(parent).forEach(function(cat, i) &#123;</span><br><span class=\"line\">      var child;</span><br><span class=\"line\">      if (!depth || level + 1 &lt; depth) &#123;</span><br><span class=\"line\">        child = hierarchicalList(level + 1, cat._id);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      var isCurrent = false;</span><br><span class=\"line\">      if (showCurrent &amp;&amp; self.page) &#123;</span><br><span class=\"line\">        for (var j = 0; j &lt; cat.length; j++) &#123;</span><br><span class=\"line\">          var post = cat.posts.data[j];</span><br><span class=\"line\">          if (post &amp;&amp; post._id === self.page._id) &#123;</span><br><span class=\"line\">            isCurrent = true;</span><br><span class=\"line\">            break;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        // special case: category page</span><br><span class=\"line\">        if (!isCurrent &amp;&amp; self.page.base) &#123;</span><br><span class=\"line\">          if (self.page.base.indexOf(cat.path) === 0) &#123;</span><br><span class=\"line\">            isCurrent = true;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      var additionalClassName = &apos;&apos;;</span><br><span class=\"line\">      if (child &amp;&amp; childrenIndicator) &#123;</span><br><span class=\"line\">        additionalClassName = &apos; &apos; + childrenIndicator;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      result += &apos;&lt;li class=&quot;&apos; + className + &apos;-list-item&apos; + additionalClassName + &apos;&quot;&gt;&apos;;</span><br><span class=\"line\">      result += &apos;&lt;a class=&quot;&apos; + className + &apos;-list-link&apos; + (isCurrent ? &apos; current&apos; : &apos;&apos;) + &apos;&quot; href=&quot;&apos; + self.url_for(cat.path) + suffix + &apos;&quot;&gt;&apos;;</span><br><span class=\"line\">      result += transform ? transform(cat.name) : cat.name;</span><br><span class=\"line\">      result += &apos;&lt;/a&gt;&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">      if (showCount) &#123;</span><br><span class=\"line\">        result += &apos;&lt;span class=&quot;&apos; + className + &apos;-list-count&quot;&gt;&apos; + cat.length + &apos;&lt;/span&gt;&apos;;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      if (child) &#123;</span><br><span class=\"line\">        result += &apos;&lt;ul class=&quot;&apos; + className + &apos;-list-child&quot;&gt;&apos; + child + &apos;&lt;/ul&gt;&apos;;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      result += &apos;&lt;/li&gt;&apos;;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    return result;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  function flatList(level, parent) &#123;</span><br><span class=\"line\">    var result = &apos;&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">    prepareQuery(parent).forEach(function(cat, i) &#123;</span><br><span class=\"line\">      if (i || level) result += separator;</span><br><span class=\"line\"></span><br><span class=\"line\">      result += &apos;&lt;a class=&quot;&apos; + className + &apos;-link&quot; href=&quot;&apos; + self.url_for(cat.path) + suffix + &apos;&quot;&gt;&apos;;</span><br><span class=\"line\">      result += transform ? transform(cat.name) : cat.name;</span><br><span class=\"line\"></span><br><span class=\"line\">      if (showCount) &#123;</span><br><span class=\"line\">        result += &apos;&lt;span class=&quot;&apos; + className + &apos;-count&quot;&gt;&apos; + cat.length + &apos;&lt;/span&gt;&apos;;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      result += &apos;&lt;/a&gt;&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">      if (!depth || level + 1 &lt; depth) &#123;</span><br><span class=\"line\">        result += flatList(level + 1, cat._id);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    return result;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  if (style === &apos;list&apos;) &#123;</span><br><span class=\"line\">    result += &apos;&lt;ul class=&quot;&apos; + className + &apos;-list&quot;&gt;&apos; + hierarchicalList(0) + &apos;&lt;/ul&gt;&apos;;</span><br><span class=\"line\">  &#125; else &#123;</span><br><span class=\"line\">    result += flatList(0);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  return result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports = listCategoriesHelper;</span><br></pre></td></tr></table></figure><p></p>\n<p>分页插件的实现<br>新增 ming_paginator.js文件<br>复制如下内容进去<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&apos;use strict&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">function paginatorHelper(options) &#123;</span><br><span class=\"line\">  options = options || &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  var current = options.current || this.page.current || 0;</span><br><span class=\"line\">  var total = options.total || this.page.total || 1;</span><br><span class=\"line\">  var endSize = options.hasOwnProperty(&apos;end_size&apos;) ? +options.end_size : 1;</span><br><span class=\"line\">  var midSize = options.hasOwnProperty(&apos;mid_size&apos;) ? +options.mid_size : 2;</span><br><span class=\"line\">  var space = options.hasOwnProperty(&apos;space&apos;) ? options.space : &apos;&amp;hellip;&apos;;</span><br><span class=\"line\">  var base = options.base || this.page.base || &apos;&apos;;</span><br><span class=\"line\">  var format = options.format || this.config.pagination_dir + &apos;/%d/&apos;;</span><br><span class=\"line\">  var prevText = options.prev_text || &apos;Prev&apos;;</span><br><span class=\"line\">  var nextText = options.next_text || &apos;Next&apos;;</span><br><span class=\"line\">  var prevNext = options.hasOwnProperty(&apos;prev_next&apos;) ? options.prev_next : true;</span><br><span class=\"line\">  var transform = options.transform;</span><br><span class=\"line\">  var self = this;</span><br><span class=\"line\">  var result = &apos;&apos;;</span><br><span class=\"line\">  var i;</span><br><span class=\"line\">  //配合 oss 使用index.html</span><br><span class=\"line\">  var suffix = &quot;index.html&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    if (!current) return &apos;&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">  var currentPage = &apos;&lt;span class=&quot;page-number current&quot;&gt;&apos; +</span><br><span class=\"line\">    (transform ? transform(current) : current) +</span><br><span class=\"line\">    &apos;&lt;/span&gt;&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">  function link(i) &#123;</span><br><span class=\"line\">    return self.url_for(i === 1 ? base : base + format.replace(&apos;%d&apos;, i));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  function pageLink(i) &#123;</span><br><span class=\"line\">    return &apos;&lt;a class=&quot;page-number&quot; href=&quot;&apos; + link(i) + suffix +&apos;&quot;&gt;&apos; +</span><br><span class=\"line\">      (transform ? transform(i) : i) +</span><br><span class=\"line\">      &apos;&lt;/a&gt;&apos;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  // Display the link to the previous page</span><br><span class=\"line\">  if (prevNext &amp;&amp; current &gt; 1) &#123;</span><br><span class=\"line\">    result += &apos;&lt;a class=&quot;extend prev&quot; rel=&quot;prev&quot; href=&quot;&apos; + link(current - 1) + suffix +&apos;&quot;&gt;&apos; + prevText + &apos;&lt;/a&gt;&apos;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  if (options.show_all) &#123;</span><br><span class=\"line\">    // Display pages on the left side of the current page</span><br><span class=\"line\">    for (i = 1; i &lt; current; i++) &#123;</span><br><span class=\"line\">      result += pageLink(i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // Display the current page</span><br><span class=\"line\">    result += currentPage;</span><br><span class=\"line\"></span><br><span class=\"line\">    // Display pages on the right side of the current page</span><br><span class=\"line\">    for (i = current + 1; i &lt;= total; i++) &#123;</span><br><span class=\"line\">      result += pageLink(i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125; else &#123;</span><br><span class=\"line\">    // It&apos;s too complicated. May need refactor.</span><br><span class=\"line\">    var leftEnd = current &lt;= endSize ? current - 1 : endSize;</span><br><span class=\"line\">    var rightEnd = total - current &lt;= endSize ? current + 1 : total - endSize + 1;</span><br><span class=\"line\">    var leftMid = current - midSize &lt;= endSize ? leftEnd + 1 : current - midSize;</span><br><span class=\"line\">    var rightMid = current + midSize + endSize &gt; total ? rightEnd - 1 : current + midSize;</span><br><span class=\"line\">    var spaceHtml = &apos;&lt;span class=&quot;space&quot;&gt;&apos; + space + &apos;&lt;/span&gt;&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">    // Display pages on the left edge</span><br><span class=\"line\">    for (i = 1; i &lt;= leftEnd; i++) &#123;</span><br><span class=\"line\">      result += pageLink(i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // Display spaces between edges and middle pages</span><br><span class=\"line\">    if (space &amp;&amp; current - endSize - midSize &gt; 1) &#123;</span><br><span class=\"line\">      result += spaceHtml;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // Display left middle pages</span><br><span class=\"line\">    if (leftMid &gt; leftEnd) &#123;</span><br><span class=\"line\">      for (i = leftMid; i &lt; current; i++) &#123;</span><br><span class=\"line\">        result += pageLink(i);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // Display the current page</span><br><span class=\"line\">    result += currentPage;</span><br><span class=\"line\"></span><br><span class=\"line\">    // Display right middle pages</span><br><span class=\"line\">    if (rightMid &lt; rightEnd) &#123;</span><br><span class=\"line\">      for (i = current + 1; i &lt;= rightMid; i++) &#123;</span><br><span class=\"line\">        result += pageLink(i);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // Display spaces between edges and middle pages</span><br><span class=\"line\">    if (space &amp;&amp; total - endSize - midSize &gt; current) &#123;</span><br><span class=\"line\">      result += spaceHtml;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // Dispaly pages on the right edge</span><br><span class=\"line\">    for (i = rightEnd; i &lt;= total; i++) &#123;</span><br><span class=\"line\">      result += pageLink(i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  // Display the link to the next page</span><br><span class=\"line\">  if (prevNext &amp;&amp; current &lt; total) &#123;</span><br><span class=\"line\">    result += &apos;&lt;a class=&quot;extend next&quot; rel=&quot;next&quot; href=&quot;&apos; + link(current + 1) + suffix+ &apos;&quot;&gt;&apos; + nextText + &apos;&lt;/a&gt;&apos;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  return result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports = paginatorHelper;</span><br></pre></td></tr></table></figure><p></p>\n<p>标签插件的实现<br>新增 ming_tag.js文件<br>复制如下内容进去<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br><span class=\"line\">335</span><br><span class=\"line\">336</span><br><span class=\"line\">337</span><br><span class=\"line\">338</span><br><span class=\"line\">339</span><br><span class=\"line\">340</span><br><span class=\"line\">341</span><br><span class=\"line\">342</span><br><span class=\"line\">343</span><br><span class=\"line\">344</span><br><span class=\"line\">345</span><br><span class=\"line\">346</span><br><span class=\"line\">347</span><br><span class=\"line\">348</span><br><span class=\"line\">349</span><br><span class=\"line\">350</span><br><span class=\"line\">351</span><br><span class=\"line\">352</span><br><span class=\"line\">353</span><br><span class=\"line\">354</span><br><span class=\"line\">355</span><br><span class=\"line\">356</span><br><span class=\"line\">357</span><br><span class=\"line\">358</span><br><span class=\"line\">359</span><br><span class=\"line\">360</span><br><span class=\"line\">361</span><br><span class=\"line\">362</span><br><span class=\"line\">363</span><br><span class=\"line\">364</span><br><span class=\"line\">365</span><br><span class=\"line\">366</span><br><span class=\"line\">367</span><br><span class=\"line\">368</span><br><span class=\"line\">369</span><br><span class=\"line\">370</span><br><span class=\"line\">371</span><br><span class=\"line\">372</span><br><span class=\"line\">373</span><br><span class=\"line\">374</span><br><span class=\"line\">375</span><br><span class=\"line\">376</span><br><span class=\"line\">377</span><br><span class=\"line\">378</span><br><span class=\"line\">379</span><br><span class=\"line\">380</span><br><span class=\"line\">381</span><br><span class=\"line\">382</span><br><span class=\"line\">383</span><br><span class=\"line\">384</span><br><span class=\"line\">385</span><br><span class=\"line\">386</span><br><span class=\"line\">387</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&apos;use strict&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">// https://github.com/imathis/hsl-picker/blob/master/assets/javascripts/modules/color.coffee</span><br><span class=\"line\">var rHex3 = /^#([0-9a-f]&#123;3&#125;)$/;</span><br><span class=\"line\">var rHex6 = /^#([0-9a-f]&#123;6&#125;)$/;</span><br><span class=\"line\">var rRGB = /^rgba?\\(\\s*(\\d&#123;1,3&#125;)\\s*,\\s*(\\d&#123;1,3&#125;)\\s*,\\s*(\\d&#123;1,3&#125;)\\s*,?\\s*(0?\\.?\\d+)?\\s*\\)$/;</span><br><span class=\"line\">var rHSL = /^hsla?\\(\\s*(\\d&#123;1,3&#125;)\\s*,\\s*(\\d&#123;1,3&#125;)%\\s*,\\s*(\\d&#123;1,3&#125;)%\\s*,?\\s*(0?\\.?\\d+)?\\s*\\)$/;</span><br><span class=\"line\"></span><br><span class=\"line\">// http://www.w3.org/TR/css3-color/#svg-color</span><br><span class=\"line\">var colorNames = &#123;</span><br><span class=\"line\">    aliceblue: &#123;r: 240, g: 248, b: 255, a: 1&#125;,</span><br><span class=\"line\">    antiquewhite: &#123;r: 250, g: 235, b: 215, a: 1&#125;,</span><br><span class=\"line\">    aqua: &#123;r: 0, g: 255, b: 255, a: 1&#125;,</span><br><span class=\"line\">    aquamarine: &#123;r: 127, g: 255, b: 212, a: 1&#125;,</span><br><span class=\"line\">    azure: &#123;r: 240, g: 255, b: 255, a: 1&#125;,</span><br><span class=\"line\">    beige: &#123;r: 245, g: 245, b: 220, a: 1&#125;,</span><br><span class=\"line\">    bisque: &#123;r: 255, g: 228, b: 196, a: 1&#125;,</span><br><span class=\"line\">    black: &#123;r: 0, g: 0, b: 0, a: 1&#125;,</span><br><span class=\"line\">    blanchedalmond: &#123;r: 255, g: 235, b: 205, a: 1&#125;,</span><br><span class=\"line\">    blue: &#123;r: 0, g: 0, b: 255, a: 1&#125;,</span><br><span class=\"line\">    blueviolet: &#123;r: 138, g: 43, b: 226, a: 1&#125;,</span><br><span class=\"line\">    brown: &#123;r: 165, g: 42, b: 42, a: 1&#125;,</span><br><span class=\"line\">    burlywood: &#123;r: 222, g: 184, b: 135, a: 1&#125;,</span><br><span class=\"line\">    cadetblue: &#123;r: 95, g: 158, b: 160, a: 1&#125;,</span><br><span class=\"line\">    chartreuse: &#123;r: 127, g: 255, b: 0, a: 1&#125;,</span><br><span class=\"line\">    chocolate: &#123;r: 210, g: 105, b: 30, a: 1&#125;,</span><br><span class=\"line\">    coral: &#123;r: 255, g: 127, b: 80, a: 1&#125;,</span><br><span class=\"line\">    cornflowerblue: &#123;r: 100, g: 149, b: 237, a: 1&#125;,</span><br><span class=\"line\">    cornsilk: &#123;r: 255, g: 248, b: 220, a: 1&#125;,</span><br><span class=\"line\">    crimson: &#123;r: 220, g: 20, b: 60, a: 1&#125;,</span><br><span class=\"line\">    cyan: &#123;r: 0, g: 255, b: 255, a: 1&#125;,</span><br><span class=\"line\">    darkblue: &#123;r: 0, g: 0, b: 139, a: 1&#125;,</span><br><span class=\"line\">    darkcyan: &#123;r: 0, g: 139, b: 139, a: 1&#125;,</span><br><span class=\"line\">    darkgoldenrod: &#123;r: 184, g: 134, b: 11, a: 1&#125;,</span><br><span class=\"line\">    darkgray: &#123;r: 169, g: 169, b: 169, a: 1&#125;,</span><br><span class=\"line\">    darkgreen: &#123;r: 0, g: 100, b: 0, a: 1&#125;,</span><br><span class=\"line\">    darkgrey: &#123;r: 169, g: 169, b: 169, a: 1&#125;,</span><br><span class=\"line\">    darkkhaki: &#123;r: 189, g: 183, b: 107, a: 1&#125;,</span><br><span class=\"line\">    darkmagenta: &#123;r: 139, g: 0, b: 139, a: 1&#125;,</span><br><span class=\"line\">    darkolivegreen: &#123;r: 85, g: 107, b: 47, a: 1&#125;,</span><br><span class=\"line\">    darkorange: &#123;r: 255, g: 140, b: 0, a: 1&#125;,</span><br><span class=\"line\">    darkorchid: &#123;r: 153, g: 50, b: 204, a: 1&#125;,</span><br><span class=\"line\">    darkred: &#123;r: 139, g: 0, b: 0, a: 1&#125;,</span><br><span class=\"line\">    darksalmon: &#123;r: 233, g: 150, b: 122, a: 1&#125;,</span><br><span class=\"line\">    darkseagreen: &#123;r: 143, g: 188, b: 143, a: 1&#125;,</span><br><span class=\"line\">    darkslateblue: &#123;r: 72, g: 61, b: 139, a: 1&#125;,</span><br><span class=\"line\">    darkslategray: &#123;r: 47, g: 79, b: 79, a: 1&#125;,</span><br><span class=\"line\">    darkslategrey: &#123;r: 47, g: 79, b: 79, a: 1&#125;,</span><br><span class=\"line\">    darkturquoise: &#123;r: 0, g: 206, b: 209, a: 1&#125;,</span><br><span class=\"line\">    darkviolet: &#123;r: 148, g: 0, b: 211, a: 1&#125;,</span><br><span class=\"line\">    deeppink: &#123;r: 255, g: 20, b: 147, a: 1&#125;,</span><br><span class=\"line\">    deepskyblue: &#123;r: 0, g: 191, b: 255, a: 1&#125;,</span><br><span class=\"line\">    dimgray: &#123;r: 105, g: 105, b: 105, a: 1&#125;,</span><br><span class=\"line\">    dimgrey: &#123;r: 105, g: 105, b: 105, a: 1&#125;,</span><br><span class=\"line\">    dodgerblue: &#123;r: 30, g: 144, b: 255, a: 1&#125;,</span><br><span class=\"line\">    firebrick: &#123;r: 178, g: 34, b: 34, a: 1&#125;,</span><br><span class=\"line\">    floralwhite: &#123;r: 255, g: 250, b: 240, a: 1&#125;,</span><br><span class=\"line\">    forestgreen: &#123;r: 34, g: 139, b: 34, a: 1&#125;,</span><br><span class=\"line\">    fuchsia: &#123;r: 255, g: 0, b: 255, a: 1&#125;,</span><br><span class=\"line\">    gainsboro: &#123;r: 220, g: 220, b: 220, a: 1&#125;,</span><br><span class=\"line\">    ghostwhite: &#123;r: 248, g: 248, b: 255, a: 1&#125;,</span><br><span class=\"line\">    gold: &#123;r: 255, g: 215, b: 0, a: 1&#125;,</span><br><span class=\"line\">    goldenrod: &#123;r: 218, g: 165, b: 32, a: 1&#125;,</span><br><span class=\"line\">    gray: &#123;r: 128, g: 128, b: 128, a: 1&#125;,</span><br><span class=\"line\">    green: &#123;r: 0, g: 128, b: 0, a: 1&#125;,</span><br><span class=\"line\">    greenyellow: &#123;r: 173, g: 255, b: 47, a: 1&#125;,</span><br><span class=\"line\">    grey: &#123;r: 128, g: 128, b: 128, a: 1&#125;,</span><br><span class=\"line\">    honeydew: &#123;r: 240, g: 255, b: 240, a: 1&#125;,</span><br><span class=\"line\">    hotpink: &#123;r: 255, g: 105, b: 180, a: 1&#125;,</span><br><span class=\"line\">    indianred: &#123;r: 205, g: 92, b: 92, a: 1&#125;,</span><br><span class=\"line\">    indigo: &#123;r: 75, g: 0, b: 130, a: 1&#125;,</span><br><span class=\"line\">    ivory: &#123;r: 255, g: 255, b: 240, a: 1&#125;,</span><br><span class=\"line\">    khaki: &#123;r: 240, g: 230, b: 140, a: 1&#125;,</span><br><span class=\"line\">    lavender: &#123;r: 230, g: 230, b: 250, a: 1&#125;,</span><br><span class=\"line\">    lavenderblush: &#123;r: 255, g: 240, b: 245, a: 1&#125;,</span><br><span class=\"line\">    lawngreen: &#123;r: 124, g: 252, b: 0, a: 1&#125;,</span><br><span class=\"line\">    lemonchiffon: &#123;r: 255, g: 250, b: 205, a: 1&#125;,</span><br><span class=\"line\">    lightblue: &#123;r: 173, g: 216, b: 230, a: 1&#125;,</span><br><span class=\"line\">    lightcoral: &#123;r: 240, g: 128, b: 128, a: 1&#125;,</span><br><span class=\"line\">    lightcyan: &#123;r: 224, g: 255, b: 255, a: 1&#125;,</span><br><span class=\"line\">    lightgoldenrodyellow: &#123;r: 250, g: 250, b: 210, a: 1&#125;,</span><br><span class=\"line\">    lightgray: &#123;r: 211, g: 211, b: 211, a: 1&#125;,</span><br><span class=\"line\">    lightgreen: &#123;r: 144, g: 238, b: 144, a: 1&#125;,</span><br><span class=\"line\">    lightgrey: &#123;r: 211, g: 211, b: 211, a: 1&#125;,</span><br><span class=\"line\">    lightpink: &#123;r: 255, g: 182, b: 193, a: 1&#125;,</span><br><span class=\"line\">    lightsalmon: &#123;r: 255, g: 160, b: 122, a: 1&#125;,</span><br><span class=\"line\">    lightseagreen: &#123;r: 32, g: 178, b: 170, a: 1&#125;,</span><br><span class=\"line\">    lightskyblue: &#123;r: 135, g: 206, b: 250, a: 1&#125;,</span><br><span class=\"line\">    lightslategray: &#123;r: 119, g: 136, b: 153, a: 1&#125;,</span><br><span class=\"line\">    lightslategrey: &#123;r: 119, g: 136, b: 153, a: 1&#125;,</span><br><span class=\"line\">    lightsteelblue: &#123;r: 176, g: 196, b: 222, a: 1&#125;,</span><br><span class=\"line\">    lightyellow: &#123;r: 255, g: 255, b: 224, a: 1&#125;,</span><br><span class=\"line\">    lime: &#123;r: 0, g: 255, b: 0, a: 1&#125;,</span><br><span class=\"line\">    limegreen: &#123;r: 50, g: 205, b: 50, a: 1&#125;,</span><br><span class=\"line\">    linen: &#123;r: 250, g: 240, b: 230, a: 1&#125;,</span><br><span class=\"line\">    magenta: &#123;r: 255, g: 0, b: 255, a: 1&#125;,</span><br><span class=\"line\">    maroon: &#123;r: 128, g: 0, b: 0, a: 1&#125;,</span><br><span class=\"line\">    mediumaquamarine: &#123;r: 102, g: 205, b: 170, a: 1&#125;,</span><br><span class=\"line\">    mediumblue: &#123;r: 0, g: 0, b: 205, a: 1&#125;,</span><br><span class=\"line\">    mediumorchid: &#123;r: 186, g: 85, b: 211, a: 1&#125;,</span><br><span class=\"line\">    mediumpurple: &#123;r: 147, g: 112, b: 219, a: 1&#125;,</span><br><span class=\"line\">    mediumseagreen: &#123;r: 60, g: 179, b: 113, a: 1&#125;,</span><br><span class=\"line\">    mediumslateblue: &#123;r: 123, g: 104, b: 238, a: 1&#125;,</span><br><span class=\"line\">    mediumspringgreen: &#123;r: 0, g: 250, b: 154, a: 1&#125;,</span><br><span class=\"line\">    mediumturquoise: &#123;r: 72, g: 209, b: 204, a: 1&#125;,</span><br><span class=\"line\">    mediumvioletred: &#123;r: 199, g: 21, b: 133, a: 1&#125;,</span><br><span class=\"line\">    midnightblue: &#123;r: 25, g: 25, b: 112, a: 1&#125;,</span><br><span class=\"line\">    mintcream: &#123;r: 245, g: 255, b: 250, a: 1&#125;,</span><br><span class=\"line\">    mistyrose: &#123;r: 255, g: 228, b: 225, a: 1&#125;,</span><br><span class=\"line\">    moccasin: &#123;r: 255, g: 228, b: 181, a: 1&#125;,</span><br><span class=\"line\">    navajowhite: &#123;r: 255, g: 222, b: 173, a: 1&#125;,</span><br><span class=\"line\">    navy: &#123;r: 0, g: 0, b: 128, a: 1&#125;,</span><br><span class=\"line\">    oldlace: &#123;r: 253, g: 245, b: 230, a: 1&#125;,</span><br><span class=\"line\">    olive: &#123;r: 128, g: 128, b: 0, a: 1&#125;,</span><br><span class=\"line\">    olivedrab: &#123;r: 107, g: 142, b: 35, a: 1&#125;,</span><br><span class=\"line\">    orange: &#123;r: 255, g: 165, b: 0, a: 1&#125;,</span><br><span class=\"line\">    orangered: &#123;r: 255, g: 69, b: 0, a: 1&#125;,</span><br><span class=\"line\">    orchid: &#123;r: 218, g: 112, b: 214, a: 1&#125;,</span><br><span class=\"line\">    palegoldenrod: &#123;r: 238, g: 232, b: 170, a: 1&#125;,</span><br><span class=\"line\">    palegreen: &#123;r: 152, g: 251, b: 152, a: 1&#125;,</span><br><span class=\"line\">    paleturquoise: &#123;r: 175, g: 238, b: 238, a: 1&#125;,</span><br><span class=\"line\">    palevioletred: &#123;r: 219, g: 112, b: 147, a: 1&#125;,</span><br><span class=\"line\">    papayawhip: &#123;r: 255, g: 239, b: 213, a: 1&#125;,</span><br><span class=\"line\">    peachpuff: &#123;r: 255, g: 218, b: 185, a: 1&#125;,</span><br><span class=\"line\">    peru: &#123;r: 205, g: 133, b: 63, a: 1&#125;,</span><br><span class=\"line\">    pink: &#123;r: 255, g: 192, b: 203, a: 1&#125;,</span><br><span class=\"line\">    plum: &#123;r: 221, g: 160, b: 221, a: 1&#125;,</span><br><span class=\"line\">    powderblue: &#123;r: 176, g: 224, b: 230, a: 1&#125;,</span><br><span class=\"line\">    purple: &#123;r: 128, g: 0, b: 128, a: 1&#125;,</span><br><span class=\"line\">    red: &#123;r: 255, g: 0, b: 0, a: 1&#125;,</span><br><span class=\"line\">    rosybrown: &#123;r: 188, g: 143, b: 143, a: 1&#125;,</span><br><span class=\"line\">    royalblue: &#123;r: 65, g: 105, b: 225, a: 1&#125;,</span><br><span class=\"line\">    saddlebrown: &#123;r: 139, g: 69, b: 19, a: 1&#125;,</span><br><span class=\"line\">    salmon: &#123;r: 250, g: 128, b: 114, a: 1&#125;,</span><br><span class=\"line\">    sandybrown: &#123;r: 244, g: 164, b: 96, a: 1&#125;,</span><br><span class=\"line\">    seagreen: &#123;r: 46, g: 139, b: 87, a: 1&#125;,</span><br><span class=\"line\">    seashell: &#123;r: 255, g: 245, b: 238, a: 1&#125;,</span><br><span class=\"line\">    sienna: &#123;r: 160, g: 82, b: 45, a: 1&#125;,</span><br><span class=\"line\">    silver: &#123;r: 192, g: 192, b: 192, a: 1&#125;,</span><br><span class=\"line\">    skyblue: &#123;r: 135, g: 206, b: 235, a: 1&#125;,</span><br><span class=\"line\">    slateblue: &#123;r: 106, g: 90, b: 205, a: 1&#125;,</span><br><span class=\"line\">    slategray: &#123;r: 112, g: 128, b: 144, a: 1&#125;,</span><br><span class=\"line\">    slategrey: &#123;r: 112, g: 128, b: 144, a: 1&#125;,</span><br><span class=\"line\">    snow: &#123;r: 255, g: 250, b: 250, a: 1&#125;,</span><br><span class=\"line\">    springgreen: &#123;r: 0, g: 255, b: 127, a: 1&#125;,</span><br><span class=\"line\">    steelblue: &#123;r: 70, g: 130, b: 180, a: 1&#125;,</span><br><span class=\"line\">    tan: &#123;r: 210, g: 180, b: 140, a: 1&#125;,</span><br><span class=\"line\">    teal: &#123;r: 0, g: 128, b: 128, a: 1&#125;,</span><br><span class=\"line\">    thistle: &#123;r: 216, g: 191, b: 216, a: 1&#125;,</span><br><span class=\"line\">    tomato: &#123;r: 255, g: 99, b: 71, a: 1&#125;,</span><br><span class=\"line\">    turquoise: &#123;r: 64, g: 224, b: 208, a: 1&#125;,</span><br><span class=\"line\">    violet: &#123;r: 238, g: 130, b: 238, a: 1&#125;,</span><br><span class=\"line\">    wheat: &#123;r: 245, g: 222, b: 179, a: 1&#125;,</span><br><span class=\"line\">    white: &#123;r: 255, g: 255, b: 255, a: 1&#125;,</span><br><span class=\"line\">    whitesmoke: &#123;r: 245, g: 245, b: 245, a: 1&#125;,</span><br><span class=\"line\">    yellow: &#123;r: 255, g: 255, b: 0, a: 1&#125;,</span><br><span class=\"line\">    yellowgreen: &#123;r: 154, g: 205, b: 50, a: 1&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">function tagcloudHelper(tags, options) &#123;</span><br><span class=\"line\">    if (!options &amp;&amp; (!tags || !tags.hasOwnProperty(&apos;length&apos;))) &#123;</span><br><span class=\"line\">        options = tags;</span><br><span class=\"line\">        tags = this.site.tags;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    if (!tags || !tags.length) return &apos;&apos;;</span><br><span class=\"line\">    options = options || &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    var min = options.min_font || 10;</span><br><span class=\"line\">    var max = options.max_font || 20;</span><br><span class=\"line\">    var orderby = options.orderby || &apos;name&apos;;</span><br><span class=\"line\">    var order = options.order || 1;</span><br><span class=\"line\">    var unit = options.unit || &apos;px&apos;;</span><br><span class=\"line\">    var color = options.color;</span><br><span class=\"line\">    var transform = options.transform;</span><br><span class=\"line\">    var separator = options.separator || &apos; &apos;;</span><br><span class=\"line\">    var result = [];</span><br><span class=\"line\">    var self = this;</span><br><span class=\"line\">    var startColor, endColor;</span><br><span class=\"line\"></span><br><span class=\"line\">    if (color) &#123;</span><br><span class=\"line\">        startColor = new Color(options.start_color);</span><br><span class=\"line\">        endColor = new Color(options.end_color);</span><br><span class=\"line\"></span><br><span class=\"line\">        if (!startColor || !endColor) color = false;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // Sort the tags</span><br><span class=\"line\">    if (orderby === &apos;random&apos; || orderby === &apos;rand&apos;) &#123;</span><br><span class=\"line\">        tags = tags.random();</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        tags = tags.sort(orderby, order);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // Ignore tags with zero posts</span><br><span class=\"line\">    tags = tags.filter(function(tag) &#123;</span><br><span class=\"line\">        return tag.length;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    // Limit the number of tags</span><br><span class=\"line\">    if (options.amount) &#123;</span><br><span class=\"line\">        tags = tags.limit(options.amount);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    var sizes = [];</span><br><span class=\"line\"></span><br><span class=\"line\">    tags.sort(&apos;length&apos;).forEach(function(tag) &#123;</span><br><span class=\"line\">        var length = tag.length;</span><br><span class=\"line\">        if (~sizes.indexOf(length)) return;</span><br><span class=\"line\"></span><br><span class=\"line\">        sizes.push(length);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    var length = sizes.length - 1;</span><br><span class=\"line\"></span><br><span class=\"line\">    tags.forEach(function(tag) &#123;</span><br><span class=\"line\">        var ratio = length ? sizes.indexOf(tag.length) / length : 0;</span><br><span class=\"line\">        var size = min + ((max - min) * ratio);</span><br><span class=\"line\">        var style = &apos;font-size: &apos; + parseFloat(size.toFixed(2)) + unit + &apos;;&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">        if (color) &#123;</span><br><span class=\"line\">            var midColor = startColor.mix(endColor, ratio);</span><br><span class=\"line\">            style += &apos; color: &apos; + midColor.toString();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        result.push(</span><br><span class=\"line\">            // 增加/index.html  跳转地址   </span><br><span class=\"line\">            &apos;&lt;a href=&quot;&apos; + self.url_for(tag.path) + &apos;index.html&quot; style=&quot;&apos; + style + &apos;&quot;&gt;&apos; +</span><br><span class=\"line\">            (transform ? transform(tag.name) : tag.name) +</span><br><span class=\"line\">            &apos;&lt;/a&gt;&apos;</span><br><span class=\"line\">        );</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    return result.join(separator);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function Color(color) &#123;</span><br><span class=\"line\">    if (typeof color === &apos;object&apos;) &#123;</span><br><span class=\"line\">        this.r = color.r;</span><br><span class=\"line\">        this.g = color.g;</span><br><span class=\"line\">        this.b = color.b;</span><br><span class=\"line\">        this.a = color.a;</span><br><span class=\"line\">    &#125; else if (typeof color === &apos;string&apos;) &#123;</span><br><span class=\"line\">        this.parse(color);</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        throw new TypeError(&apos;color is required!&apos;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    if (this.r &lt; 0 || this.r &gt; 255 ||</span><br><span class=\"line\">        this.g &lt; 0 || this.g &gt; 255 ||</span><br><span class=\"line\">        this.b &lt; 0 || this.b &gt; 255 ||</span><br><span class=\"line\">        this.a &lt; 0 || this.a &gt; 1) &#123;</span><br><span class=\"line\">        throw new Error(color + &apos; is invalid.&apos;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Color.prototype.parse = function(color) &#123;</span><br><span class=\"line\">    color = color.toLowerCase();</span><br><span class=\"line\"></span><br><span class=\"line\">    if (colorNames.hasOwnProperty(color)) &#123;</span><br><span class=\"line\">        var obj = colorNames[color];</span><br><span class=\"line\"></span><br><span class=\"line\">        this.r = obj.r;</span><br><span class=\"line\">        this.g = obj.g;</span><br><span class=\"line\">        this.b = obj.b;</span><br><span class=\"line\">        this.a = obj.a;</span><br><span class=\"line\"></span><br><span class=\"line\">        return;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    var match, txt, code;</span><br><span class=\"line\"></span><br><span class=\"line\">    if (rHex3.test(color)) &#123;</span><br><span class=\"line\">        txt = color.substring(1);</span><br><span class=\"line\">        code = parseInt(txt, 16);</span><br><span class=\"line\"></span><br><span class=\"line\">        this.r = ((code &amp; 0xF00) &gt;&gt; 8) * 17;</span><br><span class=\"line\">        this.g = ((code &amp; 0xF0) &gt;&gt; 4) * 17;</span><br><span class=\"line\">        this.b = (code &amp; 0xF) * 17;</span><br><span class=\"line\">        this.a = 1;</span><br><span class=\"line\">    &#125; else if (rHex6.test(color)) &#123;</span><br><span class=\"line\">        txt = color.substring(1);</span><br><span class=\"line\">        code = parseInt(txt, 16);</span><br><span class=\"line\"></span><br><span class=\"line\">        this.r = (code &amp; 0xFF0000) &gt;&gt; 16;</span><br><span class=\"line\">        this.g = (code &amp; 0xFF00) &gt;&gt; 8;</span><br><span class=\"line\">        this.b = code &amp; 0xFF;</span><br><span class=\"line\">        this.a = 1;</span><br><span class=\"line\">    &#125; else if (rRGB.test(color)) &#123;</span><br><span class=\"line\">        match = color.match(rRGB);</span><br><span class=\"line\"></span><br><span class=\"line\">        this.r = match[1] | 0;</span><br><span class=\"line\">        this.g = match[2] | 0;</span><br><span class=\"line\">        this.b = match[3] | 0;</span><br><span class=\"line\">        this.a = match[4] ? +match[4] : 1;</span><br><span class=\"line\">    &#125; else if (rHSL.test(color)) &#123;</span><br><span class=\"line\">        match = color.match(rHSL);</span><br><span class=\"line\"></span><br><span class=\"line\">        var h = +match[1] / 360;</span><br><span class=\"line\">        var s = +match[2] / 100;</span><br><span class=\"line\">        var l = +match[3] / 100;</span><br><span class=\"line\"></span><br><span class=\"line\">        this.a = match[4] ? +match[4] : 1;</span><br><span class=\"line\"></span><br><span class=\"line\">        if (!s) &#123;</span><br><span class=\"line\">            this.r = this.g = this.b = l * 255;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        var q = l &lt; 0.5 ? l * (1 + s) : l + s - (l * s);</span><br><span class=\"line\">        var p = (2 * l) - q;</span><br><span class=\"line\"></span><br><span class=\"line\">        var rt = h + (1 / 3);</span><br><span class=\"line\">        var gt = h;</span><br><span class=\"line\">        var bt = h - (1 / 3);</span><br><span class=\"line\"></span><br><span class=\"line\">        this.r = convertHue(p, q, rt);</span><br><span class=\"line\">        this.g = convertHue(p, q, gt);</span><br><span class=\"line\">        this.b = convertHue(p, q, bt);</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        throw new Error(color + &apos; is not a supported color format.&apos;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">Color.prototype.toString = function() &#123;</span><br><span class=\"line\">    if (this.a === 1) &#123;</span><br><span class=\"line\">        var r = convertRGB(this.r);</span><br><span class=\"line\">        var g = convertRGB(this.g);</span><br><span class=\"line\">        var b = convertRGB(this.b);</span><br><span class=\"line\"></span><br><span class=\"line\">        if (this.r % 17 || this.g % 17 || this.b % 17) &#123;</span><br><span class=\"line\">            return &apos;#&apos; + r + g + b;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        return &apos;#&apos; + r[0] + g[0] + b[0];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    return &apos;rgba(&apos; + this.r + &apos;, &apos; + this.g + &apos;, &apos; + this.b + &apos;, &apos; + parseFloat(this.a.toFixed(2)) + &apos;)&apos;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">Color.prototype.mix = function(color, ratio) &#123;</span><br><span class=\"line\">    switch (ratio) &#123;</span><br><span class=\"line\">        case 0:</span><br><span class=\"line\">            return new Color(this);</span><br><span class=\"line\"></span><br><span class=\"line\">        case 1:</span><br><span class=\"line\">            return new Color(color);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    return new Color(&#123;</span><br><span class=\"line\">        r: Math.round(mixValue(this.r, color.r, ratio)),</span><br><span class=\"line\">        g: Math.round(mixValue(this.g, color.g, ratio)),</span><br><span class=\"line\">        b: Math.round(mixValue(this.b, color.b, ratio)),</span><br><span class=\"line\">        a: mixValue(this.a, color.a, ratio)</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">function convertHue(p, q, h) &#123;</span><br><span class=\"line\">    if (h &lt; 0) h++;</span><br><span class=\"line\">    if (h &gt; 1) h--;</span><br><span class=\"line\"></span><br><span class=\"line\">    var color;</span><br><span class=\"line\"></span><br><span class=\"line\">    if (h * 6 &lt; 1) &#123;</span><br><span class=\"line\">        color = p + ((q - p) * h * 6);</span><br><span class=\"line\">    &#125; else if (h * 2 &lt; 1) &#123;</span><br><span class=\"line\">        color = q;</span><br><span class=\"line\">    &#125; else if (h * 3 &lt; 2) &#123;</span><br><span class=\"line\">        color = p + ((q - p) * ((2 / 3) - h) * 6);</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        color = p;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    return Math.round(color * 255);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function convertRGB(value) &#123;</span><br><span class=\"line\">    var str = value.toString(16);</span><br><span class=\"line\">    if (value &lt; 16) return &apos;0&apos; + str;</span><br><span class=\"line\"></span><br><span class=\"line\">    return str;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function mixValue(a, b, ratio) &#123;</span><br><span class=\"line\">    return a + ((b - a) * ratio);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports = tagcloudHelper;</span><br></pre></td></tr></table></figure><p></p>\n<p>参考地址: <a href=\"https://github.com/xuxianyu/ming/tree/master/hexo\" target=\"_blank\" rel=\"noopener\">https://github.com/xuxianyu/ming/tree/master/hexo</a> </p>\n<p>实例地址: <a href=\"https://www.xujiuming.com\">https://www.xujiuming.com</a>  本网站就是采用这种方法实现的</p>"},{"title":"基于jenkins2.X和docker的持续集成的实例","comments":1,"abbrlink":"4732d3fc","date":"2018-02-09T06:13:29.000Z","_content":"#### 实例功能\n* 自动编译、打包\n* 自动分发、部署\n* 钉钉消息通知\n* 交互式部署\n\n通过jenkins部署一个index.html首页 \n\n#### 实现所需技能\n* jenkins \n* docker \n* groovy 写脚本\n* 项目打包\n* linux常用技术\n* java \n\n#### 步骤\n以这个目录为root目录: https://github.com/xuxianyu/info/tree/master/mingJenkins/simple  \n0:创建index.html\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>ming</title>\n</head>\n<body>\nming\n</body>\n</html>\n```\n1：创建docker file \n在项目目录下建立 Dockerfile\n```\nFROM docker.io/nginx:1.13-alpine\nMAINTAINER 'ming'\n# 复制index.html 到nginx 工作目录  \nCOPY index.html /usr/share/nginx/html\n```\n2：创建Jenkinsfile\nJenkinsfile 是jenkins出的用一套用来定义流水线模式的任务的脚本  \n其中有两种模式\n* pipeline jenkins标准的 配置脚本模式\n* script  使用groovy dsl 实现的jenkins 流水线模式脚本  \n\n我采用的是script模式  因为灵活 好用 两者区别请参考jenkins官网 \n```\nimport java.text.SimpleDateFormat\n\n/**jenkinsfile 使用groovy dsl方式实现\n *  采用 基于groovy 控制流程   groovy dsl +shell 共同协作 部署发布\n *  先在 dev rc 环境使用  单节点 直接停止之后部署   等待寻找对环境稳定影响较少的 多节点部署+dev rc  uat 环境单节点部署方案\n *  多节点部署:\n *  当前想法是使用 用空间换取时间的方式\n *  提供两套nginx 配置\n *  每次先启动 然后切换配置\n *  需要项目提供监听接口 监听当前是否有在执行的任务\n *  需要事务由一定的全局事务 或者一定的补偿机制 保证最终一致性\n *\n *\n *\n *\n *  修改此脚本需要的技能点:\n *  0: 熟悉 项目版本管理工具 如 svn  git\n *  1:熟悉 java groovy  此脚步使用是groovy 和部分jdk的语法书写\n *  2:熟悉jenkins 熟悉 2.x以上的pipe 方式的 jenkins task  由于jenkins官方文档 保持一贯的简略的风格 查阅资料请直接上github 或者stack overflow 之类的干货网站\n *  3:熟悉项目打包 如java的 maven打包 、 h5的 npm 打包、php的打包  、c# 打包\n *  4:熟悉 linux相关功能 及其原理 例如 ssh密钥验证原理\n *  5:熟悉docker 基础原理 及其相关命令\n *  6:了解 自动化测试 大致使用方法 如接口测试、ui测试 如何实现\n *  7:了解代码审查相关工具 使用\n *  8:了解钉钉、mail、jira 通知方式、如钉钉的webhook  mail发送原理、jira webhook\n *\n *\n *\n *  编码规范:\n *  0:注释一定要写全 特别是方法的注释\n *  1:遵循java 编码规范  只能说尽量遵循  毕竟不是java\n *  2:尽可能的使用 jenkins插件中的方法 而不是groovy dsl 调用 shell\n *  3:使用默认参数时候 请尽量在最顶层方法使用  基础性的方法 尽量避免使用默认参数\n *  4:由于groovy的sdk 可拆分的特性 jenkins对于部分groovy写法不支持\n *  5:groovy dsl  可以使用jdk的写法去写  支持完整的jdk  前提是环境里面有jdk  没有就不行\n *  6:为了保持 灵活性  只能使用 script pipe   禁止改称pipeline 模式书写\n *\n * @author ming\n * @mail 18120580001@163.com\n * @date 2017-12-21 16:44\n * */\n\nnode {\n    //启动任务的参数\n    properties([\n            parameters([\n\n                    //项目名称\n                    string(defaultValue: \"{项目名称 只能是小写英文 和-}\", description: \"项目名称\", name: \"projectName\"),\n                    //项目版本\n                    string(defaultValue: \"2.0.0\", description: \"项目版本\", name: \"projectVersion\"),\n                    //项目默认部署端口\n                    string(defaultValue: \"10000\", description: \"项目默认部署端口\", name: \"defaultPort\"),\n                    // 容器内部端口\n                    string(defaultValue: \"80\", description: \"项目默认部署端口\", name: \"imagePort\"),\n                    // dev 环境服务器\n                    string(defaultValue: \"{dev环境服务器地址}\", description: \"dev环境服务器地址\", name: \"devHost\"),\n                    //dev 环境 ssh 端口\n                    string(defaultValue: \"{dev环境服务器ssh登陆端口}\", description: \"dev环境服务器ssh端口\", name: \"devHostPort\"),\n                    //docker 私服地址\n                    string(defaultValue: \"{docker 私服仓库地址 }\", description: \"docker仓库地址\", name: \"dockerRegistry\"),\n                    // 项目通知用户组   钉钉艾特方式\n                    string(defaultValue: '\"{注册钉钉的电话号码}\"', description: \"项目组成员钉钉通知电话号码\", name: \"mobilesGroup\"),\n                    //容器名称\n                    string(defaultValue: \"{容器启动之后的名称}\", description: \"容器名称\", name: \"containerName\"),\n                    // 获取配置方式\n                    // ${params.${name}}\n            ])\n    ])\n\n    svnScmParams = checkout(scm)\n\n    //全局变量\n    // docker镜像私服\n    String dockerRegistryHost\n    if (\"${params.dockerRegistry}\".startsWith(\"http://\")) {\n        dockerRegistryHost = \"${params.dockerRegistry}\".substring(7)\n    } else if (\"${params.dockerRegistry}\".startsWith(\"https://\")) {\n        dockerRegistryHost = \"${params.dockerRegistry}\".substring(8)\n    } else {\n        throw new Exception(\"docker镜像仓库前缀必须是http:// 或者https：//\")\n    }\n\n    //dev 仓库镜像名称\n    String devRegistryImageName\n\n\n    // 刷新db的 镜像名称\n    //流程定义\n    try {\n        //建立编译环境  node+ docker in docker 环境 \n        docker.image('car2godeveloper/dind-node-build-runner').inside('--privileged') {\n\n            stage('编译项目') {\n                //闭包 递归 调用自己\n                Closure compile = { ->\n                    try {\n                        print '编译项目'\n                        //存放编译相关指令\n                        sendDD(\"编译通过\", \"${params.mobilesGroup}\")\n                    } catch (e) {\n                        if (isStop(e)) {\n                            sendDD(\"编译失败::${e.getMessage()}\", \"${params.mobilesGroup}\")\n                            throw e\n                        } else {\n                            sendDD(\"编译失败重新执行::${e.getMessage()}\", \"${params.mobilesGroup}\")\n                            call()\n                        }\n                    }\n                }\n                compile.call()\n            }\n\n\n            stage('构建发布项目docker image') {\n                Closure buildProjectDockerImage = { ->\n                    try {\n                        sh 'docker --version'\n                        //发布到私服仓库 {镜像仓库地址}/{镜像命名空间}/{镜像名称}:{tag标签}\n                        //imageName=${dockerRepository}/${namespace}/${projectName}-${projectVersion}-${环境}:${localDate}\n                        String localDate = geFormatterLocalDate(\"yyyyMMdd.HHmmss\")\n                        imageName = \"${params.projectName}-${params.projectVersion}-dev:${localDate}\"\n                        docker.withRegistry(\"${params.dockerRegistry}\") {\n                            docker.build(imageName).push()\n                            devRegistryImageName = \"${dockerRegistryHost}/${imageName}\"\n                        }\n                        sendDD(\"构建发布镜像成功\", \"${params.mobilesGroup}\")\n                    } catch (e) {\n                        if (isStop(e)) {\n                            sendDD(\"构建发布镜像失败::${e.getMessage()}\", \"${params.mobilesGroup}\")\n                            throw e\n                        } else {\n                            sendDD(\"构建发布镜像失败重新执行::${e.getMessage()}\", \"${params.mobilesGroup}\")\n                            call()\n                        }\n                    }\n                }\n                buildProjectDockerImage.call()\n            }\n\n\n\n            stage('部署dev环境') {\n                Closure deployDev = { ->\n                    try {\n                        print '部署dev环境'\n                        deploy(\"${params.devHost}\", \"${params.defaultPort}\", \"${params.containerName}\", \"${devRegistryImageName}\", \"\",\"${params.imagePort}\", \"${params.devHostPort}\")\n                        //ssh远程部署\n                        sendDD(\"部署dev成功\", \"${params.mobilesGroup}\")\n                    } catch (e) {\n                        if (isStop(e)) {\n                            sendDD(\"部署dev失败::${e.getMessage()}\", \"${params.mobilesGroup}\")\n                            throw e\n                        } else {\n                            sendDD(\"部署dev失败重新执行::${e.getMessage()}\", \"${params.mobilesGroup}\")\n                            call()\n                        }\n                    }\n                }\n                deployDev.call()\n            }\n\n\n            stage('dev环境自动化测试') {\n                Closure autoTestDev = { ->\n                    try {\n                        print 'dev环境自动化测试'\n                        //自动化测试指令\n                        sendDD(\"自动化测试dev环境成功\", \"${params.mobilesGroup}\")\n                    } catch (e) {\n                        if (isStop(e)) {\n                            sendDD(\"自动化测试dev环境失败::${e.getMessage()}\", \"${params.mobilesGroup}\")\n                            throw e\n                        } else {\n                            sendDD(\"自动化测试dev环境失败重新执行::${e.getMessage()}\", \"${params.mobilesGroup}\")\n                            call()\n                        }\n                    }\n                }\n                autoTestDev.call()\n            }\n\n\n            stage('dev环境功能确认？(发布rc环境镜像)') {\n                Closure releaseDev = { ->\n                    try {\n                        def userInput = input(\n                                id: 'userInput', message: '发布备注:', parameters: [\n                                [$class: 'TextParameterDefinition', defaultValue: '无', description: '发布备注:', name: 'memo'],\n                        ])\n                        print userInput\n                        //替换 名称中的 dev标记   在dev 机器上完成\n                        rcRegistryImageName = devRegistryImageName.replaceAll(\"-dev\", \"-rc\")\n                        release(rcRegistryImageName, devRegistryImageName, \"${params.devHost}\", \"${params.devHostPort}\")\n                        sh 'echo  dev环境功能测试确定'\n                        sendDD(\"dev环境发布到rc仓库成功\", \"${params.mobilesGroup}\")\n                    } catch (e) {\n                        if (isStop(e)) {\n                            sendDD(\"dev环境发布到rc仓库失败::${e.getMessage()}\", \"${params.mobilesGroup}\")\n                            throw e\n                        } else {\n                            sendDD(\"dev环境发布到rc仓库失败重新执行::${e.getMessage()}\", \"${params.mobilesGroup}\")\n                            call()\n                        }\n                    }\n                }\n                releaseDev.call()\n            }\n\n            //........  后面都是重复性的节点  直接复制改改就是的\n\n        }\n    } catch (e) {\n        print currentBuild.result\n        sendDD(\"持续集成构建失败\" + e.getMessage(), \"${params.mobilesGroup}\")\n        throw e\n    }\n\n}\n\n/** 发送到钉钉  使用 shell脚本发送 因为 jenkins 的groovy不是完整的gdk功能 调jdk 又比较麻烦   干脆直接拼写 shell命令执行算了\n *  默认钉钉 url  发版通知群jenkins 机器人\n * @param info 消息内容\n * @param mobiles 艾特电话号码组{@link *MobilesGroup }\n * @author ming\n * @date 2017-12-22 18:58\n * */\ndef sendDD(String info, String mobiles\n           , String url = 'https://oapi.dingtalk.com/robot/send?access_token={钉钉机器人的token}') {\n    String headers = 'Content-Type: application/json'\n    String atStr = \"\"\n    String[] mobilesArr = mobiles.split(\",\")\n    for (int i = 0; i < mobilesArr.length; i++) {\n        //截取 2<=n <13中间11 位电话号码\n        String tmp = \"${mobilesArr[i]}\".substring(1, 12)\n        atStr = atStr + \" @${tmp}\"\n    }\n    String jsonStr = \"{ \\\"msgtype\\\": \\\"markdown\\\"\" +\n            \", \\\"markdown\\\": { \\\"title\\\":\\\"执行结果通知\\\", \\\"text\\\": \\\"#### ${atStr} 执行结果通知:${params.projectName}项目:${info}\\\" },\" +\n            \" \\\"at\\\": { \\\"atMobiles\\\": [${mobiles}], \\\"isAtAll\\\": false } }\"\n    String script = \"curl \\'${url}\\' -H \\'${headers}\\' -d \\'${jsonStr}\\' && exit 0 \"\n    sh script\n}\n\n/** 预留方法 发送邮件\n *\n * @author ming\n * @date 2017-12-22 19:01\n * */\ndef sendMail() {\n\n}\n\n/**根据时间格式化格式 获取当前时间  默认 yyyy-MM-dd HH:mm:ss\n * @param patten\n * @return dateStr\n * @author ming\n * @date 2017-12-22 23:39\n * */\ndef geFormatterLocalDate(String patten = \"yyyy-MM-dd HH:mm:ss\") {\n    Date date = new Date()\n    SimpleDateFormat formatter = new SimpleDateFormat(patten)\n    formatter.format(date)\n}\n\n/**流程错误 处理\n *\n * @author ming\n * @date 2017-12-27 22:29\n * */\ndef boolean isStop(Exception e) {\n    print e.getMessage()\n    def userInput = input(\n            id: 'userInput', message: '是否中止 此次流程:', parameters: [\n            [$class: 'TextParameterDefinition', defaultValue: 'true', description: '是否中止此次流程', name: 'flag'],\n    ])\n    print userInput\n    if ('true'.equalsIgnoreCase(userInput)) {\n        return true\n    } else if ('false'.equalsIgnoreCase(userInput)) {\n        return false\n    }\n}\n\n/** 运行容器\n *\n * @param port\n * @param containerName\n * @param registryImageName\n * @param host\n * @param sshKey\n * @author ming\n * @date 2017-12-26 23:36\n * */\ndef runSSHDocker(String port, String containerName, String registryImageName, String env, String imagePort,String host, String sshPort, String sshKey) {\n    // jenkins 配置的sshkey id\n    sshagent([sshKey]) {\n        //登陆服务器之后启动容器的命令\n        String runCmd = \"docker run -d -p ${port}:${imagePort} ${env} --name ${containerName} ${registryImageName}\"\n        // 登陆 服务器 运行容器\n        sh \"ssh -o StrictHostKeyChecking=no -t -t -p ${sshPort} root@${host} '${runCmd}'\"\n    }\n}\n\n/** 删除容器\n *\n * @param containerName\n * @param host\n * @param sshKey\n * @author ming\n * @date 2017-12-26 23:36\n * */\ndef removeSSHContainer(String containerName, String host, String sshPort, String sshKey) {\n    sshagent([sshKey]) {\n        //登陆服务器之后启动容器的命令\n        String runCmd = \"docker rm -f ${containerName}\"\n        // 登陆 服务器 运行容器\n        sh \"ssh -o StrictHostKeyChecking=no -t -t -p ${sshPort} root@${host} '${runCmd}'\"\n    }\n\n}\n\n/** 删除镜像\n *\n * @param registryImageName\n * @param host\n * @param sshKey\n * @author ming\n * @date 2017-12-26 23:36\n * */\ndef removeSSHImage(String registryImageName, String host, String sshPort, String sshKey) {\n    sshagent([sshKey]) {\n        //登陆服务器之后启动容器的命令\n        String runCmd = \"docker rmi ${registryImageName}\"\n        // 登陆 服务器 运行容器\n        sh \"ssh -o StrictHostKeyChecking=no -t -t -p ${sshPort} root@${host} '${runCmd}'\"\n    }\n}\n\n/**修改远程服务中的 imagename\n * 这里的imagename 必须是 仓库地址/镜像名:tag\n * @param newImageName\n * @param oldImageName\n * @author ming\n * @date 2017-12-27 10:04\n * */\ndef updateSSHImamgeName(String newImageName, String oldImageName, String host, String sshPort, String sshKey) {\n    sshagent([sshKey]) {\n        String runCmd = \"docker tag ${oldImageName} ${newImageName}\"\n        sh \"ssh -o StrictHostKeyChecking=no -t -t -p ${sshPort}  root@${host} '${runCmd}'\"\n    }\n}\n\n/** 推送远程服务器上的镜像\n * 这里镜像名称 必须是 仓库地址/镜像名:tag 格式\n * @param imageName\n * @author ming\n * @date 2017-12-27 10:08\n * */\ndef pushSSHImage(String imageName, String host, String sshPort, String sshKey) {\n    sshagent([sshKey]) {\n        String runCmd = \"docker push ${imageName}\"\n        sh \"ssh -o StrictHostKeyChecking=no -t -t -p ${sshPort} root@${host} '${runCmd}'\"\n    }\n}\n\n/** 部署\n * @param host\n * @param port\n * @param containerName\n * @param imageName\n * @author ming\n * @date 2017-12-27 09:43\n * */\ndef deploy(String host, String port, String containerName, String imageName, String env ,String imagePort, String sshPort = \"22\", String sshKey = 'efa90668-61e3-47f0-9730-b0e53ea7f97e') {\n    boolean flag = true\n    while (flag) {\n        try {\n            //运行docker\n            runSSHDocker(port, containerName, imageName, env,imagePort, host, sshPort, sshKey)\n            flag = false\n        } catch (e) {\n            print e.getMessage()\n            //删除运行中 的容器\n            removeSSHContainer(containerName, host, sshPort, sshKey)\n            //删除服务器上的image\n            removeSSHImage(imageName, host, sshPort, sshKey)\n        }\n    }\n}\n\n/**发布镜像到下一个阶段\n * @param newImageName\n * @param oldImageName\n * @param host\n * @param sshKey\n * @author ming\n * @date 2017-12-27 10:15\n * */\ndef release(String newImageName, String oldImageName, String host, String sshPort = \"22\", String sshKey = 'efa90668-61e3-47f0-9730-b0e53ea7f97e') {\n    updateSSHImamgeName(newImageName, oldImageName, host, sshPort, sshKey)\n    pushSSHImage(newImageName, host, sshPort, sshKey)\n    removeSSHImage(oldImageName, host, sshPort, sshKey)\n}\n\n\n\n/** ui自动化测试\n *\n * @author ming\n * @date 2017-12-27 22:12\n * */\ndef uiAutoTest() {\n\n}\n\n/**代码审查 并且发送报告\n *\n * @author ming\n * @date 2017-12-27 22:12\n * */\ndef codeReview() {\n\n}\n\n```\n\n将其中的用{} 包含的中文 替换成相应的参数即可 \nsshKey 是jenkins配置sshAgent插件的id \n\n3:安装启动 jenkins \ndocker 方式启动 参考: {% post_link docker启动jenkins docker启动jenkins %}\n\n4: 安装插件\n主要是要安装 sshAgent 、 docker相关插件、\n5:jenkins 引入项目定义的Jenkinsfile 形成流水线任务\n\n新增jenkins 流水线任务 \n配置流水线相关配置 定义选择 Pipeline script from SCM 》 scm选择git 配置git地址等相关属性 》script path 选择 Jenkinsfile 即可\n保存项目 》 启动项目 \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/综合应用/基于jenkins2-X和docker的集成的实例.md","raw":"---\ntitle: 基于jenkins2.X和docker的持续集成的实例\ncomments: true\ncategories: 实例\ntags:\n  - jenkins\n  - docker\n  - groovy\n  - linux\nabbrlink: 4732d3fc\ndate: 2018-02-09 14:13:29\n---\n#### 实例功能\n* 自动编译、打包\n* 自动分发、部署\n* 钉钉消息通知\n* 交互式部署\n\n通过jenkins部署一个index.html首页 \n\n#### 实现所需技能\n* jenkins \n* docker \n* groovy 写脚本\n* 项目打包\n* linux常用技术\n* java \n\n#### 步骤\n以这个目录为root目录: https://github.com/xuxianyu/info/tree/master/mingJenkins/simple  \n0:创建index.html\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>ming</title>\n</head>\n<body>\nming\n</body>\n</html>\n```\n1：创建docker file \n在项目目录下建立 Dockerfile\n```\nFROM docker.io/nginx:1.13-alpine\nMAINTAINER 'ming'\n# 复制index.html 到nginx 工作目录  \nCOPY index.html /usr/share/nginx/html\n```\n2：创建Jenkinsfile\nJenkinsfile 是jenkins出的用一套用来定义流水线模式的任务的脚本  \n其中有两种模式\n* pipeline jenkins标准的 配置脚本模式\n* script  使用groovy dsl 实现的jenkins 流水线模式脚本  \n\n我采用的是script模式  因为灵活 好用 两者区别请参考jenkins官网 \n```\nimport java.text.SimpleDateFormat\n\n/**jenkinsfile 使用groovy dsl方式实现\n *  采用 基于groovy 控制流程   groovy dsl +shell 共同协作 部署发布\n *  先在 dev rc 环境使用  单节点 直接停止之后部署   等待寻找对环境稳定影响较少的 多节点部署+dev rc  uat 环境单节点部署方案\n *  多节点部署:\n *  当前想法是使用 用空间换取时间的方式\n *  提供两套nginx 配置\n *  每次先启动 然后切换配置\n *  需要项目提供监听接口 监听当前是否有在执行的任务\n *  需要事务由一定的全局事务 或者一定的补偿机制 保证最终一致性\n *\n *\n *\n *\n *  修改此脚本需要的技能点:\n *  0: 熟悉 项目版本管理工具 如 svn  git\n *  1:熟悉 java groovy  此脚步使用是groovy 和部分jdk的语法书写\n *  2:熟悉jenkins 熟悉 2.x以上的pipe 方式的 jenkins task  由于jenkins官方文档 保持一贯的简略的风格 查阅资料请直接上github 或者stack overflow 之类的干货网站\n *  3:熟悉项目打包 如java的 maven打包 、 h5的 npm 打包、php的打包  、c# 打包\n *  4:熟悉 linux相关功能 及其原理 例如 ssh密钥验证原理\n *  5:熟悉docker 基础原理 及其相关命令\n *  6:了解 自动化测试 大致使用方法 如接口测试、ui测试 如何实现\n *  7:了解代码审查相关工具 使用\n *  8:了解钉钉、mail、jira 通知方式、如钉钉的webhook  mail发送原理、jira webhook\n *\n *\n *\n *  编码规范:\n *  0:注释一定要写全 特别是方法的注释\n *  1:遵循java 编码规范  只能说尽量遵循  毕竟不是java\n *  2:尽可能的使用 jenkins插件中的方法 而不是groovy dsl 调用 shell\n *  3:使用默认参数时候 请尽量在最顶层方法使用  基础性的方法 尽量避免使用默认参数\n *  4:由于groovy的sdk 可拆分的特性 jenkins对于部分groovy写法不支持\n *  5:groovy dsl  可以使用jdk的写法去写  支持完整的jdk  前提是环境里面有jdk  没有就不行\n *  6:为了保持 灵活性  只能使用 script pipe   禁止改称pipeline 模式书写\n *\n * @author ming\n * @mail 18120580001@163.com\n * @date 2017-12-21 16:44\n * */\n\nnode {\n    //启动任务的参数\n    properties([\n            parameters([\n\n                    //项目名称\n                    string(defaultValue: \"{项目名称 只能是小写英文 和-}\", description: \"项目名称\", name: \"projectName\"),\n                    //项目版本\n                    string(defaultValue: \"2.0.0\", description: \"项目版本\", name: \"projectVersion\"),\n                    //项目默认部署端口\n                    string(defaultValue: \"10000\", description: \"项目默认部署端口\", name: \"defaultPort\"),\n                    // 容器内部端口\n                    string(defaultValue: \"80\", description: \"项目默认部署端口\", name: \"imagePort\"),\n                    // dev 环境服务器\n                    string(defaultValue: \"{dev环境服务器地址}\", description: \"dev环境服务器地址\", name: \"devHost\"),\n                    //dev 环境 ssh 端口\n                    string(defaultValue: \"{dev环境服务器ssh登陆端口}\", description: \"dev环境服务器ssh端口\", name: \"devHostPort\"),\n                    //docker 私服地址\n                    string(defaultValue: \"{docker 私服仓库地址 }\", description: \"docker仓库地址\", name: \"dockerRegistry\"),\n                    // 项目通知用户组   钉钉艾特方式\n                    string(defaultValue: '\"{注册钉钉的电话号码}\"', description: \"项目组成员钉钉通知电话号码\", name: \"mobilesGroup\"),\n                    //容器名称\n                    string(defaultValue: \"{容器启动之后的名称}\", description: \"容器名称\", name: \"containerName\"),\n                    // 获取配置方式\n                    // ${params.${name}}\n            ])\n    ])\n\n    svnScmParams = checkout(scm)\n\n    //全局变量\n    // docker镜像私服\n    String dockerRegistryHost\n    if (\"${params.dockerRegistry}\".startsWith(\"http://\")) {\n        dockerRegistryHost = \"${params.dockerRegistry}\".substring(7)\n    } else if (\"${params.dockerRegistry}\".startsWith(\"https://\")) {\n        dockerRegistryHost = \"${params.dockerRegistry}\".substring(8)\n    } else {\n        throw new Exception(\"docker镜像仓库前缀必须是http:// 或者https：//\")\n    }\n\n    //dev 仓库镜像名称\n    String devRegistryImageName\n\n\n    // 刷新db的 镜像名称\n    //流程定义\n    try {\n        //建立编译环境  node+ docker in docker 环境 \n        docker.image('car2godeveloper/dind-node-build-runner').inside('--privileged') {\n\n            stage('编译项目') {\n                //闭包 递归 调用自己\n                Closure compile = { ->\n                    try {\n                        print '编译项目'\n                        //存放编译相关指令\n                        sendDD(\"编译通过\", \"${params.mobilesGroup}\")\n                    } catch (e) {\n                        if (isStop(e)) {\n                            sendDD(\"编译失败::${e.getMessage()}\", \"${params.mobilesGroup}\")\n                            throw e\n                        } else {\n                            sendDD(\"编译失败重新执行::${e.getMessage()}\", \"${params.mobilesGroup}\")\n                            call()\n                        }\n                    }\n                }\n                compile.call()\n            }\n\n\n            stage('构建发布项目docker image') {\n                Closure buildProjectDockerImage = { ->\n                    try {\n                        sh 'docker --version'\n                        //发布到私服仓库 {镜像仓库地址}/{镜像命名空间}/{镜像名称}:{tag标签}\n                        //imageName=${dockerRepository}/${namespace}/${projectName}-${projectVersion}-${环境}:${localDate}\n                        String localDate = geFormatterLocalDate(\"yyyyMMdd.HHmmss\")\n                        imageName = \"${params.projectName}-${params.projectVersion}-dev:${localDate}\"\n                        docker.withRegistry(\"${params.dockerRegistry}\") {\n                            docker.build(imageName).push()\n                            devRegistryImageName = \"${dockerRegistryHost}/${imageName}\"\n                        }\n                        sendDD(\"构建发布镜像成功\", \"${params.mobilesGroup}\")\n                    } catch (e) {\n                        if (isStop(e)) {\n                            sendDD(\"构建发布镜像失败::${e.getMessage()}\", \"${params.mobilesGroup}\")\n                            throw e\n                        } else {\n                            sendDD(\"构建发布镜像失败重新执行::${e.getMessage()}\", \"${params.mobilesGroup}\")\n                            call()\n                        }\n                    }\n                }\n                buildProjectDockerImage.call()\n            }\n\n\n\n            stage('部署dev环境') {\n                Closure deployDev = { ->\n                    try {\n                        print '部署dev环境'\n                        deploy(\"${params.devHost}\", \"${params.defaultPort}\", \"${params.containerName}\", \"${devRegistryImageName}\", \"\",\"${params.imagePort}\", \"${params.devHostPort}\")\n                        //ssh远程部署\n                        sendDD(\"部署dev成功\", \"${params.mobilesGroup}\")\n                    } catch (e) {\n                        if (isStop(e)) {\n                            sendDD(\"部署dev失败::${e.getMessage()}\", \"${params.mobilesGroup}\")\n                            throw e\n                        } else {\n                            sendDD(\"部署dev失败重新执行::${e.getMessage()}\", \"${params.mobilesGroup}\")\n                            call()\n                        }\n                    }\n                }\n                deployDev.call()\n            }\n\n\n            stage('dev环境自动化测试') {\n                Closure autoTestDev = { ->\n                    try {\n                        print 'dev环境自动化测试'\n                        //自动化测试指令\n                        sendDD(\"自动化测试dev环境成功\", \"${params.mobilesGroup}\")\n                    } catch (e) {\n                        if (isStop(e)) {\n                            sendDD(\"自动化测试dev环境失败::${e.getMessage()}\", \"${params.mobilesGroup}\")\n                            throw e\n                        } else {\n                            sendDD(\"自动化测试dev环境失败重新执行::${e.getMessage()}\", \"${params.mobilesGroup}\")\n                            call()\n                        }\n                    }\n                }\n                autoTestDev.call()\n            }\n\n\n            stage('dev环境功能确认？(发布rc环境镜像)') {\n                Closure releaseDev = { ->\n                    try {\n                        def userInput = input(\n                                id: 'userInput', message: '发布备注:', parameters: [\n                                [$class: 'TextParameterDefinition', defaultValue: '无', description: '发布备注:', name: 'memo'],\n                        ])\n                        print userInput\n                        //替换 名称中的 dev标记   在dev 机器上完成\n                        rcRegistryImageName = devRegistryImageName.replaceAll(\"-dev\", \"-rc\")\n                        release(rcRegistryImageName, devRegistryImageName, \"${params.devHost}\", \"${params.devHostPort}\")\n                        sh 'echo  dev环境功能测试确定'\n                        sendDD(\"dev环境发布到rc仓库成功\", \"${params.mobilesGroup}\")\n                    } catch (e) {\n                        if (isStop(e)) {\n                            sendDD(\"dev环境发布到rc仓库失败::${e.getMessage()}\", \"${params.mobilesGroup}\")\n                            throw e\n                        } else {\n                            sendDD(\"dev环境发布到rc仓库失败重新执行::${e.getMessage()}\", \"${params.mobilesGroup}\")\n                            call()\n                        }\n                    }\n                }\n                releaseDev.call()\n            }\n\n            //........  后面都是重复性的节点  直接复制改改就是的\n\n        }\n    } catch (e) {\n        print currentBuild.result\n        sendDD(\"持续集成构建失败\" + e.getMessage(), \"${params.mobilesGroup}\")\n        throw e\n    }\n\n}\n\n/** 发送到钉钉  使用 shell脚本发送 因为 jenkins 的groovy不是完整的gdk功能 调jdk 又比较麻烦   干脆直接拼写 shell命令执行算了\n *  默认钉钉 url  发版通知群jenkins 机器人\n * @param info 消息内容\n * @param mobiles 艾特电话号码组{@link *MobilesGroup }\n * @author ming\n * @date 2017-12-22 18:58\n * */\ndef sendDD(String info, String mobiles\n           , String url = 'https://oapi.dingtalk.com/robot/send?access_token={钉钉机器人的token}') {\n    String headers = 'Content-Type: application/json'\n    String atStr = \"\"\n    String[] mobilesArr = mobiles.split(\",\")\n    for (int i = 0; i < mobilesArr.length; i++) {\n        //截取 2<=n <13中间11 位电话号码\n        String tmp = \"${mobilesArr[i]}\".substring(1, 12)\n        atStr = atStr + \" @${tmp}\"\n    }\n    String jsonStr = \"{ \\\"msgtype\\\": \\\"markdown\\\"\" +\n            \", \\\"markdown\\\": { \\\"title\\\":\\\"执行结果通知\\\", \\\"text\\\": \\\"#### ${atStr} 执行结果通知:${params.projectName}项目:${info}\\\" },\" +\n            \" \\\"at\\\": { \\\"atMobiles\\\": [${mobiles}], \\\"isAtAll\\\": false } }\"\n    String script = \"curl \\'${url}\\' -H \\'${headers}\\' -d \\'${jsonStr}\\' && exit 0 \"\n    sh script\n}\n\n/** 预留方法 发送邮件\n *\n * @author ming\n * @date 2017-12-22 19:01\n * */\ndef sendMail() {\n\n}\n\n/**根据时间格式化格式 获取当前时间  默认 yyyy-MM-dd HH:mm:ss\n * @param patten\n * @return dateStr\n * @author ming\n * @date 2017-12-22 23:39\n * */\ndef geFormatterLocalDate(String patten = \"yyyy-MM-dd HH:mm:ss\") {\n    Date date = new Date()\n    SimpleDateFormat formatter = new SimpleDateFormat(patten)\n    formatter.format(date)\n}\n\n/**流程错误 处理\n *\n * @author ming\n * @date 2017-12-27 22:29\n * */\ndef boolean isStop(Exception e) {\n    print e.getMessage()\n    def userInput = input(\n            id: 'userInput', message: '是否中止 此次流程:', parameters: [\n            [$class: 'TextParameterDefinition', defaultValue: 'true', description: '是否中止此次流程', name: 'flag'],\n    ])\n    print userInput\n    if ('true'.equalsIgnoreCase(userInput)) {\n        return true\n    } else if ('false'.equalsIgnoreCase(userInput)) {\n        return false\n    }\n}\n\n/** 运行容器\n *\n * @param port\n * @param containerName\n * @param registryImageName\n * @param host\n * @param sshKey\n * @author ming\n * @date 2017-12-26 23:36\n * */\ndef runSSHDocker(String port, String containerName, String registryImageName, String env, String imagePort,String host, String sshPort, String sshKey) {\n    // jenkins 配置的sshkey id\n    sshagent([sshKey]) {\n        //登陆服务器之后启动容器的命令\n        String runCmd = \"docker run -d -p ${port}:${imagePort} ${env} --name ${containerName} ${registryImageName}\"\n        // 登陆 服务器 运行容器\n        sh \"ssh -o StrictHostKeyChecking=no -t -t -p ${sshPort} root@${host} '${runCmd}'\"\n    }\n}\n\n/** 删除容器\n *\n * @param containerName\n * @param host\n * @param sshKey\n * @author ming\n * @date 2017-12-26 23:36\n * */\ndef removeSSHContainer(String containerName, String host, String sshPort, String sshKey) {\n    sshagent([sshKey]) {\n        //登陆服务器之后启动容器的命令\n        String runCmd = \"docker rm -f ${containerName}\"\n        // 登陆 服务器 运行容器\n        sh \"ssh -o StrictHostKeyChecking=no -t -t -p ${sshPort} root@${host} '${runCmd}'\"\n    }\n\n}\n\n/** 删除镜像\n *\n * @param registryImageName\n * @param host\n * @param sshKey\n * @author ming\n * @date 2017-12-26 23:36\n * */\ndef removeSSHImage(String registryImageName, String host, String sshPort, String sshKey) {\n    sshagent([sshKey]) {\n        //登陆服务器之后启动容器的命令\n        String runCmd = \"docker rmi ${registryImageName}\"\n        // 登陆 服务器 运行容器\n        sh \"ssh -o StrictHostKeyChecking=no -t -t -p ${sshPort} root@${host} '${runCmd}'\"\n    }\n}\n\n/**修改远程服务中的 imagename\n * 这里的imagename 必须是 仓库地址/镜像名:tag\n * @param newImageName\n * @param oldImageName\n * @author ming\n * @date 2017-12-27 10:04\n * */\ndef updateSSHImamgeName(String newImageName, String oldImageName, String host, String sshPort, String sshKey) {\n    sshagent([sshKey]) {\n        String runCmd = \"docker tag ${oldImageName} ${newImageName}\"\n        sh \"ssh -o StrictHostKeyChecking=no -t -t -p ${sshPort}  root@${host} '${runCmd}'\"\n    }\n}\n\n/** 推送远程服务器上的镜像\n * 这里镜像名称 必须是 仓库地址/镜像名:tag 格式\n * @param imageName\n * @author ming\n * @date 2017-12-27 10:08\n * */\ndef pushSSHImage(String imageName, String host, String sshPort, String sshKey) {\n    sshagent([sshKey]) {\n        String runCmd = \"docker push ${imageName}\"\n        sh \"ssh -o StrictHostKeyChecking=no -t -t -p ${sshPort} root@${host} '${runCmd}'\"\n    }\n}\n\n/** 部署\n * @param host\n * @param port\n * @param containerName\n * @param imageName\n * @author ming\n * @date 2017-12-27 09:43\n * */\ndef deploy(String host, String port, String containerName, String imageName, String env ,String imagePort, String sshPort = \"22\", String sshKey = 'efa90668-61e3-47f0-9730-b0e53ea7f97e') {\n    boolean flag = true\n    while (flag) {\n        try {\n            //运行docker\n            runSSHDocker(port, containerName, imageName, env,imagePort, host, sshPort, sshKey)\n            flag = false\n        } catch (e) {\n            print e.getMessage()\n            //删除运行中 的容器\n            removeSSHContainer(containerName, host, sshPort, sshKey)\n            //删除服务器上的image\n            removeSSHImage(imageName, host, sshPort, sshKey)\n        }\n    }\n}\n\n/**发布镜像到下一个阶段\n * @param newImageName\n * @param oldImageName\n * @param host\n * @param sshKey\n * @author ming\n * @date 2017-12-27 10:15\n * */\ndef release(String newImageName, String oldImageName, String host, String sshPort = \"22\", String sshKey = 'efa90668-61e3-47f0-9730-b0e53ea7f97e') {\n    updateSSHImamgeName(newImageName, oldImageName, host, sshPort, sshKey)\n    pushSSHImage(newImageName, host, sshPort, sshKey)\n    removeSSHImage(oldImageName, host, sshPort, sshKey)\n}\n\n\n\n/** ui自动化测试\n *\n * @author ming\n * @date 2017-12-27 22:12\n * */\ndef uiAutoTest() {\n\n}\n\n/**代码审查 并且发送报告\n *\n * @author ming\n * @date 2017-12-27 22:12\n * */\ndef codeReview() {\n\n}\n\n```\n\n将其中的用{} 包含的中文 替换成相应的参数即可 \nsshKey 是jenkins配置sshAgent插件的id \n\n3:安装启动 jenkins \ndocker 方式启动 参考: {% post_link docker启动jenkins docker启动jenkins %}\n\n4: 安装插件\n主要是要安装 sshAgent 、 docker相关插件、\n5:jenkins 引入项目定义的Jenkinsfile 形成流水线任务\n\n新增jenkins 流水线任务 \n配置流水线相关配置 定义选择 Pipeline script from SCM 》 scm选择git 配置git地址等相关属性 》script path 选择 Jenkinsfile 即可\n保存项目 》 启动项目 \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"综合应用/基于jenkins2-X和docker的集成的实例","published":1,"updated":"2018-08-17T08:10:03.923Z","layout":"post","photos":[],"link":"","_id":"cjo9uau3l00cvmwczgevrk8wn","content":"<h4 id=\"实例功能\"><a href=\"#实例功能\" class=\"headerlink\" title=\"实例功能\"></a>实例功能</h4><ul><li>自动编译、打包</li><li>自动分发、部署</li><li>钉钉消息通知</li><li>交互式部署</li></ul><p>通过jenkins部署一个index.html首页</p><h4 id=\"实现所需技能\"><a href=\"#实现所需技能\" class=\"headerlink\" title=\"实现所需技能\"></a>实现所需技能</h4><ul><li>jenkins</li><li>docker</li><li>groovy 写脚本</li><li>项目打包</li><li>linux常用技术</li><li>java</li></ul><h4 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h4><p>以这个目录为root目录: <a href=\"https://github.com/xuxianyu/info/tree/master/mingJenkins/simple\" target=\"_blank\" rel=\"noopener\">https://github.com/xuxianyu/info/tree/master/mingJenkins/simple</a><br>0:创建index.html<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html lang=&quot;en&quot;&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class=\"line\">    &lt;title&gt;ming&lt;/title&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">ming</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p></p>\n<p>1：创建docker file<br>在项目目录下建立 Dockerfile<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM docker.io/nginx:1.13-alpine</span><br><span class=\"line\">MAINTAINER &apos;ming&apos;</span><br><span class=\"line\"># 复制index.html 到nginx 工作目录  </span><br><span class=\"line\">COPY index.html /usr/share/nginx/html</span><br></pre></td></tr></table></figure><p></p>\n<p>2：创建Jenkinsfile<br>Jenkinsfile 是jenkins出的用一套用来定义流水线模式的任务的脚本<br>其中有两种模式</p>\n<ul>\n<li>pipeline jenkins标准的 配置脚本模式</li>\n<li>script  使用groovy dsl 实现的jenkins 流水线模式脚本  </li>\n</ul>\n<p>我采用的是script模式  因为灵活 好用 两者区别请参考jenkins官网<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br><span class=\"line\">335</span><br><span class=\"line\">336</span><br><span class=\"line\">337</span><br><span class=\"line\">338</span><br><span class=\"line\">339</span><br><span class=\"line\">340</span><br><span class=\"line\">341</span><br><span class=\"line\">342</span><br><span class=\"line\">343</span><br><span class=\"line\">344</span><br><span class=\"line\">345</span><br><span class=\"line\">346</span><br><span class=\"line\">347</span><br><span class=\"line\">348</span><br><span class=\"line\">349</span><br><span class=\"line\">350</span><br><span class=\"line\">351</span><br><span class=\"line\">352</span><br><span class=\"line\">353</span><br><span class=\"line\">354</span><br><span class=\"line\">355</span><br><span class=\"line\">356</span><br><span class=\"line\">357</span><br><span class=\"line\">358</span><br><span class=\"line\">359</span><br><span class=\"line\">360</span><br><span class=\"line\">361</span><br><span class=\"line\">362</span><br><span class=\"line\">363</span><br><span class=\"line\">364</span><br><span class=\"line\">365</span><br><span class=\"line\">366</span><br><span class=\"line\">367</span><br><span class=\"line\">368</span><br><span class=\"line\">369</span><br><span class=\"line\">370</span><br><span class=\"line\">371</span><br><span class=\"line\">372</span><br><span class=\"line\">373</span><br><span class=\"line\">374</span><br><span class=\"line\">375</span><br><span class=\"line\">376</span><br><span class=\"line\">377</span><br><span class=\"line\">378</span><br><span class=\"line\">379</span><br><span class=\"line\">380</span><br><span class=\"line\">381</span><br><span class=\"line\">382</span><br><span class=\"line\">383</span><br><span class=\"line\">384</span><br><span class=\"line\">385</span><br><span class=\"line\">386</span><br><span class=\"line\">387</span><br><span class=\"line\">388</span><br><span class=\"line\">389</span><br><span class=\"line\">390</span><br><span class=\"line\">391</span><br><span class=\"line\">392</span><br><span class=\"line\">393</span><br><span class=\"line\">394</span><br><span class=\"line\">395</span><br><span class=\"line\">396</span><br><span class=\"line\">397</span><br><span class=\"line\">398</span><br><span class=\"line\">399</span><br><span class=\"line\">400</span><br><span class=\"line\">401</span><br><span class=\"line\">402</span><br><span class=\"line\">403</span><br><span class=\"line\">404</span><br><span class=\"line\">405</span><br><span class=\"line\">406</span><br><span class=\"line\">407</span><br><span class=\"line\">408</span><br><span class=\"line\">409</span><br><span class=\"line\">410</span><br><span class=\"line\">411</span><br><span class=\"line\">412</span><br><span class=\"line\">413</span><br><span class=\"line\">414</span><br><span class=\"line\">415</span><br><span class=\"line\">416</span><br><span class=\"line\">417</span><br><span class=\"line\">418</span><br><span class=\"line\">419</span><br><span class=\"line\">420</span><br><span class=\"line\">421</span><br><span class=\"line\">422</span><br><span class=\"line\">423</span><br><span class=\"line\">424</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import java.text.SimpleDateFormat</span><br><span class=\"line\"></span><br><span class=\"line\">/**jenkinsfile 使用groovy dsl方式实现</span><br><span class=\"line\"> *  采用 基于groovy 控制流程   groovy dsl +shell 共同协作 部署发布</span><br><span class=\"line\"> *  先在 dev rc 环境使用  单节点 直接停止之后部署   等待寻找对环境稳定影响较少的 多节点部署+dev rc  uat 环境单节点部署方案</span><br><span class=\"line\"> *  多节点部署:</span><br><span class=\"line\"> *  当前想法是使用 用空间换取时间的方式</span><br><span class=\"line\"> *  提供两套nginx 配置</span><br><span class=\"line\"> *  每次先启动 然后切换配置</span><br><span class=\"line\"> *  需要项目提供监听接口 监听当前是否有在执行的任务</span><br><span class=\"line\"> *  需要事务由一定的全局事务 或者一定的补偿机制 保证最终一致性</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *  修改此脚本需要的技能点:</span><br><span class=\"line\"> *  0: 熟悉 项目版本管理工具 如 svn  git</span><br><span class=\"line\"> *  1:熟悉 java groovy  此脚步使用是groovy 和部分jdk的语法书写</span><br><span class=\"line\"> *  2:熟悉jenkins 熟悉 2.x以上的pipe 方式的 jenkins task  由于jenkins官方文档 保持一贯的简略的风格 查阅资料请直接上github 或者stack overflow 之类的干货网站</span><br><span class=\"line\"> *  3:熟悉项目打包 如java的 maven打包 、 h5的 npm 打包、php的打包  、c# 打包</span><br><span class=\"line\"> *  4:熟悉 linux相关功能 及其原理 例如 ssh密钥验证原理</span><br><span class=\"line\"> *  5:熟悉docker 基础原理 及其相关命令</span><br><span class=\"line\"> *  6:了解 自动化测试 大致使用方法 如接口测试、ui测试 如何实现</span><br><span class=\"line\"> *  7:了解代码审查相关工具 使用</span><br><span class=\"line\"> *  8:了解钉钉、mail、jira 通知方式、如钉钉的webhook  mail发送原理、jira webhook</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *  编码规范:</span><br><span class=\"line\"> *  0:注释一定要写全 特别是方法的注释</span><br><span class=\"line\"> *  1:遵循java 编码规范  只能说尽量遵循  毕竟不是java</span><br><span class=\"line\"> *  2:尽可能的使用 jenkins插件中的方法 而不是groovy dsl 调用 shell</span><br><span class=\"line\"> *  3:使用默认参数时候 请尽量在最顶层方法使用  基础性的方法 尽量避免使用默认参数</span><br><span class=\"line\"> *  4:由于groovy的sdk 可拆分的特性 jenkins对于部分groovy写法不支持</span><br><span class=\"line\"> *  5:groovy dsl  可以使用jdk的写法去写  支持完整的jdk  前提是环境里面有jdk  没有就不行</span><br><span class=\"line\"> *  6:为了保持 灵活性  只能使用 script pipe   禁止改称pipeline 模式书写</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @author ming</span><br><span class=\"line\"> * @mail 18120580001@163.com</span><br><span class=\"line\"> * @date 2017-12-21 16:44</span><br><span class=\"line\"> * */</span><br><span class=\"line\"></span><br><span class=\"line\">node &#123;</span><br><span class=\"line\">    //启动任务的参数</span><br><span class=\"line\">    properties([</span><br><span class=\"line\">            parameters([</span><br><span class=\"line\"></span><br><span class=\"line\">                    //项目名称</span><br><span class=\"line\">                    string(defaultValue: &quot;&#123;项目名称 只能是小写英文 和-&#125;&quot;, description: &quot;项目名称&quot;, name: &quot;projectName&quot;),</span><br><span class=\"line\">                    //项目版本</span><br><span class=\"line\">                    string(defaultValue: &quot;2.0.0&quot;, description: &quot;项目版本&quot;, name: &quot;projectVersion&quot;),</span><br><span class=\"line\">                    //项目默认部署端口</span><br><span class=\"line\">                    string(defaultValue: &quot;10000&quot;, description: &quot;项目默认部署端口&quot;, name: &quot;defaultPort&quot;),</span><br><span class=\"line\">                    // 容器内部端口</span><br><span class=\"line\">                    string(defaultValue: &quot;80&quot;, description: &quot;项目默认部署端口&quot;, name: &quot;imagePort&quot;),</span><br><span class=\"line\">                    // dev 环境服务器</span><br><span class=\"line\">                    string(defaultValue: &quot;&#123;dev环境服务器地址&#125;&quot;, description: &quot;dev环境服务器地址&quot;, name: &quot;devHost&quot;),</span><br><span class=\"line\">                    //dev 环境 ssh 端口</span><br><span class=\"line\">                    string(defaultValue: &quot;&#123;dev环境服务器ssh登陆端口&#125;&quot;, description: &quot;dev环境服务器ssh端口&quot;, name: &quot;devHostPort&quot;),</span><br><span class=\"line\">                    //docker 私服地址</span><br><span class=\"line\">                    string(defaultValue: &quot;&#123;docker 私服仓库地址 &#125;&quot;, description: &quot;docker仓库地址&quot;, name: &quot;dockerRegistry&quot;),</span><br><span class=\"line\">                    // 项目通知用户组   钉钉艾特方式</span><br><span class=\"line\">                    string(defaultValue: &apos;&quot;&#123;注册钉钉的电话号码&#125;&quot;&apos;, description: &quot;项目组成员钉钉通知电话号码&quot;, name: &quot;mobilesGroup&quot;),</span><br><span class=\"line\">                    //容器名称</span><br><span class=\"line\">                    string(defaultValue: &quot;&#123;容器启动之后的名称&#125;&quot;, description: &quot;容器名称&quot;, name: &quot;containerName&quot;),</span><br><span class=\"line\">                    // 获取配置方式</span><br><span class=\"line\">                    // $&#123;params.$&#123;name&#125;&#125;</span><br><span class=\"line\">            ])</span><br><span class=\"line\">    ])</span><br><span class=\"line\"></span><br><span class=\"line\">    svnScmParams = checkout(scm)</span><br><span class=\"line\"></span><br><span class=\"line\">    //全局变量</span><br><span class=\"line\">    // docker镜像私服</span><br><span class=\"line\">    String dockerRegistryHost</span><br><span class=\"line\">    if (&quot;$&#123;params.dockerRegistry&#125;&quot;.startsWith(&quot;http://&quot;)) &#123;</span><br><span class=\"line\">        dockerRegistryHost = &quot;$&#123;params.dockerRegistry&#125;&quot;.substring(7)</span><br><span class=\"line\">    &#125; else if (&quot;$&#123;params.dockerRegistry&#125;&quot;.startsWith(&quot;https://&quot;)) &#123;</span><br><span class=\"line\">        dockerRegistryHost = &quot;$&#123;params.dockerRegistry&#125;&quot;.substring(8)</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        throw new Exception(&quot;docker镜像仓库前缀必须是http:// 或者https：//&quot;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    //dev 仓库镜像名称</span><br><span class=\"line\">    String devRegistryImageName</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    // 刷新db的 镜像名称</span><br><span class=\"line\">    //流程定义</span><br><span class=\"line\">    try &#123;</span><br><span class=\"line\">        //建立编译环境  node+ docker in docker 环境 </span><br><span class=\"line\">        docker.image(&apos;car2godeveloper/dind-node-build-runner&apos;).inside(&apos;--privileged&apos;) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            stage(&apos;编译项目&apos;) &#123;</span><br><span class=\"line\">                //闭包 递归 调用自己</span><br><span class=\"line\">                Closure compile = &#123; -&gt;</span><br><span class=\"line\">                    try &#123;</span><br><span class=\"line\">                        print &apos;编译项目&apos;</span><br><span class=\"line\">                        //存放编译相关指令</span><br><span class=\"line\">                        sendDD(&quot;编译通过&quot;, &quot;$&#123;params.mobilesGroup&#125;&quot;)</span><br><span class=\"line\">                    &#125; catch (e) &#123;</span><br><span class=\"line\">                        if (isStop(e)) &#123;</span><br><span class=\"line\">                            sendDD(&quot;编译失败::$&#123;e.getMessage()&#125;&quot;, &quot;$&#123;params.mobilesGroup&#125;&quot;)</span><br><span class=\"line\">                            throw e</span><br><span class=\"line\">                        &#125; else &#123;</span><br><span class=\"line\">                            sendDD(&quot;编译失败重新执行::$&#123;e.getMessage()&#125;&quot;, &quot;$&#123;params.mobilesGroup&#125;&quot;)</span><br><span class=\"line\">                            call()</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                compile.call()</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">            stage(&apos;构建发布项目docker image&apos;) &#123;</span><br><span class=\"line\">                Closure buildProjectDockerImage = &#123; -&gt;</span><br><span class=\"line\">                    try &#123;</span><br><span class=\"line\">                        sh &apos;docker --version&apos;</span><br><span class=\"line\">                        //发布到私服仓库 &#123;镜像仓库地址&#125;/&#123;镜像命名空间&#125;/&#123;镜像名称&#125;:&#123;tag标签&#125;</span><br><span class=\"line\">                        //imageName=$&#123;dockerRepository&#125;/$&#123;namespace&#125;/$&#123;projectName&#125;-$&#123;projectVersion&#125;-$&#123;环境&#125;:$&#123;localDate&#125;</span><br><span class=\"line\">                        String localDate = geFormatterLocalDate(&quot;yyyyMMdd.HHmmss&quot;)</span><br><span class=\"line\">                        imageName = &quot;$&#123;params.projectName&#125;-$&#123;params.projectVersion&#125;-dev:$&#123;localDate&#125;&quot;</span><br><span class=\"line\">                        docker.withRegistry(&quot;$&#123;params.dockerRegistry&#125;&quot;) &#123;</span><br><span class=\"line\">                            docker.build(imageName).push()</span><br><span class=\"line\">                            devRegistryImageName = &quot;$&#123;dockerRegistryHost&#125;/$&#123;imageName&#125;&quot;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        sendDD(&quot;构建发布镜像成功&quot;, &quot;$&#123;params.mobilesGroup&#125;&quot;)</span><br><span class=\"line\">                    &#125; catch (e) &#123;</span><br><span class=\"line\">                        if (isStop(e)) &#123;</span><br><span class=\"line\">                            sendDD(&quot;构建发布镜像失败::$&#123;e.getMessage()&#125;&quot;, &quot;$&#123;params.mobilesGroup&#125;&quot;)</span><br><span class=\"line\">                            throw e</span><br><span class=\"line\">                        &#125; else &#123;</span><br><span class=\"line\">                            sendDD(&quot;构建发布镜像失败重新执行::$&#123;e.getMessage()&#125;&quot;, &quot;$&#123;params.mobilesGroup&#125;&quot;)</span><br><span class=\"line\">                            call()</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                buildProjectDockerImage.call()</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">            stage(&apos;部署dev环境&apos;) &#123;</span><br><span class=\"line\">                Closure deployDev = &#123; -&gt;</span><br><span class=\"line\">                    try &#123;</span><br><span class=\"line\">                        print &apos;部署dev环境&apos;</span><br><span class=\"line\">                        deploy(&quot;$&#123;params.devHost&#125;&quot;, &quot;$&#123;params.defaultPort&#125;&quot;, &quot;$&#123;params.containerName&#125;&quot;, &quot;$&#123;devRegistryImageName&#125;&quot;, &quot;&quot;,&quot;$&#123;params.imagePort&#125;&quot;, &quot;$&#123;params.devHostPort&#125;&quot;)</span><br><span class=\"line\">                        //ssh远程部署</span><br><span class=\"line\">                        sendDD(&quot;部署dev成功&quot;, &quot;$&#123;params.mobilesGroup&#125;&quot;)</span><br><span class=\"line\">                    &#125; catch (e) &#123;</span><br><span class=\"line\">                        if (isStop(e)) &#123;</span><br><span class=\"line\">                            sendDD(&quot;部署dev失败::$&#123;e.getMessage()&#125;&quot;, &quot;$&#123;params.mobilesGroup&#125;&quot;)</span><br><span class=\"line\">                            throw e</span><br><span class=\"line\">                        &#125; else &#123;</span><br><span class=\"line\">                            sendDD(&quot;部署dev失败重新执行::$&#123;e.getMessage()&#125;&quot;, &quot;$&#123;params.mobilesGroup&#125;&quot;)</span><br><span class=\"line\">                            call()</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                deployDev.call()</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">            stage(&apos;dev环境自动化测试&apos;) &#123;</span><br><span class=\"line\">                Closure autoTestDev = &#123; -&gt;</span><br><span class=\"line\">                    try &#123;</span><br><span class=\"line\">                        print &apos;dev环境自动化测试&apos;</span><br><span class=\"line\">                        //自动化测试指令</span><br><span class=\"line\">                        sendDD(&quot;自动化测试dev环境成功&quot;, &quot;$&#123;params.mobilesGroup&#125;&quot;)</span><br><span class=\"line\">                    &#125; catch (e) &#123;</span><br><span class=\"line\">                        if (isStop(e)) &#123;</span><br><span class=\"line\">                            sendDD(&quot;自动化测试dev环境失败::$&#123;e.getMessage()&#125;&quot;, &quot;$&#123;params.mobilesGroup&#125;&quot;)</span><br><span class=\"line\">                            throw e</span><br><span class=\"line\">                        &#125; else &#123;</span><br><span class=\"line\">                            sendDD(&quot;自动化测试dev环境失败重新执行::$&#123;e.getMessage()&#125;&quot;, &quot;$&#123;params.mobilesGroup&#125;&quot;)</span><br><span class=\"line\">                            call()</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                autoTestDev.call()</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">            stage(&apos;dev环境功能确认？(发布rc环境镜像)&apos;) &#123;</span><br><span class=\"line\">                Closure releaseDev = &#123; -&gt;</span><br><span class=\"line\">                    try &#123;</span><br><span class=\"line\">                        def userInput = input(</span><br><span class=\"line\">                                id: &apos;userInput&apos;, message: &apos;发布备注:&apos;, parameters: [</span><br><span class=\"line\">                                [$class: &apos;TextParameterDefinition&apos;, defaultValue: &apos;无&apos;, description: &apos;发布备注:&apos;, name: &apos;memo&apos;],</span><br><span class=\"line\">                        ])</span><br><span class=\"line\">                        print userInput</span><br><span class=\"line\">                        //替换 名称中的 dev标记   在dev 机器上完成</span><br><span class=\"line\">                        rcRegistryImageName = devRegistryImageName.replaceAll(&quot;-dev&quot;, &quot;-rc&quot;)</span><br><span class=\"line\">                        release(rcRegistryImageName, devRegistryImageName, &quot;$&#123;params.devHost&#125;&quot;, &quot;$&#123;params.devHostPort&#125;&quot;)</span><br><span class=\"line\">                        sh &apos;echo  dev环境功能测试确定&apos;</span><br><span class=\"line\">                        sendDD(&quot;dev环境发布到rc仓库成功&quot;, &quot;$&#123;params.mobilesGroup&#125;&quot;)</span><br><span class=\"line\">                    &#125; catch (e) &#123;</span><br><span class=\"line\">                        if (isStop(e)) &#123;</span><br><span class=\"line\">                            sendDD(&quot;dev环境发布到rc仓库失败::$&#123;e.getMessage()&#125;&quot;, &quot;$&#123;params.mobilesGroup&#125;&quot;)</span><br><span class=\"line\">                            throw e</span><br><span class=\"line\">                        &#125; else &#123;</span><br><span class=\"line\">                            sendDD(&quot;dev环境发布到rc仓库失败重新执行::$&#123;e.getMessage()&#125;&quot;, &quot;$&#123;params.mobilesGroup&#125;&quot;)</span><br><span class=\"line\">                            call()</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                releaseDev.call()</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            //........  后面都是重复性的节点  直接复制改改就是的</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; catch (e) &#123;</span><br><span class=\"line\">        print currentBuild.result</span><br><span class=\"line\">        sendDD(&quot;持续集成构建失败&quot; + e.getMessage(), &quot;$&#123;params.mobilesGroup&#125;&quot;)</span><br><span class=\"line\">        throw e</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">/** 发送到钉钉  使用 shell脚本发送 因为 jenkins 的groovy不是完整的gdk功能 调jdk 又比较麻烦   干脆直接拼写 shell命令执行算了</span><br><span class=\"line\"> *  默认钉钉 url  发版通知群jenkins 机器人</span><br><span class=\"line\"> * @param info 消息内容</span><br><span class=\"line\"> * @param mobiles 艾特电话号码组&#123;@link *MobilesGroup &#125;</span><br><span class=\"line\"> * @author ming</span><br><span class=\"line\"> * @date 2017-12-22 18:58</span><br><span class=\"line\"> * */</span><br><span class=\"line\">def sendDD(String info, String mobiles</span><br><span class=\"line\">           , String url = &apos;https://oapi.dingtalk.com/robot/send?access_token=&#123;钉钉机器人的token&#125;&apos;) &#123;</span><br><span class=\"line\">    String headers = &apos;Content-Type: application/json&apos;</span><br><span class=\"line\">    String atStr = &quot;&quot;</span><br><span class=\"line\">    String[] mobilesArr = mobiles.split(&quot;,&quot;)</span><br><span class=\"line\">    for (int i = 0; i &lt; mobilesArr.length; i++) &#123;</span><br><span class=\"line\">        //截取 2&lt;=n &lt;13中间11 位电话号码</span><br><span class=\"line\">        String tmp = &quot;$&#123;mobilesArr[i]&#125;&quot;.substring(1, 12)</span><br><span class=\"line\">        atStr = atStr + &quot; @$&#123;tmp&#125;&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    String jsonStr = &quot;&#123; \\&quot;msgtype\\&quot;: \\&quot;markdown\\&quot;&quot; +</span><br><span class=\"line\">            &quot;, \\&quot;markdown\\&quot;: &#123; \\&quot;title\\&quot;:\\&quot;执行结果通知\\&quot;, \\&quot;text\\&quot;: \\&quot;#### $&#123;atStr&#125; 执行结果通知:$&#123;params.projectName&#125;项目:$&#123;info&#125;\\&quot; &#125;,&quot; +</span><br><span class=\"line\">            &quot; \\&quot;at\\&quot;: &#123; \\&quot;atMobiles\\&quot;: [$&#123;mobiles&#125;], \\&quot;isAtAll\\&quot;: false &#125; &#125;&quot;</span><br><span class=\"line\">    String script = &quot;curl \\&apos;$&#123;url&#125;\\&apos; -H \\&apos;$&#123;headers&#125;\\&apos; -d \\&apos;$&#123;jsonStr&#125;\\&apos; &amp;&amp; exit 0 &quot;</span><br><span class=\"line\">    sh script</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">/** 预留方法 发送邮件</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @author ming</span><br><span class=\"line\"> * @date 2017-12-22 19:01</span><br><span class=\"line\"> * */</span><br><span class=\"line\">def sendMail() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">/**根据时间格式化格式 获取当前时间  默认 yyyy-MM-dd HH:mm:ss</span><br><span class=\"line\"> * @param patten</span><br><span class=\"line\"> * @return dateStr</span><br><span class=\"line\"> * @author ming</span><br><span class=\"line\"> * @date 2017-12-22 23:39</span><br><span class=\"line\"> * */</span><br><span class=\"line\">def geFormatterLocalDate(String patten = &quot;yyyy-MM-dd HH:mm:ss&quot;) &#123;</span><br><span class=\"line\">    Date date = new Date()</span><br><span class=\"line\">    SimpleDateFormat formatter = new SimpleDateFormat(patten)</span><br><span class=\"line\">    formatter.format(date)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">/**流程错误 处理</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @author ming</span><br><span class=\"line\"> * @date 2017-12-27 22:29</span><br><span class=\"line\"> * */</span><br><span class=\"line\">def boolean isStop(Exception e) &#123;</span><br><span class=\"line\">    print e.getMessage()</span><br><span class=\"line\">    def userInput = input(</span><br><span class=\"line\">            id: &apos;userInput&apos;, message: &apos;是否中止 此次流程:&apos;, parameters: [</span><br><span class=\"line\">            [$class: &apos;TextParameterDefinition&apos;, defaultValue: &apos;true&apos;, description: &apos;是否中止此次流程&apos;, name: &apos;flag&apos;],</span><br><span class=\"line\">    ])</span><br><span class=\"line\">    print userInput</span><br><span class=\"line\">    if (&apos;true&apos;.equalsIgnoreCase(userInput)) &#123;</span><br><span class=\"line\">        return true</span><br><span class=\"line\">    &#125; else if (&apos;false&apos;.equalsIgnoreCase(userInput)) &#123;</span><br><span class=\"line\">        return false</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">/** 运行容器</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @param port</span><br><span class=\"line\"> * @param containerName</span><br><span class=\"line\"> * @param registryImageName</span><br><span class=\"line\"> * @param host</span><br><span class=\"line\"> * @param sshKey</span><br><span class=\"line\"> * @author ming</span><br><span class=\"line\"> * @date 2017-12-26 23:36</span><br><span class=\"line\"> * */</span><br><span class=\"line\">def runSSHDocker(String port, String containerName, String registryImageName, String env, String imagePort,String host, String sshPort, String sshKey) &#123;</span><br><span class=\"line\">    // jenkins 配置的sshkey id</span><br><span class=\"line\">    sshagent([sshKey]) &#123;</span><br><span class=\"line\">        //登陆服务器之后启动容器的命令</span><br><span class=\"line\">        String runCmd = &quot;docker run -d -p $&#123;port&#125;:$&#123;imagePort&#125; $&#123;env&#125; --name $&#123;containerName&#125; $&#123;registryImageName&#125;&quot;</span><br><span class=\"line\">        // 登陆 服务器 运行容器</span><br><span class=\"line\">        sh &quot;ssh -o StrictHostKeyChecking=no -t -t -p $&#123;sshPort&#125; root@$&#123;host&#125; &apos;$&#123;runCmd&#125;&apos;&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">/** 删除容器</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @param containerName</span><br><span class=\"line\"> * @param host</span><br><span class=\"line\"> * @param sshKey</span><br><span class=\"line\"> * @author ming</span><br><span class=\"line\"> * @date 2017-12-26 23:36</span><br><span class=\"line\"> * */</span><br><span class=\"line\">def removeSSHContainer(String containerName, String host, String sshPort, String sshKey) &#123;</span><br><span class=\"line\">    sshagent([sshKey]) &#123;</span><br><span class=\"line\">        //登陆服务器之后启动容器的命令</span><br><span class=\"line\">        String runCmd = &quot;docker rm -f $&#123;containerName&#125;&quot;</span><br><span class=\"line\">        // 登陆 服务器 运行容器</span><br><span class=\"line\">        sh &quot;ssh -o StrictHostKeyChecking=no -t -t -p $&#123;sshPort&#125; root@$&#123;host&#125; &apos;$&#123;runCmd&#125;&apos;&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">/** 删除镜像</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @param registryImageName</span><br><span class=\"line\"> * @param host</span><br><span class=\"line\"> * @param sshKey</span><br><span class=\"line\"> * @author ming</span><br><span class=\"line\"> * @date 2017-12-26 23:36</span><br><span class=\"line\"> * */</span><br><span class=\"line\">def removeSSHImage(String registryImageName, String host, String sshPort, String sshKey) &#123;</span><br><span class=\"line\">    sshagent([sshKey]) &#123;</span><br><span class=\"line\">        //登陆服务器之后启动容器的命令</span><br><span class=\"line\">        String runCmd = &quot;docker rmi $&#123;registryImageName&#125;&quot;</span><br><span class=\"line\">        // 登陆 服务器 运行容器</span><br><span class=\"line\">        sh &quot;ssh -o StrictHostKeyChecking=no -t -t -p $&#123;sshPort&#125; root@$&#123;host&#125; &apos;$&#123;runCmd&#125;&apos;&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">/**修改远程服务中的 imagename</span><br><span class=\"line\"> * 这里的imagename 必须是 仓库地址/镜像名:tag</span><br><span class=\"line\"> * @param newImageName</span><br><span class=\"line\"> * @param oldImageName</span><br><span class=\"line\"> * @author ming</span><br><span class=\"line\"> * @date 2017-12-27 10:04</span><br><span class=\"line\"> * */</span><br><span class=\"line\">def updateSSHImamgeName(String newImageName, String oldImageName, String host, String sshPort, String sshKey) &#123;</span><br><span class=\"line\">    sshagent([sshKey]) &#123;</span><br><span class=\"line\">        String runCmd = &quot;docker tag $&#123;oldImageName&#125; $&#123;newImageName&#125;&quot;</span><br><span class=\"line\">        sh &quot;ssh -o StrictHostKeyChecking=no -t -t -p $&#123;sshPort&#125;  root@$&#123;host&#125; &apos;$&#123;runCmd&#125;&apos;&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">/** 推送远程服务器上的镜像</span><br><span class=\"line\"> * 这里镜像名称 必须是 仓库地址/镜像名:tag 格式</span><br><span class=\"line\"> * @param imageName</span><br><span class=\"line\"> * @author ming</span><br><span class=\"line\"> * @date 2017-12-27 10:08</span><br><span class=\"line\"> * */</span><br><span class=\"line\">def pushSSHImage(String imageName, String host, String sshPort, String sshKey) &#123;</span><br><span class=\"line\">    sshagent([sshKey]) &#123;</span><br><span class=\"line\">        String runCmd = &quot;docker push $&#123;imageName&#125;&quot;</span><br><span class=\"line\">        sh &quot;ssh -o StrictHostKeyChecking=no -t -t -p $&#123;sshPort&#125; root@$&#123;host&#125; &apos;$&#123;runCmd&#125;&apos;&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">/** 部署</span><br><span class=\"line\"> * @param host</span><br><span class=\"line\"> * @param port</span><br><span class=\"line\"> * @param containerName</span><br><span class=\"line\"> * @param imageName</span><br><span class=\"line\"> * @author ming</span><br><span class=\"line\"> * @date 2017-12-27 09:43</span><br><span class=\"line\"> * */</span><br><span class=\"line\">def deploy(String host, String port, String containerName, String imageName, String env ,String imagePort, String sshPort = &quot;22&quot;, String sshKey = &apos;efa90668-61e3-47f0-9730-b0e53ea7f97e&apos;) &#123;</span><br><span class=\"line\">    boolean flag = true</span><br><span class=\"line\">    while (flag) &#123;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            //运行docker</span><br><span class=\"line\">            runSSHDocker(port, containerName, imageName, env,imagePort, host, sshPort, sshKey)</span><br><span class=\"line\">            flag = false</span><br><span class=\"line\">        &#125; catch (e) &#123;</span><br><span class=\"line\">            print e.getMessage()</span><br><span class=\"line\">            //删除运行中 的容器</span><br><span class=\"line\">            removeSSHContainer(containerName, host, sshPort, sshKey)</span><br><span class=\"line\">            //删除服务器上的image</span><br><span class=\"line\">            removeSSHImage(imageName, host, sshPort, sshKey)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">/**发布镜像到下一个阶段</span><br><span class=\"line\"> * @param newImageName</span><br><span class=\"line\"> * @param oldImageName</span><br><span class=\"line\"> * @param host</span><br><span class=\"line\"> * @param sshKey</span><br><span class=\"line\"> * @author ming</span><br><span class=\"line\"> * @date 2017-12-27 10:15</span><br><span class=\"line\"> * */</span><br><span class=\"line\">def release(String newImageName, String oldImageName, String host, String sshPort = &quot;22&quot;, String sshKey = &apos;efa90668-61e3-47f0-9730-b0e53ea7f97e&apos;) &#123;</span><br><span class=\"line\">    updateSSHImamgeName(newImageName, oldImageName, host, sshPort, sshKey)</span><br><span class=\"line\">    pushSSHImage(newImageName, host, sshPort, sshKey)</span><br><span class=\"line\">    removeSSHImage(oldImageName, host, sshPort, sshKey)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">/** ui自动化测试</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @author ming</span><br><span class=\"line\"> * @date 2017-12-27 22:12</span><br><span class=\"line\"> * */</span><br><span class=\"line\">def uiAutoTest() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">/**代码审查 并且发送报告</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @author ming</span><br><span class=\"line\"> * @date 2017-12-27 22:12</span><br><span class=\"line\"> * */</span><br><span class=\"line\">def codeReview() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p>\n<p>将其中的用{} 包含的中文 替换成相应的参数即可<br>sshKey 是jenkins配置sshAgent插件的id </p>\n<p>3:安装启动 jenkins<br>docker 方式启动 参考: </p>\n<p>4: 安装插件<br>主要是要安装 sshAgent 、 docker相关插件、<br>5:jenkins 引入项目定义的Jenkinsfile 形成流水线任务</p>\n<p>新增jenkins 流水线任务<br>配置流水线相关配置 定义选择 Pipeline script from SCM 》 scm选择git 配置git地址等相关属性 》script path 选择 Jenkinsfile 即可<br>保存项目 》 启动项目</p>","site":{"data":{}},"excerpt":"","more":"<h4 id=\"实例功能\"><a href=\"#实例功能\" class=\"headerlink\" title=\"实例功能\"></a>实例功能</h4><ul><li>自动编译、打包</li><li>自动分发、部署</li><li>钉钉消息通知</li><li>交互式部署</li></ul><p>通过jenkins部署一个index.html首页</p><h4 id=\"实现所需技能\"><a href=\"#实现所需技能\" class=\"headerlink\" title=\"实现所需技能\"></a>实现所需技能</h4><ul><li>jenkins</li><li>docker</li><li>groovy 写脚本</li><li>项目打包</li><li>linux常用技术</li><li>java</li></ul><h4 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h4><p>以这个目录为root目录: <a href=\"https://github.com/xuxianyu/info/tree/master/mingJenkins/simple\" target=\"_blank\" rel=\"noopener\">https://github.com/xuxianyu/info/tree/master/mingJenkins/simple</a><br>0:创建index.html<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html lang=&quot;en&quot;&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class=\"line\">    &lt;title&gt;ming&lt;/title&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">ming</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p></p>\n<p>1：创建docker file<br>在项目目录下建立 Dockerfile<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM docker.io/nginx:1.13-alpine</span><br><span class=\"line\">MAINTAINER &apos;ming&apos;</span><br><span class=\"line\"># 复制index.html 到nginx 工作目录  </span><br><span class=\"line\">COPY index.html /usr/share/nginx/html</span><br></pre></td></tr></table></figure><p></p>\n<p>2：创建Jenkinsfile<br>Jenkinsfile 是jenkins出的用一套用来定义流水线模式的任务的脚本<br>其中有两种模式</p>\n<ul>\n<li>pipeline jenkins标准的 配置脚本模式</li>\n<li>script  使用groovy dsl 实现的jenkins 流水线模式脚本  </li>\n</ul>\n<p>我采用的是script模式  因为灵活 好用 两者区别请参考jenkins官网<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br><span class=\"line\">335</span><br><span class=\"line\">336</span><br><span class=\"line\">337</span><br><span class=\"line\">338</span><br><span class=\"line\">339</span><br><span class=\"line\">340</span><br><span class=\"line\">341</span><br><span class=\"line\">342</span><br><span class=\"line\">343</span><br><span class=\"line\">344</span><br><span class=\"line\">345</span><br><span class=\"line\">346</span><br><span class=\"line\">347</span><br><span class=\"line\">348</span><br><span class=\"line\">349</span><br><span class=\"line\">350</span><br><span class=\"line\">351</span><br><span class=\"line\">352</span><br><span class=\"line\">353</span><br><span class=\"line\">354</span><br><span class=\"line\">355</span><br><span class=\"line\">356</span><br><span class=\"line\">357</span><br><span class=\"line\">358</span><br><span class=\"line\">359</span><br><span class=\"line\">360</span><br><span class=\"line\">361</span><br><span class=\"line\">362</span><br><span class=\"line\">363</span><br><span class=\"line\">364</span><br><span class=\"line\">365</span><br><span class=\"line\">366</span><br><span class=\"line\">367</span><br><span class=\"line\">368</span><br><span class=\"line\">369</span><br><span class=\"line\">370</span><br><span class=\"line\">371</span><br><span class=\"line\">372</span><br><span class=\"line\">373</span><br><span class=\"line\">374</span><br><span class=\"line\">375</span><br><span class=\"line\">376</span><br><span class=\"line\">377</span><br><span class=\"line\">378</span><br><span class=\"line\">379</span><br><span class=\"line\">380</span><br><span class=\"line\">381</span><br><span class=\"line\">382</span><br><span class=\"line\">383</span><br><span class=\"line\">384</span><br><span class=\"line\">385</span><br><span class=\"line\">386</span><br><span class=\"line\">387</span><br><span class=\"line\">388</span><br><span class=\"line\">389</span><br><span class=\"line\">390</span><br><span class=\"line\">391</span><br><span class=\"line\">392</span><br><span class=\"line\">393</span><br><span class=\"line\">394</span><br><span class=\"line\">395</span><br><span class=\"line\">396</span><br><span class=\"line\">397</span><br><span class=\"line\">398</span><br><span class=\"line\">399</span><br><span class=\"line\">400</span><br><span class=\"line\">401</span><br><span class=\"line\">402</span><br><span class=\"line\">403</span><br><span class=\"line\">404</span><br><span class=\"line\">405</span><br><span class=\"line\">406</span><br><span class=\"line\">407</span><br><span class=\"line\">408</span><br><span class=\"line\">409</span><br><span class=\"line\">410</span><br><span class=\"line\">411</span><br><span class=\"line\">412</span><br><span class=\"line\">413</span><br><span class=\"line\">414</span><br><span class=\"line\">415</span><br><span class=\"line\">416</span><br><span class=\"line\">417</span><br><span class=\"line\">418</span><br><span class=\"line\">419</span><br><span class=\"line\">420</span><br><span class=\"line\">421</span><br><span class=\"line\">422</span><br><span class=\"line\">423</span><br><span class=\"line\">424</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import java.text.SimpleDateFormat</span><br><span class=\"line\"></span><br><span class=\"line\">/**jenkinsfile 使用groovy dsl方式实现</span><br><span class=\"line\"> *  采用 基于groovy 控制流程   groovy dsl +shell 共同协作 部署发布</span><br><span class=\"line\"> *  先在 dev rc 环境使用  单节点 直接停止之后部署   等待寻找对环境稳定影响较少的 多节点部署+dev rc  uat 环境单节点部署方案</span><br><span class=\"line\"> *  多节点部署:</span><br><span class=\"line\"> *  当前想法是使用 用空间换取时间的方式</span><br><span class=\"line\"> *  提供两套nginx 配置</span><br><span class=\"line\"> *  每次先启动 然后切换配置</span><br><span class=\"line\"> *  需要项目提供监听接口 监听当前是否有在执行的任务</span><br><span class=\"line\"> *  需要事务由一定的全局事务 或者一定的补偿机制 保证最终一致性</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *  修改此脚本需要的技能点:</span><br><span class=\"line\"> *  0: 熟悉 项目版本管理工具 如 svn  git</span><br><span class=\"line\"> *  1:熟悉 java groovy  此脚步使用是groovy 和部分jdk的语法书写</span><br><span class=\"line\"> *  2:熟悉jenkins 熟悉 2.x以上的pipe 方式的 jenkins task  由于jenkins官方文档 保持一贯的简略的风格 查阅资料请直接上github 或者stack overflow 之类的干货网站</span><br><span class=\"line\"> *  3:熟悉项目打包 如java的 maven打包 、 h5的 npm 打包、php的打包  、c# 打包</span><br><span class=\"line\"> *  4:熟悉 linux相关功能 及其原理 例如 ssh密钥验证原理</span><br><span class=\"line\"> *  5:熟悉docker 基础原理 及其相关命令</span><br><span class=\"line\"> *  6:了解 自动化测试 大致使用方法 如接口测试、ui测试 如何实现</span><br><span class=\"line\"> *  7:了解代码审查相关工具 使用</span><br><span class=\"line\"> *  8:了解钉钉、mail、jira 通知方式、如钉钉的webhook  mail发送原理、jira webhook</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *  编码规范:</span><br><span class=\"line\"> *  0:注释一定要写全 特别是方法的注释</span><br><span class=\"line\"> *  1:遵循java 编码规范  只能说尽量遵循  毕竟不是java</span><br><span class=\"line\"> *  2:尽可能的使用 jenkins插件中的方法 而不是groovy dsl 调用 shell</span><br><span class=\"line\"> *  3:使用默认参数时候 请尽量在最顶层方法使用  基础性的方法 尽量避免使用默认参数</span><br><span class=\"line\"> *  4:由于groovy的sdk 可拆分的特性 jenkins对于部分groovy写法不支持</span><br><span class=\"line\"> *  5:groovy dsl  可以使用jdk的写法去写  支持完整的jdk  前提是环境里面有jdk  没有就不行</span><br><span class=\"line\"> *  6:为了保持 灵活性  只能使用 script pipe   禁止改称pipeline 模式书写</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @author ming</span><br><span class=\"line\"> * @mail 18120580001@163.com</span><br><span class=\"line\"> * @date 2017-12-21 16:44</span><br><span class=\"line\"> * */</span><br><span class=\"line\"></span><br><span class=\"line\">node &#123;</span><br><span class=\"line\">    //启动任务的参数</span><br><span class=\"line\">    properties([</span><br><span class=\"line\">            parameters([</span><br><span class=\"line\"></span><br><span class=\"line\">                    //项目名称</span><br><span class=\"line\">                    string(defaultValue: &quot;&#123;项目名称 只能是小写英文 和-&#125;&quot;, description: &quot;项目名称&quot;, name: &quot;projectName&quot;),</span><br><span class=\"line\">                    //项目版本</span><br><span class=\"line\">                    string(defaultValue: &quot;2.0.0&quot;, description: &quot;项目版本&quot;, name: &quot;projectVersion&quot;),</span><br><span class=\"line\">                    //项目默认部署端口</span><br><span class=\"line\">                    string(defaultValue: &quot;10000&quot;, description: &quot;项目默认部署端口&quot;, name: &quot;defaultPort&quot;),</span><br><span class=\"line\">                    // 容器内部端口</span><br><span class=\"line\">                    string(defaultValue: &quot;80&quot;, description: &quot;项目默认部署端口&quot;, name: &quot;imagePort&quot;),</span><br><span class=\"line\">                    // dev 环境服务器</span><br><span class=\"line\">                    string(defaultValue: &quot;&#123;dev环境服务器地址&#125;&quot;, description: &quot;dev环境服务器地址&quot;, name: &quot;devHost&quot;),</span><br><span class=\"line\">                    //dev 环境 ssh 端口</span><br><span class=\"line\">                    string(defaultValue: &quot;&#123;dev环境服务器ssh登陆端口&#125;&quot;, description: &quot;dev环境服务器ssh端口&quot;, name: &quot;devHostPort&quot;),</span><br><span class=\"line\">                    //docker 私服地址</span><br><span class=\"line\">                    string(defaultValue: &quot;&#123;docker 私服仓库地址 &#125;&quot;, description: &quot;docker仓库地址&quot;, name: &quot;dockerRegistry&quot;),</span><br><span class=\"line\">                    // 项目通知用户组   钉钉艾特方式</span><br><span class=\"line\">                    string(defaultValue: &apos;&quot;&#123;注册钉钉的电话号码&#125;&quot;&apos;, description: &quot;项目组成员钉钉通知电话号码&quot;, name: &quot;mobilesGroup&quot;),</span><br><span class=\"line\">                    //容器名称</span><br><span class=\"line\">                    string(defaultValue: &quot;&#123;容器启动之后的名称&#125;&quot;, description: &quot;容器名称&quot;, name: &quot;containerName&quot;),</span><br><span class=\"line\">                    // 获取配置方式</span><br><span class=\"line\">                    // $&#123;params.$&#123;name&#125;&#125;</span><br><span class=\"line\">            ])</span><br><span class=\"line\">    ])</span><br><span class=\"line\"></span><br><span class=\"line\">    svnScmParams = checkout(scm)</span><br><span class=\"line\"></span><br><span class=\"line\">    //全局变量</span><br><span class=\"line\">    // docker镜像私服</span><br><span class=\"line\">    String dockerRegistryHost</span><br><span class=\"line\">    if (&quot;$&#123;params.dockerRegistry&#125;&quot;.startsWith(&quot;http://&quot;)) &#123;</span><br><span class=\"line\">        dockerRegistryHost = &quot;$&#123;params.dockerRegistry&#125;&quot;.substring(7)</span><br><span class=\"line\">    &#125; else if (&quot;$&#123;params.dockerRegistry&#125;&quot;.startsWith(&quot;https://&quot;)) &#123;</span><br><span class=\"line\">        dockerRegistryHost = &quot;$&#123;params.dockerRegistry&#125;&quot;.substring(8)</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        throw new Exception(&quot;docker镜像仓库前缀必须是http:// 或者https：//&quot;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    //dev 仓库镜像名称</span><br><span class=\"line\">    String devRegistryImageName</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    // 刷新db的 镜像名称</span><br><span class=\"line\">    //流程定义</span><br><span class=\"line\">    try &#123;</span><br><span class=\"line\">        //建立编译环境  node+ docker in docker 环境 </span><br><span class=\"line\">        docker.image(&apos;car2godeveloper/dind-node-build-runner&apos;).inside(&apos;--privileged&apos;) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            stage(&apos;编译项目&apos;) &#123;</span><br><span class=\"line\">                //闭包 递归 调用自己</span><br><span class=\"line\">                Closure compile = &#123; -&gt;</span><br><span class=\"line\">                    try &#123;</span><br><span class=\"line\">                        print &apos;编译项目&apos;</span><br><span class=\"line\">                        //存放编译相关指令</span><br><span class=\"line\">                        sendDD(&quot;编译通过&quot;, &quot;$&#123;params.mobilesGroup&#125;&quot;)</span><br><span class=\"line\">                    &#125; catch (e) &#123;</span><br><span class=\"line\">                        if (isStop(e)) &#123;</span><br><span class=\"line\">                            sendDD(&quot;编译失败::$&#123;e.getMessage()&#125;&quot;, &quot;$&#123;params.mobilesGroup&#125;&quot;)</span><br><span class=\"line\">                            throw e</span><br><span class=\"line\">                        &#125; else &#123;</span><br><span class=\"line\">                            sendDD(&quot;编译失败重新执行::$&#123;e.getMessage()&#125;&quot;, &quot;$&#123;params.mobilesGroup&#125;&quot;)</span><br><span class=\"line\">                            call()</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                compile.call()</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">            stage(&apos;构建发布项目docker image&apos;) &#123;</span><br><span class=\"line\">                Closure buildProjectDockerImage = &#123; -&gt;</span><br><span class=\"line\">                    try &#123;</span><br><span class=\"line\">                        sh &apos;docker --version&apos;</span><br><span class=\"line\">                        //发布到私服仓库 &#123;镜像仓库地址&#125;/&#123;镜像命名空间&#125;/&#123;镜像名称&#125;:&#123;tag标签&#125;</span><br><span class=\"line\">                        //imageName=$&#123;dockerRepository&#125;/$&#123;namespace&#125;/$&#123;projectName&#125;-$&#123;projectVersion&#125;-$&#123;环境&#125;:$&#123;localDate&#125;</span><br><span class=\"line\">                        String localDate = geFormatterLocalDate(&quot;yyyyMMdd.HHmmss&quot;)</span><br><span class=\"line\">                        imageName = &quot;$&#123;params.projectName&#125;-$&#123;params.projectVersion&#125;-dev:$&#123;localDate&#125;&quot;</span><br><span class=\"line\">                        docker.withRegistry(&quot;$&#123;params.dockerRegistry&#125;&quot;) &#123;</span><br><span class=\"line\">                            docker.build(imageName).push()</span><br><span class=\"line\">                            devRegistryImageName = &quot;$&#123;dockerRegistryHost&#125;/$&#123;imageName&#125;&quot;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        sendDD(&quot;构建发布镜像成功&quot;, &quot;$&#123;params.mobilesGroup&#125;&quot;)</span><br><span class=\"line\">                    &#125; catch (e) &#123;</span><br><span class=\"line\">                        if (isStop(e)) &#123;</span><br><span class=\"line\">                            sendDD(&quot;构建发布镜像失败::$&#123;e.getMessage()&#125;&quot;, &quot;$&#123;params.mobilesGroup&#125;&quot;)</span><br><span class=\"line\">                            throw e</span><br><span class=\"line\">                        &#125; else &#123;</span><br><span class=\"line\">                            sendDD(&quot;构建发布镜像失败重新执行::$&#123;e.getMessage()&#125;&quot;, &quot;$&#123;params.mobilesGroup&#125;&quot;)</span><br><span class=\"line\">                            call()</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                buildProjectDockerImage.call()</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">            stage(&apos;部署dev环境&apos;) &#123;</span><br><span class=\"line\">                Closure deployDev = &#123; -&gt;</span><br><span class=\"line\">                    try &#123;</span><br><span class=\"line\">                        print &apos;部署dev环境&apos;</span><br><span class=\"line\">                        deploy(&quot;$&#123;params.devHost&#125;&quot;, &quot;$&#123;params.defaultPort&#125;&quot;, &quot;$&#123;params.containerName&#125;&quot;, &quot;$&#123;devRegistryImageName&#125;&quot;, &quot;&quot;,&quot;$&#123;params.imagePort&#125;&quot;, &quot;$&#123;params.devHostPort&#125;&quot;)</span><br><span class=\"line\">                        //ssh远程部署</span><br><span class=\"line\">                        sendDD(&quot;部署dev成功&quot;, &quot;$&#123;params.mobilesGroup&#125;&quot;)</span><br><span class=\"line\">                    &#125; catch (e) &#123;</span><br><span class=\"line\">                        if (isStop(e)) &#123;</span><br><span class=\"line\">                            sendDD(&quot;部署dev失败::$&#123;e.getMessage()&#125;&quot;, &quot;$&#123;params.mobilesGroup&#125;&quot;)</span><br><span class=\"line\">                            throw e</span><br><span class=\"line\">                        &#125; else &#123;</span><br><span class=\"line\">                            sendDD(&quot;部署dev失败重新执行::$&#123;e.getMessage()&#125;&quot;, &quot;$&#123;params.mobilesGroup&#125;&quot;)</span><br><span class=\"line\">                            call()</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                deployDev.call()</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">            stage(&apos;dev环境自动化测试&apos;) &#123;</span><br><span class=\"line\">                Closure autoTestDev = &#123; -&gt;</span><br><span class=\"line\">                    try &#123;</span><br><span class=\"line\">                        print &apos;dev环境自动化测试&apos;</span><br><span class=\"line\">                        //自动化测试指令</span><br><span class=\"line\">                        sendDD(&quot;自动化测试dev环境成功&quot;, &quot;$&#123;params.mobilesGroup&#125;&quot;)</span><br><span class=\"line\">                    &#125; catch (e) &#123;</span><br><span class=\"line\">                        if (isStop(e)) &#123;</span><br><span class=\"line\">                            sendDD(&quot;自动化测试dev环境失败::$&#123;e.getMessage()&#125;&quot;, &quot;$&#123;params.mobilesGroup&#125;&quot;)</span><br><span class=\"line\">                            throw e</span><br><span class=\"line\">                        &#125; else &#123;</span><br><span class=\"line\">                            sendDD(&quot;自动化测试dev环境失败重新执行::$&#123;e.getMessage()&#125;&quot;, &quot;$&#123;params.mobilesGroup&#125;&quot;)</span><br><span class=\"line\">                            call()</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                autoTestDev.call()</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">            stage(&apos;dev环境功能确认？(发布rc环境镜像)&apos;) &#123;</span><br><span class=\"line\">                Closure releaseDev = &#123; -&gt;</span><br><span class=\"line\">                    try &#123;</span><br><span class=\"line\">                        def userInput = input(</span><br><span class=\"line\">                                id: &apos;userInput&apos;, message: &apos;发布备注:&apos;, parameters: [</span><br><span class=\"line\">                                [$class: &apos;TextParameterDefinition&apos;, defaultValue: &apos;无&apos;, description: &apos;发布备注:&apos;, name: &apos;memo&apos;],</span><br><span class=\"line\">                        ])</span><br><span class=\"line\">                        print userInput</span><br><span class=\"line\">                        //替换 名称中的 dev标记   在dev 机器上完成</span><br><span class=\"line\">                        rcRegistryImageName = devRegistryImageName.replaceAll(&quot;-dev&quot;, &quot;-rc&quot;)</span><br><span class=\"line\">                        release(rcRegistryImageName, devRegistryImageName, &quot;$&#123;params.devHost&#125;&quot;, &quot;$&#123;params.devHostPort&#125;&quot;)</span><br><span class=\"line\">                        sh &apos;echo  dev环境功能测试确定&apos;</span><br><span class=\"line\">                        sendDD(&quot;dev环境发布到rc仓库成功&quot;, &quot;$&#123;params.mobilesGroup&#125;&quot;)</span><br><span class=\"line\">                    &#125; catch (e) &#123;</span><br><span class=\"line\">                        if (isStop(e)) &#123;</span><br><span class=\"line\">                            sendDD(&quot;dev环境发布到rc仓库失败::$&#123;e.getMessage()&#125;&quot;, &quot;$&#123;params.mobilesGroup&#125;&quot;)</span><br><span class=\"line\">                            throw e</span><br><span class=\"line\">                        &#125; else &#123;</span><br><span class=\"line\">                            sendDD(&quot;dev环境发布到rc仓库失败重新执行::$&#123;e.getMessage()&#125;&quot;, &quot;$&#123;params.mobilesGroup&#125;&quot;)</span><br><span class=\"line\">                            call()</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                releaseDev.call()</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            //........  后面都是重复性的节点  直接复制改改就是的</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; catch (e) &#123;</span><br><span class=\"line\">        print currentBuild.result</span><br><span class=\"line\">        sendDD(&quot;持续集成构建失败&quot; + e.getMessage(), &quot;$&#123;params.mobilesGroup&#125;&quot;)</span><br><span class=\"line\">        throw e</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">/** 发送到钉钉  使用 shell脚本发送 因为 jenkins 的groovy不是完整的gdk功能 调jdk 又比较麻烦   干脆直接拼写 shell命令执行算了</span><br><span class=\"line\"> *  默认钉钉 url  发版通知群jenkins 机器人</span><br><span class=\"line\"> * @param info 消息内容</span><br><span class=\"line\"> * @param mobiles 艾特电话号码组&#123;@link *MobilesGroup &#125;</span><br><span class=\"line\"> * @author ming</span><br><span class=\"line\"> * @date 2017-12-22 18:58</span><br><span class=\"line\"> * */</span><br><span class=\"line\">def sendDD(String info, String mobiles</span><br><span class=\"line\">           , String url = &apos;https://oapi.dingtalk.com/robot/send?access_token=&#123;钉钉机器人的token&#125;&apos;) &#123;</span><br><span class=\"line\">    String headers = &apos;Content-Type: application/json&apos;</span><br><span class=\"line\">    String atStr = &quot;&quot;</span><br><span class=\"line\">    String[] mobilesArr = mobiles.split(&quot;,&quot;)</span><br><span class=\"line\">    for (int i = 0; i &lt; mobilesArr.length; i++) &#123;</span><br><span class=\"line\">        //截取 2&lt;=n &lt;13中间11 位电话号码</span><br><span class=\"line\">        String tmp = &quot;$&#123;mobilesArr[i]&#125;&quot;.substring(1, 12)</span><br><span class=\"line\">        atStr = atStr + &quot; @$&#123;tmp&#125;&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    String jsonStr = &quot;&#123; \\&quot;msgtype\\&quot;: \\&quot;markdown\\&quot;&quot; +</span><br><span class=\"line\">            &quot;, \\&quot;markdown\\&quot;: &#123; \\&quot;title\\&quot;:\\&quot;执行结果通知\\&quot;, \\&quot;text\\&quot;: \\&quot;#### $&#123;atStr&#125; 执行结果通知:$&#123;params.projectName&#125;项目:$&#123;info&#125;\\&quot; &#125;,&quot; +</span><br><span class=\"line\">            &quot; \\&quot;at\\&quot;: &#123; \\&quot;atMobiles\\&quot;: [$&#123;mobiles&#125;], \\&quot;isAtAll\\&quot;: false &#125; &#125;&quot;</span><br><span class=\"line\">    String script = &quot;curl \\&apos;$&#123;url&#125;\\&apos; -H \\&apos;$&#123;headers&#125;\\&apos; -d \\&apos;$&#123;jsonStr&#125;\\&apos; &amp;&amp; exit 0 &quot;</span><br><span class=\"line\">    sh script</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">/** 预留方法 发送邮件</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @author ming</span><br><span class=\"line\"> * @date 2017-12-22 19:01</span><br><span class=\"line\"> * */</span><br><span class=\"line\">def sendMail() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">/**根据时间格式化格式 获取当前时间  默认 yyyy-MM-dd HH:mm:ss</span><br><span class=\"line\"> * @param patten</span><br><span class=\"line\"> * @return dateStr</span><br><span class=\"line\"> * @author ming</span><br><span class=\"line\"> * @date 2017-12-22 23:39</span><br><span class=\"line\"> * */</span><br><span class=\"line\">def geFormatterLocalDate(String patten = &quot;yyyy-MM-dd HH:mm:ss&quot;) &#123;</span><br><span class=\"line\">    Date date = new Date()</span><br><span class=\"line\">    SimpleDateFormat formatter = new SimpleDateFormat(patten)</span><br><span class=\"line\">    formatter.format(date)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">/**流程错误 处理</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @author ming</span><br><span class=\"line\"> * @date 2017-12-27 22:29</span><br><span class=\"line\"> * */</span><br><span class=\"line\">def boolean isStop(Exception e) &#123;</span><br><span class=\"line\">    print e.getMessage()</span><br><span class=\"line\">    def userInput = input(</span><br><span class=\"line\">            id: &apos;userInput&apos;, message: &apos;是否中止 此次流程:&apos;, parameters: [</span><br><span class=\"line\">            [$class: &apos;TextParameterDefinition&apos;, defaultValue: &apos;true&apos;, description: &apos;是否中止此次流程&apos;, name: &apos;flag&apos;],</span><br><span class=\"line\">    ])</span><br><span class=\"line\">    print userInput</span><br><span class=\"line\">    if (&apos;true&apos;.equalsIgnoreCase(userInput)) &#123;</span><br><span class=\"line\">        return true</span><br><span class=\"line\">    &#125; else if (&apos;false&apos;.equalsIgnoreCase(userInput)) &#123;</span><br><span class=\"line\">        return false</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">/** 运行容器</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @param port</span><br><span class=\"line\"> * @param containerName</span><br><span class=\"line\"> * @param registryImageName</span><br><span class=\"line\"> * @param host</span><br><span class=\"line\"> * @param sshKey</span><br><span class=\"line\"> * @author ming</span><br><span class=\"line\"> * @date 2017-12-26 23:36</span><br><span class=\"line\"> * */</span><br><span class=\"line\">def runSSHDocker(String port, String containerName, String registryImageName, String env, String imagePort,String host, String sshPort, String sshKey) &#123;</span><br><span class=\"line\">    // jenkins 配置的sshkey id</span><br><span class=\"line\">    sshagent([sshKey]) &#123;</span><br><span class=\"line\">        //登陆服务器之后启动容器的命令</span><br><span class=\"line\">        String runCmd = &quot;docker run -d -p $&#123;port&#125;:$&#123;imagePort&#125; $&#123;env&#125; --name $&#123;containerName&#125; $&#123;registryImageName&#125;&quot;</span><br><span class=\"line\">        // 登陆 服务器 运行容器</span><br><span class=\"line\">        sh &quot;ssh -o StrictHostKeyChecking=no -t -t -p $&#123;sshPort&#125; root@$&#123;host&#125; &apos;$&#123;runCmd&#125;&apos;&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">/** 删除容器</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @param containerName</span><br><span class=\"line\"> * @param host</span><br><span class=\"line\"> * @param sshKey</span><br><span class=\"line\"> * @author ming</span><br><span class=\"line\"> * @date 2017-12-26 23:36</span><br><span class=\"line\"> * */</span><br><span class=\"line\">def removeSSHContainer(String containerName, String host, String sshPort, String sshKey) &#123;</span><br><span class=\"line\">    sshagent([sshKey]) &#123;</span><br><span class=\"line\">        //登陆服务器之后启动容器的命令</span><br><span class=\"line\">        String runCmd = &quot;docker rm -f $&#123;containerName&#125;&quot;</span><br><span class=\"line\">        // 登陆 服务器 运行容器</span><br><span class=\"line\">        sh &quot;ssh -o StrictHostKeyChecking=no -t -t -p $&#123;sshPort&#125; root@$&#123;host&#125; &apos;$&#123;runCmd&#125;&apos;&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">/** 删除镜像</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @param registryImageName</span><br><span class=\"line\"> * @param host</span><br><span class=\"line\"> * @param sshKey</span><br><span class=\"line\"> * @author ming</span><br><span class=\"line\"> * @date 2017-12-26 23:36</span><br><span class=\"line\"> * */</span><br><span class=\"line\">def removeSSHImage(String registryImageName, String host, String sshPort, String sshKey) &#123;</span><br><span class=\"line\">    sshagent([sshKey]) &#123;</span><br><span class=\"line\">        //登陆服务器之后启动容器的命令</span><br><span class=\"line\">        String runCmd = &quot;docker rmi $&#123;registryImageName&#125;&quot;</span><br><span class=\"line\">        // 登陆 服务器 运行容器</span><br><span class=\"line\">        sh &quot;ssh -o StrictHostKeyChecking=no -t -t -p $&#123;sshPort&#125; root@$&#123;host&#125; &apos;$&#123;runCmd&#125;&apos;&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">/**修改远程服务中的 imagename</span><br><span class=\"line\"> * 这里的imagename 必须是 仓库地址/镜像名:tag</span><br><span class=\"line\"> * @param newImageName</span><br><span class=\"line\"> * @param oldImageName</span><br><span class=\"line\"> * @author ming</span><br><span class=\"line\"> * @date 2017-12-27 10:04</span><br><span class=\"line\"> * */</span><br><span class=\"line\">def updateSSHImamgeName(String newImageName, String oldImageName, String host, String sshPort, String sshKey) &#123;</span><br><span class=\"line\">    sshagent([sshKey]) &#123;</span><br><span class=\"line\">        String runCmd = &quot;docker tag $&#123;oldImageName&#125; $&#123;newImageName&#125;&quot;</span><br><span class=\"line\">        sh &quot;ssh -o StrictHostKeyChecking=no -t -t -p $&#123;sshPort&#125;  root@$&#123;host&#125; &apos;$&#123;runCmd&#125;&apos;&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">/** 推送远程服务器上的镜像</span><br><span class=\"line\"> * 这里镜像名称 必须是 仓库地址/镜像名:tag 格式</span><br><span class=\"line\"> * @param imageName</span><br><span class=\"line\"> * @author ming</span><br><span class=\"line\"> * @date 2017-12-27 10:08</span><br><span class=\"line\"> * */</span><br><span class=\"line\">def pushSSHImage(String imageName, String host, String sshPort, String sshKey) &#123;</span><br><span class=\"line\">    sshagent([sshKey]) &#123;</span><br><span class=\"line\">        String runCmd = &quot;docker push $&#123;imageName&#125;&quot;</span><br><span class=\"line\">        sh &quot;ssh -o StrictHostKeyChecking=no -t -t -p $&#123;sshPort&#125; root@$&#123;host&#125; &apos;$&#123;runCmd&#125;&apos;&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">/** 部署</span><br><span class=\"line\"> * @param host</span><br><span class=\"line\"> * @param port</span><br><span class=\"line\"> * @param containerName</span><br><span class=\"line\"> * @param imageName</span><br><span class=\"line\"> * @author ming</span><br><span class=\"line\"> * @date 2017-12-27 09:43</span><br><span class=\"line\"> * */</span><br><span class=\"line\">def deploy(String host, String port, String containerName, String imageName, String env ,String imagePort, String sshPort = &quot;22&quot;, String sshKey = &apos;efa90668-61e3-47f0-9730-b0e53ea7f97e&apos;) &#123;</span><br><span class=\"line\">    boolean flag = true</span><br><span class=\"line\">    while (flag) &#123;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            //运行docker</span><br><span class=\"line\">            runSSHDocker(port, containerName, imageName, env,imagePort, host, sshPort, sshKey)</span><br><span class=\"line\">            flag = false</span><br><span class=\"line\">        &#125; catch (e) &#123;</span><br><span class=\"line\">            print e.getMessage()</span><br><span class=\"line\">            //删除运行中 的容器</span><br><span class=\"line\">            removeSSHContainer(containerName, host, sshPort, sshKey)</span><br><span class=\"line\">            //删除服务器上的image</span><br><span class=\"line\">            removeSSHImage(imageName, host, sshPort, sshKey)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">/**发布镜像到下一个阶段</span><br><span class=\"line\"> * @param newImageName</span><br><span class=\"line\"> * @param oldImageName</span><br><span class=\"line\"> * @param host</span><br><span class=\"line\"> * @param sshKey</span><br><span class=\"line\"> * @author ming</span><br><span class=\"line\"> * @date 2017-12-27 10:15</span><br><span class=\"line\"> * */</span><br><span class=\"line\">def release(String newImageName, String oldImageName, String host, String sshPort = &quot;22&quot;, String sshKey = &apos;efa90668-61e3-47f0-9730-b0e53ea7f97e&apos;) &#123;</span><br><span class=\"line\">    updateSSHImamgeName(newImageName, oldImageName, host, sshPort, sshKey)</span><br><span class=\"line\">    pushSSHImage(newImageName, host, sshPort, sshKey)</span><br><span class=\"line\">    removeSSHImage(oldImageName, host, sshPort, sshKey)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">/** ui自动化测试</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @author ming</span><br><span class=\"line\"> * @date 2017-12-27 22:12</span><br><span class=\"line\"> * */</span><br><span class=\"line\">def uiAutoTest() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">/**代码审查 并且发送报告</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @author ming</span><br><span class=\"line\"> * @date 2017-12-27 22:12</span><br><span class=\"line\"> * */</span><br><span class=\"line\">def codeReview() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p>\n<p>将其中的用{} 包含的中文 替换成相应的参数即可<br>sshKey 是jenkins配置sshAgent插件的id </p>\n<p>3:安装启动 jenkins<br>docker 方式启动 参考: </p>\n<p>4: 安装插件<br>主要是要安装 sshAgent 、 docker相关插件、<br>5:jenkins 引入项目定义的Jenkinsfile 形成流水线任务</p>\n<p>新增jenkins 流水线任务<br>配置流水线相关配置 定义选择 Pipeline script from SCM 》 scm选择git 配置git地址等相关属性 》script path 选择 Jenkinsfile 即可<br>保存项目 》 启动项目</p>"},{"title":"常用json解析框架对比","comments":1,"abbrlink":"fd97bf37","date":"2018-07-17T06:52:41.000Z","_content":"#### 前言\n最近使用基于http作为rpc调用协议的时候 由于选择使用json来传递数据 \n不得不做一波常用的json解析框架的性能、稳定性、可定制性、使用难度、对复杂对象的支持程度等等方面来对比一下\n只针对常用的几种 json解析框架对比 有些小众在某些方面很优秀的不再对比之列 \n#### 对比 \n|名称|使用方式|可配置性|优点|缺点|备注|\n|:---|:-----|:-----|:---|\n|fast json|JSON.toJSONString、JSON.parseObject|调用toJSONString、parseObject方法的重载方法去配置|使用简单、简单的转换可以直接使用静态方法使用|对于复杂对象处理非常弱、对于泛型处理非常弱|处理简单的对象与json字符串转换的时候 比较适用|\n|jackson|获取objectMapper对象 通过writeValueAsString()、 readValue()方式互相转换|提供DeserializationConfig、SerializationConfig各种配置|功能完善、对各种复杂的情况都能使用、对于泛型支持较为完善|功能太多导致使用复杂、配置复杂、需要new|spring等常用框架中使用的就是jackson 即保证速度也保证适应于各种复杂情况|处理复杂的对象 又不想引入gson 那么直接使用jackson 这个速度和fastjson差不多但是能处理很多复杂的功能|\n|gson|获取Gson对象 通过toJson()、fromJson()方法互相转换|提供GsonBuilder 去配置不同处理方式的的gson实例 |功能完善、对泛型支持较为完善 | 速度和jackson和fastjson相比 略慢、使用的时候 要专门引用gson 依赖、需要一个实例对象|用于处理复杂的对象和json字符串相互转换 不过速度比不上jackson  不过也够用了| \n|genson|获取genson对象 通过serialize()、deserialize()来互相转换|提供GensonBuilder 去配置不同的处理方式的 gensonBuilder|对泛型支持较为完善|需要实例对象、速度略慢 |这个用的少 如果要对简单对象转换直接fastjson、复杂的又jackson、gson 这个看不到什么特殊的厉害的地方|\n#### 测试用例\n##### 基础类\n* 简单对象  \n一个只有简单属性的 类\n```\npackage com.ming.json;\n\nimport java.math.BigDecimal;\n\n/**\n * 普通对象\n *\n * @author ming\n * @date 2018-07-17 16:11:05\n */\npublic class MyData {\n    private Integer id;\n    private String name;\n    private BigDecimal age;\n\n\n    @Override\n    public String toString() {\n        return \"MyData{\" +\n                \"id=\" + id +\n                \", name='\" + name + '\\'' +\n                \", age=\" + age +\n                '}';\n    }\n\n    public Integer getId() {\n        return id;\n    }\n\n    public void setId(Integer id) {\n        this.id = id;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public BigDecimal getAge() {\n        return age;\n    }\n\n    public void setAge(BigDecimal age) {\n        this.age = age;\n    }\n}\n\n```\n* 复杂对象\n一个稍微复杂点的类 包含属性是对象的这种类 \n```\npackage com.ming.json;\n\n\n/**\n * 内嵌对象的对象\n *\n * @author ming\n * @date 2018-07-17 16:11:15\n */\npublic class CyclicData {\n    private Integer id;\n    private CyclicData cyclicData;\n\n\n    @Override\n    public String toString() {\n        return \"CyclicData{\" +\n                \"id=\" + id +\n                \", cyclicData=\" + cyclicData +\n                '}';\n    }\n\n    public Integer getId() {\n        return id;\n    }\n\n    public void setId(Integer id) {\n        this.id = id;\n    }\n\n    public CyclicData getCyclicData() {\n        return cyclicData;\n    }\n\n    public void setCyclicData(CyclicData cyclicData) {\n        this.cyclicData = cyclicData;\n    }\n}\n\n```\n* DataUtils   \n构建统一的测试数据的工具类 \n```\npackage com.ming.json;\n\nimport java.math.BigDecimal;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * 数据工具类 用来获取数据 提供给各种json框架解析\n *\n * @author ming\n * @date 2018-07-17 15:30:30\n */\npublic class DataUtils {\n\n    /**\n     * 获取String list\n     *\n     * @param size\n     * @author ming\n     * @date 2018-07-17 16:08:50\n     */\n    public static List<String> getStringList(int size) {\n        List<String> resultList = new ArrayList<>();\n        for (int i = 0; i < size; i++) {\n            resultList.add(\"test\" + i);\n        }\n        return resultList;\n    }\n\n\n    /**\n     * 获取String  String map\n     *\n     * @param size\n     * @author ming\n     * @date 2018-07-17 16:09:04\n     */\n    public static Map<String, String> getStringMap(int size) {\n        Map<String, String> resultMap = new HashMap<>();\n        for (int i = 0; i < size; i++) {\n            resultMap.put(\"k\" + i, \"v\" + i);\n        }\n        return resultMap;\n    }\n\n    /**\n     * 获取 自定义对象\n     *\n     * @author ming\n     * @date 2018-07-17 16:09:20\n     */\n    public static MyData getMyData() {\n        MyData myData = new MyData();\n        myData.setId(1);\n        myData.setName(\"ming\");\n        myData.setAge(BigDecimal.TEN);\n        return myData;\n    }\n\n    /**\n     * 获取自定义对象 list\n     *\n     * @param size\n     * @author ming\n     * @date 2018-07-17 16:09:30\n     */\n    public static List<MyData> getMyDataList(int size) {\n        List<MyData> resultList = new ArrayList<>();\n        for (int i = 0; i < size; i++) {\n            MyData tmp = new MyData();\n            tmp.setId(i);\n            tmp.setName(\"ming\" + i);\n            tmp.setAge(BigDecimal.valueOf(i));\n            resultList.add(tmp);\n        }\n        return resultList;\n    }\n\n    /**\n     * 获取String  自定义对象 map\n     *\n     * @param size\n     * @author ming\n     * @date 2018-07-17 16:09:47\n     */\n    public static Map<String, MyData> getMyDataMap(int size) {\n        Map<String, MyData> resultMap = new HashMap<>();\n        for (int i = 0; i < size; i++) {\n            MyData tmp = new MyData();\n            tmp.setId(i);\n            tmp.setName(\"ming\" + i);\n            tmp.setAge(BigDecimal.valueOf(i));\n            resultMap.put(\"k\" + i, tmp);\n        }\n        return resultMap;\n    }\n\n    /**\n     * 获取内嵌对象的对象\n     *\n     * @author ming\n     * @date 2018-07-17 16:10:03\n     */\n\n    public static CyclicData getCyclicData() {\n        CyclicData result = new CyclicData();\n        result.setId(1);\n\n        CyclicData tmp = new CyclicData();\n        tmp.setId(2);\n        result.setCyclicData(tmp);\n\n        return result;\n    }\n\n    /**\n     * 获取内嵌对象的对象 的list\n     *\n     * @param size\n     * @author ming\n     * @date 2018-07-17 16:10:17\n     */\n    public static List<CyclicData> getCyclicDataList(int size) {\n        List<CyclicData> resultList = new ArrayList<>();\n        for (int i = 0; i < size; i++) {\n            CyclicData tmp = new CyclicData();\n            tmp.setId(i);\n\n            CyclicData t = new CyclicData();\n            tmp.setId(i * 1000);\n            tmp.setCyclicData(t);\n            resultList.add(tmp);\n        }\n        return resultList;\n    }\n\n    /**\n     * 获取内嵌对象的对象的map\n     *\n     * @param size\n     * @author ming\n     * @date 2018-07-17 16:10:32\n     */\n    public static Map<String, CyclicData> getCyclicDataMap(int size) {\n        Map<String, CyclicData> resultMap = new HashMap<>();\n        for (int i = 0; i < size; i++) {\n            CyclicData tmp = new CyclicData();\n            tmp.setId(i);\n\n            CyclicData t = new CyclicData();\n            tmp.setId(i * 1000);\n            tmp.setCyclicData(t);\n            resultMap.put(\"k\" + i, tmp);\n        }\n        return resultMap;\n    }\n\n\n    /**\n     * 获取 kv 都是对象的map\n     *\n     * @param size\n     * @author ming\n     * @date 2018-07-17 16:10:49\n     */\n    public static Map<MyData, CyclicData> getMyDataAndCyclicDataMap(int size) {\n        Map<MyData, CyclicData> resultMap = new HashMap<>();\n        for (int i = 0; i < size; i++) {\n            CyclicData tmp = new CyclicData();\n            tmp.setId(i);\n\n            CyclicData t = new CyclicData();\n            tmp.setId(i * 1000);\n            tmp.setCyclicData(t);\n\n\n            MyData k = new MyData();\n            k.setId(i);\n            k.setName(\"ming\" + i);\n            k.setAge(BigDecimal.valueOf(i));\n\n            resultMap.put(k, tmp);\n        }\n        return resultMap;\n    }\n\n\n}\n```\n* 测试用例的统一接口\n定义 各种解析框架 的测试用例的格式 \n```\npackage com.ming.json;\n\nimport com.fasterxml.jackson.core.JsonProcessingException;\n\nimport java.io.IOException;\n\npublic interface TestJson {\n\n    //测试 对象转换 json 字符串 -------------------------------------------------------------------------------------------\n    void testStringListObjToString() throws JsonProcessingException;\n\n    void testStringMapObjToString() throws JsonProcessingException;\n\n    void testMyDataToString() throws JsonProcessingException;\n\n    void testMyDataListToString() throws JsonProcessingException;\n\n    void testMyDataMapToString() throws JsonProcessingException;\n\n    void testCyclicDataToString() throws JsonProcessingException;\n\n    void testCyclicDataListToString() throws JsonProcessingException;\n\n    void testCyclicDataMapToString() throws JsonProcessingException;\n\n    void testMyDataAndCyclicDataMapToString() throws JsonProcessingException;\n\n\n    //json 字符串转换 对象测试方法------------------------------------------------------------------------------------------\n    void zTestStringListObjStringToObj() throws IOException;\n\n    void zTestStringMapObjStringToObj() throws IOException;\n\n    void zTestMyDataStringToObj() throws IOException;\n\n    void zTestMyDataListStringToObj() throws IOException;\n\n    void zTestMyDataMapStringToObj() throws IOException;\n\n    void zTestCyclicDataStringToObj() throws IOException;\n\n    void zTestCyclicDataListStringToObj() throws IOException;\n\n    void zTestCyclicDataMapStringToObj() throws IOException;\n\n    void zTestMyDataAndCyclicDataMapStringToObj() throws IOException;\n}\n```\n* 测试用例的统一的抽象类 实现 统一的接口 \n对所有的测试用例实现做一个统一的配置抽象类 \n提供所有实现测试用例类的公共配置 、前置后置方法 \n```\npackage com.ming.json;\n\nimport junit.framework.TestCase;\nimport org.junit.After;\nimport org.junit.Before;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\npublic abstract class TestJsonAbstract extends TestCase implements TestJson {\n    //公共变量区\n    protected static String stringList = null;\n    protected static String stringMap = null;\n    protected static String myData = null;\n    protected static String myDataList = null;\n    protected static String myDataMap = null;\n    protected static String cyclicData = null;\n    protected static String cyclicDataList = null;\n    protected static String cyclicDataMap = null;\n    protected static String myDataAndCyclicDataMap = null;\n    //获取集合的大小\n    protected int size = 10000;\n    protected Long now = null;\n    private Logger logger = LoggerFactory.getLogger(TestJsonAbstract.class);\n\n    @Before\n    public void init() {\n        System.out.println(\"开始计算耗时。。。。。。\");\n        now = System.currentTimeMillis();\n    }\n\n    @After\n    public void close() {\n        System.out.println(\"结束耗时,共耗时:\" + (System.currentTimeMillis() - now));\n        logger.info(\"结束耗时,共耗时:\" + (System.currentTimeMillis() - now));\n        now = null;\n    }\n}\n\n```\n##### 测试用例\n\n* fast json测试类\n继承抽象类实现 统一的测试方法 \n```\npackage com.ming.json;\n\nimport com.alibaba.fastjson.JSON;\nimport org.junit.FixMethodOrder;\nimport org.junit.Test;\nimport org.junit.runners.MethodSorters;\n\nimport java.util.Map;\n\n/**\n * 测试fastJson 解析\n * 通过指定 test case 执行顺序 来保证 先调用obj转换String  然后在调用 string 转换obj\n *\n * @author ming\n * @date 2018-07-17 15:23:36\n */\n@FixMethodOrder(value = MethodSorters.NAME_ASCENDING)\npublic class TestFastJson extends TestJsonAbstract {\n\n\n    @Test\n    @Override\n    public void testStringListObjToString() {\n        stringList = JSON.toJSONString(DataUtils.getStringList(size));\n        System.out.println(stringList);\n    }\n\n\n    @Test\n    @Override\n    public void testStringMapObjToString() {\n        stringMap = JSON.toJSONString(DataUtils.getStringMap(size));\n        System.out.println(stringMap);\n    }\n\n    @Test\n    @Override\n    public void testMyDataToString() {\n        myData = JSON.toJSONString(DataUtils.getMyData());\n        System.out.println(myData);\n    }\n\n    @Test\n    @Override\n    public void testMyDataListToString() {\n        myDataList = JSON.toJSONString(DataUtils.getMyDataList(size));\n        System.out.println(myDataList);\n    }\n\n    @Test\n    @Override\n    public void testMyDataMapToString() {\n        myDataMap = JSON.toJSONString(DataUtils.getMyDataMap(size));\n        System.out.println(myDataMap);\n    }\n\n    @Test\n    @Override\n    public void testCyclicDataToString() {\n        cyclicData = JSON.toJSONString(DataUtils.getCyclicData());\n        System.out.println(cyclicData);\n    }\n\n    @Test\n    @Override\n    public void testCyclicDataListToString() {\n        cyclicDataList = JSON.toJSONString(DataUtils.getCyclicDataList(size));\n        System.out.println(cyclicDataList);\n    }\n\n    @Test\n    @Override\n    public void testCyclicDataMapToString() {\n        cyclicDataMap = JSON.toJSONString(DataUtils.getCyclicDataMap(size));\n        System.out.println(cyclicDataMap);\n    }\n\n    @Test\n    @Override\n    public void testMyDataAndCyclicDataMapToString() {\n        myDataAndCyclicDataMap = JSON.toJSONString(DataUtils.getMyDataAndCyclicDataMap(size));\n        System.out.println(myDataAndCyclicDataMap);\n    }\n\n\n    @Test\n    @Override\n    public void zTestStringListObjStringToObj() {\n        System.out.println(JSON.parseArray(stringList));\n    }\n\n\n    @Test\n    @Override\n    public void zTestStringMapObjStringToObj() {\n        System.out.println(JSON.parseObject(stringMap, Map.class));\n    }\n\n    @Test\n    @Override\n    public void zTestMyDataStringToObj() {\n        System.out.println(JSON.parseObject(myData, MyData.class));\n    }\n\n    @Test\n    @Override\n    public void zTestMyDataListStringToObj() {\n        System.out.println(JSON.parseArray(myDataList, MyData.class));\n    }\n\n    @Test\n    @Override\n    public void zTestMyDataMapStringToObj() {\n        System.out.println(JSON.parseObject(myDataMap, Map.class));\n    }\n\n    @Test\n    @Override\n    public void zTestCyclicDataStringToObj() {\n        System.out.println(JSON.parseObject(cyclicData, CyclicData.class));\n    }\n\n    @Test\n    @Override\n    public void zTestCyclicDataListStringToObj() {\n        System.out.println(JSON.parseArray(cyclicDataList, CyclicData.class));\n    }\n\n    @Test\n    @Override\n    public void zTestCyclicDataMapStringToObj() {\n        System.out.println(JSON.parseObject(cyclicDataMap, Map.class));\n    }\n\n    @Test\n    @Override\n    public void zTestMyDataAndCyclicDataMapStringToObj() {\n        System.out.println(JSON.parseObject(myDataAndCyclicDataMap, Map.class));\n    }\n\n\n}\n\n```\n* jackson测试类\n使用jackson 实现的统一的测试用例 继承抽象类\n```\npackage com.ming.json;\n\nimport com.fasterxml.jackson.core.JsonProcessingException;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport org.junit.FixMethodOrder;\nimport org.junit.Test;\nimport org.junit.runners.MethodSorters;\n\nimport java.io.IOException;\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * 测试解析 jackson\n *\n * @author ming\n * @date 2018-07-17 15:24:12\n */\n@FixMethodOrder(value = MethodSorters.NAME_ASCENDING)\npublic class TestJackson extends TestJsonAbstract {\n    //获取 jackson 处理json的 mapper   可以通过setConfig 配置这个objectMapper\n    private ObjectMapper objectMapper = new ObjectMapper();\n\n    public void init1() {\n        //DeserializationConfig,SerializationConfig\n        //配置 objectMapper 编解码 配置\n        //objectMapper.setConfig()\n\n        //设置序列化和反序列化时候的配置\n        //objectMapper.configure();\n\n    }\n\n    @Test\n    @Override\n    public void testStringListObjToString() throws JsonProcessingException {\n        stringList = objectMapper.writeValueAsString(DataUtils.getStringList(size));\n        System.out.println(stringList);\n    }\n\n\n    @Test\n    @Override\n    public void testStringMapObjToString() throws JsonProcessingException {\n        stringMap = objectMapper.writeValueAsString(DataUtils.getStringMap(size));\n        System.out.println(stringMap);\n    }\n\n    @Test\n    @Override\n    public void testMyDataToString() throws JsonProcessingException {\n        myData = objectMapper.writeValueAsString(DataUtils.getMyData());\n        System.out.println(myData);\n    }\n\n    @Test\n    @Override\n    public void testMyDataListToString() throws JsonProcessingException {\n        myDataList = objectMapper.writeValueAsString(DataUtils.getMyDataList(size));\n        System.out.println(myDataList);\n    }\n\n    @Test\n    @Override\n    public void testMyDataMapToString() throws JsonProcessingException {\n        myDataMap = objectMapper.writeValueAsString(DataUtils.getMyDataMap(size));\n        System.out.println(myDataMap);\n    }\n\n    @Test\n    @Override\n    public void testCyclicDataToString() throws JsonProcessingException {\n        cyclicData = objectMapper.writeValueAsString(DataUtils.getCyclicData());\n        System.out.println(cyclicData);\n    }\n\n    @Test\n    @Override\n    public void testCyclicDataListToString() throws JsonProcessingException {\n        cyclicDataList = objectMapper.writeValueAsString(DataUtils.getCyclicDataList(size));\n        System.out.println(cyclicDataList);\n    }\n\n    @Test\n    @Override\n    public void testCyclicDataMapToString() throws JsonProcessingException {\n        cyclicDataMap = objectMapper.writeValueAsString(DataUtils.getCyclicDataMap(size));\n        System.out.println(cyclicDataMap);\n    }\n\n    @Test\n    @Override\n    public void testMyDataAndCyclicDataMapToString() throws JsonProcessingException {\n        myDataAndCyclicDataMap = objectMapper.writeValueAsString(DataUtils.getMyDataAndCyclicDataMap(size));\n        System.out.println(myDataAndCyclicDataMap);\n    }\n\n\n    @Test\n    @Override\n    public void zTestStringListObjStringToObj() throws IOException {\n        System.out.println(objectMapper.readValue(stringList, List.class));\n    }\n\n\n    @Test\n    @Override\n    public void zTestStringMapObjStringToObj() throws IOException {\n        System.out.println(objectMapper.readValue(stringMap, Map.class));\n    }\n\n    @Test\n    @Override\n    public void zTestMyDataStringToObj() throws IOException {\n        System.out.println(objectMapper.readValue(myData, MyData.class));\n    }\n\n    @Test\n    @Override\n    public void zTestMyDataListStringToObj() throws IOException {\n        System.out.println(objectMapper.readValue(myDataList, List.class));\n    }\n\n    @Test\n    @Override\n    public void zTestMyDataMapStringToObj() throws IOException {\n        System.out.println(objectMapper.readValue(myDataMap, Map.class));\n    }\n\n    @Test\n    @Override\n    public void zTestCyclicDataStringToObj() throws IOException {\n        System.out.println(objectMapper.readValue(cyclicData, CyclicData.class));\n    }\n\n    @Test\n    @Override\n    public void zTestCyclicDataListStringToObj() throws IOException {\n        System.out.println(objectMapper.readValue(cyclicDataList, List.class));\n    }\n\n    @Test\n    @Override\n    public void zTestCyclicDataMapStringToObj() throws IOException {\n        System.out.println(objectMapper.readValue(cyclicDataMap, Map.class));\n    }\n\n    @Test\n    @Override\n    public void zTestMyDataAndCyclicDataMapStringToObj() throws IOException {\n        System.out.println(objectMapper.readValue(myDataAndCyclicDataMap, Map.class));\n    }\n\n}\n\n```\n* gson测试类\ngson实现统一的测试类 继承抽象类 \n```\npackage com.ming.json;\n\nimport com.google.gson.Gson;\nimport com.google.gson.GsonBuilder;\nimport org.junit.FixMethodOrder;\nimport org.junit.Test;\nimport org.junit.runners.MethodSorters;\n\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * 测试gson 解析\n *\n * @author ming\n * @date 2018-07-17 15:23:58\n */\n@FixMethodOrder(MethodSorters.NAME_ASCENDING)\npublic class TestGson extends TestJsonAbstract {\n\n    private Gson gson = new GsonBuilder().create();\n\n\n    @Test\n    @Override\n    public void testStringListObjToString() {\n        stringList = gson.toJson(DataUtils.getStringList(size));\n        System.out.println(stringList);\n    }\n\n\n    @Test\n    @Override\n    public void testStringMapObjToString() {\n        stringMap = gson.toJson(DataUtils.getStringMap(size));\n        System.out.println(stringMap);\n    }\n\n    @Test\n    @Override\n    public void testMyDataToString() {\n        myData = gson.toJson(DataUtils.getMyData());\n        System.out.println(myData);\n    }\n\n    @Test\n    @Override\n    public void testMyDataListToString() {\n        myDataList = gson.toJson(DataUtils.getMyDataList(size));\n        System.out.println(myDataList);\n    }\n\n    @Test\n    @Override\n    public void testMyDataMapToString() {\n        myDataMap = gson.toJson(DataUtils.getMyDataMap(size));\n        System.out.println(myDataMap);\n    }\n\n    @Test\n    @Override\n    public void testCyclicDataToString() {\n        cyclicData = gson.toJson(DataUtils.getCyclicData());\n        System.out.println(cyclicData);\n    }\n\n    @Test\n    @Override\n    public void testCyclicDataListToString() {\n        cyclicDataList = gson.toJson(DataUtils.getCyclicDataList(size));\n        System.out.println(cyclicDataList);\n    }\n\n    @Test\n    @Override\n    public void testCyclicDataMapToString() {\n        cyclicDataMap = gson.toJson(DataUtils.getCyclicDataMap(size));\n        System.out.println(cyclicDataMap);\n    }\n\n    @Test\n    @Override\n    public void testMyDataAndCyclicDataMapToString() {\n        myDataAndCyclicDataMap = gson.toJson(DataUtils.getMyDataAndCyclicDataMap(size));\n        System.out.println(myDataAndCyclicDataMap);\n    }\n\n\n    @Test\n    @Override\n    public void zTestStringListObjStringToObj() {\n        System.out.println(gson.fromJson(stringList, List.class));\n    }\n\n\n    @Test\n    @Override\n    public void zTestStringMapObjStringToObj() {\n        System.out.println(gson.fromJson(stringMap, Map.class));\n    }\n\n    @Test\n    @Override\n    public void zTestMyDataStringToObj() {\n        System.out.println(gson.fromJson(myData, MyData.class));\n    }\n\n    @Test\n    @Override\n    public void zTestMyDataListStringToObj() {\n        System.out.println(gson.fromJson(myDataList, List.class));\n    }\n\n    @Test\n    @Override\n    public void zTestMyDataMapStringToObj() {\n        System.out.println(gson.fromJson(myDataMap, Map.class));\n    }\n\n    @Test\n    @Override\n    public void zTestCyclicDataStringToObj() {\n        System.out.println(gson.fromJson(cyclicData, CyclicData.class));\n    }\n\n    @Test\n    @Override\n    public void zTestCyclicDataListStringToObj() {\n        System.out.println(gson.fromJson(cyclicDataList, List.class));\n    }\n\n    @Test\n    @Override\n    public void zTestCyclicDataMapStringToObj() {\n        System.out.println(gson.fromJson(cyclicDataMap, Map.class));\n    }\n\n    @Test\n    @Override\n    public void zTestMyDataAndCyclicDataMapStringToObj() {\n        System.out.println(gson.fromJson(myDataAndCyclicDataMap, Map.class));\n    }\n\n\n}\n\n```\n* genson测试类\ngenson实现的测试类 继承 抽象类 \n```\npackage com.ming.json;\n\nimport com.owlike.genson.Genson;\nimport org.junit.FixMethodOrder;\nimport org.junit.Test;\nimport org.junit.runners.MethodSorters;\n\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * 测试使用genson\n *\n * @author ming\n * @date 2018-07-17 15:24:33\n */\n@FixMethodOrder(MethodSorters.NAME_ASCENDING)\npublic class TestGenson extends TestJsonAbstract {\n    private Genson genson = new Genson();\n\n\n    @Test\n    @Override\n    public void testStringListObjToString() {\n        stringList = genson.serialize(DataUtils.getStringList(size));\n        System.out.println(stringList);\n    }\n\n\n    @Test\n    @Override\n    public void testStringMapObjToString() {\n        stringMap = genson.serialize(DataUtils.getStringMap(size));\n        System.out.println(stringMap);\n    }\n\n    @Test\n    @Override\n    public void testMyDataToString() {\n        myData = genson.serialize(DataUtils.getMyData());\n        System.out.println(myData);\n    }\n\n    @Test\n    @Override\n    public void testMyDataListToString() {\n        myDataList = genson.serialize(DataUtils.getMyDataList(size));\n        System.out.println(myDataList);\n    }\n\n    @Test\n    @Override\n    public void testMyDataMapToString() {\n        myDataMap = genson.serialize(DataUtils.getMyDataMap(size));\n        System.out.println(myDataMap);\n    }\n\n    @Test\n    @Override\n    public void testCyclicDataToString() {\n        cyclicData = genson.serialize(DataUtils.getCyclicData());\n        System.out.println(cyclicData);\n    }\n\n    @Test\n    @Override\n    public void testCyclicDataListToString() {\n        cyclicDataList = genson.serialize(DataUtils.getCyclicDataList(size));\n        System.out.println(cyclicDataList);\n    }\n\n    @Test\n    @Override\n    public void testCyclicDataMapToString() {\n        cyclicDataMap = genson.serialize(DataUtils.getCyclicDataMap(size));\n        System.out.println(cyclicDataMap);\n    }\n\n    @Test\n    @Override\n    public void testMyDataAndCyclicDataMapToString() {\n        myDataAndCyclicDataMap = genson.serialize(DataUtils.getMyDataAndCyclicDataMap(size));\n        System.out.println(myDataAndCyclicDataMap);\n    }\n\n\n    @Test\n    @Override\n    public void zTestStringListObjStringToObj() {\n        System.out.println(genson.deserialize(stringList, List.class));\n    }\n\n\n    @Test\n    @Override\n    public void zTestStringMapObjStringToObj() {\n        System.out.println(genson.deserialize(stringMap, Map.class));\n    }\n\n    @Test\n    @Override\n    public void zTestMyDataStringToObj() {\n        System.out.println(genson.deserialize(myData, MyData.class));\n    }\n\n    @Test\n    @Override\n    public void zTestMyDataListStringToObj() {\n        System.out.println(genson.deserialize(myDataList, List.class));\n    }\n\n    @Test\n    @Override\n    public void zTestMyDataMapStringToObj() {\n        System.out.println(genson.deserialize(myDataMap, Map.class));\n    }\n\n    @Test\n    @Override\n    public void zTestCyclicDataStringToObj() {\n        System.out.println(genson.deserialize(cyclicData, CyclicData.class));\n    }\n\n    @Test\n    @Override\n    public void zTestCyclicDataListStringToObj() {\n        System.out.println(genson.deserialize(cyclicDataList, List.class));\n    }\n\n    @Test\n    @Override\n    public void zTestCyclicDataMapStringToObj() {\n        System.out.println(genson.deserialize(cyclicDataMap, Map.class));\n    }\n\n    @Test\n    @Override\n    public void zTestMyDataAndCyclicDataMapStringToObj() {\n        System.out.println(genson.deserialize(myDataAndCyclicDataMap, Map.class));\n    }\n\n}\n\n```\n* 所有的测试类实现 统一进行批量测试 \n```\npackage com.ming.json;\n\n\nimport junit.framework.TestCase;\nimport junit.framework.TestSuite;\nimport junit.textui.TestRunner;\n\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.stream.Collectors;\n\n/**\n * 聚合多个测试用例 在一起测试\n *\n * @author ming\n * @date 2018-07-17 17:31:55\n */\n//@RunWith(Suite.class)\n//@Suite.SuiteClasses({TestJackson.class, TestGson.class,  TestGenson.class,TestFastJson.class})\npublic class AllTest {\n\n    public static void main(String[] args) {\n        //执行测试用例次数 通过增大执行次数 取平均数 减小误差\n        int size = 10000;\n        List<Map<String, Object>> result = new ArrayList<>();\n        long now = System.currentTimeMillis();\n        result.add(get(TestJackson.class, size));\n        result.add(get(TestGson.class, size));\n        result.add(get(TestGenson.class, size));\n        result.add(get(TestFastJson.class, size));\n        System.out.println(\"总耗时:\" + (System.currentTimeMillis() - now) + \"ms\");\n        System.out.println(\"明细信息-------------------------------\");\n        result.forEach(f -> {\n            System.out.println(\"执行的测试用例\" + f.get(\"class\"));\n            System.out.println(\"执行平均耗时\" + f.get(\"avgTime\") + \"ms\");\n            System.out.println(\"每次执行的耗时详情\" + f.get(\"testList\"));\n            System.out.println(\"--------------------------------\");\n        });\n    }\n\n    private static Map<String, Object> get(Class<? extends TestCase> tClass, int size) {\n        TestSuite testSuite = new TestSuite();\n        testSuite.addTestSuite(tClass);\n        long now;\n        List<Long> list = new ArrayList<>();\n        for (int i = 0; i < size; i++) {\n            now = System.currentTimeMillis();\n            TestRunner.run(testSuite);\n            list.add(System.currentTimeMillis() - now);\n        }\n        Map<String, Object> map = new HashMap<>();\n        map.put(\"class\", tClass);\n        map.put(\"testList\", list);\n        map.put(\"avgTime\", list.stream().collect(Collectors.averagingLong(a -> a)));\n        return map;\n    }\n}\n\n```\n\n开启 AllTest类中的main方法即进行所有的模块的测试 \n\n其中一次测试结果记录\n```\n总耗时:3627599ms\n明细信息-------------------------------\n执行的测试用例class com.ming.json.TestJackson\n执行平均耗时84.3811ms\n每次执行的耗时详情[439, 215, 184, 183, 176, 198。。。。。]\n--------------------------------\n执行的测试用例class com.ming.json.TestGson\n执行平均耗时94.915ms\n每次执行的耗时详情[299, 126, 123, 113, 95, 109, 。。。。]\n--------------------------------\n执行的测试用例class com.ming.json.TestGenson\n执行平均耗时99.3964ms\n每次执行的耗时详情[247, 144, 115, 98, 102, 85, 。。。。。]\n--------------------------------\n执行的测试用例class com.ming.json.TestFastJson\n执行平均耗时84.0026ms\n每次执行的耗时详情[263, 143, 94, 104, 69, 72, 。。。。。]\n--------------------------------\n\n```\n\n#### jackson gson针对泛型的特殊处理 \n```\npackage com.ming.json;\n\nimport com.fasterxml.jackson.core.type.TypeReference;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.google.common.collect.Maps;\nimport com.google.common.reflect.TypeToken;\nimport com.google.gson.Gson;\n\nimport java.io.IOException;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * 测试泛型类型 json转换\n * 引用地址:https://www.jianshu.com/p/ca03c2fe36e3\n *\n * @author ming\n * @date 2018-07-19 14:03:12\n */\npublic class TestT {\n    private static ObjectMapper mapper = new ObjectMapper();\n    private static Gson gson = new Gson();\n\n    public static void main(String[] args) throws IOException {\n        Map<String, List<Long>> map = Maps.newHashMap();\n        map.put(\"one\", Arrays.asList(10001L, 10002L, 10003L, 10004L));\n        map.put(\"two\", Arrays.asList(20001L, 20002L, 20003L, 20004L));\n        map.put(\"three\", Arrays.asList(30001L, 30002L, 30003L, 30004L));\n        map.put(\"four\", Arrays.asList(40001L, 40002L, 40003L, 40004L));\n\n        String json = new Gson().toJson(map);\n        System.err.println(\"=======================错误示范=====================\");\n        //Gson\n        Map<String, List<Long>> mapResult = gson.fromJson(json, Map.class);\n        System.out.println(\"通过Gson转换...\");\n//      printType(mapResult);\n        System.out.println(mapResult);\n        //Json\n        Map<String, List<Long>> jsonMapResult = mapper.readValue(json, Map.class);\n        System.out.println(\"通过Jackson转换...\");\n//      printType(jsonMapResult);\n\n        System.out.println(jsonMapResult);\n        System.out.println(\"=======================正确做法=====================\");\n        //Gson\n        Map<String, List<Long>> mapResult1 = gson.fromJson(json, new TypeToken<Map<String, List<Long>>>() {\n        }.getType());\n        System.out.println(\"通过Gson转换...\");\n        printType(mapResult1);\n        System.out.println(mapResult1);\n        //Json\n        ObjectMapper mapper = new ObjectMapper();\n        Map<String, List<Long>> jsonMapResult1 = mapper.readValue(json, new TypeReference<Map<String, List<Long>>>() {\n        });\n        System.out.println(\"通过Jackson转换...\");\n        printType(jsonMapResult1);\n\n        System.out.println(jsonMapResult1);\n\n    }\n\n    public static void printType(Map<String, List<Long>> map) {\n        for (Map.Entry<String, List<Long>> entry : map.entrySet()) {\n            System.out.println(\"key 类型:\" + entry.getKey().getClass() + \", value类型:\"\n                    + entry.getValue().getClass() + \", List中元素类型\" + entry.getValue().get(0).getClass());\n        }\n\n    }\n\n\n}\n\n```\n\n#### 总结  \njava处理json相关的操作 工具包是很多的 但是用的多的也就上面说的几种    \n对于简单并且要求速度的对象和json转换 直接使用fast json即可 不过有时候 fast json 会坑爹   \n其他情况使用jackson 完全可以胜任   gson也行 不过 我更加喜欢jackson  毕竟 很多框架就已经引用了jackson  跟着大佬走肯定没错的  \n带有泛型的 一定要用jackson或者gson 去使用  否则可能会无法反序列化成想要的类型  特别是fast json 只能处理第一层的泛型 复杂的泛型直接gg\n\n\n\n","source":"_posts/java/常用json解析框架对比.md","raw":"---\ntitle: 常用json解析框架对比\ncomments: true\ncategories: 实战\ntags:\n  - json\n  - tools\nabbrlink: fd97bf37\ndate: 2018-07-17 14:52:41\n---\n#### 前言\n最近使用基于http作为rpc调用协议的时候 由于选择使用json来传递数据 \n不得不做一波常用的json解析框架的性能、稳定性、可定制性、使用难度、对复杂对象的支持程度等等方面来对比一下\n只针对常用的几种 json解析框架对比 有些小众在某些方面很优秀的不再对比之列 \n#### 对比 \n|名称|使用方式|可配置性|优点|缺点|备注|\n|:---|:-----|:-----|:---|\n|fast json|JSON.toJSONString、JSON.parseObject|调用toJSONString、parseObject方法的重载方法去配置|使用简单、简单的转换可以直接使用静态方法使用|对于复杂对象处理非常弱、对于泛型处理非常弱|处理简单的对象与json字符串转换的时候 比较适用|\n|jackson|获取objectMapper对象 通过writeValueAsString()、 readValue()方式互相转换|提供DeserializationConfig、SerializationConfig各种配置|功能完善、对各种复杂的情况都能使用、对于泛型支持较为完善|功能太多导致使用复杂、配置复杂、需要new|spring等常用框架中使用的就是jackson 即保证速度也保证适应于各种复杂情况|处理复杂的对象 又不想引入gson 那么直接使用jackson 这个速度和fastjson差不多但是能处理很多复杂的功能|\n|gson|获取Gson对象 通过toJson()、fromJson()方法互相转换|提供GsonBuilder 去配置不同处理方式的的gson实例 |功能完善、对泛型支持较为完善 | 速度和jackson和fastjson相比 略慢、使用的时候 要专门引用gson 依赖、需要一个实例对象|用于处理复杂的对象和json字符串相互转换 不过速度比不上jackson  不过也够用了| \n|genson|获取genson对象 通过serialize()、deserialize()来互相转换|提供GensonBuilder 去配置不同的处理方式的 gensonBuilder|对泛型支持较为完善|需要实例对象、速度略慢 |这个用的少 如果要对简单对象转换直接fastjson、复杂的又jackson、gson 这个看不到什么特殊的厉害的地方|\n#### 测试用例\n##### 基础类\n* 简单对象  \n一个只有简单属性的 类\n```\npackage com.ming.json;\n\nimport java.math.BigDecimal;\n\n/**\n * 普通对象\n *\n * @author ming\n * @date 2018-07-17 16:11:05\n */\npublic class MyData {\n    private Integer id;\n    private String name;\n    private BigDecimal age;\n\n\n    @Override\n    public String toString() {\n        return \"MyData{\" +\n                \"id=\" + id +\n                \", name='\" + name + '\\'' +\n                \", age=\" + age +\n                '}';\n    }\n\n    public Integer getId() {\n        return id;\n    }\n\n    public void setId(Integer id) {\n        this.id = id;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public BigDecimal getAge() {\n        return age;\n    }\n\n    public void setAge(BigDecimal age) {\n        this.age = age;\n    }\n}\n\n```\n* 复杂对象\n一个稍微复杂点的类 包含属性是对象的这种类 \n```\npackage com.ming.json;\n\n\n/**\n * 内嵌对象的对象\n *\n * @author ming\n * @date 2018-07-17 16:11:15\n */\npublic class CyclicData {\n    private Integer id;\n    private CyclicData cyclicData;\n\n\n    @Override\n    public String toString() {\n        return \"CyclicData{\" +\n                \"id=\" + id +\n                \", cyclicData=\" + cyclicData +\n                '}';\n    }\n\n    public Integer getId() {\n        return id;\n    }\n\n    public void setId(Integer id) {\n        this.id = id;\n    }\n\n    public CyclicData getCyclicData() {\n        return cyclicData;\n    }\n\n    public void setCyclicData(CyclicData cyclicData) {\n        this.cyclicData = cyclicData;\n    }\n}\n\n```\n* DataUtils   \n构建统一的测试数据的工具类 \n```\npackage com.ming.json;\n\nimport java.math.BigDecimal;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * 数据工具类 用来获取数据 提供给各种json框架解析\n *\n * @author ming\n * @date 2018-07-17 15:30:30\n */\npublic class DataUtils {\n\n    /**\n     * 获取String list\n     *\n     * @param size\n     * @author ming\n     * @date 2018-07-17 16:08:50\n     */\n    public static List<String> getStringList(int size) {\n        List<String> resultList = new ArrayList<>();\n        for (int i = 0; i < size; i++) {\n            resultList.add(\"test\" + i);\n        }\n        return resultList;\n    }\n\n\n    /**\n     * 获取String  String map\n     *\n     * @param size\n     * @author ming\n     * @date 2018-07-17 16:09:04\n     */\n    public static Map<String, String> getStringMap(int size) {\n        Map<String, String> resultMap = new HashMap<>();\n        for (int i = 0; i < size; i++) {\n            resultMap.put(\"k\" + i, \"v\" + i);\n        }\n        return resultMap;\n    }\n\n    /**\n     * 获取 自定义对象\n     *\n     * @author ming\n     * @date 2018-07-17 16:09:20\n     */\n    public static MyData getMyData() {\n        MyData myData = new MyData();\n        myData.setId(1);\n        myData.setName(\"ming\");\n        myData.setAge(BigDecimal.TEN);\n        return myData;\n    }\n\n    /**\n     * 获取自定义对象 list\n     *\n     * @param size\n     * @author ming\n     * @date 2018-07-17 16:09:30\n     */\n    public static List<MyData> getMyDataList(int size) {\n        List<MyData> resultList = new ArrayList<>();\n        for (int i = 0; i < size; i++) {\n            MyData tmp = new MyData();\n            tmp.setId(i);\n            tmp.setName(\"ming\" + i);\n            tmp.setAge(BigDecimal.valueOf(i));\n            resultList.add(tmp);\n        }\n        return resultList;\n    }\n\n    /**\n     * 获取String  自定义对象 map\n     *\n     * @param size\n     * @author ming\n     * @date 2018-07-17 16:09:47\n     */\n    public static Map<String, MyData> getMyDataMap(int size) {\n        Map<String, MyData> resultMap = new HashMap<>();\n        for (int i = 0; i < size; i++) {\n            MyData tmp = new MyData();\n            tmp.setId(i);\n            tmp.setName(\"ming\" + i);\n            tmp.setAge(BigDecimal.valueOf(i));\n            resultMap.put(\"k\" + i, tmp);\n        }\n        return resultMap;\n    }\n\n    /**\n     * 获取内嵌对象的对象\n     *\n     * @author ming\n     * @date 2018-07-17 16:10:03\n     */\n\n    public static CyclicData getCyclicData() {\n        CyclicData result = new CyclicData();\n        result.setId(1);\n\n        CyclicData tmp = new CyclicData();\n        tmp.setId(2);\n        result.setCyclicData(tmp);\n\n        return result;\n    }\n\n    /**\n     * 获取内嵌对象的对象 的list\n     *\n     * @param size\n     * @author ming\n     * @date 2018-07-17 16:10:17\n     */\n    public static List<CyclicData> getCyclicDataList(int size) {\n        List<CyclicData> resultList = new ArrayList<>();\n        for (int i = 0; i < size; i++) {\n            CyclicData tmp = new CyclicData();\n            tmp.setId(i);\n\n            CyclicData t = new CyclicData();\n            tmp.setId(i * 1000);\n            tmp.setCyclicData(t);\n            resultList.add(tmp);\n        }\n        return resultList;\n    }\n\n    /**\n     * 获取内嵌对象的对象的map\n     *\n     * @param size\n     * @author ming\n     * @date 2018-07-17 16:10:32\n     */\n    public static Map<String, CyclicData> getCyclicDataMap(int size) {\n        Map<String, CyclicData> resultMap = new HashMap<>();\n        for (int i = 0; i < size; i++) {\n            CyclicData tmp = new CyclicData();\n            tmp.setId(i);\n\n            CyclicData t = new CyclicData();\n            tmp.setId(i * 1000);\n            tmp.setCyclicData(t);\n            resultMap.put(\"k\" + i, tmp);\n        }\n        return resultMap;\n    }\n\n\n    /**\n     * 获取 kv 都是对象的map\n     *\n     * @param size\n     * @author ming\n     * @date 2018-07-17 16:10:49\n     */\n    public static Map<MyData, CyclicData> getMyDataAndCyclicDataMap(int size) {\n        Map<MyData, CyclicData> resultMap = new HashMap<>();\n        for (int i = 0; i < size; i++) {\n            CyclicData tmp = new CyclicData();\n            tmp.setId(i);\n\n            CyclicData t = new CyclicData();\n            tmp.setId(i * 1000);\n            tmp.setCyclicData(t);\n\n\n            MyData k = new MyData();\n            k.setId(i);\n            k.setName(\"ming\" + i);\n            k.setAge(BigDecimal.valueOf(i));\n\n            resultMap.put(k, tmp);\n        }\n        return resultMap;\n    }\n\n\n}\n```\n* 测试用例的统一接口\n定义 各种解析框架 的测试用例的格式 \n```\npackage com.ming.json;\n\nimport com.fasterxml.jackson.core.JsonProcessingException;\n\nimport java.io.IOException;\n\npublic interface TestJson {\n\n    //测试 对象转换 json 字符串 -------------------------------------------------------------------------------------------\n    void testStringListObjToString() throws JsonProcessingException;\n\n    void testStringMapObjToString() throws JsonProcessingException;\n\n    void testMyDataToString() throws JsonProcessingException;\n\n    void testMyDataListToString() throws JsonProcessingException;\n\n    void testMyDataMapToString() throws JsonProcessingException;\n\n    void testCyclicDataToString() throws JsonProcessingException;\n\n    void testCyclicDataListToString() throws JsonProcessingException;\n\n    void testCyclicDataMapToString() throws JsonProcessingException;\n\n    void testMyDataAndCyclicDataMapToString() throws JsonProcessingException;\n\n\n    //json 字符串转换 对象测试方法------------------------------------------------------------------------------------------\n    void zTestStringListObjStringToObj() throws IOException;\n\n    void zTestStringMapObjStringToObj() throws IOException;\n\n    void zTestMyDataStringToObj() throws IOException;\n\n    void zTestMyDataListStringToObj() throws IOException;\n\n    void zTestMyDataMapStringToObj() throws IOException;\n\n    void zTestCyclicDataStringToObj() throws IOException;\n\n    void zTestCyclicDataListStringToObj() throws IOException;\n\n    void zTestCyclicDataMapStringToObj() throws IOException;\n\n    void zTestMyDataAndCyclicDataMapStringToObj() throws IOException;\n}\n```\n* 测试用例的统一的抽象类 实现 统一的接口 \n对所有的测试用例实现做一个统一的配置抽象类 \n提供所有实现测试用例类的公共配置 、前置后置方法 \n```\npackage com.ming.json;\n\nimport junit.framework.TestCase;\nimport org.junit.After;\nimport org.junit.Before;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\npublic abstract class TestJsonAbstract extends TestCase implements TestJson {\n    //公共变量区\n    protected static String stringList = null;\n    protected static String stringMap = null;\n    protected static String myData = null;\n    protected static String myDataList = null;\n    protected static String myDataMap = null;\n    protected static String cyclicData = null;\n    protected static String cyclicDataList = null;\n    protected static String cyclicDataMap = null;\n    protected static String myDataAndCyclicDataMap = null;\n    //获取集合的大小\n    protected int size = 10000;\n    protected Long now = null;\n    private Logger logger = LoggerFactory.getLogger(TestJsonAbstract.class);\n\n    @Before\n    public void init() {\n        System.out.println(\"开始计算耗时。。。。。。\");\n        now = System.currentTimeMillis();\n    }\n\n    @After\n    public void close() {\n        System.out.println(\"结束耗时,共耗时:\" + (System.currentTimeMillis() - now));\n        logger.info(\"结束耗时,共耗时:\" + (System.currentTimeMillis() - now));\n        now = null;\n    }\n}\n\n```\n##### 测试用例\n\n* fast json测试类\n继承抽象类实现 统一的测试方法 \n```\npackage com.ming.json;\n\nimport com.alibaba.fastjson.JSON;\nimport org.junit.FixMethodOrder;\nimport org.junit.Test;\nimport org.junit.runners.MethodSorters;\n\nimport java.util.Map;\n\n/**\n * 测试fastJson 解析\n * 通过指定 test case 执行顺序 来保证 先调用obj转换String  然后在调用 string 转换obj\n *\n * @author ming\n * @date 2018-07-17 15:23:36\n */\n@FixMethodOrder(value = MethodSorters.NAME_ASCENDING)\npublic class TestFastJson extends TestJsonAbstract {\n\n\n    @Test\n    @Override\n    public void testStringListObjToString() {\n        stringList = JSON.toJSONString(DataUtils.getStringList(size));\n        System.out.println(stringList);\n    }\n\n\n    @Test\n    @Override\n    public void testStringMapObjToString() {\n        stringMap = JSON.toJSONString(DataUtils.getStringMap(size));\n        System.out.println(stringMap);\n    }\n\n    @Test\n    @Override\n    public void testMyDataToString() {\n        myData = JSON.toJSONString(DataUtils.getMyData());\n        System.out.println(myData);\n    }\n\n    @Test\n    @Override\n    public void testMyDataListToString() {\n        myDataList = JSON.toJSONString(DataUtils.getMyDataList(size));\n        System.out.println(myDataList);\n    }\n\n    @Test\n    @Override\n    public void testMyDataMapToString() {\n        myDataMap = JSON.toJSONString(DataUtils.getMyDataMap(size));\n        System.out.println(myDataMap);\n    }\n\n    @Test\n    @Override\n    public void testCyclicDataToString() {\n        cyclicData = JSON.toJSONString(DataUtils.getCyclicData());\n        System.out.println(cyclicData);\n    }\n\n    @Test\n    @Override\n    public void testCyclicDataListToString() {\n        cyclicDataList = JSON.toJSONString(DataUtils.getCyclicDataList(size));\n        System.out.println(cyclicDataList);\n    }\n\n    @Test\n    @Override\n    public void testCyclicDataMapToString() {\n        cyclicDataMap = JSON.toJSONString(DataUtils.getCyclicDataMap(size));\n        System.out.println(cyclicDataMap);\n    }\n\n    @Test\n    @Override\n    public void testMyDataAndCyclicDataMapToString() {\n        myDataAndCyclicDataMap = JSON.toJSONString(DataUtils.getMyDataAndCyclicDataMap(size));\n        System.out.println(myDataAndCyclicDataMap);\n    }\n\n\n    @Test\n    @Override\n    public void zTestStringListObjStringToObj() {\n        System.out.println(JSON.parseArray(stringList));\n    }\n\n\n    @Test\n    @Override\n    public void zTestStringMapObjStringToObj() {\n        System.out.println(JSON.parseObject(stringMap, Map.class));\n    }\n\n    @Test\n    @Override\n    public void zTestMyDataStringToObj() {\n        System.out.println(JSON.parseObject(myData, MyData.class));\n    }\n\n    @Test\n    @Override\n    public void zTestMyDataListStringToObj() {\n        System.out.println(JSON.parseArray(myDataList, MyData.class));\n    }\n\n    @Test\n    @Override\n    public void zTestMyDataMapStringToObj() {\n        System.out.println(JSON.parseObject(myDataMap, Map.class));\n    }\n\n    @Test\n    @Override\n    public void zTestCyclicDataStringToObj() {\n        System.out.println(JSON.parseObject(cyclicData, CyclicData.class));\n    }\n\n    @Test\n    @Override\n    public void zTestCyclicDataListStringToObj() {\n        System.out.println(JSON.parseArray(cyclicDataList, CyclicData.class));\n    }\n\n    @Test\n    @Override\n    public void zTestCyclicDataMapStringToObj() {\n        System.out.println(JSON.parseObject(cyclicDataMap, Map.class));\n    }\n\n    @Test\n    @Override\n    public void zTestMyDataAndCyclicDataMapStringToObj() {\n        System.out.println(JSON.parseObject(myDataAndCyclicDataMap, Map.class));\n    }\n\n\n}\n\n```\n* jackson测试类\n使用jackson 实现的统一的测试用例 继承抽象类\n```\npackage com.ming.json;\n\nimport com.fasterxml.jackson.core.JsonProcessingException;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport org.junit.FixMethodOrder;\nimport org.junit.Test;\nimport org.junit.runners.MethodSorters;\n\nimport java.io.IOException;\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * 测试解析 jackson\n *\n * @author ming\n * @date 2018-07-17 15:24:12\n */\n@FixMethodOrder(value = MethodSorters.NAME_ASCENDING)\npublic class TestJackson extends TestJsonAbstract {\n    //获取 jackson 处理json的 mapper   可以通过setConfig 配置这个objectMapper\n    private ObjectMapper objectMapper = new ObjectMapper();\n\n    public void init1() {\n        //DeserializationConfig,SerializationConfig\n        //配置 objectMapper 编解码 配置\n        //objectMapper.setConfig()\n\n        //设置序列化和反序列化时候的配置\n        //objectMapper.configure();\n\n    }\n\n    @Test\n    @Override\n    public void testStringListObjToString() throws JsonProcessingException {\n        stringList = objectMapper.writeValueAsString(DataUtils.getStringList(size));\n        System.out.println(stringList);\n    }\n\n\n    @Test\n    @Override\n    public void testStringMapObjToString() throws JsonProcessingException {\n        stringMap = objectMapper.writeValueAsString(DataUtils.getStringMap(size));\n        System.out.println(stringMap);\n    }\n\n    @Test\n    @Override\n    public void testMyDataToString() throws JsonProcessingException {\n        myData = objectMapper.writeValueAsString(DataUtils.getMyData());\n        System.out.println(myData);\n    }\n\n    @Test\n    @Override\n    public void testMyDataListToString() throws JsonProcessingException {\n        myDataList = objectMapper.writeValueAsString(DataUtils.getMyDataList(size));\n        System.out.println(myDataList);\n    }\n\n    @Test\n    @Override\n    public void testMyDataMapToString() throws JsonProcessingException {\n        myDataMap = objectMapper.writeValueAsString(DataUtils.getMyDataMap(size));\n        System.out.println(myDataMap);\n    }\n\n    @Test\n    @Override\n    public void testCyclicDataToString() throws JsonProcessingException {\n        cyclicData = objectMapper.writeValueAsString(DataUtils.getCyclicData());\n        System.out.println(cyclicData);\n    }\n\n    @Test\n    @Override\n    public void testCyclicDataListToString() throws JsonProcessingException {\n        cyclicDataList = objectMapper.writeValueAsString(DataUtils.getCyclicDataList(size));\n        System.out.println(cyclicDataList);\n    }\n\n    @Test\n    @Override\n    public void testCyclicDataMapToString() throws JsonProcessingException {\n        cyclicDataMap = objectMapper.writeValueAsString(DataUtils.getCyclicDataMap(size));\n        System.out.println(cyclicDataMap);\n    }\n\n    @Test\n    @Override\n    public void testMyDataAndCyclicDataMapToString() throws JsonProcessingException {\n        myDataAndCyclicDataMap = objectMapper.writeValueAsString(DataUtils.getMyDataAndCyclicDataMap(size));\n        System.out.println(myDataAndCyclicDataMap);\n    }\n\n\n    @Test\n    @Override\n    public void zTestStringListObjStringToObj() throws IOException {\n        System.out.println(objectMapper.readValue(stringList, List.class));\n    }\n\n\n    @Test\n    @Override\n    public void zTestStringMapObjStringToObj() throws IOException {\n        System.out.println(objectMapper.readValue(stringMap, Map.class));\n    }\n\n    @Test\n    @Override\n    public void zTestMyDataStringToObj() throws IOException {\n        System.out.println(objectMapper.readValue(myData, MyData.class));\n    }\n\n    @Test\n    @Override\n    public void zTestMyDataListStringToObj() throws IOException {\n        System.out.println(objectMapper.readValue(myDataList, List.class));\n    }\n\n    @Test\n    @Override\n    public void zTestMyDataMapStringToObj() throws IOException {\n        System.out.println(objectMapper.readValue(myDataMap, Map.class));\n    }\n\n    @Test\n    @Override\n    public void zTestCyclicDataStringToObj() throws IOException {\n        System.out.println(objectMapper.readValue(cyclicData, CyclicData.class));\n    }\n\n    @Test\n    @Override\n    public void zTestCyclicDataListStringToObj() throws IOException {\n        System.out.println(objectMapper.readValue(cyclicDataList, List.class));\n    }\n\n    @Test\n    @Override\n    public void zTestCyclicDataMapStringToObj() throws IOException {\n        System.out.println(objectMapper.readValue(cyclicDataMap, Map.class));\n    }\n\n    @Test\n    @Override\n    public void zTestMyDataAndCyclicDataMapStringToObj() throws IOException {\n        System.out.println(objectMapper.readValue(myDataAndCyclicDataMap, Map.class));\n    }\n\n}\n\n```\n* gson测试类\ngson实现统一的测试类 继承抽象类 \n```\npackage com.ming.json;\n\nimport com.google.gson.Gson;\nimport com.google.gson.GsonBuilder;\nimport org.junit.FixMethodOrder;\nimport org.junit.Test;\nimport org.junit.runners.MethodSorters;\n\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * 测试gson 解析\n *\n * @author ming\n * @date 2018-07-17 15:23:58\n */\n@FixMethodOrder(MethodSorters.NAME_ASCENDING)\npublic class TestGson extends TestJsonAbstract {\n\n    private Gson gson = new GsonBuilder().create();\n\n\n    @Test\n    @Override\n    public void testStringListObjToString() {\n        stringList = gson.toJson(DataUtils.getStringList(size));\n        System.out.println(stringList);\n    }\n\n\n    @Test\n    @Override\n    public void testStringMapObjToString() {\n        stringMap = gson.toJson(DataUtils.getStringMap(size));\n        System.out.println(stringMap);\n    }\n\n    @Test\n    @Override\n    public void testMyDataToString() {\n        myData = gson.toJson(DataUtils.getMyData());\n        System.out.println(myData);\n    }\n\n    @Test\n    @Override\n    public void testMyDataListToString() {\n        myDataList = gson.toJson(DataUtils.getMyDataList(size));\n        System.out.println(myDataList);\n    }\n\n    @Test\n    @Override\n    public void testMyDataMapToString() {\n        myDataMap = gson.toJson(DataUtils.getMyDataMap(size));\n        System.out.println(myDataMap);\n    }\n\n    @Test\n    @Override\n    public void testCyclicDataToString() {\n        cyclicData = gson.toJson(DataUtils.getCyclicData());\n        System.out.println(cyclicData);\n    }\n\n    @Test\n    @Override\n    public void testCyclicDataListToString() {\n        cyclicDataList = gson.toJson(DataUtils.getCyclicDataList(size));\n        System.out.println(cyclicDataList);\n    }\n\n    @Test\n    @Override\n    public void testCyclicDataMapToString() {\n        cyclicDataMap = gson.toJson(DataUtils.getCyclicDataMap(size));\n        System.out.println(cyclicDataMap);\n    }\n\n    @Test\n    @Override\n    public void testMyDataAndCyclicDataMapToString() {\n        myDataAndCyclicDataMap = gson.toJson(DataUtils.getMyDataAndCyclicDataMap(size));\n        System.out.println(myDataAndCyclicDataMap);\n    }\n\n\n    @Test\n    @Override\n    public void zTestStringListObjStringToObj() {\n        System.out.println(gson.fromJson(stringList, List.class));\n    }\n\n\n    @Test\n    @Override\n    public void zTestStringMapObjStringToObj() {\n        System.out.println(gson.fromJson(stringMap, Map.class));\n    }\n\n    @Test\n    @Override\n    public void zTestMyDataStringToObj() {\n        System.out.println(gson.fromJson(myData, MyData.class));\n    }\n\n    @Test\n    @Override\n    public void zTestMyDataListStringToObj() {\n        System.out.println(gson.fromJson(myDataList, List.class));\n    }\n\n    @Test\n    @Override\n    public void zTestMyDataMapStringToObj() {\n        System.out.println(gson.fromJson(myDataMap, Map.class));\n    }\n\n    @Test\n    @Override\n    public void zTestCyclicDataStringToObj() {\n        System.out.println(gson.fromJson(cyclicData, CyclicData.class));\n    }\n\n    @Test\n    @Override\n    public void zTestCyclicDataListStringToObj() {\n        System.out.println(gson.fromJson(cyclicDataList, List.class));\n    }\n\n    @Test\n    @Override\n    public void zTestCyclicDataMapStringToObj() {\n        System.out.println(gson.fromJson(cyclicDataMap, Map.class));\n    }\n\n    @Test\n    @Override\n    public void zTestMyDataAndCyclicDataMapStringToObj() {\n        System.out.println(gson.fromJson(myDataAndCyclicDataMap, Map.class));\n    }\n\n\n}\n\n```\n* genson测试类\ngenson实现的测试类 继承 抽象类 \n```\npackage com.ming.json;\n\nimport com.owlike.genson.Genson;\nimport org.junit.FixMethodOrder;\nimport org.junit.Test;\nimport org.junit.runners.MethodSorters;\n\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * 测试使用genson\n *\n * @author ming\n * @date 2018-07-17 15:24:33\n */\n@FixMethodOrder(MethodSorters.NAME_ASCENDING)\npublic class TestGenson extends TestJsonAbstract {\n    private Genson genson = new Genson();\n\n\n    @Test\n    @Override\n    public void testStringListObjToString() {\n        stringList = genson.serialize(DataUtils.getStringList(size));\n        System.out.println(stringList);\n    }\n\n\n    @Test\n    @Override\n    public void testStringMapObjToString() {\n        stringMap = genson.serialize(DataUtils.getStringMap(size));\n        System.out.println(stringMap);\n    }\n\n    @Test\n    @Override\n    public void testMyDataToString() {\n        myData = genson.serialize(DataUtils.getMyData());\n        System.out.println(myData);\n    }\n\n    @Test\n    @Override\n    public void testMyDataListToString() {\n        myDataList = genson.serialize(DataUtils.getMyDataList(size));\n        System.out.println(myDataList);\n    }\n\n    @Test\n    @Override\n    public void testMyDataMapToString() {\n        myDataMap = genson.serialize(DataUtils.getMyDataMap(size));\n        System.out.println(myDataMap);\n    }\n\n    @Test\n    @Override\n    public void testCyclicDataToString() {\n        cyclicData = genson.serialize(DataUtils.getCyclicData());\n        System.out.println(cyclicData);\n    }\n\n    @Test\n    @Override\n    public void testCyclicDataListToString() {\n        cyclicDataList = genson.serialize(DataUtils.getCyclicDataList(size));\n        System.out.println(cyclicDataList);\n    }\n\n    @Test\n    @Override\n    public void testCyclicDataMapToString() {\n        cyclicDataMap = genson.serialize(DataUtils.getCyclicDataMap(size));\n        System.out.println(cyclicDataMap);\n    }\n\n    @Test\n    @Override\n    public void testMyDataAndCyclicDataMapToString() {\n        myDataAndCyclicDataMap = genson.serialize(DataUtils.getMyDataAndCyclicDataMap(size));\n        System.out.println(myDataAndCyclicDataMap);\n    }\n\n\n    @Test\n    @Override\n    public void zTestStringListObjStringToObj() {\n        System.out.println(genson.deserialize(stringList, List.class));\n    }\n\n\n    @Test\n    @Override\n    public void zTestStringMapObjStringToObj() {\n        System.out.println(genson.deserialize(stringMap, Map.class));\n    }\n\n    @Test\n    @Override\n    public void zTestMyDataStringToObj() {\n        System.out.println(genson.deserialize(myData, MyData.class));\n    }\n\n    @Test\n    @Override\n    public void zTestMyDataListStringToObj() {\n        System.out.println(genson.deserialize(myDataList, List.class));\n    }\n\n    @Test\n    @Override\n    public void zTestMyDataMapStringToObj() {\n        System.out.println(genson.deserialize(myDataMap, Map.class));\n    }\n\n    @Test\n    @Override\n    public void zTestCyclicDataStringToObj() {\n        System.out.println(genson.deserialize(cyclicData, CyclicData.class));\n    }\n\n    @Test\n    @Override\n    public void zTestCyclicDataListStringToObj() {\n        System.out.println(genson.deserialize(cyclicDataList, List.class));\n    }\n\n    @Test\n    @Override\n    public void zTestCyclicDataMapStringToObj() {\n        System.out.println(genson.deserialize(cyclicDataMap, Map.class));\n    }\n\n    @Test\n    @Override\n    public void zTestMyDataAndCyclicDataMapStringToObj() {\n        System.out.println(genson.deserialize(myDataAndCyclicDataMap, Map.class));\n    }\n\n}\n\n```\n* 所有的测试类实现 统一进行批量测试 \n```\npackage com.ming.json;\n\n\nimport junit.framework.TestCase;\nimport junit.framework.TestSuite;\nimport junit.textui.TestRunner;\n\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.stream.Collectors;\n\n/**\n * 聚合多个测试用例 在一起测试\n *\n * @author ming\n * @date 2018-07-17 17:31:55\n */\n//@RunWith(Suite.class)\n//@Suite.SuiteClasses({TestJackson.class, TestGson.class,  TestGenson.class,TestFastJson.class})\npublic class AllTest {\n\n    public static void main(String[] args) {\n        //执行测试用例次数 通过增大执行次数 取平均数 减小误差\n        int size = 10000;\n        List<Map<String, Object>> result = new ArrayList<>();\n        long now = System.currentTimeMillis();\n        result.add(get(TestJackson.class, size));\n        result.add(get(TestGson.class, size));\n        result.add(get(TestGenson.class, size));\n        result.add(get(TestFastJson.class, size));\n        System.out.println(\"总耗时:\" + (System.currentTimeMillis() - now) + \"ms\");\n        System.out.println(\"明细信息-------------------------------\");\n        result.forEach(f -> {\n            System.out.println(\"执行的测试用例\" + f.get(\"class\"));\n            System.out.println(\"执行平均耗时\" + f.get(\"avgTime\") + \"ms\");\n            System.out.println(\"每次执行的耗时详情\" + f.get(\"testList\"));\n            System.out.println(\"--------------------------------\");\n        });\n    }\n\n    private static Map<String, Object> get(Class<? extends TestCase> tClass, int size) {\n        TestSuite testSuite = new TestSuite();\n        testSuite.addTestSuite(tClass);\n        long now;\n        List<Long> list = new ArrayList<>();\n        for (int i = 0; i < size; i++) {\n            now = System.currentTimeMillis();\n            TestRunner.run(testSuite);\n            list.add(System.currentTimeMillis() - now);\n        }\n        Map<String, Object> map = new HashMap<>();\n        map.put(\"class\", tClass);\n        map.put(\"testList\", list);\n        map.put(\"avgTime\", list.stream().collect(Collectors.averagingLong(a -> a)));\n        return map;\n    }\n}\n\n```\n\n开启 AllTest类中的main方法即进行所有的模块的测试 \n\n其中一次测试结果记录\n```\n总耗时:3627599ms\n明细信息-------------------------------\n执行的测试用例class com.ming.json.TestJackson\n执行平均耗时84.3811ms\n每次执行的耗时详情[439, 215, 184, 183, 176, 198。。。。。]\n--------------------------------\n执行的测试用例class com.ming.json.TestGson\n执行平均耗时94.915ms\n每次执行的耗时详情[299, 126, 123, 113, 95, 109, 。。。。]\n--------------------------------\n执行的测试用例class com.ming.json.TestGenson\n执行平均耗时99.3964ms\n每次执行的耗时详情[247, 144, 115, 98, 102, 85, 。。。。。]\n--------------------------------\n执行的测试用例class com.ming.json.TestFastJson\n执行平均耗时84.0026ms\n每次执行的耗时详情[263, 143, 94, 104, 69, 72, 。。。。。]\n--------------------------------\n\n```\n\n#### jackson gson针对泛型的特殊处理 \n```\npackage com.ming.json;\n\nimport com.fasterxml.jackson.core.type.TypeReference;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.google.common.collect.Maps;\nimport com.google.common.reflect.TypeToken;\nimport com.google.gson.Gson;\n\nimport java.io.IOException;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * 测试泛型类型 json转换\n * 引用地址:https://www.jianshu.com/p/ca03c2fe36e3\n *\n * @author ming\n * @date 2018-07-19 14:03:12\n */\npublic class TestT {\n    private static ObjectMapper mapper = new ObjectMapper();\n    private static Gson gson = new Gson();\n\n    public static void main(String[] args) throws IOException {\n        Map<String, List<Long>> map = Maps.newHashMap();\n        map.put(\"one\", Arrays.asList(10001L, 10002L, 10003L, 10004L));\n        map.put(\"two\", Arrays.asList(20001L, 20002L, 20003L, 20004L));\n        map.put(\"three\", Arrays.asList(30001L, 30002L, 30003L, 30004L));\n        map.put(\"four\", Arrays.asList(40001L, 40002L, 40003L, 40004L));\n\n        String json = new Gson().toJson(map);\n        System.err.println(\"=======================错误示范=====================\");\n        //Gson\n        Map<String, List<Long>> mapResult = gson.fromJson(json, Map.class);\n        System.out.println(\"通过Gson转换...\");\n//      printType(mapResult);\n        System.out.println(mapResult);\n        //Json\n        Map<String, List<Long>> jsonMapResult = mapper.readValue(json, Map.class);\n        System.out.println(\"通过Jackson转换...\");\n//      printType(jsonMapResult);\n\n        System.out.println(jsonMapResult);\n        System.out.println(\"=======================正确做法=====================\");\n        //Gson\n        Map<String, List<Long>> mapResult1 = gson.fromJson(json, new TypeToken<Map<String, List<Long>>>() {\n        }.getType());\n        System.out.println(\"通过Gson转换...\");\n        printType(mapResult1);\n        System.out.println(mapResult1);\n        //Json\n        ObjectMapper mapper = new ObjectMapper();\n        Map<String, List<Long>> jsonMapResult1 = mapper.readValue(json, new TypeReference<Map<String, List<Long>>>() {\n        });\n        System.out.println(\"通过Jackson转换...\");\n        printType(jsonMapResult1);\n\n        System.out.println(jsonMapResult1);\n\n    }\n\n    public static void printType(Map<String, List<Long>> map) {\n        for (Map.Entry<String, List<Long>> entry : map.entrySet()) {\n            System.out.println(\"key 类型:\" + entry.getKey().getClass() + \", value类型:\"\n                    + entry.getValue().getClass() + \", List中元素类型\" + entry.getValue().get(0).getClass());\n        }\n\n    }\n\n\n}\n\n```\n\n#### 总结  \njava处理json相关的操作 工具包是很多的 但是用的多的也就上面说的几种    \n对于简单并且要求速度的对象和json转换 直接使用fast json即可 不过有时候 fast json 会坑爹   \n其他情况使用jackson 完全可以胜任   gson也行 不过 我更加喜欢jackson  毕竟 很多框架就已经引用了jackson  跟着大佬走肯定没错的  \n带有泛型的 一定要用jackson或者gson 去使用  否则可能会无法反序列化成想要的类型  特别是fast json 只能处理第一层的泛型 复杂的泛型直接gg\n\n\n\n","slug":"java/常用json解析框架对比","published":1,"updated":"2018-08-17T08:10:03.923Z","layout":"post","photos":[],"link":"","_id":"cjo9uau5c00dgmwcz8yc0bn0o","content":"<h4 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h4><p>最近使用基于http作为rpc调用协议的时候 由于选择使用json来传递数据<br>不得不做一波常用的json解析框架的性能、稳定性、可定制性、使用难度、对复杂对象的支持程度等等方面来对比一下<br>只针对常用的几种 json解析框架对比 有些小众在某些方面很优秀的不再对比之列</p><h4 id=\"对比\"><a href=\"#对比\" class=\"headerlink\" title=\"对比\"></a>对比</h4><table><thead><tr><th style=\"text-align:left\">名称</th><th style=\"text-align:left\">使用方式</th><th style=\"text-align:left\">可配置性</th><th style=\"text-align:left\">优点</th><th>缺点</th><th>备注</th></tr></thead><tbody><tr><td style=\"text-align:left\">fast json</td><td style=\"text-align:left\">JSON.toJSONString、JSON.parseObject</td><td style=\"text-align:left\">调用toJSONString、parseObject方法的重载方法去配置</td><td style=\"text-align:left\">使用简单、简单的转换可以直接使用静态方法使用</td><td>对于复杂对象处理非常弱、对于泛型处理非常弱</td><td>处理简单的对象与json字符串转换的时候 比较适用</td></tr><tr><td style=\"text-align:left\">jackson</td><td style=\"text-align:left\">获取objectMapper对象 通过writeValueAsString()、 readValue()方式互相转换</td><td style=\"text-align:left\">提供DeserializationConfig、SerializationConfig各种配置</td><td style=\"text-align:left\">功能完善、对各种复杂的情况都能使用、对于泛型支持较为完善</td><td>功能太多导致使用复杂、配置复杂、需要new</td><td>spring等常用框架中使用的就是jackson 即保证速度也保证适应于各种复杂情况</td><td>处理复杂的对象 又不想引入gson 那么直接使用jackson 这个速度和fastjson差不多但是能处理很多复杂的功能</td></tr><tr><td style=\"text-align:left\">gson</td><td style=\"text-align:left\">获取Gson对象 通过toJson()、fromJson()方法互相转换</td><td style=\"text-align:left\">提供GsonBuilder 去配置不同处理方式的的gson实例</td><td style=\"text-align:left\">功能完善、对泛型支持较为完善</td><td>速度和jackson和fastjson相比 略慢、使用的时候 要专门引用gson 依赖、需要一个实例对象</td><td>用于处理复杂的对象和json字符串相互转换 不过速度比不上jackson 不过也够用了</td></tr><tr><td style=\"text-align:left\">genson</td><td style=\"text-align:left\">获取genson对象 通过serialize()、deserialize()来互相转换</td><td style=\"text-align:left\">提供GensonBuilder 去配置不同的处理方式的 gensonBuilder</td><td style=\"text-align:left\">对泛型支持较为完善</td><td>需要实例对象、速度略慢</td><td>这个用的少 如果要对简单对象转换直接fastjson、复杂的又jackson、gson 这个看不到什么特殊的厉害的地方</td></tr></tbody></table><h4 id=\"测试用例\"><a href=\"#测试用例\" class=\"headerlink\" title=\"测试用例\"></a>测试用例</h4><h5 id=\"基础类\"><a href=\"#基础类\" class=\"headerlink\" title=\"基础类\"></a>基础类</h5><ul><li><p>简单对象<br>一个只有简单属性的 类</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.ming.json;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.math.BigDecimal;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 普通对象</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @author ming</span><br><span class=\"line\"> * @date 2018-07-17 16:11:05</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class MyData &#123;</span><br><span class=\"line\">    private Integer id;</span><br><span class=\"line\">    private String name;</span><br><span class=\"line\">    private BigDecimal age;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public String toString() &#123;</span><br><span class=\"line\">        return &quot;MyData&#123;&quot; +</span><br><span class=\"line\">                &quot;id=&quot; + id +</span><br><span class=\"line\">                &quot;, name=&apos;&quot; + name + &apos;\\&apos;&apos; +</span><br><span class=\"line\">                &quot;, age=&quot; + age +</span><br><span class=\"line\">                &apos;&#125;&apos;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public Integer getId() &#123;</span><br><span class=\"line\">        return id;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void setId(Integer id) &#123;</span><br><span class=\"line\">        this.id = id;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public String getName() &#123;</span><br><span class=\"line\">        return name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void setName(String name) &#123;</span><br><span class=\"line\">        this.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public BigDecimal getAge() &#123;</span><br><span class=\"line\">        return age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void setAge(BigDecimal age) &#123;</span><br><span class=\"line\">        this.age = age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>复杂对象<br>一个稍微复杂点的类 包含属性是对象的这种类 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.ming.json;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 内嵌对象的对象</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @author ming</span><br><span class=\"line\"> * @date 2018-07-17 16:11:15</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class CyclicData &#123;</span><br><span class=\"line\">    private Integer id;</span><br><span class=\"line\">    private CyclicData cyclicData;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public String toString() &#123;</span><br><span class=\"line\">        return &quot;CyclicData&#123;&quot; +</span><br><span class=\"line\">                &quot;id=&quot; + id +</span><br><span class=\"line\">                &quot;, cyclicData=&quot; + cyclicData +</span><br><span class=\"line\">                &apos;&#125;&apos;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public Integer getId() &#123;</span><br><span class=\"line\">        return id;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void setId(Integer id) &#123;</span><br><span class=\"line\">        this.id = id;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public CyclicData getCyclicData() &#123;</span><br><span class=\"line\">        return cyclicData;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void setCyclicData(CyclicData cyclicData) &#123;</span><br><span class=\"line\">        this.cyclicData = cyclicData;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>DataUtils<br>构建统一的测试数据的工具类 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.ming.json;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.math.BigDecimal;</span><br><span class=\"line\">import java.util.ArrayList;</span><br><span class=\"line\">import java.util.HashMap;</span><br><span class=\"line\">import java.util.List;</span><br><span class=\"line\">import java.util.Map;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 数据工具类 用来获取数据 提供给各种json框架解析</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @author ming</span><br><span class=\"line\"> * @date 2018-07-17 15:30:30</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class DataUtils &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 获取String list</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param size</span><br><span class=\"line\">     * @author ming</span><br><span class=\"line\">     * @date 2018-07-17 16:08:50</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static List&lt;String&gt; getStringList(int size) &#123;</span><br><span class=\"line\">        List&lt;String&gt; resultList = new ArrayList&lt;&gt;();</span><br><span class=\"line\">        for (int i = 0; i &lt; size; i++) &#123;</span><br><span class=\"line\">            resultList.add(&quot;test&quot; + i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return resultList;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 获取String  String map</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param size</span><br><span class=\"line\">     * @author ming</span><br><span class=\"line\">     * @date 2018-07-17 16:09:04</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static Map&lt;String, String&gt; getStringMap(int size) &#123;</span><br><span class=\"line\">        Map&lt;String, String&gt; resultMap = new HashMap&lt;&gt;();</span><br><span class=\"line\">        for (int i = 0; i &lt; size; i++) &#123;</span><br><span class=\"line\">            resultMap.put(&quot;k&quot; + i, &quot;v&quot; + i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return resultMap;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 获取 自定义对象</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @author ming</span><br><span class=\"line\">     * @date 2018-07-17 16:09:20</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static MyData getMyData() &#123;</span><br><span class=\"line\">        MyData myData = new MyData();</span><br><span class=\"line\">        myData.setId(1);</span><br><span class=\"line\">        myData.setName(&quot;ming&quot;);</span><br><span class=\"line\">        myData.setAge(BigDecimal.TEN);</span><br><span class=\"line\">        return myData;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 获取自定义对象 list</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param size</span><br><span class=\"line\">     * @author ming</span><br><span class=\"line\">     * @date 2018-07-17 16:09:30</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static List&lt;MyData&gt; getMyDataList(int size) &#123;</span><br><span class=\"line\">        List&lt;MyData&gt; resultList = new ArrayList&lt;&gt;();</span><br><span class=\"line\">        for (int i = 0; i &lt; size; i++) &#123;</span><br><span class=\"line\">            MyData tmp = new MyData();</span><br><span class=\"line\">            tmp.setId(i);</span><br><span class=\"line\">            tmp.setName(&quot;ming&quot; + i);</span><br><span class=\"line\">            tmp.setAge(BigDecimal.valueOf(i));</span><br><span class=\"line\">            resultList.add(tmp);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return resultList;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 获取String  自定义对象 map</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param size</span><br><span class=\"line\">     * @author ming</span><br><span class=\"line\">     * @date 2018-07-17 16:09:47</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static Map&lt;String, MyData&gt; getMyDataMap(int size) &#123;</span><br><span class=\"line\">        Map&lt;String, MyData&gt; resultMap = new HashMap&lt;&gt;();</span><br><span class=\"line\">        for (int i = 0; i &lt; size; i++) &#123;</span><br><span class=\"line\">            MyData tmp = new MyData();</span><br><span class=\"line\">            tmp.setId(i);</span><br><span class=\"line\">            tmp.setName(&quot;ming&quot; + i);</span><br><span class=\"line\">            tmp.setAge(BigDecimal.valueOf(i));</span><br><span class=\"line\">            resultMap.put(&quot;k&quot; + i, tmp);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return resultMap;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 获取内嵌对象的对象</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @author ming</span><br><span class=\"line\">     * @date 2018-07-17 16:10:03</span><br><span class=\"line\">     */</span><br><span class=\"line\"></span><br><span class=\"line\">    public static CyclicData getCyclicData() &#123;</span><br><span class=\"line\">        CyclicData result = new CyclicData();</span><br><span class=\"line\">        result.setId(1);</span><br><span class=\"line\"></span><br><span class=\"line\">        CyclicData tmp = new CyclicData();</span><br><span class=\"line\">        tmp.setId(2);</span><br><span class=\"line\">        result.setCyclicData(tmp);</span><br><span class=\"line\"></span><br><span class=\"line\">        return result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 获取内嵌对象的对象 的list</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param size</span><br><span class=\"line\">     * @author ming</span><br><span class=\"line\">     * @date 2018-07-17 16:10:17</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static List&lt;CyclicData&gt; getCyclicDataList(int size) &#123;</span><br><span class=\"line\">        List&lt;CyclicData&gt; resultList = new ArrayList&lt;&gt;();</span><br><span class=\"line\">        for (int i = 0; i &lt; size; i++) &#123;</span><br><span class=\"line\">            CyclicData tmp = new CyclicData();</span><br><span class=\"line\">            tmp.setId(i);</span><br><span class=\"line\"></span><br><span class=\"line\">            CyclicData t = new CyclicData();</span><br><span class=\"line\">            tmp.setId(i * 1000);</span><br><span class=\"line\">            tmp.setCyclicData(t);</span><br><span class=\"line\">            resultList.add(tmp);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return resultList;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 获取内嵌对象的对象的map</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param size</span><br><span class=\"line\">     * @author ming</span><br><span class=\"line\">     * @date 2018-07-17 16:10:32</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static Map&lt;String, CyclicData&gt; getCyclicDataMap(int size) &#123;</span><br><span class=\"line\">        Map&lt;String, CyclicData&gt; resultMap = new HashMap&lt;&gt;();</span><br><span class=\"line\">        for (int i = 0; i &lt; size; i++) &#123;</span><br><span class=\"line\">            CyclicData tmp = new CyclicData();</span><br><span class=\"line\">            tmp.setId(i);</span><br><span class=\"line\"></span><br><span class=\"line\">            CyclicData t = new CyclicData();</span><br><span class=\"line\">            tmp.setId(i * 1000);</span><br><span class=\"line\">            tmp.setCyclicData(t);</span><br><span class=\"line\">            resultMap.put(&quot;k&quot; + i, tmp);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return resultMap;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 获取 kv 都是对象的map</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param size</span><br><span class=\"line\">     * @author ming</span><br><span class=\"line\">     * @date 2018-07-17 16:10:49</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static Map&lt;MyData, CyclicData&gt; getMyDataAndCyclicDataMap(int size) &#123;</span><br><span class=\"line\">        Map&lt;MyData, CyclicData&gt; resultMap = new HashMap&lt;&gt;();</span><br><span class=\"line\">        for (int i = 0; i &lt; size; i++) &#123;</span><br><span class=\"line\">            CyclicData tmp = new CyclicData();</span><br><span class=\"line\">            tmp.setId(i);</span><br><span class=\"line\"></span><br><span class=\"line\">            CyclicData t = new CyclicData();</span><br><span class=\"line\">            tmp.setId(i * 1000);</span><br><span class=\"line\">            tmp.setCyclicData(t);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">            MyData k = new MyData();</span><br><span class=\"line\">            k.setId(i);</span><br><span class=\"line\">            k.setName(&quot;ming&quot; + i);</span><br><span class=\"line\">            k.setAge(BigDecimal.valueOf(i));</span><br><span class=\"line\"></span><br><span class=\"line\">            resultMap.put(k, tmp);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return resultMap;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>测试用例的统一接口<br>定义 各种解析框架 的测试用例的格式 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.ming.json;</span><br><span class=\"line\"></span><br><span class=\"line\">import com.fasterxml.jackson.core.JsonProcessingException;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.io.IOException;</span><br><span class=\"line\"></span><br><span class=\"line\">public interface TestJson &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    //测试 对象转换 json 字符串 -------------------------------------------------------------------------------------------</span><br><span class=\"line\">    void testStringListObjToString() throws JsonProcessingException;</span><br><span class=\"line\"></span><br><span class=\"line\">    void testStringMapObjToString() throws JsonProcessingException;</span><br><span class=\"line\"></span><br><span class=\"line\">    void testMyDataToString() throws JsonProcessingException;</span><br><span class=\"line\"></span><br><span class=\"line\">    void testMyDataListToString() throws JsonProcessingException;</span><br><span class=\"line\"></span><br><span class=\"line\">    void testMyDataMapToString() throws JsonProcessingException;</span><br><span class=\"line\"></span><br><span class=\"line\">    void testCyclicDataToString() throws JsonProcessingException;</span><br><span class=\"line\"></span><br><span class=\"line\">    void testCyclicDataListToString() throws JsonProcessingException;</span><br><span class=\"line\"></span><br><span class=\"line\">    void testCyclicDataMapToString() throws JsonProcessingException;</span><br><span class=\"line\"></span><br><span class=\"line\">    void testMyDataAndCyclicDataMapToString() throws JsonProcessingException;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    //json 字符串转换 对象测试方法------------------------------------------------------------------------------------------</span><br><span class=\"line\">    void zTestStringListObjStringToObj() throws IOException;</span><br><span class=\"line\"></span><br><span class=\"line\">    void zTestStringMapObjStringToObj() throws IOException;</span><br><span class=\"line\"></span><br><span class=\"line\">    void zTestMyDataStringToObj() throws IOException;</span><br><span class=\"line\"></span><br><span class=\"line\">    void zTestMyDataListStringToObj() throws IOException;</span><br><span class=\"line\"></span><br><span class=\"line\">    void zTestMyDataMapStringToObj() throws IOException;</span><br><span class=\"line\"></span><br><span class=\"line\">    void zTestCyclicDataStringToObj() throws IOException;</span><br><span class=\"line\"></span><br><span class=\"line\">    void zTestCyclicDataListStringToObj() throws IOException;</span><br><span class=\"line\"></span><br><span class=\"line\">    void zTestCyclicDataMapStringToObj() throws IOException;</span><br><span class=\"line\"></span><br><span class=\"line\">    void zTestMyDataAndCyclicDataMapStringToObj() throws IOException;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>测试用例的统一的抽象类 实现 统一的接口<br>对所有的测试用例实现做一个统一的配置抽象类<br>提供所有实现测试用例类的公共配置 、前置后置方法 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.ming.json;</span><br><span class=\"line\"></span><br><span class=\"line\">import junit.framework.TestCase;</span><br><span class=\"line\">import org.junit.After;</span><br><span class=\"line\">import org.junit.Before;</span><br><span class=\"line\">import org.slf4j.Logger;</span><br><span class=\"line\">import org.slf4j.LoggerFactory;</span><br><span class=\"line\"></span><br><span class=\"line\">public abstract class TestJsonAbstract extends TestCase implements TestJson &#123;</span><br><span class=\"line\">    //公共变量区</span><br><span class=\"line\">    protected static String stringList = null;</span><br><span class=\"line\">    protected static String stringMap = null;</span><br><span class=\"line\">    protected static String myData = null;</span><br><span class=\"line\">    protected static String myDataList = null;</span><br><span class=\"line\">    protected static String myDataMap = null;</span><br><span class=\"line\">    protected static String cyclicData = null;</span><br><span class=\"line\">    protected static String cyclicDataList = null;</span><br><span class=\"line\">    protected static String cyclicDataMap = null;</span><br><span class=\"line\">    protected static String myDataAndCyclicDataMap = null;</span><br><span class=\"line\">    //获取集合的大小</span><br><span class=\"line\">    protected int size = 10000;</span><br><span class=\"line\">    protected Long now = null;</span><br><span class=\"line\">    private Logger logger = LoggerFactory.getLogger(TestJsonAbstract.class);</span><br><span class=\"line\"></span><br><span class=\"line\">    @Before</span><br><span class=\"line\">    public void init() &#123;</span><br><span class=\"line\">        System.out.println(&quot;开始计算耗时。。。。。。&quot;);</span><br><span class=\"line\">        now = System.currentTimeMillis();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @After</span><br><span class=\"line\">    public void close() &#123;</span><br><span class=\"line\">        System.out.println(&quot;结束耗时,共耗时:&quot; + (System.currentTimeMillis() - now));</span><br><span class=\"line\">        logger.info(&quot;结束耗时,共耗时:&quot; + (System.currentTimeMillis() - now));</span><br><span class=\"line\">        now = null;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h5 id=\"测试用例-1\"><a href=\"#测试用例-1\" class=\"headerlink\" title=\"测试用例\"></a>测试用例</h5><ul>\n<li><p>fast json测试类<br>继承抽象类实现 统一的测试方法 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.ming.json;</span><br><span class=\"line\"></span><br><span class=\"line\">import com.alibaba.fastjson.JSON;</span><br><span class=\"line\">import org.junit.FixMethodOrder;</span><br><span class=\"line\">import org.junit.Test;</span><br><span class=\"line\">import org.junit.runners.MethodSorters;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.util.Map;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 测试fastJson 解析</span><br><span class=\"line\"> * 通过指定 test case 执行顺序 来保证 先调用obj转换String  然后在调用 string 转换obj</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @author ming</span><br><span class=\"line\"> * @date 2018-07-17 15:23:36</span><br><span class=\"line\"> */</span><br><span class=\"line\">@FixMethodOrder(value = MethodSorters.NAME_ASCENDING)</span><br><span class=\"line\">public class TestFastJson extends TestJsonAbstract &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void testStringListObjToString() &#123;</span><br><span class=\"line\">        stringList = JSON.toJSONString(DataUtils.getStringList(size));</span><br><span class=\"line\">        System.out.println(stringList);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void testStringMapObjToString() &#123;</span><br><span class=\"line\">        stringMap = JSON.toJSONString(DataUtils.getStringMap(size));</span><br><span class=\"line\">        System.out.println(stringMap);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void testMyDataToString() &#123;</span><br><span class=\"line\">        myData = JSON.toJSONString(DataUtils.getMyData());</span><br><span class=\"line\">        System.out.println(myData);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void testMyDataListToString() &#123;</span><br><span class=\"line\">        myDataList = JSON.toJSONString(DataUtils.getMyDataList(size));</span><br><span class=\"line\">        System.out.println(myDataList);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void testMyDataMapToString() &#123;</span><br><span class=\"line\">        myDataMap = JSON.toJSONString(DataUtils.getMyDataMap(size));</span><br><span class=\"line\">        System.out.println(myDataMap);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void testCyclicDataToString() &#123;</span><br><span class=\"line\">        cyclicData = JSON.toJSONString(DataUtils.getCyclicData());</span><br><span class=\"line\">        System.out.println(cyclicData);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void testCyclicDataListToString() &#123;</span><br><span class=\"line\">        cyclicDataList = JSON.toJSONString(DataUtils.getCyclicDataList(size));</span><br><span class=\"line\">        System.out.println(cyclicDataList);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void testCyclicDataMapToString() &#123;</span><br><span class=\"line\">        cyclicDataMap = JSON.toJSONString(DataUtils.getCyclicDataMap(size));</span><br><span class=\"line\">        System.out.println(cyclicDataMap);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void testMyDataAndCyclicDataMapToString() &#123;</span><br><span class=\"line\">        myDataAndCyclicDataMap = JSON.toJSONString(DataUtils.getMyDataAndCyclicDataMap(size));</span><br><span class=\"line\">        System.out.println(myDataAndCyclicDataMap);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void zTestStringListObjStringToObj() &#123;</span><br><span class=\"line\">        System.out.println(JSON.parseArray(stringList));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void zTestStringMapObjStringToObj() &#123;</span><br><span class=\"line\">        System.out.println(JSON.parseObject(stringMap, Map.class));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void zTestMyDataStringToObj() &#123;</span><br><span class=\"line\">        System.out.println(JSON.parseObject(myData, MyData.class));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void zTestMyDataListStringToObj() &#123;</span><br><span class=\"line\">        System.out.println(JSON.parseArray(myDataList, MyData.class));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void zTestMyDataMapStringToObj() &#123;</span><br><span class=\"line\">        System.out.println(JSON.parseObject(myDataMap, Map.class));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void zTestCyclicDataStringToObj() &#123;</span><br><span class=\"line\">        System.out.println(JSON.parseObject(cyclicData, CyclicData.class));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void zTestCyclicDataListStringToObj() &#123;</span><br><span class=\"line\">        System.out.println(JSON.parseArray(cyclicDataList, CyclicData.class));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void zTestCyclicDataMapStringToObj() &#123;</span><br><span class=\"line\">        System.out.println(JSON.parseObject(cyclicDataMap, Map.class));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void zTestMyDataAndCyclicDataMapStringToObj() &#123;</span><br><span class=\"line\">        System.out.println(JSON.parseObject(myDataAndCyclicDataMap, Map.class));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>jackson测试类<br>使用jackson 实现的统一的测试用例 继承抽象类</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.ming.json;</span><br><span class=\"line\"></span><br><span class=\"line\">import com.fasterxml.jackson.core.JsonProcessingException;</span><br><span class=\"line\">import com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class=\"line\">import org.junit.FixMethodOrder;</span><br><span class=\"line\">import org.junit.Test;</span><br><span class=\"line\">import org.junit.runners.MethodSorters;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.io.IOException;</span><br><span class=\"line\">import java.util.List;</span><br><span class=\"line\">import java.util.Map;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 测试解析 jackson</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @author ming</span><br><span class=\"line\"> * @date 2018-07-17 15:24:12</span><br><span class=\"line\"> */</span><br><span class=\"line\">@FixMethodOrder(value = MethodSorters.NAME_ASCENDING)</span><br><span class=\"line\">public class TestJackson extends TestJsonAbstract &#123;</span><br><span class=\"line\">    //获取 jackson 处理json的 mapper   可以通过setConfig 配置这个objectMapper</span><br><span class=\"line\">    private ObjectMapper objectMapper = new ObjectMapper();</span><br><span class=\"line\"></span><br><span class=\"line\">    public void init1() &#123;</span><br><span class=\"line\">        //DeserializationConfig,SerializationConfig</span><br><span class=\"line\">        //配置 objectMapper 编解码 配置</span><br><span class=\"line\">        //objectMapper.setConfig()</span><br><span class=\"line\"></span><br><span class=\"line\">        //设置序列化和反序列化时候的配置</span><br><span class=\"line\">        //objectMapper.configure();</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void testStringListObjToString() throws JsonProcessingException &#123;</span><br><span class=\"line\">        stringList = objectMapper.writeValueAsString(DataUtils.getStringList(size));</span><br><span class=\"line\">        System.out.println(stringList);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void testStringMapObjToString() throws JsonProcessingException &#123;</span><br><span class=\"line\">        stringMap = objectMapper.writeValueAsString(DataUtils.getStringMap(size));</span><br><span class=\"line\">        System.out.println(stringMap);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void testMyDataToString() throws JsonProcessingException &#123;</span><br><span class=\"line\">        myData = objectMapper.writeValueAsString(DataUtils.getMyData());</span><br><span class=\"line\">        System.out.println(myData);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void testMyDataListToString() throws JsonProcessingException &#123;</span><br><span class=\"line\">        myDataList = objectMapper.writeValueAsString(DataUtils.getMyDataList(size));</span><br><span class=\"line\">        System.out.println(myDataList);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void testMyDataMapToString() throws JsonProcessingException &#123;</span><br><span class=\"line\">        myDataMap = objectMapper.writeValueAsString(DataUtils.getMyDataMap(size));</span><br><span class=\"line\">        System.out.println(myDataMap);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void testCyclicDataToString() throws JsonProcessingException &#123;</span><br><span class=\"line\">        cyclicData = objectMapper.writeValueAsString(DataUtils.getCyclicData());</span><br><span class=\"line\">        System.out.println(cyclicData);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void testCyclicDataListToString() throws JsonProcessingException &#123;</span><br><span class=\"line\">        cyclicDataList = objectMapper.writeValueAsString(DataUtils.getCyclicDataList(size));</span><br><span class=\"line\">        System.out.println(cyclicDataList);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void testCyclicDataMapToString() throws JsonProcessingException &#123;</span><br><span class=\"line\">        cyclicDataMap = objectMapper.writeValueAsString(DataUtils.getCyclicDataMap(size));</span><br><span class=\"line\">        System.out.println(cyclicDataMap);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void testMyDataAndCyclicDataMapToString() throws JsonProcessingException &#123;</span><br><span class=\"line\">        myDataAndCyclicDataMap = objectMapper.writeValueAsString(DataUtils.getMyDataAndCyclicDataMap(size));</span><br><span class=\"line\">        System.out.println(myDataAndCyclicDataMap);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void zTestStringListObjStringToObj() throws IOException &#123;</span><br><span class=\"line\">        System.out.println(objectMapper.readValue(stringList, List.class));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void zTestStringMapObjStringToObj() throws IOException &#123;</span><br><span class=\"line\">        System.out.println(objectMapper.readValue(stringMap, Map.class));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void zTestMyDataStringToObj() throws IOException &#123;</span><br><span class=\"line\">        System.out.println(objectMapper.readValue(myData, MyData.class));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void zTestMyDataListStringToObj() throws IOException &#123;</span><br><span class=\"line\">        System.out.println(objectMapper.readValue(myDataList, List.class));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void zTestMyDataMapStringToObj() throws IOException &#123;</span><br><span class=\"line\">        System.out.println(objectMapper.readValue(myDataMap, Map.class));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void zTestCyclicDataStringToObj() throws IOException &#123;</span><br><span class=\"line\">        System.out.println(objectMapper.readValue(cyclicData, CyclicData.class));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void zTestCyclicDataListStringToObj() throws IOException &#123;</span><br><span class=\"line\">        System.out.println(objectMapper.readValue(cyclicDataList, List.class));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void zTestCyclicDataMapStringToObj() throws IOException &#123;</span><br><span class=\"line\">        System.out.println(objectMapper.readValue(cyclicDataMap, Map.class));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void zTestMyDataAndCyclicDataMapStringToObj() throws IOException &#123;</span><br><span class=\"line\">        System.out.println(objectMapper.readValue(myDataAndCyclicDataMap, Map.class));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>gson测试类<br>gson实现统一的测试类 继承抽象类 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.ming.json;</span><br><span class=\"line\"></span><br><span class=\"line\">import com.google.gson.Gson;</span><br><span class=\"line\">import com.google.gson.GsonBuilder;</span><br><span class=\"line\">import org.junit.FixMethodOrder;</span><br><span class=\"line\">import org.junit.Test;</span><br><span class=\"line\">import org.junit.runners.MethodSorters;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.util.List;</span><br><span class=\"line\">import java.util.Map;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 测试gson 解析</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @author ming</span><br><span class=\"line\"> * @date 2018-07-17 15:23:58</span><br><span class=\"line\"> */</span><br><span class=\"line\">@FixMethodOrder(MethodSorters.NAME_ASCENDING)</span><br><span class=\"line\">public class TestGson extends TestJsonAbstract &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private Gson gson = new GsonBuilder().create();</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void testStringListObjToString() &#123;</span><br><span class=\"line\">        stringList = gson.toJson(DataUtils.getStringList(size));</span><br><span class=\"line\">        System.out.println(stringList);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void testStringMapObjToString() &#123;</span><br><span class=\"line\">        stringMap = gson.toJson(DataUtils.getStringMap(size));</span><br><span class=\"line\">        System.out.println(stringMap);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void testMyDataToString() &#123;</span><br><span class=\"line\">        myData = gson.toJson(DataUtils.getMyData());</span><br><span class=\"line\">        System.out.println(myData);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void testMyDataListToString() &#123;</span><br><span class=\"line\">        myDataList = gson.toJson(DataUtils.getMyDataList(size));</span><br><span class=\"line\">        System.out.println(myDataList);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void testMyDataMapToString() &#123;</span><br><span class=\"line\">        myDataMap = gson.toJson(DataUtils.getMyDataMap(size));</span><br><span class=\"line\">        System.out.println(myDataMap);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void testCyclicDataToString() &#123;</span><br><span class=\"line\">        cyclicData = gson.toJson(DataUtils.getCyclicData());</span><br><span class=\"line\">        System.out.println(cyclicData);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void testCyclicDataListToString() &#123;</span><br><span class=\"line\">        cyclicDataList = gson.toJson(DataUtils.getCyclicDataList(size));</span><br><span class=\"line\">        System.out.println(cyclicDataList);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void testCyclicDataMapToString() &#123;</span><br><span class=\"line\">        cyclicDataMap = gson.toJson(DataUtils.getCyclicDataMap(size));</span><br><span class=\"line\">        System.out.println(cyclicDataMap);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void testMyDataAndCyclicDataMapToString() &#123;</span><br><span class=\"line\">        myDataAndCyclicDataMap = gson.toJson(DataUtils.getMyDataAndCyclicDataMap(size));</span><br><span class=\"line\">        System.out.println(myDataAndCyclicDataMap);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void zTestStringListObjStringToObj() &#123;</span><br><span class=\"line\">        System.out.println(gson.fromJson(stringList, List.class));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void zTestStringMapObjStringToObj() &#123;</span><br><span class=\"line\">        System.out.println(gson.fromJson(stringMap, Map.class));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void zTestMyDataStringToObj() &#123;</span><br><span class=\"line\">        System.out.println(gson.fromJson(myData, MyData.class));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void zTestMyDataListStringToObj() &#123;</span><br><span class=\"line\">        System.out.println(gson.fromJson(myDataList, List.class));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void zTestMyDataMapStringToObj() &#123;</span><br><span class=\"line\">        System.out.println(gson.fromJson(myDataMap, Map.class));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void zTestCyclicDataStringToObj() &#123;</span><br><span class=\"line\">        System.out.println(gson.fromJson(cyclicData, CyclicData.class));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void zTestCyclicDataListStringToObj() &#123;</span><br><span class=\"line\">        System.out.println(gson.fromJson(cyclicDataList, List.class));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void zTestCyclicDataMapStringToObj() &#123;</span><br><span class=\"line\">        System.out.println(gson.fromJson(cyclicDataMap, Map.class));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void zTestMyDataAndCyclicDataMapStringToObj() &#123;</span><br><span class=\"line\">        System.out.println(gson.fromJson(myDataAndCyclicDataMap, Map.class));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>genson测试类<br>genson实现的测试类 继承 抽象类 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.ming.json;</span><br><span class=\"line\"></span><br><span class=\"line\">import com.owlike.genson.Genson;</span><br><span class=\"line\">import org.junit.FixMethodOrder;</span><br><span class=\"line\">import org.junit.Test;</span><br><span class=\"line\">import org.junit.runners.MethodSorters;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.util.List;</span><br><span class=\"line\">import java.util.Map;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 测试使用genson</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @author ming</span><br><span class=\"line\"> * @date 2018-07-17 15:24:33</span><br><span class=\"line\"> */</span><br><span class=\"line\">@FixMethodOrder(MethodSorters.NAME_ASCENDING)</span><br><span class=\"line\">public class TestGenson extends TestJsonAbstract &#123;</span><br><span class=\"line\">    private Genson genson = new Genson();</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void testStringListObjToString() &#123;</span><br><span class=\"line\">        stringList = genson.serialize(DataUtils.getStringList(size));</span><br><span class=\"line\">        System.out.println(stringList);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void testStringMapObjToString() &#123;</span><br><span class=\"line\">        stringMap = genson.serialize(DataUtils.getStringMap(size));</span><br><span class=\"line\">        System.out.println(stringMap);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void testMyDataToString() &#123;</span><br><span class=\"line\">        myData = genson.serialize(DataUtils.getMyData());</span><br><span class=\"line\">        System.out.println(myData);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void testMyDataListToString() &#123;</span><br><span class=\"line\">        myDataList = genson.serialize(DataUtils.getMyDataList(size));</span><br><span class=\"line\">        System.out.println(myDataList);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void testMyDataMapToString() &#123;</span><br><span class=\"line\">        myDataMap = genson.serialize(DataUtils.getMyDataMap(size));</span><br><span class=\"line\">        System.out.println(myDataMap);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void testCyclicDataToString() &#123;</span><br><span class=\"line\">        cyclicData = genson.serialize(DataUtils.getCyclicData());</span><br><span class=\"line\">        System.out.println(cyclicData);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void testCyclicDataListToString() &#123;</span><br><span class=\"line\">        cyclicDataList = genson.serialize(DataUtils.getCyclicDataList(size));</span><br><span class=\"line\">        System.out.println(cyclicDataList);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void testCyclicDataMapToString() &#123;</span><br><span class=\"line\">        cyclicDataMap = genson.serialize(DataUtils.getCyclicDataMap(size));</span><br><span class=\"line\">        System.out.println(cyclicDataMap);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void testMyDataAndCyclicDataMapToString() &#123;</span><br><span class=\"line\">        myDataAndCyclicDataMap = genson.serialize(DataUtils.getMyDataAndCyclicDataMap(size));</span><br><span class=\"line\">        System.out.println(myDataAndCyclicDataMap);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void zTestStringListObjStringToObj() &#123;</span><br><span class=\"line\">        System.out.println(genson.deserialize(stringList, List.class));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void zTestStringMapObjStringToObj() &#123;</span><br><span class=\"line\">        System.out.println(genson.deserialize(stringMap, Map.class));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void zTestMyDataStringToObj() &#123;</span><br><span class=\"line\">        System.out.println(genson.deserialize(myData, MyData.class));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void zTestMyDataListStringToObj() &#123;</span><br><span class=\"line\">        System.out.println(genson.deserialize(myDataList, List.class));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void zTestMyDataMapStringToObj() &#123;</span><br><span class=\"line\">        System.out.println(genson.deserialize(myDataMap, Map.class));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void zTestCyclicDataStringToObj() &#123;</span><br><span class=\"line\">        System.out.println(genson.deserialize(cyclicData, CyclicData.class));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void zTestCyclicDataListStringToObj() &#123;</span><br><span class=\"line\">        System.out.println(genson.deserialize(cyclicDataList, List.class));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void zTestCyclicDataMapStringToObj() &#123;</span><br><span class=\"line\">        System.out.println(genson.deserialize(cyclicDataMap, Map.class));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void zTestMyDataAndCyclicDataMapStringToObj() &#123;</span><br><span class=\"line\">        System.out.println(genson.deserialize(myDataAndCyclicDataMap, Map.class));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>所有的测试类实现 统一进行批量测试 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.ming.json;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">import junit.framework.TestCase;</span><br><span class=\"line\">import junit.framework.TestSuite;</span><br><span class=\"line\">import junit.textui.TestRunner;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.util.ArrayList;</span><br><span class=\"line\">import java.util.HashMap;</span><br><span class=\"line\">import java.util.List;</span><br><span class=\"line\">import java.util.Map;</span><br><span class=\"line\">import java.util.stream.Collectors;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 聚合多个测试用例 在一起测试</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @author ming</span><br><span class=\"line\"> * @date 2018-07-17 17:31:55</span><br><span class=\"line\"> */</span><br><span class=\"line\">//@RunWith(Suite.class)</span><br><span class=\"line\">//@Suite.SuiteClasses(&#123;TestJackson.class, TestGson.class,  TestGenson.class,TestFastJson.class&#125;)</span><br><span class=\"line\">public class AllTest &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        //执行测试用例次数 通过增大执行次数 取平均数 减小误差</span><br><span class=\"line\">        int size = 10000;</span><br><span class=\"line\">        List&lt;Map&lt;String, Object&gt;&gt; result = new ArrayList&lt;&gt;();</span><br><span class=\"line\">        long now = System.currentTimeMillis();</span><br><span class=\"line\">        result.add(get(TestJackson.class, size));</span><br><span class=\"line\">        result.add(get(TestGson.class, size));</span><br><span class=\"line\">        result.add(get(TestGenson.class, size));</span><br><span class=\"line\">        result.add(get(TestFastJson.class, size));</span><br><span class=\"line\">        System.out.println(&quot;总耗时:&quot; + (System.currentTimeMillis() - now) + &quot;ms&quot;);</span><br><span class=\"line\">        System.out.println(&quot;明细信息-------------------------------&quot;);</span><br><span class=\"line\">        result.forEach(f -&gt; &#123;</span><br><span class=\"line\">            System.out.println(&quot;执行的测试用例&quot; + f.get(&quot;class&quot;));</span><br><span class=\"line\">            System.out.println(&quot;执行平均耗时&quot; + f.get(&quot;avgTime&quot;) + &quot;ms&quot;);</span><br><span class=\"line\">            System.out.println(&quot;每次执行的耗时详情&quot; + f.get(&quot;testList&quot;));</span><br><span class=\"line\">            System.out.println(&quot;--------------------------------&quot;);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private static Map&lt;String, Object&gt; get(Class&lt;? extends TestCase&gt; tClass, int size) &#123;</span><br><span class=\"line\">        TestSuite testSuite = new TestSuite();</span><br><span class=\"line\">        testSuite.addTestSuite(tClass);</span><br><span class=\"line\">        long now;</span><br><span class=\"line\">        List&lt;Long&gt; list = new ArrayList&lt;&gt;();</span><br><span class=\"line\">        for (int i = 0; i &lt; size; i++) &#123;</span><br><span class=\"line\">            now = System.currentTimeMillis();</span><br><span class=\"line\">            TestRunner.run(testSuite);</span><br><span class=\"line\">            list.add(System.currentTimeMillis() - now);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Map&lt;String, Object&gt; map = new HashMap&lt;&gt;();</span><br><span class=\"line\">        map.put(&quot;class&quot;, tClass);</span><br><span class=\"line\">        map.put(&quot;testList&quot;, list);</span><br><span class=\"line\">        map.put(&quot;avgTime&quot;, list.stream().collect(Collectors.averagingLong(a -&gt; a)));</span><br><span class=\"line\">        return map;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>开启 AllTest类中的main方法即进行所有的模块的测试 </p>\n<p>其中一次测试结果记录<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">总耗时:3627599ms</span><br><span class=\"line\">明细信息-------------------------------</span><br><span class=\"line\">执行的测试用例class com.ming.json.TestJackson</span><br><span class=\"line\">执行平均耗时84.3811ms</span><br><span class=\"line\">每次执行的耗时详情[439, 215, 184, 183, 176, 198。。。。。]</span><br><span class=\"line\">--------------------------------</span><br><span class=\"line\">执行的测试用例class com.ming.json.TestGson</span><br><span class=\"line\">执行平均耗时94.915ms</span><br><span class=\"line\">每次执行的耗时详情[299, 126, 123, 113, 95, 109, 。。。。]</span><br><span class=\"line\">--------------------------------</span><br><span class=\"line\">执行的测试用例class com.ming.json.TestGenson</span><br><span class=\"line\">执行平均耗时99.3964ms</span><br><span class=\"line\">每次执行的耗时详情[247, 144, 115, 98, 102, 85, 。。。。。]</span><br><span class=\"line\">--------------------------------</span><br><span class=\"line\">执行的测试用例class com.ming.json.TestFastJson</span><br><span class=\"line\">执行平均耗时84.0026ms</span><br><span class=\"line\">每次执行的耗时详情[263, 143, 94, 104, 69, 72, 。。。。。]</span><br><span class=\"line\">--------------------------------</span><br></pre></td></tr></table></figure><p></p>\n<h4 id=\"jackson-gson针对泛型的特殊处理\"><a href=\"#jackson-gson针对泛型的特殊处理\" class=\"headerlink\" title=\"jackson gson针对泛型的特殊处理\"></a>jackson gson针对泛型的特殊处理</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.ming.json;</span><br><span class=\"line\"></span><br><span class=\"line\">import com.fasterxml.jackson.core.type.TypeReference;</span><br><span class=\"line\">import com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class=\"line\">import com.google.common.collect.Maps;</span><br><span class=\"line\">import com.google.common.reflect.TypeToken;</span><br><span class=\"line\">import com.google.gson.Gson;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.io.IOException;</span><br><span class=\"line\">import java.util.Arrays;</span><br><span class=\"line\">import java.util.List;</span><br><span class=\"line\">import java.util.Map;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 测试泛型类型 json转换</span><br><span class=\"line\"> * 引用地址:https://www.jianshu.com/p/ca03c2fe36e3</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @author ming</span><br><span class=\"line\"> * @date 2018-07-19 14:03:12</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class TestT &#123;</span><br><span class=\"line\">    private static ObjectMapper mapper = new ObjectMapper();</span><br><span class=\"line\">    private static Gson gson = new Gson();</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) throws IOException &#123;</span><br><span class=\"line\">        Map&lt;String, List&lt;Long&gt;&gt; map = Maps.newHashMap();</span><br><span class=\"line\">        map.put(&quot;one&quot;, Arrays.asList(10001L, 10002L, 10003L, 10004L));</span><br><span class=\"line\">        map.put(&quot;two&quot;, Arrays.asList(20001L, 20002L, 20003L, 20004L));</span><br><span class=\"line\">        map.put(&quot;three&quot;, Arrays.asList(30001L, 30002L, 30003L, 30004L));</span><br><span class=\"line\">        map.put(&quot;four&quot;, Arrays.asList(40001L, 40002L, 40003L, 40004L));</span><br><span class=\"line\"></span><br><span class=\"line\">        String json = new Gson().toJson(map);</span><br><span class=\"line\">        System.err.println(&quot;=======================错误示范=====================&quot;);</span><br><span class=\"line\">        //Gson</span><br><span class=\"line\">        Map&lt;String, List&lt;Long&gt;&gt; mapResult = gson.fromJson(json, Map.class);</span><br><span class=\"line\">        System.out.println(&quot;通过Gson转换...&quot;);</span><br><span class=\"line\">//      printType(mapResult);</span><br><span class=\"line\">        System.out.println(mapResult);</span><br><span class=\"line\">        //Json</span><br><span class=\"line\">        Map&lt;String, List&lt;Long&gt;&gt; jsonMapResult = mapper.readValue(json, Map.class);</span><br><span class=\"line\">        System.out.println(&quot;通过Jackson转换...&quot;);</span><br><span class=\"line\">//      printType(jsonMapResult);</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(jsonMapResult);</span><br><span class=\"line\">        System.out.println(&quot;=======================正确做法=====================&quot;);</span><br><span class=\"line\">        //Gson</span><br><span class=\"line\">        Map&lt;String, List&lt;Long&gt;&gt; mapResult1 = gson.fromJson(json, new TypeToken&lt;Map&lt;String, List&lt;Long&gt;&gt;&gt;() &#123;</span><br><span class=\"line\">        &#125;.getType());</span><br><span class=\"line\">        System.out.println(&quot;通过Gson转换...&quot;);</span><br><span class=\"line\">        printType(mapResult1);</span><br><span class=\"line\">        System.out.println(mapResult1);</span><br><span class=\"line\">        //Json</span><br><span class=\"line\">        ObjectMapper mapper = new ObjectMapper();</span><br><span class=\"line\">        Map&lt;String, List&lt;Long&gt;&gt; jsonMapResult1 = mapper.readValue(json, new TypeReference&lt;Map&lt;String, List&lt;Long&gt;&gt;&gt;() &#123;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        System.out.println(&quot;通过Jackson转换...&quot;);</span><br><span class=\"line\">        printType(jsonMapResult1);</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(jsonMapResult1);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void printType(Map&lt;String, List&lt;Long&gt;&gt; map) &#123;</span><br><span class=\"line\">        for (Map.Entry&lt;String, List&lt;Long&gt;&gt; entry : map.entrySet()) &#123;</span><br><span class=\"line\">            System.out.println(&quot;key 类型:&quot; + entry.getKey().getClass() + &quot;, value类型:&quot;</span><br><span class=\"line\">                    + entry.getValue().getClass() + &quot;, List中元素类型&quot; + entry.getValue().get(0).getClass());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><p>java处理json相关的操作 工具包是很多的 但是用的多的也就上面说的几种<br>对于简单并且要求速度的对象和json转换 直接使用fast json即可 不过有时候 fast json 会坑爹<br>其他情况使用jackson 完全可以胜任   gson也行 不过 我更加喜欢jackson  毕竟 很多框架就已经引用了jackson  跟着大佬走肯定没错的<br>带有泛型的 一定要用jackson或者gson 去使用  否则可能会无法反序列化成想要的类型  特别是fast json 只能处理第一层的泛型 复杂的泛型直接gg</p>","site":{"data":{}},"excerpt":"","more":"<h4 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h4><p>最近使用基于http作为rpc调用协议的时候 由于选择使用json来传递数据<br>不得不做一波常用的json解析框架的性能、稳定性、可定制性、使用难度、对复杂对象的支持程度等等方面来对比一下<br>只针对常用的几种 json解析框架对比 有些小众在某些方面很优秀的不再对比之列</p><h4 id=\"对比\"><a href=\"#对比\" class=\"headerlink\" title=\"对比\"></a>对比</h4><table><thead><tr><th style=\"text-align:left\">名称</th><th style=\"text-align:left\">使用方式</th><th style=\"text-align:left\">可配置性</th><th style=\"text-align:left\">优点</th><th>缺点</th><th>备注</th></tr></thead><tbody><tr><td style=\"text-align:left\">fast json</td><td style=\"text-align:left\">JSON.toJSONString、JSON.parseObject</td><td style=\"text-align:left\">调用toJSONString、parseObject方法的重载方法去配置</td><td style=\"text-align:left\">使用简单、简单的转换可以直接使用静态方法使用</td><td>对于复杂对象处理非常弱、对于泛型处理非常弱</td><td>处理简单的对象与json字符串转换的时候 比较适用</td></tr><tr><td style=\"text-align:left\">jackson</td><td style=\"text-align:left\">获取objectMapper对象 通过writeValueAsString()、 readValue()方式互相转换</td><td style=\"text-align:left\">提供DeserializationConfig、SerializationConfig各种配置</td><td style=\"text-align:left\">功能完善、对各种复杂的情况都能使用、对于泛型支持较为完善</td><td>功能太多导致使用复杂、配置复杂、需要new</td><td>spring等常用框架中使用的就是jackson 即保证速度也保证适应于各种复杂情况</td><td>处理复杂的对象 又不想引入gson 那么直接使用jackson 这个速度和fastjson差不多但是能处理很多复杂的功能</td></tr><tr><td style=\"text-align:left\">gson</td><td style=\"text-align:left\">获取Gson对象 通过toJson()、fromJson()方法互相转换</td><td style=\"text-align:left\">提供GsonBuilder 去配置不同处理方式的的gson实例</td><td style=\"text-align:left\">功能完善、对泛型支持较为完善</td><td>速度和jackson和fastjson相比 略慢、使用的时候 要专门引用gson 依赖、需要一个实例对象</td><td>用于处理复杂的对象和json字符串相互转换 不过速度比不上jackson 不过也够用了</td></tr><tr><td style=\"text-align:left\">genson</td><td style=\"text-align:left\">获取genson对象 通过serialize()、deserialize()来互相转换</td><td style=\"text-align:left\">提供GensonBuilder 去配置不同的处理方式的 gensonBuilder</td><td style=\"text-align:left\">对泛型支持较为完善</td><td>需要实例对象、速度略慢</td><td>这个用的少 如果要对简单对象转换直接fastjson、复杂的又jackson、gson 这个看不到什么特殊的厉害的地方</td></tr></tbody></table><h4 id=\"测试用例\"><a href=\"#测试用例\" class=\"headerlink\" title=\"测试用例\"></a>测试用例</h4><h5 id=\"基础类\"><a href=\"#基础类\" class=\"headerlink\" title=\"基础类\"></a>基础类</h5><ul><li><p>简单对象<br>一个只有简单属性的 类</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.ming.json;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.math.BigDecimal;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 普通对象</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @author ming</span><br><span class=\"line\"> * @date 2018-07-17 16:11:05</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class MyData &#123;</span><br><span class=\"line\">    private Integer id;</span><br><span class=\"line\">    private String name;</span><br><span class=\"line\">    private BigDecimal age;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public String toString() &#123;</span><br><span class=\"line\">        return &quot;MyData&#123;&quot; +</span><br><span class=\"line\">                &quot;id=&quot; + id +</span><br><span class=\"line\">                &quot;, name=&apos;&quot; + name + &apos;\\&apos;&apos; +</span><br><span class=\"line\">                &quot;, age=&quot; + age +</span><br><span class=\"line\">                &apos;&#125;&apos;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public Integer getId() &#123;</span><br><span class=\"line\">        return id;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void setId(Integer id) &#123;</span><br><span class=\"line\">        this.id = id;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public String getName() &#123;</span><br><span class=\"line\">        return name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void setName(String name) &#123;</span><br><span class=\"line\">        this.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public BigDecimal getAge() &#123;</span><br><span class=\"line\">        return age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void setAge(BigDecimal age) &#123;</span><br><span class=\"line\">        this.age = age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>复杂对象<br>一个稍微复杂点的类 包含属性是对象的这种类 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.ming.json;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 内嵌对象的对象</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @author ming</span><br><span class=\"line\"> * @date 2018-07-17 16:11:15</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class CyclicData &#123;</span><br><span class=\"line\">    private Integer id;</span><br><span class=\"line\">    private CyclicData cyclicData;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public String toString() &#123;</span><br><span class=\"line\">        return &quot;CyclicData&#123;&quot; +</span><br><span class=\"line\">                &quot;id=&quot; + id +</span><br><span class=\"line\">                &quot;, cyclicData=&quot; + cyclicData +</span><br><span class=\"line\">                &apos;&#125;&apos;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public Integer getId() &#123;</span><br><span class=\"line\">        return id;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void setId(Integer id) &#123;</span><br><span class=\"line\">        this.id = id;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public CyclicData getCyclicData() &#123;</span><br><span class=\"line\">        return cyclicData;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void setCyclicData(CyclicData cyclicData) &#123;</span><br><span class=\"line\">        this.cyclicData = cyclicData;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>DataUtils<br>构建统一的测试数据的工具类 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.ming.json;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.math.BigDecimal;</span><br><span class=\"line\">import java.util.ArrayList;</span><br><span class=\"line\">import java.util.HashMap;</span><br><span class=\"line\">import java.util.List;</span><br><span class=\"line\">import java.util.Map;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 数据工具类 用来获取数据 提供给各种json框架解析</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @author ming</span><br><span class=\"line\"> * @date 2018-07-17 15:30:30</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class DataUtils &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 获取String list</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param size</span><br><span class=\"line\">     * @author ming</span><br><span class=\"line\">     * @date 2018-07-17 16:08:50</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static List&lt;String&gt; getStringList(int size) &#123;</span><br><span class=\"line\">        List&lt;String&gt; resultList = new ArrayList&lt;&gt;();</span><br><span class=\"line\">        for (int i = 0; i &lt; size; i++) &#123;</span><br><span class=\"line\">            resultList.add(&quot;test&quot; + i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return resultList;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 获取String  String map</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param size</span><br><span class=\"line\">     * @author ming</span><br><span class=\"line\">     * @date 2018-07-17 16:09:04</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static Map&lt;String, String&gt; getStringMap(int size) &#123;</span><br><span class=\"line\">        Map&lt;String, String&gt; resultMap = new HashMap&lt;&gt;();</span><br><span class=\"line\">        for (int i = 0; i &lt; size; i++) &#123;</span><br><span class=\"line\">            resultMap.put(&quot;k&quot; + i, &quot;v&quot; + i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return resultMap;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 获取 自定义对象</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @author ming</span><br><span class=\"line\">     * @date 2018-07-17 16:09:20</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static MyData getMyData() &#123;</span><br><span class=\"line\">        MyData myData = new MyData();</span><br><span class=\"line\">        myData.setId(1);</span><br><span class=\"line\">        myData.setName(&quot;ming&quot;);</span><br><span class=\"line\">        myData.setAge(BigDecimal.TEN);</span><br><span class=\"line\">        return myData;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 获取自定义对象 list</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param size</span><br><span class=\"line\">     * @author ming</span><br><span class=\"line\">     * @date 2018-07-17 16:09:30</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static List&lt;MyData&gt; getMyDataList(int size) &#123;</span><br><span class=\"line\">        List&lt;MyData&gt; resultList = new ArrayList&lt;&gt;();</span><br><span class=\"line\">        for (int i = 0; i &lt; size; i++) &#123;</span><br><span class=\"line\">            MyData tmp = new MyData();</span><br><span class=\"line\">            tmp.setId(i);</span><br><span class=\"line\">            tmp.setName(&quot;ming&quot; + i);</span><br><span class=\"line\">            tmp.setAge(BigDecimal.valueOf(i));</span><br><span class=\"line\">            resultList.add(tmp);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return resultList;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 获取String  自定义对象 map</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param size</span><br><span class=\"line\">     * @author ming</span><br><span class=\"line\">     * @date 2018-07-17 16:09:47</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static Map&lt;String, MyData&gt; getMyDataMap(int size) &#123;</span><br><span class=\"line\">        Map&lt;String, MyData&gt; resultMap = new HashMap&lt;&gt;();</span><br><span class=\"line\">        for (int i = 0; i &lt; size; i++) &#123;</span><br><span class=\"line\">            MyData tmp = new MyData();</span><br><span class=\"line\">            tmp.setId(i);</span><br><span class=\"line\">            tmp.setName(&quot;ming&quot; + i);</span><br><span class=\"line\">            tmp.setAge(BigDecimal.valueOf(i));</span><br><span class=\"line\">            resultMap.put(&quot;k&quot; + i, tmp);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return resultMap;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 获取内嵌对象的对象</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @author ming</span><br><span class=\"line\">     * @date 2018-07-17 16:10:03</span><br><span class=\"line\">     */</span><br><span class=\"line\"></span><br><span class=\"line\">    public static CyclicData getCyclicData() &#123;</span><br><span class=\"line\">        CyclicData result = new CyclicData();</span><br><span class=\"line\">        result.setId(1);</span><br><span class=\"line\"></span><br><span class=\"line\">        CyclicData tmp = new CyclicData();</span><br><span class=\"line\">        tmp.setId(2);</span><br><span class=\"line\">        result.setCyclicData(tmp);</span><br><span class=\"line\"></span><br><span class=\"line\">        return result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 获取内嵌对象的对象 的list</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param size</span><br><span class=\"line\">     * @author ming</span><br><span class=\"line\">     * @date 2018-07-17 16:10:17</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static List&lt;CyclicData&gt; getCyclicDataList(int size) &#123;</span><br><span class=\"line\">        List&lt;CyclicData&gt; resultList = new ArrayList&lt;&gt;();</span><br><span class=\"line\">        for (int i = 0; i &lt; size; i++) &#123;</span><br><span class=\"line\">            CyclicData tmp = new CyclicData();</span><br><span class=\"line\">            tmp.setId(i);</span><br><span class=\"line\"></span><br><span class=\"line\">            CyclicData t = new CyclicData();</span><br><span class=\"line\">            tmp.setId(i * 1000);</span><br><span class=\"line\">            tmp.setCyclicData(t);</span><br><span class=\"line\">            resultList.add(tmp);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return resultList;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 获取内嵌对象的对象的map</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param size</span><br><span class=\"line\">     * @author ming</span><br><span class=\"line\">     * @date 2018-07-17 16:10:32</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static Map&lt;String, CyclicData&gt; getCyclicDataMap(int size) &#123;</span><br><span class=\"line\">        Map&lt;String, CyclicData&gt; resultMap = new HashMap&lt;&gt;();</span><br><span class=\"line\">        for (int i = 0; i &lt; size; i++) &#123;</span><br><span class=\"line\">            CyclicData tmp = new CyclicData();</span><br><span class=\"line\">            tmp.setId(i);</span><br><span class=\"line\"></span><br><span class=\"line\">            CyclicData t = new CyclicData();</span><br><span class=\"line\">            tmp.setId(i * 1000);</span><br><span class=\"line\">            tmp.setCyclicData(t);</span><br><span class=\"line\">            resultMap.put(&quot;k&quot; + i, tmp);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return resultMap;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 获取 kv 都是对象的map</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param size</span><br><span class=\"line\">     * @author ming</span><br><span class=\"line\">     * @date 2018-07-17 16:10:49</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static Map&lt;MyData, CyclicData&gt; getMyDataAndCyclicDataMap(int size) &#123;</span><br><span class=\"line\">        Map&lt;MyData, CyclicData&gt; resultMap = new HashMap&lt;&gt;();</span><br><span class=\"line\">        for (int i = 0; i &lt; size; i++) &#123;</span><br><span class=\"line\">            CyclicData tmp = new CyclicData();</span><br><span class=\"line\">            tmp.setId(i);</span><br><span class=\"line\"></span><br><span class=\"line\">            CyclicData t = new CyclicData();</span><br><span class=\"line\">            tmp.setId(i * 1000);</span><br><span class=\"line\">            tmp.setCyclicData(t);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">            MyData k = new MyData();</span><br><span class=\"line\">            k.setId(i);</span><br><span class=\"line\">            k.setName(&quot;ming&quot; + i);</span><br><span class=\"line\">            k.setAge(BigDecimal.valueOf(i));</span><br><span class=\"line\"></span><br><span class=\"line\">            resultMap.put(k, tmp);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return resultMap;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>测试用例的统一接口<br>定义 各种解析框架 的测试用例的格式 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.ming.json;</span><br><span class=\"line\"></span><br><span class=\"line\">import com.fasterxml.jackson.core.JsonProcessingException;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.io.IOException;</span><br><span class=\"line\"></span><br><span class=\"line\">public interface TestJson &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    //测试 对象转换 json 字符串 -------------------------------------------------------------------------------------------</span><br><span class=\"line\">    void testStringListObjToString() throws JsonProcessingException;</span><br><span class=\"line\"></span><br><span class=\"line\">    void testStringMapObjToString() throws JsonProcessingException;</span><br><span class=\"line\"></span><br><span class=\"line\">    void testMyDataToString() throws JsonProcessingException;</span><br><span class=\"line\"></span><br><span class=\"line\">    void testMyDataListToString() throws JsonProcessingException;</span><br><span class=\"line\"></span><br><span class=\"line\">    void testMyDataMapToString() throws JsonProcessingException;</span><br><span class=\"line\"></span><br><span class=\"line\">    void testCyclicDataToString() throws JsonProcessingException;</span><br><span class=\"line\"></span><br><span class=\"line\">    void testCyclicDataListToString() throws JsonProcessingException;</span><br><span class=\"line\"></span><br><span class=\"line\">    void testCyclicDataMapToString() throws JsonProcessingException;</span><br><span class=\"line\"></span><br><span class=\"line\">    void testMyDataAndCyclicDataMapToString() throws JsonProcessingException;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    //json 字符串转换 对象测试方法------------------------------------------------------------------------------------------</span><br><span class=\"line\">    void zTestStringListObjStringToObj() throws IOException;</span><br><span class=\"line\"></span><br><span class=\"line\">    void zTestStringMapObjStringToObj() throws IOException;</span><br><span class=\"line\"></span><br><span class=\"line\">    void zTestMyDataStringToObj() throws IOException;</span><br><span class=\"line\"></span><br><span class=\"line\">    void zTestMyDataListStringToObj() throws IOException;</span><br><span class=\"line\"></span><br><span class=\"line\">    void zTestMyDataMapStringToObj() throws IOException;</span><br><span class=\"line\"></span><br><span class=\"line\">    void zTestCyclicDataStringToObj() throws IOException;</span><br><span class=\"line\"></span><br><span class=\"line\">    void zTestCyclicDataListStringToObj() throws IOException;</span><br><span class=\"line\"></span><br><span class=\"line\">    void zTestCyclicDataMapStringToObj() throws IOException;</span><br><span class=\"line\"></span><br><span class=\"line\">    void zTestMyDataAndCyclicDataMapStringToObj() throws IOException;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>测试用例的统一的抽象类 实现 统一的接口<br>对所有的测试用例实现做一个统一的配置抽象类<br>提供所有实现测试用例类的公共配置 、前置后置方法 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.ming.json;</span><br><span class=\"line\"></span><br><span class=\"line\">import junit.framework.TestCase;</span><br><span class=\"line\">import org.junit.After;</span><br><span class=\"line\">import org.junit.Before;</span><br><span class=\"line\">import org.slf4j.Logger;</span><br><span class=\"line\">import org.slf4j.LoggerFactory;</span><br><span class=\"line\"></span><br><span class=\"line\">public abstract class TestJsonAbstract extends TestCase implements TestJson &#123;</span><br><span class=\"line\">    //公共变量区</span><br><span class=\"line\">    protected static String stringList = null;</span><br><span class=\"line\">    protected static String stringMap = null;</span><br><span class=\"line\">    protected static String myData = null;</span><br><span class=\"line\">    protected static String myDataList = null;</span><br><span class=\"line\">    protected static String myDataMap = null;</span><br><span class=\"line\">    protected static String cyclicData = null;</span><br><span class=\"line\">    protected static String cyclicDataList = null;</span><br><span class=\"line\">    protected static String cyclicDataMap = null;</span><br><span class=\"line\">    protected static String myDataAndCyclicDataMap = null;</span><br><span class=\"line\">    //获取集合的大小</span><br><span class=\"line\">    protected int size = 10000;</span><br><span class=\"line\">    protected Long now = null;</span><br><span class=\"line\">    private Logger logger = LoggerFactory.getLogger(TestJsonAbstract.class);</span><br><span class=\"line\"></span><br><span class=\"line\">    @Before</span><br><span class=\"line\">    public void init() &#123;</span><br><span class=\"line\">        System.out.println(&quot;开始计算耗时。。。。。。&quot;);</span><br><span class=\"line\">        now = System.currentTimeMillis();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @After</span><br><span class=\"line\">    public void close() &#123;</span><br><span class=\"line\">        System.out.println(&quot;结束耗时,共耗时:&quot; + (System.currentTimeMillis() - now));</span><br><span class=\"line\">        logger.info(&quot;结束耗时,共耗时:&quot; + (System.currentTimeMillis() - now));</span><br><span class=\"line\">        now = null;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h5 id=\"测试用例-1\"><a href=\"#测试用例-1\" class=\"headerlink\" title=\"测试用例\"></a>测试用例</h5><ul>\n<li><p>fast json测试类<br>继承抽象类实现 统一的测试方法 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.ming.json;</span><br><span class=\"line\"></span><br><span class=\"line\">import com.alibaba.fastjson.JSON;</span><br><span class=\"line\">import org.junit.FixMethodOrder;</span><br><span class=\"line\">import org.junit.Test;</span><br><span class=\"line\">import org.junit.runners.MethodSorters;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.util.Map;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 测试fastJson 解析</span><br><span class=\"line\"> * 通过指定 test case 执行顺序 来保证 先调用obj转换String  然后在调用 string 转换obj</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @author ming</span><br><span class=\"line\"> * @date 2018-07-17 15:23:36</span><br><span class=\"line\"> */</span><br><span class=\"line\">@FixMethodOrder(value = MethodSorters.NAME_ASCENDING)</span><br><span class=\"line\">public class TestFastJson extends TestJsonAbstract &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void testStringListObjToString() &#123;</span><br><span class=\"line\">        stringList = JSON.toJSONString(DataUtils.getStringList(size));</span><br><span class=\"line\">        System.out.println(stringList);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void testStringMapObjToString() &#123;</span><br><span class=\"line\">        stringMap = JSON.toJSONString(DataUtils.getStringMap(size));</span><br><span class=\"line\">        System.out.println(stringMap);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void testMyDataToString() &#123;</span><br><span class=\"line\">        myData = JSON.toJSONString(DataUtils.getMyData());</span><br><span class=\"line\">        System.out.println(myData);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void testMyDataListToString() &#123;</span><br><span class=\"line\">        myDataList = JSON.toJSONString(DataUtils.getMyDataList(size));</span><br><span class=\"line\">        System.out.println(myDataList);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void testMyDataMapToString() &#123;</span><br><span class=\"line\">        myDataMap = JSON.toJSONString(DataUtils.getMyDataMap(size));</span><br><span class=\"line\">        System.out.println(myDataMap);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void testCyclicDataToString() &#123;</span><br><span class=\"line\">        cyclicData = JSON.toJSONString(DataUtils.getCyclicData());</span><br><span class=\"line\">        System.out.println(cyclicData);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void testCyclicDataListToString() &#123;</span><br><span class=\"line\">        cyclicDataList = JSON.toJSONString(DataUtils.getCyclicDataList(size));</span><br><span class=\"line\">        System.out.println(cyclicDataList);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void testCyclicDataMapToString() &#123;</span><br><span class=\"line\">        cyclicDataMap = JSON.toJSONString(DataUtils.getCyclicDataMap(size));</span><br><span class=\"line\">        System.out.println(cyclicDataMap);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void testMyDataAndCyclicDataMapToString() &#123;</span><br><span class=\"line\">        myDataAndCyclicDataMap = JSON.toJSONString(DataUtils.getMyDataAndCyclicDataMap(size));</span><br><span class=\"line\">        System.out.println(myDataAndCyclicDataMap);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void zTestStringListObjStringToObj() &#123;</span><br><span class=\"line\">        System.out.println(JSON.parseArray(stringList));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void zTestStringMapObjStringToObj() &#123;</span><br><span class=\"line\">        System.out.println(JSON.parseObject(stringMap, Map.class));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void zTestMyDataStringToObj() &#123;</span><br><span class=\"line\">        System.out.println(JSON.parseObject(myData, MyData.class));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void zTestMyDataListStringToObj() &#123;</span><br><span class=\"line\">        System.out.println(JSON.parseArray(myDataList, MyData.class));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void zTestMyDataMapStringToObj() &#123;</span><br><span class=\"line\">        System.out.println(JSON.parseObject(myDataMap, Map.class));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void zTestCyclicDataStringToObj() &#123;</span><br><span class=\"line\">        System.out.println(JSON.parseObject(cyclicData, CyclicData.class));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void zTestCyclicDataListStringToObj() &#123;</span><br><span class=\"line\">        System.out.println(JSON.parseArray(cyclicDataList, CyclicData.class));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void zTestCyclicDataMapStringToObj() &#123;</span><br><span class=\"line\">        System.out.println(JSON.parseObject(cyclicDataMap, Map.class));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void zTestMyDataAndCyclicDataMapStringToObj() &#123;</span><br><span class=\"line\">        System.out.println(JSON.parseObject(myDataAndCyclicDataMap, Map.class));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>jackson测试类<br>使用jackson 实现的统一的测试用例 继承抽象类</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.ming.json;</span><br><span class=\"line\"></span><br><span class=\"line\">import com.fasterxml.jackson.core.JsonProcessingException;</span><br><span class=\"line\">import com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class=\"line\">import org.junit.FixMethodOrder;</span><br><span class=\"line\">import org.junit.Test;</span><br><span class=\"line\">import org.junit.runners.MethodSorters;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.io.IOException;</span><br><span class=\"line\">import java.util.List;</span><br><span class=\"line\">import java.util.Map;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 测试解析 jackson</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @author ming</span><br><span class=\"line\"> * @date 2018-07-17 15:24:12</span><br><span class=\"line\"> */</span><br><span class=\"line\">@FixMethodOrder(value = MethodSorters.NAME_ASCENDING)</span><br><span class=\"line\">public class TestJackson extends TestJsonAbstract &#123;</span><br><span class=\"line\">    //获取 jackson 处理json的 mapper   可以通过setConfig 配置这个objectMapper</span><br><span class=\"line\">    private ObjectMapper objectMapper = new ObjectMapper();</span><br><span class=\"line\"></span><br><span class=\"line\">    public void init1() &#123;</span><br><span class=\"line\">        //DeserializationConfig,SerializationConfig</span><br><span class=\"line\">        //配置 objectMapper 编解码 配置</span><br><span class=\"line\">        //objectMapper.setConfig()</span><br><span class=\"line\"></span><br><span class=\"line\">        //设置序列化和反序列化时候的配置</span><br><span class=\"line\">        //objectMapper.configure();</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void testStringListObjToString() throws JsonProcessingException &#123;</span><br><span class=\"line\">        stringList = objectMapper.writeValueAsString(DataUtils.getStringList(size));</span><br><span class=\"line\">        System.out.println(stringList);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void testStringMapObjToString() throws JsonProcessingException &#123;</span><br><span class=\"line\">        stringMap = objectMapper.writeValueAsString(DataUtils.getStringMap(size));</span><br><span class=\"line\">        System.out.println(stringMap);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void testMyDataToString() throws JsonProcessingException &#123;</span><br><span class=\"line\">        myData = objectMapper.writeValueAsString(DataUtils.getMyData());</span><br><span class=\"line\">        System.out.println(myData);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void testMyDataListToString() throws JsonProcessingException &#123;</span><br><span class=\"line\">        myDataList = objectMapper.writeValueAsString(DataUtils.getMyDataList(size));</span><br><span class=\"line\">        System.out.println(myDataList);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void testMyDataMapToString() throws JsonProcessingException &#123;</span><br><span class=\"line\">        myDataMap = objectMapper.writeValueAsString(DataUtils.getMyDataMap(size));</span><br><span class=\"line\">        System.out.println(myDataMap);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void testCyclicDataToString() throws JsonProcessingException &#123;</span><br><span class=\"line\">        cyclicData = objectMapper.writeValueAsString(DataUtils.getCyclicData());</span><br><span class=\"line\">        System.out.println(cyclicData);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void testCyclicDataListToString() throws JsonProcessingException &#123;</span><br><span class=\"line\">        cyclicDataList = objectMapper.writeValueAsString(DataUtils.getCyclicDataList(size));</span><br><span class=\"line\">        System.out.println(cyclicDataList);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void testCyclicDataMapToString() throws JsonProcessingException &#123;</span><br><span class=\"line\">        cyclicDataMap = objectMapper.writeValueAsString(DataUtils.getCyclicDataMap(size));</span><br><span class=\"line\">        System.out.println(cyclicDataMap);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void testMyDataAndCyclicDataMapToString() throws JsonProcessingException &#123;</span><br><span class=\"line\">        myDataAndCyclicDataMap = objectMapper.writeValueAsString(DataUtils.getMyDataAndCyclicDataMap(size));</span><br><span class=\"line\">        System.out.println(myDataAndCyclicDataMap);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void zTestStringListObjStringToObj() throws IOException &#123;</span><br><span class=\"line\">        System.out.println(objectMapper.readValue(stringList, List.class));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void zTestStringMapObjStringToObj() throws IOException &#123;</span><br><span class=\"line\">        System.out.println(objectMapper.readValue(stringMap, Map.class));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void zTestMyDataStringToObj() throws IOException &#123;</span><br><span class=\"line\">        System.out.println(objectMapper.readValue(myData, MyData.class));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void zTestMyDataListStringToObj() throws IOException &#123;</span><br><span class=\"line\">        System.out.println(objectMapper.readValue(myDataList, List.class));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void zTestMyDataMapStringToObj() throws IOException &#123;</span><br><span class=\"line\">        System.out.println(objectMapper.readValue(myDataMap, Map.class));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void zTestCyclicDataStringToObj() throws IOException &#123;</span><br><span class=\"line\">        System.out.println(objectMapper.readValue(cyclicData, CyclicData.class));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void zTestCyclicDataListStringToObj() throws IOException &#123;</span><br><span class=\"line\">        System.out.println(objectMapper.readValue(cyclicDataList, List.class));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void zTestCyclicDataMapStringToObj() throws IOException &#123;</span><br><span class=\"line\">        System.out.println(objectMapper.readValue(cyclicDataMap, Map.class));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void zTestMyDataAndCyclicDataMapStringToObj() throws IOException &#123;</span><br><span class=\"line\">        System.out.println(objectMapper.readValue(myDataAndCyclicDataMap, Map.class));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>gson测试类<br>gson实现统一的测试类 继承抽象类 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.ming.json;</span><br><span class=\"line\"></span><br><span class=\"line\">import com.google.gson.Gson;</span><br><span class=\"line\">import com.google.gson.GsonBuilder;</span><br><span class=\"line\">import org.junit.FixMethodOrder;</span><br><span class=\"line\">import org.junit.Test;</span><br><span class=\"line\">import org.junit.runners.MethodSorters;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.util.List;</span><br><span class=\"line\">import java.util.Map;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 测试gson 解析</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @author ming</span><br><span class=\"line\"> * @date 2018-07-17 15:23:58</span><br><span class=\"line\"> */</span><br><span class=\"line\">@FixMethodOrder(MethodSorters.NAME_ASCENDING)</span><br><span class=\"line\">public class TestGson extends TestJsonAbstract &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private Gson gson = new GsonBuilder().create();</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void testStringListObjToString() &#123;</span><br><span class=\"line\">        stringList = gson.toJson(DataUtils.getStringList(size));</span><br><span class=\"line\">        System.out.println(stringList);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void testStringMapObjToString() &#123;</span><br><span class=\"line\">        stringMap = gson.toJson(DataUtils.getStringMap(size));</span><br><span class=\"line\">        System.out.println(stringMap);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void testMyDataToString() &#123;</span><br><span class=\"line\">        myData = gson.toJson(DataUtils.getMyData());</span><br><span class=\"line\">        System.out.println(myData);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void testMyDataListToString() &#123;</span><br><span class=\"line\">        myDataList = gson.toJson(DataUtils.getMyDataList(size));</span><br><span class=\"line\">        System.out.println(myDataList);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void testMyDataMapToString() &#123;</span><br><span class=\"line\">        myDataMap = gson.toJson(DataUtils.getMyDataMap(size));</span><br><span class=\"line\">        System.out.println(myDataMap);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void testCyclicDataToString() &#123;</span><br><span class=\"line\">        cyclicData = gson.toJson(DataUtils.getCyclicData());</span><br><span class=\"line\">        System.out.println(cyclicData);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void testCyclicDataListToString() &#123;</span><br><span class=\"line\">        cyclicDataList = gson.toJson(DataUtils.getCyclicDataList(size));</span><br><span class=\"line\">        System.out.println(cyclicDataList);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void testCyclicDataMapToString() &#123;</span><br><span class=\"line\">        cyclicDataMap = gson.toJson(DataUtils.getCyclicDataMap(size));</span><br><span class=\"line\">        System.out.println(cyclicDataMap);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void testMyDataAndCyclicDataMapToString() &#123;</span><br><span class=\"line\">        myDataAndCyclicDataMap = gson.toJson(DataUtils.getMyDataAndCyclicDataMap(size));</span><br><span class=\"line\">        System.out.println(myDataAndCyclicDataMap);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void zTestStringListObjStringToObj() &#123;</span><br><span class=\"line\">        System.out.println(gson.fromJson(stringList, List.class));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void zTestStringMapObjStringToObj() &#123;</span><br><span class=\"line\">        System.out.println(gson.fromJson(stringMap, Map.class));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void zTestMyDataStringToObj() &#123;</span><br><span class=\"line\">        System.out.println(gson.fromJson(myData, MyData.class));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void zTestMyDataListStringToObj() &#123;</span><br><span class=\"line\">        System.out.println(gson.fromJson(myDataList, List.class));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void zTestMyDataMapStringToObj() &#123;</span><br><span class=\"line\">        System.out.println(gson.fromJson(myDataMap, Map.class));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void zTestCyclicDataStringToObj() &#123;</span><br><span class=\"line\">        System.out.println(gson.fromJson(cyclicData, CyclicData.class));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void zTestCyclicDataListStringToObj() &#123;</span><br><span class=\"line\">        System.out.println(gson.fromJson(cyclicDataList, List.class));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void zTestCyclicDataMapStringToObj() &#123;</span><br><span class=\"line\">        System.out.println(gson.fromJson(cyclicDataMap, Map.class));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void zTestMyDataAndCyclicDataMapStringToObj() &#123;</span><br><span class=\"line\">        System.out.println(gson.fromJson(myDataAndCyclicDataMap, Map.class));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>genson测试类<br>genson实现的测试类 继承 抽象类 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.ming.json;</span><br><span class=\"line\"></span><br><span class=\"line\">import com.owlike.genson.Genson;</span><br><span class=\"line\">import org.junit.FixMethodOrder;</span><br><span class=\"line\">import org.junit.Test;</span><br><span class=\"line\">import org.junit.runners.MethodSorters;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.util.List;</span><br><span class=\"line\">import java.util.Map;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 测试使用genson</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @author ming</span><br><span class=\"line\"> * @date 2018-07-17 15:24:33</span><br><span class=\"line\"> */</span><br><span class=\"line\">@FixMethodOrder(MethodSorters.NAME_ASCENDING)</span><br><span class=\"line\">public class TestGenson extends TestJsonAbstract &#123;</span><br><span class=\"line\">    private Genson genson = new Genson();</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void testStringListObjToString() &#123;</span><br><span class=\"line\">        stringList = genson.serialize(DataUtils.getStringList(size));</span><br><span class=\"line\">        System.out.println(stringList);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void testStringMapObjToString() &#123;</span><br><span class=\"line\">        stringMap = genson.serialize(DataUtils.getStringMap(size));</span><br><span class=\"line\">        System.out.println(stringMap);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void testMyDataToString() &#123;</span><br><span class=\"line\">        myData = genson.serialize(DataUtils.getMyData());</span><br><span class=\"line\">        System.out.println(myData);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void testMyDataListToString() &#123;</span><br><span class=\"line\">        myDataList = genson.serialize(DataUtils.getMyDataList(size));</span><br><span class=\"line\">        System.out.println(myDataList);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void testMyDataMapToString() &#123;</span><br><span class=\"line\">        myDataMap = genson.serialize(DataUtils.getMyDataMap(size));</span><br><span class=\"line\">        System.out.println(myDataMap);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void testCyclicDataToString() &#123;</span><br><span class=\"line\">        cyclicData = genson.serialize(DataUtils.getCyclicData());</span><br><span class=\"line\">        System.out.println(cyclicData);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void testCyclicDataListToString() &#123;</span><br><span class=\"line\">        cyclicDataList = genson.serialize(DataUtils.getCyclicDataList(size));</span><br><span class=\"line\">        System.out.println(cyclicDataList);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void testCyclicDataMapToString() &#123;</span><br><span class=\"line\">        cyclicDataMap = genson.serialize(DataUtils.getCyclicDataMap(size));</span><br><span class=\"line\">        System.out.println(cyclicDataMap);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void testMyDataAndCyclicDataMapToString() &#123;</span><br><span class=\"line\">        myDataAndCyclicDataMap = genson.serialize(DataUtils.getMyDataAndCyclicDataMap(size));</span><br><span class=\"line\">        System.out.println(myDataAndCyclicDataMap);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void zTestStringListObjStringToObj() &#123;</span><br><span class=\"line\">        System.out.println(genson.deserialize(stringList, List.class));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void zTestStringMapObjStringToObj() &#123;</span><br><span class=\"line\">        System.out.println(genson.deserialize(stringMap, Map.class));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void zTestMyDataStringToObj() &#123;</span><br><span class=\"line\">        System.out.println(genson.deserialize(myData, MyData.class));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void zTestMyDataListStringToObj() &#123;</span><br><span class=\"line\">        System.out.println(genson.deserialize(myDataList, List.class));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void zTestMyDataMapStringToObj() &#123;</span><br><span class=\"line\">        System.out.println(genson.deserialize(myDataMap, Map.class));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void zTestCyclicDataStringToObj() &#123;</span><br><span class=\"line\">        System.out.println(genson.deserialize(cyclicData, CyclicData.class));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void zTestCyclicDataListStringToObj() &#123;</span><br><span class=\"line\">        System.out.println(genson.deserialize(cyclicDataList, List.class));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void zTestCyclicDataMapStringToObj() &#123;</span><br><span class=\"line\">        System.out.println(genson.deserialize(cyclicDataMap, Map.class));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void zTestMyDataAndCyclicDataMapStringToObj() &#123;</span><br><span class=\"line\">        System.out.println(genson.deserialize(myDataAndCyclicDataMap, Map.class));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>所有的测试类实现 统一进行批量测试 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.ming.json;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">import junit.framework.TestCase;</span><br><span class=\"line\">import junit.framework.TestSuite;</span><br><span class=\"line\">import junit.textui.TestRunner;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.util.ArrayList;</span><br><span class=\"line\">import java.util.HashMap;</span><br><span class=\"line\">import java.util.List;</span><br><span class=\"line\">import java.util.Map;</span><br><span class=\"line\">import java.util.stream.Collectors;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 聚合多个测试用例 在一起测试</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @author ming</span><br><span class=\"line\"> * @date 2018-07-17 17:31:55</span><br><span class=\"line\"> */</span><br><span class=\"line\">//@RunWith(Suite.class)</span><br><span class=\"line\">//@Suite.SuiteClasses(&#123;TestJackson.class, TestGson.class,  TestGenson.class,TestFastJson.class&#125;)</span><br><span class=\"line\">public class AllTest &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        //执行测试用例次数 通过增大执行次数 取平均数 减小误差</span><br><span class=\"line\">        int size = 10000;</span><br><span class=\"line\">        List&lt;Map&lt;String, Object&gt;&gt; result = new ArrayList&lt;&gt;();</span><br><span class=\"line\">        long now = System.currentTimeMillis();</span><br><span class=\"line\">        result.add(get(TestJackson.class, size));</span><br><span class=\"line\">        result.add(get(TestGson.class, size));</span><br><span class=\"line\">        result.add(get(TestGenson.class, size));</span><br><span class=\"line\">        result.add(get(TestFastJson.class, size));</span><br><span class=\"line\">        System.out.println(&quot;总耗时:&quot; + (System.currentTimeMillis() - now) + &quot;ms&quot;);</span><br><span class=\"line\">        System.out.println(&quot;明细信息-------------------------------&quot;);</span><br><span class=\"line\">        result.forEach(f -&gt; &#123;</span><br><span class=\"line\">            System.out.println(&quot;执行的测试用例&quot; + f.get(&quot;class&quot;));</span><br><span class=\"line\">            System.out.println(&quot;执行平均耗时&quot; + f.get(&quot;avgTime&quot;) + &quot;ms&quot;);</span><br><span class=\"line\">            System.out.println(&quot;每次执行的耗时详情&quot; + f.get(&quot;testList&quot;));</span><br><span class=\"line\">            System.out.println(&quot;--------------------------------&quot;);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private static Map&lt;String, Object&gt; get(Class&lt;? extends TestCase&gt; tClass, int size) &#123;</span><br><span class=\"line\">        TestSuite testSuite = new TestSuite();</span><br><span class=\"line\">        testSuite.addTestSuite(tClass);</span><br><span class=\"line\">        long now;</span><br><span class=\"line\">        List&lt;Long&gt; list = new ArrayList&lt;&gt;();</span><br><span class=\"line\">        for (int i = 0; i &lt; size; i++) &#123;</span><br><span class=\"line\">            now = System.currentTimeMillis();</span><br><span class=\"line\">            TestRunner.run(testSuite);</span><br><span class=\"line\">            list.add(System.currentTimeMillis() - now);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Map&lt;String, Object&gt; map = new HashMap&lt;&gt;();</span><br><span class=\"line\">        map.put(&quot;class&quot;, tClass);</span><br><span class=\"line\">        map.put(&quot;testList&quot;, list);</span><br><span class=\"line\">        map.put(&quot;avgTime&quot;, list.stream().collect(Collectors.averagingLong(a -&gt; a)));</span><br><span class=\"line\">        return map;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>开启 AllTest类中的main方法即进行所有的模块的测试 </p>\n<p>其中一次测试结果记录<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">总耗时:3627599ms</span><br><span class=\"line\">明细信息-------------------------------</span><br><span class=\"line\">执行的测试用例class com.ming.json.TestJackson</span><br><span class=\"line\">执行平均耗时84.3811ms</span><br><span class=\"line\">每次执行的耗时详情[439, 215, 184, 183, 176, 198。。。。。]</span><br><span class=\"line\">--------------------------------</span><br><span class=\"line\">执行的测试用例class com.ming.json.TestGson</span><br><span class=\"line\">执行平均耗时94.915ms</span><br><span class=\"line\">每次执行的耗时详情[299, 126, 123, 113, 95, 109, 。。。。]</span><br><span class=\"line\">--------------------------------</span><br><span class=\"line\">执行的测试用例class com.ming.json.TestGenson</span><br><span class=\"line\">执行平均耗时99.3964ms</span><br><span class=\"line\">每次执行的耗时详情[247, 144, 115, 98, 102, 85, 。。。。。]</span><br><span class=\"line\">--------------------------------</span><br><span class=\"line\">执行的测试用例class com.ming.json.TestFastJson</span><br><span class=\"line\">执行平均耗时84.0026ms</span><br><span class=\"line\">每次执行的耗时详情[263, 143, 94, 104, 69, 72, 。。。。。]</span><br><span class=\"line\">--------------------------------</span><br></pre></td></tr></table></figure><p></p>\n<h4 id=\"jackson-gson针对泛型的特殊处理\"><a href=\"#jackson-gson针对泛型的特殊处理\" class=\"headerlink\" title=\"jackson gson针对泛型的特殊处理\"></a>jackson gson针对泛型的特殊处理</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.ming.json;</span><br><span class=\"line\"></span><br><span class=\"line\">import com.fasterxml.jackson.core.type.TypeReference;</span><br><span class=\"line\">import com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class=\"line\">import com.google.common.collect.Maps;</span><br><span class=\"line\">import com.google.common.reflect.TypeToken;</span><br><span class=\"line\">import com.google.gson.Gson;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.io.IOException;</span><br><span class=\"line\">import java.util.Arrays;</span><br><span class=\"line\">import java.util.List;</span><br><span class=\"line\">import java.util.Map;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 测试泛型类型 json转换</span><br><span class=\"line\"> * 引用地址:https://www.jianshu.com/p/ca03c2fe36e3</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @author ming</span><br><span class=\"line\"> * @date 2018-07-19 14:03:12</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class TestT &#123;</span><br><span class=\"line\">    private static ObjectMapper mapper = new ObjectMapper();</span><br><span class=\"line\">    private static Gson gson = new Gson();</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) throws IOException &#123;</span><br><span class=\"line\">        Map&lt;String, List&lt;Long&gt;&gt; map = Maps.newHashMap();</span><br><span class=\"line\">        map.put(&quot;one&quot;, Arrays.asList(10001L, 10002L, 10003L, 10004L));</span><br><span class=\"line\">        map.put(&quot;two&quot;, Arrays.asList(20001L, 20002L, 20003L, 20004L));</span><br><span class=\"line\">        map.put(&quot;three&quot;, Arrays.asList(30001L, 30002L, 30003L, 30004L));</span><br><span class=\"line\">        map.put(&quot;four&quot;, Arrays.asList(40001L, 40002L, 40003L, 40004L));</span><br><span class=\"line\"></span><br><span class=\"line\">        String json = new Gson().toJson(map);</span><br><span class=\"line\">        System.err.println(&quot;=======================错误示范=====================&quot;);</span><br><span class=\"line\">        //Gson</span><br><span class=\"line\">        Map&lt;String, List&lt;Long&gt;&gt; mapResult = gson.fromJson(json, Map.class);</span><br><span class=\"line\">        System.out.println(&quot;通过Gson转换...&quot;);</span><br><span class=\"line\">//      printType(mapResult);</span><br><span class=\"line\">        System.out.println(mapResult);</span><br><span class=\"line\">        //Json</span><br><span class=\"line\">        Map&lt;String, List&lt;Long&gt;&gt; jsonMapResult = mapper.readValue(json, Map.class);</span><br><span class=\"line\">        System.out.println(&quot;通过Jackson转换...&quot;);</span><br><span class=\"line\">//      printType(jsonMapResult);</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(jsonMapResult);</span><br><span class=\"line\">        System.out.println(&quot;=======================正确做法=====================&quot;);</span><br><span class=\"line\">        //Gson</span><br><span class=\"line\">        Map&lt;String, List&lt;Long&gt;&gt; mapResult1 = gson.fromJson(json, new TypeToken&lt;Map&lt;String, List&lt;Long&gt;&gt;&gt;() &#123;</span><br><span class=\"line\">        &#125;.getType());</span><br><span class=\"line\">        System.out.println(&quot;通过Gson转换...&quot;);</span><br><span class=\"line\">        printType(mapResult1);</span><br><span class=\"line\">        System.out.println(mapResult1);</span><br><span class=\"line\">        //Json</span><br><span class=\"line\">        ObjectMapper mapper = new ObjectMapper();</span><br><span class=\"line\">        Map&lt;String, List&lt;Long&gt;&gt; jsonMapResult1 = mapper.readValue(json, new TypeReference&lt;Map&lt;String, List&lt;Long&gt;&gt;&gt;() &#123;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        System.out.println(&quot;通过Jackson转换...&quot;);</span><br><span class=\"line\">        printType(jsonMapResult1);</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(jsonMapResult1);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void printType(Map&lt;String, List&lt;Long&gt;&gt; map) &#123;</span><br><span class=\"line\">        for (Map.Entry&lt;String, List&lt;Long&gt;&gt; entry : map.entrySet()) &#123;</span><br><span class=\"line\">            System.out.println(&quot;key 类型:&quot; + entry.getKey().getClass() + &quot;, value类型:&quot;</span><br><span class=\"line\">                    + entry.getValue().getClass() + &quot;, List中元素类型&quot; + entry.getValue().get(0).getClass());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><p>java处理json相关的操作 工具包是很多的 但是用的多的也就上面说的几种<br>对于简单并且要求速度的对象和json转换 直接使用fast json即可 不过有时候 fast json 会坑爹<br>其他情况使用jackson 完全可以胜任   gson也行 不过 我更加喜欢jackson  毕竟 很多框架就已经引用了jackson  跟着大佬走肯定没错的<br>带有泛型的 一定要用jackson或者gson 去使用  否则可能会无法反序列化成想要的类型  特别是fast json 只能处理第一层的泛型 复杂的泛型直接gg</p>"}],"PostAsset":[],"PostCategory":[{"post_id":"cjo9uatpg0003mwczcck5ysjn","category_id":"cjo9uatpp0007mwczjld814n3","_id":"cjo9uatpz000gmwczxaaa9gld"},{"post_id":"cjo9uatpm0005mwczsgnfbx7x","category_id":"cjo9uatpp0007mwczjld814n3","_id":"cjo9uatq0000imwcz73lrcrpp"},{"post_id":"cjo9uatpr0009mwczbeplalkn","category_id":"cjo9uatpp0007mwczjld814n3","_id":"cjo9uatq1000lmwczg6v8yx6v"},{"post_id":"cjo9uatx0000qmwczo5htipib","category_id":"cjo9uatpp0007mwczjld814n3","_id":"cjo9uatx5000vmwcz1hs34u32"},{"post_id":"cjo9uatx2000rmwcz3mny8ssn","category_id":"cjo9uatpp0007mwczjld814n3","_id":"cjo9uatx7000xmwczq4ela770"},{"post_id":"cjo9uatx3000tmwcz985hphlm","category_id":"cjo9uatpp0007mwczjld814n3","_id":"cjo9uatx90011mwcz84nwd8d4"},{"post_id":"cjo9uatx4000umwcznvbfbb7c","category_id":"cjo9uatpp0007mwczjld814n3","_id":"cjo9uatxa0013mwcz3zeceukn"},{"post_id":"cjo9uatx6000wmwczymnb6tjh","category_id":"cjo9uatpp0007mwczjld814n3","_id":"cjo9uatxg0016mwczgxmvqww8"},{"post_id":"cjo9uatx80010mwczeq15cnjb","category_id":"cjo9uatpp0007mwczjld814n3","_id":"cjo9uatxh0018mwcze7xybz81"},{"post_id":"cjo9uatx90012mwcze46e3d22","category_id":"cjo9uatpp0007mwczjld814n3","_id":"cjo9uatxj001bmwcz51ejrbbu"},{"post_id":"cjo9uatxb0015mwcz463vtbt1","category_id":"cjo9uatpp0007mwczjld814n3","_id":"cjo9uatxk001emwcz2tpkigcf"},{"post_id":"cjo9uatxh0017mwczfum4qagi","category_id":"cjo9uatpp0007mwczjld814n3","_id":"cjo9uatxn001jmwcz1a93c0k9"},{"post_id":"cjo9uatxj001dmwczk3b4nq6d","category_id":"cjo9uatpp0007mwczjld814n3","_id":"cjo9uatxq001nmwcz58kua5lf"},{"post_id":"cjo9uatxl001imwczt7wetfrf","category_id":"cjo9uatpp0007mwczjld814n3","_id":"cjo9uatxr001rmwczok9bj9ie"},{"post_id":"cjo9uatxi001amwcz4omk9np9","category_id":"cjo9uatxl001hmwczekd18wm5","_id":"cjo9uatxs001vmwczcat43kge"},{"post_id":"cjo9uatxo001kmwcz7qnsktul","category_id":"cjo9uatxq001pmwcz4ctmhtsf","_id":"cjo9uatxv0024mwczq5j1mu9x"},{"post_id":"cjo9uatxs001xmwcznl91w03e","category_id":"cjo9uatpp0007mwczjld814n3","_id":"cjo9uatxx0028mwcz51a3tep3"},{"post_id":"cjo9uatxu0020mwczghhvy7x3","category_id":"cjo9uatpp0007mwczjld814n3","_id":"cjo9uatxy002bmwczh6mmh86x"},{"post_id":"cjo9uatxq001mmwcz9c4zjvdp","category_id":"cjo9uatxq001pmwcz4ctmhtsf","_id":"cjo9uaty0002fmwczep8gwte7"},{"post_id":"cjo9uatxv0022mwczv4029mgm","category_id":"cjo9uatpp0007mwczjld814n3","_id":"cjo9uaty2002jmwcz98ldd2c9"},{"post_id":"cjo9uatxw0027mwcz5qce06n6","category_id":"cjo9uatpp0007mwczjld814n3","_id":"cjo9uaty4002mmwcz81yxunsg"},{"post_id":"cjo9uatxq001qmwczl5tggrct","category_id":"cjo9uatxv0023mwcze8h00x5g","_id":"cjo9uaty5002qmwczuognxhk0"},{"post_id":"cjo9uatxx002amwczfzpopnxl","category_id":"cjo9uatpp0007mwczjld814n3","_id":"cjo9uaty7002tmwczf34x6mnl"},{"post_id":"cjo9uatxz002emwczcmydwpjn","category_id":"cjo9uatpp0007mwczjld814n3","_id":"cjo9uaty9002xmwczkpvetvzq"},{"post_id":"cjo9uatxr001umwcz5jtjgxwq","category_id":"cjo9uatxv0023mwcze8h00x5g","_id":"cjo9uatya0030mwcz91fcdz7l"},{"post_id":"cjo9uaty1002imwczjm5ok3je","category_id":"cjo9uatpp0007mwczjld814n3","_id":"cjo9uatyc0034mwczrynugcz2"},{"post_id":"cjo9uaty3002lmwcz7j9118th","category_id":"cjo9uatpp0007mwczjld814n3","_id":"cjo9uatyd0037mwczubi4n4jm"},{"post_id":"cjo9uaty4002pmwczj4aurge2","category_id":"cjo9uatpp0007mwczjld814n3","_id":"cjo9uatyf003bmwczd5t801rz"},{"post_id":"cjo9uaty6002smwczi12xn1t9","category_id":"cjo9uatxq001pmwcz4ctmhtsf","_id":"cjo9uatyg003emwczc4s0ockl"},{"post_id":"cjo9uaty8002wmwcz82pd3o6z","category_id":"cjo9uatpp0007mwczjld814n3","_id":"cjo9uatyh003imwczvkf4cctb"},{"post_id":"cjo9uaty9002zmwczg8cqx263","category_id":"cjo9uatpp0007mwczjld814n3","_id":"cjo9uatyj003lmwczxmf1lxny"},{"post_id":"cjo9uatyb0033mwczdqb2q6hm","category_id":"cjo9uatpp0007mwczjld814n3","_id":"cjo9uatyl003pmwczy0ov4nd1"},{"post_id":"cjo9uatyd0036mwczjdmdzaua","category_id":"cjo9uatpp0007mwczjld814n3","_id":"cjo9uatym003smwczck8peywo"},{"post_id":"cjo9uatye003amwczdsxc6dsr","category_id":"cjo9uatpp0007mwczjld814n3","_id":"cjo9uatyn003vmwcznxaeh761"},{"post_id":"cjo9uatyf003dmwcz0rpoahan","category_id":"cjo9uatpp0007mwczjld814n3","_id":"cjo9uatyq003zmwczj41tt52m"},{"post_id":"cjo9uatyg003hmwcztq03fnw4","category_id":"cjo9uatpp0007mwczjld814n3","_id":"cjo9uatyr0042mwcznxfk87tt"},{"post_id":"cjo9uatyi003kmwcz6qit8vck","category_id":"cjo9uatpp0007mwczjld814n3","_id":"cjo9uatyt0046mwczlowr0kbk"},{"post_id":"cjo9uatyk003omwczwx8k2th8","category_id":"cjo9uatpp0007mwczjld814n3","_id":"cjo9uatyu0049mwczxbsyykqa"},{"post_id":"cjo9uatyl003rmwczxbazuaj3","category_id":"cjo9uatxq001pmwcz4ctmhtsf","_id":"cjo9uatyw004dmwcz0xle1n9u"},{"post_id":"cjo9uatym003umwczflha7l6r","category_id":"cjo9uatpp0007mwczjld814n3","_id":"cjo9uatyw004gmwcz3qklbo70"},{"post_id":"cjo9uatyp003ymwcz296cwwu2","category_id":"cjo9uatpp0007mwczjld814n3","_id":"cjo9uatyy004kmwczc1qyv2rq"},{"post_id":"cjo9uatyr0041mwczr9p64go9","category_id":"cjo9uatpp0007mwczjld814n3","_id":"cjo9uatz0004nmwczk3vqmeta"},{"post_id":"cjo9uatys0045mwcz6ssgashp","category_id":"cjo9uatpp0007mwczjld814n3","_id":"cjo9uatz1004rmwcz95wapmwx"},{"post_id":"cjo9uatyt0048mwcz55gxtvf3","category_id":"cjo9uatpp0007mwczjld814n3","_id":"cjo9uatz2004umwcz2uh8ac95"},{"post_id":"cjo9uatyv004cmwczv11grvy9","category_id":"cjo9uatpp0007mwczjld814n3","_id":"cjo9uatz3004ymwcz8hfszgoj"},{"post_id":"cjo9uatyw004fmwcze0a7qvpt","category_id":"cjo9uatpp0007mwczjld814n3","_id":"cjo9uatz50051mwczv506nyvi"},{"post_id":"cjo9uatyx004jmwczc5wxfwln","category_id":"cjo9uatpp0007mwczjld814n3","_id":"cjo9uatz70054mwcz4mtbmr87"},{"post_id":"cjo9uatyy004mmwczu1pid3nt","category_id":"cjo9uatpp0007mwczjld814n3","_id":"cjo9uatz90057mwczrcg9wwkw"},{"post_id":"cjo9uatz0004qmwczshr2l22u","category_id":"cjo9uatpp0007mwczjld814n3","_id":"cjo9uatza0059mwczm2c752c6"},{"post_id":"cjo9uatz1004tmwcz671sfqp6","category_id":"cjo9uatpp0007mwczjld814n3","_id":"cjo9uatzb005cmwcz4hnw3x3z"},{"post_id":"cjo9uatz3004xmwcztz2bxqlj","category_id":"cjo9uatpp0007mwczjld814n3","_id":"cjo9uatzc005emwczyg68doz9"},{"post_id":"cjo9uatz40050mwczds83xz2v","category_id":"cjo9uatpp0007mwczjld814n3","_id":"cjo9uatzd005hmwczb561seaw"},{"post_id":"cjo9uatz60053mwcz2jsmo03t","category_id":"cjo9uatpp0007mwczjld814n3","_id":"cjo9uatze005kmwcz3d43jdh0"},{"post_id":"cjo9uatz80056mwczy9n5gwv6","category_id":"cjo9uatpp0007mwczjld814n3","_id":"cjo9uatzf005pmwczlwr6nsn8"},{"post_id":"cjo9uatz90058mwczgtuh7zbz","category_id":"cjo9uatpp0007mwczjld814n3","_id":"cjo9uatzh005smwczvd8h9m9x"},{"post_id":"cjo9uatzb005bmwczv3hxg91v","category_id":"cjo9uatpp0007mwczjld814n3","_id":"cjo9uatzj005wmwczxso5kiqd"},{"post_id":"cjo9uatzc005dmwczbt42a02e","category_id":"cjo9uatpp0007mwczjld814n3","_id":"cjo9uatzk0060mwczedd33u1d"},{"post_id":"cjo9uatzd005jmwczkxp5bi1v","category_id":"cjo9uatxv0023mwcze8h00x5g","_id":"cjo9uatzl0063mwczevcmiy28"},{"post_id":"cjo9uatze005omwczljbeehzn","category_id":"cjo9uatxv0023mwcze8h00x5g","_id":"cjo9uatzm0068mwczq5ss6k19"},{"post_id":"cjo9uatzc005gmwcz5wsx9gow","category_id":"cjo9uatze005nmwczf9p9dt77","_id":"cjo9uatzn006bmwcznurl25fq"},{"post_id":"cjo9uatzi005vmwcz61qppvc7","category_id":"cjo9uatpp0007mwczjld814n3","_id":"cjo9uatzp006fmwcz1kfza1t1"},{"post_id":"cjo9uatzg005rmwczondbaka0","category_id":"cjo9uatzj005ymwcz7b4mndkm","_id":"cjo9uatzp006imwczpf68pqks"},{"post_id":"cjo9uatzm0066mwczfmhivjun","category_id":"cjo9uatxv0023mwcze8h00x5g","_id":"cjo9uatzr006nmwczzxqkk5ei"},{"post_id":"cjo9uatzn006amwcz2ionivok","category_id":"cjo9uatpp0007mwczjld814n3","_id":"cjo9uatzs006qmwczi6jj2ygm"},{"post_id":"cjo9uatzj005zmwczaou1g6cu","category_id":"cjo9uatzj005ymwcz7b4mndkm","_id":"cjo9uatzt006vmwcz1n946yz8"},{"post_id":"cjo9uatzp006hmwcz86b1pg1k","category_id":"cjo9uatpp0007mwczjld814n3","_id":"cjo9uatzv006ymwczk8hu4040"},{"post_id":"cjo9uatzo006emwczc1k4eeik","category_id":"cjo9uatzq006lmwcznin95r31","_id":"cjo9uatzw0072mwczj9b2b59y"},{"post_id":"cjo9uatzt006tmwczqly961gb","category_id":"cjo9uatxv0023mwcze8h00x5g","_id":"cjo9uatzy0076mwczch2vjhz7"},{"post_id":"cjo9uatzu006xmwcziz13ug9n","category_id":"cjo9uatxq001pmwcz4ctmhtsf","_id":"cjo9uatzz007amwcz2xuzsz4f"},{"post_id":"cjo9uatzq006mmwczad8fray3","category_id":"cjo9uatzt006umwczhn8q9eiq","_id":"cjo9uau00007dmwcznn936ckr"},{"post_id":"cjo9uatzw0071mwczt5pinpgl","category_id":"cjo9uatpp0007mwczjld814n3","_id":"cjo9uau02007gmwczm2laqtte"},{"post_id":"cjo9uatzx0075mwcz51go8brt","category_id":"cjo9uatpp0007mwczjld814n3","_id":"cjo9uau04007imwczlo2kpanc"},{"post_id":"cjo9uatzr006pmwcz7ablbnlq","category_id":"cjo9uatzt006umwczhn8q9eiq","_id":"cjo9uau05007kmwczqfeoliv9"},{"post_id":"cjo9uatzy0079mwczqosziwtd","category_id":"cjo9uatpp0007mwczjld814n3","_id":"cjo9uau08007omwczclw76q78"},{"post_id":"cjo9uatzz007cmwczzhpg88xh","category_id":"cjo9uatxv0023mwcze8h00x5g","_id":"cjo9uau08007rmwczhm28ntyo"},{"post_id":"cjo9uau01007fmwczb5y4mxxa","category_id":"cjo9uatpp0007mwczjld814n3","_id":"cjo9uau0a007vmwczic2x4yjt"},{"post_id":"cjo9uau02007hmwczjym9rg3a","category_id":"cjo9uatpp0007mwczjld814n3","_id":"cjo9uau0b007ymwczkt7tno45"},{"post_id":"cjo9uau04007jmwczhml6ji6p","category_id":"cjo9uatpp0007mwczjld814n3","_id":"cjo9uau0c0082mwcz0n4th4d8"},{"post_id":"cjo9uau06007nmwczzigont19","category_id":"cjo9uatpp0007mwczjld814n3","_id":"cjo9uau0e0084mwczlpcc7ehf"},{"post_id":"cjo9uau08007qmwcziomprbkn","category_id":"cjo9uatpp0007mwczjld814n3","_id":"cjo9uau0h0088mwcznxqbczni"},{"post_id":"cjo9uau09007umwcz3z5u7wg1","category_id":"cjo9uatpp0007mwczjld814n3","_id":"cjo9uau0h0089mwcz965khck7"},{"post_id":"cjo9uau0a007xmwczbh0ursd8","category_id":"cjo9uatpp0007mwczjld814n3","_id":"cjo9uau0i008cmwczqlcvrpw1"},{"post_id":"cjo9uau0c0081mwczb1wdhl51","category_id":"cjo9uatpp0007mwczjld814n3","_id":"cjo9uau0i008dmwcze1v44wvt"},{"post_id":"cjo9uau0d0083mwczyfyzsysi","category_id":"cjo9uatpp0007mwczjld814n3","_id":"cjo9uau0j008gmwczg6b3q2st"},{"post_id":"cjo9uau0g0087mwcz1z1fc0hs","category_id":"cjo9uatpp0007mwczjld814n3","_id":"cjo9uau0j008hmwcz4k4g26pv"},{"post_id":"cjo9uau2u00bemwczqz24c7to","category_id":"cjo9uatpp0007mwczjld814n3","_id":"cjo9uau2x00blmwczzgobnipe"},{"post_id":"cjo9uau2v00bfmwczxm4as00x","category_id":"cjo9uatpp0007mwczjld814n3","_id":"cjo9uau2y00bnmwcz6oo63i1c"},{"post_id":"cjo9uau2w00bhmwcz5rlhsaax","category_id":"cjo9uatpp0007mwczjld814n3","_id":"cjo9uau2z00brmwczhtfka74b"},{"post_id":"cjo9uau2x00bkmwczu7623m41","category_id":"cjo9uatpp0007mwczjld814n3","_id":"cjo9uau3100bumwczigv4t6kt"},{"post_id":"cjo9uau2y00bmmwcz1o8nupjm","category_id":"cjo9uatxv0023mwcze8h00x5g","_id":"cjo9uau3200bxmwczrwnxcdg8"},{"post_id":"cjo9uau3000btmwczphcgorww","category_id":"cjo9uatxl001hmwczekd18wm5","_id":"cjo9uau3300c1mwczzqpn66r9"},{"post_id":"cjo9uau3100bwmwczjuyy4pz0","category_id":"cjo9uatzt006umwczhn8q9eiq","_id":"cjo9uau3400c4mwczk4xbqs84"},{"post_id":"cjo9uau3200bzmwczojbumkf4","category_id":"cjo9uatxv0023mwcze8h00x5g","_id":"cjo9uau3400c6mwcz129ky0x8"},{"post_id":"cjo9uau2z00bpmwczqkwp4wzd","category_id":"cjo9uau3100bvmwcz39ri4scp","_id":"cjo9uau3400c9mwcz38924zw8"},{"post_id":"cjo9uau3i00csmwczt5cyjvg8","category_id":"cjo9uatpp0007mwczjld814n3","_id":"cjo9uau3n00cwmwczn9aeufkl"},{"post_id":"cjo9uau3j00ctmwczx01h02wn","category_id":"cjo9uatxl001hmwczekd18wm5","_id":"cjo9uau3o00cxmwcz8s7duopu"},{"post_id":"cjo9uau3l00cvmwczgevrk8wn","category_id":"cjo9uau3100bvmwcz39ri4scp","_id":"cjo9uau3p00czmwcz1g17q4lb"},{"post_id":"cjo9uau5c00dgmwcz8yc0bn0o","category_id":"cjo9uatxv0023mwcze8h00x5g","_id":"cjo9uau5e00djmwczante2jyb"}],"PostTag":[{"post_id":"cjo9uatpg0003mwczcck5ysjn","tag_id":"cjo9uatpp0008mwcz7jkh54ux","_id":"cjo9uatpy000emwczqfq42b5l"},{"post_id":"cjo9uatpm0005mwczsgnfbx7x","tag_id":"cjo9uatpw000dmwczn6lsskhq","_id":"cjo9uatq0000kmwczcd616y2u"},{"post_id":"cjo9uatpm0005mwczsgnfbx7x","tag_id":"cjo9uatpz000hmwcznxszxdkz","_id":"cjo9uatq1000mmwcz3yglsxol"},{"post_id":"cjo9uatpr0009mwczbeplalkn","tag_id":"cjo9uatpz000hmwcznxszxdkz","_id":"cjo9uatq1000omwczd0r2wgzh"},{"post_id":"cjo9uatpr0009mwczbeplalkn","tag_id":"cjo9uatq1000nmwczl0ne90eb","_id":"cjo9uatq1000pmwcze4xhdgu0"},{"post_id":"cjo9uatx0000qmwczo5htipib","tag_id":"cjo9uatx3000smwczem7ayjqz","_id":"cjo9uatx8000zmwczfajeysfc"},{"post_id":"cjo9uatx2000rmwcz3mny8ssn","tag_id":"cjo9uatx7000ymwcz73atrzpt","_id":"cjo9uatxj001cmwcza1tohzx3"},{"post_id":"cjo9uatx2000rmwcz3mny8ssn","tag_id":"cjo9uatxa0014mwczb4lrmu5z","_id":"cjo9uatxl001fmwczac4tvxno"},{"post_id":"cjo9uatx3000tmwcz985hphlm","tag_id":"cjo9uatx7000ymwcz73atrzpt","_id":"cjo9uatxq001omwcz8awohotb"},{"post_id":"cjo9uatx3000tmwcz985hphlm","tag_id":"cjo9uatxa0014mwczb4lrmu5z","_id":"cjo9uatxr001smwczo70dppzv"},{"post_id":"cjo9uatx4000umwcznvbfbb7c","tag_id":"cjo9uatxp001lmwczk8i7iobb","_id":"cjo9uatxs001wmwczfg2lr350"},{"post_id":"cjo9uatx6000wmwczymnb6tjh","tag_id":"cjo9uatxp001lmwczk8i7iobb","_id":"cjo9uatxv0021mwcztc5kbgvt"},{"post_id":"cjo9uatxs001xmwcznl91w03e","tag_id":"cjo9uatpp0008mwcz7jkh54ux","_id":"cjo9uatxw0025mwczho1mdo65"},{"post_id":"cjo9uatxu0020mwczghhvy7x3","tag_id":"cjo9uatpp0008mwcz7jkh54ux","_id":"cjo9uatxx0029mwczkly41qcq"},{"post_id":"cjo9uatx80010mwczeq15cnjb","tag_id":"cjo9uatpz000hmwcznxszxdkz","_id":"cjo9uatxz002dmwczgl01593l"},{"post_id":"cjo9uatx80010mwczeq15cnjb","tag_id":"cjo9uatxa0014mwczb4lrmu5z","_id":"cjo9uaty1002hmwczycjdq9ks"},{"post_id":"cjo9uatxv0022mwczv4029mgm","tag_id":"cjo9uatpp0008mwcz7jkh54ux","_id":"cjo9uaty3002kmwcz057after"},{"post_id":"cjo9uatxw0027mwcz5qce06n6","tag_id":"cjo9uatpp0008mwcz7jkh54ux","_id":"cjo9uaty4002omwczftikapkr"},{"post_id":"cjo9uatxx002amwczfzpopnxl","tag_id":"cjo9uatpp0008mwcz7jkh54ux","_id":"cjo9uaty6002rmwczkqu3r6u8"},{"post_id":"cjo9uatx90012mwcze46e3d22","tag_id":"cjo9uatpz000hmwcznxszxdkz","_id":"cjo9uaty7002vmwczf272h45o"},{"post_id":"cjo9uatx90012mwcze46e3d22","tag_id":"cjo9uatxw0026mwczj7on6alh","_id":"cjo9uaty9002ymwcz22snpvme"},{"post_id":"cjo9uaty1002imwczjm5ok3je","tag_id":"cjo9uatpp0008mwcz7jkh54ux","_id":"cjo9uatya0032mwczg6iad3qm"},{"post_id":"cjo9uaty3002lmwcz7j9118th","tag_id":"cjo9uatpp0008mwcz7jkh54ux","_id":"cjo9uatyd0035mwczkaftbo2z"},{"post_id":"cjo9uaty4002pmwczj4aurge2","tag_id":"cjo9uatpp0008mwcz7jkh54ux","_id":"cjo9uatye0039mwczedr0m5yh"},{"post_id":"cjo9uatxb0015mwcz463vtbt1","tag_id":"cjo9uatpz000hmwcznxszxdkz","_id":"cjo9uatyf003cmwczh4xorwur"},{"post_id":"cjo9uatxb0015mwcz463vtbt1","tag_id":"cjo9uaty0002gmwczm8u1qdpe","_id":"cjo9uatyg003gmwczmdhf2j8s"},{"post_id":"cjo9uatxb0015mwcz463vtbt1","tag_id":"cjo9uaty4002nmwczdnbmucbt","_id":"cjo9uatyh003jmwczb43jhwlx"},{"post_id":"cjo9uaty6002smwczi12xn1t9","tag_id":"cjo9uatpp0008mwcz7jkh54ux","_id":"cjo9uatyk003mmwczmcw3d5rm"},{"post_id":"cjo9uaty8002wmwcz82pd3o6z","tag_id":"cjo9uatpp0008mwcz7jkh54ux","_id":"cjo9uatyl003qmwcz8b60camg"},{"post_id":"cjo9uatxh0017mwczfum4qagi","tag_id":"cjo9uatxp001lmwczk8i7iobb","_id":"cjo9uatym003tmwczsyzb6swo"},{"post_id":"cjo9uaty9002zmwczg8cqx263","tag_id":"cjo9uatpp0008mwcz7jkh54ux","_id":"cjo9uatyo003xmwczum7ub1th"},{"post_id":"cjo9uatyb0033mwczdqb2q6hm","tag_id":"cjo9uatpp0008mwcz7jkh54ux","_id":"cjo9uatyr0040mwcz846d8xrt"},{"post_id":"cjo9uatxi001amwcz4omk9np9","tag_id":"cjo9uatxp001lmwczk8i7iobb","_id":"cjo9uatys0044mwczm8ezbpml"},{"post_id":"cjo9uatyd0036mwczjdmdzaua","tag_id":"cjo9uatpp0008mwcz7jkh54ux","_id":"cjo9uatyt0047mwczsp9i7rv0"},{"post_id":"cjo9uatye003amwczdsxc6dsr","tag_id":"cjo9uatpp0008mwcz7jkh54ux","_id":"cjo9uatyv004bmwczsj3vyasx"},{"post_id":"cjo9uatyf003dmwcz0rpoahan","tag_id":"cjo9uatpp0008mwcz7jkh54ux","_id":"cjo9uatyw004emwcz86dia4nb"},{"post_id":"cjo9uatyg003hmwcztq03fnw4","tag_id":"cjo9uatpp0008mwcz7jkh54ux","_id":"cjo9uatyx004imwczu1iqos3f"},{"post_id":"cjo9uatxj001dmwczk3b4nq6d","tag_id":"cjo9uatxp001lmwczk8i7iobb","_id":"cjo9uatyy004lmwczpo0pe92w"},{"post_id":"cjo9uatxj001dmwczk3b4nq6d","tag_id":"cjo9uatyg003fmwcz57f3wj1j","_id":"cjo9uatz0004pmwcz2xo29269"},{"post_id":"cjo9uatxl001imwczt7wetfrf","tag_id":"cjo9uatyk003nmwczswdhqsbx","_id":"cjo9uatz1004smwcz9wyt2cy2"},{"post_id":"cjo9uatxo001kmwcz7qnsktul","tag_id":"cjo9uatyo003wmwczsx20umq2","_id":"cjo9uatz2004vmwczj77zapfz"},{"post_id":"cjo9uatxq001mmwcz9c4zjvdp","tag_id":"cjo9uatyo003wmwczsx20umq2","_id":"cjo9uatz4004zmwczq8vzre2l"},{"post_id":"cjo9uatxq001qmwczl5tggrct","tag_id":"cjo9uatyo003wmwczsx20umq2","_id":"cjo9uatz60052mwczutzlnbe0"},{"post_id":"cjo9uatxr001umwcz5jtjgxwq","tag_id":"cjo9uatyx004hmwczm0g25mg4","_id":"cjo9uatzd005imwczrvfl5k4i"},{"post_id":"cjo9uatxr001umwcz5jtjgxwq","tag_id":"cjo9uatz0004omwczfmfr3i21","_id":"cjo9uatze005lmwczcfrlx0gy"},{"post_id":"cjo9uatxr001umwcz5jtjgxwq","tag_id":"cjo9uatz3004wmwcz6ceb48kx","_id":"cjo9uatzf005qmwcz8ia7e5dz"},{"post_id":"cjo9uatxr001umwcz5jtjgxwq","tag_id":"cjo9uatz70055mwcz598tkws6","_id":"cjo9uatzh005tmwcz6e01dns5"},{"post_id":"cjo9uatxr001umwcz5jtjgxwq","tag_id":"cjo9uatyo003wmwczsx20umq2","_id":"cjo9uatzj005xmwczistt34ei"},{"post_id":"cjo9uatzc005gmwcz5wsx9gow","tag_id":"cjo9uatxa0014mwczb4lrmu5z","_id":"cjo9uatzk0061mwcznzm3k5ub"},{"post_id":"cjo9uatxz002emwczcmydwpjn","tag_id":"cjo9uatpp0008mwcz7jkh54ux","_id":"cjo9uatzl0065mwcz1vvdw9q2"},{"post_id":"cjo9uatxz002emwczcmydwpjn","tag_id":"cjo9uatzc005fmwczs5cwumrl","_id":"cjo9uatzm0069mwczbtojychl"},{"post_id":"cjo9uatzg005rmwczondbaka0","tag_id":"cjo9uatyo003wmwczsx20umq2","_id":"cjo9uatzn006cmwcztio6nsuq"},{"post_id":"cjo9uatzg005rmwczondbaka0","tag_id":"cjo9uatpp0008mwcz7jkh54ux","_id":"cjo9uatzp006gmwczub80oj0o"},{"post_id":"cjo9uatzi005vmwcz61qppvc7","tag_id":"cjo9uatyo003wmwczsx20umq2","_id":"cjo9uatzp006jmwczklt08kry"},{"post_id":"cjo9uatyi003kmwcz6qit8vck","tag_id":"cjo9uatze005mmwczdtryh8ql","_id":"cjo9uatzr006omwcz7dtvl13a"},{"post_id":"cjo9uatyi003kmwcz6qit8vck","tag_id":"cjo9uatzi005umwczfwf4o98i","_id":"cjo9uatzs006rmwczcyajqb04"},{"post_id":"cjo9uatyi003kmwcz6qit8vck","tag_id":"cjo9uatzl0064mwczurwii4u9","_id":"cjo9uatzt006wmwcz37xkea2p"},{"post_id":"cjo9uatyi003kmwcz6qit8vck","tag_id":"cjo9uatyo003wmwczsx20umq2","_id":"cjo9uatzv006zmwczyznsjguo"},{"post_id":"cjo9uatyk003omwczwx8k2th8","tag_id":"cjo9uatzq006kmwczz6mtl08p","_id":"cjo9uatzw0073mwczwjcbfvfk"},{"post_id":"cjo9uatyl003rmwczxbazuaj3","tag_id":"cjo9uatzq006kmwczz6mtl08p","_id":"cjo9uatzy0077mwczy301yfkl"},{"post_id":"cjo9uatym003umwczflha7l6r","tag_id":"cjo9uatzq006kmwczz6mtl08p","_id":"cjo9uatzz007bmwcz83zmd3np"},{"post_id":"cjo9uatyp003ymwcz296cwwu2","tag_id":"cjo9uatzy0078mwczytppxi0l","_id":"cjo9uau06007mmwczqo3rp8v3"},{"post_id":"cjo9uatyp003ymwcz296cwwu2","tag_id":"cjo9uau01007emwczi2drmdv6","_id":"cjo9uau08007pmwcz23n5b1kv"},{"post_id":"cjo9uatyr0041mwczr9p64go9","tag_id":"cjo9uatzq006kmwczz6mtl08p","_id":"cjo9uau09007tmwcza9z3817q"},{"post_id":"cjo9uatyr0041mwczr9p64go9","tag_id":"cjo9uatyo003wmwczsx20umq2","_id":"cjo9uau0a007wmwczs7ew58da"},{"post_id":"cjo9uatys0045mwcz6ssgashp","tag_id":"cjo9uatzq006kmwczz6mtl08p","_id":"cjo9uau0c0080mwcz4m8xgyfb"},{"post_id":"cjo9uatyt0048mwcz55gxtvf3","tag_id":"cjo9uatzq006kmwczz6mtl08p","_id":"cjo9uau0g0086mwczdr37oq74"},{"post_id":"cjo9uatyv004cmwczv11grvy9","tag_id":"cjo9uatzq006kmwczz6mtl08p","_id":"cjo9uau0i008bmwcz7xu0dzf8"},{"post_id":"cjo9uatyw004fmwcze0a7qvpt","tag_id":"cjo9uatzq006kmwczz6mtl08p","_id":"cjo9uau0i008fmwczgi9nbp31"},{"post_id":"cjo9uatyx004jmwczc5wxfwln","tag_id":"cjo9uatzq006kmwczz6mtl08p","_id":"cjo9uau0j008jmwczjgxeqetz"},{"post_id":"cjo9uatyy004mmwczu1pid3nt","tag_id":"cjo9uatzq006kmwczz6mtl08p","_id":"cjo9uau0k008lmwcz4dzy5voq"},{"post_id":"cjo9uatz0004qmwczshr2l22u","tag_id":"cjo9uatzq006kmwczz6mtl08p","_id":"cjo9uau0k008nmwcz383wfd2j"},{"post_id":"cjo9uatz1004tmwcz671sfqp6","tag_id":"cjo9uatzq006kmwczz6mtl08p","_id":"cjo9uau0k008pmwczdtjcc3z8"},{"post_id":"cjo9uatz3004xmwcztz2bxqlj","tag_id":"cjo9uatzq006kmwczz6mtl08p","_id":"cjo9uau0l008rmwcz7xh6usw1"},{"post_id":"cjo9uatz40050mwczds83xz2v","tag_id":"cjo9uatzq006kmwczz6mtl08p","_id":"cjo9uau0l008tmwcz4yjmjwbj"},{"post_id":"cjo9uatz60053mwcz2jsmo03t","tag_id":"cjo9uatpz000hmwcznxszxdkz","_id":"cjo9uau0m008vmwcz5tceb43w"},{"post_id":"cjo9uatz60053mwcz2jsmo03t","tag_id":"cjo9uatzq006kmwczz6mtl08p","_id":"cjo9uau0m008wmwczmg7hyz10"},{"post_id":"cjo9uatz80056mwczy9n5gwv6","tag_id":"cjo9uatpz000hmwcznxszxdkz","_id":"cjo9uau0m008ymwczfvxd6688"},{"post_id":"cjo9uatz80056mwczy9n5gwv6","tag_id":"cjo9uatzq006kmwczz6mtl08p","_id":"cjo9uau0m008zmwczeexldxpj"},{"post_id":"cjo9uatz90058mwczgtuh7zbz","tag_id":"cjo9uatpz000hmwcznxszxdkz","_id":"cjo9uau0n0091mwczx3fdxd1d"},{"post_id":"cjo9uatz90058mwczgtuh7zbz","tag_id":"cjo9uatzq006kmwczz6mtl08p","_id":"cjo9uau0n0092mwczop55licg"},{"post_id":"cjo9uatzb005bmwczv3hxg91v","tag_id":"cjo9uatpz000hmwcznxszxdkz","_id":"cjo9uau0n0094mwczwwbnn7sm"},{"post_id":"cjo9uatzb005bmwczv3hxg91v","tag_id":"cjo9uatzq006kmwczz6mtl08p","_id":"cjo9uau0n0095mwcza9oc11cy"},{"post_id":"cjo9uatzc005dmwczbt42a02e","tag_id":"cjo9uau0n0093mwczyye8hcv8","_id":"cjo9uau0o0098mwczwa2jc6u7"},{"post_id":"cjo9uatzc005dmwczbt42a02e","tag_id":"cjo9uatxa0014mwczb4lrmu5z","_id":"cjo9uau0o0099mwczoa72f1rk"},{"post_id":"cjo9uatzc005dmwczbt42a02e","tag_id":"cjo9uau0n0096mwczol6ykb51","_id":"cjo9uau0o009bmwczejo1e7ke"},{"post_id":"cjo9uatzd005jmwczkxp5bi1v","tag_id":"cjo9uau0n0097mwczdbbl2zr5","_id":"cjo9uau0o009dmwcz8fytg7bl"},{"post_id":"cjo9uatzd005jmwczkxp5bi1v","tag_id":"cjo9uau0o009amwcz9dmphcj2","_id":"cjo9uau0o009emwczxu2052sn"},{"post_id":"cjo9uatze005omwczljbeehzn","tag_id":"cjo9uau0o009cmwczfmj5o72d","_id":"cjo9uau0p009gmwczn789f1qv"},{"post_id":"cjo9uatzj005zmwczaou1g6cu","tag_id":"cjo9uatyo003wmwczsx20umq2","_id":"cjo9uau0p009imwczos2x9i7c"},{"post_id":"cjo9uatzj005zmwczaou1g6cu","tag_id":"cjo9uatzl0064mwczurwii4u9","_id":"cjo9uau0p009jmwcz277vwpuz"},{"post_id":"cjo9uatzj005zmwczaou1g6cu","tag_id":"cjo9uatpp0008mwcz7jkh54ux","_id":"cjo9uau0p009lmwcztd1qosiy"},{"post_id":"cjo9uatzm0066mwczfmhivjun","tag_id":"cjo9uau0p009hmwcze9rl8ci6","_id":"cjo9uau0p009mmwczywjeg7cn"},{"post_id":"cjo9uatzn006amwcz2ionivok","tag_id":"cjo9uau0p009kmwczco3x64ss","_id":"cjo9uau0q009omwcztqbvtwm9"},{"post_id":"cjo9uatzo006emwczc1k4eeik","tag_id":"cjo9uatyo003wmwczsx20umq2","_id":"cjo9uau0q009rmwczn6i0hei3"},{"post_id":"cjo9uatzo006emwczc1k4eeik","tag_id":"cjo9uau0p009nmwczpdkac6f0","_id":"cjo9uau0q009smwczyqil0j4j"},{"post_id":"cjo9uatzo006emwczc1k4eeik","tag_id":"cjo9uau0q009pmwczfowrr37n","_id":"cjo9uau0q009umwczbo5sox3x"},{"post_id":"cjo9uatzp006hmwcz86b1pg1k","tag_id":"cjo9uau0q009qmwczonimjd2m","_id":"cjo9uau0r009wmwczk11tqekd"},{"post_id":"cjo9uatzp006hmwcz86b1pg1k","tag_id":"cjo9uatpz000hmwcznxszxdkz","_id":"cjo9uau0r009xmwczbe5qqhds"},{"post_id":"cjo9uatzp006hmwcz86b1pg1k","tag_id":"cjo9uau0q009tmwczu0h2g4id","_id":"cjo9uau0r009zmwcz5y92mtvv"},{"post_id":"cjo9uatzq006mmwczad8fray3","tag_id":"cjo9uatyo003wmwczsx20umq2","_id":"cjo9uau0r00a0mwcz3xp1qno5"},{"post_id":"cjo9uatzq006mmwczad8fray3","tag_id":"cjo9uau0p009nmwczpdkac6f0","_id":"cjo9uau0s00a2mwcz3f04zoml"},{"post_id":"cjo9uatzr006pmwcz7ablbnlq","tag_id":"cjo9uau0p009nmwczpdkac6f0","_id":"cjo9uau0u00a4mwczf6tadlbd"},{"post_id":"cjo9uatzr006pmwcz7ablbnlq","tag_id":"cjo9uau0s00a1mwczbzflekjo","_id":"cjo9uau0u00a5mwczbv6crztf"},{"post_id":"cjo9uatzr006pmwcz7ablbnlq","tag_id":"cjo9uatyo003wmwczsx20umq2","_id":"cjo9uau0u00a7mwcz6bzvmlzj"},{"post_id":"cjo9uatzt006tmwczqly961gb","tag_id":"cjo9uatzy0078mwczytppxi0l","_id":"cjo9uau0w00abmwcz4w6sihmu"},{"post_id":"cjo9uatzt006tmwczqly961gb","tag_id":"cjo9uau0u00a6mwczte8h18s7","_id":"cjo9uau0w00acmwczvew7el4f"},{"post_id":"cjo9uatzt006tmwczqly961gb","tag_id":"cjo9uau0u00a8mwcznpqjx04c","_id":"cjo9uau0w00aemwczrhw3c7i7"},{"post_id":"cjo9uatzt006tmwczqly961gb","tag_id":"cjo9uau0u00a9mwcziz67kb3i","_id":"cjo9uau0w00afmwcztpufyj9i"},{"post_id":"cjo9uatzu006xmwcziz13ug9n","tag_id":"cjo9uau0u00aamwczw1z5cx5c","_id":"cjo9uau0x00ahmwczjkr96f6p"},{"post_id":"cjo9uatzu006xmwcziz13ug9n","tag_id":"cjo9uau0w00admwczmxe0iocz","_id":"cjo9uau0y00aimwczp1hrw4o3"},{"post_id":"cjo9uatzw0071mwczt5pinpgl","tag_id":"cjo9uau0w00agmwczz6ikj4ol","_id":"cjo9uau0y00akmwczk2u8pdo2"},{"post_id":"cjo9uatzx0075mwcz51go8brt","tag_id":"cjo9uau0y00ajmwczxfp4tz57","_id":"cjo9uau0z00ammwczws2sri22"},{"post_id":"cjo9uatzy0079mwczqosziwtd","tag_id":"cjo9uatpz000hmwcznxszxdkz","_id":"cjo9uau1000aomwczksl4amw0"},{"post_id":"cjo9uatzy0079mwczqosziwtd","tag_id":"cjo9uau0z00almwczfz3lx27r","_id":"cjo9uau1000apmwczjr5losyq"},{"post_id":"cjo9uatzz007cmwczzhpg88xh","tag_id":"cjo9uatpz000hmwcznxszxdkz","_id":"cjo9uau1100asmwcz3bamt3ps"},{"post_id":"cjo9uatzz007cmwczzhpg88xh","tag_id":"cjo9uau0z00anmwczrnrf5nsa","_id":"cjo9uau1100atmwczmig5af2f"},{"post_id":"cjo9uatzz007cmwczzhpg88xh","tag_id":"cjo9uau1000aqmwczgxqp3itq","_id":"cjo9uau1100avmwczq5p6729l"},{"post_id":"cjo9uau01007fmwczb5y4mxxa","tag_id":"cjo9uau1000armwcz2ndpauo7","_id":"cjo9uau1100awmwczk8c71ifc"},{"post_id":"cjo9uau02007hmwczjym9rg3a","tag_id":"cjo9uau1100aumwczsidjl1lw","_id":"cjo9uau1200aymwcz7tyzsvph"},{"post_id":"cjo9uau04007jmwczhml6ji6p","tag_id":"cjo9uau1100aumwczsidjl1lw","_id":"cjo9uau1200b0mwczes9vj6j1"},{"post_id":"cjo9uau06007nmwczzigont19","tag_id":"cjo9uau1100aumwczsidjl1lw","_id":"cjo9uau1300b2mwczsva96bv9"},{"post_id":"cjo9uau08007qmwcziomprbkn","tag_id":"cjo9uau1100aumwczsidjl1lw","_id":"cjo9uau1300b4mwczi7tjlcyc"},{"post_id":"cjo9uau09007umwcz3z5u7wg1","tag_id":"cjo9uau1100aumwczsidjl1lw","_id":"cjo9uau1400b6mwcz83py5h1r"},{"post_id":"cjo9uau0a007xmwczbh0ursd8","tag_id":"cjo9uau1100aumwczsidjl1lw","_id":"cjo9uau1500b8mwczl7xknupe"},{"post_id":"cjo9uau0c0081mwczb1wdhl51","tag_id":"cjo9uau1100aumwczsidjl1lw","_id":"cjo9uau1500bamwczn2opko8q"},{"post_id":"cjo9uau0d0083mwczyfyzsysi","tag_id":"cjo9uau1100aumwczsidjl1lw","_id":"cjo9uau1600bcmwczu4lq5fgr"},{"post_id":"cjo9uau0g0087mwcz1z1fc0hs","tag_id":"cjo9uau1100aumwczsidjl1lw","_id":"cjo9uau1600bdmwczsk5chi47"},{"post_id":"cjo9uau2u00bemwczqz24c7to","tag_id":"cjo9uatx7000ymwcz73atrzpt","_id":"cjo9uau2v00bgmwczs7jcsb04"},{"post_id":"cjo9uau2u00bemwczqz24c7to","tag_id":"cjo9uatxa0014mwczb4lrmu5z","_id":"cjo9uau2x00bjmwcz7vdvqbvy"},{"post_id":"cjo9uau2x00bkmwczu7623m41","tag_id":"cjo9uatpz000hmwcznxszxdkz","_id":"cjo9uau2z00bomwczcu0g17s8"},{"post_id":"cjo9uau2x00bkmwczu7623m41","tag_id":"cjo9uatq1000nmwczl0ne90eb","_id":"cjo9uau3000bsmwcze56uguun"},{"post_id":"cjo9uau2v00bfmwczxm4as00x","tag_id":"cjo9uau2w00bimwczvhku3mvy","_id":"cjo9uau3300c0mwcztxsdmzfu"},{"post_id":"cjo9uau2v00bfmwczxm4as00x","tag_id":"cjo9uau2z00bqmwczcgf0sgkq","_id":"cjo9uau3300c2mwczt8wm56rv"},{"post_id":"cjo9uau2w00bhmwcz5rlhsaax","tag_id":"cjo9uatpz000hmwcznxszxdkz","_id":"cjo9uau3400c5mwczzgn2bcbj"},{"post_id":"cjo9uau2w00bhmwcz5rlhsaax","tag_id":"cjo9uau3200bymwczd8f5qztc","_id":"cjo9uau3400c7mwcz8qnaajbb"},{"post_id":"cjo9uau2y00bmmwcz1o8nupjm","tag_id":"cjo9uatzy0078mwczytppxi0l","_id":"cjo9uau3500cbmwczebjpwfyq"},{"post_id":"cjo9uau2y00bmmwcz1o8nupjm","tag_id":"cjo9uau3300c3mwczj9lrep4b","_id":"cjo9uau3500ccmwcze0sagj39"},{"post_id":"cjo9uau2y00bmmwcz1o8nupjm","tag_id":"cjo9uau3400c8mwcz9nhx61bo","_id":"cjo9uau3500cemwczduhn8anb"},{"post_id":"cjo9uau2z00bpmwczqkwp4wzd","tag_id":"cjo9uau3400camwczk16akd5u","_id":"cjo9uau3600chmwczrx0rf2om"},{"post_id":"cjo9uau2z00bpmwczqkwp4wzd","tag_id":"cjo9uau3500cdmwczkx10ukfc","_id":"cjo9uau3600cimwcztdxecor6"},{"post_id":"cjo9uau2z00bpmwczqkwp4wzd","tag_id":"cjo9uau3500cfmwcz0xm6hhz6","_id":"cjo9uau3600ckmwczvgmrktpq"},{"post_id":"cjo9uau3000btmwczphcgorww","tag_id":"cjo9uatzq006kmwczz6mtl08p","_id":"cjo9uau3600clmwczu82j864c"},{"post_id":"cjo9uau3000btmwczphcgorww","tag_id":"cjo9uau3500cgmwcz0mzopf54","_id":"cjo9uau3700cnmwcz7wndvxj7"},{"post_id":"cjo9uau3100bwmwczjuyy4pz0","tag_id":"cjo9uau0p009nmwczpdkac6f0","_id":"cjo9uau3700comwcz638nb0gr"},{"post_id":"cjo9uau3100bwmwczjuyy4pz0","tag_id":"cjo9uatyo003wmwczsx20umq2","_id":"cjo9uau3700cpmwczqhm1w5ya"},{"post_id":"cjo9uau3100bwmwczjuyy4pz0","tag_id":"cjo9uau3400camwczk16akd5u","_id":"cjo9uau3700cqmwczu0cs9nxh"},{"post_id":"cjo9uau3200bzmwczojbumkf4","tag_id":"cjo9uau3600cmmwczggt4bzm5","_id":"cjo9uau3700crmwczeo9hkl5h"},{"post_id":"cjo9uau3i00csmwczt5cyjvg8","tag_id":"cjo9uau3l00cumwczve52s23q","_id":"cjo9uau3p00d1mwcz9xbhrvfh"},{"post_id":"cjo9uau3i00csmwczt5cyjvg8","tag_id":"cjo9uau3o00cymwczv00n7dt7","_id":"cjo9uau3p00d2mwczijpskmx5"},{"post_id":"cjo9uau3j00ctmwczx01h02wn","tag_id":"cjo9uau3p00d0mwczdgppyxl0","_id":"cjo9uau3q00d7mwczwah0yrfu"},{"post_id":"cjo9uau3j00ctmwczx01h02wn","tag_id":"cjo9uau3p00d3mwczbxj73jco","_id":"cjo9uau3q00d8mwczz0hg701l"},{"post_id":"cjo9uau3j00ctmwczx01h02wn","tag_id":"cjo9uau3p00d4mwczkhlq1h40","_id":"cjo9uau3q00damwczceywrj6w"},{"post_id":"cjo9uau3j00ctmwczx01h02wn","tag_id":"cjo9uau3q00d5mwczkqa54jp0","_id":"cjo9uau3q00dbmwczh2mm7mxn"},{"post_id":"cjo9uau3l00cvmwczgevrk8wn","tag_id":"cjo9uau3q00d6mwczg6r4icyo","_id":"cjo9uau3r00dcmwczyd77az6v"},{"post_id":"cjo9uau3l00cvmwczgevrk8wn","tag_id":"cjo9uatyo003wmwczsx20umq2","_id":"cjo9uau3r00ddmwczo3if2o5w"},{"post_id":"cjo9uau3l00cvmwczgevrk8wn","tag_id":"cjo9uau3q00d9mwcziz0133d5","_id":"cjo9uau3r00demwcz0tfx56rv"},{"post_id":"cjo9uau3l00cvmwczgevrk8wn","tag_id":"cjo9uatpp0008mwcz7jkh54ux","_id":"cjo9uau3r00dfmwcz3mlu1zkb"},{"post_id":"cjo9uau5c00dgmwcz8yc0bn0o","tag_id":"cjo9uaty4002nmwczdnbmucbt","_id":"cjo9uau5e00dhmwcz78ppcoqe"},{"post_id":"cjo9uau5c00dgmwcz8yc0bn0o","tag_id":"cjo9uatxa0014mwczb4lrmu5z","_id":"cjo9uau5e00dimwczbi28fna9"}],"Tag":[{"name":"linux","_id":"cjo9uatpp0008mwcz7jkh54ux"},{"name":"反应式编程","_id":"cjo9uatpw000dmwczn6lsskhq"},{"name":"java","_id":"cjo9uatpz000hmwcznxszxdkz"},{"name":"jvm","_id":"cjo9uatq1000nmwczl0ne90eb"},{"name":"-devops -tools","_id":"cjo9uatx3000smwczem7ayjqz"},{"name":"guava","_id":"cjo9uatx7000ymwcz73atrzpt"},{"name":"tools","_id":"cjo9uatxa0014mwczb4lrmu5z"},{"name":"java基础","_id":"cjo9uatxp001lmwczk8i7iobb"},{"name":"web service","_id":"cjo9uatxw0026mwczj7on6alh"},{"name":"xml","_id":"cjo9uaty0002gmwczm8u1qdpe"},{"name":"json","_id":"cjo9uaty4002nmwczdnbmucbt"},{"name":"jsp","_id":"cjo9uatyg003fmwcz57f3wj1j"},{"name":"dockerfile","_id":"cjo9uatyk003nmwczswdhqsbx"},{"name":"docker","_id":"cjo9uatyo003wmwczsx20umq2"},{"name":"日志","_id":"cjo9uatyx004hmwczm0g25mg4"},{"name":"es","_id":"cjo9uatz0004omwczfmfr3i21"},{"name":"kibana","_id":"cjo9uatz3004wmwcz6ceb48kx"},{"name":"filebeat","_id":"cjo9uatz70055mwcz598tkws6"},{"name":"shell","_id":"cjo9uatzc005fmwczs5cwumrl"},{"name":"srping cloud","_id":"cjo9uatze005mmwczdtryh8ql"},{"name":"eureka","_id":"cjo9uatzi005umwczfwf4o98i"},{"name":"swarm","_id":"cjo9uatzl0064mwczurwii4u9"},{"name":"spring","_id":"cjo9uatzq006kmwczz6mtl08p"},{"name":"spring boot","_id":"cjo9uatzy0078mwczytppxi0l"},{"name":"定时器","_id":"cjo9uau01007emwczi2drmdv6"},{"name":"git lfs","_id":"cjo9uau0n0093mwczyye8hcv8"},{"name":"github","_id":"cjo9uau0n0096mwczol6ykb51"},{"name":"代码质量","_id":"cjo9uau0n0097mwczdbbl2zr5"},{"name":"持续集成","_id":"cjo9uau0o009amwcz9dmphcj2"},{"name":"-linux","_id":"cjo9uau0o009cmwczfmj5o72d"},{"name":"-spring cloud - feign - http","_id":"cjo9uau0p009hmwcze9rl8ci6"},{"name":"git","_id":"cjo9uau0p009kmwczco3x64ss"},{"name":"k8s","_id":"cjo9uau0p009nmwczpdkac6f0"},{"name":"日志采集","_id":"cjo9uau0q009pmwczfowrr37n"},{"name":"maven","_id":"cjo9uau0q009qmwczonimjd2m"},{"name":"tomcat","_id":"cjo9uau0q009tmwczu0h2g4id"},{"name":"rancher","_id":"cjo9uau0s00a1mwczbzflekjo"},{"name":"mvc","_id":"cjo9uau0u00a6mwczte8h18s7"},{"name":"实战","_id":"cjo9uau0u00a8mwcznpqjx04c"},{"name":"messageConverter","_id":"cjo9uau0u00a9mwcziz67kb3i"},{"name":"windows","_id":"cjo9uau0u00aamwczw1z5cx5c"},{"name":"vbox","_id":"cjo9uau0w00admwczmxe0iocz"},{"name":"yml、yaml","_id":"cjo9uau0w00agmwczz6ikj4ol"},{"name":"乱码","_id":"cjo9uau0y00ajmwczxfp4tz57"},{"name":"安全","_id":"cjo9uau0z00almwczfz3lx27r"},{"name":"js","_id":"cjo9uau0z00anmwczrnrf5nsa"},{"name":"服务端推送","_id":"cjo9uau1000aqmwczgxqp3itq"},{"name":"跨域","_id":"cjo9uau1000armwcz2ndpauo7"},{"name":"设计模式","_id":"cjo9uau1100aumwczsidjl1lw"},{"name":"jdk8","_id":"cjo9uau2w00bimwczvhku3mvy"},{"name":"time","_id":"cjo9uau2z00bqmwczcgf0sgkq"},{"name":"stream计算","_id":"cjo9uau3200bymwczd8f5qztc"},{"name":"cache","_id":"cjo9uau3300c3mwczj9lrep4b"},{"name":"redis","_id":"cjo9uau3400c8mwcz9nhx61bo"},{"name":"实用","_id":"cjo9uau3400camwczk16akd5u"},{"name":"spring cloud","_id":"cjo9uau3500cdmwczkx10ukfc"},{"name":"分布式","_id":"cjo9uau3500cfmwcz0xm6hhz6"},{"name":"quartz","_id":"cjo9uau3500cgmwcz0mzopf54"},{"name":"-log4j2 -socket -elk","_id":"cjo9uau3600cmmwczggt4bzm5"},{"name":"netty","_id":"cjo9uau3l00cumwczve52s23q"},{"name":"传输协议","_id":"cjo9uau3o00cymwczv00n7dt7"},{"name":"cdn","_id":"cjo9uau3p00d0mwczdgppyxl0"},{"name":"oss","_id":"cjo9uau3p00d3mwczbxj73jco"},{"name":"http/https","_id":"cjo9uau3p00d4mwczkhlq1h40"},{"name":"阿里云","_id":"cjo9uau3q00d5mwczkqa54jp0"},{"name":"jenkins","_id":"cjo9uau3q00d6mwczg6r4icyo"},{"name":"groovy","_id":"cjo9uau3q00d9mwcziz0133d5"}]}}