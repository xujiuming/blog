<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ming</title>
  
  <subtitle>ming</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.xujiuming.com/"/>
  <updated>2018-07-19T06:05:06.718Z</updated>
  <id>http://www.xujiuming.com/</id>
  
  <author>
    <name>ming</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>常用json解析框架对比</title>
    <link href="http://www.xujiuming.com/ming/fd97bf37.html"/>
    <id>http://www.xujiuming.com/ming/fd97bf37.html</id>
    <published>2018-07-17T06:52:41.000Z</published>
    <updated>2018-07-19T06:05:06.718Z</updated>
    
    <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>最近使用基于http作为rpc调用协议的时候 由于选择使用json来传递数据<br>不得不做一波常用的json解析框架的性能、稳定性、可定制性、使用难度、对复杂对象的支持程度等等方面来对比一下<br>只针对常用的几种 json解析框架对比 有些小众在某些方面很优秀的不再对比之列</p><h4 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h4><table><thead><tr><th style="text-align:left">名称</th><th style="text-align:left">使用方式</th><th style="text-align:left">可配置性</th><th style="text-align:left">优点</th><th>缺点</th><th>备注</th></tr></thead><tbody><tr><td style="text-align:left">fast json</td><td style="text-align:left">JSON.toJSONString、JSON.parseObject</td><td style="text-align:left">调用toJSONString、parseObject方法的重载方法去配置</td><td style="text-align:left">使用简单、简单的转换可以直接使用静态方法使用</td><td>对于复杂对象处理非常弱、对于泛型处理非常弱</td><td>处理简单的对象与json字符串转换的时候 比较适用</td></tr><tr><td style="text-align:left">jackson</td><td style="text-align:left">获取objectMapper对象 通过writeValueAsString()、 readValue()方式互相转换</td><td style="text-align:left">提供DeserializationConfig、SerializationConfig各种配置</td><td style="text-align:left">功能完善、对各种复杂的情况都能使用、对于泛型支持较为完善</td><td>功能太多导致使用复杂、配置复杂、需要new</td><td>spring等常用框架中使用的就是jackson 即保证速度也保证适应于各种复杂情况</td><td>处理复杂的对象 又不想引入gson 那么直接使用jackson 这个速度和fastjson差不多但是能处理很多复杂的功能</td></tr><tr><td style="text-align:left">gson</td><td style="text-align:left">获取Gson对象 通过toJson()、fromJson()方法互相转换</td><td style="text-align:left">提供GsonBuilder 去配置不同处理方式的的gson实例</td><td style="text-align:left">功能完善、对泛型支持较为完善</td><td>速度和jackson和fastjson相比 略慢、使用的时候 要专门引用gson 依赖、需要一个实例对象</td><td>用于处理复杂的对象和json字符串相互转换 不过速度比不上jackson 不过也够用了</td></tr><tr><td style="text-align:left">genson</td><td style="text-align:left">获取genson对象 通过serialize()、deserialize()来互相转换</td><td style="text-align:left">提供GensonBuilder 去配置不同的处理方式的 gensonBuilder</td><td style="text-align:left">对泛型支持较为完善</td><td>需要实例对象、速度略慢</td><td>这个用的少 如果要对简单对象转换直接fastjson、复杂的又jackson、gson 这个看不到什么特殊的厉害的地方</td></tr></tbody></table><h4 id="测试用例"><a href="#测试用例" class="headerlink" title="测试用例"></a>测试用例</h4><h5 id="基础类"><a href="#基础类" class="headerlink" title="基础类"></a>基础类</h5><ul><li><p>简单对象<br>一个只有简单属性的 类</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">package com.ming.json;</span><br><span class="line"></span><br><span class="line">import java.math.BigDecimal;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 普通对象</span><br><span class="line"> *</span><br><span class="line"> * @author ming</span><br><span class="line"> * @date 2018-07-17 16:11:05</span><br><span class="line"> */</span><br><span class="line">public class MyData &#123;</span><br><span class="line">    private Integer id;</span><br><span class="line">    private String name;</span><br><span class="line">    private BigDecimal age;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return &quot;MyData&#123;&quot; +</span><br><span class="line">                &quot;id=&quot; + id +</span><br><span class="line">                &quot;, name=&apos;&quot; + name + &apos;\&apos;&apos; +</span><br><span class="line">                &quot;, age=&quot; + age +</span><br><span class="line">                &apos;&#125;&apos;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Integer getId() &#123;</span><br><span class="line">        return id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setId(Integer id) &#123;</span><br><span class="line">        this.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getName() &#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setName(String name) &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public BigDecimal getAge() &#123;</span><br><span class="line">        return age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setAge(BigDecimal age) &#123;</span><br><span class="line">        this.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>复杂对象<br>一个稍微复杂点的类 包含属性是对象的这种类 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">package com.ming.json;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 内嵌对象的对象</span><br><span class="line"> *</span><br><span class="line"> * @author ming</span><br><span class="line"> * @date 2018-07-17 16:11:15</span><br><span class="line"> */</span><br><span class="line">public class CyclicData &#123;</span><br><span class="line">    private Integer id;</span><br><span class="line">    private CyclicData cyclicData;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return &quot;CyclicData&#123;&quot; +</span><br><span class="line">                &quot;id=&quot; + id +</span><br><span class="line">                &quot;, cyclicData=&quot; + cyclicData +</span><br><span class="line">                &apos;&#125;&apos;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Integer getId() &#123;</span><br><span class="line">        return id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setId(Integer id) &#123;</span><br><span class="line">        this.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public CyclicData getCyclicData() &#123;</span><br><span class="line">        return cyclicData;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setCyclicData(CyclicData cyclicData) &#123;</span><br><span class="line">        this.cyclicData = cyclicData;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>DataUtils<br>构建统一的测试数据的工具类 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br></pre></td><td class="code"><pre><span class="line">package com.ming.json;</span><br><span class="line"></span><br><span class="line">import java.math.BigDecimal;</span><br><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.HashMap;</span><br><span class="line">import java.util.List;</span><br><span class="line">import java.util.Map;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 数据工具类 用来获取数据 提供给各种json框架解析</span><br><span class="line"> *</span><br><span class="line"> * @author ming</span><br><span class="line"> * @date 2018-07-17 15:30:30</span><br><span class="line"> */</span><br><span class="line">public class DataUtils &#123;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 获取String list</span><br><span class="line">     *</span><br><span class="line">     * @param size</span><br><span class="line">     * @author ming</span><br><span class="line">     * @date 2018-07-17 16:08:50</span><br><span class="line">     */</span><br><span class="line">    public static List&lt;String&gt; getStringList(int size) &#123;</span><br><span class="line">        List&lt;String&gt; resultList = new ArrayList&lt;&gt;();</span><br><span class="line">        for (int i = 0; i &lt; size; i++) &#123;</span><br><span class="line">            resultList.add(&quot;test&quot; + i);</span><br><span class="line">        &#125;</span><br><span class="line">        return resultList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 获取String  String map</span><br><span class="line">     *</span><br><span class="line">     * @param size</span><br><span class="line">     * @author ming</span><br><span class="line">     * @date 2018-07-17 16:09:04</span><br><span class="line">     */</span><br><span class="line">    public static Map&lt;String, String&gt; getStringMap(int size) &#123;</span><br><span class="line">        Map&lt;String, String&gt; resultMap = new HashMap&lt;&gt;();</span><br><span class="line">        for (int i = 0; i &lt; size; i++) &#123;</span><br><span class="line">            resultMap.put(&quot;k&quot; + i, &quot;v&quot; + i);</span><br><span class="line">        &#125;</span><br><span class="line">        return resultMap;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 获取 自定义对象</span><br><span class="line">     *</span><br><span class="line">     * @author ming</span><br><span class="line">     * @date 2018-07-17 16:09:20</span><br><span class="line">     */</span><br><span class="line">    public static MyData getMyData() &#123;</span><br><span class="line">        MyData myData = new MyData();</span><br><span class="line">        myData.setId(1);</span><br><span class="line">        myData.setName(&quot;ming&quot;);</span><br><span class="line">        myData.setAge(BigDecimal.TEN);</span><br><span class="line">        return myData;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 获取自定义对象 list</span><br><span class="line">     *</span><br><span class="line">     * @param size</span><br><span class="line">     * @author ming</span><br><span class="line">     * @date 2018-07-17 16:09:30</span><br><span class="line">     */</span><br><span class="line">    public static List&lt;MyData&gt; getMyDataList(int size) &#123;</span><br><span class="line">        List&lt;MyData&gt; resultList = new ArrayList&lt;&gt;();</span><br><span class="line">        for (int i = 0; i &lt; size; i++) &#123;</span><br><span class="line">            MyData tmp = new MyData();</span><br><span class="line">            tmp.setId(i);</span><br><span class="line">            tmp.setName(&quot;ming&quot; + i);</span><br><span class="line">            tmp.setAge(BigDecimal.valueOf(i));</span><br><span class="line">            resultList.add(tmp);</span><br><span class="line">        &#125;</span><br><span class="line">        return resultList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 获取String  自定义对象 map</span><br><span class="line">     *</span><br><span class="line">     * @param size</span><br><span class="line">     * @author ming</span><br><span class="line">     * @date 2018-07-17 16:09:47</span><br><span class="line">     */</span><br><span class="line">    public static Map&lt;String, MyData&gt; getMyDataMap(int size) &#123;</span><br><span class="line">        Map&lt;String, MyData&gt; resultMap = new HashMap&lt;&gt;();</span><br><span class="line">        for (int i = 0; i &lt; size; i++) &#123;</span><br><span class="line">            MyData tmp = new MyData();</span><br><span class="line">            tmp.setId(i);</span><br><span class="line">            tmp.setName(&quot;ming&quot; + i);</span><br><span class="line">            tmp.setAge(BigDecimal.valueOf(i));</span><br><span class="line">            resultMap.put(&quot;k&quot; + i, tmp);</span><br><span class="line">        &#125;</span><br><span class="line">        return resultMap;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 获取内嵌对象的对象</span><br><span class="line">     *</span><br><span class="line">     * @author ming</span><br><span class="line">     * @date 2018-07-17 16:10:03</span><br><span class="line">     */</span><br><span class="line"></span><br><span class="line">    public static CyclicData getCyclicData() &#123;</span><br><span class="line">        CyclicData result = new CyclicData();</span><br><span class="line">        result.setId(1);</span><br><span class="line"></span><br><span class="line">        CyclicData tmp = new CyclicData();</span><br><span class="line">        tmp.setId(2);</span><br><span class="line">        result.setCyclicData(tmp);</span><br><span class="line"></span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 获取内嵌对象的对象 的list</span><br><span class="line">     *</span><br><span class="line">     * @param size</span><br><span class="line">     * @author ming</span><br><span class="line">     * @date 2018-07-17 16:10:17</span><br><span class="line">     */</span><br><span class="line">    public static List&lt;CyclicData&gt; getCyclicDataList(int size) &#123;</span><br><span class="line">        List&lt;CyclicData&gt; resultList = new ArrayList&lt;&gt;();</span><br><span class="line">        for (int i = 0; i &lt; size; i++) &#123;</span><br><span class="line">            CyclicData tmp = new CyclicData();</span><br><span class="line">            tmp.setId(i);</span><br><span class="line"></span><br><span class="line">            CyclicData t = new CyclicData();</span><br><span class="line">            tmp.setId(i * 1000);</span><br><span class="line">            tmp.setCyclicData(t);</span><br><span class="line">            resultList.add(tmp);</span><br><span class="line">        &#125;</span><br><span class="line">        return resultList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 获取内嵌对象的对象的map</span><br><span class="line">     *</span><br><span class="line">     * @param size</span><br><span class="line">     * @author ming</span><br><span class="line">     * @date 2018-07-17 16:10:32</span><br><span class="line">     */</span><br><span class="line">    public static Map&lt;String, CyclicData&gt; getCyclicDataMap(int size) &#123;</span><br><span class="line">        Map&lt;String, CyclicData&gt; resultMap = new HashMap&lt;&gt;();</span><br><span class="line">        for (int i = 0; i &lt; size; i++) &#123;</span><br><span class="line">            CyclicData tmp = new CyclicData();</span><br><span class="line">            tmp.setId(i);</span><br><span class="line"></span><br><span class="line">            CyclicData t = new CyclicData();</span><br><span class="line">            tmp.setId(i * 1000);</span><br><span class="line">            tmp.setCyclicData(t);</span><br><span class="line">            resultMap.put(&quot;k&quot; + i, tmp);</span><br><span class="line">        &#125;</span><br><span class="line">        return resultMap;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 获取 kv 都是对象的map</span><br><span class="line">     *</span><br><span class="line">     * @param size</span><br><span class="line">     * @author ming</span><br><span class="line">     * @date 2018-07-17 16:10:49</span><br><span class="line">     */</span><br><span class="line">    public static Map&lt;MyData, CyclicData&gt; getMyDataAndCyclicDataMap(int size) &#123;</span><br><span class="line">        Map&lt;MyData, CyclicData&gt; resultMap = new HashMap&lt;&gt;();</span><br><span class="line">        for (int i = 0; i &lt; size; i++) &#123;</span><br><span class="line">            CyclicData tmp = new CyclicData();</span><br><span class="line">            tmp.setId(i);</span><br><span class="line"></span><br><span class="line">            CyclicData t = new CyclicData();</span><br><span class="line">            tmp.setId(i * 1000);</span><br><span class="line">            tmp.setCyclicData(t);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            MyData k = new MyData();</span><br><span class="line">            k.setId(i);</span><br><span class="line">            k.setName(&quot;ming&quot; + i);</span><br><span class="line">            k.setAge(BigDecimal.valueOf(i));</span><br><span class="line"></span><br><span class="line">            resultMap.put(k, tmp);</span><br><span class="line">        &#125;</span><br><span class="line">        return resultMap;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>测试用例的统一接口<br>定义 各种解析框架 的测试用例的格式 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">package com.ming.json;</span><br><span class="line"></span><br><span class="line">import com.fasterxml.jackson.core.JsonProcessingException;</span><br><span class="line"></span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line">public interface TestJson &#123;</span><br><span class="line"></span><br><span class="line">    //测试 对象转换 json 字符串 -------------------------------------------------------------------------------------------</span><br><span class="line">    void testStringListObjToString() throws JsonProcessingException;</span><br><span class="line"></span><br><span class="line">    void testStringMapObjToString() throws JsonProcessingException;</span><br><span class="line"></span><br><span class="line">    void testMyDataToString() throws JsonProcessingException;</span><br><span class="line"></span><br><span class="line">    void testMyDataListToString() throws JsonProcessingException;</span><br><span class="line"></span><br><span class="line">    void testMyDataMapToString() throws JsonProcessingException;</span><br><span class="line"></span><br><span class="line">    void testCyclicDataToString() throws JsonProcessingException;</span><br><span class="line"></span><br><span class="line">    void testCyclicDataListToString() throws JsonProcessingException;</span><br><span class="line"></span><br><span class="line">    void testCyclicDataMapToString() throws JsonProcessingException;</span><br><span class="line"></span><br><span class="line">    void testMyDataAndCyclicDataMapToString() throws JsonProcessingException;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    //json 字符串转换 对象测试方法------------------------------------------------------------------------------------------</span><br><span class="line">    void zTestStringListObjStringToObj() throws IOException;</span><br><span class="line"></span><br><span class="line">    void zTestStringMapObjStringToObj() throws IOException;</span><br><span class="line"></span><br><span class="line">    void zTestMyDataStringToObj() throws IOException;</span><br><span class="line"></span><br><span class="line">    void zTestMyDataListStringToObj() throws IOException;</span><br><span class="line"></span><br><span class="line">    void zTestMyDataMapStringToObj() throws IOException;</span><br><span class="line"></span><br><span class="line">    void zTestCyclicDataStringToObj() throws IOException;</span><br><span class="line"></span><br><span class="line">    void zTestCyclicDataListStringToObj() throws IOException;</span><br><span class="line"></span><br><span class="line">    void zTestCyclicDataMapStringToObj() throws IOException;</span><br><span class="line"></span><br><span class="line">    void zTestMyDataAndCyclicDataMapStringToObj() throws IOException;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>测试用例的统一的抽象类 实现 统一的接口<br>对所有的测试用例实现做一个统一的配置抽象类<br>提供所有实现测试用例类的公共配置 、前置后置方法 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">package com.ming.json;</span><br><span class="line"></span><br><span class="line">import junit.framework.TestCase;</span><br><span class="line">import org.junit.After;</span><br><span class="line">import org.junit.Before;</span><br><span class="line">import org.slf4j.Logger;</span><br><span class="line">import org.slf4j.LoggerFactory;</span><br><span class="line"></span><br><span class="line">public abstract class TestJsonAbstract extends TestCase implements TestJson &#123;</span><br><span class="line">    //公共变量区</span><br><span class="line">    protected static String stringList = null;</span><br><span class="line">    protected static String stringMap = null;</span><br><span class="line">    protected static String myData = null;</span><br><span class="line">    protected static String myDataList = null;</span><br><span class="line">    protected static String myDataMap = null;</span><br><span class="line">    protected static String cyclicData = null;</span><br><span class="line">    protected static String cyclicDataList = null;</span><br><span class="line">    protected static String cyclicDataMap = null;</span><br><span class="line">    protected static String myDataAndCyclicDataMap = null;</span><br><span class="line">    //获取集合的大小</span><br><span class="line">    protected int size = 10000;</span><br><span class="line">    protected Long now = null;</span><br><span class="line">    private Logger logger = LoggerFactory.getLogger(TestJsonAbstract.class);</span><br><span class="line"></span><br><span class="line">    @Before</span><br><span class="line">    public void init() &#123;</span><br><span class="line">        System.out.println(&quot;开始计算耗时。。。。。。&quot;);</span><br><span class="line">        now = System.currentTimeMillis();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @After</span><br><span class="line">    public void close() &#123;</span><br><span class="line">        System.out.println(&quot;结束耗时,共耗时:&quot; + (System.currentTimeMillis() - now));</span><br><span class="line">        logger.info(&quot;结束耗时,共耗时:&quot; + (System.currentTimeMillis() - now));</span><br><span class="line">        now = null;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h5 id="测试用例-1"><a href="#测试用例-1" class="headerlink" title="测试用例"></a>测试用例</h5><ul><li><p>fast json测试类<br>继承抽象类实现 统一的测试方法 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br></pre></td><td class="code"><pre><span class="line">package com.ming.json;</span><br><span class="line"></span><br><span class="line">import com.alibaba.fastjson.JSON;</span><br><span class="line">import org.junit.FixMethodOrder;</span><br><span class="line">import org.junit.Test;</span><br><span class="line">import org.junit.runners.MethodSorters;</span><br><span class="line"></span><br><span class="line">import java.util.Map;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 测试fastJson 解析</span><br><span class="line"> * 通过指定 test case 执行顺序 来保证 先调用obj转换String  然后在调用 string 转换obj</span><br><span class="line"> *</span><br><span class="line"> * @author ming</span><br><span class="line"> * @date 2018-07-17 15:23:36</span><br><span class="line"> */</span><br><span class="line">@FixMethodOrder(value = MethodSorters.NAME_ASCENDING)</span><br><span class="line">public class TestFastJson extends TestJsonAbstract &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    @Override</span><br><span class="line">    public void testStringListObjToString() &#123;</span><br><span class="line">        stringList = JSON.toJSONString(DataUtils.getStringList(size));</span><br><span class="line">        System.out.println(stringList);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    @Override</span><br><span class="line">    public void testStringMapObjToString() &#123;</span><br><span class="line">        stringMap = JSON.toJSONString(DataUtils.getStringMap(size));</span><br><span class="line">        System.out.println(stringMap);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    @Override</span><br><span class="line">    public void testMyDataToString() &#123;</span><br><span class="line">        myData = JSON.toJSONString(DataUtils.getMyData());</span><br><span class="line">        System.out.println(myData);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    @Override</span><br><span class="line">    public void testMyDataListToString() &#123;</span><br><span class="line">        myDataList = JSON.toJSONString(DataUtils.getMyDataList(size));</span><br><span class="line">        System.out.println(myDataList);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    @Override</span><br><span class="line">    public void testMyDataMapToString() &#123;</span><br><span class="line">        myDataMap = JSON.toJSONString(DataUtils.getMyDataMap(size));</span><br><span class="line">        System.out.println(myDataMap);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    @Override</span><br><span class="line">    public void testCyclicDataToString() &#123;</span><br><span class="line">        cyclicData = JSON.toJSONString(DataUtils.getCyclicData());</span><br><span class="line">        System.out.println(cyclicData);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    @Override</span><br><span class="line">    public void testCyclicDataListToString() &#123;</span><br><span class="line">        cyclicDataList = JSON.toJSONString(DataUtils.getCyclicDataList(size));</span><br><span class="line">        System.out.println(cyclicDataList);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    @Override</span><br><span class="line">    public void testCyclicDataMapToString() &#123;</span><br><span class="line">        cyclicDataMap = JSON.toJSONString(DataUtils.getCyclicDataMap(size));</span><br><span class="line">        System.out.println(cyclicDataMap);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    @Override</span><br><span class="line">    public void testMyDataAndCyclicDataMapToString() &#123;</span><br><span class="line">        myDataAndCyclicDataMap = JSON.toJSONString(DataUtils.getMyDataAndCyclicDataMap(size));</span><br><span class="line">        System.out.println(myDataAndCyclicDataMap);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    @Override</span><br><span class="line">    public void zTestStringListObjStringToObj() &#123;</span><br><span class="line">        System.out.println(JSON.parseArray(stringList));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    @Override</span><br><span class="line">    public void zTestStringMapObjStringToObj() &#123;</span><br><span class="line">        System.out.println(JSON.parseObject(stringMap, Map.class));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    @Override</span><br><span class="line">    public void zTestMyDataStringToObj() &#123;</span><br><span class="line">        System.out.println(JSON.parseObject(myData, MyData.class));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    @Override</span><br><span class="line">    public void zTestMyDataListStringToObj() &#123;</span><br><span class="line">        System.out.println(JSON.parseArray(myDataList, MyData.class));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    @Override</span><br><span class="line">    public void zTestMyDataMapStringToObj() &#123;</span><br><span class="line">        System.out.println(JSON.parseObject(myDataMap, Map.class));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    @Override</span><br><span class="line">    public void zTestCyclicDataStringToObj() &#123;</span><br><span class="line">        System.out.println(JSON.parseObject(cyclicData, CyclicData.class));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    @Override</span><br><span class="line">    public void zTestCyclicDataListStringToObj() &#123;</span><br><span class="line">        System.out.println(JSON.parseArray(cyclicDataList, CyclicData.class));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    @Override</span><br><span class="line">    public void zTestCyclicDataMapStringToObj() &#123;</span><br><span class="line">        System.out.println(JSON.parseObject(cyclicDataMap, Map.class));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    @Override</span><br><span class="line">    public void zTestMyDataAndCyclicDataMapStringToObj() &#123;</span><br><span class="line">        System.out.println(JSON.parseObject(myDataAndCyclicDataMap, Map.class));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>jackson测试类<br>使用jackson 实现的统一的测试用例 继承抽象类</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br></pre></td><td class="code"><pre><span class="line">package com.ming.json;</span><br><span class="line"></span><br><span class="line">import com.fasterxml.jackson.core.JsonProcessingException;</span><br><span class="line">import com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line">import org.junit.FixMethodOrder;</span><br><span class="line">import org.junit.Test;</span><br><span class="line">import org.junit.runners.MethodSorters;</span><br><span class="line"></span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.util.List;</span><br><span class="line">import java.util.Map;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 测试解析 jackson</span><br><span class="line"> *</span><br><span class="line"> * @author ming</span><br><span class="line"> * @date 2018-07-17 15:24:12</span><br><span class="line"> */</span><br><span class="line">@FixMethodOrder(value = MethodSorters.NAME_ASCENDING)</span><br><span class="line">public class TestJackson extends TestJsonAbstract &#123;</span><br><span class="line">    //获取 jackson 处理json的 mapper   可以通过setConfig 配置这个objectMapper</span><br><span class="line">    private ObjectMapper objectMapper = new ObjectMapper();</span><br><span class="line"></span><br><span class="line">    public void init1() &#123;</span><br><span class="line">        //DeserializationConfig,SerializationConfig</span><br><span class="line">        //配置 objectMapper 编解码 配置</span><br><span class="line">        //objectMapper.setConfig()</span><br><span class="line"></span><br><span class="line">        //设置序列化和反序列化时候的配置</span><br><span class="line">        //objectMapper.configure();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    @Override</span><br><span class="line">    public void testStringListObjToString() throws JsonProcessingException &#123;</span><br><span class="line">        stringList = objectMapper.writeValueAsString(DataUtils.getStringList(size));</span><br><span class="line">        System.out.println(stringList);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    @Override</span><br><span class="line">    public void testStringMapObjToString() throws JsonProcessingException &#123;</span><br><span class="line">        stringMap = objectMapper.writeValueAsString(DataUtils.getStringMap(size));</span><br><span class="line">        System.out.println(stringMap);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    @Override</span><br><span class="line">    public void testMyDataToString() throws JsonProcessingException &#123;</span><br><span class="line">        myData = objectMapper.writeValueAsString(DataUtils.getMyData());</span><br><span class="line">        System.out.println(myData);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    @Override</span><br><span class="line">    public void testMyDataListToString() throws JsonProcessingException &#123;</span><br><span class="line">        myDataList = objectMapper.writeValueAsString(DataUtils.getMyDataList(size));</span><br><span class="line">        System.out.println(myDataList);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    @Override</span><br><span class="line">    public void testMyDataMapToString() throws JsonProcessingException &#123;</span><br><span class="line">        myDataMap = objectMapper.writeValueAsString(DataUtils.getMyDataMap(size));</span><br><span class="line">        System.out.println(myDataMap);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    @Override</span><br><span class="line">    public void testCyclicDataToString() throws JsonProcessingException &#123;</span><br><span class="line">        cyclicData = objectMapper.writeValueAsString(DataUtils.getCyclicData());</span><br><span class="line">        System.out.println(cyclicData);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    @Override</span><br><span class="line">    public void testCyclicDataListToString() throws JsonProcessingException &#123;</span><br><span class="line">        cyclicDataList = objectMapper.writeValueAsString(DataUtils.getCyclicDataList(size));</span><br><span class="line">        System.out.println(cyclicDataList);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    @Override</span><br><span class="line">    public void testCyclicDataMapToString() throws JsonProcessingException &#123;</span><br><span class="line">        cyclicDataMap = objectMapper.writeValueAsString(DataUtils.getCyclicDataMap(size));</span><br><span class="line">        System.out.println(cyclicDataMap);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    @Override</span><br><span class="line">    public void testMyDataAndCyclicDataMapToString() throws JsonProcessingException &#123;</span><br><span class="line">        myDataAndCyclicDataMap = objectMapper.writeValueAsString(DataUtils.getMyDataAndCyclicDataMap(size));</span><br><span class="line">        System.out.println(myDataAndCyclicDataMap);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    @Override</span><br><span class="line">    public void zTestStringListObjStringToObj() throws IOException &#123;</span><br><span class="line">        System.out.println(objectMapper.readValue(stringList, List.class));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    @Override</span><br><span class="line">    public void zTestStringMapObjStringToObj() throws IOException &#123;</span><br><span class="line">        System.out.println(objectMapper.readValue(stringMap, Map.class));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    @Override</span><br><span class="line">    public void zTestMyDataStringToObj() throws IOException &#123;</span><br><span class="line">        System.out.println(objectMapper.readValue(myData, MyData.class));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    @Override</span><br><span class="line">    public void zTestMyDataListStringToObj() throws IOException &#123;</span><br><span class="line">        System.out.println(objectMapper.readValue(myDataList, List.class));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    @Override</span><br><span class="line">    public void zTestMyDataMapStringToObj() throws IOException &#123;</span><br><span class="line">        System.out.println(objectMapper.readValue(myDataMap, Map.class));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    @Override</span><br><span class="line">    public void zTestCyclicDataStringToObj() throws IOException &#123;</span><br><span class="line">        System.out.println(objectMapper.readValue(cyclicData, CyclicData.class));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    @Override</span><br><span class="line">    public void zTestCyclicDataListStringToObj() throws IOException &#123;</span><br><span class="line">        System.out.println(objectMapper.readValue(cyclicDataList, List.class));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    @Override</span><br><span class="line">    public void zTestCyclicDataMapStringToObj() throws IOException &#123;</span><br><span class="line">        System.out.println(objectMapper.readValue(cyclicDataMap, Map.class));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    @Override</span><br><span class="line">    public void zTestMyDataAndCyclicDataMapStringToObj() throws IOException &#123;</span><br><span class="line">        System.out.println(objectMapper.readValue(myDataAndCyclicDataMap, Map.class));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>gson测试类<br>gson实现统一的测试类 继承抽象类 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br></pre></td><td class="code"><pre><span class="line">package com.ming.json;</span><br><span class="line"></span><br><span class="line">import com.google.gson.Gson;</span><br><span class="line">import com.google.gson.GsonBuilder;</span><br><span class="line">import org.junit.FixMethodOrder;</span><br><span class="line">import org.junit.Test;</span><br><span class="line">import org.junit.runners.MethodSorters;</span><br><span class="line"></span><br><span class="line">import java.util.List;</span><br><span class="line">import java.util.Map;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 测试gson 解析</span><br><span class="line"> *</span><br><span class="line"> * @author ming</span><br><span class="line"> * @date 2018-07-17 15:23:58</span><br><span class="line"> */</span><br><span class="line">@FixMethodOrder(MethodSorters.NAME_ASCENDING)</span><br><span class="line">public class TestGson extends TestJsonAbstract &#123;</span><br><span class="line"></span><br><span class="line">    private Gson gson = new GsonBuilder().create();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    @Override</span><br><span class="line">    public void testStringListObjToString() &#123;</span><br><span class="line">        stringList = gson.toJson(DataUtils.getStringList(size));</span><br><span class="line">        System.out.println(stringList);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    @Override</span><br><span class="line">    public void testStringMapObjToString() &#123;</span><br><span class="line">        stringMap = gson.toJson(DataUtils.getStringMap(size));</span><br><span class="line">        System.out.println(stringMap);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    @Override</span><br><span class="line">    public void testMyDataToString() &#123;</span><br><span class="line">        myData = gson.toJson(DataUtils.getMyData());</span><br><span class="line">        System.out.println(myData);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    @Override</span><br><span class="line">    public void testMyDataListToString() &#123;</span><br><span class="line">        myDataList = gson.toJson(DataUtils.getMyDataList(size));</span><br><span class="line">        System.out.println(myDataList);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    @Override</span><br><span class="line">    public void testMyDataMapToString() &#123;</span><br><span class="line">        myDataMap = gson.toJson(DataUtils.getMyDataMap(size));</span><br><span class="line">        System.out.println(myDataMap);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    @Override</span><br><span class="line">    public void testCyclicDataToString() &#123;</span><br><span class="line">        cyclicData = gson.toJson(DataUtils.getCyclicData());</span><br><span class="line">        System.out.println(cyclicData);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    @Override</span><br><span class="line">    public void testCyclicDataListToString() &#123;</span><br><span class="line">        cyclicDataList = gson.toJson(DataUtils.getCyclicDataList(size));</span><br><span class="line">        System.out.println(cyclicDataList);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    @Override</span><br><span class="line">    public void testCyclicDataMapToString() &#123;</span><br><span class="line">        cyclicDataMap = gson.toJson(DataUtils.getCyclicDataMap(size));</span><br><span class="line">        System.out.println(cyclicDataMap);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    @Override</span><br><span class="line">    public void testMyDataAndCyclicDataMapToString() &#123;</span><br><span class="line">        myDataAndCyclicDataMap = gson.toJson(DataUtils.getMyDataAndCyclicDataMap(size));</span><br><span class="line">        System.out.println(myDataAndCyclicDataMap);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    @Override</span><br><span class="line">    public void zTestStringListObjStringToObj() &#123;</span><br><span class="line">        System.out.println(gson.fromJson(stringList, List.class));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    @Override</span><br><span class="line">    public void zTestStringMapObjStringToObj() &#123;</span><br><span class="line">        System.out.println(gson.fromJson(stringMap, Map.class));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    @Override</span><br><span class="line">    public void zTestMyDataStringToObj() &#123;</span><br><span class="line">        System.out.println(gson.fromJson(myData, MyData.class));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    @Override</span><br><span class="line">    public void zTestMyDataListStringToObj() &#123;</span><br><span class="line">        System.out.println(gson.fromJson(myDataList, List.class));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    @Override</span><br><span class="line">    public void zTestMyDataMapStringToObj() &#123;</span><br><span class="line">        System.out.println(gson.fromJson(myDataMap, Map.class));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    @Override</span><br><span class="line">    public void zTestCyclicDataStringToObj() &#123;</span><br><span class="line">        System.out.println(gson.fromJson(cyclicData, CyclicData.class));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    @Override</span><br><span class="line">    public void zTestCyclicDataListStringToObj() &#123;</span><br><span class="line">        System.out.println(gson.fromJson(cyclicDataList, List.class));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    @Override</span><br><span class="line">    public void zTestCyclicDataMapStringToObj() &#123;</span><br><span class="line">        System.out.println(gson.fromJson(cyclicDataMap, Map.class));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    @Override</span><br><span class="line">    public void zTestMyDataAndCyclicDataMapStringToObj() &#123;</span><br><span class="line">        System.out.println(gson.fromJson(myDataAndCyclicDataMap, Map.class));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>genson测试类<br>genson实现的测试类 继承 抽象类 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br></pre></td><td class="code"><pre><span class="line">package com.ming.json;</span><br><span class="line"></span><br><span class="line">import com.owlike.genson.Genson;</span><br><span class="line">import org.junit.FixMethodOrder;</span><br><span class="line">import org.junit.Test;</span><br><span class="line">import org.junit.runners.MethodSorters;</span><br><span class="line"></span><br><span class="line">import java.util.List;</span><br><span class="line">import java.util.Map;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 测试使用genson</span><br><span class="line"> *</span><br><span class="line"> * @author ming</span><br><span class="line"> * @date 2018-07-17 15:24:33</span><br><span class="line"> */</span><br><span class="line">@FixMethodOrder(MethodSorters.NAME_ASCENDING)</span><br><span class="line">public class TestGenson extends TestJsonAbstract &#123;</span><br><span class="line">    private Genson genson = new Genson();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    @Override</span><br><span class="line">    public void testStringListObjToString() &#123;</span><br><span class="line">        stringList = genson.serialize(DataUtils.getStringList(size));</span><br><span class="line">        System.out.println(stringList);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    @Override</span><br><span class="line">    public void testStringMapObjToString() &#123;</span><br><span class="line">        stringMap = genson.serialize(DataUtils.getStringMap(size));</span><br><span class="line">        System.out.println(stringMap);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    @Override</span><br><span class="line">    public void testMyDataToString() &#123;</span><br><span class="line">        myData = genson.serialize(DataUtils.getMyData());</span><br><span class="line">        System.out.println(myData);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    @Override</span><br><span class="line">    public void testMyDataListToString() &#123;</span><br><span class="line">        myDataList = genson.serialize(DataUtils.getMyDataList(size));</span><br><span class="line">        System.out.println(myDataList);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    @Override</span><br><span class="line">    public void testMyDataMapToString() &#123;</span><br><span class="line">        myDataMap = genson.serialize(DataUtils.getMyDataMap(size));</span><br><span class="line">        System.out.println(myDataMap);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    @Override</span><br><span class="line">    public void testCyclicDataToString() &#123;</span><br><span class="line">        cyclicData = genson.serialize(DataUtils.getCyclicData());</span><br><span class="line">        System.out.println(cyclicData);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    @Override</span><br><span class="line">    public void testCyclicDataListToString() &#123;</span><br><span class="line">        cyclicDataList = genson.serialize(DataUtils.getCyclicDataList(size));</span><br><span class="line">        System.out.println(cyclicDataList);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    @Override</span><br><span class="line">    public void testCyclicDataMapToString() &#123;</span><br><span class="line">        cyclicDataMap = genson.serialize(DataUtils.getCyclicDataMap(size));</span><br><span class="line">        System.out.println(cyclicDataMap);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    @Override</span><br><span class="line">    public void testMyDataAndCyclicDataMapToString() &#123;</span><br><span class="line">        myDataAndCyclicDataMap = genson.serialize(DataUtils.getMyDataAndCyclicDataMap(size));</span><br><span class="line">        System.out.println(myDataAndCyclicDataMap);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    @Override</span><br><span class="line">    public void zTestStringListObjStringToObj() &#123;</span><br><span class="line">        System.out.println(genson.deserialize(stringList, List.class));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    @Override</span><br><span class="line">    public void zTestStringMapObjStringToObj() &#123;</span><br><span class="line">        System.out.println(genson.deserialize(stringMap, Map.class));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    @Override</span><br><span class="line">    public void zTestMyDataStringToObj() &#123;</span><br><span class="line">        System.out.println(genson.deserialize(myData, MyData.class));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    @Override</span><br><span class="line">    public void zTestMyDataListStringToObj() &#123;</span><br><span class="line">        System.out.println(genson.deserialize(myDataList, List.class));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    @Override</span><br><span class="line">    public void zTestMyDataMapStringToObj() &#123;</span><br><span class="line">        System.out.println(genson.deserialize(myDataMap, Map.class));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    @Override</span><br><span class="line">    public void zTestCyclicDataStringToObj() &#123;</span><br><span class="line">        System.out.println(genson.deserialize(cyclicData, CyclicData.class));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    @Override</span><br><span class="line">    public void zTestCyclicDataListStringToObj() &#123;</span><br><span class="line">        System.out.println(genson.deserialize(cyclicDataList, List.class));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    @Override</span><br><span class="line">    public void zTestCyclicDataMapStringToObj() &#123;</span><br><span class="line">        System.out.println(genson.deserialize(cyclicDataMap, Map.class));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    @Override</span><br><span class="line">    public void zTestMyDataAndCyclicDataMapStringToObj() &#123;</span><br><span class="line">        System.out.println(genson.deserialize(myDataAndCyclicDataMap, Map.class));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>所有的测试类实现 统一进行批量测试 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">package com.ming.json;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import junit.framework.TestCase;</span><br><span class="line">import junit.framework.TestSuite;</span><br><span class="line">import junit.textui.TestRunner;</span><br><span class="line"></span><br><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.HashMap;</span><br><span class="line">import java.util.List;</span><br><span class="line">import java.util.Map;</span><br><span class="line">import java.util.stream.Collectors;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 聚合多个测试用例 在一起测试</span><br><span class="line"> *</span><br><span class="line"> * @author ming</span><br><span class="line"> * @date 2018-07-17 17:31:55</span><br><span class="line"> */</span><br><span class="line">//@RunWith(Suite.class)</span><br><span class="line">//@Suite.SuiteClasses(&#123;TestJackson.class, TestGson.class,  TestGenson.class,TestFastJson.class&#125;)</span><br><span class="line">public class AllTest &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        //执行测试用例次数 通过增大执行次数 取平均数 减小误差</span><br><span class="line">        int size = 10000;</span><br><span class="line">        List&lt;Map&lt;String, Object&gt;&gt; result = new ArrayList&lt;&gt;();</span><br><span class="line">        long now = System.currentTimeMillis();</span><br><span class="line">        result.add(get(TestJackson.class, size));</span><br><span class="line">        result.add(get(TestGson.class, size));</span><br><span class="line">        result.add(get(TestGenson.class, size));</span><br><span class="line">        result.add(get(TestFastJson.class, size));</span><br><span class="line">        System.out.println(&quot;总耗时:&quot; + (System.currentTimeMillis() - now) + &quot;ms&quot;);</span><br><span class="line">        System.out.println(&quot;明细信息-------------------------------&quot;);</span><br><span class="line">        result.forEach(f -&gt; &#123;</span><br><span class="line">            System.out.println(&quot;执行的测试用例&quot; + f.get(&quot;class&quot;));</span><br><span class="line">            System.out.println(&quot;执行平均耗时&quot; + f.get(&quot;avgTime&quot;) + &quot;ms&quot;);</span><br><span class="line">            System.out.println(&quot;每次执行的耗时详情&quot; + f.get(&quot;testList&quot;));</span><br><span class="line">            System.out.println(&quot;--------------------------------&quot;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private static Map&lt;String, Object&gt; get(Class&lt;? extends TestCase&gt; tClass, int size) &#123;</span><br><span class="line">        TestSuite testSuite = new TestSuite();</span><br><span class="line">        testSuite.addTestSuite(tClass);</span><br><span class="line">        long now;</span><br><span class="line">        List&lt;Long&gt; list = new ArrayList&lt;&gt;();</span><br><span class="line">        for (int i = 0; i &lt; size; i++) &#123;</span><br><span class="line">            now = System.currentTimeMillis();</span><br><span class="line">            TestRunner.run(testSuite);</span><br><span class="line">            list.add(System.currentTimeMillis() - now);</span><br><span class="line">        &#125;</span><br><span class="line">        Map&lt;String, Object&gt; map = new HashMap&lt;&gt;();</span><br><span class="line">        map.put(&quot;class&quot;, tClass);</span><br><span class="line">        map.put(&quot;testList&quot;, list);</span><br><span class="line">        map.put(&quot;avgTime&quot;, list.stream().collect(Collectors.averagingLong(a -&gt; a)));</span><br><span class="line">        return map;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>开启 AllTest类中的main方法即进行所有的模块的测试 </p><p>其中一次测试结果记录<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">总耗时:3627599ms</span><br><span class="line">明细信息-------------------------------</span><br><span class="line">执行的测试用例class com.ming.json.TestJackson</span><br><span class="line">执行平均耗时84.3811ms</span><br><span class="line">每次执行的耗时详情[439, 215, 184, 183, 176, 198。。。。。]</span><br><span class="line">--------------------------------</span><br><span class="line">执行的测试用例class com.ming.json.TestGson</span><br><span class="line">执行平均耗时94.915ms</span><br><span class="line">每次执行的耗时详情[299, 126, 123, 113, 95, 109, 。。。。]</span><br><span class="line">--------------------------------</span><br><span class="line">执行的测试用例class com.ming.json.TestGenson</span><br><span class="line">执行平均耗时99.3964ms</span><br><span class="line">每次执行的耗时详情[247, 144, 115, 98, 102, 85, 。。。。。]</span><br><span class="line">--------------------------------</span><br><span class="line">执行的测试用例class com.ming.json.TestFastJson</span><br><span class="line">执行平均耗时84.0026ms</span><br><span class="line">每次执行的耗时详情[263, 143, 94, 104, 69, 72, 。。。。。]</span><br><span class="line">--------------------------------</span><br></pre></td></tr></table></figure><p></p><h4 id="jackson-gson针对泛型的特殊处理"><a href="#jackson-gson针对泛型的特殊处理" class="headerlink" title="jackson gson针对泛型的特殊处理"></a>jackson gson针对泛型的特殊处理</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line">package com.ming.json;</span><br><span class="line"></span><br><span class="line">import com.fasterxml.jackson.core.type.TypeReference;</span><br><span class="line">import com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line">import com.google.common.collect.Maps;</span><br><span class="line">import com.google.common.reflect.TypeToken;</span><br><span class="line">import com.google.gson.Gson;</span><br><span class="line"></span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.util.Arrays;</span><br><span class="line">import java.util.List;</span><br><span class="line">import java.util.Map;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 测试泛型类型 json转换</span><br><span class="line"> * 引用地址:https://www.jianshu.com/p/ca03c2fe36e3</span><br><span class="line"> *</span><br><span class="line"> * @author ming</span><br><span class="line"> * @date 2018-07-19 14:03:12</span><br><span class="line"> */</span><br><span class="line">public class TestT &#123;</span><br><span class="line">    private static ObjectMapper mapper = new ObjectMapper();</span><br><span class="line">    private static Gson gson = new Gson();</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws IOException &#123;</span><br><span class="line">        Map&lt;String, List&lt;Long&gt;&gt; map = Maps.newHashMap();</span><br><span class="line">        map.put(&quot;one&quot;, Arrays.asList(10001L, 10002L, 10003L, 10004L));</span><br><span class="line">        map.put(&quot;two&quot;, Arrays.asList(20001L, 20002L, 20003L, 20004L));</span><br><span class="line">        map.put(&quot;three&quot;, Arrays.asList(30001L, 30002L, 30003L, 30004L));</span><br><span class="line">        map.put(&quot;four&quot;, Arrays.asList(40001L, 40002L, 40003L, 40004L));</span><br><span class="line"></span><br><span class="line">        String json = new Gson().toJson(map);</span><br><span class="line">        System.err.println(&quot;=======================错误示范=====================&quot;);</span><br><span class="line">        //Gson</span><br><span class="line">        Map&lt;String, List&lt;Long&gt;&gt; mapResult = gson.fromJson(json, Map.class);</span><br><span class="line">        System.out.println(&quot;通过Gson转换...&quot;);</span><br><span class="line">//      printType(mapResult);</span><br><span class="line">        System.out.println(mapResult);</span><br><span class="line">        //Json</span><br><span class="line">        Map&lt;String, List&lt;Long&gt;&gt; jsonMapResult = mapper.readValue(json, Map.class);</span><br><span class="line">        System.out.println(&quot;通过Jackson转换...&quot;);</span><br><span class="line">//      printType(jsonMapResult);</span><br><span class="line"></span><br><span class="line">        System.out.println(jsonMapResult);</span><br><span class="line">        System.out.println(&quot;=======================正确做法=====================&quot;);</span><br><span class="line">        //Gson</span><br><span class="line">        Map&lt;String, List&lt;Long&gt;&gt; mapResult1 = gson.fromJson(json, new TypeToken&lt;Map&lt;String, List&lt;Long&gt;&gt;&gt;() &#123;</span><br><span class="line">        &#125;.getType());</span><br><span class="line">        System.out.println(&quot;通过Gson转换...&quot;);</span><br><span class="line">        printType(mapResult1);</span><br><span class="line">        System.out.println(mapResult1);</span><br><span class="line">        //Json</span><br><span class="line">        ObjectMapper mapper = new ObjectMapper();</span><br><span class="line">        Map&lt;String, List&lt;Long&gt;&gt; jsonMapResult1 = mapper.readValue(json, new TypeReference&lt;Map&lt;String, List&lt;Long&gt;&gt;&gt;() &#123;</span><br><span class="line">        &#125;);</span><br><span class="line">        System.out.println(&quot;通过Jackson转换...&quot;);</span><br><span class="line">        printType(jsonMapResult1);</span><br><span class="line"></span><br><span class="line">        System.out.println(jsonMapResult1);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void printType(Map&lt;String, List&lt;Long&gt;&gt; map) &#123;</span><br><span class="line">        for (Map.Entry&lt;String, List&lt;Long&gt;&gt; entry : map.entrySet()) &#123;</span><br><span class="line">            System.out.println(&quot;key 类型:&quot; + entry.getKey().getClass() + &quot;, value类型:&quot;</span><br><span class="line">                    + entry.getValue().getClass() + &quot;, List中元素类型&quot; + entry.getValue().get(0).getClass());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>java处理json相关的操作 工具包是很多的 但是用的多的也就上面说的几种<br>对于简单并且要求速度的对象和json转换 直接使用fast json即可 不过有时候 fast json 会坑爹<br>其他情况使用jackson 完全可以胜任   gson也行 不过 我更加喜欢jackson  毕竟 很多框架就已经引用了jackson  跟着大佬走肯定没错的<br>带有泛型的 一定要用jackson或者gson 去使用  否则可能会无法反序列化成想要的类型  特别是fast json 只能处理第一层的泛型 复杂的泛型直接gg</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h4&gt;&lt;p&gt;最近使用基于http作为rpc调用协议的时候 由于选择使用json来传递数据&lt;br&gt;不得不做一波常用的json解析框架的性能、稳定性、可定制
      
    
    </summary>
    
      <category term="实战" scheme="http://www.xujiuming.com/categories/%E5%AE%9E%E6%88%98/"/>
    
    
      <category term="tools" scheme="http://www.xujiuming.com/tags/tools/"/>
    
      <category term="json" scheme="http://www.xujiuming.com/tags/json/"/>
    
  </entry>
  
  <entry>
    <title>es+kibana+filebeat采集docker日志实战</title>
    <link href="http://www.xujiuming.com/ming/7383a41.html"/>
    <id>http://www.xujiuming.com/ming/7383a41.html</id>
    <published>2018-07-17T03:35:03.000Z</published>
    <updated>2018-08-09T07:25:50.503Z</updated>
    
    <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>最近看了看 docker 标准输出和标准错误的日志采集<br>发现 filebeat 可以直接监听 docker的启动结束等动作 并且几乎不需要配置什么 就可以很轻松的采集到node上的docker运行的日志<br>而且也可以直接接入 k8s的标准输出和错误日志 贯彻了 elastic 的简单粗暴的套路</p><h4 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h4><h5 id="启动-elastic-search-和kibana"><a href="#启动-elastic-search-和kibana" class="headerlink" title="启动 elastic-search 和kibana"></a>启动 elastic-search 和kibana</h5><p>这里直接使用docker 启动即可 如果是生产或者预发环境 建议使用官方的镜像作基础镜像在上面进行个性化优化<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker run -d -p 9200:9200 -p 5601:5601 --name es-kibana-test  nshou/elasticsearch-kibana</span><br></pre></td></tr></table></figure><p></p><h5 id="安装filebeat"><a href="#安装filebeat" class="headerlink" title="安装filebeat"></a>安装filebeat</h5><p>这里使用下载压缩包方式安装 因为改配置简单  如果需要使用docker方式启动 改配置不是很方便 需要进行调整 这里只是作演示  就直接选择压缩包方式使用<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#https://www.elastic.co/downloads/beats/filebeat</span><br><span class="line">weget   https://artifacts.elastic.co/downloads/beats/filebeat/filebeat-6.3.1-linux-x86_64.tar.gz</span><br><span class="line">sudo zxvf ./filebeat-6.3.1-linux-x86_64.tar.gz</span><br></pre></td></tr></table></figure><p></p><h5 id="修改filebeat配置"><a href="#修改filebeat配置" class="headerlink" title="修改filebeat配置"></a>修改filebeat配置</h5><p>先备份 默认的filebeat.yml<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo cp ./filebeat.yml filebeat.yml.bak</span><br></pre></td></tr></table></figure><p></p><p>修改安装目录中filebeat.yml 主要是修改 inputs的type  自动安装kibana的索引  和es地址<br>具体配置详情参考:<a href="https://www.elastic.co/docker-kubernetes-container-monitoring" target="_blank" rel="noopener">https://www.elastic.co/docker-kubernetes-container-monitoring</a><br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">#=========================== Filebeat inputs =============================</span><br><span class="line"></span><br><span class="line">filebeat.inputs:</span><br><span class="line"> - type: docker</span><br><span class="line">   containers.ids:</span><br><span class="line">           - &apos;*&apos;</span><br><span class="line">   processors:</span><br><span class="line">       - add_docker_metadata: ~</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#============================== Kibana =====================================</span><br><span class="line"></span><br><span class="line">setup.kibana:</span><br><span class="line">  host: &quot;localhost:5601&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#================================ Outputs =====================================</span><br><span class="line"></span><br><span class="line">#-------------------------- Elasticsearch output ------------------------------</span><br><span class="line">output.elasticsearch:</span><br><span class="line">  # Array of hosts to connect to.</span><br><span class="line">  hosts: [&quot;localhost:9200&quot;]</span><br></pre></td></tr></table></figure><p></p><h5 id="启动并且根据配置自动安装filebeat-索引"><a href="#启动并且根据配置自动安装filebeat-索引" class="headerlink" title="启动并且根据配置自动安装filebeat 索引"></a>启动并且根据配置自动安装filebeat 索引</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 启动并且安装 filebeat </span><br><span class="line">sudo ./filebeat --setup -e</span><br></pre></td></tr></table></figure><p>这个时候 在这台node上 所有docker的日志都会被filebeat采集起来并且发送到es上   </p><p>产出日志后 直接在kibana上查看即可    </p><h4 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h4><ul><li>kibana 建立读取索引的时候 报错 FORBIDDEN/12/index read-only / allow delete (api)]<br>删除 索引的 只读权限即可     <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -XPUT -H &quot;Content-Type: application/json&quot; http://ip:9200/_all/_settings -d &apos;&#123;&quot;index.blocks.read_only_allow_delete&quot;: null&#125;&apos;</span><br></pre></td></tr></table></figure></li></ul><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>由于 docker集群的日志采集比较操蛋 可能是多种不同的系统运行(例如java类应用、各种服务软件的日志之类的) 那么在日志格式上无法做到 统一<br>采用这种通过收集docker 的标准输出和错误输出 可以收集整个docker集群中的docker的日志  方便查看和管理 </p><p>当然filebeat也支持直接和k8s集群接入</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h4&gt;&lt;p&gt;最近看了看 docker 标准输出和标准错误的日志采集&lt;br&gt;发现 filebeat 可以直接监听 docker的启动结束等动作 并且几乎不
      
    
    </summary>
    
      <category term="实战" scheme="http://www.xujiuming.com/categories/%E5%AE%9E%E6%88%98/"/>
    
    
      <category term="docker" scheme="http://www.xujiuming.com/tags/docker/"/>
    
      <category term="日志" scheme="http://www.xujiuming.com/tags/%E6%97%A5%E5%BF%97/"/>
    
      <category term="es" scheme="http://www.xujiuming.com/tags/es/"/>
    
      <category term="kibana" scheme="http://www.xujiuming.com/tags/kibana/"/>
    
      <category term="filebeat" scheme="http://www.xujiuming.com/tags/filebeat/"/>
    
  </entry>
  
  <entry>
    <title>spring-boot-cache使用实战</title>
    <link href="http://www.xujiuming.com/ming/a29d9e52.html"/>
    <id>http://www.xujiuming.com/ming/a29d9e52.html</id>
    <published>2018-07-11T08:26:32.000Z</published>
    <updated>2018-07-12T03:16:09.933Z</updated>
    
    <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>cache可以说是后端提高响应速度、承载能力的标准套路了<br>spring boot中提供spring boot starter cache 组件 配合spring boot starter redis 或者其他缓存组件 可以很简单的使用缓存</p><h4 id="spring-cache-介绍"><a href="#spring-cache-介绍" class="headerlink" title="spring cache 介绍"></a>spring cache 介绍</h4><p>一套基于spring aop的方式 为函数添加缓存的 框架</p><h5 id="支持的缓存类型"><a href="#支持的缓存类型" class="headerlink" title="支持的缓存类型"></a>支持的缓存类型</h5><ul><li>Generic</li><li>JCache (JSR-107)</li><li>EhCache 2.x</li><li>Hazelcast</li><li>Infinispan</li><li>Redis</li><li>Guava</li><li>Simple<br>如果不满足上述的缓存方案 可以自实现 cacheManager<h5 id="注解介绍"><a href="#注解介绍" class="headerlink" title="注解介绍"></a>注解介绍</h5></li><li>@Cacheable<br>获取缓存 如果有缓存 直接返回</li></ul><table><thead><tr><th style="text-align:left">属性</th><th style="text-align:left">类型</th><th style="text-align:left">功能</th></tr></thead><tbody><tr><td style="text-align:left">value</td><td style="text-align:left">String[]</td><td style="text-align:left">缓存的名称 和cacheNames功能一样</td></tr><tr><td style="text-align:left">cacheNames</td><td style="text-align:left">String[]</td><td style="text-align:left">缓存的名称和value功能一样</td></tr><tr><td style="text-align:left">key</td><td style="text-align:left">String</td><td style="text-align:left">缓存key的值、默认是以所有的参数作为key、也可以直接配置keyGenerator</td></tr><tr><td style="text-align:left">keyGenerator</td><td style="text-align:left">String</td><td style="text-align:left">缓存key的生成器</td></tr><tr><td style="text-align:left">cacheManager</td><td style="text-align:left">String</td><td style="text-align:left">配置使用那个缓存管理器、和cacheResolver排斥</td></tr><tr><td style="text-align:left">cacheResolver</td><td style="text-align:left">String</td><td style="text-align:left">定义使用那个拦截器、和cacheManager互斥</td></tr><tr><td style="text-align:left">condition</td><td style="text-align:left">String</td><td style="text-align:left">根据spel表达式来可以配置什么条件下进行缓存 默认全部缓存</td></tr><tr><td style="text-align:left">unless</td><td style="text-align:left">String</td><td style="text-align:left">和condition相反</td></tr><tr><td style="text-align:left">sync</td><td style="text-align:left">boolean</td><td style="text-align:left">是否开启同步功能、默认不开启</td></tr></tbody></table><ul><li>@CachePut<br>执行并且更新缓存相关 不管如何 肯定会执行方法 然后返回 这样可以更新缓存的内容</li></ul><table><thead><tr><th style="text-align:left">属性</th><th style="text-align:left">类型</th><th style="text-align:left">功能</th></tr></thead><tbody><tr><td style="text-align:left">value</td><td style="text-align:left">String[]</td><td style="text-align:left">缓存的名称 和cacheNames功能一样</td></tr><tr><td style="text-align:left">cacheNames</td><td style="text-align:left">String[]</td><td style="text-align:left">缓存的名称和value功能一样</td></tr><tr><td style="text-align:left">key</td><td style="text-align:left">String</td><td style="text-align:left">缓存key的值、默认是以所有的参数作为key、也可以直接配置keyGenerator</td></tr><tr><td style="text-align:left">keyGenerator</td><td style="text-align:left">String</td><td style="text-align:left">缓存key的生成器</td></tr><tr><td style="text-align:left">cacheManager</td><td style="text-align:left">String</td><td style="text-align:left">配置使用那个缓存管理器、和cacheResolver排斥</td></tr><tr><td style="text-align:left">cacheResolver</td><td style="text-align:left">String</td><td style="text-align:left">定义使用那个拦截器、和cacheManager互斥</td></tr><tr><td style="text-align:left">condition</td><td style="text-align:left">String</td><td style="text-align:left">根据spel表达式来可以配置什么条件下进行缓存 默认全部缓存</td></tr><tr><td style="text-align:left">unless</td><td style="text-align:left">String</td><td style="text-align:left">和condition相反</td></tr></tbody></table><ul><li>@CacheEvict<br>删除缓存相关</li></ul><table><thead><tr><th style="text-align:left">属性</th><th style="text-align:left">类型</th><th style="text-align:left">功能</th></tr></thead><tbody><tr><td style="text-align:left">value</td><td style="text-align:left">String[]</td><td style="text-align:left">缓存的名称 和cacheNames功能一样</td></tr><tr><td style="text-align:left">cacheNames</td><td style="text-align:left">String[]</td><td style="text-align:left">缓存的名称和value功能一样</td></tr><tr><td style="text-align:left">key</td><td style="text-align:left">String</td><td style="text-align:left">缓存key的值、默认是以所有的参数作为key、也可以直接配置keyGenerator</td></tr><tr><td style="text-align:left">keyGenerator</td><td style="text-align:left">String</td><td style="text-align:left">缓存key的生成器</td></tr><tr><td style="text-align:left">cacheManager</td><td style="text-align:left">String</td><td style="text-align:left">配置使用那个缓存管理器、和cacheResolver排斥</td></tr><tr><td style="text-align:left">cacheResolver</td><td style="text-align:left">String</td><td style="text-align:left">定义使用那个拦截器、和cacheManager互斥</td></tr><tr><td style="text-align:left">condition</td><td style="text-align:left">String</td><td style="text-align:left">根据spel表达式来可以配置什么条件下进行缓存 默认全部缓存</td></tr><tr><td style="text-align:left">allEntries</td><td style="text-align:left">boolean</td><td style="text-align:left">是否删除所有键的缓存 默认不删除</td></tr><tr><td style="text-align:left">beforeInvocation</td><td style="text-align:left">boolean</td><td style="text-align:left">是否在调用此方法前 删除缓存</td></tr></tbody></table><ul><li>@CacheConfig<br>在类级别统一的配置缓存公共配置</li></ul><table><thead><tr><th style="text-align:left">属性</th><th style="text-align:left">类型</th><th style="text-align:left">功能</th></tr></thead><tbody><tr><td style="text-align:left">cacheNames</td><td style="text-align:left">String[]</td><td style="text-align:left">缓存的名称和value功能一样</td></tr><tr><td style="text-align:left">keyGenerator</td><td style="text-align:left">String</td><td style="text-align:left">缓存key的生成器</td></tr><tr><td style="text-align:left">cacheManager</td><td style="text-align:left">String</td><td style="text-align:left">配置使用那个缓存管理器、和cacheResolver排斥</td></tr><tr><td style="text-align:left">cacheResolver</td><td style="text-align:left">String</td><td style="text-align:left">定义使用那个拦截器、和cacheManager互斥</td></tr></tbody></table><ul><li>@EnableCaching<br>开启缓存以及缓存的全局配置</li></ul><table><thead><tr><th style="text-align:left">属性</th><th style="text-align:left">类型</th><th style="text-align:left">功能</th></tr></thead><tbody><tr><td style="text-align:left">proxyTargetClass</td><td style="text-align:left">boolean</td><td style="text-align:left">是否要基于cglib生成代理去实现缓存</td></tr><tr><td style="text-align:left">mode</td><td style="text-align:left">AdviceMode</td><td style="text-align:left">配置那种模式去实现缓存、默认是AdviceMode.PROXY 可以切换为 AdviceMode#ASPECTJ</td></tr><tr><td style="text-align:left">order</td><td style="text-align:left">int</td><td style="text-align:left">设置缓存管理器执行的顺序</td></tr></tbody></table><ul><li>@Caching<br>对多个缓存组的配置</li></ul><table><thead><tr><th style="text-align:left">属性</th><th style="text-align:left">类型</th><th style="text-align:left">功能</th></tr></thead><tbody><tr><td style="text-align:left">cacheable</td><td style="text-align:left">Cacheable</td><td style="text-align:left">配置获取缓存相关的配置</td></tr><tr><td style="text-align:left">put</td><td style="text-align:left">CachePut</td><td style="text-align:left">配置如何更新缓存的相关配置</td></tr><tr><td style="text-align:left">evict</td><td style="text-align:left">CacheEvict</td><td style="text-align:left">配置如何删除缓存的相关配置</td></tr></tbody></table><h4 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h4><h5 id="gradle-依赖"><a href="#gradle-依赖" class="headerlink" title="gradle 依赖"></a>gradle 依赖</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">compile(&apos;org.springframework.boot:spring-boot-starter-web&apos;)</span><br><span class="line">compile(&apos;org.springframework.boot:spring-boot-starter-data-redis&apos;)</span><br><span class="line">compile(&apos;org.springframework.boot:spring-boot-starter-cache&apos;)</span><br><span class="line">testCompile(&apos;org.springframework.boot:spring-boot-starter-test&apos;)</span><br></pre></td></tr></table></figure><h5 id="启动引导开启缓存"><a href="#启动引导开启缓存" class="headerlink" title="启动引导开启缓存"></a>启动引导开启缓存</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">package com.ming;</span><br><span class="line"></span><br><span class="line">import org.springframework.boot.SpringApplication;</span><br><span class="line">import org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line">import org.springframework.cache.annotation.EnableCaching;</span><br><span class="line"></span><br><span class="line">@SpringBootApplication</span><br><span class="line">//开启缓存 </span><br><span class="line">@EnableCaching</span><br><span class="line">public class Start &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        SpringApplication.run(Start.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  redis:</span><br><span class="line">    host: &lt;ip&gt;</span><br><span class="line">    port: &lt;port&gt;</span><br><span class="line">    password: &lt;password&gt;</span><br><span class="line">  cache:</span><br><span class="line">    # spring cache 缓存类型为redis  也可以是其他的实现 </span><br><span class="line">    type: redis</span><br></pre></td></tr></table></figure><h5 id="使用cache"><a href="#使用cache" class="headerlink" title="使用cache"></a>使用cache</h5><h6 id="模拟带缓存的service"><a href="#模拟带缓存的service" class="headerlink" title="模拟带缓存的service"></a>模拟带缓存的service</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">package com.ming;</span><br><span class="line"></span><br><span class="line">import org.springframework.cache.annotation.CacheConfig;</span><br><span class="line">import org.springframework.cache.annotation.CacheEvict;</span><br><span class="line">import org.springframework.cache.annotation.CachePut;</span><br><span class="line">import org.springframework.cache.annotation.Cacheable;</span><br><span class="line">import org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line">@Service</span><br><span class="line">//公共配置  可以在类上注释 注释本类的 缓存相关公共配置</span><br><span class="line">//@CacheConfig(cacheNames = TestCacheService.CACHE_KEY)</span><br><span class="line">public class TestCacheService &#123;</span><br><span class="line"></span><br><span class="line">    public static final String CACHE_KEY = &quot;test-cache&quot;;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 获取信息  第二次访问会取缓存</span><br><span class="line">     *</span><br><span class="line">     * @author ming</span><br><span class="line">     * @date 2018-07-11 17:41:47</span><br><span class="line">     */</span><br><span class="line">    @Cacheable(cacheNames = CACHE_KEY)</span><br><span class="line">    public String testCache(String id) &#123;</span><br><span class="line">        return getString(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 更新信息   更新缓存</span><br><span class="line">     *</span><br><span class="line">     * @author ming</span><br><span class="line">     * @date 2018-07-12 09:50:53</span><br><span class="line">     */</span><br><span class="line">    @CachePut(cacheNames = CACHE_KEY)</span><br><span class="line">    public String testCachePut(String id) &#123;</span><br><span class="line">        return getString(id + &quot;update&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 清除缓存</span><br><span class="line">     *</span><br><span class="line">     * @author ming</span><br><span class="line">     * @date 2018-07-12 09:51:22</span><br><span class="line">     */</span><br><span class="line">    @CacheEvict(cacheNames = CACHE_KEY)</span><br><span class="line">    public void removeCache(String id) &#123;</span><br><span class="line">        System.out.println(&quot;删除缓存 &quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 获取string 模拟调用方法</span><br><span class="line">     *</span><br><span class="line">     * @author ming</span><br><span class="line">     * @date 2018-07-11 17:41:58</span><br><span class="line">     */</span><br><span class="line">    private String getString(String id) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            Thread.sleep(3000L);</span><br><span class="line">        &#125; catch (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        return id + &quot;load&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="测试用例"><a href="#测试用例" class="headerlink" title="测试用例"></a>测试用例</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">package com.ming;</span><br><span class="line"></span><br><span class="line">import org.junit.Test;</span><br><span class="line">import org.junit.runner.RunWith;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line">import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</span><br><span class="line"></span><br><span class="line">@RunWith(SpringJUnit4ClassRunner.class)</span><br><span class="line">@SpringBootTest(classes = Start.class)</span><br><span class="line">public class TestCache &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private TestCacheService testCacheService;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void test() &#123;</span><br><span class="line">        String id = &quot;ming&quot;;</span><br><span class="line">        System.out.println(&quot;第一次访问没有缓存--------&quot;);</span><br><span class="line">        long oneNow = System.currentTimeMillis();</span><br><span class="line">        System.out.println(testCacheService.testCache(id));</span><br><span class="line">        System.out.println(&quot;耗时:&quot; + (System.currentTimeMillis() - oneNow) + &quot;ms&quot;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;第二次访问有缓存--------&quot;);</span><br><span class="line">        long twoNow = System.currentTimeMillis();</span><br><span class="line">        System.out.println(testCacheService.testCache(id));</span><br><span class="line">        System.out.println(&quot;耗时:&quot; + (System.currentTimeMillis() - twoNow) + &quot;ms&quot;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;更新缓存信息--------&quot;);</span><br><span class="line">        long threeNow = System.currentTimeMillis();</span><br><span class="line">        System.out.println(testCacheService.testCachePut(id));</span><br><span class="line">        System.out.println(&quot;耗时:&quot; + (System.currentTimeMillis() - threeNow) + &quot;ms&quot;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;获取更新后的缓存信息-------&quot;);</span><br><span class="line">        long fourNow = System.currentTimeMillis();</span><br><span class="line">        System.out.println(testCacheService.testCache(id));</span><br><span class="line">        System.out.println(&quot;耗时:&quot; + (System.currentTimeMillis() - fourNow) + &quot;ms&quot;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;移除缓存------并且调用testCache方法&quot;);</span><br><span class="line">        testCacheService.removeCache(id);</span><br><span class="line">        long fiveNow = System.currentTimeMillis();</span><br><span class="line">        System.out.println(testCacheService.testCache(id));</span><br><span class="line">        System.out.println(&quot;耗时:&quot; + (System.currentTimeMillis() - fiveNow) + &quot;ms&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="坑"><a href="#坑" class="headerlink" title="坑"></a>坑</h4><ul><li>@Cacheable 、@CachePut、@CacheEvict 必须要有 cacheNames  </li><li>注解必须放在public修饰的方法上   </li><li>如果只是获取缓存使用@Cacheable即可 如果要更新数据库并且更新缓存一定要使用@CachePut 否则@Cacheable会出现脏读   </li></ul><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>spring cache 为缓存提供了一套简单快捷的方案 可以在旧的功能上很快速添加上缓存<br>具体缓存的实现 也有更多的选择 也可以自己实现spring cache的缓存管理器皿 来实现自定义的缓存<br>本身提供的有很多 例如Generic、JCache (JSR-107)、EhCache 2.x、Hazelcast、Infinispan、Redis、Guava、Simple<br>按需选择 如果没有 可以自己实现cacheManager去做</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h4&gt;&lt;p&gt;cache可以说是后端提高响应速度、承载能力的标准套路了&lt;br&gt;spring boot中提供spring boot starter cach
      
    
    </summary>
    
      <category term="实战" scheme="http://www.xujiuming.com/categories/%E5%AE%9E%E6%88%98/"/>
    
    
      <category term="spring boot" scheme="http://www.xujiuming.com/tags/spring-boot/"/>
    
      <category term="cache" scheme="http://www.xujiuming.com/tags/cache/"/>
    
      <category term="redis" scheme="http://www.xujiuming.com/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>深入理解jvm阅读笔记-内存区域划分</title>
    <link href="http://www.xujiuming.com/ming/c66acd17.html"/>
    <id>http://www.xujiuming.com/ming/c66acd17.html</id>
    <published>2018-07-10T02:57:42.000Z</published>
    <updated>2018-07-11T03:55:04.367Z</updated>
    
    <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>最近 在学习 jvm相关的知识<br>之前 一直看的一些博客 文章 没有静下心 看看 jvm相关的书籍<br>干脆买了一本 周志明大佬的jvm的书</p><h4 id="内存区域划分"><a href="#内存区域划分" class="headerlink" title="内存区域划分"></a>内存区域划分</h4><p><img src="http://asset.xujiuming.com/private-asset/jvm_runtime_data_area.png" alt="内存区域划分图"></p><h5 id="程序计数器"><a href="#程序计数器" class="headerlink" title="程序计数器"></a>程序计数器</h5><ul><li>线程独有的信息</li><li>功能<br>用来指示执行的字节码的行号 所以这个必须是线程独有信息不能共享<br>字节码解释器通过改变计数器 来选取下一条的指令 去执行相关操作 如跳转、循环、异常、线程恢复等</li><li>特殊说明<br>jvm虚拟机规范没有对这个区域规定内存错误(oom)的情况</li></ul><h5 id="虚拟机栈"><a href="#虚拟机栈" class="headerlink" title="虚拟机栈"></a>虚拟机栈</h5><ul><li>线程独有信息</li><li>功能<br>线程栈帧 用来存储局部变量、操作数栈、动态链接、方法出口 每个方法调用执行完成 都对应一个栈帧 的入栈和出栈<br>局部变量存储了 基础类型 和引用类型的引用指针或者句柄 和返回数据的地址(returnAddress)</li><li>特殊说明<br>64位的long和double 占用两个局部变量空间(slot)其余的都是占用一个<br>局部变量需要的内存空间在编译的时期已经完成，当进入一个方法 局部变量的空间大小是确定的 运行期不会改变局部变量的内存大小<br>当线程请求的栈深度大于虚拟机允许的深度抛出 StackOverflowError<br>当虚拟机栈支持动态扩展 当扩展时候无法申请到足够的内存 抛出 OutOfMemoryError异常</li></ul><h5 id="本地方法栈"><a href="#本地方法栈" class="headerlink" title="本地方法栈"></a>本地方法栈</h5><ul><li>线程独有信息</li><li>功能<br>线程栈帧 不过是本地方法的栈帧 而不是虚拟机的栈帧 保存的是本地方法的栈帧信息</li><li>特殊说明<br>当线程请求的栈深度大于虚拟机允许的深度抛出 StackOverflowError<br>当虚拟机栈支持动态扩展 当扩展时候无法申请到足够的内存 抛出 OutOfMemoryError异常</li></ul><h5 id="java-堆-gc-主要活动区-大致分为新生代、老年代"><a href="#java-堆-gc-主要活动区-大致分为新生代、老年代" class="headerlink" title="java 堆 (gc 主要活动区 大致分为新生代、老年代)"></a>java 堆 (gc 主要活动区 大致分为新生代、老年代)</h5><ul><li>所有线程共享区域</li><li>功能<br>java 堆内存 java中几乎所有的对象杜存放在堆上<br>java 垃圾收集主要就是收集 堆内存 (gc堆)<br>根据现代垃圾收集器对于java堆内存的划分可细分为 新生代、老年代 或者更加细致 Eden、From Survivor、To Survivor 空间等<br>从内存分配角度 线程共享的java堆可能划分出多个线程私有的分配缓存区 、</li><li>特殊说明<br>java堆可以在物理上不连续的内存空间内 只要逻辑是连续的 可以实现固定的大小也可以可以扩展的形式 通过-Xmx、-Xms控制堆内存的最小最大范围<br>如果堆中没有内存完成是实例的分配并且堆无法再进行扩展 抛出 OutOfMemoryError</li></ul><h5 id="方法区"><a href="#方法区" class="headerlink" title="方法区"></a>方法区</h5><ul><li>所有线程共享区域</li><li>功能<br>存储虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码<br>别名非堆(Non-Heap) 目的和 java 堆内存区分开</li><li>特殊说明<br>在HotSpot虚拟机中 方法区可以称之为永久代 但是在jdk7之后 HotSpot虚拟机也渐渐放弃永久代 改为Native Memory 在1.7中 String已经从常量池移除<br>java虚拟机规范对于方法区限制较为宽松 除了跟java堆一样不需要连续的物理内存和可以选择固定还是可扩展大小 还可以选择不实现垃圾收集<br>当方法区无法满足内存分配的需求的时候 抛出 OutOfMemoryError<h6 id="运行期常量池"><a href="#运行期常量池" class="headerlink" title="运行期常量池"></a>运行期常量池</h6></li><li>归属于方法区的一部分</li><li>功能<br>在编译期中 生成的各种字面量、符号引用等等 类加载后会直接加载进常量池</li><li>特殊说明<br>java虚拟机对class文件每个部分都有严格限制 但是对于常量池没有细节要求 一般只是保存字面量、符号引用还有翻译出来的直接引用<br>java语言要求常量不一定只有编译的时候会产生 例如String.intern() 这种可以在运行期 产生新的常量到常量区<br>由于存在运行期间 增加常量 那么当常量池无法申请到内存抛出 OutOfMemoryError 异常</li></ul><h5 id="直接内存"><a href="#直接内存" class="headerlink" title="直接内存"></a>直接内存</h5><ul><li>不属于虚拟机运行的数据区</li><li>不是java虚拟机规范定义的内存区域</li><li>功能<br>Channel和Buffer的io方式 可以只用Native函数 直接分配堆外内存 通过存储在java堆中的 DirectByteBuffer 作为这块内存的引用进行操作 避免在java堆和Native堆中来回复制数据</li><li>特殊说明<br>直接内存不受java虚拟机限制 当各个区域的内存和大于物理机的内存 那么也会抛出 OutOfMemoryError</li></ul><h4 id="HotSpot对象的创建和内存布局、对象访问定位"><a href="#HotSpot对象的创建和内存布局、对象访问定位" class="headerlink" title="HotSpot对象的创建和内存布局、对象访问定位"></a>HotSpot对象的创建和内存布局、对象访问定位</h4><h5 id="普通的java对象创建"><a href="#普通的java对象创建" class="headerlink" title="普通的java对象创建"></a>普通的java对象创建</h5><p>当执行到new 指令 -&gt; 检测能否在常量池中定位到一个类的符号引用 并且检测这个符合引用代表的类是否被加载、解析、初始化 如果没有先执行类加载<br>-&gt;执行完类加载检测 虚拟机为这个新对象分配内存。对象需要的内存大小在类加载后已经确定 为对象分配空间就是把一块确定大小的内存从堆中划分出来<br>-&gt;将分配到的内存初始化为0 不包括对象头 如果使用的TLAB 这个过程会在TLAB分配时候进行 保证对象的实例字段在java中不赋值即可使用 程序直接访问某些字段的零值<br>-&gt;虚拟机堆对象进行必要的设置 如对象是那个类的实例、如何才能找到类的元数据、对象哈希码、对象gc分代年龄等信息 这些信息在对象头中<br>-&gt;这个时候虚拟机认为对象已经初始化完毕 java程序认为对象还未创建完毕 继续执行init方法 -&gt;对象初始化完毕</p><h6 id="内存划分方法"><a href="#内存划分方法" class="headerlink" title="内存划分方法"></a>内存划分方法</h6><ul><li><p>指针碰撞<br>假设java堆内存绝对规整 所有用过的放在一边 空闲的放在另外一边 中间通过一个指针来作为指示器 那么内存划分只是把指针向空闲空间那边移动出来和对象大小相等的距离</p></li><li><p>空闲列表<br>虚拟机维护一个列表 记录那些内存可以用 在分配内存的时候 从列表中找出一块足够大的内存给对象 并且更新列表</p></li></ul><p>根据gc是带有压缩规整功能 来选择 那种内存划分方法<br>Serial ParNew 带有压缩规整的 采用的是指针碰撞<br>CMS 采用空闲列表</p><h6 id="指针分配内存存在的并发问题"><a href="#指针分配内存存在的并发问题" class="headerlink" title="指针分配内存存在的并发问题"></a>指针分配内存存在的并发问题</h6><ul><li>对分配内存空间的动作进行同步处理<br>虚拟机采用cas配上失败重试方式保证更新操作都是原子性的操作</li><li>本地线程分配缓冲 (Thread Local Allocation Buffer) TLAB<br>把内存分配工作按照线程划分到不同的空间中进行<br>每个线程预先在java堆中申请一块内存 那个线程要分配内存就在那个线程的TLAB上分配 只有当TLAB使用完毕分配新的TLAB的时候 才需要同步锁定<br>虚拟机通过-XX:+/-UseTLAB参数设定<h5 id="对象内存布局"><a href="#对象内存布局" class="headerlink" title="对象内存布局"></a>对象内存布局</h5>HotSpot虚拟机中 对象在内存中存储的布局分为三块区域 对象头(header)、实例数据(instance data )、对齐填充(padding)</li><li>对象头<br>对象头分为两部分<br>一: 存储对象自身运行时候的数据<br>如hashCode gc分代年龄、锁状态标志、线程持有的锁、偏向线程ID、偏向时间戳等<br>这部分数据在32位和64为虚拟机中分别为32bit 64bit大小 官方称之为 “Mark Word”<br>二: 类型指针<br>指向类的元数据的指针 虚拟机通过这个指针 确定对象是那个类的实例<br>不是所有的虚拟机实现都必须在对象数据上找到保留的类型指针</li><li>实例数据<br>存储对象真正有效的信息 至于存储顺序 受到虚拟机的分配策略参数和字段在java源码中定义的顺序影响<br>HotSpot虚拟机默认分配策略 longs/double、ints、 shorts/chars 、bytes/booleans 、oops</li><li>对齐填充<br>HotSpot自动内存管理要求对象的起始地址必须是8字节的整数倍 当对象的实例数据部分不是8的整数倍的时候 需要这一部分区补齐占位</li></ul><h5 id="对象访问定位"><a href="#对象访问定位" class="headerlink" title="对象访问定位"></a>对象访问定位</h5><p>java通过栈上的reference数据来操作堆上的具体对象 由于reference数据只是规定了一个指向对象的引用 没有定义如何去定位访问对象的具体位置<br>主流的实现方式有两种</p><ul><li>句柄<br>在堆中划分句柄池 reference存储对象的句柄地址 句柄包含对象实例数据和类型数据的各自具体地址信息<br>好处:reference中的数据是稳定的句柄地址 对象被移动只会改变句柄中的信息 不会改变句柄的地址 reference不需要变化<br>坏处:增加了指针定位的开销<br><img src="http://asset.xujiuming.com/private-asset/java%E5%AF%B9%E8%B1%A1%E8%AE%BF%E9%97%AE%E5%AE%9A%E4%BD%8D_%E5%8F%A5%E6%9F%84.jpg" alt="java对象访问定位_句柄"></li><li>直接指针<br>需要java堆对象布局考虑如何放置访问类型数据的相关信息 reference中直接存储堆对象的地址<br>好处:直接访问对象 减少指针定位开销<br>坏处:当对象内存地址发生变化 reference中数据也需要调整<br><img src="http://asset.xujiuming.com/private-asset/java%E5%AF%B9%E8%B1%A1%E8%AE%BF%E9%97%AE%E5%AE%9A%E4%BD%8D_%E7%9B%B4%E6%8E%A5%E6%8C%87%E9%92%88.jpg" alt="java对象访问定位_指针"></li></ul><p>HotSpot采用的是直接指针</p><h4 id="常见区域内存溢出"><a href="#常见区域内存溢出" class="headerlink" title="常见区域内存溢出"></a>常见区域内存溢出</h4><ul><li>java堆溢出<br>一直new对象 当超出最大堆限制即溢出<br>具体分析的时候 可以通过内存快照 分析到底是内存直接溢出导致还是因为内存泄漏导致的<br>如果是堆大小限制了 通过-Xmx配置最大值<br>如果是泄漏了 那么就只能找出那里泄漏了 然后修正了</li><li>虚拟机栈和本地方法栈溢出<br>当线程请求的栈深度大于虚拟机允许的最大深度 抛出StackOverflowError<br>当虚拟机扩展的时候无法申请到足够的内存 抛出 OutOfMemoryError<br>设置-Xss配置虚拟机栈和本地方法栈的大小</li><li>方法区和常量池溢出<br>一直新建String 并且使用.intern() 插入到方法区 就会造成 常量区溢出<br>二是 不断新建新的类加载到方法区域也会溢出</li><li>本机内存直接溢出<br>DirectMemory 通过-XX：MaxDirectMemorySize指定 如果不指定 那么默认和java堆一样大小<br>如果dump文件很小 程序中直接或者间接使用nio 那么 可能就是由于本机内存直接溢出</li></ul><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>java的jvm规范 定义了 内存中 线程独享信息(本地方法栈、虚拟机栈、程序计数器) 线程共享的信息(方法区、堆)<br>jvm中内存划分方式非为 指针碰撞、空间列表<br>jvm中对象的寻址有句柄和直接指针的方式<br>jvm中堆内存 大致分为 新生代和老年代<br>jvm中方法区 又称之为永生区 永久代 新的jvm已经在慢慢作去永生代了 jdk1.7开始</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h4&gt;&lt;p&gt;最近 在学习 jvm相关的知识&lt;br&gt;之前 一直看的一些博客 文章 没有静下心 看看 jvm相关的书籍&lt;br&gt;干脆买了一本 周志明大佬的jv
      
    
    </summary>
    
      <category term="笔记" scheme="http://www.xujiuming.com/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="java" scheme="http://www.xujiuming.com/tags/java/"/>
    
      <category term="jvm" scheme="http://www.xujiuming.com/tags/jvm/"/>
    
  </entry>
  
  <entry>
    <title>jdk8-time笔记</title>
    <link href="http://www.xujiuming.com/ming/9c26946f.html"/>
    <id>http://www.xujiuming.com/ming/9c26946f.html</id>
    <published>2018-07-09T04:47:13.000Z</published>
    <updated>2018-07-09T05:40:04.100Z</updated>
    
    <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>在jdk8之前 如果要使用date 的类型 就需要把java.util.Date 之类的类组合起来使用<br>特别是在常用的时间加减、获取特定时间、格式化的时候 都必须要java.util.Calendar 、java.util.TimeZone、java.text.SimpleDateFormat这些类进行封装 或者需要引入第三方工具包来简化操作</p><p>在jdk8中 time是以jodaTime这个工具包为模板 加入到jdk中的 对于时间的加减、获取特定时间、格式化、变更时区、获取更加精确的时间等等操作变的更加简单 而且是不可变并且线程安全的方法</p><h4 id="核心类和核心方法说明"><a href="#核心类和核心方法说明" class="headerlink" title="核心类和核心方法说明"></a>核心类和核心方法说明</h4><h5 id="核心类"><a href="#核心类" class="headerlink" title="核心类"></a>核心类</h5><h6 id="核心时间对象类"><a href="#核心时间对象类" class="headerlink" title="核心时间对象类"></a>核心时间对象类</h6><table><thead><tr><th style="text-align:left">名称</th><th style="text-align:left">功能</th><th style="text-align:left">备注</th></tr></thead><tbody><tr><td style="text-align:left">Instant</td><td style="text-align:left">获取从1970年开始的时间点</td><td style="text-align:left">类似之前的java.util.Date、通过这个类可以获取到非常精确的时间</td></tr><tr><td style="text-align:left">LocalDate</td><td style="text-align:left">本地年月日Date对象</td><td style="text-align:left">获取当前年月日信息的对象</td></tr><tr><td style="text-align:left">LocalTime</td><td style="text-align:left">本地时分秒Date对象</td><td style="text-align:left">获取当前时分秒信息的对象</td></tr><tr><td style="text-align:left">LocalDateTime</td><td style="text-align:left">本地年月日时分秒Date对象</td><td style="text-align:left">获取当前年月日时分秒信息的对象</td></tr><tr><td style="text-align:left">OffsetTime</td><td style="text-align:left">获取时分秒Date对象并且带上偏移时间信息</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">OffsetDateTime</td><td style="text-align:left">获取带年月日时分秒的Date对象并且带上偏移时间信息</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">ZonedDateTime</td><td style="text-align:left">获取带时区信息的年月日时分秒对象 并且带上时区信息</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">Year</td><td style="text-align:left">年对象</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">YearMonth</td><td style="text-align:left">年月对象</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">MonthDay</td><td style="text-align:left">月日对象</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">Period</td><td style="text-align:left">时间间隔区间对象</td><td style="text-align:left">表示以年、月、日衡量的时长</td></tr><tr><td style="text-align:left">Duration</td><td style="text-align:left">时间间隔区间对象</td><td style="text-align:left">表示以秒和纳秒为基准的时长</td></tr></tbody></table><h6 id="核心枚举类"><a href="#核心枚举类" class="headerlink" title="核心枚举类"></a>核心枚举类</h6><ul><li>ChronoUnit 时间单位</li></ul><table><thead><tr><th style="text-align:left">名称</th><th style="text-align:left">含义</th><th style="text-align:left">备注</th></tr></thead><tbody><tr><td style="text-align:left">NANOS</td><td style="text-align:left">纳秒</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">MICROS</td><td style="text-align:left">微秒</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">MILLIS</td><td style="text-align:left">毫秒</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">SECONDS</td><td style="text-align:left">秒</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">MINUTES</td><td style="text-align:left">分</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">HOURS</td><td style="text-align:left">小时</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">HALF_DAYS</td><td style="text-align:left">半天</td><td style="text-align:left">12个小时</td></tr><tr><td style="text-align:left">DAYS</td><td style="text-align:left">一天</td><td style="text-align:left">24个小时</td></tr><tr><td style="text-align:left">WEEKS</td><td style="text-align:left">一周</td><td style="text-align:left">7天</td></tr><tr><td style="text-align:left">MONTHS</td><td style="text-align:left">一个月</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">YEARS</td><td style="text-align:left">一年</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">DECADES</td><td style="text-align:left">十年</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">CENTURIES</td><td style="text-align:left">百年</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">MILLENNIA</td><td style="text-align:left">千年</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">ERAS</td><td style="text-align:left">十亿年</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">FOREVER</td><td style="text-align:left">永远</td><td style="text-align:left">Long.MAX_VALUE</td></tr></tbody></table><ul><li>DateTimeFormatter 时间格式化格式</li></ul><table><thead><tr><th style="text-align:left">名称</th><th style="text-align:left">表达式</th><th style="text-align:left">备注</th></tr></thead><tbody><tr><td style="text-align:left">ISO_LOCAL_DATE</td><td style="text-align:left">yyyy-MM-dd</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">ISO_OFFSET_DATE</td><td style="text-align:left">yyyy-MM-dd+offset</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">ISO_DATE</td><td style="text-align:left">‘yyyy-MM-dd’ or ‘yyyy-MM-dd+offset’</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">ISO_LOCAL_TIME</td><td style="text-align:left">HH:mm or HH:mm:ss</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">ISO_OFFSET_TIME</td><td style="text-align:left">HH:mm+offset or HH:mm:ss+offset</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">ISO_TIME</td><td style="text-align:left">HH:mm or HH:mm:ss or HH:mm:ss+offset</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">ISO_LOCAL_DATE_TIME</td><td style="text-align:left">yyyy-MM-ddTHH:mm:ss</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">ISO_OFFSET_DATE_TIME</td><td style="text-align:left">yyyy-MM-ddTHH:mm:ss+offset</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">ISO_ZONED_DATE_TIME</td><td style="text-align:left">yyyy-MM-ddTHH:mm:ss+offset[zone]</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">ISO_ORDINAL_DATE</td><td style="text-align:left">yyyy-days</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">ISO_WEEK_DATE</td><td style="text-align:left">yyyy-week-days</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">ISO_INSTANT</td><td style="text-align:left">yyyy-MM-ddTHH:mm:ssZ</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">BASIC_ISO_DATE</td><td style="text-align:left">yyyyMMdd</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">RFC_1123_DATE_TIME</td><td style="text-align:left">‘Tue, 3 Jun 2008 11:05:30 GMT’</td></tr></tbody></table><h5 id="核心方法"><a href="#核心方法" class="headerlink" title="核心方法"></a>核心方法</h5><h6 id="通用核心方法"><a href="#通用核心方法" class="headerlink" title="通用核心方法"></a>通用核心方法</h6><table><thead><tr><th style="text-align:left">名称</th><th style="text-align:left">功能</th><th style="text-align:left">备注</th></tr></thead><tbody><tr><td style="text-align:left">of</td><td style="text-align:left">根据传入的数值转换成相应的时间对象</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">parse</td><td style="text-align:left">根据传入的字符串格式和DateTimeFormatter枚举转换成相应的时间对象</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">get</td><td style="text-align:left">根据时间对象获取相应的时间属性</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">is</td><td style="text-align:left">判断时间的某些属性是否符合方法的意义</td><td style="text-align:left">使用isBefore或者isAfter来判断时间的前后</td></tr><tr><td style="text-align:left">with</td><td style="text-align:left">获取一些特殊时间对象</td><td style="text-align:left">例如这个月第一天之类的</td></tr><tr><td style="text-align:left">plus</td><td style="text-align:left">时间相加</td><td style="text-align:left">可以根据不同的时间单位进行相加</td></tr><tr><td style="text-align:left">minus</td><td style="text-align:left">时间相减</td><td style="text-align:left">可以根据不同的时间单位进行相减</td></tr><tr><td style="text-align:left">to</td><td style="text-align:left">时间类型转换成其他时间类型</td><td style="text-align:left">例如LocalDateTime to 成 LocalTime</td></tr><tr><td style="text-align:left">at</td><td style="text-align:left">转换成带偏移量、时区之类的时间对象操作</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">format</td><td style="text-align:left">格式化时间类型</td><td style="text-align:left">根据DateTimeFormatter对象来转换</td></tr></tbody></table><h6 id="特殊方法"><a href="#特殊方法" class="headerlink" title="特殊方法"></a>特殊方法</h6><ul><li>判断是否是闰年<br>LocalDate#isLeapYear();</li></ul><h4 id="实际案例"><a href="#实际案例" class="headerlink" title="实际案例"></a>实际案例</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br></pre></td><td class="code"><pre><span class="line">package com.ming;</span><br><span class="line"></span><br><span class="line">import org.junit.Test;</span><br><span class="line"></span><br><span class="line">import java.text.SimpleDateFormat;</span><br><span class="line">import java.time.*;</span><br><span class="line">import java.time.format.DateTimeFormatter;</span><br><span class="line">import java.time.temporal.ChronoUnit;</span><br><span class="line">import java.time.temporal.TemporalAdjusters;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 该包的API提供了大量相关的方法，这些方法一般有一致的方法前缀：</span><br><span class="line"> * &lt;p&gt;</span><br><span class="line"> * of：静态工厂方法。</span><br><span class="line"> * &lt;p&gt;</span><br><span class="line"> * parse：静态工厂方法，关注于解析。</span><br><span class="line"> * &lt;p&gt;</span><br><span class="line"> * get：获取某些东西的值。</span><br><span class="line"> * &lt;p&gt;</span><br><span class="line"> * is：检查某些东西的是否是true。</span><br><span class="line"> * &lt;p&gt;</span><br><span class="line"> * with：不可变的setter等价物。</span><br><span class="line"> * &lt;p&gt;</span><br><span class="line"> * plus：加一些量到某个对象。</span><br><span class="line"> * &lt;p&gt;</span><br><span class="line"> * minus：从某个对象减去一些量。</span><br><span class="line"> * &lt;p&gt;</span><br><span class="line"> * to：转换到另一个类型。</span><br><span class="line"> * &lt;p&gt;</span><br><span class="line"> * at：把这个对象与另一个对象组合起来，例如： date.atTime(time)。</span><br><span class="line"> * &lt;p&gt;</span><br><span class="line"> * format：按照合适的格式 格式化成相应的格式的字符串</span><br><span class="line"> * &lt;p&gt;</span><br><span class="line"> *</span><br><span class="line"> * @author ming</span><br><span class="line"> * @date 2018-06-30 15:33:10</span><br><span class="line"> */</span><br><span class="line">public class TestTime &#123;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 获取当前时间</span><br><span class="line">     *</span><br><span class="line">     * @author ming</span><br><span class="line">     * @date 2018-06-30 15:31:33</span><br><span class="line">     */</span><br><span class="line">    @Test</span><br><span class="line">    public void testNewDate() &#123;</span><br><span class="line">        System.out.println(&quot;获取带纳秒的时间:&quot; + Instant.now());</span><br><span class="line">        System.out.println(&quot;获取年月日:&quot; + LocalDate.now());</span><br><span class="line">        System.out.println(&quot;获取时分秒:&quot; + LocalTime.now());</span><br><span class="line">        System.out.println(&quot;获取年月日时分秒:&quot; + LocalDateTime.now());</span><br><span class="line">        System.out.println(&quot;获取时分秒带时区:&quot; + OffsetTime.now());</span><br><span class="line">        System.out.println(&quot;获取年月日时分秒带时区:&quot; + OffsetDateTime.now());</span><br><span class="line">        System.out.println(&quot;获取时分秒带详细时区信息:&quot; + ZonedDateTime.now());</span><br><span class="line">        System.out.println(&quot;获取年:&quot; + Year.now());</span><br><span class="line">        System.out.println(&quot;获取年月:&quot; + YearMonth.now());</span><br><span class="line">        System.out.println(&quot;获取月日:&quot; + MonthDay.now());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 直接根据参数转换成时间类型</span><br><span class="line">     *</span><br><span class="line">     * @author ming</span><br><span class="line">     * @date 2018-06-30 15:32:59</span><br><span class="line">     */</span><br><span class="line">    @Test</span><br><span class="line">    public void testOf() &#123;</span><br><span class="line">        System.out.println(&quot;根据秒数获取时间点:&quot; + Instant.ofEpochSecond(1000));</span><br><span class="line">        System.out.println(&quot;根据年月日获取年月日时间对象:&quot; + LocalDate.of(2018, 11, 11));</span><br><span class="line">        System.out.println(&quot;根据时分秒获取时分秒对象:&quot; + LocalTime.of(11, 11, 11));</span><br><span class="line">        System.out.println(&quot;根据年月日时分秒获取年月日时分秒时间对象:&quot; + LocalDateTime.of(2018, 11, 11, 11, 11, 11));</span><br><span class="line">        System.out.println(&quot;根据时分秒获取时分秒带时区对象:&quot; + OffsetTime.of(11, 11, 11, 1, ZoneOffset.UTC));</span><br><span class="line">        System.out.println(&quot;根据年月日时分秒获取年月日时分秒时间带时区对象:&quot; + OffsetDateTime.of(2018, 11, 11, 11, 11, 11, 11, ZoneOffset.UTC));</span><br><span class="line">        System.out.println(&quot;根据年月日时分秒获取年月日时分秒时间带时区对象:&quot; + ZonedDateTime.of(2018, 11, 11, 11, 11, 11, 11, ZoneId.systemDefault()));</span><br><span class="line">        System.out.println(&quot;根据年数转会成年对象:&quot; + Year.of(2018));</span><br><span class="line">        System.out.println(&quot;根据年月数获取年月对象:&quot; + YearMonth.of(2018, 11));</span><br><span class="line">        System.out.println(&quot;根据月日数获取月日对象&quot; + MonthDay.of(11, 11));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 将指定的文本转换成 指定格式的 time对象</span><br><span class="line">     *</span><br><span class="line">     * @author ming</span><br><span class="line">     * @date 2018-07-02 14:41:23</span><br><span class="line">     */</span><br><span class="line">    @Test</span><br><span class="line">    public void testParse() &#123;</span><br><span class="line">        System.out.println(LocalDateTime.parse(&quot;2011-12-03T10:15:30&quot;, DateTimeFormatter.ISO_LOCAL_DATE_TIME));</span><br><span class="line">        //.....略  跟 of差不多 主要是解析字符串成时间相关对象</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 根据时间对象获取 属性</span><br><span class="line">     *</span><br><span class="line">     * @author ming</span><br><span class="line">     * @date 2018-07-05 16:49:34</span><br><span class="line">     */</span><br><span class="line">    @Test</span><br><span class="line">    public void testGet() &#123;</span><br><span class="line">        System.out.println(&quot;获取当前时间点的时间戳(s)&quot; + Instant.now().getEpochSecond());</span><br><span class="line">        System.out.println(LocalDateTime.now().getDayOfWeek());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 判断某些属性  例如判断时间前后</span><br><span class="line">     *</span><br><span class="line">     * @author ming</span><br><span class="line">     * @date 2018-07-05 16:50:06</span><br><span class="line">     */</span><br><span class="line">    @Test</span><br><span class="line">    public void testIs() &#123;</span><br><span class="line">        System.out.println(Instant.now().isAfter(Instant.now()));</span><br><span class="line">        System.out.println(Instant.now().isBefore(Instant.now()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 获取一些特殊的时间点</span><br><span class="line">     *</span><br><span class="line">     * @author ming</span><br><span class="line">     * @date 2018-07-05 16:51:36</span><br><span class="line">     */</span><br><span class="line">    @Test</span><br><span class="line">    public void testWith() &#123;</span><br><span class="line">        System.out.println(LocalDateTime.now().with(TemporalAdjusters.firstDayOfMonth()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 时间相加</span><br><span class="line">     *</span><br><span class="line">     * @author ming</span><br><span class="line">     * @date 2018-07-05 16:52:49</span><br><span class="line">     */</span><br><span class="line">    @Test</span><br><span class="line">    public void testPlus() &#123;</span><br><span class="line">        System.out.println(Instant.now().plusMillis(999999));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 时间相减</span><br><span class="line">     *</span><br><span class="line">     * @author ming</span><br><span class="line">     * @date 2018-07-05 16:52:59</span><br><span class="line">     */</span><br><span class="line">    @Test</span><br><span class="line">    public void testMinus() &#123;</span><br><span class="line">        System.out.println(Instant.now().minusMillis(99999999));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 将时间对象转换成其他的time对象</span><br><span class="line">     *</span><br><span class="line">     * @author ming</span><br><span class="line">     * @date 2018-07-05 16:53:16</span><br><span class="line">     */</span><br><span class="line">    @Test</span><br><span class="line">    public void testTo() &#123;</span><br><span class="line">        System.out.println(Instant.now().toEpochMilli());</span><br><span class="line">        System.out.println(LocalDateTime.now().toLocalTime());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 设置时区</span><br><span class="line">     *</span><br><span class="line">     * @author ming</span><br><span class="line">     * @date 2018-07-05 16:53:29</span><br><span class="line">     */</span><br><span class="line">    @Test</span><br><span class="line">    public void testAt() &#123;</span><br><span class="line">        System.out.println(Instant.now().atOffset(ZoneOffset.UTC));</span><br><span class="line">        System.out.println(Instant.now().atZone(ZoneId.systemDefault()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 时间加减</span><br><span class="line">     * ChronoUnit来控制加减的量级</span><br><span class="line">     *</span><br><span class="line">     * @author ming</span><br><span class="line">     * @date 2018-07-05 16:58:19</span><br><span class="line">     * @see ChronoUnit#NANOS 纳秒</span><br><span class="line">     * @see ChronoUnit#MICROS 微秒</span><br><span class="line">     * @see ChronoUnit#MILLIS 毫秒</span><br><span class="line">     * @see ChronoUnit#SECONDS 秒</span><br><span class="line">     * @see ChronoUnit#MINUTES 分</span><br><span class="line">     * @see ChronoUnit#HOURS 小时</span><br><span class="line">     * @see ChronoUnit#HALF_DAYS 半天  12小时</span><br><span class="line">     * @see ChronoUnit#DAYS 一天  24小时</span><br><span class="line">     * @see ChronoUnit#WEEKS 一周</span><br><span class="line">     * @see ChronoUnit#MONTHS 一月</span><br><span class="line">     * @see ChronoUnit#YEARS 一年</span><br><span class="line">     * @see ChronoUnit#DECADES 十年</span><br><span class="line">     * @see ChronoUnit#CENTURIES 百年</span><br><span class="line">     * @see ChronoUnit#MILLENNIA 千年</span><br><span class="line">     * @see ChronoUnit#ERAS 十亿年</span><br><span class="line">     * @see ChronoUnit#FOREVER 永远 Long.MAX_VALUE</span><br><span class="line">     */</span><br><span class="line">    @Test</span><br><span class="line">    public void testPlusAndMinus() &#123;</span><br><span class="line">        System.out.println(&quot;加一天&quot; + LocalDateTime.now().plus(1, ChronoUnit.DAYS));</span><br><span class="line">        System.out.println(&quot;减一天&quot; + LocalDateTime.now().minus(1, ChronoUnit.DAYS));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 判断是否是闰年</span><br><span class="line">     *</span><br><span class="line">     * @author ming</span><br><span class="line">     * @date 2018-07-05 17:09:34</span><br><span class="line">     */</span><br><span class="line">    @Test</span><br><span class="line">    public void testLeapYear() &#123;</span><br><span class="line">        System.out.println(LocalDateTime.now().toLocalDate().isLeapYear());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 计算两个时间之间的差值</span><br><span class="line">     *</span><br><span class="line">     * @author ming</span><br><span class="line">     * @date 2018-07-05 17:12:37</span><br><span class="line">     */</span><br><span class="line">    @Test</span><br><span class="line">    public void testPeriod() &#123;</span><br><span class="line">        LocalDateTime localDateTime = LocalDateTime.of(2018, 1, 11, 11, 11, 11);</span><br><span class="line">        Period period = Period.between(localDateTime.toLocalDate(), LocalDate.now());</span><br><span class="line">        System.out.println(&quot;间隔时间:&quot; + period.getYears() + &quot;年&quot; + period.getMonths() + &quot;个月&quot; + period.getDays() + &quot;天&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 根据formatter枚举格式化时间</span><br><span class="line">     *</span><br><span class="line">     * @author ming</span><br><span class="line">     * @date 2018-07-05 17:32:32</span><br><span class="line">     * @see DateTimeFormatter#ofPattern(String) 自定义格式化格式</span><br><span class="line">     * @see DateTimeFormatter#ISO_LOCAL_DATE yyyy-MM-dd</span><br><span class="line">     * @see DateTimeFormatter#ISO_OFFSET_DATE yyyy-MM-dd+offset</span><br><span class="line">     * @see DateTimeFormatter#ISO_DATE &apos;yyyy-MM-dd&apos; or &apos;yyyy-MM-dd+offset&apos;.</span><br><span class="line">     * @see DateTimeFormatter#ISO_LOCAL_TIME HH:mm or HH:mm:ss</span><br><span class="line">     * @see DateTimeFormatter#ISO_OFFSET_TIME HH:mm+offset or HH:mm:ss+offset</span><br><span class="line">     * @see DateTimeFormatter#ISO_TIME HH:mm or HH:mm:ss or HH:mm:ss+offset</span><br><span class="line">     * @see DateTimeFormatter#ISO_LOCAL_DATE_TIME yyyy-MM-ddTHH:mm:ss</span><br><span class="line">     * @see DateTimeFormatter#ISO_OFFSET_DATE_TIME yyyy-MM-ddTHH:mm:ss+offset</span><br><span class="line">     * @see DateTimeFormatter#ISO_ZONED_DATE_TIME yyyy-MM-ddTHH:mm:ss+offset[zone]</span><br><span class="line">     * @see DateTimeFormatter#ISO_ORDINAL_DATE yyyy-days</span><br><span class="line">     * @see DateTimeFormatter#ISO_WEEK_DATE yyyy-week-days</span><br><span class="line">     * @see DateTimeFormatter#ISO_INSTANT yyyy-MM-ddTHH:mm:ssZ</span><br><span class="line">     * @see DateTimeFormatter#BASIC_ISO_DATE yyyyMMdd</span><br><span class="line">     * @see DateTimeFormatter#RFC_1123_DATE_TIME &apos;Tue, 3 Jun 2008 11:05:30 GMT&apos;</span><br><span class="line">     */</span><br><span class="line">    @Test</span><br><span class="line">    public void testFormat() &#123;</span><br><span class="line">        System.out.println(LocalDate.parse(&quot;20181111&quot;, DateTimeFormatter.BASIC_ISO_DATE));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 将时间 按照格式 格式化成string</span><br><span class="line">     *</span><br><span class="line">     * @author ming</span><br><span class="line">     * @date 2018-07-05 18:23:40</span><br><span class="line">     */</span><br><span class="line">    @Test</span><br><span class="line">    public void testFormatString() &#123;</span><br><span class="line">        System.out.println(LocalDateTime.now().format(DateTimeFormatter.BASIC_ISO_DATE));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * jdk8的time 和jdk8之前的date相关的类型转换</span><br><span class="line">     *</span><br><span class="line">     * @author ming</span><br><span class="line">     * @date 2018-07-05 18:29:21</span><br><span class="line">     */</span><br><span class="line">    @Test</span><br><span class="line">    public void testConverter() &#123;</span><br><span class="line">        //jdk8 time 转换成Date</span><br><span class="line">        java.util.Date juDate = java.util.Date.from(Instant.now());</span><br><span class="line">        System.out.println(juDate);</span><br><span class="line">        java.util.Date juDate1 = java.util.Date.from(LocalDateTime.now().toInstant(ZoneOffset.UTC));</span><br><span class="line">        System.out.println(juDate1);</span><br><span class="line"></span><br><span class="line">        //Date 转换成jdk8 time</span><br><span class="line">        java.util.Date date = new java.util.Date();</span><br><span class="line">        System.out.println(date.toInstant());</span><br><span class="line">        System.out.println(date.toInstant().atZone(ZoneId.systemDefault()).toLocalDate());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>时间对象的操作在jdk8之前 其实很操蛋 只能通过使用一些自己封装或者 一些组织封装的dateUtils 来操作 有时候一些特殊的时间处理只能单独写工具了 很麻烦<br>现在jdk8 的time包 直接继承了jodaTime的操作 常用操作变成了 不可变而且线程安全的操作了 并且增强了对时间的 偏移和时区的处理 增加了 很多常规的时间处理方法<br>有点蛋疼的是需要考虑 框架之类的对于time包的兼容  特别是jdbc对于time包的对象的支持程度<br>不过  我可以使用Date转换成time的时间对象 在进行操作 然后再转换回去即可</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h4&gt;&lt;p&gt;在jdk8之前 如果要使用date 的类型 就需要把java.util.Date 之类的类组合起来使用&lt;br&gt;特别是在常用的时间加减、获取特
      
    
    </summary>
    
      <category term="笔记" scheme="http://www.xujiuming.com/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="jdk8" scheme="http://www.xujiuming.com/tags/jdk8/"/>
    
      <category term="time" scheme="http://www.xujiuming.com/tags/time/"/>
    
  </entry>
  
  <entry>
    <title>git-lfs使用笔记</title>
    <link href="http://www.xujiuming.com/ming/68597cc5.html"/>
    <id>http://www.xujiuming.com/ming/68597cc5.html</id>
    <published>2018-07-04T04:47:40.000Z</published>
    <updated>2018-07-05T05:52:27.580Z</updated>
    
    <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>一直想找个能够存储比较大的文件 而且又能像git一样操作方便快捷<br>开始准备自建svn来达到需求的<br>后来看github的一些文档看到了git lfs (Git Large File Storage)功能<br>干脆了解了一下 顺便记录下这篇笔记 方便以后查阅<br>常见的git 仓库网站都提供 git lfs 存储 例如github<br>笔记中任何命令都在ubuntu中执行过</p><h4 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h4><h5 id="安装-git-lfs"><a href="#安装-git-lfs" class="headerlink" title="安装 git lfs"></a>安装 git lfs</h5><p>git lfs支持直接二进制安装、各种包管理工具安装(apt、yum、pacman之类的)<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#安装 git lfs</span><br><span class="line"> sudo apt install git-lfs</span><br><span class="line"> # 初始化git lfs</span><br><span class="line"> sudo git lfs install</span><br></pre></td></tr></table></figure><p></p><h5 id="配置lfs-管理的文件"><a href="#配置lfs-管理的文件" class="headerlink" title="配置lfs 管理的文件"></a>配置lfs 管理的文件</h5><p>初始化 lfs的配置文件<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git lfs track &quot;&lt;目录&gt;/*&quot;</span><br></pre></td></tr></table></figure><p></p><p>执行上面的命令会在项目的根目录生成 .gitattributes<br>内容大致如下<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;目录&gt;/* filter=lfs diff=lfs merge=lfs -text</span><br></pre></td></tr></table></figure><p></p><h5 id="添加lfs-gitattributes配置到仓库"><a href="#添加lfs-gitattributes配置到仓库" class="headerlink" title="添加lfs .gitattributes配置到仓库"></a>添加lfs .gitattributes配置到仓库</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo git add .gitattributes </span><br><span class="line">sudo commit -m &quot;init  git lfs config&quot;</span><br></pre></td></tr></table></figure><h5 id="添加并且上传大文件"><a href="#添加并且上传大文件" class="headerlink" title="添加并且上传大文件"></a>添加并且上传大文件</h5><p>将大文件复制到 &lt;目录&gt;<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo git add &lt;目录&gt;/xxx</span><br><span class="line">sudo git commit -m &quot;update xxx&quot;</span><br><span class="line">sudo git push</span><br></pre></td></tr></table></figure><p></p><p>基于git lfs 管理的文件更新会显示成<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Git LFS: (1 of 1 files) 9.18 KB / 9.18 KB                                                                                                                      </span><br><span class="line">对象计数中: 10, 完成.</span><br><span class="line">。。。。。。。。</span><br></pre></td></tr></table></figure><p></p><h5 id="git-lfs-卸载"><a href="#git-lfs-卸载" class="headerlink" title="git lfs 卸载"></a>git lfs 卸载</h5><ul><li><p>卸载git lfs</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt --purge remove git-lfs</span><br></pre></td></tr></table></figure></li><li><p>删除lfs相关的filter</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#查看 git的全局配置</span><br><span class="line">git config -l </span><br><span class="line">#删除和lfs有关的配置</span><br><span class="line">## 查看lfs相关的配置</span><br><span class="line">git config -l|grep lfs</span><br><span class="line">##挨个删除</span><br><span class="line">git config --global --unset filter.lfs.clean</span><br><span class="line">git config --global --unset filter.lfs.smudge</span><br><span class="line">git config --global --unset filter.lfs.process</span><br><span class="line">git config --global --unset filter.lfs.required</span><br><span class="line">git config --global --unset filter.lfs.required</span><br><span class="line">#删除 lfs的仓库地址  按需删除</span><br><span class="line">git config --global --unset lfs.https://github.com/xuxianyu/blog.git/info/lfs.access</span><br></pre></td></tr></table></figure></li></ul><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>git 的功能越来越吊了  现在能够好好的管理大文件了<br>git只是存储大文件的指针   不负责存储 还是保持了git的高效 易用 但是有能够管理大文件  6的一批</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h4&gt;&lt;p&gt;一直想找个能够存储比较大的文件 而且又能像git一样操作方便快捷&lt;br&gt;开始准备自建svn来达到需求的&lt;br&gt;后来看github的一些文档看
      
    
    </summary>
    
      <category term="笔记" scheme="http://www.xujiuming.com/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="tools" scheme="http://www.xujiuming.com/tags/tools/"/>
    
      <category term="git lfs" scheme="http://www.xujiuming.com/tags/git-lfs/"/>
    
      <category term="github" scheme="http://www.xujiuming.com/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>代码质量监控平台sonar使用笔记</title>
    <link href="http://www.xujiuming.com/ming/8dcd7b21.html"/>
    <id>http://www.xujiuming.com/ming/8dcd7b21.html</id>
    <published>2018-06-28T06:21:19.000Z</published>
    <updated>2018-06-29T06:40:09.113Z</updated>
    
    <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>最近写的代码 太多了 感觉质量有所下降<br>之前本地一直使用 alibaba的code插件 但是没有出团队版本的<br>干脆搞了一个 sonar 检测一波自己的代码质量</p><h4 id="sonar-docker-方式启动"><a href="#sonar-docker-方式启动" class="headerlink" title="sonar docker 方式启动"></a>sonar docker 方式启动</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#安装中文插件的 sonar </span><br><span class="line"></span><br><span class="line">sudo  docker run -d --name sonarqube -p 9000:9000 -p 9092:9092 jiuming/sonar-qube-zh:1.0.0</span><br><span class="line">#原版 英文版本的</span><br><span class="line">#sudo  docker run -d --name sonarqube -p 9000:9000 -p 9092:9092 sonarqube</span><br></pre></td></tr></table></figure><p>sonar swarm stack配置<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">version: &apos;3.3&apos;</span><br><span class="line">services:</span><br><span class="line"> sonar:</span><br><span class="line">  image: jiuming/sonar-qube-zh:1.0.0</span><br><span class="line">  ports:</span><br><span class="line">   - 9000:9000</span><br><span class="line">   - 9092:9092</span><br><span class="line">  networks:</span><br><span class="line">    - sonar</span><br><span class="line">  deploy:</span><br><span class="line">   replicas: 1</span><br><span class="line">   update_config:</span><br><span class="line">    parallelism: 1</span><br><span class="line">    delay: 10s</span><br><span class="line">   restart_policy:</span><br><span class="line">    condition: on-failure</span><br><span class="line">networks:</span><br><span class="line">  sonar:</span><br><span class="line">   driver: overlay</span><br></pre></td></tr></table></figure><p></p><p>打开 <a href="http://localhost:9000" target="_blank" rel="noopener">http://localhost:9000</a>  默认账户:admin  默认密码:admin</p><ul><li>sonar qube 官方docker image 安装中文插件方法<br>登录 容器  docker exec -it <containerid> /bin/sh 执行如下命令<br>ps: sonar 中文插件版本 请按照<a href="https://github.com/SonarQubeCommunity/sonar-l10n-zh" target="_blank" rel="noopener">https://github.com/SonarQubeCommunity/sonar-l10n-zh</a> 文档去下载安装   <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#安装 中文插件</span><br><span class="line">wget https://github.com/SonarQubeCommunity/sonar-l10n-zh/releases/download/sonar-l10n-zh-plugin-1.21/sonar-l10n-zh-plugin-1.21.jar  &amp;&amp; \</span><br><span class="line">mv /opt/sonarqube/sonar-l10n-zh-plugin-1.21.jar /opt/sonarqube/extensions/plugins</span><br></pre></td></tr></table></figure></containerid></li></ul><p>或者直接使用已经修改好的镜像jiuming/sonar-qube-zh:1.0.0 这个是基于 7.x的sonar</p><h4 id="maven-添加sonar-插件"><a href="#maven-添加sonar-插件" class="headerlink" title="maven 添加sonar 插件"></a>maven 添加sonar 插件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;plugin&gt;</span><br><span class="line">        &lt;groupId&gt;org.sonarsource.scanner.maven&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;sonar-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;3.4.0.905&lt;/version&gt;</span><br><span class="line">&lt;/plugin&gt;</span><br></pre></td></tr></table></figure><h4 id="执行-sonar-任务"><a href="#执行-sonar-任务" class="headerlink" title="执行 sonar 任务"></a>执行 sonar 任务</h4><p>如果在另外一台机器上 加上-Dsonar.host.url=<a href="http://ip:port" target="_blank" rel="noopener">http://ip:port</a><br>如果使用了密钥 那么需要-Dsonar.login=xxxxxx<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mvn sonar:sonar \</span><br><span class="line">  -Dsonar.host.url=http://localhost:9000 </span><br><span class="line">#mvn sonar:sonar \</span><br><span class="line">#  -Dsonar.host.url=http://localhost:9000 \</span><br><span class="line">#  -Dsonar.login=5cb26b212d30530db172ff6adbfe5d2887698b8c</span><br></pre></td></tr></table></figure><p></p><h4 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h4><ul><li>报svn认证错误(git认证错误和这个差不多处理方法 )<br>svn: E170001: Authentication required for ‘<a href="https://xxxxxx:xxx" target="_blank" rel="noopener">https://xxxxxx:xxx</a> VisualSVN Server’ -<br>在配置&gt;通用设置&gt;scm&gt;配置svn的username、password或者配置密钥即可 </li></ul><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>大部分检测的规范 都差不多把  本地还是使用alibaba的规范比较和是 直接安装alibaba的code插件也不错<br>sonar 适合团队使用  统一代码风格、减少明显bug</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h4&gt;&lt;p&gt;最近写的代码 太多了 感觉质量有所下降&lt;br&gt;之前本地一直使用 alibaba的code插件 但是没有出团队版本的&lt;br&gt;干脆搞了一个 so
      
    
    </summary>
    
      <category term="实战" scheme="http://www.xujiuming.com/categories/%E5%AE%9E%E6%88%98/"/>
    
    
      <category term="代码质量" scheme="http://www.xujiuming.com/tags/%E4%BB%A3%E7%A0%81%E8%B4%A8%E9%87%8F/"/>
    
      <category term="持续集成" scheme="http://www.xujiuming.com/tags/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/"/>
    
  </entry>
  
  <entry>
    <title>stream集合操作符笔记</title>
    <link href="http://www.xujiuming.com/ming/8486f105.html"/>
    <id>http://www.xujiuming.com/ming/8486f105.html</id>
    <published>2018-06-26T05:03:34.000Z</published>
    <updated>2018-07-05T02:43:34.885Z</updated>
    
    <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>用了这么久的jdk8 的stream集合<br>感觉还是很吊的 特别是作统计计算、集合转化之类的操作</p><p>虽然有parallelStream 来进行并行计算 但是 不推荐这么去使用 原因如下<br>虽然有并行 但是 parallelStream 的并行数量是按照jvm的核心数量去启动的 这个时候就有点蛋疼了 如果真的需要并行 还是建议使用 threadPool去执行 而不是简单的使用 parallelStream<br>parallelStream 只是把任务并行了 但是该有的竞争状态 还是有 就是说和你使用线程池是差不多的也是要考虑竞争状态的问题</p><h4 id="常用操作符列表"><a href="#常用操作符列表" class="headerlink" title="常用操作符列表"></a>常用操作符列表</h4><table><thead><tr><th style="text-align:left">名称</th><th style="text-align:left">表达式</th><th style="text-align:left">作用</th><th style="text-align:left">备注</th></tr></thead><tbody><tr><td style="text-align:left">filter</td><td style="text-align:left">t-&gt;boolean</td><td style="text-align:left">过滤数 据</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">map</td><td style="text-align:left">t-&gt;r</td><td style="text-align:left">处理数据</td><td style="text-align:left">为每一个数据作map中的操作</td></tr><tr><td style="text-align:left">flatMap</td><td style="text-align:left">t-&gt;r.stream()</td><td style="text-align:left">处理数据并且扁平化</td><td style="text-align:left">为每个数据进行处理 并且会返回一个Stream 处理List<list>&gt; 这种数据的时候可以通过此操作扁平化内部的那个list</list></td></tr><tr><td style="text-align:left">distinct</td><td style="text-align:left">-</td><td style="text-align:left">去重并且返回一个新的stream</td><td style="text-align:left">进行数据去重的时候使用 必须是有限的stream</td></tr><tr><td style="text-align:left">sorted</td><td style="text-align:left">-</td><td style="text-align:left">排序并且返回一个新的stream</td><td style="text-align:left">进行stream排序使用 但是这个必须要是有限的stream</td></tr><tr><td style="text-align:left">peek</td><td style="text-align:left">t-&gt;void</td><td style="text-align:left">预览、执行某个不返回的操作 每次返回新的stream 避免消耗stream</td><td style="text-align:left">做一些void的操作使用</td></tr><tr><td style="text-align:left">limit</td><td style="text-align:left">-</td><td style="text-align:left">截断数据</td><td style="text-align:left">截断前x个数据 返回新的stream</td></tr><tr><td style="text-align:left">skip</td><td style="text-align:left">-</td><td style="text-align:left">跳过数据</td><td style="text-align:left">跳过前x个数据 返回新的stream</td></tr><tr><td style="text-align:left">forEach</td><td style="text-align:left">t-&gt;void</td><td style="text-align:left">迭代数据</td><td style="text-align:left">内部迭代 每啥好说的</td></tr><tr><td style="text-align:left">reduce</td><td style="text-align:left">(identity,(x,y)-&gt;result)、((x,y)-&gt;result)</td><td style="text-align:left">计数器</td><td style="text-align:left">做一些复杂的综合统计适合</td></tr><tr><td style="text-align:left">collect</td><td style="text-align:left">(void-&gt;t,r-&gt;void,r-&gt;void)、(collector)</td><td style="text-align:left">收集结果</td><td style="text-align:left">将结果收集返回给其他对象</td></tr><tr><td style="text-align:left">min</td><td style="text-align:left">(o1,o2)-&gt;o1 or o2</td><td style="text-align:left">获取最小的元素</td><td style="text-align:left">必须是有限的元素</td></tr><tr><td style="text-align:left">max</td><td style="text-align:left">(o1,o2)-&gt;o1 or o2</td><td style="text-align:left">获取最大的元素</td><td style="text-align:left">必须是有限的元素</td></tr><tr><td style="text-align:left">count</td><td style="text-align:left">-</td><td style="text-align:left">统计数量</td><td style="text-align:left">统计数量</td></tr><tr><td style="text-align:left">anyMatch</td><td style="text-align:left">t-&gt;boolean</td><td style="text-align:left">匹配</td><td style="text-align:left">只要有一个匹配就返回true</td></tr><tr><td style="text-align:left">allMatch</td><td style="text-align:left">t-&gt;boolean</td><td style="text-align:left">匹配</td><td style="text-align:left">必须所有元素匹配才返回true</td></tr><tr><td style="text-align:left">noneMatch</td><td style="text-align:left">t-&gt;boolean</td><td style="text-align:left">匹配</td><td style="text-align:left">必须所有元素不匹配返回true</td></tr><tr><td style="text-align:left">findFirst</td><td style="text-align:left">-</td><td style="text-align:left">获取第一个元素</td><td style="text-align:left">获取到第一个元素马上返回</td></tr><tr><td style="text-align:left">findAny</td><td style="text-align:left">-</td><td style="text-align:left">获取返回的元素</td></tr></tbody></table><h4 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br></pre></td><td class="code"><pre><span class="line">package com.ming;</span><br><span class="line"></span><br><span class="line">import org.junit.Test;</span><br><span class="line"></span><br><span class="line">import java.math.BigDecimal;</span><br><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.List;</span><br><span class="line">import java.util.Map;</span><br><span class="line">import java.util.stream.Collectors;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 测试 stream 用法</span><br><span class="line"> *</span><br><span class="line"> * @author ming</span><br><span class="line"> * @date 2018-06-26 15:45:08</span><br><span class="line"> */</span><br><span class="line">public class TestStream &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 将List&lt;T1&gt;  转换成 Map&lt;id,T1&gt;</span><br><span class="line">     *</span><br><span class="line">     * @author ming</span><br><span class="line">     * @date 2018-06-26 15:54:54</span><br><span class="line">     */</span><br><span class="line">    @Test</span><br><span class="line">    public void listToMap() &#123;</span><br><span class="line">        List&lt;T1&gt; list = new ArrayList&lt;&gt;();</span><br><span class="line">        for (int i = 0; i &lt; 3; i++) &#123;</span><br><span class="line">            list.add(new T1(&quot;id&quot; + i, &quot;name&quot; + i));</span><br><span class="line">        &#125;</span><br><span class="line">        //转换成 id 为key  T1为value的map</span><br><span class="line">        Map&lt;String, T1&gt; map = list.stream().collect(Collectors.toMap(T1::getId, t -&gt; t));</span><br><span class="line">        System.out.println(map);</span><br><span class="line">        //当出现重复值 按照 (oV, nV) -&gt; nV 来选择新的value</span><br><span class="line">        Map&lt;String, T1&gt; map1 = list.stream().collect(Collectors.toMap(T1::getId, t -&gt; t, (oV, nV) -&gt; nV));</span><br><span class="line">        System.out.println(map1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 获取List&lt;T2&gt; 中的t1的list的合集</span><br><span class="line">     *</span><br><span class="line">     * @author ming</span><br><span class="line">     * @date 2018-06-26 16:02:35</span><br><span class="line">     */</span><br><span class="line">    @Test</span><br><span class="line">    public void ListToFlatList() &#123;</span><br><span class="line">        List&lt;T2&gt; list = new ArrayList&lt;&gt;();</span><br><span class="line">        for (int i = 0; i &lt; 3; i++) &#123;</span><br><span class="line">            List&lt;T1&gt; t1List = new ArrayList&lt;&gt;();</span><br><span class="line">            for (int j = 0; j &lt; 3; j++) &#123;</span><br><span class="line">                t1List.add(new T1(&quot;id&quot; + i, &quot;name&quot; + i));</span><br><span class="line">            &#125;</span><br><span class="line">            list.add(new T2(&quot;id&quot; + i, &quot;name&quot; + i, t1List));</span><br><span class="line">        &#125;</span><br><span class="line">        List&lt;T1&gt; resultList = list.stream().flatMap(f -&gt; f.getT1List().stream()).collect(Collectors.toList());</span><br><span class="line">        System.out.println(resultList);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 将 List&lt;T3&gt;中的num进行累加计数</span><br><span class="line">     *</span><br><span class="line">     * @author ming</span><br><span class="line">     * @date 2018-06-26 16:06:24</span><br><span class="line">     */</span><br><span class="line">    @Test</span><br><span class="line">    public void numReduce() &#123;</span><br><span class="line">        List&lt;T3&gt; list = new ArrayList&lt;&gt;();</span><br><span class="line">        for (int i = 0; i &lt; 3; i++) &#123;</span><br><span class="line">            list.add(new T3(&quot;id&quot; + i, i));</span><br><span class="line">        &#125;</span><br><span class="line">        Integer countNum = list.stream().map(T3::getNum).reduce(0, (sum, item) -&gt; sum + item);</span><br><span class="line">        System.out.println(countNum);</span><br><span class="line">        Integer countNum1 = list.stream().map(T3::getNum).reduce(0, Integer::sum);</span><br><span class="line">        System.out.println(countNum1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 将List&lt;T4&gt;按照id 分组并且 累加price</span><br><span class="line">     * 分两种方案</span><br><span class="line">     * 一是先分组 然后map-&gt;reduce</span><br><span class="line">     * 二直接分组 进行reduce 取巧进行对象的累加</span><br><span class="line">     *</span><br><span class="line">     * @author ming</span><br><span class="line">     * @date 2018-07-05 09:58:01</span><br><span class="line">     */</span><br><span class="line">    @Test</span><br><span class="line">    public void testGroupByAndReduce() &#123;</span><br><span class="line">        List&lt;T4&gt; list = new ArrayList&lt;&gt;();</span><br><span class="line">        list.add(new T4(1, BigDecimal.valueOf(1)));</span><br><span class="line">        list.add(new T4(1, BigDecimal.valueOf(10)));</span><br><span class="line">        list.add(new T4(2, BigDecimal.valueOf(1)));</span><br><span class="line">        list.add(new T4(2, BigDecimal.valueOf(10)));</span><br><span class="line">/*</span><br><span class="line"></span><br><span class="line">        //方案一 先分组 然后迭代处理</span><br><span class="line">        Map&lt;Integer, BigDecimal&gt; result = new HashMap&lt;&gt;();</span><br><span class="line">        list.stream().collect(Collectors.groupingBy(T4::getId, Collectors.toSet()))</span><br><span class="line">                .forEach((k, v) -&gt; &#123;</span><br><span class="line">                    result.put(k, v.stream().map(T4::getPrice).reduce(BigDecimal.ZERO, BigDecimal::add));</span><br><span class="line">                &#125;);</span><br><span class="line">        System.out.println(result);</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line"></span><br><span class="line">        //方案二 使用取巧的方案 进行对象累加  这样 分组id不变 而且内部的属性也可以按照自己的定义去计算</span><br><span class="line">        Map&lt;Integer, T4&gt; result = list.stream()</span><br><span class="line">                .collect(Collectors.groupingBy(T4::getId</span><br><span class="line">                        , Collectors.reducing(new T4(1, BigDecimal.ZERO), (o, item) -&gt; new T4(o.getId(), o.getPrice().add(item.getPrice())))));</span><br><span class="line">        System.out.println(result);</span><br><span class="line">*/</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class T1 &#123;</span><br><span class="line">    private String id;</span><br><span class="line">    private String name;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public T1() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public T1(String id, String name) &#123;</span><br><span class="line">        this.id = id;</span><br><span class="line">        this.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getId() &#123;</span><br><span class="line">        return id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setId(String id) &#123;</span><br><span class="line">        this.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getName() &#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setName(String name) &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class T2 &#123;</span><br><span class="line">    private String id;</span><br><span class="line">    private String name;</span><br><span class="line">    private List&lt;T1&gt; t1List;</span><br><span class="line"></span><br><span class="line">    public T2() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public T2(String id, String name, List&lt;T1&gt; t1List) &#123;</span><br><span class="line">        this.id = id;</span><br><span class="line">        this.name = name;</span><br><span class="line">        this.t1List = t1List;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getId() &#123;</span><br><span class="line">        return id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setId(String id) &#123;</span><br><span class="line">        this.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getName() &#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setName(String name) &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public List&lt;T1&gt; getT1List() &#123;</span><br><span class="line">        return t1List;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setT1List(List&lt;T1&gt; t1List) &#123;</span><br><span class="line">        this.t1List = t1List;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class T3 &#123;</span><br><span class="line">    private String id;</span><br><span class="line">    private Integer num;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public T3() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public T3(String id, Integer num) &#123;</span><br><span class="line">        this.id = id;</span><br><span class="line">        this.num = num;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getId() &#123;</span><br><span class="line">        return id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setId(String id) &#123;</span><br><span class="line">        this.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Integer getNum() &#123;</span><br><span class="line">        return num;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setNum(Integer num) &#123;</span><br><span class="line">        this.num = num;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class T4 &#123;</span><br><span class="line">    private Integer id;</span><br><span class="line">    private BigDecimal price;</span><br><span class="line"></span><br><span class="line">    public T4() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public T4(Integer id, BigDecimal price) &#123;</span><br><span class="line">        this.id = id;</span><br><span class="line">        this.price = price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Integer getId() &#123;</span><br><span class="line">        return id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setId(Integer id) &#123;</span><br><span class="line">        this.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public BigDecimal getPrice() &#123;</span><br><span class="line">        return price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setPrice(BigDecimal price) &#123;</span><br><span class="line">        this.price = price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return &quot;T4&#123;&quot; +</span><br><span class="line">                &quot;id=&quot; + id +</span><br><span class="line">                &quot;, price=&quot; + price +</span><br><span class="line">                &apos;&#125;&apos;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>jdk8 出了很多实用的功能 这个stream只是其中之一  算是常用的 在大多数 集合转换、数据计算类型的操作中 用stream 操作会节省很多代码 而且看起来容易理解 并且性能还稍高一点</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h4&gt;&lt;p&gt;用了这么久的jdk8 的stream集合&lt;br&gt;感觉还是很吊的 特别是作统计计算、集合转化之类的操作&lt;/p&gt;&lt;p&gt;虽然有parallelSt
      
    
    </summary>
    
      <category term="笔记" scheme="http://www.xujiuming.com/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="java" scheme="http://www.xujiuming.com/tags/java/"/>
    
      <category term="stream计算" scheme="http://www.xujiuming.com/tags/stream%E8%AE%A1%E7%AE%97/"/>
    
  </entry>
  
  <entry>
    <title>log4j2通过socket发送日志到elk平台</title>
    <link href="http://www.xujiuming.com/ming/b83d1b10.html"/>
    <id>http://www.xujiuming.com/ming/b83d1b10.html</id>
    <published>2018-06-25T06:09:00.000Z</published>
    <updated>2018-06-25T06:45:48.740Z</updated>
    
    <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>尝试过很多 spring cloud中日志的方案 好多还是需要 集群的支持<br>但是现在公司还没有那么吊的基础设施 那么 这个时候 就需要 项目能够自己直接通过tcp或者udp直接投递日志到elk或者生成日志文件去采集了<br>但是 项目是使用docker 去部署在swarm或者k8s中 这个时候 生成日志文件 相对来说有点扯淡<br>但是公司的swarm集群又没有办法采集到标准输出和错误输出 那么就需要项目自己去投递日志到elk或者队列中让elk去接受了<br>由于时间较为紧急 直接采用log4j2的socketAppender 来投递日志 使用自定义jsonLayout去格式化 并且适配logstash</p><h4 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h4><h5 id="编写jsonLayout"><a href="#编写jsonLayout" class="headerlink" title="编写jsonLayout"></a>编写jsonLayout</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br></pre></td><td class="code"><pre><span class="line">package com.ming.log;</span><br><span class="line"></span><br><span class="line">import com.fasterxml.jackson.core.JsonProcessingException;</span><br><span class="line">import com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line">import org.apache.commons.lang3.time.DateFormatUtils;</span><br><span class="line">import org.apache.logging.log4j.core.Layout;</span><br><span class="line">import org.apache.logging.log4j.core.LogEvent;</span><br><span class="line">import org.apache.logging.log4j.core.config.Configuration;</span><br><span class="line">import org.apache.logging.log4j.core.config.Node;</span><br><span class="line">import org.apache.logging.log4j.core.config.plugins.*;</span><br><span class="line">import org.apache.logging.log4j.core.layout.AbstractStringLayout;</span><br><span class="line">import org.apache.logging.log4j.core.layout.PatternLayout;</span><br><span class="line">import org.apache.logging.log4j.core.layout.PatternSelector;</span><br><span class="line">import org.apache.logging.log4j.core.pattern.RegexReplacement;</span><br><span class="line"></span><br><span class="line">import java.io.File;</span><br><span class="line">import java.nio.charset.Charset;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * boss json格式日志</span><br><span class="line"> * &lt;p&gt;</span><br><span class="line"> * 配合elk的配置 使用</span><br><span class="line"> * 原作者文章地址: https://blog.csdn.net/lnkToKing/article/details/79563460</span><br><span class="line"> *</span><br><span class="line"> * @author ming</span><br><span class="line"> * @date 2018-06-22 10:59:56</span><br><span class="line"> */</span><br><span class="line">@Plugin(name = &quot;MingJsonPatternLayout&quot;, category = Node.CATEGORY, elementType = Layout.ELEMENT_TYPE, printObject = true)</span><br><span class="line">public class MingJsonPatternLayout extends AbstractStringLayout &#123;</span><br><span class="line">    /**</span><br><span class="line">     * 项目路径</span><br><span class="line">     */</span><br><span class="line">    private static String PROJECT_PATH;</span><br><span class="line"></span><br><span class="line">    private PatternLayout patternLayout;</span><br><span class="line"></span><br><span class="line">    private String projectName;</span><br><span class="line">    private String logType;</span><br><span class="line"></span><br><span class="line">    static &#123;</span><br><span class="line">        PROJECT_PATH = new File(&quot;&quot;).getAbsolutePath();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private BossJsonPatternLayout(Configuration config, RegexReplacement replace, String eventPattern,</span><br><span class="line">                                  PatternSelector patternSelector, Charset charset, boolean alwaysWriteExceptions,</span><br><span class="line">                                  boolean noConsoleNoAnsi, String headerPattern, String footerPattern, String projectName, String logType) &#123;</span><br><span class="line">        super(config, charset,</span><br><span class="line">                PatternLayout.createSerializer(config, replace, headerPattern, null, patternSelector, alwaysWriteExceptions,</span><br><span class="line">                        noConsoleNoAnsi),</span><br><span class="line">                PatternLayout.createSerializer(config, replace, footerPattern, null, patternSelector, alwaysWriteExceptions,</span><br><span class="line">                        noConsoleNoAnsi));</span><br><span class="line"></span><br><span class="line">        this.projectName = projectName;</span><br><span class="line">        this.logType = logType;</span><br><span class="line">        this.patternLayout = PatternLayout.newBuilder()</span><br><span class="line">                .withPattern(eventPattern)</span><br><span class="line">                .withPatternSelector(patternSelector)</span><br><span class="line">                .withConfiguration(config)</span><br><span class="line">                .withRegexReplacement(replace)</span><br><span class="line">                .withCharset(charset)</span><br><span class="line">                .withAlwaysWriteExceptions(alwaysWriteExceptions)</span><br><span class="line">                .withNoConsoleNoAnsi(noConsoleNoAnsi)</span><br><span class="line">                .withHeader(headerPattern)</span><br><span class="line">                .withFooter(footerPattern)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String toSerializable(LogEvent event) &#123;</span><br><span class="line">        //在这里处理日志内容</span><br><span class="line">        String message = patternLayout.toSerializable(event);</span><br><span class="line">        String jsonStr = new JsonLoggerInfo(projectName, message, event.getLevel().name(), logType, event.getTimeMillis()).toString();</span><br><span class="line">        return jsonStr + &quot;\n&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @PluginFactory</span><br><span class="line">    public static BossJsonPatternLayout createLayout(</span><br><span class="line">            @PluginAttribute(value = &quot;pattern&quot;, defaultString = PatternLayout.DEFAULT_CONVERSION_PATTERN) final String pattern,</span><br><span class="line">            @PluginElement(&quot;PatternSelector&quot;) final PatternSelector patternSelector,</span><br><span class="line">            @PluginConfiguration final Configuration config,</span><br><span class="line">            @PluginElement(&quot;Replace&quot;) final RegexReplacement replace,</span><br><span class="line">            // LOG4J2-783 use platform default by default, so do not specify defaultString for charset</span><br><span class="line">            @PluginAttribute(value = &quot;charset&quot;) final Charset charset,</span><br><span class="line">            @PluginAttribute(value = &quot;alwaysWriteExceptions&quot;, defaultBoolean = true) final boolean alwaysWriteExceptions,</span><br><span class="line">            @PluginAttribute(value = &quot;noConsoleNoAnsi&quot;, defaultBoolean = false) final boolean noConsoleNoAnsi,</span><br><span class="line">            @PluginAttribute(&quot;header&quot;) final String headerPattern,</span><br><span class="line">            @PluginAttribute(&quot;footer&quot;) final String footerPattern,</span><br><span class="line">            @PluginAttribute(&quot;projectName&quot;) final String projectName,</span><br><span class="line">            @PluginAttribute(&quot;logType&quot;) final String logType) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        return new BossJsonPatternLayout(config, replace, pattern, patternSelector, charset,</span><br><span class="line">                alwaysWriteExceptions, noConsoleNoAnsi, headerPattern, footerPattern, projectName, logType);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 输出的日志内容</span><br><span class="line">     */</span><br><span class="line">    public static class JsonLoggerInfo &#123;</span><br><span class="line">        /**</span><br><span class="line">         * 项目名</span><br><span class="line">         */</span><br><span class="line">        private String projectName;</span><br><span class="line">        /**</span><br><span class="line">         * 项目目录路径</span><br><span class="line">         */</span><br><span class="line">        private String projectPath;</span><br><span class="line">        /**</span><br><span class="line">         * 日志信息</span><br><span class="line">         */</span><br><span class="line">        private String message;</span><br><span class="line">        /**</span><br><span class="line">         * 日志级别</span><br><span class="line">         */</span><br><span class="line">        private String level;</span><br><span class="line">        /**</span><br><span class="line">         * 日志分类</span><br><span class="line">         */</span><br><span class="line">        private String logType;</span><br><span class="line">        /**</span><br><span class="line">         * 日志时间</span><br><span class="line">         */</span><br><span class="line">        private String time;</span><br><span class="line"></span><br><span class="line">        public JsonLoggerInfo(String projectName, String message, String level, String logType, long timeMillis) &#123;</span><br><span class="line">            this.projectName = projectName;</span><br><span class="line">            this.projectPath = PROJECT_PATH;</span><br><span class="line">            this.message = message;</span><br><span class="line">            this.level = level;</span><br><span class="line">            this.logType = logType;</span><br><span class="line">            this.time = DateFormatUtils.format(timeMillis, &quot;yyyy-MM-dd HH:mm:ss.SSS&quot;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public String getProjectName() &#123;</span><br><span class="line">            return projectName;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public String getProjectPath() &#123;</span><br><span class="line">            return projectPath;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public String getMessage() &#123;</span><br><span class="line">            return message;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public String getLevel() &#123;</span><br><span class="line">            return level;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public String getLogType() &#123;</span><br><span class="line">            return logType;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public String getTime() &#123;</span><br><span class="line">            return time;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        @Override</span><br><span class="line">        public String toString() &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                return new ObjectMapper().writeValueAsString(this);</span><br><span class="line">            &#125; catch (JsonProcessingException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="配置log4j2-xml"><a href="#配置log4j2-xml" class="headerlink" title="配置log4j2.xml"></a>配置log4j2.xml</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!-- monitorInterval=&quot;60&quot;表示每60秒配置文件会动态加载一次。在程序运行过程中，如果修改配置文件，程序会随之改变。 --&gt;</span><br><span class="line">&lt;configuration status=&quot;warn&quot; monitorInterval=&quot;1&quot;&gt;</span><br><span class="line">    &lt;!-- 定义通用的属性 --&gt;</span><br><span class="line">    &lt;Properties&gt;</span><br><span class="line">        &lt;Property name=&quot;PROJECT_NAME&quot;&gt;ming&lt;/Property&gt;</span><br><span class="line">        &lt;Property name=&quot;ELK_LOG_PATTERN&quot;&gt;%d&#123;yyyy-MM-dd HH:mm:ss&#125; %-5p  thread[%thread] %l  %msg %n&lt;/Property&gt;</span><br><span class="line">    &lt;/Properties&gt;</span><br><span class="line"></span><br><span class="line">    &lt;appenders&gt;</span><br><span class="line">        &lt;!--测试环境 elk的logstash 入口--&gt;</span><br><span class="line">        &lt;Socket name=&quot;logstash&quot; host=&quot;&lt;logstash-ip&gt;&quot; port=&quot;&lt;logstash-port&gt;&quot; protocol=&quot;TCP&quot;&gt;</span><br><span class="line">            &lt;MingJsonPatternLayout pattern=&quot;$&#123;ELK_LOG_PATTERN&#125;&quot; projectName=&quot;$&#123;PROJECT_NAME&#125;&quot; logType=&quot;ming&quot; /&gt;</span><br><span class="line">        &lt;/Socket&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/appenders&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;Loggers&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- 配置项目的 日志等级输出 --&gt;</span><br><span class="line">        &lt;root level=&quot;DEBUG&quot;&gt;</span><br><span class="line">            &lt;!-- 通过tcp 传输到logstash--&gt;</span><br><span class="line">            &lt;appender-ref ref=&quot;logstash&quot;/&gt;</span><br><span class="line">        &lt;/root&gt;</span><br><span class="line">    &lt;/Loggers&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure><p>替换xml中 <logstash-ip> <logstash-port>为自己的 logstash ip和port</logstash-port></logstash-ip></p><h5 id="配置-logstash"><a href="#配置-logstash" class="headerlink" title="配置 logstash"></a>配置 logstash</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">input &#123;</span><br><span class="line">    #开启远程输入日志服务</span><br><span class="line">    tcp &#123;</span><br><span class="line">        port =&gt; &quot;&lt;logstash-port&gt;&quot;</span><br><span class="line">        mode =&gt; &quot;server&quot;</span><br><span class="line">        type =&gt; &quot;log4j2&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">filter &#123;</span><br><span class="line">    #将日志转成json对象</span><br><span class="line">    json &#123;</span><br><span class="line">        source =&gt; &quot;message&quot;</span><br><span class="line">    &#125;</span><br><span class="line">    #将远程客户端的日志时间设置为插入时间，不设置默认为当前系统时间，可能会存在时间误差</span><br><span class="line">    date &#123;</span><br><span class="line">        match =&gt; [&quot;time&quot;, &quot;yyyy-MM-dd HH:mm:ss.SSS&quot;]</span><br><span class="line">        remove_field =&gt; [&quot;time&quot;]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">output &#123;</span><br><span class="line">    elasticsearch &#123;</span><br><span class="line">        hosts =&gt; [&quot;&lt;es-ip&gt;:&lt;es-port&gt;&quot;]</span><br><span class="line">        index  =&gt; &quot;application-%&#123;+YYYY.MM.dd&#125;&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>替换上面配置中的<logstash-port>(和log4j2中port保持一致)、<es-ip>、<es-port>(默认为9200)<br>修改后重启logstash 启动配置 即可</es-port></es-ip></logstash-port></p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>其实最终是期望 项目直接输出标准输出和错误输出 由swarm或者k8s直接统一采集 标准输出和错误输出 这样 又避免了生成实际文件 有简化了项目的配置<br>这个直接使用socketAppender投递日志存在缺陷 一是socket比较简略 如果追求高性能需要自己重写 socketAppender 二个 需要logstash的解析和log4j2中的Layout进行匹配<br>否则 输出的日志 一坨翔</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h4&gt;&lt;p&gt;尝试过很多 spring cloud中日志的方案 好多还是需要 集群的支持&lt;br&gt;但是现在公司还没有那么吊的基础设施 那么 这个时候 就需要
      
    
    </summary>
    
      <category term="实战" scheme="http://www.xujiuming.com/categories/%E5%AE%9E%E6%88%98/"/>
    
    
      <category term="-log4j2 -socket -elk" scheme="http://www.xujiuming.com/tags/log4j2-socket-elk/"/>
    
  </entry>
  
  <entry>
    <title>feign切换访问http接口的实现</title>
    <link href="http://www.xujiuming.com/ming/47a3a555.html"/>
    <id>http://www.xujiuming.com/ming/47a3a555.html</id>
    <published>2018-06-25T05:31:04.000Z</published>
    <updated>2018-06-25T06:45:48.748Z</updated>
    
    <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>由于feign底层默认使用 jdk的UrlConnection来发送http请求<br>没有连接池之类的 很麻烦 而且bug很多 性能也差</p><p>经过查看文档和网络上大佬们的博客 发现可以使用 常用的http工具包去替换 如apache的httpClient 、okHttp等<br>Spring Cloud从Brixtion.SR5版本开始支持这种切换feign底层访问http的实现</p><h4 id="apache-httpClient"><a href="#apache-httpClient" class="headerlink" title="apache httpClient"></a>apache httpClient</h4><p>使用apache 的http client 作为feign底层发起http请求的实现</p><h5 id="增加pom-中feign-httpClient依赖"><a href="#增加pom-中feign-httpClient依赖" class="headerlink" title="增加pom 中feign httpClient依赖"></a>增加pom 中feign httpClient依赖</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--使用 feign httpclient --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.netflix.feign&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;feign-httpclient&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;8.17.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h5 id="开启-feign的httpClient"><a href="#开启-feign的httpClient" class="headerlink" title="开启 feign的httpClient"></a>开启 feign的httpClient</h5><p>配置bootstrap.yaml<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># feign 设置</span><br><span class="line">feign:</span><br><span class="line">  httpclient:</span><br><span class="line">    enabled: true</span><br></pre></td></tr></table></figure><p></p><h4 id="okHttp"><a href="#okHttp" class="headerlink" title="okHttp"></a>okHttp</h4><p>使用okHttp来作为feign发起请求的实现 </p><h5 id="增加pom中-feign-okHttp的依赖"><a href="#增加pom中-feign-okHttp的依赖" class="headerlink" title="增加pom中 feign okHttp的依赖"></a>增加pom中 feign okHttp的依赖</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;io.github.openfeign&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;feign-okhttp&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;9.7.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h5 id="开启feign的okHttp"><a href="#开启feign的okHttp" class="headerlink" title="开启feign的okHttp"></a>开启feign的okHttp</h5><p>配置bootstrap.yaml<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># feign 设置</span><br><span class="line">feign:</span><br><span class="line">  okhttp:</span><br><span class="line">    enabled: true</span><br></pre></td></tr></table></figure><p></p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>feign 坑还是很多的  这个使用默认的jdk的urlConnection 实现 会出现一些不好理解的异常  而且性能很低<br>切换成httpClient 或者okHttp 可以使用一些优化来增加性能 如连接池之类的<br>至于选择httpClient还是okHttp 看情况吧  没有测试过<br>spring io platform 里面都有 依赖的版本  看项目原本是啥 就用啥</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h4&gt;&lt;p&gt;由于feign底层默认使用 jdk的UrlConnection来发送http请求&lt;br&gt;没有连接池之类的 很麻烦 而且bug很多 性能也差&lt;
      
    
    </summary>
    
      <category term="实战" scheme="http://www.xujiuming.com/categories/%E5%AE%9E%E6%88%98/"/>
    
    
      <category term="-spring cloud - feign - http" scheme="http://www.xujiuming.com/tags/spring-cloud-feign-http/"/>
    
  </entry>
  
  <entry>
    <title>工作linux系统初始化</title>
    <link href="http://www.xujiuming.com/ming/fbab8e0.html"/>
    <id>http://www.xujiuming.com/ming/fbab8e0.html</id>
    <published>2018-06-01T09:09:26.000Z</published>
    <updated>2018-06-25T07:34:12.197Z</updated>
    
    <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>由于强迫症 在工作和学习的时候 必须要用linux 但是linux桌面真的令人为难<br>用了n多版本的linux 什么arch、manjaro、centos系列的、debian系列的等等<br>最后还是觉得ubuntu用来做工作的系统最简单合适 而且少折腾</p><h4 id="初始化常用软件及工具"><a href="#初始化常用软件及工具" class="headerlink" title="初始化常用软件及工具"></a>初始化常用软件及工具</h4><h5 id="初始化额外的工具"><a href="#初始化额外的工具" class="headerlink" title="初始化额外的工具"></a>初始化额外的工具</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#安装tmux</span><br><span class="line">sudo apt install tmux</span><br><span class="line">#安装 net tools </span><br><span class="line">sudo apt install net-tools </span><br><span class="line">#安装 traceroute</span><br><span class="line">sudo apt install traceroute </span><br><span class="line">#安装vim</span><br><span class="line">sudo apt install vim </span><br><span class="line">#安装google 浏览器</span><br><span class="line">sudo apt install chromium-browser</span><br></pre></td></tr></table></figure><h5 id="笔记所需的资源"><a href="#笔记所需的资源" class="headerlink" title="笔记所需的资源"></a>笔记所需的资源</h5><p><a href="https://www.xujiuming.com/ming-asset/work-linux-tar.tar.gz">笔记所需资源tar包</a></p><h5 id="网易云音乐"><a href="#网易云音乐" class="headerlink" title="网易云音乐"></a>网易云音乐</h5><p>写代码  不听点音乐 哪里来的干劲<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#snap 安装网易云音乐</span><br><span class="line">sudo snap install netease-music --devmode --beta</span><br></pre></td></tr></table></figure><p></p><h5 id="初始化shadowsocks"><a href="#初始化shadowsocks" class="headerlink" title="初始化shadowsocks"></a>初始化shadowsocks</h5><p>科学上网必备软件  不解释<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">#安装pip</span><br><span class="line">sudo apt install python3-pip</span><br><span class="line">#安装sslocal</span><br><span class="line">sudo pip3 install shadowsocks</span><br><span class="line">#ss 配置</span><br><span class="line">echo &apos;&#123;</span><br><span class="line">    &quot;server&quot;:&quot;地址&quot;,</span><br><span class="line">    &quot;server_port&quot;:端口,</span><br><span class="line">    &quot;local_address&quot;:&quot;127.0.0.1&quot;,</span><br><span class="line">    &quot;local_port&quot;:1080,</span><br><span class="line">    &quot;password&quot;:&quot;密码&quot;,</span><br><span class="line">    &quot;timeout&quot;:3000,</span><br><span class="line">    &quot;method&quot;:&quot;aes-256-cfb&quot;</span><br><span class="line">&#125;&apos; &gt; ss.json</span><br></pre></td></tr></table></figure><p></p><h5 id="初始化docker"><a href="#初始化docker" class="headerlink" title="初始化docker"></a>初始化docker</h5><p>docker 安装一些 数据库啊之类的软件 还是很方便的  而且docker技术 现在应该是每个工程师必备的技能了 不会简直说不过去<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#安装docker</span><br><span class="line">sudo apt install docker docker.io</span><br><span class="line">#初始化docker 加速配置</span><br><span class="line">sudo mkdir -p /etc/docker</span><br><span class="line">sudo tee /etc/docker/daemon.json &lt;&lt;-&apos;EOF&apos;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [&quot;https://o4omo0yw.mirror.aliyuncs.com&quot;]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure><p></p><h5 id="初始化java相关环境"><a href="#初始化java相关环境" class="headerlink" title="初始化java相关环境"></a>初始化java相关环境</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#安装sdk man  安装 jvm相关工具 </span><br><span class="line">curl -s &quot;https://get.sdkman.io&quot; | bash</span><br><span class="line">source &quot;$HOME/.sdkman/bin/sdkman-init.sh&quot;</span><br><span class="line">sdk version</span><br><span class="line">sdk install java</span><br><span class="line">sdk install maven </span><br><span class="line">sdk install groovy </span><br><span class="line">sdk install gradle</span><br></pre></td></tr></table></figure><h5 id="初始化wps"><a href="#初始化wps" class="headerlink" title="初始化wps"></a>初始化wps</h5><p>ubuntu 的liboffice 其实用起来还行就是有点丑  但是有更加好的选择 wps  良心软件 对linux支持很不错<br>就是安装过程略麻烦  后面有时间 可以考虑打包成snap的格式使用</p><h6 id="下载wps官方deb包"><a href="#下载wps官方deb包" class="headerlink" title="下载wps官方deb包"></a>下载wps官方deb包</h6><p>资源tar包中包含</p><p>WPS官方网站 ：<a href="http://linux.wps.cn/" target="_blank" rel="noopener">http://linux.wps.cn/</a> （区分64位、32位）   </p><h6 id="安装-libpng12依赖"><a href="#安装-libpng12依赖" class="headerlink" title="安装 libpng12依赖"></a>安装 libpng12依赖</h6><p>这个依赖是libpng-12.0。不过这个在默认的apt 仓库里没有。所以需要手动下载一下。   </p><p>资源tar包中包含 </p><p>或者取官方下载 地址：<a href="https://packages.debian.org/zh-cn/wheezy/amd64/libpng12-0/download" target="_blank" rel="noopener">https://packages.debian.org/zh-cn/wheezy/amd64/libpng12-0/download</a><br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo dpkg -i libpng12-0_1.2.49-1+deb7u2_amd64.deb</span><br></pre></td></tr></table></figure><p></p><h6 id="安装wps"><a href="#安装wps" class="headerlink" title="安装wps"></a>安装wps</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo dpkg -i &lt;wps&gt;.deb</span><br></pre></td></tr></table></figure><h6 id="安装wps-需要的字体"><a href="#安装wps-需要的字体" class="headerlink" title="安装wps 需要的字体"></a>安装wps 需要的字体</h6><p>资源tar包中包含  </p><p>下载该字体，解压后将整个wps_symbol_fonts目录拷贝到 /usr/share/fonts/ 目录下<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#1.权限设置,执行命令如下 </span><br><span class="line">sudo cd /usr/share/fonts/ </span><br><span class="line">sudo chmod 755 wps_symbol_fonts </span><br><span class="line">sudo cd /usr/share/fonts/wps_symbol_fonts </span><br><span class="line">sudo chmod 644 * </span><br><span class="line">#2.生成缓存配置信息 </span><br><span class="line">sudo cd /usr/share/fonts/wps_symbol_fonts </span><br><span class="line">sudo mkfontdir </span><br><span class="line">sudo mkfontscale </span><br><span class="line">sudo fc-cache</span><br></pre></td></tr></table></figure><p></p><h5 id="输入法初始化"><a href="#输入法初始化" class="headerlink" title="输入法初始化"></a>输入法初始化</h5><p>这里使用sogou的deb包来安装 当然也可以根据arch的wiki上 安装sunpinyin或者googlepinyin之类的   </p><h6 id="安装fcitx输入法框架"><a href="#安装fcitx输入法框架" class="headerlink" title="安装fcitx输入法框架"></a>安装fcitx输入法框架</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#安装fcitx 组件 如果不行那么在商店中把所有呆fcitx的软件安装</span><br><span class="line">sudo apt install fcitx fcitx-configtool </span><br><span class="line">#设置 fcitx相关配置</span><br><span class="line">echo &apos;</span><br><span class="line">#fcitx</span><br><span class="line">export GTK_IM_MODULE=fcitx </span><br><span class="line">export QT_IM_MODULE=fcitx </span><br><span class="line">export XMODIFIERS=&quot;@im=fcitx&quot;</span><br><span class="line">&apos; &gt;&gt; ~/.xprofile</span><br></pre></td></tr></table></figure><h6 id="安装sogou输入法"><a href="#安装sogou输入法" class="headerlink" title="安装sogou输入法"></a>安装sogou输入法</h6><p>资源tar包中包含</p><p>搜狗官方地址: <a href="https://pinyin.sogou.com/linux/?r=pinyin" target="_blank" rel="noopener">https://pinyin.sogou.com/linux/?r=pinyin</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo dpkg -i sogoupinyin_2.2.0.0108_amd64.deb</span><br></pre></td></tr></table></figure><h5 id="初始化-oss-browser"><a href="#初始化-oss-browser" class="headerlink" title="初始化 oss-browser"></a>初始化 oss-browser</h5><p>下载oss-browser压缩包</p><p>资源tar包中包含</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 安装 依赖 </span><br><span class="line">sudo apt install libgconf2-4</span><br></pre></td></tr></table></figure><h5 id="初始化oss-ftp"><a href="#初始化oss-ftp" class="headerlink" title="初始化oss-ftp"></a>初始化oss-ftp</h5><p>下载oss-ftp压缩包</p><p>资源tar包中包含</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#安装gtk 依赖</span><br><span class="line">sudo  apt install -y python-gtk2</span><br></pre></td></tr></table></figure><h5 id="无法使用脚本初始化的软件"><a href="#无法使用脚本初始化的软件" class="headerlink" title="无法使用脚本初始化的软件"></a>无法使用脚本初始化的软件</h5><h6 id="开发工具"><a href="#开发工具" class="headerlink" title="开发工具"></a>开发工具</h6><p>使用idea系列的全家桶<br>安装 toolbox来管理idea系列的全家桶</p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>由于我是java开发 我的工作系统肯定最主要就是java以及相关的如maven、gradle、groovy、springbootcli之类的<br>其实把如果真的想折腾linux 建议还是arch  毕竟瞎折腾<br>但是工作还是稳一点 毕竟ubuntu做了这么多年的桌面linux</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h4&gt;&lt;p&gt;由于强迫症 在工作和学习的时候 必须要用linux 但是linux桌面真的令人为难&lt;br&gt;用了n多版本的linux 什么arch、manja
      
    
    </summary>
    
      <category term="实战" scheme="http://www.xujiuming.com/categories/%E5%AE%9E%E6%88%98/"/>
    
    
      <category term="-linux" scheme="http://www.xujiuming.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>springboot-mvc的messageConverter处理</title>
    <link href="http://www.xujiuming.com/ming/3174607.html"/>
    <id>http://www.xujiuming.com/ming/3174607.html</id>
    <published>2018-05-22T09:30:48.000Z</published>
    <updated>2018-06-25T03:49:16.163Z</updated>
    
    <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>最近项目中通过feign调用内部服务和其他系统服务猛然增多<br>在messageConverter这一环节出现n多问题<br>什么xml解析gg<br>什么json 时间格式解析gg<br>什么乱七八糟的骚格式的数据解析gg<br>导致最近一直在作在messageConverter这一块的处理<br>但是feign 的在messageConverter 有一部分是从spring mvc 的在messageConverter列表中获取的<br>所以说总的来说 是要处理spring mvc中在messageConverter的维护</p><h4 id="spring-boot消息转换器配置"><a href="#spring-boot消息转换器配置" class="headerlink" title="spring boot消息转换器配置"></a>spring boot消息转换器配置</h4><p>spring boot 的mvc配置 优先使用 继承WebMvcConfigurerAdapter 方式<br>这样既可以拥有 大量的默认配置 也可以在一定程度上自定义配置</p><h5 id="重写configureMessageConverters"><a href="#重写configureMessageConverters" class="headerlink" title="重写configureMessageConverters"></a>重写configureMessageConverters</h5><ul><li>无法保证顺序 也不能清理其他的消息转换器<br>重写这个方法 可以添加自己编写的 messageConverter 到 默认的messageConverter列表中<br>messageConverter如何编写 直接参考 AbstractHttpMessageConverter的下层实现即可<br>这里使用MappingJackson2HttpMessageConverter作为演示<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">import com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line">import com.ming.core.utils.SpringBeanManagerUtils;</span><br><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line">import org.springframework.http.converter.HttpMessageConverter;</span><br><span class="line">import org.springframework.http.converter.json.Jackson2ObjectMapperBuilder;</span><br><span class="line">import org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;</span><br><span class="line">import org.springframework.web.servlet.config.annotation.InterceptorRegistry;</span><br><span class="line">import org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry;</span><br><span class="line">import org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter;</span><br><span class="line"></span><br><span class="line">import java.text.DateFormat;</span><br><span class="line">import java.text.SimpleDateFormat;</span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 拦截器配置</span><br><span class="line"> *</span><br><span class="line"> * @author ming</span><br><span class="line"> * @date 2017-08-28 11点</span><br><span class="line"> */</span><br><span class="line">@Configuration</span><br><span class="line">public class WebMvcConfig extends WebMvcConfigurerAdapter &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void configureMessageConverters(List&lt;HttpMessageConverter&lt;?&gt;&gt; converters) &#123;</span><br><span class="line">        ObjectMapper mapper = SpringBeanManagerUtils.getBeanByType(Jackson2ObjectMapperBuilder.class).build();</span><br><span class="line">        // ObjectMapper为了保障线程安全性，里面的配置类都是一个不可变的对象</span><br><span class="line">        // 所以这里的setDateFormat的内部原理其实是创建了一个新的配置类</span><br><span class="line">        DateFormat dateFormat = mapper.getDateFormat();</span><br><span class="line">        mapper.setDateFormat(new SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;));</span><br><span class="line">        MappingJackson2HttpMessageConverter mappingJsonHttpMessageConverter = new MappingJackson2HttpMessageConverter(</span><br><span class="line">                mapper);</span><br><span class="line">        converters.add(mappingJsonHttpMessageConverter);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h5 id="重写extendMessageConverters"><a href="#重写extendMessageConverters" class="headerlink" title="重写extendMessageConverters"></a>重写extendMessageConverters</h5><ul><li>可以操控完整的 messageConverter列表 增加、删除等等<br>重写这个方法 方便控制到整个messageConverter 列表的顺序内容<br>这里示例删除所有的 messageConverter列表<br>增加一个简单的简单的FastJsonHttpMessageConverter作为mvc中 唯一一个转换器<br>保证messageConverter顺序 调整list的先后顺序 即可<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">import com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter;</span><br><span class="line">import com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line">import com.ming.core.utils.SpringBeanManagerUtils;</span><br><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line">import org.springframework.http.converter.HttpMessageConverter;</span><br><span class="line">import org.springframework.http.converter.json.Jackson2ObjectMapperBuilder;</span><br><span class="line">import org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;</span><br><span class="line">import org.springframework.web.servlet.config.annotation.InterceptorRegistry;</span><br><span class="line">import org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry;</span><br><span class="line">import org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter;</span><br><span class="line"></span><br><span class="line">import java.text.DateFormat;</span><br><span class="line">import java.text.SimpleDateFormat;</span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 拦截器配置</span><br><span class="line"> *</span><br><span class="line"> * @author ming</span><br><span class="line"> * @date 2017-08-28 11点</span><br><span class="line"> */</span><br><span class="line">@Configuration</span><br><span class="line">public class WebMvcConfig extends WebMvcConfigurerAdapter &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void extendMessageConverters(List&lt;HttpMessageConverter&lt;?&gt;&gt; converters) &#123;</span><br><span class="line">        FastJsonHttpMessageConverter fastJsonHttpMessageConverter = new FastJsonHttpMessageConverter();</span><br><span class="line">        converters.add(fastJsonHttpMessageConverter);        </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="messageConverter-详细规则"><a href="#messageConverter-详细规则" class="headerlink" title="messageConverter 详细规则"></a>messageConverter 详细规则</h4><p>spring boot 中 所有的消息转换器 需要继承 AbstractHttpMessageConverter<t>抽象类<br>根据其中的方法进行修改 达到转换效果 </t></p><ul><li>canRead()<br>判断转换器能不能将请求内容转换成java对象</li><li>canWrite()<br>判断转换器能不能将java对象转换成返回内容</li><li>read()<br>读取请求内容转换成java对象</li><li>write()<br>将返回的java对象写入到返回内容</li><li>getSupportedMediaTypes()<br>获取这个转换器支持的MediaType类型</li></ul><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>控制spring mvc 对于http请求的内容和响应的内容的转换 直接通过重写 messageConverter即可<br>如果只是为了增加特殊情况的处理可以直接重写configureMessageConverters在原有的messageConverter 列表中添加一个接口<br>如果需要完整控制 messageConverter的数量和顺序 那么需要重写extendMessageConverters 来达到控制messageConverter的数量和顺序  </p><p>feign会从spring mvc的messageConverter的列表中获取对应的messageConverter列表<br>那么这样来说 其实可以通过严格控制spring mvc的messageConverter列表来达到控制feign的messageConverter列表  </p><h6 id="MediaType解释"><a href="#MediaType解释" class="headerlink" title="MediaType解释"></a>MediaType解释</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">spring 中对于http contentType的一些枚举类型 类的全限定名org.springframework.http.MediaType</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h4&gt;&lt;p&gt;最近项目中通过feign调用内部服务和其他系统服务猛然增多&lt;br&gt;在messageConverter这一环节出现n多问题&lt;br&gt;什么xml解
      
    
    </summary>
    
      <category term="实战" scheme="http://www.xujiuming.com/categories/%E5%AE%9E%E6%88%98/"/>
    
    
      <category term="spring boot" scheme="http://www.xujiuming.com/tags/spring-boot/"/>
    
      <category term="mvc" scheme="http://www.xujiuming.com/tags/mvc/"/>
    
      <category term="实战" scheme="http://www.xujiuming.com/tags/%E5%AE%9E%E6%88%98/"/>
    
      <category term="messageConverter" scheme="http://www.xujiuming.com/tags/messageConverter/"/>
    
  </entry>
  
  <entry>
    <title>netty-传输手段笔记</title>
    <link href="http://www.xujiuming.com/ming/597b09c9.html"/>
    <id>http://www.xujiuming.com/ming/597b09c9.html</id>
    <published>2018-05-22T08:38:36.000Z</published>
    <updated>2018-06-25T03:49:16.163Z</updated>
    
    <content type="html"><![CDATA[<p>###传输案例</p><h4 id="java-oio"><a href="#java-oio" class="headerlink" title="java oio"></a>java oio</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">package com.ming;</span><br><span class="line"></span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.io.OutputStream;</span><br><span class="line">import java.net.ServerSocket;</span><br><span class="line">import java.net.Socket;</span><br><span class="line">import java.nio.charset.Charset;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 基于java 阻塞io的 服务端案例</span><br><span class="line"> *</span><br><span class="line"> * @author ming</span><br><span class="line"> * @date 2018-04-11 14:53</span><br><span class="line"> */</span><br><span class="line">public class JavaOio &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws IOException &#123;</span><br><span class="line">        new JavaOio().Start(20000);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 启动java oio 方法</span><br><span class="line">     *</span><br><span class="line">     * @param port</span><br><span class="line">     * @author ming</span><br><span class="line">     * @date 2018-04-11 14:57</span><br><span class="line">     */</span><br><span class="line">    public void Start(int port) throws IOException &#123;</span><br><span class="line">        final ServerSocket socket = new ServerSocket(port);</span><br><span class="line">        for (; ; ) &#123;</span><br><span class="line">            //接受链接</span><br><span class="line">            final Socket clientSocket = socket.accept();</span><br><span class="line">            System.out.println(&quot;accept client::&quot; + clientSocket);</span><br><span class="line">            //建立新线程执行 客户端的请求</span><br><span class="line">            new Thread(() -&gt; &#123;</span><br><span class="line">                OutputStream outputStream = null;</span><br><span class="line">                try &#123;</span><br><span class="line">                    //获取输出流</span><br><span class="line">                    outputStream = clientSocket.getOutputStream();</span><br><span class="line">                    //输出数据</span><br><span class="line">                    outputStream.write(&quot;hi ming &quot;.getBytes(Charset.forName(&quot;UTF-8&quot;)));</span><br><span class="line">                    //刷新数据</span><br><span class="line">                    outputStream.flush();</span><br><span class="line">                    clientSocket.close();</span><br><span class="line">                &#125; catch (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125; finally &#123;</span><br><span class="line">                    try &#123;</span><br><span class="line">                        outputStream.close();</span><br><span class="line">                    &#125; catch (IOException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="java-nio"><a href="#java-nio" class="headerlink" title="java nio"></a>java nio</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line">package com.ming;</span><br><span class="line"></span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.net.InetSocketAddress;</span><br><span class="line">import java.net.ServerSocket;</span><br><span class="line">import java.nio.ByteBuffer;</span><br><span class="line">import java.nio.channels.SelectionKey;</span><br><span class="line">import java.nio.channels.Selector;</span><br><span class="line">import java.nio.channels.ServerSocketChannel;</span><br><span class="line">import java.nio.channels.SocketChannel;</span><br><span class="line">import java.util.Set;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * java 实现nio 模式的服务端</span><br><span class="line"> *</span><br><span class="line"> * @author ming</span><br><span class="line"> * @date 2018-04-11 15:08</span><br><span class="line"> */</span><br><span class="line">public class JavaNio &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws IOException &#123;</span><br><span class="line">        new JavaNio().Start(20000);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 启动java nio 服务端</span><br><span class="line">     *</span><br><span class="line">     * @param port</span><br><span class="line">     * @author ming</span><br><span class="line">     * @date 2018-04-11 15:09</span><br><span class="line">     */</span><br><span class="line">    public void Start(int port) throws IOException &#123;</span><br><span class="line">        //打开 server socket channel</span><br><span class="line">        ServerSocketChannel serverSocketChannel = ServerSocketChannel.open();</span><br><span class="line">        //设置 为非阻塞队列</span><br><span class="line">        serverSocketChannel.configureBlocking(false);</span><br><span class="line">        //通过socket channel 获取socket</span><br><span class="line">        ServerSocket socket = serverSocketChannel.socket();</span><br><span class="line">        //获取socket 的地址</span><br><span class="line">        InetSocketAddress socketAddress = new InetSocketAddress(port);</span><br><span class="line">        //绑定 socket地址到socket</span><br><span class="line">        socket.bind(socketAddress);</span><br><span class="line">        //打开selector</span><br><span class="line">        Selector selector = Selector.open();</span><br><span class="line">        //将socket channel 注册到selector上</span><br><span class="line">        serverSocketChannel.register(selector, SelectionKey.OP_ACCEPT);</span><br><span class="line">        //返回客户端的消息</span><br><span class="line">        final ByteBuffer msg = ByteBuffer.wrap(&quot;hi ming &quot;.getBytes(&quot;UTF-8&quot;));</span><br><span class="line"></span><br><span class="line">        for (; ; ) &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                //阻塞等待需要处理的新事件</span><br><span class="line">                selector.select();</span><br><span class="line">            &#125; catch (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">            //获取所有连接事件的 select key</span><br><span class="line">            Set&lt;SelectionKey&gt; readyKeys = selector.selectedKeys();</span><br><span class="line">            readyKeys.forEach(key -&gt; &#123;</span><br><span class="line">                        try &#123;</span><br><span class="line">                            //检查时间 是否是一个新的 可以被接受的链接</span><br><span class="line">                            if (key.isAcceptable()) &#123;</span><br><span class="line">                                ServerSocketChannel server = (ServerSocketChannel) key.channel();</span><br><span class="line">                                SocketChannel client = server.accept();</span><br><span class="line">                                if (null == client) &#123;</span><br><span class="line">                                    return;</span><br><span class="line">                                &#125;</span><br><span class="line">                                client.configureBlocking(false);</span><br><span class="line">                                client.register(selector, SelectionKey.OP_WRITE | SelectionKey.OP_READ, msg.duplicate());</span><br><span class="line">                                System.out.println(&quot;accept from &quot; + client);</span><br><span class="line">                            &#125;</span><br><span class="line">                            //检查socket是否准备好写数据</span><br><span class="line">                            if (key.isWritable()) &#123;</span><br><span class="line">                                SocketChannel client = (SocketChannel) key.channel();</span><br><span class="line">                                ByteBuffer byteBuffer = (ByteBuffer) key.attachment();</span><br><span class="line">                                while (byteBuffer.hasRemaining()) &#123;</span><br><span class="line">                                    if (client.write(byteBuffer) == 0) &#123;</span><br><span class="line">                                        break;</span><br><span class="line">                                    &#125;</span><br><span class="line">                                &#125;</span><br><span class="line">                                client.close();</span><br><span class="line">                            &#125;</span><br><span class="line"></span><br><span class="line">                        &#125; catch (IOException e) &#123;</span><br><span class="line">                            key.cancel();</span><br><span class="line">                            try &#123;</span><br><span class="line">                                key.channel().close();</span><br><span class="line">                            &#125; catch (IOException e1) &#123;</span><br><span class="line">                                e1.printStackTrace();</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">            );</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="netty-oio"><a href="#netty-oio" class="headerlink" title="netty oio"></a>netty oio</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">package com.ming;</span><br><span class="line"></span><br><span class="line">import io.netty.bootstrap.ServerBootstrap;</span><br><span class="line">import io.netty.buffer.ByteBuf;</span><br><span class="line">import io.netty.buffer.Unpooled;</span><br><span class="line">import io.netty.channel.*;</span><br><span class="line">import io.netty.channel.oio.OioEventLoopGroup;</span><br><span class="line">import io.netty.channel.socket.SocketChannel;</span><br><span class="line">import io.netty.channel.socket.oio.OioServerSocketChannel;</span><br><span class="line">import io.netty.util.CharsetUtil;</span><br><span class="line"></span><br><span class="line">import java.net.InetSocketAddress;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * netty oio 实现</span><br><span class="line"> *</span><br><span class="line"> * @author ming</span><br><span class="line"> * @date 2018-04-16 15:56</span><br><span class="line"> */</span><br><span class="line">public class NettyOio &#123;</span><br><span class="line">    public static void main(String[] args) throws InterruptedException &#123;</span><br><span class="line">        new NettyOio().Start(20000);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * netty oio bootstrap</span><br><span class="line">     *</span><br><span class="line">     * @author ming</span><br><span class="line">     * @date 2018-04-16 15:56</span><br><span class="line">     */</span><br><span class="line">    public void Start(int port) throws InterruptedException &#123;</span><br><span class="line">        final ByteBuf byteBuf = Unpooled.unreleasableBuffer(Unpooled.copiedBuffer(&quot;hi ming &quot;, CharsetUtil.UTF_8));</span><br><span class="line">        // 使用 oio 事件循环处理</span><br><span class="line">        EventLoopGroup eventLoopGroup = new OioEventLoopGroup();</span><br><span class="line">        try &#123;</span><br><span class="line">            ServerBootstrap serverBootstrap = new ServerBootstrap();</span><br><span class="line">            serverBootstrap.group(eventLoopGroup)</span><br><span class="line">                    //使用oio 渠道</span><br><span class="line">                    .channel(OioServerSocketChannel.class)</span><br><span class="line">                    .localAddress(new InetSocketAddress(port))</span><br><span class="line">                    .childHandler(new ChannelInitializer&lt;SocketChannel&gt;() &#123;</span><br><span class="line">                        @Override</span><br><span class="line">                        protected void initChannel(SocketChannel ch) throws Exception &#123;</span><br><span class="line">                            ch.pipeline().addLast(new ChannelInboundHandlerAdapter() &#123;</span><br><span class="line">                                @Override</span><br><span class="line">                                public void channelActive(ChannelHandlerContext ctx) throws Exception &#123;</span><br><span class="line">                                    System.out.println(&quot;accept &quot; + ctx);</span><br><span class="line">                                    //输出一条信息 关闭 渠道</span><br><span class="line">                                    ctx.writeAndFlush(byteBuf.duplicate())</span><br><span class="line">                                            .addListener(ChannelFutureListener.CLOSE);</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">            //绑定服务器</span><br><span class="line">            ChannelFuture future = serverBootstrap.bind().sync();</span><br><span class="line">            future.channel().closeFuture().sync();</span><br><span class="line">        &#125; catch (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            eventLoopGroup.shutdownGracefully().sync();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="netty-nio"><a href="#netty-nio" class="headerlink" title="netty nio"></a>netty nio</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">package com.ming;</span><br><span class="line"></span><br><span class="line">import io.netty.bootstrap.ServerBootstrap;</span><br><span class="line">import io.netty.buffer.ByteBuf;</span><br><span class="line">import io.netty.buffer.Unpooled;</span><br><span class="line">import io.netty.channel.*;</span><br><span class="line">import io.netty.channel.nio.NioEventLoopGroup;</span><br><span class="line">import io.netty.channel.socket.SocketChannel;</span><br><span class="line">import io.netty.channel.socket.nio.NioServerSocketChannel;</span><br><span class="line">import io.netty.util.CharsetUtil;</span><br><span class="line"></span><br><span class="line">import java.net.InetSocketAddress;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * netty nio 实现</span><br><span class="line"> *</span><br><span class="line"> * @author ming</span><br><span class="line"> * @date 2018-04-16 16:11</span><br><span class="line"> */</span><br><span class="line">public class NettyNio &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws InterruptedException &#123;</span><br><span class="line">        new NettyNio().Start(20000);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 启动 netty nio server</span><br><span class="line">     *</span><br><span class="line">     * @author ming</span><br><span class="line">     * @date 2018-04-16 16:12</span><br><span class="line">     */</span><br><span class="line">    public void Start(int port) throws InterruptedException &#123;</span><br><span class="line">        final ByteBuf byteBuf = Unpooled.unreleasableBuffer(Unpooled.copiedBuffer(&quot;hi ming &quot;, CharsetUtil.UTF_8));</span><br><span class="line">        //使用 nio 事件循环处理器</span><br><span class="line">        EventLoopGroup eventLoopGroup = new NioEventLoopGroup();</span><br><span class="line">        try &#123;</span><br><span class="line">            ServerBootstrap serverBootstrap = new ServerBootstrap();</span><br><span class="line">            serverBootstrap.group(eventLoopGroup)</span><br><span class="line">                    //使用nio渠道</span><br><span class="line">                    .channel(NioServerSocketChannel.class)</span><br><span class="line">                    .localAddress(new InetSocketAddress(port))</span><br><span class="line">                    .childHandler(new ChannelInitializer&lt;SocketChannel&gt;() &#123;</span><br><span class="line">                        @Override</span><br><span class="line">                        protected void initChannel(SocketChannel ch) throws Exception &#123;</span><br><span class="line">                            ch.pipeline().addLast(new ChannelInboundHandlerAdapter() &#123;</span><br><span class="line">                                @Override</span><br><span class="line">                                public void channelActive(ChannelHandlerContext ctx) throws Exception &#123;</span><br><span class="line">                                    System.out.println(&quot;accept &quot; + ctx);</span><br><span class="line">                                    ctx.writeAndFlush(byteBuf.duplicate()).addListener(ChannelFutureListener.CLOSE);</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">            ChannelFuture future = serverBootstrap.bind().sync();</span><br><span class="line">            future.channel().closeFuture().sync();</span><br><span class="line">        &#125; catch (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            eventLoopGroup.shutdownGracefully().sync();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="epoll"><a href="#epoll" class="headerlink" title="epoll"></a>epoll</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">package com.ming;</span><br><span class="line"></span><br><span class="line">import io.netty.bootstrap.ServerBootstrap;</span><br><span class="line">import io.netty.buffer.ByteBuf;</span><br><span class="line">import io.netty.buffer.Unpooled;</span><br><span class="line">import io.netty.channel.*;</span><br><span class="line">import io.netty.channel.epoll.EpollEventLoopGroup;</span><br><span class="line">import io.netty.channel.epoll.EpollServerSocketChannel;</span><br><span class="line">import io.netty.channel.socket.SocketChannel;</span><br><span class="line">import io.netty.util.CharsetUtil;</span><br><span class="line"></span><br><span class="line">import java.net.InetSocketAddress;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 基于linux 的Epoll 非阻塞 方式实现的 io传输</span><br><span class="line"> *</span><br><span class="line"> * @author ming</span><br><span class="line"> * @date 2018-04-16 17:28</span><br><span class="line"> */</span><br><span class="line">public class NettyEpoll &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws InterruptedException &#123;</span><br><span class="line">        new NettyEpoll().Start(20000);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 启动 基于 epoll 的server</span><br><span class="line">     *</span><br><span class="line">     * @author ming</span><br><span class="line">     * @date 2018-04-16 17:29</span><br><span class="line">     */</span><br><span class="line">    public void Start(int port) throws InterruptedException &#123;</span><br><span class="line">        final ByteBuf byteBuf = Unpooled.unreleasableBuffer(Unpooled.copiedBuffer(&quot;hi ming &quot;, CharsetUtil.UTF_8));</span><br><span class="line">        //使用epoll</span><br><span class="line">        EventLoopGroup eventLoopGroup = new EpollEventLoopGroup();</span><br><span class="line">        try &#123;</span><br><span class="line">            ServerBootstrap serverBootstrap = new ServerBootstrap();</span><br><span class="line">            serverBootstrap.group(eventLoopGroup)</span><br><span class="line">                    .channel(EpollServerSocketChannel.class)</span><br><span class="line">                    .localAddress(new InetSocketAddress(port))</span><br><span class="line">                    .childHandler(new ChannelInitializer&lt;SocketChannel&gt;() &#123;</span><br><span class="line">                        @Override</span><br><span class="line">                        protected void initChannel(SocketChannel ch) throws Exception &#123;</span><br><span class="line">                            ch.pipeline().addLast(new ChannelInboundHandlerAdapter() &#123;</span><br><span class="line">                                @Override</span><br><span class="line">                                public void channelActive(ChannelHandlerContext ctx) throws Exception &#123;</span><br><span class="line">                                    System.out.println(&quot;accept&quot; + ctx);</span><br><span class="line">                                    ctx.writeAndFlush(byteBuf.duplicate()).addListener(ChannelFutureListener.CLOSE);</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;);</span><br><span class="line"></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">            ChannelFuture future = serverBootstrap.bind().sync();</span><br><span class="line">            future.channel().closeFuture().sync();</span><br><span class="line">        &#125; catch (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            eventLoopGroup.shutdownGracefully().sync();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="jvm-local"><a href="#jvm-local" class="headerlink" title="jvm local"></a>jvm local</h4><p>1:jvm local server<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">package com.ming.JvmLocal;</span><br><span class="line"></span><br><span class="line">import io.netty.bootstrap.ServerBootstrap;</span><br><span class="line">import io.netty.buffer.ByteBuf;</span><br><span class="line">import io.netty.buffer.Unpooled;</span><br><span class="line">import io.netty.channel.*;</span><br><span class="line">import io.netty.channel.local.LocalAddress;</span><br><span class="line">import io.netty.channel.local.LocalChannel;</span><br><span class="line">import io.netty.channel.local.LocalEventLoopGroup;</span><br><span class="line">import io.netty.channel.local.LocalServerChannel;</span><br><span class="line">import io.netty.util.CharsetUtil;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * netty 基于jvm内部本地通信 server实现</span><br><span class="line"> *</span><br><span class="line"> * @author ming</span><br><span class="line"> * @date 2018-04-17 13:45</span><br><span class="line"> */</span><br><span class="line">public class NettyJvmLocalServer &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 启动方法</span><br><span class="line">     *</span><br><span class="line">     * @author ming</span><br><span class="line">     * @date 2018-04-17 13:50</span><br><span class="line">     */</span><br><span class="line">    public void Start() throws InterruptedException &#123;</span><br><span class="line">        final ByteBuf byteBuf = Unpooled.unreleasableBuffer(Unpooled.copiedBuffer(&quot;hi ming &quot;, CharsetUtil.UTF_8));</span><br><span class="line">        //注册 local 事件处理器</span><br><span class="line">        EventLoopGroup eventLoopGroup = new LocalEventLoopGroup();</span><br><span class="line"></span><br><span class="line">        try &#123;</span><br><span class="line">            ServerBootstrap serverBootstrap = new ServerBootstrap();</span><br><span class="line">            serverBootstrap.group(eventLoopGroup)</span><br><span class="line">                    //使用Local server channel</span><br><span class="line">                    .channel(LocalServerChannel.class)</span><br><span class="line">                    //使用 local 地址</span><br><span class="line">                    .localAddress(new LocalAddress(NettyJvmLocal.LOCAL_ADDRESS))</span><br><span class="line">                    .childHandler(new ChannelInitializer&lt;LocalChannel&gt;() &#123;</span><br><span class="line">                        @Override</span><br><span class="line">                        protected void initChannel(LocalChannel ch) throws Exception &#123;</span><br><span class="line">                            ch.pipeline().addLast(new ChannelInboundHandlerAdapter() &#123;</span><br><span class="line">                                @Override</span><br><span class="line">                                public void channelActive(ChannelHandlerContext ctx) throws Exception &#123;</span><br><span class="line">                                    System.out.println(&quot;accept &quot; + ctx);</span><br><span class="line">                                    ctx.writeAndFlush(byteBuf).addListener(ChannelFutureListener.CLOSE);</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">            ChannelFuture future = serverBootstrap.bind().sync();</span><br><span class="line">            future.channel().closeFuture().sync();</span><br><span class="line"></span><br><span class="line">        &#125; catch (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            eventLoopGroup.shutdownGracefully().sync();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>2: jvm local client<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">package com.ming.JvmLocal;</span><br><span class="line"></span><br><span class="line">import io.netty.bootstrap.Bootstrap;</span><br><span class="line">import io.netty.buffer.ByteBuf;</span><br><span class="line">import io.netty.buffer.Unpooled;</span><br><span class="line">import io.netty.channel.*;</span><br><span class="line">import io.netty.channel.local.LocalAddress;</span><br><span class="line">import io.netty.channel.local.LocalChannel;</span><br><span class="line">import io.netty.channel.local.LocalEventLoopGroup;</span><br><span class="line">import io.netty.util.CharsetUtil;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * netty 基于jvm内部本地通信 client 实现</span><br><span class="line"> *</span><br><span class="line"> * @author ming</span><br><span class="line"> * @date 2018-04-17 13:45</span><br><span class="line"> */</span><br><span class="line">public class NettyJvmLocalClient &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 启动方法</span><br><span class="line">     *</span><br><span class="line">     * @author ming</span><br><span class="line">     * @date 2018-04-17 13:50</span><br><span class="line">     */</span><br><span class="line">    public void Start() throws InterruptedException &#123;</span><br><span class="line">        final ByteBuf byteBuf = Unpooled.unreleasableBuffer(Unpooled.copiedBuffer(&quot;hi ming client&quot;, CharsetUtil.UTF_8));</span><br><span class="line">        //注册 local 事件处理器</span><br><span class="line">        EventLoopGroup eventLoopGroup = new LocalEventLoopGroup();</span><br><span class="line"></span><br><span class="line">        try &#123;</span><br><span class="line">            Bootstrap bootstrap = new Bootstrap();</span><br><span class="line">            bootstrap.group(eventLoopGroup)</span><br><span class="line">                    //使用 localChannel渠道</span><br><span class="line">                    .channel(LocalChannel.class)</span><br><span class="line">                    //注册 local模式的地址</span><br><span class="line">                    .remoteAddress(new LocalAddress(NettyJvmLocal.LOCAL_ADDRESS))</span><br><span class="line">                    .handler(new ChannelInitializer&lt;LocalChannel&gt;() &#123;</span><br><span class="line">                        @Override</span><br><span class="line">                        protected void initChannel(LocalChannel ch) throws Exception &#123;</span><br><span class="line">                            ch.pipeline().addLast(new ChannelInboundHandlerAdapter() &#123;</span><br><span class="line">                                @Override</span><br><span class="line">                                public void channelActive(ChannelHandlerContext ctx) throws Exception &#123;</span><br><span class="line">                                    System.out.println(&quot;connect &quot; + ctx);</span><br><span class="line">                                    ctx.writeAndFlush(byteBuf).addListener(ChannelFutureListener.CLOSE);</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">            ChannelFuture future = bootstrap.connect().sync();</span><br><span class="line">            future.channel().closeFuture().sync();</span><br><span class="line">        &#125; catch (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            eventLoopGroup.shutdownGracefully().sync();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>3:jvm local demo<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">package com.ming.JvmLocal;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 调用 netty jvm  local server 和client 的客户端</span><br><span class="line"> *</span><br><span class="line"> * @author ming</span><br><span class="line"> * @date 2018-04-17 14:09</span><br><span class="line"> */</span><br><span class="line">public class NettyJvmLocal &#123;</span><br><span class="line">    /**</span><br><span class="line">     * 本地地址</span><br><span class="line">     *</span><br><span class="line">     * @author ming</span><br><span class="line">     * @date 2018-04-17 14:16</span><br><span class="line">     */</span><br><span class="line">    public static final String LOCAL_ADDRESS = &quot;ming&quot;;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws InterruptedException &#123;</span><br><span class="line">        // 启动 server</span><br><span class="line">        new Thread(() -&gt; &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                new NettyJvmLocalServer().Start();</span><br><span class="line">            &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line"></span><br><span class="line">        //暂停 线程 1s 等待server 启动完毕</span><br><span class="line">        Thread.sleep(1000L);</span><br><span class="line"></span><br><span class="line">        //启动client</span><br><span class="line">        new Thread(() -&gt; &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                new NettyJvmLocalClient().Start();</span><br><span class="line">            &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h3 id="传输"><a href="#传输" class="headerlink" title="传输"></a>传输</h3><p>传输是基于channel 的  </p><p>channel是有顺序的 因为继承 java.lang.Comparable<br>channelHandler:常规用途  </p><ul><li>数据格式转换   </li><li>异常处理  </li><li>提供channel 状态变更通知  </li><li>提供channel 注册或者注销 EventLoop中的通知  </li><li>提供用户自定义事件通知  </li></ul><p>channel 线程安全 并且保证顺序发送   </p><h3 id="内置传输手段"><a href="#内置传输手段" class="headerlink" title="内置传输手段"></a>内置传输手段</h3><table><thead><tr><th style="text-align:left">名称</th><th style="text-align:left">包</th><th style="text-align:left">备注</th></tr></thead><tbody><tr><td style="text-align:left">NIO</td><td style="text-align:left">io.netty.channel.socket.nio</td><td style="text-align:left">使用java nio</td></tr><tr><td style="text-align:left">Epoll</td><td style="text-align:left">io.netty.channel.epoll</td><td style="text-align:left">基于jni驱动的epoll()和非阻塞io 只能在linux上支持 比NIO快 并且完全非阻塞</td></tr><tr><td style="text-align:left">OIO</td><td style="text-align:left">io.netty.channel.socket.oio</td><td style="text-align:left">使用java net包 阻塞流</td></tr><tr><td style="text-align:left">Local</td><td style="text-align:left">io.netty.channel.local</td><td style="text-align:left">直接使用jvm内部管道通信</td></tr><tr><td style="text-align:left">Embedded</td><td style="text-align:left">io.netty.channel.embedded</td><td style="text-align:left">测试channelHandler使用的不依赖网络</td></tr></tbody></table><h3 id="nio-非阻塞-io"><a href="#nio-非阻塞-io" class="headerlink" title="nio  非阻塞 io"></a>nio  非阻塞 io</h3><p>基于selector<br>状态变化:  </p><ul><li>新的channel 已经被接受并且准备就绪   </li><li>channel 链接完成  </li><li>channel 有就绪的可供读取的数据  </li><li>channel 可用于写数据<br>通过java.nio.channels.SelectionKey定义的位 组合成一组应用程序正在请求通知的状态变化集合<br>|名称|描述|<br>|:–|:–|<br>|OP_ACCEPT|请求接受新链接创建channel获得通知|<br>|OP_CONNECT|请求建立第一个链接时候获得通知|<br>|OP_READ|请求数据就绪 可从channel 读取时获得通知|<br>|OP_WRITE|请求当可以向 channel中写入数据时候 获得通知、|  </li></ul><h3 id="Epoll-基于linux的本地非阻塞传输"><a href="#Epoll-基于linux的本地非阻塞传输" class="headerlink" title="Epoll 基于linux的本地非阻塞传输"></a>Epoll 基于linux的本地非阻塞传输</h3><p>在linux 2.5.44内核引入的功能   比POSIX 的select poll 更加牛逼<br>不考虑 夸平台  只考虑linux 的话  epoll 直接走起     </p><h3 id="oio-阻塞io"><a href="#oio-阻塞io" class="headerlink" title="oio 阻塞io"></a>oio 阻塞io</h3><p>基于jdk  java.net包的阻塞io<br>是netty 为了兼容 可能存在的老旧的系统 保留的 oio支持   </p><h3 id="基于jvm内部的local传输"><a href="#基于jvm内部的local传输" class="headerlink" title="基于jvm内部的local传输"></a>基于jvm内部的local传输</h3><p>在同一个jvm中运行的客户端和服务端程序直接的异步通信使用这种 可以大幅度提高速度   </p><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><p>java实现oio和nio的代码 提供的api 区别比较大<br>oio 不需要selector 直接server socket接受 处理<br>nio 通过selector 协调 分配给相应的 socket 处理<br>netty 实现oio和nio 提供的api 基本相同 就是在使用发送方式和发送渠道时候 需要保持一致<br>例如 使用NioEventLoopGroup 那么传输渠道必须是NioServerChannelSocket<br>使用OioEventLoopGroup那么必须使用OioServerChannelSocket   </p><h3 id="传输支持的协议"><a href="#传输支持的协议" class="headerlink" title="传输支持的协议"></a>传输支持的协议</h3><table><thead><tr><th style="text-align:left">传输类型</th><th style="text-align:left">支持类型</th></tr></thead><tbody><tr><td style="text-align:left">NIO</td><td style="text-align:left">tcp、udp、sctp、udt</td></tr><tr><td style="text-align:left">Epoll(linux)</td><td style="text-align:left">tcp、udp</td></tr><tr><td style="text-align:left">OIO</td><td style="text-align:left">tcp、udp、sctp、udt</td></tr></tbody></table><p>sctp 增强版本的tcp<br>udt  增强版本的udp  </p><h3 id="传输类型选择"><a href="#传输类型选择" class="headerlink" title="传输类型选择:"></a>传输类型选择:</h3><table><thead><tr><th style="text-align:left">需求类型</th><th style="text-align:left">推荐传输类型</th><th style="text-align:left">备注</th></tr></thead><tbody><tr><td style="text-align:left">非阻塞代码、常规套路</td><td style="text-align:left">nio、或者epoll</td><td style="text-align:left">如果不考虑跨平台等功能 并且只考虑linux 平台运行 那么 epoll 是肯定的 毕竟是个特殊优化的非阻塞模式</td></tr><tr><td style="text-align:left">阻塞代码</td><td style="text-align:left">oio</td><td style="text-align:left">处理遗留代码的时候选择</td></tr><tr><td style="text-align:left">同jvm通信</td><td style="text-align:left">jvm local</td><td style="text-align:left">在同一个jvm中 进行通信的话 选择jvm local 可以直接省掉网络io的开销</td></tr><tr><td style="text-align:left">测试ChannelHandler</td><td style="text-align:left">Embedded</td><td style="text-align:left">只有写单元测试用用</td></tr></tbody></table><p>零拷贝:<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">零拷贝(zero-copy)是一种目前只有在使用 NIO 和 Epoll 传输时才可使用的特性。它使你可以快速</span><br><span class="line">高效地将数据从文件系统移动到网络接口,而不需要将其从内核空间复制到用户空间,其在像 FTP 或者</span><br><span class="line">HTTP 这样的协议中可以显著地提升性能。但是,并不是所有的操作系统都支持这一特性。特别地,它对</span><br><span class="line">于实现了数据加密或者压缩的文件系统是不可用的——只能传输文件的原始内容。反过来说,传输已被</span><br><span class="line">加密的文件则不是问题。</span><br></pre></td></tr></table></figure><p></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;###传输案例&lt;/p&gt;&lt;h4 id=&quot;java-oio&quot;&gt;&lt;a href=&quot;#java-oio&quot; class=&quot;headerlink&quot; title=&quot;java oio&quot;&gt;&lt;/a&gt;java oio&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;ta
      
    
    </summary>
    
      <category term="笔记" scheme="http://www.xujiuming.com/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="netty" scheme="http://www.xujiuming.com/tags/netty/"/>
    
      <category term="传输协议" scheme="http://www.xujiuming.com/tags/%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AE/"/>
    
  </entry>
  
  <entry>
    <title>docker-swarm集群搭建</title>
    <link href="http://www.xujiuming.com/ming/e855d436.html"/>
    <id>http://www.xujiuming.com/ming/e855d436.html</id>
    <published>2018-03-19T02:25:17.000Z</published>
    <updated>2018-06-25T03:49:16.163Z</updated>
    
    <content type="html"><![CDATA[<p>swarm编排吧 首先肯定比不上k8s犀利 但是呢 胜在 使用简单 部署简单<br>docker直接集成 可以使用docker、docker-compose 原生api</p><p>我个人认为 没有十来台服务器 部署k8s集群 完全是浪费 毕竟k8s 是非常需要 master 高可用的 服务器少了 部署k8s 浪费资源太多了 so 开发环境直接使用 swarm 来编排docker</p><h3 id="环境"><a href="#环境" class="headerlink" title="环境:"></a>环境:</h3><ul><li>centos 7.x</li><li>docker 版本新点 至少 要集成swarm 模块<h4 id="1：-安装基本docker-环境"><a href="#1：-安装基本docker-环境" class="headerlink" title="1： 安装基本docker 环境"></a>1： 安装基本docker 环境</h4><a href="/ming/aef2102a.html" title="centos-docker环境搭建">centos-docker环境搭建</a></li></ul><p>使用 如下命令测试是否有swarm模块<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker swarm</span><br></pre></td></tr></table></figure><p></p><p>swarm 默认集成到docker中的</p><h4 id="2：基于-docker-swarm-配置portainer管理页面"><a href="#2：基于-docker-swarm-配置portainer管理页面" class="headerlink" title="2：基于 docker swarm  配置portainer管理页面"></a>2：基于 docker swarm  配置portainer管理页面</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># 初始化 swarm 集群  </span><br><span class="line">sudo docker swarm init </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 创建 portainer 挂载目录</span><br><span class="line">sudo mkdir -p /opt/portainer</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 以 swarm service 建立 portainer 管理 </span><br><span class="line">sudo  docker service create \</span><br><span class="line">--name portainer \</span><br><span class="line">--publish 9000:9000 \</span><br><span class="line">--replicas=1 \</span><br><span class="line">--constraint &apos;node.role == manager&apos; \</span><br><span class="line">--mount type=bind,src=//var/run/docker.sock,dst=/var/run/docker.sock \</span><br><span class="line">--mount type=bind,src=//opt/portainer,dst=/data \</span><br><span class="line">portainer/portainer \</span><br><span class="line">-H unix:///var/run/docker.sock</span><br></pre></td></tr></table></figure><p>http://<ip>:9000 访问即可 </ip></p><h4 id="3-遇到问题"><a href="#3-遇到问题" class="headerlink" title="3:遇到问题"></a>3:遇到问题</h4><p>参考地址:<a href="http://blog.51cto.com/zpf666/1908067" target="_blank" rel="noopener">http://blog.51cto.com/zpf666/1908067</a><br>1:无法通过服务名访问服务<br>需要建立一个overlay网络<br>swarm上默认已有一个名为ingress的overlay 网络, 可以直接使用<br>也可以从新建立     </p><p>2:遗忘swarm 添加节点时候的token<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo docker swarm join-token master</span><br><span class="line">sudo docker swarm jon-token worker</span><br></pre></td></tr></table></figure><p></p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>swarm 一两台服务器的docker编排 还是很轻松的  而且也不需要 k8s那么麻烦<br>虽然k8s 一统天下  但是个人电脑用个swarm管理管理 还是简简单单 轻轻松松的</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;swarm编排吧 首先肯定比不上k8s犀利 但是呢 胜在 使用简单 部署简单&lt;br&gt;docker直接集成 可以使用docker、docker-compose 原生api&lt;/p&gt;&lt;p&gt;我个人认为 没有十来台服务器 部署k8s集群 完全是浪费 毕竟k8s 是非常需要 maste
      
    
    </summary>
    
      <category term="docker" scheme="http://www.xujiuming.com/categories/docker/"/>
    
    
      <category term="docker" scheme="http://www.xujiuming.com/tags/docker/"/>
    
      <category term="linux" scheme="http://www.xujiuming.com/tags/linux/"/>
    
      <category term="swarm" scheme="http://www.xujiuming.com/tags/swarm/"/>
    
  </entry>
  
  <entry>
    <title>centos-docker环境搭建</title>
    <link href="http://www.xujiuming.com/ming/aef2102a.html"/>
    <id>http://www.xujiuming.com/ming/aef2102a.html</id>
    <published>2018-03-19T02:22:33.000Z</published>
    <updated>2018-06-25T03:49:16.163Z</updated>
    
    <content type="html"><![CDATA[<h3 id="环境"><a href="#环境" class="headerlink" title="环境:"></a>环境:</h3><ul><li>centos 7.x</li><li>docker<h4 id="1-安装docker"><a href="#1-安装docker" class="headerlink" title="1:安装docker"></a>1:安装docker</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#安装 一些组件</span><br><span class="line">sudo yum install -y yum-utils device-mapper-persistent-data lvm2</span><br><span class="line"># 拉取阿里云中 docker-ce的repo</span><br><span class="line">sudo yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line"># 刷新 yum 缓存</span><br><span class="line">sudo yum makecache fast</span><br><span class="line"># 安装 docker-ce</span><br><span class="line">sudo yum -y install docker-ce</span><br><span class="line"># 启动 docker service</span><br><span class="line">sudo systemctl start docker</span><br></pre></td></tr></table></figure></li></ul><h4 id="2：配置阿里云加速"><a href="#2：配置阿里云加速" class="headerlink" title="2：配置阿里云加速"></a>2：配置阿里云加速</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir -p /etc/docker</span><br><span class="line">sudo tee /etc/docker/daemon.json &lt;&lt;-&apos;EOF&apos;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [&quot;https://7vm1yv9c.mirror.aliyuncs.com&quot;]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br><span class="line"># 设置开机自启动</span><br><span class="line">sudo systemctl enable docker</span><br></pre></td></tr></table></figure><h4 id="3-关闭SELinux-firewalld"><a href="#3-关闭SELinux-firewalld" class="headerlink" title="3:关闭SELinux  firewalld"></a>3:关闭SELinux  firewalld</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Redhat系列使用了SELinux来增强安全，关闭的办法为：</span><br><span class="line">1. 永久有效</span><br><span class="line">修改 vi /etc/selinux/config 文件中的 SELINUX=&quot;&quot; 为 disabled ，然后重启。</span><br><span class="line">2. 即时生效</span><br><span class="line">#setenforce 0</span><br><span class="line">#3:查看是否关闭</span><br><span class="line">sestatus</span><br><span class="line"></span><br><span class="line">#### 关闭 firewalld</span><br><span class="line">systemctl stop firewalld</span><br><span class="line">### 禁止开机自动启动firewalld</span><br><span class="line">systemctl disable firewalld</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;环境&quot;&gt;&lt;a href=&quot;#环境&quot; class=&quot;headerlink&quot; title=&quot;环境:&quot;&gt;&lt;/a&gt;环境:&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;centos 7.x&lt;/li&gt;&lt;li&gt;docker&lt;h4 id=&quot;1-安装docker&quot;&gt;&lt;a href=&quot;#1-安装dock
      
    
    </summary>
    
      <category term="docker" scheme="http://www.xujiuming.com/categories/docker/"/>
    
    
      <category term="docker" scheme="http://www.xujiuming.com/tags/docker/"/>
    
      <category term="linux" scheme="http://www.xujiuming.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>k8s集群日志采集方案选择</title>
    <link href="http://www.xujiuming.com/ming/d8147fe2.html"/>
    <id>http://www.xujiuming.com/ming/d8147fe2.html</id>
    <published>2018-03-09T02:32:23.000Z</published>
    <updated>2018-06-25T03:49:16.163Z</updated>
    
    <content type="html"><![CDATA[<h3 id="日志采集方案"><a href="#日志采集方案" class="headerlink" title="日志采集方案"></a>日志采集方案</h3><p>常规的日志采集总的来说 分为 收集–》处理–》存储–》查看<br>比较出名 并且用的比较多的 应该是elk模式<br>常用组合应该是如下 三种 至于还有其他采集工具 其实都差不多</p><ul><li>elk: es + kibana + logstash<br>最经典的做法 es+kibana 做 存储 查询 logstash 做日志采集和管道处理<br>缺陷是logstash 功能复杂 除非是搭建所有项目的统一日志 这种同集群的 logstash并不是特别好用<br>efk: es +kibana + filebeat<br>最直接的做法 es+kibana 做存储查询 filebeat采集数据 直接发送到es上 不经过logstash管道处理<br>elkf: es+ kibana+logstash +filebeat<br>功能最齐全的做法 es+kibana做存储查询 logstash做管道处理 filebeat 做采集</li></ul><p>为何选择filebeat做采集 因为短小精悍 go语言开发 占用资源少<br>具体的可以查询官网:<a href="https://www.elastic.co/cn/" target="_blank" rel="noopener">https://www.elastic.co/cn/</a> 随便搭配 总归就是一个收集处理存储查看的过程</p><h4 id="k8s集群配置日志采集方案"><a href="#k8s集群配置日志采集方案" class="headerlink" title="k8s集群配置日志采集方案"></a>k8s集群配置日志采集方案</h4><p>1：在node上配置一个filebeat 所有的镜像的日志 按照一定规则映射到filebeat采集的目录下<br>这种 配置简单 不过需要制定一套 项目的日志记录规范<br>2:使用k8s的daemon set 为每个pod 绑定一个filebeat 利用的是k8s的pod 共享数据卷的套路<br>这种较为消耗资源 一个filebeat20m内存 那么 100个容器 就是 2000m内存了 有点得不偿失<br>好处就是如果资源足够可以很容易的进行动态伸缩容器 新开node不需要配置 只要有kubelet就行</p><p>个人更加倾向 efk 因为 filebeat 非常适合 通过daemon set 去绑定到k8s pod中<br>并且不是很需要 logstash</p><h4 id="k8s集群-efk日志采集-实践"><a href="#k8s集群-efk日志采集-实践" class="headerlink" title="k8s集群+efk日志采集 实践"></a>k8s集群+efk日志采集 实践</h4><h6 id="0-启动-es-kibana"><a href="#0-启动-es-kibana" class="headerlink" title="0:启动 es+kibana"></a>0:启动 es+kibana</h6><p>通过镜像去启动 方便点 真实环境 请尽量采用 直接安装在服务器上 因为要映射数据文件乱七八糟的 不是很方便<br>nshou/elasticsearch-kibana latest版本 es=6.2.1 kibana=6.2.1<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker run -d -p 9200:9200 -p 5601:5601 --name es-kibana-test  nshou/elasticsearch-kibana</span><br></pre></td></tr></table></figure><p></p><p>直接在服务器上安装 请参考官网即可 </p><h6 id="1-搭建k8s实验环境"><a href="#1-搭建k8s实验环境" class="headerlink" title="1:搭建k8s实验环境"></a>1:搭建k8s实验环境</h6><p>使用minikube 快速搭建一个k8s实验环境<br><a href="/ming/ba1e0f81.html" title="minikube快速搭建k8s测试环境">minikube快速搭建k8s测试环境</a></p><h6 id="2：建立并且修改deployment"><a href="#2：建立并且修改deployment" class="headerlink" title="2：建立并且修改deployment"></a>2：建立并且修改deployment</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">``` </span><br><span class="line">###### 3：建立并且调整daemon set </span><br><span class="line">```$xslt</span><br></pre></td></tr></table></figure><h4 id="4：建立并且调整-service"><a href="#4：建立并且调整-service" class="headerlink" title="4：建立并且调整 service"></a>4：建立并且调整 service</h4><p>####</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;日志采集方案&quot;&gt;&lt;a href=&quot;#日志采集方案&quot; class=&quot;headerlink&quot; title=&quot;日志采集方案&quot;&gt;&lt;/a&gt;日志采集方案&lt;/h3&gt;&lt;p&gt;常规的日志采集总的来说 分为 收集–》处理–》存储–》查看&lt;br&gt;比较出名 并且用的比较多的 应该是elk模
      
    
    </summary>
    
      <category term="使用" scheme="http://www.xujiuming.com/categories/%E4%BD%BF%E7%94%A8/"/>
    
    
      <category term="docker" scheme="http://www.xujiuming.com/tags/docker/"/>
    
      <category term="k8s" scheme="http://www.xujiuming.com/tags/k8s/"/>
    
      <category term="日志采集" scheme="http://www.xujiuming.com/tags/%E6%97%A5%E5%BF%97%E9%87%87%E9%9B%86/"/>
    
  </entry>
  
  <entry>
    <title>rancher搭建k8s集群-国内加速</title>
    <link href="http://www.xujiuming.com/ming/b52bf00b.html"/>
    <id>http://www.xujiuming.com/ming/b52bf00b.html</id>
    <published>2018-03-01T03:04:01.000Z</published>
    <updated>2018-06-25T03:49:16.163Z</updated>
    
    <content type="html"><![CDATA[<p>通过rancher部署k8s如果不考虑gfw 是非常简单的 但是在国内部署 不得不考虑gfw的问题<br>默认有个 组件镜像是从 google上下载的 所以需要修改一些参数配置提供国内加速</p><h3 id="环境"><a href="#环境" class="headerlink" title="环境:"></a>环境:</h3><ul><li>centos 7.x</li><li>rancher：1.6.x</li><li>docker 支持rancher:1.6.x的版本即可<h4 id="1：-安装基本docker-环境"><a href="#1：-安装基本docker-环境" class="headerlink" title="1： 安装基本docker 环境"></a>1： 安装基本docker 环境</h4><a href="/ming/aef2102a.html" title="centos-docker环境搭建">centos-docker环境搭建</a></li></ul><h4 id="2：启动rancher-server"><a href="#2：启动rancher-server" class="headerlink" title="2：启动rancher server"></a>2：启动rancher server</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 建立存放 rancher 相关数据文件存储</span><br><span class="line">mkdir -p /root/rancher</span><br><span class="line"># 启动 rancher server 容器 </span><br><span class="line">sudo docker run -d -v /root/rancher:/var/lib/mysql --restart=unless-stopped -p 40000:8080 --name rancher-server rancher/server:stable</span><br></pre></td></tr></table></figure><h4 id="3-登陆rancher"><a href="#3-登陆rancher" class="headerlink" title="3:登陆rancher"></a>3:登陆rancher</h4><p>访问 http://<ip>:40000 </ip></p><h4 id="4-自定义-k8s模板-使用-国内可用镜像"><a href="#4-自定义-k8s模板-使用-国内可用镜像" class="headerlink" title="4:自定义 k8s模板 使用 国内可用镜像"></a>4:自定义 k8s模板 使用 国内可用镜像</h4><p>按照 <a href="https://www.cnrancher.com/kubernetes-installation/" target="_blank" rel="noopener">https://www.cnrancher.com/kubernetes-installation/</a> 文档进行修改<br>注意：<br>文档中标记红线的值 必须如下 设置 否则 无法启动 共四个值需要修改<br>Private Registry for Add-Ons and Pod Infra Container Image = registry.cn-shenzhen.aliyuncs.com<br>Image namespace for  Add-Ons and Pod Infra Container Image = rancher_cn<br>Image namespace for kubernetes-helm Image = rancher_cn<br>Pod Infra Container Image =  rancher_cn/pause-amd64:3.0</p><h4 id="5-创建-环境"><a href="#5-创建-环境" class="headerlink" title="5:创建 环境"></a>5:创建 环境</h4><p>根据刚刚创建的 k8s模板创建环境 即可  </p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>部署rancher 很简单 注意是有时候是gfw导致组件无法创建 略坑<br>rancher 部署的k8s集群 有两个dns  一个是k8s中 kube-system 中的dns服务 一个是rancher的network 应用  两个都可以用<br>部署rancher 如果资源相对充足 rancher server和rancher agent分开部署<br>在rancher1.x版本中 rancher部署的k8s集群 是在rancher agent 上部署的 扩展起来很困难<br>而且由于 rancher也提供一套cni网络  这样就导致 k8s的网络和rancher的网络复合起来  显得较为复杂 不好处理</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;通过rancher部署k8s如果不考虑gfw 是非常简单的 但是在国内部署 不得不考虑gfw的问题&lt;br&gt;默认有个 组件镜像是从 google上下载的 所以需要修改一些参数配置提供国内加速&lt;/p&gt;&lt;h3 id=&quot;环境&quot;&gt;&lt;a href=&quot;#环境&quot; class=&quot;header
      
    
    </summary>
    
      <category term="k8s" scheme="http://www.xujiuming.com/categories/k8s/"/>
    
    
      <category term="docker" scheme="http://www.xujiuming.com/tags/docker/"/>
    
      <category term="k8s" scheme="http://www.xujiuming.com/tags/k8s/"/>
    
      <category term="rancher" scheme="http://www.xujiuming.com/tags/rancher/"/>
    
  </entry>
  
  <entry>
    <title>springCloudConfigServer的git、svn版本实现及相关实战案例</title>
    <link href="http://www.xujiuming.com/ming/7ced3fa5.html"/>
    <id>http://www.xujiuming.com/ming/7ced3fa5.html</id>
    <published>2018-02-27T07:01:39.000Z</published>
    <updated>2018-06-25T03:49:16.163Z</updated>
    
    <content type="html"><![CDATA[<h3 id="配置中心"><a href="#配置中心" class="headerlink" title="配置中心"></a>配置中心</h3><p>在分布式 环境中 配置中心是必不可少的一个组件 不管是国内的 disconf 、Apollo之类 还是spring cloud的config server 都是一个套路<br>将配置统一管理 通过namespace、项目名称之类的 进行区分 加入一些操作审计、配置加密之类的功能 有的是基于数据库、有的是基于文件+版本管理<br>由于技术栈和个人习惯 我个人更加喜欢spring 社区的config server 基于文件和版本管理来实现的配置 可以很方便的管理配置的版本和内容</p><p>个人觉得 在整个集群中管踏马是什么配置 都可以丢进配置中心进行统一管理 例如app的打包配置、集群的参数配置等等 反正只要是配置都可以放进去</p><h4 id="spring-cloud-config-server"><a href="#spring-cloud-config-server" class="headerlink" title="spring cloud config server"></a>spring cloud config server</h4><p>这个是属于spring cloud 项目中的一个组件<br>它基于 svn或者git 去管理配置文件 提供各种各样的配置文件的管理 、提供敏感配置加密(对称、非对称都支持)、访问控制等等<br>java中使用 config server client 客户端读取配置直接提供不停机更新配置功能 等等<br>非java项目 可以通过http接口获取配置</p><h4 id="需要技能"><a href="#需要技能" class="headerlink" title="需要技能"></a>需要技能</h4><ul><li>git、svn熟练</li><li>java相关技能熟练 例如maven之类的</li><li>docker 熟练 涉及到项目打包成docker image</li></ul><h4 id="git版本"><a href="#git版本" class="headerlink" title="git版本"></a>git版本</h4><p>git版本就简单了 毕竟git好用 大部分书籍、博客都是介绍git版本的<br>1：新建maven java项目<br>pom配置<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;project xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">         xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;</span><br><span class="line">         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">    &lt;parent&gt;</span><br><span class="line">        &lt;artifactId&gt;parent&lt;/artifactId&gt;</span><br><span class="line">        &lt;groupId&gt;ming&lt;/groupId&gt;</span><br><span class="line">        &lt;version&gt;1.0.0&lt;/version&gt;</span><br><span class="line">    &lt;/parent&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line"></span><br><span class="line">    &lt;artifactId&gt;configServer&lt;/artifactId&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-config-server&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-starter-eureka&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;!-- &lt;dependency&gt;</span><br><span class="line">             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">             &lt;artifactId&gt;spring-boot-starter-security&lt;/artifactId&gt;</span><br><span class="line">         &lt;/dependency&gt;--&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure><p></p><p>2:application.yml配置<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: config</span><br><span class="line">  cloud:</span><br><span class="line">    config:</span><br><span class="line">      server:</span><br><span class="line">        git:</span><br><span class="line">          uri: &quot;https://github.com/xuxianyu/springcloud.git&quot;</span><br><span class="line">          #仓库的搜索路径 这里可以指定 git的目录  config/spring-repo/&#123;目录&#125; 这种方式就可以按照项目区分配置目录了 </span><br><span class="line">          search-paths: config/spring-repo/ming</span><br><span class="line">#config server 访问账户密码</span><br><span class="line">security:</span><br><span class="line">  user:</span><br><span class="line">    name: ming</span><br><span class="line">    password: ming</span><br><span class="line">#设定 对称加密密钥</span><br><span class="line">#encrypt:</span><br><span class="line">#  key: ming</span><br><span class="line">          #username: 18120580001@163.com</span><br><span class="line">          #password:</span><br></pre></td></tr></table></figure><p></p><p>3：配置启动类<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">package com.ming;</span><br><span class="line"></span><br><span class="line">import org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line">import org.springframework.boot.builder.SpringApplicationBuilder;</span><br><span class="line">import org.springframework.cloud.client.discovery.EnableDiscoveryClient;</span><br><span class="line">import org.springframework.cloud.config.server.EnableConfigServer;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * config server 启动类</span><br><span class="line"> *</span><br><span class="line"> * @author ming</span><br><span class="line"> * @date 2017-10-30 11:18</span><br><span class="line"> */</span><br><span class="line">//开启config 服务</span><br><span class="line">@EnableConfigServer</span><br><span class="line">//注册到注册中心</span><br><span class="line">@EnableDiscoveryClient</span><br><span class="line">@SpringBootApplication</span><br><span class="line">public class StartConfig &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        new SpringApplicationBuilder(StartConfig.class).web(true).run(args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>4：访问配置<br>在git仓库中建立ming/config-dev.yaml  master分支<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">name: ming</span><br></pre></td></tr></table></figure><p></p><p>浏览器访问 <a href="http://localhost:8888/master/config-dev.yaml" target="_blank" rel="noopener">http://localhost:8888/master/config-dev.yaml</a></p><p>实例地址: <a href="https://github.com/xuxianyu/springcloud/tree/master/configServer" target="_blank" rel="noopener">https://github.com/xuxianyu/springcloud/tree/master/configServer</a></p><h4 id="svn版本"><a href="#svn版本" class="headerlink" title="svn版本"></a>svn版本</h4><p>1:新建maven java项目<br>pom配置<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;</span><br><span class="line">         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line"></span><br><span class="line">    &lt;groupId&gt;com.onlyedu&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;configServer&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line">    &lt;parent&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;1.5.1.RELEASE&lt;/version&gt;</span><br><span class="line">    &lt;/parent&gt;</span><br><span class="line">    &lt;properties&gt;</span><br><span class="line">        &lt;!-- spring cloud version --&gt;</span><br><span class="line">        &lt;spring.cloud.version&gt;Camden.SR5&lt;/spring.cloud.version&gt;</span><br><span class="line">        &lt;!-- svnkit version --&gt;</span><br><span class="line">        &lt;svnkit.version&gt;1.9.0&lt;/svnkit.version&gt;</span><br><span class="line">    &lt;/properties&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--仓库--&gt;</span><br><span class="line">    &lt;repositories&gt;</span><br><span class="line">        &lt;!--aliyun repository--&gt;</span><br><span class="line">        &lt;repository&gt;</span><br><span class="line">            &lt;id&gt;aliyun&lt;/id&gt;</span><br><span class="line">            &lt;name&gt;aliyun nexus repository&lt;/name&gt;</span><br><span class="line">            &lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public/&lt;/url&gt;</span><br><span class="line">        &lt;/repository&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;/repositories&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;!-- spring cloud  config --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-config-server&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;!-- spring cloud config svn repository --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.tmatesoft.svnkit&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;svnkit&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;$&#123;svnkit.version&#125;&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;!-- spring  boot security 访问控制 --&gt;</span><br><span class="line">         &lt;dependency&gt;</span><br><span class="line">             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">             &lt;artifactId&gt;spring-boot-starter-security&lt;/artifactId&gt;</span><br><span class="line">         &lt;/dependency&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;dependencyManagement&gt;</span><br><span class="line">        &lt;!--spring cloud parent pom--&gt;</span><br><span class="line">        &lt;dependencies&gt;</span><br><span class="line">            &lt;dependency&gt;</span><br><span class="line">                &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;</span><br><span class="line">                &lt;version&gt;$&#123;spring.cloud.version&#125;&lt;/version&gt;</span><br><span class="line">                &lt;type&gt;pom&lt;/type&gt;</span><br><span class="line">                &lt;scope&gt;import&lt;/scope&gt;</span><br><span class="line">            &lt;/dependency&gt;</span><br><span class="line">        &lt;/dependencies&gt;</span><br><span class="line">    &lt;/dependencyManagement&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;!--构建插件--&gt;</span><br><span class="line">    &lt;build&gt;</span><br><span class="line"></span><br><span class="line">        &lt;plugins&gt;</span><br><span class="line">            &lt;!--docker 插件--&gt;</span><br><span class="line">            &lt;!--&lt;plugin&gt;</span><br><span class="line">                &lt;groupId&gt;com.spotify&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;docker-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">                &lt;version&gt;$&#123;maven.docker.version&#125;&lt;/version&gt;</span><br><span class="line">                &lt;configuration&gt;</span><br><span class="line">                    &amp;lt;!&amp;ndash;镜像名称&amp;ndash;&amp;gt;</span><br><span class="line">                    &lt;imageName&gt;$&#123;docker.image.prefix&#125;/$&#123;project.artifactId&#125;&lt;/imageName&gt;</span><br><span class="line">                    &amp;lt;!&amp;ndash;docker file位置&amp;ndash;&amp;gt;</span><br><span class="line">                    &lt;dockerDirectory&gt;src/main/docker&lt;/dockerDirectory&gt;</span><br><span class="line">                    &lt;resources&gt;</span><br><span class="line">                        &lt;resource&gt;</span><br><span class="line">                            &amp;lt;!&amp;ndash; 编译jar路径 &amp;ndash;&amp;gt;</span><br><span class="line">                            &lt;targetPath&gt;/&lt;/targetPath&gt;</span><br><span class="line">                            &amp;lt;!&amp;ndash;编译jar 所在文件夹&amp;ndash;&amp;gt;</span><br><span class="line">                            &lt;directory&gt;$&#123;project.build.directory&#125;&lt;/directory&gt;</span><br><span class="line">                            &amp;lt;!&amp;ndash;编译的jar 名称&amp;ndash;&amp;gt;</span><br><span class="line">                            &lt;include&gt;$&#123;project.build.finalName&#125;.jar&lt;/include&gt;</span><br><span class="line">                        &lt;/resource&gt;</span><br><span class="line">                    &lt;/resources&gt;</span><br><span class="line">                &lt;/configuration&gt;</span><br><span class="line">            &lt;/plugin&gt;--&gt;</span><br><span class="line">            &lt;!--指定编译jdk版本 默认为1.5--&gt;</span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line">                &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;</span><br><span class="line">                &lt;configuration&gt;</span><br><span class="line">                    &lt;source&gt;1.8&lt;/source&gt;</span><br><span class="line">                    &lt;target&gt;1.8&lt;/target&gt;</span><br><span class="line">                    &lt;encoding&gt;UTF-8&lt;/encoding&gt;</span><br><span class="line">                &lt;/configuration&gt;</span><br><span class="line">            &lt;/plugin&gt;</span><br><span class="line"></span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line">                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">            &lt;/plugin&gt;</span><br><span class="line"></span><br><span class="line">            &lt;!-- 解决资源文件的编码问题 --&gt;</span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line">                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;maven-resources-plugin&lt;/artifactId&gt;</span><br><span class="line">                &lt;configuration&gt;</span><br><span class="line">                    &lt;encoding&gt;UTF-8&lt;/encoding&gt;</span><br><span class="line">                &lt;/configuration&gt;</span><br><span class="line">            &lt;/plugin&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;/plugins&gt;</span><br><span class="line">    &lt;/build&gt;</span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure><p></p><p>2：配置 application.yml<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"># default port</span><br><span class="line">server:</span><br><span class="line">  port: 8888</span><br><span class="line">spring:</span><br><span class="line">  cloud:</span><br><span class="line">    config:</span><br><span class="line">      server:</span><br><span class="line">        svn:</span><br><span class="line">          # svn 配置仓库地址</span><br><span class="line">          uri: https://repo.xujiuming.com/svn/ming/trunk/confDir</span><br><span class="line">          # svn 访问账户</span><br><span class="line">          username: ming</span><br><span class="line">          # svn 访问密码</span><br><span class="line">          password: mingpwd</span><br><span class="line">          # 这个设置是访问时候没有带label默认的label  用处不大</span><br><span class="line">          default-label: trunk</span><br><span class="line">  # 使用 svn 作仓库  必须要填写</span><br><span class="line">  profiles:</span><br><span class="line">    active: subversion</span><br><span class="line"></span><br><span class="line"># 访问控制</span><br><span class="line">security:</span><br><span class="line">  user:</span><br><span class="line">    name: ming</span><br><span class="line">    password: ming</span><br><span class="line">encrypt:</span><br><span class="line">  # rsa 密钥 设定 使用resources 下的 configServer.keystore</span><br><span class="line">  key-store:</span><br><span class="line">    location: configServer.keystore</span><br><span class="line">    alias: configServer</span><br><span class="line">    #  生成 密钥时候的密码</span><br><span class="line">    password: ming2</span><br><span class="line">    # 生成 密钥时候的签名</span><br><span class="line">    secret: ming1</span><br></pre></td></tr></table></figure><p></p><p>3：生成敏感数据密钥包<br>必须替换jce相关jar 或者直接使用我选择的docker 镜像 那个镜像是替换好jce相关jar包的</p><p>因为 config server 使用的是aes256 加密 所以必须替换jce 相关jar<br>就算使用rsa 加密方式 也是需要jce相关jar 的  因为他还是用的aes256加密<br>rsa 加密方式配置</p><ul><li>生成 rsa 密钥包  直接到控制台执行即可  使用的是jdk 的keytool <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">configserver rsa 秘钥生成命令 有效时间 10000天</span><br><span class="line">keytool -genkeypair -alias configServer -keyalg RSA \</span><br><span class="line">-dname &quot;CN=ming,OU=ming,O=ming,L=ming,ST=ming,C=ming&quot; \</span><br><span class="line">-keypass ming1 \</span><br><span class="line">-keystore configServer.keystore \</span><br><span class="line">-storepass ming2 \</span><br><span class="line">-validity 10000 \</span><br></pre></td></tr></table></figure></li></ul><p>配置中使用 数据加密</p><ul><li>使用加密字符串替换 原始字符串<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">访问 configServer的 &#123;[/encrypt],methods=[POST]&#125; 接口  参数为要加密的字符串  返回加密字符串</span><br><span class="line">例如 加密前 字符串a   通过接口获取加密后字符串 b</span><br><span class="line">在a配置的地方 使用 &#123;cipher&#125;b  替换a  即可 </span><br><span class="line">加密前</span><br><span class="line">passwd=a</span><br><span class="line">加密后</span><br><span class="line">passwd=&#123;cipher&#125;b</span><br></pre></td></tr></table></figure></li></ul><p>将生成的configServer.keystore 文件复制到resources目录中去<br>4:配置spring boot 项目启动类<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">package com.ming;</span><br><span class="line"></span><br><span class="line">import org.springframework.boot.SpringApplication;</span><br><span class="line">import org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line">import org.springframework.cloud.config.server.EnableConfigServer;</span><br><span class="line"></span><br><span class="line">/** config server start class</span><br><span class="line"> *</span><br><span class="line"> * @author  ming</span><br><span class="line"> * @date  2017-12-06 10:08</span><br><span class="line"> * */</span><br><span class="line">@EnableConfigServer</span><br><span class="line">@SpringBootApplication</span><br><span class="line">public class StartConfigServer &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        SpringApplication.run(StartConfigServer.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>5:配置dockerfile<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">FROM docker.io/fabric8/java-alpine-openjdk8-jdk</span><br><span class="line">MAINTAINER &quot;ming&quot;</span><br><span class="line"></span><br><span class="line"># create  workspace</span><br><span class="line">RUN  mkdir /workspace</span><br><span class="line"># copy app.jar</span><br><span class="line">COPY target/configServer-1.0-SNAPSHOT.jar /workspace</span><br><span class="line"># open port</span><br><span class="line">EXPOSE 8888</span><br><span class="line"># 运行jar</span><br><span class="line">CMD  java -jar /workspace/configServer-1.0-SNAPSHOT.jar</span><br></pre></td></tr></table></figure><p></p><p>6:打包成docker<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mvn package </span><br><span class="line">sudo docker build -t config-server-ming:1.0.0 .</span><br></pre></td></tr></table></figure><p></p><p>7：启动容器<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker run -d -p 8888:8888 --name mingconfigserver config-server-ming:1.0.0</span><br></pre></td></tr></table></figure><p></p><p>8：访问配置<br>在svn仓库中建立ming/config-dev.yaml<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">name: ming</span><br></pre></td></tr></table></figure><p></p><p>浏览器访问 <a href="http://localhost:8888/ming/config-dev.yaml" target="_blank" rel="noopener">http://localhost:8888/ming/config-dev.yaml</a></p><p>实例地址: <a href="https://github.com/xuxianyu/springcloud/tree/master/configServerSvn" target="_blank" rel="noopener">https://github.com/xuxianyu/springcloud/tree/master/configServerSvn</a></p><h4 id="访问配置文件url-详细解释"><a href="#访问配置文件url-详细解释" class="headerlink" title="访问配置文件url 详细解释"></a>访问配置文件url 详细解释</h4><p>参数解释:<br>1:git<br>在git仓库中目录 配置文件的目录/配置文件前缀-配置文件后缀.配置文件类型  如在svn仓库目录下的ming/app-dev.yaml master分支  那么 master就是label app就是name  profiles就是dev  path就是app-dev.yaml git配置可以通过配置 区分文件夹 不是跟svn一样 把文件夹当作label </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">name: 前缀</span><br><span class="line">profiles: 后缀</span><br><span class="line">label: 分支</span><br><span class="line">path： 完整文件名</span><br></pre></td></tr></table></figure><p>2:svn<br>在svn仓库中目录 配置文件的目录/配置文件前缀-配置文件后缀.配置文件类型  如在svn仓库目录下的ming/app-dev.yaml  那么 ming就是label app就是name  profiles就是dev  path就是app-dev.yaml<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">name: 配置文件前缀</span><br><span class="line">profiles: 配置文件后缀</span><br><span class="line">label: 文件夹目录名称</span><br><span class="line">path:配置文件全称包含.后面的类型</span><br></pre></td></tr></table></figure><p></p><p>访问properties、yaml、json格式 访问方式<br>/{name}/{profiles:.*[^-].*}<br>/{name}/{profiles}/{label:.*}<br>/{name}-{profiles}.properties<br>/{label}/{name}<br>/{profiles}.properties<br>/{name}-{profiles}.json<br>/{label}/{name}-{profiles}.json   </p><p>访问非 java适配的配置文件 只能以文本模式 读取<br>参考博客地址:<a href="http://www.voidcn.com/article/p-yhrhfyla-bqr.html" target="_blank" rel="noopener">http://www.voidcn.com/article/p-yhrhfyla-bqr.html</a><br>/{name}/{profile}/{label}/{path}</p><h4 id="实际案例"><a href="#实际案例" class="headerlink" title="实际案例"></a>实际案例</h4><p>1：java web项目启动拉取配置中心配置<br>在spring cloud 接入config server的项目中<br>bootstrap.yml 优先级最高 在一启动就会加载 在这里配置 链接config server的配置、链接配置中心的配置 等等<br>application.yml是在config client 拉取配置后才加载 如果在这里配置链接config server配置不会生效</p><p>增加pom依赖<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">   &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">   &lt;artifactId&gt;spring-cloud-starter-config&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p></p><p>配置bootstrap.yml<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line"> cloud:</span><br><span class="line">     config:</span><br><span class="line">       # 拉取后缀为dev的配置</span><br><span class="line">       profile: dev</span><br><span class="line">       # 拉取master分支的配置</span><br><span class="line">       label: master</span><br><span class="line">       username: ming</span><br><span class="line">       password: ming</span><br><span class="line">       uri: &quot;http://localhost:8888&quot;</span><br><span class="line">       #开启 以服务方式访问配置中心</span><br><span class="line">       #discovery:</span><br><span class="line">       #  enabled: true</span><br><span class="line">       #  service-id: CONFIG</span><br><span class="line">       #开启预检</span><br><span class="line">       #fail-fast: true</span><br><span class="line">       #重试参数</span><br><span class="line">       #retry:</span><br><span class="line">         #重试间隔</span><br><span class="line">         #multiplier: 2000</span><br><span class="line">         #下一个间隔</span><br><span class="line">         #initial-interval: 2000</span><br><span class="line">         #最大间隔</span><br><span class="line">         #max-interval: 5000</span><br><span class="line">         #最大重试次数</span><br><span class="line">         #max-attempts: 3</span><br><span class="line"></span><br><span class="line"> application:</span><br><span class="line">   # 拉取前缀为ming的配置</span><br><span class="line">   name: ming</span><br><span class="line">       #fail-fast: true</span><br></pre></td></tr></table></figure><p></p><p>在配置仓库配置相关配置<br>然后启动项目 打个断点 查询spring env bean 即可查看是否加载到配置中心的配置</p><p>2: docker启动 时候拉取容器环境配置<br>思路: 重写镜像的 启动命令 在启动的时候拉取配置中心的配置覆盖容器中的配置文件<br>如果配置中心设置的账户密码 需要获取配置中心 访问接口的token<br>浏览器访问一下配置输入账户密码  抓http请求包 报头中有个 Authorization: Basic xxxxxxx 报头<br>使用curl命令获取配置<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -H &quot;Authorization: Basic xxxxxxx&quot; http://configServer地址//&#123;name&#125;/&#123;profile&#125;/&#123;label&#125;/&#123;path&#125; &gt; /etc/nginx/conf.d/default.conf</span><br></pre></td></tr></table></figure><p></p><p>调整dockerfile中的默认启动命令<br>CMD 或者ENTRYPOINT  一定要用&amp;&amp;  不能使用&amp; 这个是并行执行 但是大部分容器是需要先加载完毕配置才能启动的<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ENTRYPOINT curl -H &quot;Authorization: Basic xxxxxxx&quot; http://configServer地址//&#123;name&#125;/&#123;profile&#125;/&#123;label&#125;/&#123;path&#125; &gt; /etc/nginx/conf.d/default.conf &amp;&amp; run.sh</span><br></pre></td></tr></table></figure><p></p><h4 id="总结"><a href="#总结" class="headerlink" title="总结:"></a>总结:</h4><p>总的来说 spring cloud config server基本满足需求<br>如果需要什么配置操作审计 完全可以在svn或者git操作上进行<br>如果是java项目可以通过引入 spring cloud config client jar来使用<br>非java项目 可以通过http接口获取配置信息<br>关于高可用 就是多启动几台config server 注册到注册中心就行 客户端通过注册中心去访问http接口</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;配置中心&quot;&gt;&lt;a href=&quot;#配置中心&quot; class=&quot;headerlink&quot; title=&quot;配置中心&quot;&gt;&lt;/a&gt;配置中心&lt;/h3&gt;&lt;p&gt;在分布式 环境中 配置中心是必不可少的一个组件 不管是国内的 disconf 、Apollo之类 还是spring clou
      
    
    </summary>
    
      <category term="实例" scheme="http://www.xujiuming.com/categories/%E5%AE%9E%E4%BE%8B/"/>
    
    
      <category term="实用" scheme="http://www.xujiuming.com/tags/%E5%AE%9E%E7%94%A8/"/>
    
      <category term="spring cloud" scheme="http://www.xujiuming.com/tags/spring-cloud/"/>
    
      <category term="分布式" scheme="http://www.xujiuming.com/tags/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>k8s集群暴露集群服务的各种方案的优劣</title>
    <link href="http://www.xujiuming.com/ming/c013ae57.html"/>
    <id>http://www.xujiuming.com/ming/c013ae57.html</id>
    <published>2018-02-12T00:57:52.000Z</published>
    <updated>2018-06-25T03:49:16.163Z</updated>
    
    <content type="html"><![CDATA[<p>参考文档:<br><a href="http://blog.csdn.net/liyingke112/article/details/76022267" target="_blank" rel="noopener">http://blog.csdn.net/liyingke112/article/details/76022267</a><br><a href="https://www.kubernetes.org.cn/1885.html" target="_blank" rel="noopener">https://www.kubernetes.org.cn/1885.html</a><br>k8s集群暴露服务 常见的就四种</p><h4 id="1-clusterIp"><a href="#1-clusterIp" class="headerlink" title="1: clusterIp"></a>1: clusterIp</h4><p>clusterIp就是service的ip k8s在创建service的时候 会给service一个ip 集群内部可以通过这个clusterIp访问相应的service<br>这种方式呢稍微麻烦 最终要暴露外部服务 还是要建立nginx之类的反向代理 然后再暴露出集群<br>实践:<br>这个需要在集群中的一个节点去访问<br>登陆集群中同一个命名空间的容器 直接ping 对应的clusterIp 或者直接telnet 访问clusterIp:clusterPort clusterPort就是service配置中的targetPort<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ping &lt;clusterIp&gt;</span><br><span class="line">telnet &lt;clusterIp&gt; &lt;targetPort&gt;</span><br></pre></td></tr></table></figure><p></p><h4 id="2-nodePort"><a href="#2-nodePort" class="headerlink" title="2:nodePort"></a>2:nodePort</h4><p>node在k8s中表示是一台物理机或者虚拟机 nodePort是k8s集群在创建service的时候 会在每个node上暴露出nodePort 外部可以直接通过nodeIp:nodePort访问 服务<br>这种方式 很容易实现 但是不太符合实际生产环境 因为在新开服务或者新增node的时候需要增加配置 会导致依赖一个外部的负载均衡器去分发各个node<br>配置太多了 不利于维护   nodePort模式依旧存在clusterIp 依旧可以通过第一种方式访问<br>实例:<br>配置 service<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl edit service &lt;serviceName&gt;</span><br></pre></td></tr></table></figure><p></p><p>type 为NodePort  拥有port、targetPort、nodePort<br>这个如果不是这个配置 可以修改<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">。。。</span><br><span class="line">spec:</span><br><span class="line">  clusterIP: 10.103.100.161</span><br><span class="line">  externalTrafficPolicy: Cluster</span><br><span class="line">  ports:</span><br><span class="line">  - nodePort: 30115</span><br><span class="line">    port: 8080</span><br><span class="line">    protocol: TCP</span><br><span class="line">    targetPort: 8080</span><br><span class="line">  selector:</span><br><span class="line">    run: hello-node</span><br><span class="line">  sessionAffinity: None</span><br><span class="line">  type: NodePort</span><br><span class="line">  。。。</span><br></pre></td></tr></table></figure><p></p><p>直接ping node的ip 或者直接通过telnet 访问nodeIp:nodePort<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ping &lt;nodeIp&gt;</span><br><span class="line">telnet &lt;nodeIp&gt; &lt;nodePort&gt;</span><br></pre></td></tr></table></figure><p></p><h4 id="3-loadbalance"><a href="#3-loadbalance" class="headerlink" title="3:loadbalance"></a>3:loadbalance</h4><p>必须要在支持 这个模式的云平台上才能用 基于nodePort 只不过 这个模式会请求底层云平台的服务创建一个负载均衡器 来访问<br>这种方式 要看各个云平台的支持 例如阿里云就有点坑爹 每个服务都为你申请一个负载均衡器 贵的很 而且还不如直接用nodePort模式然后自己做负载均衡来的直接 简单  </p><p>这个 哎 懒的尝试没必要 直接请求云平台的负载均衡服务 略坑 太贵 而且不好管理  建议就算了把  有用这个 不如直接使用nodePort 或者ic 或者自己维护nginx方式来做 </p><h4 id="4-ingress"><a href="#4-ingress" class="headerlink" title="4:ingress"></a>4:ingress</h4><p>这个是k8s 算是比较官方的一种解决方案了<br>大神也总结的有文档<br><a href="http://blog.csdn.net/liyingke112/article/details/77066814" target="_blank" rel="noopener">http://blog.csdn.net/liyingke112/article/details/77066814</a><br><a href="https://www.kubernetes.org.cn/1885.html" target="_blank" rel="noopener">https://www.kubernetes.org.cn/1885.html</a><br><a href="https://mritd.me/2017/03/04/how-to-use-nginx-ingress/#%E4%B8%80ingress-%E4%BB%8B%E7%BB%8D" target="_blank" rel="noopener">https://mritd.me/2017/03/04/how-to-use-nginx-ingress/#%E4%B8%80ingress-%E4%BB%8B%E7%BB%8D</a><br><a href="https://mritd.me/2016/12/06/try-traefik-on-kubernetes/" target="_blank" rel="noopener">https://mritd.me/2016/12/06/try-traefik-on-kubernetes/</a><br>比较麻烦 只有当集群大了之后 可以  小集群 需求并不大<br>主要就是 ingress 和ingress controller 、代理负载均衡器(例如nginx 之类的)<br>ingress : 配置规则的地方<br>ingress controller :将ingress中配置的规则 生成相应的配置 例如生成nginx的配置<br>负载均衡器: 例如nginx 具体分发流量的软件   ingress controller 通过ingress获取配置 自动刷新nginx中的配置 </p><h4 id="5：自定义方案"><a href="#5：自定义方案" class="headerlink" title="5：自定义方案"></a>5：自定义方案</h4><p>nginx+config server<br>用nginx 直接分发service  配置通过config server 进行刷新<br>其实跟ingress差不多 只不过 由开发去维护 这个代理作用的nginx的pod 而不是直接由k8s直接管理   因为懂nginx配置的人多  懂ingress的人并不多<br>这个方案缺点就是要配置很多不同的service的配置 比较麻烦 只能手动配置  但是 这个配合loadbalancer 就可以很不错的做到代理分发 并且屏蔽底层serviceIp变化<br>最后通过暴露nginx的nodePort去给外部服务访问<br>1:按照<a href="http://docs.kubernetes.org.cn/126.html" target="_blank" rel="noopener">http://docs.kubernetes.org.cn/126.html</a> 这个教程搭建 minikube 的hello-node 服务 这个时候可以通过nodePort 访问hello-node服务的<br>2:通过如下配置启动一个nginx-all deployment<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;kind&quot;: &quot;Deployment&quot;,</span><br><span class="line">  &quot;apiVersion&quot;: &quot;extensions/v1beta1&quot;,</span><br><span class="line">  &quot;metadata&quot;: &#123;</span><br><span class="line">    &quot;name&quot;: &quot;nginx-all&quot;,</span><br><span class="line">    &quot;namespace&quot;: &quot;default&quot;,</span><br><span class="line">    &quot;selfLink&quot;: &quot;/apis/extensions/v1beta1/namespaces/default/deployments/nginx-all&quot;,</span><br><span class="line">    &quot;uid&quot;: &quot;050be590-1b6d-11e8-a211-080027fc8712&quot;,</span><br><span class="line">    &quot;resourceVersion&quot;: &quot;45623&quot;,</span><br><span class="line">    &quot;generation&quot;: 1,</span><br><span class="line">    &quot;creationTimestamp&quot;: &quot;2018-02-27T03:19:28Z&quot;,</span><br><span class="line">    &quot;labels&quot;: &#123;</span><br><span class="line">      &quot;k8s-app&quot;: &quot;nginx-all&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;annotations&quot;: &#123;</span><br><span class="line">      &quot;deployment.kubernetes.io/revision&quot;: &quot;1&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;spec&quot;: &#123;</span><br><span class="line">    &quot;replicas&quot;: 1,</span><br><span class="line">    &quot;selector&quot;: &#123;</span><br><span class="line">      &quot;matchLabels&quot;: &#123;</span><br><span class="line">        &quot;k8s-app&quot;: &quot;nginx-all&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;template&quot;: &#123;</span><br><span class="line">      &quot;metadata&quot;: &#123;</span><br><span class="line">        &quot;name&quot;: &quot;nginx-all&quot;,</span><br><span class="line">        &quot;creationTimestamp&quot;: null,</span><br><span class="line">        &quot;labels&quot;: &#123;</span><br><span class="line">          &quot;k8s-app&quot;: &quot;nginx-all&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;spec&quot;: &#123;</span><br><span class="line">        &quot;containers&quot;: [</span><br><span class="line">          &#123;</span><br><span class="line">            &quot;name&quot;: &quot;nginx-all&quot;,</span><br><span class="line">            &quot;image&quot;: &quot;nginx:1.13.8-alpine&quot;,</span><br><span class="line">            &quot;resources&quot;: &#123;&#125;,</span><br><span class="line">            &quot;terminationMessagePath&quot;: &quot;/dev/termination-log&quot;,</span><br><span class="line">            &quot;terminationMessagePolicy&quot;: &quot;File&quot;,</span><br><span class="line">            &quot;imagePullPolicy&quot;: &quot;IfNotPresent&quot;,</span><br><span class="line">            &quot;securityContext&quot;: &#123;</span><br><span class="line">              &quot;privileged&quot;: false</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        ],</span><br><span class="line">        &quot;restartPolicy&quot;: &quot;Always&quot;,</span><br><span class="line">        &quot;terminationGracePeriodSeconds&quot;: 30,</span><br><span class="line">        &quot;dnsPolicy&quot;: &quot;ClusterFirst&quot;,</span><br><span class="line">        &quot;securityContext&quot;: &#123;&#125;,</span><br><span class="line">        &quot;schedulerName&quot;: &quot;default-scheduler&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;strategy&quot;: &#123;</span><br><span class="line">      &quot;type&quot;: &quot;RollingUpdate&quot;,</span><br><span class="line">      &quot;rollingUpdate&quot;: &#123;</span><br><span class="line">        &quot;maxUnavailable&quot;: &quot;25%&quot;,</span><br><span class="line">        &quot;maxSurge&quot;: &quot;25%&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;revisionHistoryLimit&quot;: 10,</span><br><span class="line">    &quot;progressDeadlineSeconds&quot;: 600</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;status&quot;: &#123;</span><br><span class="line">    &quot;observedGeneration&quot;: 1,</span><br><span class="line">    &quot;replicas&quot;: 1,</span><br><span class="line">    &quot;updatedReplicas&quot;: 1,</span><br><span class="line">    &quot;readyReplicas&quot;: 1,</span><br><span class="line">    &quot;availableReplicas&quot;: 1,</span><br><span class="line">    &quot;conditions&quot;: [</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;type&quot;: &quot;Available&quot;,</span><br><span class="line">        &quot;status&quot;: &quot;True&quot;,</span><br><span class="line">        &quot;lastUpdateTime&quot;: &quot;2018-02-27T03:19:29Z&quot;,</span><br><span class="line">        &quot;lastTransitionTime&quot;: &quot;2018-02-27T03:19:29Z&quot;,</span><br><span class="line">        &quot;reason&quot;: &quot;MinimumReplicasAvailable&quot;,</span><br><span class="line">        &quot;message&quot;: &quot;Deployment has minimum availability.&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;type&quot;: &quot;Progressing&quot;,</span><br><span class="line">        &quot;status&quot;: &quot;True&quot;,</span><br><span class="line">        &quot;lastUpdateTime&quot;: &quot;2018-02-27T03:19:29Z&quot;,</span><br><span class="line">        &quot;lastTransitionTime&quot;: &quot;2018-02-27T03:19:28Z&quot;,</span><br><span class="line">        &quot;reason&quot;: &quot;NewReplicaSetAvailable&quot;,</span><br><span class="line">        &quot;message&quot;: &quot;ReplicaSet \&quot;nginx-all-9bf75995b\&quot; has successfully progressed.&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>3:登陆 nginx-all容器 修改/etc/nginx/conf.d/default.conf  这一步 可以通过配合config server 来实现重启容器更新配置来实现配置的刷新</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name  localhost;</span><br><span class="line"></span><br><span class="line">    #charset koi8-r;</span><br><span class="line">    #access_log  /var/log/nginx/host.access.log  main;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        root   /usr/share/nginx/html;</span><br><span class="line">        index  index.html index.htm;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    location /test&#123;</span><br><span class="line">        # 配置 服务名称+port 不需要使用nodePort直接使用启动容器时候映射的那个port  hello-node 启动参数为-p 8080:80 所以这里使用8080 即可 </span><br><span class="line">        proxy_pass http://hello-node:8080;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    error_page   500 502 503 504  /50x.html;</span><br><span class="line">    location = /50x.html &#123;</span><br><span class="line">        root   /usr/share/nginx/html;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4：配置nginx service<br>配置 nginx service的nodePort<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl edit service  nginx-all</span><br></pre></td></tr></table></figure><p></p><p>修改配置如下 就是配置 nodePort<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;kind&quot;: &quot;Service&quot;,</span><br><span class="line">  &quot;apiVersion&quot;: &quot;v1&quot;,</span><br><span class="line">  &quot;metadata&quot;: &#123;</span><br><span class="line">    &quot;name&quot;: &quot;nginx-all&quot;,</span><br><span class="line">    &quot;namespace&quot;: &quot;default&quot;,</span><br><span class="line">    &quot;selfLink&quot;: &quot;/api/v1/namespaces/default/services/nginx-all&quot;,</span><br><span class="line">    &quot;uid&quot;: &quot;050ea702-1b6d-11e8-a211-080027fc8712&quot;,</span><br><span class="line">    &quot;resourceVersion&quot;: &quot;45659&quot;,</span><br><span class="line">    &quot;creationTimestamp&quot;: &quot;2018-02-27T03:19:28Z&quot;,</span><br><span class="line">    &quot;labels&quot;: &#123;</span><br><span class="line">      &quot;k8s-app&quot;: &quot;nginx-all&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;spec&quot;: &#123;</span><br><span class="line">    &quot;ports&quot;: [</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;name&quot;: &quot;tcp-8080-80-cvw8l&quot;,</span><br><span class="line">        &quot;protocol&quot;: &quot;TCP&quot;,</span><br><span class="line">        &quot;port&quot;: 8080,</span><br><span class="line">        &quot;targetPort&quot;: 80,</span><br><span class="line">        &quot;nodePort&quot;: 31000</span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    &quot;selector&quot;: &#123;</span><br><span class="line">      &quot;k8s-app&quot;: &quot;nginx-all&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;clusterIP&quot;: &quot;10.102.241.166&quot;,</span><br><span class="line">    &quot;type&quot;: &quot;NodePort&quot;,</span><br><span class="line">    &quot;sessionAffinity&quot;: &quot;None&quot;,</span><br><span class="line">    &quot;externalTrafficPolicy&quot;: &quot;Cluster&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;status&quot;: &#123;</span><br><span class="line">    &quot;loadBalancer&quot;: &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>6:通过nginx访问hello-node服务<br>minikube的 node ip 默认为192.168.99.100<br>访问 <a href="http://192.168.99.100:31000/test" target="_blank" rel="noopener">http://192.168.99.100:31000/test</a> 就是通过nginx代理访问了hello-node 服务  </p><h4 id="6-service-loadbalancer"><a href="#6-service-loadbalancer" class="headerlink" title="6: service loadbalancer"></a>6: service loadbalancer</h4><p>可以用一个clusterIP 共享一个ip<br>配合自定义代理可以做到一个ip 多个不同端口访问不同服务 配合nginx做代理 做到不受服务的变更 只需要一个clusterIp即可配置nginx 屏蔽底层的serviceIp变化<br>这种方案 有单点故障的隐患 和性能问题 暂时不成熟</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结:"></a>总结:</h2><p>说到底 暴露服务还是要通过k8s内部的网络去做<br>如果像我一样懒 那就选择ingress<br>当然我最终选择还是 自定义方案<br>没啥别的 就是nginx配置 之前就有  ingress的配置 特么还要我自己写 肯定选择自定义方案<br>如果是新项目 或者不偷懒 建议选择ingress方案 因为毕竟是官方的套路 很多人实践过 后续简单  自定义方案最终还是需要一个基佬去维护配置的<br>这里有个坑  就是 如果为了方便 配置 建议所有服务节点一定要有一个统一前缀  如果没有 请尽量推动各位基佬增加一个统一前缀 不然写配置 要写疯</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;参考文档:&lt;br&gt;&lt;a href=&quot;http://blog.csdn.net/liyingke112/article/details/76022267&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://blog.csdn.net/liyingke
      
    
    </summary>
    
      <category term="k8s" scheme="http://www.xujiuming.com/categories/k8s/"/>
    
    
      <category term="docker" scheme="http://www.xujiuming.com/tags/docker/"/>
    
      <category term="k8s" scheme="http://www.xujiuming.com/tags/k8s/"/>
    
      <category term="实用" scheme="http://www.xujiuming.com/tags/%E5%AE%9E%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>minikube快速搭建k8s测试环境</title>
    <link href="http://www.xujiuming.com/ming/ba1e0f81.html"/>
    <id>http://www.xujiuming.com/ming/ba1e0f81.html</id>
    <published>2018-02-11T06:30:12.000Z</published>
    <updated>2018-06-25T03:49:16.163Z</updated>
    
    <content type="html"><![CDATA[<p>有朋友问我 k8s测试环境如何快速搭建 官方推荐的是minikube<br>其实吧 阿里云上这种文档一抓一大把<br>参考文档:<a href="https://yq.aliyun.com/articles/221687" target="_blank" rel="noopener">https://yq.aliyun.com/articles/221687</a></p><h4 id="运行环境"><a href="#运行环境" class="headerlink" title="运行环境"></a>运行环境</h4><ul><li>ubuntu 16.04 至少这个版本 低了不行 没有snap</li><li>可以访问互联网<h4 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h4>0:更新系统apt包相关资源<br>需要手动调整到国内的镜像源 不然要慢死人了<br>安装snap snapd 方便后续安装kubectl<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update &amp;&amp; sudo apt upgrade </span><br><span class="line">sudo apt install snap  snapd</span><br></pre></td></tr></table></figure></li></ul><p>1：安装kubectl<br>比较懒  采用 snap(类似apt的东西) 安装kubectl<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo snap install kubectl</span><br></pre></td></tr></table></figure><p></p><p>2：安装golang<br>使用apt 安装golang<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install golang</span><br></pre></td></tr></table></figure><p></p><p>3: 安装minikube<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -Lo minikube http://kubernetes.oss-cn-hangzhou.aliyuncs.com/minikube/releases/v0.25.0/minikube-linux-amd64 &amp;&amp; chmod +x minikube &amp;&amp; sudo mv minikube /usr/local/bin/</span><br></pre></td></tr></table></figure><p></p><p>4:启动minikube<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">minikube start --registry-mirror=https://registry.docker-cn.com</span><br></pre></td></tr></table></figure><p></p><p>5:尝试kubectl是否可用<br>在启动minikube的时候 它会自动覆盖kubectl之前的链接配置 直接使用就是链接到minikube创建的k8s集群中<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get all</span><br></pre></td></tr></table></figure><p></p><p>6:打开k8s  web ui<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">minikube dashboard</span><br></pre></td></tr></table></figure><p></p><p>执行完毕后会自动弹出浏览器 如果没有 请尝试 <a href="http://192.168.99.100:30000" target="_blank" rel="noopener">http://192.168.99.100:30000</a><br>7:现在就可以在web ui中或者终端中使用kubectl操控k8s集群了<br>此集群k8s版本为1.9 </p><h4 id="总结-这个方法只能在本地快速搭建起来一套测试环境-如果是真实运行环境还是要手动的去安装-高版本的k8s-安装基本上对于一个熟悉linux的用户来说没啥难度-总的就是安装各个组件、配置各个组件-即可"><a href="#总结-这个方法只能在本地快速搭建起来一套测试环境-如果是真实运行环境还是要手动的去安装-高版本的k8s-安装基本上对于一个熟悉linux的用户来说没啥难度-总的就是安装各个组件、配置各个组件-即可" class="headerlink" title="总结: 这个方法只能在本地快速搭建起来一套测试环境 如果是真实运行环境还是要手动的去安装  高版本的k8s 安装基本上对于一个熟悉linux的用户来说没啥难度 总的就是安装各个组件、配置各个组件 即可"></a>总结: 这个方法只能在本地快速搭建起来一套测试环境 如果是真实运行环境还是要手动的去安装  高版本的k8s 安装基本上对于一个熟悉linux的用户来说没啥难度 总的就是安装各个组件、配置各个组件 即可</h4>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;有朋友问我 k8s测试环境如何快速搭建 官方推荐的是minikube&lt;br&gt;其实吧 阿里云上这种文档一抓一大把&lt;br&gt;参考文档:&lt;a href=&quot;https://yq.aliyun.com/articles/221687&quot; target=&quot;_blank&quot; rel=&quot;noop
      
    
    </summary>
    
      <category term="k8s" scheme="http://www.xujiuming.com/categories/k8s/"/>
    
    
      <category term="docker" scheme="http://www.xujiuming.com/tags/docker/"/>
    
      <category term="k8s" scheme="http://www.xujiuming.com/tags/k8s/"/>
    
  </entry>
  
</feed>
