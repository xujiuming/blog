<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[stream集合操作符笔记]]></title>
      <url>/ming/8486f105.html</url>
      <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>用了这么久的jdk8 的stream集合<br>感觉还是很吊的 特别是作统计计算、集合转化之类的操作</p><p>虽然有parallelStream 来进行并行计算 但是 不推荐这么去使用 原因如下<br>虽然有并行 但是 parallelStream 的并行数量是按照jvm的核心数量去启动的 这个时候就有点蛋疼了 如果真的需要并行 还是建议使用 threadPool去执行 而不是简单的使用 parallelStream<br>parallelStream 只是把任务并行了 但是该有的竞争状态 还是有 就是说和你使用线程池是差不多的也是要考虑竞争状态的问题</p><h4 id="常用操作符列表"><a href="#常用操作符列表" class="headerlink" title="常用操作符列表"></a>常用操作符列表</h4><table><thead><tr><th style="text-align:left">名称</th><th style="text-align:left">表达式</th><th style="text-align:left">作用</th><th style="text-align:left">备注</th></tr></thead><tbody><tr><td style="text-align:left">filter</td><td style="text-align:left">t-&gt;boolean</td><td style="text-align:left">过滤数 据</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">map</td><td style="text-align:left">t-&gt;r</td><td style="text-align:left">处理数据</td><td style="text-align:left">为每一个数据作map中的操作</td></tr><tr><td style="text-align:left">flatMap</td><td style="text-align:left">t-&gt;r.stream()</td><td style="text-align:left">处理数据并且扁平化</td><td style="text-align:left">为每个数据进行处理 并且会返回一个Stream 处理List<list>&gt; 这种数据的时候可以通过此操作扁平化内部的那个list</list></td></tr><tr><td style="text-align:left">distinct</td><td style="text-align:left">-</td><td style="text-align:left">去重并且返回一个新的stream</td><td style="text-align:left">进行数据去重的时候使用 必须是有限的stream</td></tr><tr><td style="text-align:left">sorted</td><td style="text-align:left">-</td><td style="text-align:left">排序并且返回一个新的stream</td><td style="text-align:left">进行stream排序使用 但是这个必须要是有限的stream</td></tr><tr><td style="text-align:left">peek</td><td style="text-align:left">t-&gt;void</td><td style="text-align:left">预览、执行某个不返回的操作 每次返回新的stream 避免消耗stream</td><td style="text-align:left">做一些void的操作使用</td></tr><tr><td style="text-align:left">limit</td><td style="text-align:left">-</td><td style="text-align:left">截断数据</td><td style="text-align:left">截断前x个数据 返回新的stream</td></tr><tr><td style="text-align:left">skip</td><td style="text-align:left">-</td><td style="text-align:left">跳过数据</td><td style="text-align:left">跳过前x个数据 返回新的stream</td></tr><tr><td style="text-align:left">forEach</td><td style="text-align:left">t-&gt;void</td><td style="text-align:left">迭代数据</td><td style="text-align:left">内部迭代 每啥好说的</td></tr><tr><td style="text-align:left">reduce</td><td style="text-align:left">(identity,(x,y)-&gt;result)、((x,y)-&gt;result)</td><td style="text-align:left">计数器</td><td style="text-align:left">做一些复杂的综合统计适合</td></tr><tr><td style="text-align:left">collect</td><td style="text-align:left">(void-&gt;t,r-&gt;void,r-&gt;void)、(collector)</td><td style="text-align:left">收集结果</td><td style="text-align:left">将结果收集返回给其他对象</td></tr><tr><td style="text-align:left">min</td><td style="text-align:left">(o1,o2)-&gt;o1 or o2</td><td style="text-align:left">获取最小的元素</td><td style="text-align:left">必须是有限的元素</td></tr><tr><td style="text-align:left">max</td><td style="text-align:left">(o1,o2)-&gt;o1 or o2</td><td style="text-align:left">获取最大的元素</td><td style="text-align:left">必须是有限的元素</td></tr><tr><td style="text-align:left">count</td><td style="text-align:left">-</td><td style="text-align:left">统计数量</td><td style="text-align:left">统计数量</td></tr><tr><td style="text-align:left">anyMatch</td><td style="text-align:left">t-&gt;boolean</td><td style="text-align:left">匹配</td><td style="text-align:left">只要有一个匹配就返回true</td></tr><tr><td style="text-align:left">allMatch</td><td style="text-align:left">t-&gt;boolean</td><td style="text-align:left">匹配</td><td style="text-align:left">必须所有元素匹配才返回true</td></tr><tr><td style="text-align:left">noneMatch</td><td style="text-align:left">t-&gt;boolean</td><td style="text-align:left">匹配</td><td style="text-align:left">必须所有元素不匹配返回true</td></tr><tr><td style="text-align:left">findFirst</td><td style="text-align:left">-</td><td style="text-align:left">获取第一个元素</td><td style="text-align:left">获取到第一个元素马上返回</td></tr><tr><td style="text-align:left">findAny</td><td style="text-align:left">-</td><td style="text-align:left">获取返回的元素</td></tr></tbody></table><h4 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br></pre></td><td class="code"><pre><span class="line">package com.ming;</span><br><span class="line"></span><br><span class="line">import org.junit.Test;</span><br><span class="line"></span><br><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.List;</span><br><span class="line">import java.util.Map;</span><br><span class="line">import java.util.stream.Collectors;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 测试 stream 用法</span><br><span class="line"> *</span><br><span class="line"> * @author ming</span><br><span class="line"> * @date 2018-06-26 15:45:08</span><br><span class="line"> */</span><br><span class="line">public class TestStream &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 将List&lt;T1&gt;  转换成 Map&lt;id,T1&gt;</span><br><span class="line">     *</span><br><span class="line">     * @author ming</span><br><span class="line">     * @date 2018-06-26 15:54:54</span><br><span class="line">     */</span><br><span class="line">    @Test</span><br><span class="line">    public void listToMap() &#123;</span><br><span class="line">        List&lt;T1&gt; list = new ArrayList&lt;&gt;();</span><br><span class="line">        for (int i = 0; i &lt; 3; i++) &#123;</span><br><span class="line">            list.add(new T1(&quot;id&quot; + i, &quot;name&quot; + i));</span><br><span class="line">        &#125;</span><br><span class="line">        //转换成 id 为key  T1为value的map</span><br><span class="line">        Map&lt;String, T1&gt; map = list.stream().collect(Collectors.toMap(T1::getId, t -&gt; t));</span><br><span class="line">        System.out.println(map);</span><br><span class="line">        //当出现重复值 按照 (oV, nV) -&gt; nV 来选择新的value</span><br><span class="line">        Map&lt;String, T1&gt; map1 = list.stream().collect(Collectors.toMap(T1::getId, t -&gt; t, (oV, nV) -&gt; nV));</span><br><span class="line">        System.out.println(map1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 获取List&lt;T2&gt; 中的t1的list的合集</span><br><span class="line">     *</span><br><span class="line">     * @author ming</span><br><span class="line">     * @date 2018-06-26 16:02:35</span><br><span class="line">     */</span><br><span class="line">    @Test</span><br><span class="line">    public void ListToFlatList() &#123;</span><br><span class="line">        List&lt;T2&gt; list = new ArrayList&lt;&gt;();</span><br><span class="line">        for (int i = 0; i &lt; 3; i++) &#123;</span><br><span class="line">            List&lt;T1&gt; t1List = new ArrayList&lt;&gt;();</span><br><span class="line">            for (int j = 0; j &lt; 3; j++) &#123;</span><br><span class="line">                t1List.add(new T1(&quot;id&quot; + i, &quot;name&quot; + i));</span><br><span class="line">            &#125;</span><br><span class="line">            list.add(new T2(&quot;id&quot; + i, &quot;name&quot; + i, t1List));</span><br><span class="line">        &#125;</span><br><span class="line">        List&lt;T1&gt; resultList = list.stream().flatMap(f -&gt; f.getT1List().stream()).collect(Collectors.toList());</span><br><span class="line">        System.out.println(resultList);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 将 List&lt;T3&gt;中的num进行累加计数</span><br><span class="line">     *</span><br><span class="line">     * @author ming</span><br><span class="line">     * @date 2018-06-26 16:06:24</span><br><span class="line">     */</span><br><span class="line">    @Test</span><br><span class="line">    public void numReduce() &#123;</span><br><span class="line">        List&lt;T3&gt; list = new ArrayList&lt;&gt;();</span><br><span class="line">        for (int i = 0; i &lt; 3; i++) &#123;</span><br><span class="line">            list.add(new T3(&quot;id&quot; + i, i));</span><br><span class="line">        &#125;</span><br><span class="line">        Integer countNum = list.stream().map(T3::getNum).reduce(0, (sum, item) -&gt; sum + item);</span><br><span class="line">        System.out.println(countNum);</span><br><span class="line">        Integer countNum1 = list.stream().map(T3::getNum).reduce(0, Integer::sum);</span><br><span class="line">        System.out.println(countNum1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class T1 &#123;</span><br><span class="line">    private String id;</span><br><span class="line">    private String name;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public T1() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public T1(String id, String name) &#123;</span><br><span class="line">        this.id = id;</span><br><span class="line">        this.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getId() &#123;</span><br><span class="line">        return id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setId(String id) &#123;</span><br><span class="line">        this.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getName() &#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setName(String name) &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class T2 &#123;</span><br><span class="line">    private String id;</span><br><span class="line">    private String name;</span><br><span class="line">    private List&lt;T1&gt; t1List;</span><br><span class="line"></span><br><span class="line">    public T2() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public T2(String id, String name, List&lt;T1&gt; t1List) &#123;</span><br><span class="line">        this.id = id;</span><br><span class="line">        this.name = name;</span><br><span class="line">        this.t1List = t1List;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getId() &#123;</span><br><span class="line">        return id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setId(String id) &#123;</span><br><span class="line">        this.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getName() &#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setName(String name) &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public List&lt;T1&gt; getT1List() &#123;</span><br><span class="line">        return t1List;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setT1List(List&lt;T1&gt; t1List) &#123;</span><br><span class="line">        this.t1List = t1List;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class T3 &#123;</span><br><span class="line">    private String id;</span><br><span class="line">    private Integer num;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public T3() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public T3(String id, Integer num) &#123;</span><br><span class="line">        this.id = id;</span><br><span class="line">        this.num = num;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getId() &#123;</span><br><span class="line">        return id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setId(String id) &#123;</span><br><span class="line">        this.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Integer getNum() &#123;</span><br><span class="line">        return num;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setNum(Integer num) &#123;</span><br><span class="line">        this.num = num;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>jdk8 出了很多实用的功能 这个stream只是其中之一  算是常用的 在大多数 集合转换、数据计算类型的操作中 用stream 操作会节省很多代码 而且看起来容易理解 并且性能还稍高一点</p>]]></content>
      
        <categories>
            
            <category> 笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
            <tag> stream计算 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[log4j2通过socket发送日志到elk平台]]></title>
      <url>/ming/b83d1b10.html</url>
      <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>尝试过很多 spring cloud中日志的方案 好多还是需要 集群的支持<br>但是现在公司还没有那么吊的基础设施 那么 这个时候 就需要 项目能够自己直接通过tcp或者udp直接投递日志到elk或者生成日志文件去采集了<br>但是 项目是使用docker 去部署在swarm或者k8s中 这个时候 生成日志文件 相对来说有点扯淡<br>但是公司的swarm集群又没有办法采集到标准输出和错误输出 那么就需要项目自己去投递日志到elk或者队列中让elk去接受了<br>由于时间较为紧急 直接采用log4j2的socketAppender 来投递日志 使用自定义jsonLayout去格式化 并且适配logstash</p><h4 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h4><h5 id="编写jsonLayout"><a href="#编写jsonLayout" class="headerlink" title="编写jsonLayout"></a>编写jsonLayout</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br></pre></td><td class="code"><pre><span class="line">package com.ming.log;</span><br><span class="line"></span><br><span class="line">import com.fasterxml.jackson.core.JsonProcessingException;</span><br><span class="line">import com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line">import org.apache.commons.lang3.time.DateFormatUtils;</span><br><span class="line">import org.apache.logging.log4j.core.Layout;</span><br><span class="line">import org.apache.logging.log4j.core.LogEvent;</span><br><span class="line">import org.apache.logging.log4j.core.config.Configuration;</span><br><span class="line">import org.apache.logging.log4j.core.config.Node;</span><br><span class="line">import org.apache.logging.log4j.core.config.plugins.*;</span><br><span class="line">import org.apache.logging.log4j.core.layout.AbstractStringLayout;</span><br><span class="line">import org.apache.logging.log4j.core.layout.PatternLayout;</span><br><span class="line">import org.apache.logging.log4j.core.layout.PatternSelector;</span><br><span class="line">import org.apache.logging.log4j.core.pattern.RegexReplacement;</span><br><span class="line"></span><br><span class="line">import java.io.File;</span><br><span class="line">import java.nio.charset.Charset;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * boss json格式日志</span><br><span class="line"> * &lt;p&gt;</span><br><span class="line"> * 配合elk的配置 使用</span><br><span class="line"> * 原作者文章地址: https://blog.csdn.net/lnkToKing/article/details/79563460</span><br><span class="line"> *</span><br><span class="line"> * @author ming</span><br><span class="line"> * @date 2018-06-22 10:59:56</span><br><span class="line"> */</span><br><span class="line">@Plugin(name = &quot;MingJsonPatternLayout&quot;, category = Node.CATEGORY, elementType = Layout.ELEMENT_TYPE, printObject = true)</span><br><span class="line">public class MingJsonPatternLayout extends AbstractStringLayout &#123;</span><br><span class="line">    /**</span><br><span class="line">     * 项目路径</span><br><span class="line">     */</span><br><span class="line">    private static String PROJECT_PATH;</span><br><span class="line"></span><br><span class="line">    private PatternLayout patternLayout;</span><br><span class="line"></span><br><span class="line">    private String projectName;</span><br><span class="line">    private String logType;</span><br><span class="line"></span><br><span class="line">    static &#123;</span><br><span class="line">        PROJECT_PATH = new File(&quot;&quot;).getAbsolutePath();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private BossJsonPatternLayout(Configuration config, RegexReplacement replace, String eventPattern,</span><br><span class="line">                                  PatternSelector patternSelector, Charset charset, boolean alwaysWriteExceptions,</span><br><span class="line">                                  boolean noConsoleNoAnsi, String headerPattern, String footerPattern, String projectName, String logType) &#123;</span><br><span class="line">        super(config, charset,</span><br><span class="line">                PatternLayout.createSerializer(config, replace, headerPattern, null, patternSelector, alwaysWriteExceptions,</span><br><span class="line">                        noConsoleNoAnsi),</span><br><span class="line">                PatternLayout.createSerializer(config, replace, footerPattern, null, patternSelector, alwaysWriteExceptions,</span><br><span class="line">                        noConsoleNoAnsi));</span><br><span class="line"></span><br><span class="line">        this.projectName = projectName;</span><br><span class="line">        this.logType = logType;</span><br><span class="line">        this.patternLayout = PatternLayout.newBuilder()</span><br><span class="line">                .withPattern(eventPattern)</span><br><span class="line">                .withPatternSelector(patternSelector)</span><br><span class="line">                .withConfiguration(config)</span><br><span class="line">                .withRegexReplacement(replace)</span><br><span class="line">                .withCharset(charset)</span><br><span class="line">                .withAlwaysWriteExceptions(alwaysWriteExceptions)</span><br><span class="line">                .withNoConsoleNoAnsi(noConsoleNoAnsi)</span><br><span class="line">                .withHeader(headerPattern)</span><br><span class="line">                .withFooter(footerPattern)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String toSerializable(LogEvent event) &#123;</span><br><span class="line">        //在这里处理日志内容</span><br><span class="line">        String message = patternLayout.toSerializable(event);</span><br><span class="line">        String jsonStr = new JsonLoggerInfo(projectName, message, event.getLevel().name(), logType, event.getTimeMillis()).toString();</span><br><span class="line">        return jsonStr + &quot;\n&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @PluginFactory</span><br><span class="line">    public static BossJsonPatternLayout createLayout(</span><br><span class="line">            @PluginAttribute(value = &quot;pattern&quot;, defaultString = PatternLayout.DEFAULT_CONVERSION_PATTERN) final String pattern,</span><br><span class="line">            @PluginElement(&quot;PatternSelector&quot;) final PatternSelector patternSelector,</span><br><span class="line">            @PluginConfiguration final Configuration config,</span><br><span class="line">            @PluginElement(&quot;Replace&quot;) final RegexReplacement replace,</span><br><span class="line">            // LOG4J2-783 use platform default by default, so do not specify defaultString for charset</span><br><span class="line">            @PluginAttribute(value = &quot;charset&quot;) final Charset charset,</span><br><span class="line">            @PluginAttribute(value = &quot;alwaysWriteExceptions&quot;, defaultBoolean = true) final boolean alwaysWriteExceptions,</span><br><span class="line">            @PluginAttribute(value = &quot;noConsoleNoAnsi&quot;, defaultBoolean = false) final boolean noConsoleNoAnsi,</span><br><span class="line">            @PluginAttribute(&quot;header&quot;) final String headerPattern,</span><br><span class="line">            @PluginAttribute(&quot;footer&quot;) final String footerPattern,</span><br><span class="line">            @PluginAttribute(&quot;projectName&quot;) final String projectName,</span><br><span class="line">            @PluginAttribute(&quot;logType&quot;) final String logType) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        return new BossJsonPatternLayout(config, replace, pattern, patternSelector, charset,</span><br><span class="line">                alwaysWriteExceptions, noConsoleNoAnsi, headerPattern, footerPattern, projectName, logType);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 输出的日志内容</span><br><span class="line">     */</span><br><span class="line">    public static class JsonLoggerInfo &#123;</span><br><span class="line">        /**</span><br><span class="line">         * 项目名</span><br><span class="line">         */</span><br><span class="line">        private String projectName;</span><br><span class="line">        /**</span><br><span class="line">         * 项目目录路径</span><br><span class="line">         */</span><br><span class="line">        private String projectPath;</span><br><span class="line">        /**</span><br><span class="line">         * 日志信息</span><br><span class="line">         */</span><br><span class="line">        private String message;</span><br><span class="line">        /**</span><br><span class="line">         * 日志级别</span><br><span class="line">         */</span><br><span class="line">        private String level;</span><br><span class="line">        /**</span><br><span class="line">         * 日志分类</span><br><span class="line">         */</span><br><span class="line">        private String logType;</span><br><span class="line">        /**</span><br><span class="line">         * 日志时间</span><br><span class="line">         */</span><br><span class="line">        private String time;</span><br><span class="line"></span><br><span class="line">        public JsonLoggerInfo(String projectName, String message, String level, String logType, long timeMillis) &#123;</span><br><span class="line">            this.projectName = projectName;</span><br><span class="line">            this.projectPath = PROJECT_PATH;</span><br><span class="line">            this.message = message;</span><br><span class="line">            this.level = level;</span><br><span class="line">            this.logType = logType;</span><br><span class="line">            this.time = DateFormatUtils.format(timeMillis, &quot;yyyy-MM-dd HH:mm:ss.SSS&quot;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public String getProjectName() &#123;</span><br><span class="line">            return projectName;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public String getProjectPath() &#123;</span><br><span class="line">            return projectPath;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public String getMessage() &#123;</span><br><span class="line">            return message;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public String getLevel() &#123;</span><br><span class="line">            return level;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public String getLogType() &#123;</span><br><span class="line">            return logType;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public String getTime() &#123;</span><br><span class="line">            return time;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        @Override</span><br><span class="line">        public String toString() &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                return new ObjectMapper().writeValueAsString(this);</span><br><span class="line">            &#125; catch (JsonProcessingException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="配置log4j2-xml"><a href="#配置log4j2-xml" class="headerlink" title="配置log4j2.xml"></a>配置log4j2.xml</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!-- monitorInterval=&quot;60&quot;表示每60秒配置文件会动态加载一次。在程序运行过程中，如果修改配置文件，程序会随之改变。 --&gt;</span><br><span class="line">&lt;configuration status=&quot;warn&quot; monitorInterval=&quot;1&quot;&gt;</span><br><span class="line">    &lt;!-- 定义通用的属性 --&gt;</span><br><span class="line">    &lt;Properties&gt;</span><br><span class="line">        &lt;Property name=&quot;PROJECT_NAME&quot;&gt;ming&lt;/Property&gt;</span><br><span class="line">        &lt;Property name=&quot;ELK_LOG_PATTERN&quot;&gt;%d&#123;yyyy-MM-dd HH:mm:ss&#125; %-5p  thread[%thread] %l  %msg %n&lt;/Property&gt;</span><br><span class="line">    &lt;/Properties&gt;</span><br><span class="line"></span><br><span class="line">    &lt;appenders&gt;</span><br><span class="line">        &lt;!--测试环境 elk的logstash 入口--&gt;</span><br><span class="line">        &lt;Socket name=&quot;logstash&quot; host=&quot;&lt;logstash-ip&gt;&quot; port=&quot;&lt;logstash-port&gt;&quot; protocol=&quot;TCP&quot;&gt;</span><br><span class="line">            &lt;MingJsonPatternLayout pattern=&quot;$&#123;ELK_LOG_PATTERN&#125;&quot; projectName=&quot;$&#123;PROJECT_NAME&#125;&quot; logType=&quot;ming&quot; /&gt;</span><br><span class="line">        &lt;/Socket&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/appenders&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;Loggers&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- 配置项目的 日志等级输出 --&gt;</span><br><span class="line">        &lt;root level=&quot;DEBUG&quot;&gt;</span><br><span class="line">            &lt;!-- 通过tcp 传输到logstash--&gt;</span><br><span class="line">            &lt;appender-ref ref=&quot;logstash&quot;/&gt;</span><br><span class="line">        &lt;/root&gt;</span><br><span class="line">    &lt;/Loggers&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure>
<p>替换xml中 <logstash-ip> <logstash-port>为自己的 logstash ip和port</logstash-port></logstash-ip></p>
<h5 id="配置-logstash"><a href="#配置-logstash" class="headerlink" title="配置 logstash"></a>配置 logstash</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">input &#123;</span><br><span class="line">    #开启远程输入日志服务</span><br><span class="line">    tcp &#123;</span><br><span class="line">        port =&gt; &quot;&lt;logstash-port&gt;&quot;</span><br><span class="line">        mode =&gt; &quot;server&quot;</span><br><span class="line">        type =&gt; &quot;log4j2&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">filter &#123;</span><br><span class="line">    #将日志转成json对象</span><br><span class="line">    json &#123;</span><br><span class="line">        source =&gt; &quot;message&quot;</span><br><span class="line">    &#125;</span><br><span class="line">    #将远程客户端的日志时间设置为插入时间，不设置默认为当前系统时间，可能会存在时间误差</span><br><span class="line">    date &#123;</span><br><span class="line">        match =&gt; [&quot;time&quot;, &quot;yyyy-MM-dd HH:mm:ss.SSS&quot;]</span><br><span class="line">        remove_field =&gt; [&quot;time&quot;]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">output &#123;</span><br><span class="line">    elasticsearch &#123;</span><br><span class="line">        hosts =&gt; [&quot;&lt;es-ip&gt;:&lt;es-port&gt;&quot;]</span><br><span class="line">        index  =&gt; &quot;application-%&#123;+YYYY.MM.dd&#125;&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>替换上面配置中的<logstash-port>(和log4j2中port保持一致)、<es-ip>、<es-port>(默认为9200)<br>修改后重启logstash 启动配置 即可</es-port></es-ip></logstash-port></p>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>其实最终是期望 项目直接输出标准输出和错误输出 由swarm或者k8s直接统一采集 标准输出和错误输出 这样 又避免了生成实际文件 有简化了项目的配置<br>这个直接使用socketAppender投递日志存在缺陷 一是socket比较简略 如果追求高性能需要自己重写 socketAppender 二个 需要logstash的解析和log4j2中的Layout进行匹配<br>否则 输出的日志 一坨翔</p>]]></content>
      
        <categories>
            
            <category> 实战 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> -log4j2 -socket -elk </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[feign切换访问http接口的实现]]></title>
      <url>/ming/47a3a555.html</url>
      <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>由于feign底层默认使用 jdk的UrlConnection来发送http请求<br>没有连接池之类的 很麻烦 而且bug很多 性能也差</p><p>经过查看文档和网络上大佬们的博客 发现可以使用 常用的http工具包去替换 如apache的httpClient 、okHttp等<br>Spring Cloud从Brixtion.SR5版本开始支持这种切换feign底层访问http的实现</p><h4 id="apache-httpClient"><a href="#apache-httpClient" class="headerlink" title="apache httpClient"></a>apache httpClient</h4><p>使用apache 的http client 作为feign底层发起http请求的实现</p><h5 id="增加pom-中feign-httpClient依赖"><a href="#增加pom-中feign-httpClient依赖" class="headerlink" title="增加pom 中feign httpClient依赖"></a>增加pom 中feign httpClient依赖</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--使用 feign httpclient --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.netflix.feign&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;feign-httpclient&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;8.17.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>
<h5 id="开启-feign的httpClient"><a href="#开启-feign的httpClient" class="headerlink" title="开启 feign的httpClient"></a>开启 feign的httpClient</h5><p>配置bootstrap.yaml<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># feign 设置</span><br><span class="line">feign:</span><br><span class="line">  httpclient:</span><br><span class="line">    enabled: true</span><br></pre></td></tr></table></figure><p></p>
<h4 id="okHttp"><a href="#okHttp" class="headerlink" title="okHttp"></a>okHttp</h4><p>使用okHttp来作为feign发起请求的实现 </p>
<h5 id="增加pom中-feign-okHttp的依赖"><a href="#增加pom中-feign-okHttp的依赖" class="headerlink" title="增加pom中 feign okHttp的依赖"></a>增加pom中 feign okHttp的依赖</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;io.github.openfeign&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;feign-okhttp&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;9.7.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>
<h5 id="开启feign的okHttp"><a href="#开启feign的okHttp" class="headerlink" title="开启feign的okHttp"></a>开启feign的okHttp</h5><p>配置bootstrap.yaml<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># feign 设置</span><br><span class="line">feign:</span><br><span class="line">  okhttp:</span><br><span class="line">    enabled: true</span><br></pre></td></tr></table></figure><p></p>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>feign 坑还是很多的  这个使用默认的jdk的urlConnection 实现 会出现一些不好理解的异常  而且性能很低<br>切换成httpClient 或者okHttp 可以使用一些优化来增加性能 如连接池之类的<br>至于选择httpClient还是okHttp 看情况吧  没有测试过<br>spring io platform 里面都有 依赖的版本  看项目原本是啥 就用啥</p>]]></content>
      
        <categories>
            
            <category> 实战 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> -spring cloud - feign - http </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[工作linux系统初始化]]></title>
      <url>/ming/fbab8e0.html</url>
      <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>由于强迫症 在工作和学习的时候 必须要用linux 但是linux桌面真的令人为难<br>用了n多版本的linux 什么arch、manjaro、centos系列的、debian系列的等等<br>最后还是觉得ubuntu用来做工作的系统最简单合适 而且少折腾</p><h4 id="初始化常用软件及工具"><a href="#初始化常用软件及工具" class="headerlink" title="初始化常用软件及工具"></a>初始化常用软件及工具</h4><h5 id="初始化额外的工具"><a href="#初始化额外的工具" class="headerlink" title="初始化额外的工具"></a>初始化额外的工具</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#安装tmux</span><br><span class="line">sudo apt install tmux</span><br><span class="line">#安装 net tools </span><br><span class="line">sudo apt install net-tools </span><br><span class="line">#安装 traceroute</span><br><span class="line">sudo apt install traceroute </span><br><span class="line">#安装vim</span><br><span class="line">sudo apt install vim </span><br><span class="line">#安装google 浏览器</span><br><span class="line">sudo apt install chromium-browser</span><br></pre></td></tr></table></figure>
<h5 id="笔记所需的资源"><a href="#笔记所需的资源" class="headerlink" title="笔记所需的资源"></a>笔记所需的资源</h5><p><a href="https://www.xujiuming.com/ming-asset/work-linux-tar.tar.gz">笔记所需资源tar包</a></p>
<h5 id="网易云音乐"><a href="#网易云音乐" class="headerlink" title="网易云音乐"></a>网易云音乐</h5><p>写代码  不听点音乐 哪里来的干劲<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#snap 安装网易云音乐</span><br><span class="line">sudo snap install netease-music --devmode --beta</span><br></pre></td></tr></table></figure><p></p>
<h5 id="初始化shadowsocks"><a href="#初始化shadowsocks" class="headerlink" title="初始化shadowsocks"></a>初始化shadowsocks</h5><p>科学上网必备软件  不解释<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">#安装pip</span><br><span class="line">sudo apt install python3-pip</span><br><span class="line">#安装sslocal</span><br><span class="line">sudo pip3 install shadowsocks</span><br><span class="line">#ss 配置</span><br><span class="line">echo &apos;&#123;</span><br><span class="line">    &quot;server&quot;:&quot;地址&quot;,</span><br><span class="line">    &quot;server_port&quot;:端口,</span><br><span class="line">    &quot;local_address&quot;:&quot;127.0.0.1&quot;,</span><br><span class="line">    &quot;local_port&quot;:1080,</span><br><span class="line">    &quot;password&quot;:&quot;密码&quot;,</span><br><span class="line">    &quot;timeout&quot;:3000,</span><br><span class="line">    &quot;method&quot;:&quot;aes-256-cfb&quot;</span><br><span class="line">&#125;&apos; &gt; ss.json</span><br></pre></td></tr></table></figure><p></p>
<h5 id="初始化docker"><a href="#初始化docker" class="headerlink" title="初始化docker"></a>初始化docker</h5><p>docker 安装一些 数据库啊之类的软件 还是很方便的  而且docker技术 现在应该是每个工程师必备的技能了 不会简直说不过去<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#安装docker</span><br><span class="line">sudo apt install docker docker.io</span><br><span class="line">#初始化docker 加速配置</span><br><span class="line">sudo mkdir -p /etc/docker</span><br><span class="line">sudo tee /etc/docker/daemon.json &lt;&lt;-&apos;EOF&apos;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [&quot;https://o4omo0yw.mirror.aliyuncs.com&quot;]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure><p></p>
<h5 id="初始化java相关环境"><a href="#初始化java相关环境" class="headerlink" title="初始化java相关环境"></a>初始化java相关环境</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#安装sdk man  安装 jvm相关工具 </span><br><span class="line">curl -s &quot;https://get.sdkman.io&quot; | bash</span><br><span class="line">source &quot;$HOME/.sdkman/bin/sdkman-init.sh&quot;</span><br><span class="line">sdk version</span><br><span class="line">sdk install java</span><br><span class="line">sdk install maven </span><br><span class="line">sdk install groovy </span><br><span class="line">sdk install gradle</span><br></pre></td></tr></table></figure>
<h5 id="初始化wps"><a href="#初始化wps" class="headerlink" title="初始化wps"></a>初始化wps</h5><p>ubuntu 的liboffice 其实用起来还行就是有点丑  但是有更加好的选择 wps  良心软件 对linux支持很不错<br>就是安装过程略麻烦  后面有时间 可以考虑打包成snap的格式使用</p>
<h6 id="下载wps官方deb包"><a href="#下载wps官方deb包" class="headerlink" title="下载wps官方deb包"></a>下载wps官方deb包</h6><p>资源tar包中包含</p>
<p>WPS官方网站 ：<a href="http://linux.wps.cn/" target="_blank" rel="noopener">http://linux.wps.cn/</a> （区分64位、32位）   </p>
<h6 id="安装-libpng12依赖"><a href="#安装-libpng12依赖" class="headerlink" title="安装 libpng12依赖"></a>安装 libpng12依赖</h6><p>这个依赖是libpng-12.0。不过这个在默认的apt 仓库里没有。所以需要手动下载一下。   </p>
<p>资源tar包中包含 </p>
<p>或者取官方下载 地址：<a href="https://packages.debian.org/zh-cn/wheezy/amd64/libpng12-0/download" target="_blank" rel="noopener">https://packages.debian.org/zh-cn/wheezy/amd64/libpng12-0/download</a><br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo dpkg -i libpng12-0_1.2.49-1+deb7u2_amd64.deb</span><br></pre></td></tr></table></figure><p></p>
<h6 id="安装wps"><a href="#安装wps" class="headerlink" title="安装wps"></a>安装wps</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo dpkg -i &lt;wps&gt;.deb</span><br></pre></td></tr></table></figure>
<h6 id="安装wps-需要的字体"><a href="#安装wps-需要的字体" class="headerlink" title="安装wps 需要的字体"></a>安装wps 需要的字体</h6><p>资源tar包中包含  </p>
<p>下载该字体，解压后将整个wps_symbol_fonts目录拷贝到 /usr/share/fonts/ 目录下<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#1.权限设置,执行命令如下 </span><br><span class="line">sudo cd /usr/share/fonts/ </span><br><span class="line">sudo chmod 755 wps_symbol_fonts </span><br><span class="line">sudo cd /usr/share/fonts/wps_symbol_fonts </span><br><span class="line">sudo chmod 644 * </span><br><span class="line">#2.生成缓存配置信息 </span><br><span class="line">sudo cd /usr/share/fonts/wps_symbol_fonts </span><br><span class="line">sudo mkfontdir </span><br><span class="line">sudo mkfontscale </span><br><span class="line">sudo fc-cache</span><br></pre></td></tr></table></figure><p></p>
<h5 id="输入法初始化"><a href="#输入法初始化" class="headerlink" title="输入法初始化"></a>输入法初始化</h5><p>这里使用sogou的deb包来安装 当然也可以根据arch的wiki上 安装sunpinyin或者googlepinyin之类的   </p>
<h6 id="安装fcitx输入法框架"><a href="#安装fcitx输入法框架" class="headerlink" title="安装fcitx输入法框架"></a>安装fcitx输入法框架</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#安装fcitx 组件 如果不行那么在商店中把所有呆fcitx的软件安装</span><br><span class="line">sudo apt install fcitx fcitx-configtool </span><br><span class="line">#设置 fcitx相关配置</span><br><span class="line">echo &apos;</span><br><span class="line">#fcitx</span><br><span class="line">export GTK_IM_MODULE=fcitx </span><br><span class="line">export QT_IM_MODULE=fcitx </span><br><span class="line">export XMODIFIERS=&quot;@im=fcitx&quot;</span><br><span class="line">&apos; &gt;&gt; ~/.xprofile</span><br></pre></td></tr></table></figure>
<h6 id="安装sogou输入法"><a href="#安装sogou输入法" class="headerlink" title="安装sogou输入法"></a>安装sogou输入法</h6><p>资源tar包中包含</p>
<p>搜狗官方地址: <a href="https://pinyin.sogou.com/linux/?r=pinyin" target="_blank" rel="noopener">https://pinyin.sogou.com/linux/?r=pinyin</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo dpkg -i sogoupinyin_2.2.0.0108_amd64.deb</span><br></pre></td></tr></table></figure>
<h5 id="初始化-oss-browser"><a href="#初始化-oss-browser" class="headerlink" title="初始化 oss-browser"></a>初始化 oss-browser</h5><p>下载oss-browser压缩包</p>
<p>资源tar包中包含</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 安装 依赖 </span><br><span class="line">sudo apt install libgconf2-4</span><br></pre></td></tr></table></figure>
<h5 id="初始化oss-ftp"><a href="#初始化oss-ftp" class="headerlink" title="初始化oss-ftp"></a>初始化oss-ftp</h5><p>下载oss-ftp压缩包</p>
<p>资源tar包中包含</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#安装gtk 依赖</span><br><span class="line">sudo  apt install -y python-gtk2</span><br></pre></td></tr></table></figure>
<h5 id="无法使用脚本初始化的软件"><a href="#无法使用脚本初始化的软件" class="headerlink" title="无法使用脚本初始化的软件"></a>无法使用脚本初始化的软件</h5><h6 id="开发工具"><a href="#开发工具" class="headerlink" title="开发工具"></a>开发工具</h6><p>使用idea系列的全家桶<br>安装 toolbox来管理idea系列的全家桶</p>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>由于我是java开发 我的工作系统肯定最主要就是java以及相关的如maven、gradle、groovy、springbootcli之类的<br>其实把如果真的想折腾linux 建议还是arch  毕竟瞎折腾<br>但是工作还是稳一点 毕竟ubuntu做了这么多年的桌面linux</p>]]></content>
      
        <categories>
            
            <category> 实战 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> -linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[springboot-mvc的messageConverter处理]]></title>
      <url>/ming/3174607.html</url>
      <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>最近项目中通过feign调用内部服务和其他系统服务猛然增多<br>在messageConverter这一环节出现n多问题<br>什么xml解析gg<br>什么json 时间格式解析gg<br>什么乱七八糟的骚格式的数据解析gg<br>导致最近一直在作在messageConverter这一块的处理<br>但是feign 的在messageConverter 有一部分是从spring mvc 的在messageConverter列表中获取的<br>所以说总的来说 是要处理spring mvc中在messageConverter的维护</p><h4 id="spring-boot消息转换器配置"><a href="#spring-boot消息转换器配置" class="headerlink" title="spring boot消息转换器配置"></a>spring boot消息转换器配置</h4><p>spring boot 的mvc配置 优先使用 继承WebMvcConfigurerAdapter 方式<br>这样既可以拥有 大量的默认配置 也可以在一定程度上自定义配置</p><h5 id="重写configureMessageConverters"><a href="#重写configureMessageConverters" class="headerlink" title="重写configureMessageConverters"></a>重写configureMessageConverters</h5><ul><li>无法保证顺序 也不能清理其他的消息转换器<br>重写这个方法 可以添加自己编写的 messageConverter 到 默认的messageConverter列表中<br>messageConverter如何编写 直接参考 AbstractHttpMessageConverter的下层实现即可<br>这里使用MappingJackson2HttpMessageConverter作为演示<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">import com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line">import com.ming.core.utils.SpringBeanManagerUtils;</span><br><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line">import org.springframework.http.converter.HttpMessageConverter;</span><br><span class="line">import org.springframework.http.converter.json.Jackson2ObjectMapperBuilder;</span><br><span class="line">import org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;</span><br><span class="line">import org.springframework.web.servlet.config.annotation.InterceptorRegistry;</span><br><span class="line">import org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry;</span><br><span class="line">import org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter;</span><br><span class="line"></span><br><span class="line">import java.text.DateFormat;</span><br><span class="line">import java.text.SimpleDateFormat;</span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 拦截器配置</span><br><span class="line"> *</span><br><span class="line"> * @author ming</span><br><span class="line"> * @date 2017-08-28 11点</span><br><span class="line"> */</span><br><span class="line">@Configuration</span><br><span class="line">public class WebMvcConfig extends WebMvcConfigurerAdapter &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void configureMessageConverters(List&lt;HttpMessageConverter&lt;?&gt;&gt; converters) &#123;</span><br><span class="line">        ObjectMapper mapper = SpringBeanManagerUtils.getBeanByType(Jackson2ObjectMapperBuilder.class).build();</span><br><span class="line">        // ObjectMapper为了保障线程安全性，里面的配置类都是一个不可变的对象</span><br><span class="line">        // 所以这里的setDateFormat的内部原理其实是创建了一个新的配置类</span><br><span class="line">        DateFormat dateFormat = mapper.getDateFormat();</span><br><span class="line">        mapper.setDateFormat(new SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;));</span><br><span class="line">        MappingJackson2HttpMessageConverter mappingJsonHttpMessageConverter = new MappingJackson2HttpMessageConverter(</span><br><span class="line">                mapper);</span><br><span class="line">        converters.add(mappingJsonHttpMessageConverter);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h5 id="重写extendMessageConverters"><a href="#重写extendMessageConverters" class="headerlink" title="重写extendMessageConverters"></a>重写extendMessageConverters</h5><ul>
<li>可以操控完整的 messageConverter列表 增加、删除等等<br>重写这个方法 方便控制到整个messageConverter 列表的顺序内容<br>这里示例删除所有的 messageConverter列表<br>增加一个简单的简单的FastJsonHttpMessageConverter作为mvc中 唯一一个转换器<br>保证messageConverter顺序 调整list的先后顺序 即可<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">import com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter;</span><br><span class="line">import com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line">import com.ming.core.utils.SpringBeanManagerUtils;</span><br><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line">import org.springframework.http.converter.HttpMessageConverter;</span><br><span class="line">import org.springframework.http.converter.json.Jackson2ObjectMapperBuilder;</span><br><span class="line">import org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;</span><br><span class="line">import org.springframework.web.servlet.config.annotation.InterceptorRegistry;</span><br><span class="line">import org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry;</span><br><span class="line">import org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter;</span><br><span class="line"></span><br><span class="line">import java.text.DateFormat;</span><br><span class="line">import java.text.SimpleDateFormat;</span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 拦截器配置</span><br><span class="line"> *</span><br><span class="line"> * @author ming</span><br><span class="line"> * @date 2017-08-28 11点</span><br><span class="line"> */</span><br><span class="line">@Configuration</span><br><span class="line">public class WebMvcConfig extends WebMvcConfigurerAdapter &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void extendMessageConverters(List&lt;HttpMessageConverter&lt;?&gt;&gt; converters) &#123;</span><br><span class="line">        FastJsonHttpMessageConverter fastJsonHttpMessageConverter = new FastJsonHttpMessageConverter();</span><br><span class="line">        converters.add(fastJsonHttpMessageConverter);        </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="messageConverter-详细规则"><a href="#messageConverter-详细规则" class="headerlink" title="messageConverter 详细规则"></a>messageConverter 详细规则</h4><p>spring boot 中 所有的消息转换器 需要继承 AbstractHttpMessageConverter<t>抽象类<br>根据其中的方法进行修改 达到转换效果 </t></p>
<ul>
<li>canRead()<br>判断转换器能不能将请求内容转换成java对象</li>
<li>canWrite()<br>判断转换器能不能将java对象转换成返回内容</li>
<li>read()<br>读取请求内容转换成java对象</li>
<li>write()<br>将返回的java对象写入到返回内容</li>
<li>getSupportedMediaTypes()<br>获取这个转换器支持的MediaType类型</li>
</ul>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>控制spring mvc 对于http请求的内容和响应的内容的转换 直接通过重写 messageConverter即可<br>如果只是为了增加特殊情况的处理可以直接重写configureMessageConverters在原有的messageConverter 列表中添加一个接口<br>如果需要完整控制 messageConverter的数量和顺序 那么需要重写extendMessageConverters 来达到控制messageConverter的数量和顺序  </p>
<p>feign会从spring mvc的messageConverter的列表中获取对应的messageConverter列表<br>那么这样来说 其实可以通过严格控制spring mvc的messageConverter列表来达到控制feign的messageConverter列表  </p>
<h6 id="MediaType解释"><a href="#MediaType解释" class="headerlink" title="MediaType解释"></a>MediaType解释</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">spring 中对于http contentType的一些枚举类型 类的全限定名org.springframework.http.MediaType</span><br></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 实战 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> spring boot </tag>
            
            <tag> mvc </tag>
            
            <tag> 实战 </tag>
            
            <tag> messageConverter </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[netty-传输手段笔记]]></title>
      <url>/ming/597b09c9.html</url>
      <content type="html"><![CDATA[<p>###传输案例</p><h4 id="java-oio"><a href="#java-oio" class="headerlink" title="java oio"></a>java oio</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">package com.ming;</span><br><span class="line"></span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.io.OutputStream;</span><br><span class="line">import java.net.ServerSocket;</span><br><span class="line">import java.net.Socket;</span><br><span class="line">import java.nio.charset.Charset;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 基于java 阻塞io的 服务端案例</span><br><span class="line"> *</span><br><span class="line"> * @author ming</span><br><span class="line"> * @date 2018-04-11 14:53</span><br><span class="line"> */</span><br><span class="line">public class JavaOio &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws IOException &#123;</span><br><span class="line">        new JavaOio().Start(20000);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 启动java oio 方法</span><br><span class="line">     *</span><br><span class="line">     * @param port</span><br><span class="line">     * @author ming</span><br><span class="line">     * @date 2018-04-11 14:57</span><br><span class="line">     */</span><br><span class="line">    public void Start(int port) throws IOException &#123;</span><br><span class="line">        final ServerSocket socket = new ServerSocket(port);</span><br><span class="line">        for (; ; ) &#123;</span><br><span class="line">            //接受链接</span><br><span class="line">            final Socket clientSocket = socket.accept();</span><br><span class="line">            System.out.println(&quot;accept client::&quot; + clientSocket);</span><br><span class="line">            //建立新线程执行 客户端的请求</span><br><span class="line">            new Thread(() -&gt; &#123;</span><br><span class="line">                OutputStream outputStream = null;</span><br><span class="line">                try &#123;</span><br><span class="line">                    //获取输出流</span><br><span class="line">                    outputStream = clientSocket.getOutputStream();</span><br><span class="line">                    //输出数据</span><br><span class="line">                    outputStream.write(&quot;hi ming &quot;.getBytes(Charset.forName(&quot;UTF-8&quot;)));</span><br><span class="line">                    //刷新数据</span><br><span class="line">                    outputStream.flush();</span><br><span class="line">                    clientSocket.close();</span><br><span class="line">                &#125; catch (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125; finally &#123;</span><br><span class="line">                    try &#123;</span><br><span class="line">                        outputStream.close();</span><br><span class="line">                    &#125; catch (IOException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="java-nio"><a href="#java-nio" class="headerlink" title="java nio"></a>java nio</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line">package com.ming;</span><br><span class="line"></span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.net.InetSocketAddress;</span><br><span class="line">import java.net.ServerSocket;</span><br><span class="line">import java.nio.ByteBuffer;</span><br><span class="line">import java.nio.channels.SelectionKey;</span><br><span class="line">import java.nio.channels.Selector;</span><br><span class="line">import java.nio.channels.ServerSocketChannel;</span><br><span class="line">import java.nio.channels.SocketChannel;</span><br><span class="line">import java.util.Set;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * java 实现nio 模式的服务端</span><br><span class="line"> *</span><br><span class="line"> * @author ming</span><br><span class="line"> * @date 2018-04-11 15:08</span><br><span class="line"> */</span><br><span class="line">public class JavaNio &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws IOException &#123;</span><br><span class="line">        new JavaNio().Start(20000);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 启动java nio 服务端</span><br><span class="line">     *</span><br><span class="line">     * @param port</span><br><span class="line">     * @author ming</span><br><span class="line">     * @date 2018-04-11 15:09</span><br><span class="line">     */</span><br><span class="line">    public void Start(int port) throws IOException &#123;</span><br><span class="line">        //打开 server socket channel</span><br><span class="line">        ServerSocketChannel serverSocketChannel = ServerSocketChannel.open();</span><br><span class="line">        //设置 为非阻塞队列</span><br><span class="line">        serverSocketChannel.configureBlocking(false);</span><br><span class="line">        //通过socket channel 获取socket</span><br><span class="line">        ServerSocket socket = serverSocketChannel.socket();</span><br><span class="line">        //获取socket 的地址</span><br><span class="line">        InetSocketAddress socketAddress = new InetSocketAddress(port);</span><br><span class="line">        //绑定 socket地址到socket</span><br><span class="line">        socket.bind(socketAddress);</span><br><span class="line">        //打开selector</span><br><span class="line">        Selector selector = Selector.open();</span><br><span class="line">        //将socket channel 注册到selector上</span><br><span class="line">        serverSocketChannel.register(selector, SelectionKey.OP_ACCEPT);</span><br><span class="line">        //返回客户端的消息</span><br><span class="line">        final ByteBuffer msg = ByteBuffer.wrap(&quot;hi ming &quot;.getBytes(&quot;UTF-8&quot;));</span><br><span class="line"></span><br><span class="line">        for (; ; ) &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                //阻塞等待需要处理的新事件</span><br><span class="line">                selector.select();</span><br><span class="line">            &#125; catch (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">            //获取所有连接事件的 select key</span><br><span class="line">            Set&lt;SelectionKey&gt; readyKeys = selector.selectedKeys();</span><br><span class="line">            readyKeys.forEach(key -&gt; &#123;</span><br><span class="line">                        try &#123;</span><br><span class="line">                            //检查时间 是否是一个新的 可以被接受的链接</span><br><span class="line">                            if (key.isAcceptable()) &#123;</span><br><span class="line">                                ServerSocketChannel server = (ServerSocketChannel) key.channel();</span><br><span class="line">                                SocketChannel client = server.accept();</span><br><span class="line">                                if (null == client) &#123;</span><br><span class="line">                                    return;</span><br><span class="line">                                &#125;</span><br><span class="line">                                client.configureBlocking(false);</span><br><span class="line">                                client.register(selector, SelectionKey.OP_WRITE | SelectionKey.OP_READ, msg.duplicate());</span><br><span class="line">                                System.out.println(&quot;accept from &quot; + client);</span><br><span class="line">                            &#125;</span><br><span class="line">                            //检查socket是否准备好写数据</span><br><span class="line">                            if (key.isWritable()) &#123;</span><br><span class="line">                                SocketChannel client = (SocketChannel) key.channel();</span><br><span class="line">                                ByteBuffer byteBuffer = (ByteBuffer) key.attachment();</span><br><span class="line">                                while (byteBuffer.hasRemaining()) &#123;</span><br><span class="line">                                    if (client.write(byteBuffer) == 0) &#123;</span><br><span class="line">                                        break;</span><br><span class="line">                                    &#125;</span><br><span class="line">                                &#125;</span><br><span class="line">                                client.close();</span><br><span class="line">                            &#125;</span><br><span class="line"></span><br><span class="line">                        &#125; catch (IOException e) &#123;</span><br><span class="line">                            key.cancel();</span><br><span class="line">                            try &#123;</span><br><span class="line">                                key.channel().close();</span><br><span class="line">                            &#125; catch (IOException e1) &#123;</span><br><span class="line">                                e1.printStackTrace();</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">            );</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="netty-oio"><a href="#netty-oio" class="headerlink" title="netty oio"></a>netty oio</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">package com.ming;</span><br><span class="line"></span><br><span class="line">import io.netty.bootstrap.ServerBootstrap;</span><br><span class="line">import io.netty.buffer.ByteBuf;</span><br><span class="line">import io.netty.buffer.Unpooled;</span><br><span class="line">import io.netty.channel.*;</span><br><span class="line">import io.netty.channel.oio.OioEventLoopGroup;</span><br><span class="line">import io.netty.channel.socket.SocketChannel;</span><br><span class="line">import io.netty.channel.socket.oio.OioServerSocketChannel;</span><br><span class="line">import io.netty.util.CharsetUtil;</span><br><span class="line"></span><br><span class="line">import java.net.InetSocketAddress;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * netty oio 实现</span><br><span class="line"> *</span><br><span class="line"> * @author ming</span><br><span class="line"> * @date 2018-04-16 15:56</span><br><span class="line"> */</span><br><span class="line">public class NettyOio &#123;</span><br><span class="line">    public static void main(String[] args) throws InterruptedException &#123;</span><br><span class="line">        new NettyOio().Start(20000);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * netty oio bootstrap</span><br><span class="line">     *</span><br><span class="line">     * @author ming</span><br><span class="line">     * @date 2018-04-16 15:56</span><br><span class="line">     */</span><br><span class="line">    public void Start(int port) throws InterruptedException &#123;</span><br><span class="line">        final ByteBuf byteBuf = Unpooled.unreleasableBuffer(Unpooled.copiedBuffer(&quot;hi ming &quot;, CharsetUtil.UTF_8));</span><br><span class="line">        // 使用 oio 事件循环处理</span><br><span class="line">        EventLoopGroup eventLoopGroup = new OioEventLoopGroup();</span><br><span class="line">        try &#123;</span><br><span class="line">            ServerBootstrap serverBootstrap = new ServerBootstrap();</span><br><span class="line">            serverBootstrap.group(eventLoopGroup)</span><br><span class="line">                    //使用oio 渠道</span><br><span class="line">                    .channel(OioServerSocketChannel.class)</span><br><span class="line">                    .localAddress(new InetSocketAddress(port))</span><br><span class="line">                    .childHandler(new ChannelInitializer&lt;SocketChannel&gt;() &#123;</span><br><span class="line">                        @Override</span><br><span class="line">                        protected void initChannel(SocketChannel ch) throws Exception &#123;</span><br><span class="line">                            ch.pipeline().addLast(new ChannelInboundHandlerAdapter() &#123;</span><br><span class="line">                                @Override</span><br><span class="line">                                public void channelActive(ChannelHandlerContext ctx) throws Exception &#123;</span><br><span class="line">                                    System.out.println(&quot;accept &quot; + ctx);</span><br><span class="line">                                    //输出一条信息 关闭 渠道</span><br><span class="line">                                    ctx.writeAndFlush(byteBuf.duplicate())</span><br><span class="line">                                            .addListener(ChannelFutureListener.CLOSE);</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">            //绑定服务器</span><br><span class="line">            ChannelFuture future = serverBootstrap.bind().sync();</span><br><span class="line">            future.channel().closeFuture().sync();</span><br><span class="line">        &#125; catch (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            eventLoopGroup.shutdownGracefully().sync();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="netty-nio"><a href="#netty-nio" class="headerlink" title="netty nio"></a>netty nio</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">package com.ming;</span><br><span class="line"></span><br><span class="line">import io.netty.bootstrap.ServerBootstrap;</span><br><span class="line">import io.netty.buffer.ByteBuf;</span><br><span class="line">import io.netty.buffer.Unpooled;</span><br><span class="line">import io.netty.channel.*;</span><br><span class="line">import io.netty.channel.nio.NioEventLoopGroup;</span><br><span class="line">import io.netty.channel.socket.SocketChannel;</span><br><span class="line">import io.netty.channel.socket.nio.NioServerSocketChannel;</span><br><span class="line">import io.netty.util.CharsetUtil;</span><br><span class="line"></span><br><span class="line">import java.net.InetSocketAddress;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * netty nio 实现</span><br><span class="line"> *</span><br><span class="line"> * @author ming</span><br><span class="line"> * @date 2018-04-16 16:11</span><br><span class="line"> */</span><br><span class="line">public class NettyNio &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws InterruptedException &#123;</span><br><span class="line">        new NettyNio().Start(20000);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 启动 netty nio server</span><br><span class="line">     *</span><br><span class="line">     * @author ming</span><br><span class="line">     * @date 2018-04-16 16:12</span><br><span class="line">     */</span><br><span class="line">    public void Start(int port) throws InterruptedException &#123;</span><br><span class="line">        final ByteBuf byteBuf = Unpooled.unreleasableBuffer(Unpooled.copiedBuffer(&quot;hi ming &quot;, CharsetUtil.UTF_8));</span><br><span class="line">        //使用 nio 事件循环处理器</span><br><span class="line">        EventLoopGroup eventLoopGroup = new NioEventLoopGroup();</span><br><span class="line">        try &#123;</span><br><span class="line">            ServerBootstrap serverBootstrap = new ServerBootstrap();</span><br><span class="line">            serverBootstrap.group(eventLoopGroup)</span><br><span class="line">                    //使用nio渠道</span><br><span class="line">                    .channel(NioServerSocketChannel.class)</span><br><span class="line">                    .localAddress(new InetSocketAddress(port))</span><br><span class="line">                    .childHandler(new ChannelInitializer&lt;SocketChannel&gt;() &#123;</span><br><span class="line">                        @Override</span><br><span class="line">                        protected void initChannel(SocketChannel ch) throws Exception &#123;</span><br><span class="line">                            ch.pipeline().addLast(new ChannelInboundHandlerAdapter() &#123;</span><br><span class="line">                                @Override</span><br><span class="line">                                public void channelActive(ChannelHandlerContext ctx) throws Exception &#123;</span><br><span class="line">                                    System.out.println(&quot;accept &quot; + ctx);</span><br><span class="line">                                    ctx.writeAndFlush(byteBuf.duplicate()).addListener(ChannelFutureListener.CLOSE);</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">            ChannelFuture future = serverBootstrap.bind().sync();</span><br><span class="line">            future.channel().closeFuture().sync();</span><br><span class="line">        &#125; catch (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            eventLoopGroup.shutdownGracefully().sync();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="epoll"><a href="#epoll" class="headerlink" title="epoll"></a>epoll</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">package com.ming;</span><br><span class="line"></span><br><span class="line">import io.netty.bootstrap.ServerBootstrap;</span><br><span class="line">import io.netty.buffer.ByteBuf;</span><br><span class="line">import io.netty.buffer.Unpooled;</span><br><span class="line">import io.netty.channel.*;</span><br><span class="line">import io.netty.channel.epoll.EpollEventLoopGroup;</span><br><span class="line">import io.netty.channel.epoll.EpollServerSocketChannel;</span><br><span class="line">import io.netty.channel.socket.SocketChannel;</span><br><span class="line">import io.netty.util.CharsetUtil;</span><br><span class="line"></span><br><span class="line">import java.net.InetSocketAddress;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 基于linux 的Epoll 非阻塞 方式实现的 io传输</span><br><span class="line"> *</span><br><span class="line"> * @author ming</span><br><span class="line"> * @date 2018-04-16 17:28</span><br><span class="line"> */</span><br><span class="line">public class NettyEpoll &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws InterruptedException &#123;</span><br><span class="line">        new NettyEpoll().Start(20000);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 启动 基于 epoll 的server</span><br><span class="line">     *</span><br><span class="line">     * @author ming</span><br><span class="line">     * @date 2018-04-16 17:29</span><br><span class="line">     */</span><br><span class="line">    public void Start(int port) throws InterruptedException &#123;</span><br><span class="line">        final ByteBuf byteBuf = Unpooled.unreleasableBuffer(Unpooled.copiedBuffer(&quot;hi ming &quot;, CharsetUtil.UTF_8));</span><br><span class="line">        //使用epoll</span><br><span class="line">        EventLoopGroup eventLoopGroup = new EpollEventLoopGroup();</span><br><span class="line">        try &#123;</span><br><span class="line">            ServerBootstrap serverBootstrap = new ServerBootstrap();</span><br><span class="line">            serverBootstrap.group(eventLoopGroup)</span><br><span class="line">                    .channel(EpollServerSocketChannel.class)</span><br><span class="line">                    .localAddress(new InetSocketAddress(port))</span><br><span class="line">                    .childHandler(new ChannelInitializer&lt;SocketChannel&gt;() &#123;</span><br><span class="line">                        @Override</span><br><span class="line">                        protected void initChannel(SocketChannel ch) throws Exception &#123;</span><br><span class="line">                            ch.pipeline().addLast(new ChannelInboundHandlerAdapter() &#123;</span><br><span class="line">                                @Override</span><br><span class="line">                                public void channelActive(ChannelHandlerContext ctx) throws Exception &#123;</span><br><span class="line">                                    System.out.println(&quot;accept&quot; + ctx);</span><br><span class="line">                                    ctx.writeAndFlush(byteBuf.duplicate()).addListener(ChannelFutureListener.CLOSE);</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;);</span><br><span class="line"></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">            ChannelFuture future = serverBootstrap.bind().sync();</span><br><span class="line">            future.channel().closeFuture().sync();</span><br><span class="line">        &#125; catch (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            eventLoopGroup.shutdownGracefully().sync();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="jvm-local"><a href="#jvm-local" class="headerlink" title="jvm local"></a>jvm local</h4><p>1:jvm local server<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">package com.ming.JvmLocal;</span><br><span class="line"></span><br><span class="line">import io.netty.bootstrap.ServerBootstrap;</span><br><span class="line">import io.netty.buffer.ByteBuf;</span><br><span class="line">import io.netty.buffer.Unpooled;</span><br><span class="line">import io.netty.channel.*;</span><br><span class="line">import io.netty.channel.local.LocalAddress;</span><br><span class="line">import io.netty.channel.local.LocalChannel;</span><br><span class="line">import io.netty.channel.local.LocalEventLoopGroup;</span><br><span class="line">import io.netty.channel.local.LocalServerChannel;</span><br><span class="line">import io.netty.util.CharsetUtil;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * netty 基于jvm内部本地通信 server实现</span><br><span class="line"> *</span><br><span class="line"> * @author ming</span><br><span class="line"> * @date 2018-04-17 13:45</span><br><span class="line"> */</span><br><span class="line">public class NettyJvmLocalServer &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 启动方法</span><br><span class="line">     *</span><br><span class="line">     * @author ming</span><br><span class="line">     * @date 2018-04-17 13:50</span><br><span class="line">     */</span><br><span class="line">    public void Start() throws InterruptedException &#123;</span><br><span class="line">        final ByteBuf byteBuf = Unpooled.unreleasableBuffer(Unpooled.copiedBuffer(&quot;hi ming &quot;, CharsetUtil.UTF_8));</span><br><span class="line">        //注册 local 事件处理器</span><br><span class="line">        EventLoopGroup eventLoopGroup = new LocalEventLoopGroup();</span><br><span class="line"></span><br><span class="line">        try &#123;</span><br><span class="line">            ServerBootstrap serverBootstrap = new ServerBootstrap();</span><br><span class="line">            serverBootstrap.group(eventLoopGroup)</span><br><span class="line">                    //使用Local server channel</span><br><span class="line">                    .channel(LocalServerChannel.class)</span><br><span class="line">                    //使用 local 地址</span><br><span class="line">                    .localAddress(new LocalAddress(NettyJvmLocal.LOCAL_ADDRESS))</span><br><span class="line">                    .childHandler(new ChannelInitializer&lt;LocalChannel&gt;() &#123;</span><br><span class="line">                        @Override</span><br><span class="line">                        protected void initChannel(LocalChannel ch) throws Exception &#123;</span><br><span class="line">                            ch.pipeline().addLast(new ChannelInboundHandlerAdapter() &#123;</span><br><span class="line">                                @Override</span><br><span class="line">                                public void channelActive(ChannelHandlerContext ctx) throws Exception &#123;</span><br><span class="line">                                    System.out.println(&quot;accept &quot; + ctx);</span><br><span class="line">                                    ctx.writeAndFlush(byteBuf).addListener(ChannelFutureListener.CLOSE);</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">            ChannelFuture future = serverBootstrap.bind().sync();</span><br><span class="line">            future.channel().closeFuture().sync();</span><br><span class="line"></span><br><span class="line">        &#125; catch (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            eventLoopGroup.shutdownGracefully().sync();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p>
<p>2: jvm local client<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">package com.ming.JvmLocal;</span><br><span class="line"></span><br><span class="line">import io.netty.bootstrap.Bootstrap;</span><br><span class="line">import io.netty.buffer.ByteBuf;</span><br><span class="line">import io.netty.buffer.Unpooled;</span><br><span class="line">import io.netty.channel.*;</span><br><span class="line">import io.netty.channel.local.LocalAddress;</span><br><span class="line">import io.netty.channel.local.LocalChannel;</span><br><span class="line">import io.netty.channel.local.LocalEventLoopGroup;</span><br><span class="line">import io.netty.util.CharsetUtil;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * netty 基于jvm内部本地通信 client 实现</span><br><span class="line"> *</span><br><span class="line"> * @author ming</span><br><span class="line"> * @date 2018-04-17 13:45</span><br><span class="line"> */</span><br><span class="line">public class NettyJvmLocalClient &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 启动方法</span><br><span class="line">     *</span><br><span class="line">     * @author ming</span><br><span class="line">     * @date 2018-04-17 13:50</span><br><span class="line">     */</span><br><span class="line">    public void Start() throws InterruptedException &#123;</span><br><span class="line">        final ByteBuf byteBuf = Unpooled.unreleasableBuffer(Unpooled.copiedBuffer(&quot;hi ming client&quot;, CharsetUtil.UTF_8));</span><br><span class="line">        //注册 local 事件处理器</span><br><span class="line">        EventLoopGroup eventLoopGroup = new LocalEventLoopGroup();</span><br><span class="line"></span><br><span class="line">        try &#123;</span><br><span class="line">            Bootstrap bootstrap = new Bootstrap();</span><br><span class="line">            bootstrap.group(eventLoopGroup)</span><br><span class="line">                    //使用 localChannel渠道</span><br><span class="line">                    .channel(LocalChannel.class)</span><br><span class="line">                    //注册 local模式的地址</span><br><span class="line">                    .remoteAddress(new LocalAddress(NettyJvmLocal.LOCAL_ADDRESS))</span><br><span class="line">                    .handler(new ChannelInitializer&lt;LocalChannel&gt;() &#123;</span><br><span class="line">                        @Override</span><br><span class="line">                        protected void initChannel(LocalChannel ch) throws Exception &#123;</span><br><span class="line">                            ch.pipeline().addLast(new ChannelInboundHandlerAdapter() &#123;</span><br><span class="line">                                @Override</span><br><span class="line">                                public void channelActive(ChannelHandlerContext ctx) throws Exception &#123;</span><br><span class="line">                                    System.out.println(&quot;connect &quot; + ctx);</span><br><span class="line">                                    ctx.writeAndFlush(byteBuf).addListener(ChannelFutureListener.CLOSE);</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">            ChannelFuture future = bootstrap.connect().sync();</span><br><span class="line">            future.channel().closeFuture().sync();</span><br><span class="line">        &#125; catch (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            eventLoopGroup.shutdownGracefully().sync();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p>
<p>3:jvm local demo<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">package com.ming.JvmLocal;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 调用 netty jvm  local server 和client 的客户端</span><br><span class="line"> *</span><br><span class="line"> * @author ming</span><br><span class="line"> * @date 2018-04-17 14:09</span><br><span class="line"> */</span><br><span class="line">public class NettyJvmLocal &#123;</span><br><span class="line">    /**</span><br><span class="line">     * 本地地址</span><br><span class="line">     *</span><br><span class="line">     * @author ming</span><br><span class="line">     * @date 2018-04-17 14:16</span><br><span class="line">     */</span><br><span class="line">    public static final String LOCAL_ADDRESS = &quot;ming&quot;;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws InterruptedException &#123;</span><br><span class="line">        // 启动 server</span><br><span class="line">        new Thread(() -&gt; &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                new NettyJvmLocalServer().Start();</span><br><span class="line">            &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line"></span><br><span class="line">        //暂停 线程 1s 等待server 启动完毕</span><br><span class="line">        Thread.sleep(1000L);</span><br><span class="line"></span><br><span class="line">        //启动client</span><br><span class="line">        new Thread(() -&gt; &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                new NettyJvmLocalClient().Start();</span><br><span class="line">            &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p>
<h3 id="传输"><a href="#传输" class="headerlink" title="传输"></a>传输</h3><p>传输是基于channel 的  </p>
<p>channel是有顺序的 因为继承 java.lang.Comparable<br>channelHandler:常规用途  </p>
<ul>
<li>数据格式转换   </li>
<li>异常处理  </li>
<li>提供channel 状态变更通知  </li>
<li>提供channel 注册或者注销 EventLoop中的通知  </li>
<li>提供用户自定义事件通知  </li>
</ul>
<p>channel 线程安全 并且保证顺序发送   </p>
<h3 id="内置传输手段"><a href="#内置传输手段" class="headerlink" title="内置传输手段"></a>内置传输手段</h3><table>
<thead>
<tr>
<th style="text-align:left">名称</th>
<th style="text-align:left">包</th>
<th style="text-align:left">备注</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">NIO</td>
<td style="text-align:left">io.netty.channel.socket.nio</td>
<td style="text-align:left">使用java nio</td>
</tr>
<tr>
<td style="text-align:left">Epoll</td>
<td style="text-align:left">io.netty.channel.epoll</td>
<td style="text-align:left">基于jni驱动的epoll()和非阻塞io 只能在linux上支持 比NIO快 并且完全非阻塞</td>
</tr>
<tr>
<td style="text-align:left">OIO</td>
<td style="text-align:left">io.netty.channel.socket.oio</td>
<td style="text-align:left">使用java net包 阻塞流</td>
</tr>
<tr>
<td style="text-align:left">Local</td>
<td style="text-align:left">io.netty.channel.local</td>
<td style="text-align:left">直接使用jvm内部管道通信</td>
</tr>
<tr>
<td style="text-align:left">Embedded</td>
<td style="text-align:left">io.netty.channel.embedded</td>
<td style="text-align:left">测试channelHandler使用的不依赖网络</td>
</tr>
</tbody>
</table>
<h3 id="nio-非阻塞-io"><a href="#nio-非阻塞-io" class="headerlink" title="nio  非阻塞 io"></a>nio  非阻塞 io</h3><p>基于selector<br>状态变化:  </p>
<ul>
<li>新的channel 已经被接受并且准备就绪   </li>
<li>channel 链接完成  </li>
<li>channel 有就绪的可供读取的数据  </li>
<li>channel 可用于写数据<br>通过java.nio.channels.SelectionKey定义的位 组合成一组应用程序正在请求通知的状态变化集合<br>|名称|描述|<br>|:–|:–|<br>|OP_ACCEPT|请求接受新链接创建channel获得通知|<br>|OP_CONNECT|请求建立第一个链接时候获得通知|<br>|OP_READ|请求数据就绪 可从channel 读取时获得通知|<br>|OP_WRITE|请求当可以向 channel中写入数据时候 获得通知、|  </li>
</ul>
<h3 id="Epoll-基于linux的本地非阻塞传输"><a href="#Epoll-基于linux的本地非阻塞传输" class="headerlink" title="Epoll 基于linux的本地非阻塞传输"></a>Epoll 基于linux的本地非阻塞传输</h3><p>在linux 2.5.44内核引入的功能   比POSIX 的select poll 更加牛逼<br>不考虑 夸平台  只考虑linux 的话  epoll 直接走起     </p>
<h3 id="oio-阻塞io"><a href="#oio-阻塞io" class="headerlink" title="oio 阻塞io"></a>oio 阻塞io</h3><p>基于jdk  java.net包的阻塞io<br>是netty 为了兼容 可能存在的老旧的系统 保留的 oio支持   </p>
<h3 id="基于jvm内部的local传输"><a href="#基于jvm内部的local传输" class="headerlink" title="基于jvm内部的local传输"></a>基于jvm内部的local传输</h3><p>在同一个jvm中运行的客户端和服务端程序直接的异步通信使用这种 可以大幅度提高速度   </p>
<h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><p>java实现oio和nio的代码 提供的api 区别比较大<br>oio 不需要selector 直接server socket接受 处理<br>nio 通过selector 协调 分配给相应的 socket 处理<br>netty 实现oio和nio 提供的api 基本相同 就是在使用发送方式和发送渠道时候 需要保持一致<br>例如 使用NioEventLoopGroup 那么传输渠道必须是NioServerChannelSocket<br>使用OioEventLoopGroup那么必须使用OioServerChannelSocket   </p>
<h3 id="传输支持的协议"><a href="#传输支持的协议" class="headerlink" title="传输支持的协议"></a>传输支持的协议</h3><table>
<thead>
<tr>
<th style="text-align:left">传输类型</th>
<th style="text-align:left">支持类型</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">NIO</td>
<td style="text-align:left">tcp、udp、sctp、udt</td>
</tr>
<tr>
<td style="text-align:left">Epoll(linux)</td>
<td style="text-align:left">tcp、udp</td>
</tr>
<tr>
<td style="text-align:left">OIO</td>
<td style="text-align:left">tcp、udp、sctp、udt</td>
</tr>
</tbody>
</table>
<p>sctp 增强版本的tcp<br>udt  增强版本的udp  </p>
<h3 id="传输类型选择"><a href="#传输类型选择" class="headerlink" title="传输类型选择:"></a>传输类型选择:</h3><table>
<thead>
<tr>
<th style="text-align:left">需求类型</th>
<th style="text-align:left">推荐传输类型</th>
<th style="text-align:left">备注</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">非阻塞代码、常规套路</td>
<td style="text-align:left">nio、或者epoll</td>
<td style="text-align:left">如果不考虑跨平台等功能 并且只考虑linux 平台运行 那么 epoll 是肯定的 毕竟是个特殊优化的非阻塞模式</td>
</tr>
<tr>
<td style="text-align:left">阻塞代码</td>
<td style="text-align:left">oio</td>
<td style="text-align:left">处理遗留代码的时候选择</td>
</tr>
<tr>
<td style="text-align:left">同jvm通信</td>
<td style="text-align:left">jvm local</td>
<td style="text-align:left">在同一个jvm中 进行通信的话 选择jvm local 可以直接省掉网络io的开销</td>
</tr>
<tr>
<td style="text-align:left">测试ChannelHandler</td>
<td style="text-align:left">Embedded</td>
<td style="text-align:left">只有写单元测试用用</td>
</tr>
</tbody>
</table>
<p>零拷贝:<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">零拷贝(zero-copy)是一种目前只有在使用 NIO 和 Epoll 传输时才可使用的特性。它使你可以快速</span><br><span class="line">高效地将数据从文件系统移动到网络接口,而不需要将其从内核空间复制到用户空间,其在像 FTP 或者</span><br><span class="line">HTTP 这样的协议中可以显著地提升性能。但是,并不是所有的操作系统都支持这一特性。特别地,它对</span><br><span class="line">于实现了数据加密或者压缩的文件系统是不可用的——只能传输文件的原始内容。反过来说,传输已被</span><br><span class="line">加密的文件则不是问题。</span><br></pre></td></tr></table></figure><p></p>]]></content>
      
        <categories>
            
            <category> 笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> netty </tag>
            
            <tag> 传输协议 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[docker-swarm集群搭建]]></title>
      <url>/ming/e855d436.html</url>
      <content type="html"><![CDATA[<p>swarm编排吧 首先肯定比不上k8s犀利 但是呢 胜在 使用简单 部署简单<br>docker直接集成 可以使用docker、docker-compose 原生api</p><p>我个人认为 没有十来台服务器 部署k8s集群 完全是浪费 毕竟k8s 是非常需要 master 高可用的 服务器少了 部署k8s 浪费资源太多了 so 开发环境直接使用 swarm 来编排docker</p><h3 id="环境"><a href="#环境" class="headerlink" title="环境:"></a>环境:</h3><ul><li>centos 7.x</li><li>docker 版本新点 至少 要集成swarm 模块<h4 id="1：-安装基本docker-环境"><a href="#1：-安装基本docker-环境" class="headerlink" title="1： 安装基本docker 环境"></a>1： 安装基本docker 环境</h4><a href="/ming/aef2102a.html" title="centos-docker环境搭建">centos-docker环境搭建</a></li></ul><p>使用 如下命令测试是否有swarm模块<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker swarm</span><br></pre></td></tr></table></figure><p></p>
<p>swarm 默认集成到docker中的</p>
<h4 id="2：基于-docker-swarm-配置portainer管理页面"><a href="#2：基于-docker-swarm-配置portainer管理页面" class="headerlink" title="2：基于 docker swarm  配置portainer管理页面"></a>2：基于 docker swarm  配置portainer管理页面</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># 初始化 swarm 集群  </span><br><span class="line">sudo docker swarm init </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 创建 portainer 挂载目录</span><br><span class="line">sudo mkdir -p /opt/portainer</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 以 swarm service 建立 portainer 管理 </span><br><span class="line">sudo  docker service create \</span><br><span class="line">--name portainer \</span><br><span class="line">--publish 9000:9000 \</span><br><span class="line">--replicas=1 \</span><br><span class="line">--constraint &apos;node.role == manager&apos; \</span><br><span class="line">--mount type=bind,src=//var/run/docker.sock,dst=/var/run/docker.sock \</span><br><span class="line">--mount type=bind,src=//opt/portainer,dst=/data \</span><br><span class="line">portainer/portainer \</span><br><span class="line">-H unix:///var/run/docker.sock</span><br></pre></td></tr></table></figure>
<p>http://<ip>:9000 访问即可 </ip></p>
<h4 id="3-遇到问题"><a href="#3-遇到问题" class="headerlink" title="3:遇到问题"></a>3:遇到问题</h4><p>参考地址:<a href="http://blog.51cto.com/zpf666/1908067" target="_blank" rel="noopener">http://blog.51cto.com/zpf666/1908067</a><br>1:无法通过服务名访问服务<br>需要建立一个overlay网络<br>swarm上默认已有一个名为ingress的overlay 网络, 可以直接使用<br>也可以从新建立     </p>
<p>2:遗忘swarm 添加节点时候的token<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo docker swarm join-token master</span><br><span class="line">sudo docker swarm jon-token worker</span><br></pre></td></tr></table></figure><p></p>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>swarm 一两台服务器的docker编排 还是很轻松的  而且也不需要 k8s那么麻烦<br>虽然k8s 一统天下  但是个人电脑用个swarm管理管理 还是简简单单 轻轻松松的</p>]]></content>
      
        <categories>
            
            <category> docker </category>
            
        </categories>
        
        
        <tags>
            
            <tag> docker </tag>
            
            <tag> linux </tag>
            
            <tag> swarm </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[centos-docker环境搭建]]></title>
      <url>/ming/aef2102a.html</url>
      <content type="html"><![CDATA[<h3 id="环境"><a href="#环境" class="headerlink" title="环境:"></a>环境:</h3><ul><li>centos 7.x</li><li>docker<h4 id="1-安装docker"><a href="#1-安装docker" class="headerlink" title="1:安装docker"></a>1:安装docker</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#安装 一些组件</span><br><span class="line">sudo yum install -y yum-utils device-mapper-persistent-data lvm2</span><br><span class="line"># 拉取阿里云中 docker-ce的repo</span><br><span class="line">sudo yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line"># 刷新 yum 缓存</span><br><span class="line">sudo yum makecache fast</span><br><span class="line"># 安装 docker-ce</span><br><span class="line">sudo yum -y install docker-ce</span><br><span class="line"># 启动 docker service</span><br><span class="line">sudo systemctl start docker</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="2：配置阿里云加速"><a href="#2：配置阿里云加速" class="headerlink" title="2：配置阿里云加速"></a>2：配置阿里云加速</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir -p /etc/docker</span><br><span class="line">sudo tee /etc/docker/daemon.json &lt;&lt;-&apos;EOF&apos;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [&quot;https://7vm1yv9c.mirror.aliyuncs.com&quot;]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br><span class="line"># 设置开机自启动</span><br><span class="line">sudo systemctl enable docker</span><br></pre></td></tr></table></figure>
<h4 id="3-关闭SELinux-firewalld"><a href="#3-关闭SELinux-firewalld" class="headerlink" title="3:关闭SELinux  firewalld"></a>3:关闭SELinux  firewalld</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Redhat系列使用了SELinux来增强安全，关闭的办法为：</span><br><span class="line">1. 永久有效</span><br><span class="line">修改 vi /etc/selinux/config 文件中的 SELINUX=&quot;&quot; 为 disabled ，然后重启。</span><br><span class="line">2. 即时生效</span><br><span class="line">#setenforce 0</span><br><span class="line">#3:查看是否关闭</span><br><span class="line">sestatus</span><br><span class="line"></span><br><span class="line">#### 关闭 firewalld</span><br><span class="line">systemctl stop firewalld</span><br><span class="line">### 禁止开机自动启动firewalld</span><br><span class="line">systemctl disable firewalld</span><br></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> docker </category>
            
        </categories>
        
        
        <tags>
            
            <tag> docker </tag>
            
            <tag> linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[k8s集群日志采集方案选择]]></title>
      <url>/ming/d8147fe2.html</url>
      <content type="html"><![CDATA[<h3 id="日志采集方案"><a href="#日志采集方案" class="headerlink" title="日志采集方案"></a>日志采集方案</h3><p>常规的日志采集总的来说 分为 收集–》处理–》存储–》查看<br>比较出名 并且用的比较多的 应该是elk模式<br>常用组合应该是如下 三种 至于还有其他采集工具 其实都差不多</p><ul><li>elk: es + kibana + logstash<br>最经典的做法 es+kibana 做 存储 查询 logstash 做日志采集和管道处理<br>缺陷是logstash 功能复杂 除非是搭建所有项目的统一日志 这种同集群的 logstash并不是特别好用<br>efk: es +kibana + filebeat<br>最直接的做法 es+kibana 做存储查询 filebeat采集数据 直接发送到es上 不经过logstash管道处理<br>elkf: es+ kibana+logstash +filebeat<br>功能最齐全的做法 es+kibana做存储查询 logstash做管道处理 filebeat 做采集</li></ul><p>为何选择filebeat做采集 因为短小精悍 go语言开发 占用资源少<br>具体的可以查询官网:<a href="https://www.elastic.co/cn/" target="_blank" rel="noopener">https://www.elastic.co/cn/</a> 随便搭配 总归就是一个收集处理存储查看的过程</p><h4 id="k8s集群配置日志采集方案"><a href="#k8s集群配置日志采集方案" class="headerlink" title="k8s集群配置日志采集方案"></a>k8s集群配置日志采集方案</h4><p>1：在node上配置一个filebeat 所有的镜像的日志 按照一定规则映射到filebeat采集的目录下<br>这种 配置简单 不过需要制定一套 项目的日志记录规范<br>2:使用k8s的daemon set 为每个pod 绑定一个filebeat 利用的是k8s的pod 共享数据卷的套路<br>这种较为消耗资源 一个filebeat20m内存 那么 100个容器 就是 2000m内存了 有点得不偿失<br>好处就是如果资源足够可以很容易的进行动态伸缩容器 新开node不需要配置 只要有kubelet就行</p><p>个人更加倾向 efk 因为 filebeat 非常适合 通过daemon set 去绑定到k8s pod中<br>并且不是很需要 logstash</p><h4 id="k8s集群-efk日志采集-实践"><a href="#k8s集群-efk日志采集-实践" class="headerlink" title="k8s集群+efk日志采集 实践"></a>k8s集群+efk日志采集 实践</h4><h6 id="0-启动-es-kibana"><a href="#0-启动-es-kibana" class="headerlink" title="0:启动 es+kibana"></a>0:启动 es+kibana</h6><p>通过镜像去启动 方便点 真实环境 请尽量采用 直接安装在服务器上 因为要映射数据文件乱七八糟的 不是很方便<br>nshou/elasticsearch-kibana latest版本 es=6.2.1 kibana=6.2.1<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker run -d -p 9200:9200 -p 5601:5601 --name es-kibana-test  nshou/elasticsearch-kibana</span><br></pre></td></tr></table></figure><p></p>
<p>直接在服务器上安装 请参考官网即可 </p>
<h6 id="1-搭建k8s实验环境"><a href="#1-搭建k8s实验环境" class="headerlink" title="1:搭建k8s实验环境"></a>1:搭建k8s实验环境</h6><p>使用minikube 快速搭建一个k8s实验环境<br><a href="/ming/ba1e0f81.html" title="minikube快速搭建k8s测试环境">minikube快速搭建k8s测试环境</a></p>
<h6 id="2：建立并且修改deployment"><a href="#2：建立并且修改deployment" class="headerlink" title="2：建立并且修改deployment"></a>2：建立并且修改deployment</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">``` </span><br><span class="line">###### 3：建立并且调整daemon set </span><br><span class="line">```$xslt</span><br></pre></td></tr></table></figure>
<h4 id="4：建立并且调整-service"><a href="#4：建立并且调整-service" class="headerlink" title="4：建立并且调整 service"></a>4：建立并且调整 service</h4><p>####</p>]]></content>
      
        <categories>
            
            <category> 使用 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> docker </tag>
            
            <tag> k8s </tag>
            
            <tag> 日志采集 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[rancher搭建k8s集群-国内加速]]></title>
      <url>/ming/b52bf00b.html</url>
      <content type="html"><![CDATA[<p>通过rancher部署k8s如果不考虑gfw 是非常简单的 但是在国内部署 不得不考虑gfw的问题<br>默认有个 组件镜像是从 google上下载的 所以需要修改一些参数配置提供国内加速</p><h3 id="环境"><a href="#环境" class="headerlink" title="环境:"></a>环境:</h3><ul><li>centos 7.x</li><li>rancher：1.6.x</li><li>docker 支持rancher:1.6.x的版本即可<h4 id="1：-安装基本docker-环境"><a href="#1：-安装基本docker-环境" class="headerlink" title="1： 安装基本docker 环境"></a>1： 安装基本docker 环境</h4><a href="/ming/aef2102a.html" title="centos-docker环境搭建">centos-docker环境搭建</a></li></ul><h4 id="2：启动rancher-server"><a href="#2：启动rancher-server" class="headerlink" title="2：启动rancher server"></a>2：启动rancher server</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 建立存放 rancher 相关数据文件存储</span><br><span class="line">mkdir -p /root/rancher</span><br><span class="line"># 启动 rancher server 容器 </span><br><span class="line">sudo docker run -d -v /root/rancher:/var/lib/mysql --restart=unless-stopped -p 40000:8080 --name rancher-server rancher/server:stable</span><br></pre></td></tr></table></figure>
<h4 id="3-登陆rancher"><a href="#3-登陆rancher" class="headerlink" title="3:登陆rancher"></a>3:登陆rancher</h4><p>访问 http://<ip>:40000 </ip></p>
<h4 id="4-自定义-k8s模板-使用-国内可用镜像"><a href="#4-自定义-k8s模板-使用-国内可用镜像" class="headerlink" title="4:自定义 k8s模板 使用 国内可用镜像"></a>4:自定义 k8s模板 使用 国内可用镜像</h4><p>按照 <a href="https://www.cnrancher.com/kubernetes-installation/" target="_blank" rel="noopener">https://www.cnrancher.com/kubernetes-installation/</a> 文档进行修改<br>注意：<br>文档中标记红线的值 必须如下 设置 否则 无法启动 共四个值需要修改<br>Private Registry for Add-Ons and Pod Infra Container Image = registry.cn-shenzhen.aliyuncs.com<br>Image namespace for  Add-Ons and Pod Infra Container Image = rancher_cn<br>Image namespace for kubernetes-helm Image = rancher_cn<br>Pod Infra Container Image =  rancher_cn/pause-amd64:3.0</p>
<h4 id="5-创建-环境"><a href="#5-创建-环境" class="headerlink" title="5:创建 环境"></a>5:创建 环境</h4><p>根据刚刚创建的 k8s模板创建环境 即可  </p>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>部署rancher 很简单 注意是有时候是gfw导致组件无法创建 略坑<br>rancher 部署的k8s集群 有两个dns  一个是k8s中 kube-system 中的dns服务 一个是rancher的network 应用  两个都可以用<br>部署rancher 如果资源相对充足 rancher server和rancher agent分开部署<br>在rancher1.x版本中 rancher部署的k8s集群 是在rancher agent 上部署的 扩展起来很困难<br>而且由于 rancher也提供一套cni网络  这样就导致 k8s的网络和rancher的网络复合起来  显得较为复杂 不好处理</p>]]></content>
      
        <categories>
            
            <category> k8s </category>
            
        </categories>
        
        
        <tags>
            
            <tag> docker </tag>
            
            <tag> k8s </tag>
            
            <tag> rancher </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[springCloudConfigServer的git、svn版本实现及相关实战案例]]></title>
      <url>/ming/7ced3fa5.html</url>
      <content type="html"><![CDATA[<h3 id="配置中心"><a href="#配置中心" class="headerlink" title="配置中心"></a>配置中心</h3><p>在分布式 环境中 配置中心是必不可少的一个组件 不管是国内的 disconf 、Apollo之类 还是spring cloud的config server 都是一个套路<br>将配置统一管理 通过namespace、项目名称之类的 进行区分 加入一些操作审计、配置加密之类的功能 有的是基于数据库、有的是基于文件+版本管理<br>由于技术栈和个人习惯 我个人更加喜欢spring 社区的config server 基于文件和版本管理来实现的配置 可以很方便的管理配置的版本和内容</p><p>个人觉得 在整个集群中管踏马是什么配置 都可以丢进配置中心进行统一管理 例如app的打包配置、集群的参数配置等等 反正只要是配置都可以放进去</p><h4 id="spring-cloud-config-server"><a href="#spring-cloud-config-server" class="headerlink" title="spring cloud config server"></a>spring cloud config server</h4><p>这个是属于spring cloud 项目中的一个组件<br>它基于 svn或者git 去管理配置文件 提供各种各样的配置文件的管理 、提供敏感配置加密(对称、非对称都支持)、访问控制等等<br>java中使用 config server client 客户端读取配置直接提供不停机更新配置功能 等等<br>非java项目 可以通过http接口获取配置</p><h4 id="需要技能"><a href="#需要技能" class="headerlink" title="需要技能"></a>需要技能</h4><ul><li>git、svn熟练</li><li>java相关技能熟练 例如maven之类的</li><li>docker 熟练 涉及到项目打包成docker image</li></ul><h4 id="git版本"><a href="#git版本" class="headerlink" title="git版本"></a>git版本</h4><p>git版本就简单了 毕竟git好用 大部分书籍、博客都是介绍git版本的<br>1：新建maven java项目<br>pom配置<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;project xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">         xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;</span><br><span class="line">         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">    &lt;parent&gt;</span><br><span class="line">        &lt;artifactId&gt;parent&lt;/artifactId&gt;</span><br><span class="line">        &lt;groupId&gt;ming&lt;/groupId&gt;</span><br><span class="line">        &lt;version&gt;1.0.0&lt;/version&gt;</span><br><span class="line">    &lt;/parent&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line"></span><br><span class="line">    &lt;artifactId&gt;configServer&lt;/artifactId&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-config-server&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-starter-eureka&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;!-- &lt;dependency&gt;</span><br><span class="line">             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">             &lt;artifactId&gt;spring-boot-starter-security&lt;/artifactId&gt;</span><br><span class="line">         &lt;/dependency&gt;--&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure><p></p>
<p>2:application.yml配置<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: config</span><br><span class="line">  cloud:</span><br><span class="line">    config:</span><br><span class="line">      server:</span><br><span class="line">        git:</span><br><span class="line">          uri: &quot;https://github.com/xuxianyu/springcloud.git&quot;</span><br><span class="line">          #仓库的搜索路径 这里可以指定 git的目录  config/spring-repo/&#123;目录&#125; 这种方式就可以按照项目区分配置目录了 </span><br><span class="line">          search-paths: config/spring-repo/ming</span><br><span class="line">#config server 访问账户密码</span><br><span class="line">security:</span><br><span class="line">  user:</span><br><span class="line">    name: ming</span><br><span class="line">    password: ming</span><br><span class="line">#设定 对称加密密钥</span><br><span class="line">#encrypt:</span><br><span class="line">#  key: ming</span><br><span class="line">          #username: 18120580001@163.com</span><br><span class="line">          #password:</span><br></pre></td></tr></table></figure><p></p>
<p>3：配置启动类<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">package com.ming;</span><br><span class="line"></span><br><span class="line">import org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line">import org.springframework.boot.builder.SpringApplicationBuilder;</span><br><span class="line">import org.springframework.cloud.client.discovery.EnableDiscoveryClient;</span><br><span class="line">import org.springframework.cloud.config.server.EnableConfigServer;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * config server 启动类</span><br><span class="line"> *</span><br><span class="line"> * @author ming</span><br><span class="line"> * @date 2017-10-30 11:18</span><br><span class="line"> */</span><br><span class="line">//开启config 服务</span><br><span class="line">@EnableConfigServer</span><br><span class="line">//注册到注册中心</span><br><span class="line">@EnableDiscoveryClient</span><br><span class="line">@SpringBootApplication</span><br><span class="line">public class StartConfig &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        new SpringApplicationBuilder(StartConfig.class).web(true).run(args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p>
<p>4：访问配置<br>在git仓库中建立ming/config-dev.yaml  master分支<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">name: ming</span><br></pre></td></tr></table></figure><p></p>
<p>浏览器访问 <a href="http://localhost:8888/master/config-dev.yaml" target="_blank" rel="noopener">http://localhost:8888/master/config-dev.yaml</a></p>
<p>实例地址: <a href="https://github.com/xuxianyu/springcloud/tree/master/configServer" target="_blank" rel="noopener">https://github.com/xuxianyu/springcloud/tree/master/configServer</a></p>
<h4 id="svn版本"><a href="#svn版本" class="headerlink" title="svn版本"></a>svn版本</h4><p>1:新建maven java项目<br>pom配置<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;</span><br><span class="line">         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line"></span><br><span class="line">    &lt;groupId&gt;com.onlyedu&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;configServer&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line">    &lt;parent&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;1.5.1.RELEASE&lt;/version&gt;</span><br><span class="line">    &lt;/parent&gt;</span><br><span class="line">    &lt;properties&gt;</span><br><span class="line">        &lt;!-- spring cloud version --&gt;</span><br><span class="line">        &lt;spring.cloud.version&gt;Camden.SR5&lt;/spring.cloud.version&gt;</span><br><span class="line">        &lt;!-- svnkit version --&gt;</span><br><span class="line">        &lt;svnkit.version&gt;1.9.0&lt;/svnkit.version&gt;</span><br><span class="line">    &lt;/properties&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--仓库--&gt;</span><br><span class="line">    &lt;repositories&gt;</span><br><span class="line">        &lt;!--aliyun repository--&gt;</span><br><span class="line">        &lt;repository&gt;</span><br><span class="line">            &lt;id&gt;aliyun&lt;/id&gt;</span><br><span class="line">            &lt;name&gt;aliyun nexus repository&lt;/name&gt;</span><br><span class="line">            &lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public/&lt;/url&gt;</span><br><span class="line">        &lt;/repository&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;/repositories&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;!-- spring cloud  config --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-config-server&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;!-- spring cloud config svn repository --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.tmatesoft.svnkit&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;svnkit&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;$&#123;svnkit.version&#125;&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;!-- spring  boot security 访问控制 --&gt;</span><br><span class="line">         &lt;dependency&gt;</span><br><span class="line">             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">             &lt;artifactId&gt;spring-boot-starter-security&lt;/artifactId&gt;</span><br><span class="line">         &lt;/dependency&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;dependencyManagement&gt;</span><br><span class="line">        &lt;!--spring cloud parent pom--&gt;</span><br><span class="line">        &lt;dependencies&gt;</span><br><span class="line">            &lt;dependency&gt;</span><br><span class="line">                &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;</span><br><span class="line">                &lt;version&gt;$&#123;spring.cloud.version&#125;&lt;/version&gt;</span><br><span class="line">                &lt;type&gt;pom&lt;/type&gt;</span><br><span class="line">                &lt;scope&gt;import&lt;/scope&gt;</span><br><span class="line">            &lt;/dependency&gt;</span><br><span class="line">        &lt;/dependencies&gt;</span><br><span class="line">    &lt;/dependencyManagement&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;!--构建插件--&gt;</span><br><span class="line">    &lt;build&gt;</span><br><span class="line"></span><br><span class="line">        &lt;plugins&gt;</span><br><span class="line">            &lt;!--docker 插件--&gt;</span><br><span class="line">            &lt;!--&lt;plugin&gt;</span><br><span class="line">                &lt;groupId&gt;com.spotify&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;docker-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">                &lt;version&gt;$&#123;maven.docker.version&#125;&lt;/version&gt;</span><br><span class="line">                &lt;configuration&gt;</span><br><span class="line">                    &amp;lt;!&amp;ndash;镜像名称&amp;ndash;&amp;gt;</span><br><span class="line">                    &lt;imageName&gt;$&#123;docker.image.prefix&#125;/$&#123;project.artifactId&#125;&lt;/imageName&gt;</span><br><span class="line">                    &amp;lt;!&amp;ndash;docker file位置&amp;ndash;&amp;gt;</span><br><span class="line">                    &lt;dockerDirectory&gt;src/main/docker&lt;/dockerDirectory&gt;</span><br><span class="line">                    &lt;resources&gt;</span><br><span class="line">                        &lt;resource&gt;</span><br><span class="line">                            &amp;lt;!&amp;ndash; 编译jar路径 &amp;ndash;&amp;gt;</span><br><span class="line">                            &lt;targetPath&gt;/&lt;/targetPath&gt;</span><br><span class="line">                            &amp;lt;!&amp;ndash;编译jar 所在文件夹&amp;ndash;&amp;gt;</span><br><span class="line">                            &lt;directory&gt;$&#123;project.build.directory&#125;&lt;/directory&gt;</span><br><span class="line">                            &amp;lt;!&amp;ndash;编译的jar 名称&amp;ndash;&amp;gt;</span><br><span class="line">                            &lt;include&gt;$&#123;project.build.finalName&#125;.jar&lt;/include&gt;</span><br><span class="line">                        &lt;/resource&gt;</span><br><span class="line">                    &lt;/resources&gt;</span><br><span class="line">                &lt;/configuration&gt;</span><br><span class="line">            &lt;/plugin&gt;--&gt;</span><br><span class="line">            &lt;!--指定编译jdk版本 默认为1.5--&gt;</span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line">                &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;</span><br><span class="line">                &lt;configuration&gt;</span><br><span class="line">                    &lt;source&gt;1.8&lt;/source&gt;</span><br><span class="line">                    &lt;target&gt;1.8&lt;/target&gt;</span><br><span class="line">                    &lt;encoding&gt;UTF-8&lt;/encoding&gt;</span><br><span class="line">                &lt;/configuration&gt;</span><br><span class="line">            &lt;/plugin&gt;</span><br><span class="line"></span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line">                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">            &lt;/plugin&gt;</span><br><span class="line"></span><br><span class="line">            &lt;!-- 解决资源文件的编码问题 --&gt;</span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line">                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;maven-resources-plugin&lt;/artifactId&gt;</span><br><span class="line">                &lt;configuration&gt;</span><br><span class="line">                    &lt;encoding&gt;UTF-8&lt;/encoding&gt;</span><br><span class="line">                &lt;/configuration&gt;</span><br><span class="line">            &lt;/plugin&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;/plugins&gt;</span><br><span class="line">    &lt;/build&gt;</span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure><p></p>
<p>2：配置 application.yml<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"># default port</span><br><span class="line">server:</span><br><span class="line">  port: 8888</span><br><span class="line">spring:</span><br><span class="line">  cloud:</span><br><span class="line">    config:</span><br><span class="line">      server:</span><br><span class="line">        svn:</span><br><span class="line">          # svn 配置仓库地址</span><br><span class="line">          uri: https://repo.xujiuming.com/svn/ming/trunk/confDir</span><br><span class="line">          # svn 访问账户</span><br><span class="line">          username: ming</span><br><span class="line">          # svn 访问密码</span><br><span class="line">          password: mingpwd</span><br><span class="line">          # 这个设置是访问时候没有带label默认的label  用处不大</span><br><span class="line">          default-label: trunk</span><br><span class="line">  # 使用 svn 作仓库  必须要填写</span><br><span class="line">  profiles:</span><br><span class="line">    active: subversion</span><br><span class="line"></span><br><span class="line"># 访问控制</span><br><span class="line">security:</span><br><span class="line">  user:</span><br><span class="line">    name: ming</span><br><span class="line">    password: ming</span><br><span class="line">encrypt:</span><br><span class="line">  # rsa 密钥 设定 使用resources 下的 configServer.keystore</span><br><span class="line">  key-store:</span><br><span class="line">    location: configServer.keystore</span><br><span class="line">    alias: configServer</span><br><span class="line">    #  生成 密钥时候的密码</span><br><span class="line">    password: ming2</span><br><span class="line">    # 生成 密钥时候的签名</span><br><span class="line">    secret: ming1</span><br></pre></td></tr></table></figure><p></p>
<p>3：生成敏感数据密钥包<br>必须替换jce相关jar 或者直接使用我选择的docker 镜像 那个镜像是替换好jce相关jar包的</p>
<p>因为 config server 使用的是aes256 加密 所以必须替换jce 相关jar<br>就算使用rsa 加密方式 也是需要jce相关jar 的  因为他还是用的aes256加密<br>rsa 加密方式配置</p>
<ul>
<li>生成 rsa 密钥包  直接到控制台执行即可  使用的是jdk 的keytool <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">configserver rsa 秘钥生成命令 有效时间 10000天</span><br><span class="line">keytool -genkeypair -alias configServer -keyalg RSA \</span><br><span class="line">-dname &quot;CN=ming,OU=ming,O=ming,L=ming,ST=ming,C=ming&quot; \</span><br><span class="line">-keypass ming1 \</span><br><span class="line">-keystore configServer.keystore \</span><br><span class="line">-storepass ming2 \</span><br><span class="line">-validity 10000 \</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>配置中使用 数据加密</p>
<ul>
<li>使用加密字符串替换 原始字符串<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">访问 configServer的 &#123;[/encrypt],methods=[POST]&#125; 接口  参数为要加密的字符串  返回加密字符串</span><br><span class="line">例如 加密前 字符串a   通过接口获取加密后字符串 b</span><br><span class="line">在a配置的地方 使用 &#123;cipher&#125;b  替换a  即可 </span><br><span class="line">加密前</span><br><span class="line">passwd=a</span><br><span class="line">加密后</span><br><span class="line">passwd=&#123;cipher&#125;b</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>将生成的configServer.keystore 文件复制到resources目录中去<br>4:配置spring boot 项目启动类<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">package com.ming;</span><br><span class="line"></span><br><span class="line">import org.springframework.boot.SpringApplication;</span><br><span class="line">import org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line">import org.springframework.cloud.config.server.EnableConfigServer;</span><br><span class="line"></span><br><span class="line">/** config server start class</span><br><span class="line"> *</span><br><span class="line"> * @author  ming</span><br><span class="line"> * @date  2017-12-06 10:08</span><br><span class="line"> * */</span><br><span class="line">@EnableConfigServer</span><br><span class="line">@SpringBootApplication</span><br><span class="line">public class StartConfigServer &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        SpringApplication.run(StartConfigServer.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p>
<p>5:配置dockerfile<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">FROM docker.io/fabric8/java-alpine-openjdk8-jdk</span><br><span class="line">MAINTAINER &quot;ming&quot;</span><br><span class="line"></span><br><span class="line"># create  workspace</span><br><span class="line">RUN  mkdir /workspace</span><br><span class="line"># copy app.jar</span><br><span class="line">COPY target/configServer-1.0-SNAPSHOT.jar /workspace</span><br><span class="line"># open port</span><br><span class="line">EXPOSE 8888</span><br><span class="line"># 运行jar</span><br><span class="line">CMD  java -jar /workspace/configServer-1.0-SNAPSHOT.jar</span><br></pre></td></tr></table></figure><p></p>
<p>6:打包成docker<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mvn package </span><br><span class="line">sudo docker build -t config-server-ming:1.0.0 .</span><br></pre></td></tr></table></figure><p></p>
<p>7：启动容器<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker run -d -p 8888:8888 --name mingconfigserver config-server-ming:1.0.0</span><br></pre></td></tr></table></figure><p></p>
<p>8：访问配置<br>在svn仓库中建立ming/config-dev.yaml<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">name: ming</span><br></pre></td></tr></table></figure><p></p>
<p>浏览器访问 <a href="http://localhost:8888/ming/config-dev.yaml" target="_blank" rel="noopener">http://localhost:8888/ming/config-dev.yaml</a></p>
<p>实例地址: <a href="https://github.com/xuxianyu/springcloud/tree/master/configServerSvn" target="_blank" rel="noopener">https://github.com/xuxianyu/springcloud/tree/master/configServerSvn</a></p>
<h4 id="访问配置文件url-详细解释"><a href="#访问配置文件url-详细解释" class="headerlink" title="访问配置文件url 详细解释"></a>访问配置文件url 详细解释</h4><p>参数解释:<br>1:git<br>在git仓库中目录 配置文件的目录/配置文件前缀-配置文件后缀.配置文件类型  如在svn仓库目录下的ming/app-dev.yaml master分支  那么 master就是label app就是name  profiles就是dev  path就是app-dev.yaml git配置可以通过配置 区分文件夹 不是跟svn一样 把文件夹当作label </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">name: 前缀</span><br><span class="line">profiles: 后缀</span><br><span class="line">label: 分支</span><br><span class="line">path： 完整文件名</span><br></pre></td></tr></table></figure>
<p>2:svn<br>在svn仓库中目录 配置文件的目录/配置文件前缀-配置文件后缀.配置文件类型  如在svn仓库目录下的ming/app-dev.yaml  那么 ming就是label app就是name  profiles就是dev  path就是app-dev.yaml<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">name: 配置文件前缀</span><br><span class="line">profiles: 配置文件后缀</span><br><span class="line">label: 文件夹目录名称</span><br><span class="line">path:配置文件全称包含.后面的类型</span><br></pre></td></tr></table></figure><p></p>
<p>访问properties、yaml、json格式 访问方式<br>/{name}/{profiles:.*[^-].*}<br>/{name}/{profiles}/{label:.*}<br>/{name}-{profiles}.properties<br>/{label}/{name}<br>/{profiles}.properties<br>/{name}-{profiles}.json<br>/{label}/{name}-{profiles}.json   </p>
<p>访问非 java适配的配置文件 只能以文本模式 读取<br>参考博客地址:<a href="http://www.voidcn.com/article/p-yhrhfyla-bqr.html" target="_blank" rel="noopener">http://www.voidcn.com/article/p-yhrhfyla-bqr.html</a><br>/{name}/{profile}/{label}/{path}</p>
<h4 id="实际案例"><a href="#实际案例" class="headerlink" title="实际案例"></a>实际案例</h4><p>1：java web项目启动拉取配置中心配置<br>在spring cloud 接入config server的项目中<br>bootstrap.yml 优先级最高 在一启动就会加载 在这里配置 链接config server的配置、链接配置中心的配置 等等<br>application.yml是在config client 拉取配置后才加载 如果在这里配置链接config server配置不会生效</p>
<p>增加pom依赖<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">   &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">   &lt;artifactId&gt;spring-cloud-starter-config&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p></p>
<p>配置bootstrap.yml<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line"> cloud:</span><br><span class="line">     config:</span><br><span class="line">       # 拉取后缀为dev的配置</span><br><span class="line">       profile: dev</span><br><span class="line">       # 拉取master分支的配置</span><br><span class="line">       label: master</span><br><span class="line">       username: ming</span><br><span class="line">       password: ming</span><br><span class="line">       uri: &quot;http://localhost:8888&quot;</span><br><span class="line">       #开启 以服务方式访问配置中心</span><br><span class="line">       #discovery:</span><br><span class="line">       #  enabled: true</span><br><span class="line">       #  service-id: CONFIG</span><br><span class="line">       #开启预检</span><br><span class="line">       #fail-fast: true</span><br><span class="line">       #重试参数</span><br><span class="line">       #retry:</span><br><span class="line">         #重试间隔</span><br><span class="line">         #multiplier: 2000</span><br><span class="line">         #下一个间隔</span><br><span class="line">         #initial-interval: 2000</span><br><span class="line">         #最大间隔</span><br><span class="line">         #max-interval: 5000</span><br><span class="line">         #最大重试次数</span><br><span class="line">         #max-attempts: 3</span><br><span class="line"></span><br><span class="line"> application:</span><br><span class="line">   # 拉取前缀为ming的配置</span><br><span class="line">   name: ming</span><br><span class="line">       #fail-fast: true</span><br></pre></td></tr></table></figure><p></p>
<p>在配置仓库配置相关配置<br>然后启动项目 打个断点 查询spring env bean 即可查看是否加载到配置中心的配置</p>
<p>2: docker启动 时候拉取容器环境配置<br>思路: 重写镜像的 启动命令 在启动的时候拉取配置中心的配置覆盖容器中的配置文件<br>如果配置中心设置的账户密码 需要获取配置中心 访问接口的token<br>浏览器访问一下配置输入账户密码  抓http请求包 报头中有个 Authorization: Basic xxxxxxx 报头<br>使用curl命令获取配置<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -H &quot;Authorization: Basic xxxxxxx&quot; http://configServer地址//&#123;name&#125;/&#123;profile&#125;/&#123;label&#125;/&#123;path&#125; &gt; /etc/nginx/conf.d/default.conf</span><br></pre></td></tr></table></figure><p></p>
<p>调整dockerfile中的默认启动命令<br>CMD 或者ENTRYPOINT  一定要用&amp;&amp;  不能使用&amp; 这个是并行执行 但是大部分容器是需要先加载完毕配置才能启动的<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ENTRYPOINT curl -H &quot;Authorization: Basic xxxxxxx&quot; http://configServer地址//&#123;name&#125;/&#123;profile&#125;/&#123;label&#125;/&#123;path&#125; &gt; /etc/nginx/conf.d/default.conf &amp;&amp; run.sh</span><br></pre></td></tr></table></figure><p></p>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结:"></a>总结:</h4><p>总的来说 spring cloud config server基本满足需求<br>如果需要什么配置操作审计 完全可以在svn或者git操作上进行<br>如果是java项目可以通过引入 spring cloud config client jar来使用<br>非java项目 可以通过http接口获取配置信息<br>关于高可用 就是多启动几台config server 注册到注册中心就行 客户端通过注册中心去访问http接口</p>]]></content>
      
        <categories>
            
            <category> 实例 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 实用 </tag>
            
            <tag> spring cloud </tag>
            
            <tag> 分布式 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[k8s集群暴露集群服务的各种方案的优劣]]></title>
      <url>/ming/c013ae57.html</url>
      <content type="html"><![CDATA[<p>参考文档:<br><a href="http://blog.csdn.net/liyingke112/article/details/76022267" target="_blank" rel="noopener">http://blog.csdn.net/liyingke112/article/details/76022267</a><br><a href="https://www.kubernetes.org.cn/1885.html" target="_blank" rel="noopener">https://www.kubernetes.org.cn/1885.html</a><br>k8s集群暴露服务 常见的就四种</p><h4 id="1-clusterIp"><a href="#1-clusterIp" class="headerlink" title="1: clusterIp"></a>1: clusterIp</h4><p>clusterIp就是service的ip k8s在创建service的时候 会给service一个ip 集群内部可以通过这个clusterIp访问相应的service<br>这种方式呢稍微麻烦 最终要暴露外部服务 还是要建立nginx之类的反向代理 然后再暴露出集群<br>实践:<br>这个需要在集群中的一个节点去访问<br>登陆集群中同一个命名空间的容器 直接ping 对应的clusterIp 或者直接telnet 访问clusterIp:clusterPort clusterPort就是service配置中的targetPort<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ping &lt;clusterIp&gt;</span><br><span class="line">telnet &lt;clusterIp&gt; &lt;targetPort&gt;</span><br></pre></td></tr></table></figure><p></p>
<h4 id="2-nodePort"><a href="#2-nodePort" class="headerlink" title="2:nodePort"></a>2:nodePort</h4><p>node在k8s中表示是一台物理机或者虚拟机 nodePort是k8s集群在创建service的时候 会在每个node上暴露出nodePort 外部可以直接通过nodeIp:nodePort访问 服务<br>这种方式 很容易实现 但是不太符合实际生产环境 因为在新开服务或者新增node的时候需要增加配置 会导致依赖一个外部的负载均衡器去分发各个node<br>配置太多了 不利于维护   nodePort模式依旧存在clusterIp 依旧可以通过第一种方式访问<br>实例:<br>配置 service<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl edit service &lt;serviceName&gt;</span><br></pre></td></tr></table></figure><p></p>
<p>type 为NodePort  拥有port、targetPort、nodePort<br>这个如果不是这个配置 可以修改<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">。。。</span><br><span class="line">spec:</span><br><span class="line">  clusterIP: 10.103.100.161</span><br><span class="line">  externalTrafficPolicy: Cluster</span><br><span class="line">  ports:</span><br><span class="line">  - nodePort: 30115</span><br><span class="line">    port: 8080</span><br><span class="line">    protocol: TCP</span><br><span class="line">    targetPort: 8080</span><br><span class="line">  selector:</span><br><span class="line">    run: hello-node</span><br><span class="line">  sessionAffinity: None</span><br><span class="line">  type: NodePort</span><br><span class="line">  。。。</span><br></pre></td></tr></table></figure><p></p>
<p>直接ping node的ip 或者直接通过telnet 访问nodeIp:nodePort<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ping &lt;nodeIp&gt;</span><br><span class="line">telnet &lt;nodeIp&gt; &lt;nodePort&gt;</span><br></pre></td></tr></table></figure><p></p>
<h4 id="3-loadbalance"><a href="#3-loadbalance" class="headerlink" title="3:loadbalance"></a>3:loadbalance</h4><p>必须要在支持 这个模式的云平台上才能用 基于nodePort 只不过 这个模式会请求底层云平台的服务创建一个负载均衡器 来访问<br>这种方式 要看各个云平台的支持 例如阿里云就有点坑爹 每个服务都为你申请一个负载均衡器 贵的很 而且还不如直接用nodePort模式然后自己做负载均衡来的直接 简单  </p>
<p>这个 哎 懒的尝试没必要 直接请求云平台的负载均衡服务 略坑 太贵 而且不好管理  建议就算了把  有用这个 不如直接使用nodePort 或者ic 或者自己维护nginx方式来做 </p>
<h4 id="4-ingress"><a href="#4-ingress" class="headerlink" title="4:ingress"></a>4:ingress</h4><p>这个是k8s 算是比较官方的一种解决方案了<br>大神也总结的有文档<br><a href="http://blog.csdn.net/liyingke112/article/details/77066814" target="_blank" rel="noopener">http://blog.csdn.net/liyingke112/article/details/77066814</a><br><a href="https://www.kubernetes.org.cn/1885.html" target="_blank" rel="noopener">https://www.kubernetes.org.cn/1885.html</a><br><a href="https://mritd.me/2017/03/04/how-to-use-nginx-ingress/#%E4%B8%80ingress-%E4%BB%8B%E7%BB%8D" target="_blank" rel="noopener">https://mritd.me/2017/03/04/how-to-use-nginx-ingress/#%E4%B8%80ingress-%E4%BB%8B%E7%BB%8D</a><br><a href="https://mritd.me/2016/12/06/try-traefik-on-kubernetes/" target="_blank" rel="noopener">https://mritd.me/2016/12/06/try-traefik-on-kubernetes/</a><br>比较麻烦 只有当集群大了之后 可以  小集群 需求并不大<br>主要就是 ingress 和ingress controller 、代理负载均衡器(例如nginx 之类的)<br>ingress : 配置规则的地方<br>ingress controller :将ingress中配置的规则 生成相应的配置 例如生成nginx的配置<br>负载均衡器: 例如nginx 具体分发流量的软件   ingress controller 通过ingress获取配置 自动刷新nginx中的配置 </p>
<h4 id="5：自定义方案"><a href="#5：自定义方案" class="headerlink" title="5：自定义方案"></a>5：自定义方案</h4><p>nginx+config server<br>用nginx 直接分发service  配置通过config server 进行刷新<br>其实跟ingress差不多 只不过 由开发去维护 这个代理作用的nginx的pod 而不是直接由k8s直接管理   因为懂nginx配置的人多  懂ingress的人并不多<br>这个方案缺点就是要配置很多不同的service的配置 比较麻烦 只能手动配置  但是 这个配合loadbalancer 就可以很不错的做到代理分发 并且屏蔽底层serviceIp变化<br>最后通过暴露nginx的nodePort去给外部服务访问<br>1:按照<a href="http://docs.kubernetes.org.cn/126.html" target="_blank" rel="noopener">http://docs.kubernetes.org.cn/126.html</a> 这个教程搭建 minikube 的hello-node 服务 这个时候可以通过nodePort 访问hello-node服务的<br>2:通过如下配置启动一个nginx-all deployment<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;kind&quot;: &quot;Deployment&quot;,</span><br><span class="line">  &quot;apiVersion&quot;: &quot;extensions/v1beta1&quot;,</span><br><span class="line">  &quot;metadata&quot;: &#123;</span><br><span class="line">    &quot;name&quot;: &quot;nginx-all&quot;,</span><br><span class="line">    &quot;namespace&quot;: &quot;default&quot;,</span><br><span class="line">    &quot;selfLink&quot;: &quot;/apis/extensions/v1beta1/namespaces/default/deployments/nginx-all&quot;,</span><br><span class="line">    &quot;uid&quot;: &quot;050be590-1b6d-11e8-a211-080027fc8712&quot;,</span><br><span class="line">    &quot;resourceVersion&quot;: &quot;45623&quot;,</span><br><span class="line">    &quot;generation&quot;: 1,</span><br><span class="line">    &quot;creationTimestamp&quot;: &quot;2018-02-27T03:19:28Z&quot;,</span><br><span class="line">    &quot;labels&quot;: &#123;</span><br><span class="line">      &quot;k8s-app&quot;: &quot;nginx-all&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;annotations&quot;: &#123;</span><br><span class="line">      &quot;deployment.kubernetes.io/revision&quot;: &quot;1&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;spec&quot;: &#123;</span><br><span class="line">    &quot;replicas&quot;: 1,</span><br><span class="line">    &quot;selector&quot;: &#123;</span><br><span class="line">      &quot;matchLabels&quot;: &#123;</span><br><span class="line">        &quot;k8s-app&quot;: &quot;nginx-all&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;template&quot;: &#123;</span><br><span class="line">      &quot;metadata&quot;: &#123;</span><br><span class="line">        &quot;name&quot;: &quot;nginx-all&quot;,</span><br><span class="line">        &quot;creationTimestamp&quot;: null,</span><br><span class="line">        &quot;labels&quot;: &#123;</span><br><span class="line">          &quot;k8s-app&quot;: &quot;nginx-all&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;spec&quot;: &#123;</span><br><span class="line">        &quot;containers&quot;: [</span><br><span class="line">          &#123;</span><br><span class="line">            &quot;name&quot;: &quot;nginx-all&quot;,</span><br><span class="line">            &quot;image&quot;: &quot;nginx:1.13.8-alpine&quot;,</span><br><span class="line">            &quot;resources&quot;: &#123;&#125;,</span><br><span class="line">            &quot;terminationMessagePath&quot;: &quot;/dev/termination-log&quot;,</span><br><span class="line">            &quot;terminationMessagePolicy&quot;: &quot;File&quot;,</span><br><span class="line">            &quot;imagePullPolicy&quot;: &quot;IfNotPresent&quot;,</span><br><span class="line">            &quot;securityContext&quot;: &#123;</span><br><span class="line">              &quot;privileged&quot;: false</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        ],</span><br><span class="line">        &quot;restartPolicy&quot;: &quot;Always&quot;,</span><br><span class="line">        &quot;terminationGracePeriodSeconds&quot;: 30,</span><br><span class="line">        &quot;dnsPolicy&quot;: &quot;ClusterFirst&quot;,</span><br><span class="line">        &quot;securityContext&quot;: &#123;&#125;,</span><br><span class="line">        &quot;schedulerName&quot;: &quot;default-scheduler&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;strategy&quot;: &#123;</span><br><span class="line">      &quot;type&quot;: &quot;RollingUpdate&quot;,</span><br><span class="line">      &quot;rollingUpdate&quot;: &#123;</span><br><span class="line">        &quot;maxUnavailable&quot;: &quot;25%&quot;,</span><br><span class="line">        &quot;maxSurge&quot;: &quot;25%&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;revisionHistoryLimit&quot;: 10,</span><br><span class="line">    &quot;progressDeadlineSeconds&quot;: 600</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;status&quot;: &#123;</span><br><span class="line">    &quot;observedGeneration&quot;: 1,</span><br><span class="line">    &quot;replicas&quot;: 1,</span><br><span class="line">    &quot;updatedReplicas&quot;: 1,</span><br><span class="line">    &quot;readyReplicas&quot;: 1,</span><br><span class="line">    &quot;availableReplicas&quot;: 1,</span><br><span class="line">    &quot;conditions&quot;: [</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;type&quot;: &quot;Available&quot;,</span><br><span class="line">        &quot;status&quot;: &quot;True&quot;,</span><br><span class="line">        &quot;lastUpdateTime&quot;: &quot;2018-02-27T03:19:29Z&quot;,</span><br><span class="line">        &quot;lastTransitionTime&quot;: &quot;2018-02-27T03:19:29Z&quot;,</span><br><span class="line">        &quot;reason&quot;: &quot;MinimumReplicasAvailable&quot;,</span><br><span class="line">        &quot;message&quot;: &quot;Deployment has minimum availability.&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;type&quot;: &quot;Progressing&quot;,</span><br><span class="line">        &quot;status&quot;: &quot;True&quot;,</span><br><span class="line">        &quot;lastUpdateTime&quot;: &quot;2018-02-27T03:19:29Z&quot;,</span><br><span class="line">        &quot;lastTransitionTime&quot;: &quot;2018-02-27T03:19:28Z&quot;,</span><br><span class="line">        &quot;reason&quot;: &quot;NewReplicaSetAvailable&quot;,</span><br><span class="line">        &quot;message&quot;: &quot;ReplicaSet \&quot;nginx-all-9bf75995b\&quot; has successfully progressed.&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p>
<p>3:登陆 nginx-all容器 修改/etc/nginx/conf.d/default.conf  这一步 可以通过配合config server 来实现重启容器更新配置来实现配置的刷新</p>
 
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name  localhost;</span><br><span class="line"></span><br><span class="line">    #charset koi8-r;</span><br><span class="line">    #access_log  /var/log/nginx/host.access.log  main;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        root   /usr/share/nginx/html;</span><br><span class="line">        index  index.html index.htm;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    location /test&#123;</span><br><span class="line">        # 配置 服务名称+port 不需要使用nodePort直接使用启动容器时候映射的那个port  hello-node 启动参数为-p 8080:80 所以这里使用8080 即可 </span><br><span class="line">        proxy_pass http://hello-node:8080;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    error_page   500 502 503 504  /50x.html;</span><br><span class="line">    location = /50x.html &#123;</span><br><span class="line">        root   /usr/share/nginx/html;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>4：配置nginx service<br>配置 nginx service的nodePort<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl edit service  nginx-all</span><br></pre></td></tr></table></figure><p></p>
<p>修改配置如下 就是配置 nodePort<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;kind&quot;: &quot;Service&quot;,</span><br><span class="line">  &quot;apiVersion&quot;: &quot;v1&quot;,</span><br><span class="line">  &quot;metadata&quot;: &#123;</span><br><span class="line">    &quot;name&quot;: &quot;nginx-all&quot;,</span><br><span class="line">    &quot;namespace&quot;: &quot;default&quot;,</span><br><span class="line">    &quot;selfLink&quot;: &quot;/api/v1/namespaces/default/services/nginx-all&quot;,</span><br><span class="line">    &quot;uid&quot;: &quot;050ea702-1b6d-11e8-a211-080027fc8712&quot;,</span><br><span class="line">    &quot;resourceVersion&quot;: &quot;45659&quot;,</span><br><span class="line">    &quot;creationTimestamp&quot;: &quot;2018-02-27T03:19:28Z&quot;,</span><br><span class="line">    &quot;labels&quot;: &#123;</span><br><span class="line">      &quot;k8s-app&quot;: &quot;nginx-all&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;spec&quot;: &#123;</span><br><span class="line">    &quot;ports&quot;: [</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;name&quot;: &quot;tcp-8080-80-cvw8l&quot;,</span><br><span class="line">        &quot;protocol&quot;: &quot;TCP&quot;,</span><br><span class="line">        &quot;port&quot;: 8080,</span><br><span class="line">        &quot;targetPort&quot;: 80,</span><br><span class="line">        &quot;nodePort&quot;: 31000</span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    &quot;selector&quot;: &#123;</span><br><span class="line">      &quot;k8s-app&quot;: &quot;nginx-all&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;clusterIP&quot;: &quot;10.102.241.166&quot;,</span><br><span class="line">    &quot;type&quot;: &quot;NodePort&quot;,</span><br><span class="line">    &quot;sessionAffinity&quot;: &quot;None&quot;,</span><br><span class="line">    &quot;externalTrafficPolicy&quot;: &quot;Cluster&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;status&quot;: &#123;</span><br><span class="line">    &quot;loadBalancer&quot;: &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p>
<p>6:通过nginx访问hello-node服务<br>minikube的 node ip 默认为192.168.99.100<br>访问 <a href="http://192.168.99.100:31000/test" target="_blank" rel="noopener">http://192.168.99.100:31000/test</a> 就是通过nginx代理访问了hello-node 服务  </p>
<h4 id="6-service-loadbalancer"><a href="#6-service-loadbalancer" class="headerlink" title="6: service loadbalancer"></a>6: service loadbalancer</h4><p>可以用一个clusterIP 共享一个ip<br>配合自定义代理可以做到一个ip 多个不同端口访问不同服务 配合nginx做代理 做到不受服务的变更 只需要一个clusterIp即可配置nginx 屏蔽底层的serviceIp变化<br>这种方案 有单点故障的隐患 和性能问题 暂时不成熟</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结:"></a>总结:</h2><p>说到底 暴露服务还是要通过k8s内部的网络去做<br>如果像我一样懒 那就选择ingress<br>当然我最终选择还是 自定义方案<br>没啥别的 就是nginx配置 之前就有  ingress的配置 特么还要我自己写 肯定选择自定义方案<br>如果是新项目 或者不偷懒 建议选择ingress方案 因为毕竟是官方的套路 很多人实践过 后续简单  自定义方案最终还是需要一个基佬去维护配置的<br>这里有个坑  就是 如果为了方便 配置 建议所有服务节点一定要有一个统一前缀  如果没有 请尽量推动各位基佬增加一个统一前缀 不然写配置 要写疯</p>]]></content>
      
        <categories>
            
            <category> k8s </category>
            
        </categories>
        
        
        <tags>
            
            <tag> docker </tag>
            
            <tag> k8s </tag>
            
            <tag> 实用 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[minikube快速搭建k8s测试环境]]></title>
      <url>/ming/ba1e0f81.html</url>
      <content type="html"><![CDATA[<p>有朋友问我 k8s测试环境如何快速搭建 官方推荐的是minikube<br>其实吧 阿里云上这种文档一抓一大把<br>参考文档:<a href="https://yq.aliyun.com/articles/221687" target="_blank" rel="noopener">https://yq.aliyun.com/articles/221687</a></p><h4 id="运行环境"><a href="#运行环境" class="headerlink" title="运行环境"></a>运行环境</h4><ul><li>ubuntu 16.04 至少这个版本 低了不行 没有snap</li><li>可以访问互联网<h4 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h4>0:更新系统apt包相关资源<br>需要手动调整到国内的镜像源 不然要慢死人了<br>安装snap snapd 方便后续安装kubectl<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update &amp;&amp; sudo apt upgrade </span><br><span class="line">sudo apt install snap  snapd</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>1：安装kubectl<br>比较懒  采用 snap(类似apt的东西) 安装kubectl<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo snap install kubectl</span><br></pre></td></tr></table></figure><p></p>
<p>2：安装golang<br>使用apt 安装golang<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install golang</span><br></pre></td></tr></table></figure><p></p>
<p>3: 安装minikube<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -Lo minikube http://kubernetes.oss-cn-hangzhou.aliyuncs.com/minikube/releases/v0.25.0/minikube-linux-amd64 &amp;&amp; chmod +x minikube &amp;&amp; sudo mv minikube /usr/local/bin/</span><br></pre></td></tr></table></figure><p></p>
<p>4:启动minikube<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">minikube start --registry-mirror=https://registry.docker-cn.com</span><br></pre></td></tr></table></figure><p></p>
<p>5:尝试kubectl是否可用<br>在启动minikube的时候 它会自动覆盖kubectl之前的链接配置 直接使用就是链接到minikube创建的k8s集群中<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get all</span><br></pre></td></tr></table></figure><p></p>
<p>6:打开k8s  web ui<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">minikube dashboard</span><br></pre></td></tr></table></figure><p></p>
<p>执行完毕后会自动弹出浏览器 如果没有 请尝试 <a href="http://192.168.99.100:30000" target="_blank" rel="noopener">http://192.168.99.100:30000</a><br>7:现在就可以在web ui中或者终端中使用kubectl操控k8s集群了<br>此集群k8s版本为1.9 </p>
<h4 id="总结-这个方法只能在本地快速搭建起来一套测试环境-如果是真实运行环境还是要手动的去安装-高版本的k8s-安装基本上对于一个熟悉linux的用户来说没啥难度-总的就是安装各个组件、配置各个组件-即可"><a href="#总结-这个方法只能在本地快速搭建起来一套测试环境-如果是真实运行环境还是要手动的去安装-高版本的k8s-安装基本上对于一个熟悉linux的用户来说没啥难度-总的就是安装各个组件、配置各个组件-即可" class="headerlink" title="总结: 这个方法只能在本地快速搭建起来一套测试环境 如果是真实运行环境还是要手动的去安装  高版本的k8s 安装基本上对于一个熟悉linux的用户来说没啥难度 总的就是安装各个组件、配置各个组件 即可"></a>总结: 这个方法只能在本地快速搭建起来一套测试环境 如果是真实运行环境还是要手动的去安装  高版本的k8s 安装基本上对于一个熟悉linux的用户来说没啥难度 总的就是安装各个组件、配置各个组件 即可</h4>]]></content>
      
        <categories>
            
            <category> k8s </category>
            
        </categories>
        
        
        <tags>
            
            <tag> docker </tag>
            
            <tag> k8s </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[docker启动jenkins]]></title>
      <url>/ming/5e5f86c0.html</url>
      <content type="html"><![CDATA[<p>####在2.x版本jenkins 中 出现了 pipe 所以决定通过较为新的方式去从新部署一套基于jenkins 的docker 项目 自动化部署<br><a href="https://dzone.com/refcardz/continuous-delivery-with-jenkins-workflow" target="_blank" rel="noopener">https://dzone.com/refcardz/continuous-delivery-with-jenkins-workflow</a></p><h4 id="安装-jenkins-docker版本"><a href="#安装-jenkins-docker版本" class="headerlink" title="安装 jenkins docker版本"></a>安装 jenkins docker版本</h4><p>1:jenkins 默认密码<br>还是jenkins 容器中的安装目录下的老位置 ${jenkins安装位置}/secrets/initialAdminPassword</p><p>2:jenkins 容器内部运行 docker相关命令<br>方案1:docker-in-docker 就是 在容器内部 安装容器<br>这种方案 需要在jenkins 镜像上进行修改 比较麻烦 因为 docker里面是经过高度简化的系统 安装起来麻烦<br>遇到错误:<br>因为 docker主线程 是jenkins 而docker是需要在root权限下运行<br>要把jenkins用户加入到docker用户组中 即可用jenkins 用户执行docker 命令<br>alpine 没有找到如何切换 用户组 usermod 之类的命令 alpine 没有</p><p>方案2:【jenkins官网方案】docker-out-docker 通过目录影射 把docker.sock 影射到jenkins docker中<br>这种方式 安全性很差 容器 能够访问宿主机的功能<br>如果做好 虚拟机或者物理机级别的隔离 其实还不错<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker  run -u root --rm -d -p 20000:8080 -v jenkins-data:/var/jenkins_home -v /var/run/docker.sock:/var/run/docker.sock -v /var/lib/docker:/var/lib/docker --privileged  jenkinsci/blueocean</span><br></pre></td></tr></table></figure><p></p>
<p>方案3:【危险方案】把 docker socket暴露出去 调用<br>看到这种方案  玩度不想玩 放弃</p>]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[基于jenkins2.X和docker的持续集成的实例]]></title>
      <url>/ming/4732d3fc.html</url>
      <content type="html"><![CDATA[<h4 id="实例功能"><a href="#实例功能" class="headerlink" title="实例功能"></a>实例功能</h4><ul><li>自动编译、打包</li><li>自动分发、部署</li><li>钉钉消息通知</li><li>交互式部署</li></ul><p>通过jenkins部署一个index.html首页</p><h4 id="实现所需技能"><a href="#实现所需技能" class="headerlink" title="实现所需技能"></a>实现所需技能</h4><ul><li>jenkins</li><li>docker</li><li>groovy 写脚本</li><li>项目打包</li><li>linux常用技术</li><li>java</li></ul><h4 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h4><p>以这个目录为root目录: <a href="https://github.com/xuxianyu/info/tree/master/mingJenkins/simple" target="_blank" rel="noopener">https://github.com/xuxianyu/info/tree/master/mingJenkins/simple</a><br>0:创建index.html<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;ming&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">ming</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p></p>
<p>1：创建docker file<br>在项目目录下建立 Dockerfile<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">FROM docker.io/nginx:1.13-alpine</span><br><span class="line">MAINTAINER &apos;ming&apos;</span><br><span class="line"># 复制index.html 到nginx 工作目录  </span><br><span class="line">COPY index.html /usr/share/nginx/html</span><br></pre></td></tr></table></figure><p></p>
<p>2：创建Jenkinsfile<br>Jenkinsfile 是jenkins出的用一套用来定义流水线模式的任务的脚本<br>其中有两种模式</p>
<ul>
<li>pipeline jenkins标准的 配置脚本模式</li>
<li>script  使用groovy dsl 实现的jenkins 流水线模式脚本  </li>
</ul>
<p>我采用的是script模式  因为灵活 好用 两者区别请参考jenkins官网<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br></pre></td><td class="code"><pre><span class="line">import java.text.SimpleDateFormat</span><br><span class="line"></span><br><span class="line">/**jenkinsfile 使用groovy dsl方式实现</span><br><span class="line"> *  采用 基于groovy 控制流程   groovy dsl +shell 共同协作 部署发布</span><br><span class="line"> *  先在 dev rc 环境使用  单节点 直接停止之后部署   等待寻找对环境稳定影响较少的 多节点部署+dev rc  uat 环境单节点部署方案</span><br><span class="line"> *  多节点部署:</span><br><span class="line"> *  当前想法是使用 用空间换取时间的方式</span><br><span class="line"> *  提供两套nginx 配置</span><br><span class="line"> *  每次先启动 然后切换配置</span><br><span class="line"> *  需要项目提供监听接口 监听当前是否有在执行的任务</span><br><span class="line"> *  需要事务由一定的全局事务 或者一定的补偿机制 保证最终一致性</span><br><span class="line"> *</span><br><span class="line"> *</span><br><span class="line"> *</span><br><span class="line"> *</span><br><span class="line"> *  修改此脚本需要的技能点:</span><br><span class="line"> *  0: 熟悉 项目版本管理工具 如 svn  git</span><br><span class="line"> *  1:熟悉 java groovy  此脚步使用是groovy 和部分jdk的语法书写</span><br><span class="line"> *  2:熟悉jenkins 熟悉 2.x以上的pipe 方式的 jenkins task  由于jenkins官方文档 保持一贯的简略的风格 查阅资料请直接上github 或者stack overflow 之类的干货网站</span><br><span class="line"> *  3:熟悉项目打包 如java的 maven打包 、 h5的 npm 打包、php的打包  、c# 打包</span><br><span class="line"> *  4:熟悉 linux相关功能 及其原理 例如 ssh密钥验证原理</span><br><span class="line"> *  5:熟悉docker 基础原理 及其相关命令</span><br><span class="line"> *  6:了解 自动化测试 大致使用方法 如接口测试、ui测试 如何实现</span><br><span class="line"> *  7:了解代码审查相关工具 使用</span><br><span class="line"> *  8:了解钉钉、mail、jira 通知方式、如钉钉的webhook  mail发送原理、jira webhook</span><br><span class="line"> *</span><br><span class="line"> *</span><br><span class="line"> *</span><br><span class="line"> *  编码规范:</span><br><span class="line"> *  0:注释一定要写全 特别是方法的注释</span><br><span class="line"> *  1:遵循java 编码规范  只能说尽量遵循  毕竟不是java</span><br><span class="line"> *  2:尽可能的使用 jenkins插件中的方法 而不是groovy dsl 调用 shell</span><br><span class="line"> *  3:使用默认参数时候 请尽量在最顶层方法使用  基础性的方法 尽量避免使用默认参数</span><br><span class="line"> *  4:由于groovy的sdk 可拆分的特性 jenkins对于部分groovy写法不支持</span><br><span class="line"> *  5:groovy dsl  可以使用jdk的写法去写  支持完整的jdk  前提是环境里面有jdk  没有就不行</span><br><span class="line"> *  6:为了保持 灵活性  只能使用 script pipe   禁止改称pipeline 模式书写</span><br><span class="line"> *</span><br><span class="line"> * @author ming</span><br><span class="line"> * @mail 18120580001@163.com</span><br><span class="line"> * @date 2017-12-21 16:44</span><br><span class="line"> * */</span><br><span class="line"></span><br><span class="line">node &#123;</span><br><span class="line">    //启动任务的参数</span><br><span class="line">    properties([</span><br><span class="line">            parameters([</span><br><span class="line"></span><br><span class="line">                    //项目名称</span><br><span class="line">                    string(defaultValue: &quot;&#123;项目名称 只能是小写英文 和-&#125;&quot;, description: &quot;项目名称&quot;, name: &quot;projectName&quot;),</span><br><span class="line">                    //项目版本</span><br><span class="line">                    string(defaultValue: &quot;2.0.0&quot;, description: &quot;项目版本&quot;, name: &quot;projectVersion&quot;),</span><br><span class="line">                    //项目默认部署端口</span><br><span class="line">                    string(defaultValue: &quot;10000&quot;, description: &quot;项目默认部署端口&quot;, name: &quot;defaultPort&quot;),</span><br><span class="line">                    // 容器内部端口</span><br><span class="line">                    string(defaultValue: &quot;80&quot;, description: &quot;项目默认部署端口&quot;, name: &quot;imagePort&quot;),</span><br><span class="line">                    // dev 环境服务器</span><br><span class="line">                    string(defaultValue: &quot;&#123;dev环境服务器地址&#125;&quot;, description: &quot;dev环境服务器地址&quot;, name: &quot;devHost&quot;),</span><br><span class="line">                    //dev 环境 ssh 端口</span><br><span class="line">                    string(defaultValue: &quot;&#123;dev环境服务器ssh登陆端口&#125;&quot;, description: &quot;dev环境服务器ssh端口&quot;, name: &quot;devHostPort&quot;),</span><br><span class="line">                    //docker 私服地址</span><br><span class="line">                    string(defaultValue: &quot;&#123;docker 私服仓库地址 &#125;&quot;, description: &quot;docker仓库地址&quot;, name: &quot;dockerRegistry&quot;),</span><br><span class="line">                    // 项目通知用户组   钉钉艾特方式</span><br><span class="line">                    string(defaultValue: &apos;&quot;&#123;注册钉钉的电话号码&#125;&quot;&apos;, description: &quot;项目组成员钉钉通知电话号码&quot;, name: &quot;mobilesGroup&quot;),</span><br><span class="line">                    //容器名称</span><br><span class="line">                    string(defaultValue: &quot;&#123;容器启动之后的名称&#125;&quot;, description: &quot;容器名称&quot;, name: &quot;containerName&quot;),</span><br><span class="line">                    // 获取配置方式</span><br><span class="line">                    // $&#123;params.$&#123;name&#125;&#125;</span><br><span class="line">            ])</span><br><span class="line">    ])</span><br><span class="line"></span><br><span class="line">    svnScmParams = checkout(scm)</span><br><span class="line"></span><br><span class="line">    //全局变量</span><br><span class="line">    // docker镜像私服</span><br><span class="line">    String dockerRegistryHost</span><br><span class="line">    if (&quot;$&#123;params.dockerRegistry&#125;&quot;.startsWith(&quot;http://&quot;)) &#123;</span><br><span class="line">        dockerRegistryHost = &quot;$&#123;params.dockerRegistry&#125;&quot;.substring(7)</span><br><span class="line">    &#125; else if (&quot;$&#123;params.dockerRegistry&#125;&quot;.startsWith(&quot;https://&quot;)) &#123;</span><br><span class="line">        dockerRegistryHost = &quot;$&#123;params.dockerRegistry&#125;&quot;.substring(8)</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        throw new Exception(&quot;docker镜像仓库前缀必须是http:// 或者https：//&quot;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //dev 仓库镜像名称</span><br><span class="line">    String devRegistryImageName</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    // 刷新db的 镜像名称</span><br><span class="line">    //流程定义</span><br><span class="line">    try &#123;</span><br><span class="line">        //建立编译环境  node+ docker in docker 环境 </span><br><span class="line">        docker.image(&apos;car2godeveloper/dind-node-build-runner&apos;).inside(&apos;--privileged&apos;) &#123;</span><br><span class="line"></span><br><span class="line">            stage(&apos;编译项目&apos;) &#123;</span><br><span class="line">                //闭包 递归 调用自己</span><br><span class="line">                Closure compile = &#123; -&gt;</span><br><span class="line">                    try &#123;</span><br><span class="line">                        print &apos;编译项目&apos;</span><br><span class="line">                        //存放编译相关指令</span><br><span class="line">                        sendDD(&quot;编译通过&quot;, &quot;$&#123;params.mobilesGroup&#125;&quot;)</span><br><span class="line">                    &#125; catch (e) &#123;</span><br><span class="line">                        if (isStop(e)) &#123;</span><br><span class="line">                            sendDD(&quot;编译失败::$&#123;e.getMessage()&#125;&quot;, &quot;$&#123;params.mobilesGroup&#125;&quot;)</span><br><span class="line">                            throw e</span><br><span class="line">                        &#125; else &#123;</span><br><span class="line">                            sendDD(&quot;编译失败重新执行::$&#123;e.getMessage()&#125;&quot;, &quot;$&#123;params.mobilesGroup&#125;&quot;)</span><br><span class="line">                            call()</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                compile.call()</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            stage(&apos;构建发布项目docker image&apos;) &#123;</span><br><span class="line">                Closure buildProjectDockerImage = &#123; -&gt;</span><br><span class="line">                    try &#123;</span><br><span class="line">                        sh &apos;docker --version&apos;</span><br><span class="line">                        //发布到私服仓库 &#123;镜像仓库地址&#125;/&#123;镜像命名空间&#125;/&#123;镜像名称&#125;:&#123;tag标签&#125;</span><br><span class="line">                        //imageName=$&#123;dockerRepository&#125;/$&#123;namespace&#125;/$&#123;projectName&#125;-$&#123;projectVersion&#125;-$&#123;环境&#125;:$&#123;localDate&#125;</span><br><span class="line">                        String localDate = geFormatterLocalDate(&quot;yyyyMMdd.HHmmss&quot;)</span><br><span class="line">                        imageName = &quot;$&#123;params.projectName&#125;-$&#123;params.projectVersion&#125;-dev:$&#123;localDate&#125;&quot;</span><br><span class="line">                        docker.withRegistry(&quot;$&#123;params.dockerRegistry&#125;&quot;) &#123;</span><br><span class="line">                            docker.build(imageName).push()</span><br><span class="line">                            devRegistryImageName = &quot;$&#123;dockerRegistryHost&#125;/$&#123;imageName&#125;&quot;</span><br><span class="line">                        &#125;</span><br><span class="line">                        sendDD(&quot;构建发布镜像成功&quot;, &quot;$&#123;params.mobilesGroup&#125;&quot;)</span><br><span class="line">                    &#125; catch (e) &#123;</span><br><span class="line">                        if (isStop(e)) &#123;</span><br><span class="line">                            sendDD(&quot;构建发布镜像失败::$&#123;e.getMessage()&#125;&quot;, &quot;$&#123;params.mobilesGroup&#125;&quot;)</span><br><span class="line">                            throw e</span><br><span class="line">                        &#125; else &#123;</span><br><span class="line">                            sendDD(&quot;构建发布镜像失败重新执行::$&#123;e.getMessage()&#125;&quot;, &quot;$&#123;params.mobilesGroup&#125;&quot;)</span><br><span class="line">                            call()</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                buildProjectDockerImage.call()</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            stage(&apos;部署dev环境&apos;) &#123;</span><br><span class="line">                Closure deployDev = &#123; -&gt;</span><br><span class="line">                    try &#123;</span><br><span class="line">                        print &apos;部署dev环境&apos;</span><br><span class="line">                        deploy(&quot;$&#123;params.devHost&#125;&quot;, &quot;$&#123;params.defaultPort&#125;&quot;, &quot;$&#123;params.containerName&#125;&quot;, &quot;$&#123;devRegistryImageName&#125;&quot;, &quot;&quot;,&quot;$&#123;params.imagePort&#125;&quot;, &quot;$&#123;params.devHostPort&#125;&quot;)</span><br><span class="line">                        //ssh远程部署</span><br><span class="line">                        sendDD(&quot;部署dev成功&quot;, &quot;$&#123;params.mobilesGroup&#125;&quot;)</span><br><span class="line">                    &#125; catch (e) &#123;</span><br><span class="line">                        if (isStop(e)) &#123;</span><br><span class="line">                            sendDD(&quot;部署dev失败::$&#123;e.getMessage()&#125;&quot;, &quot;$&#123;params.mobilesGroup&#125;&quot;)</span><br><span class="line">                            throw e</span><br><span class="line">                        &#125; else &#123;</span><br><span class="line">                            sendDD(&quot;部署dev失败重新执行::$&#123;e.getMessage()&#125;&quot;, &quot;$&#123;params.mobilesGroup&#125;&quot;)</span><br><span class="line">                            call()</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                deployDev.call()</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            stage(&apos;dev环境自动化测试&apos;) &#123;</span><br><span class="line">                Closure autoTestDev = &#123; -&gt;</span><br><span class="line">                    try &#123;</span><br><span class="line">                        print &apos;dev环境自动化测试&apos;</span><br><span class="line">                        //自动化测试指令</span><br><span class="line">                        sendDD(&quot;自动化测试dev环境成功&quot;, &quot;$&#123;params.mobilesGroup&#125;&quot;)</span><br><span class="line">                    &#125; catch (e) &#123;</span><br><span class="line">                        if (isStop(e)) &#123;</span><br><span class="line">                            sendDD(&quot;自动化测试dev环境失败::$&#123;e.getMessage()&#125;&quot;, &quot;$&#123;params.mobilesGroup&#125;&quot;)</span><br><span class="line">                            throw e</span><br><span class="line">                        &#125; else &#123;</span><br><span class="line">                            sendDD(&quot;自动化测试dev环境失败重新执行::$&#123;e.getMessage()&#125;&quot;, &quot;$&#123;params.mobilesGroup&#125;&quot;)</span><br><span class="line">                            call()</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                autoTestDev.call()</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            stage(&apos;dev环境功能确认？(发布rc环境镜像)&apos;) &#123;</span><br><span class="line">                Closure releaseDev = &#123; -&gt;</span><br><span class="line">                    try &#123;</span><br><span class="line">                        def userInput = input(</span><br><span class="line">                                id: &apos;userInput&apos;, message: &apos;发布备注:&apos;, parameters: [</span><br><span class="line">                                [$class: &apos;TextParameterDefinition&apos;, defaultValue: &apos;无&apos;, description: &apos;发布备注:&apos;, name: &apos;memo&apos;],</span><br><span class="line">                        ])</span><br><span class="line">                        print userInput</span><br><span class="line">                        //替换 名称中的 dev标记   在dev 机器上完成</span><br><span class="line">                        rcRegistryImageName = devRegistryImageName.replaceAll(&quot;-dev&quot;, &quot;-rc&quot;)</span><br><span class="line">                        release(rcRegistryImageName, devRegistryImageName, &quot;$&#123;params.devHost&#125;&quot;, &quot;$&#123;params.devHostPort&#125;&quot;)</span><br><span class="line">                        sh &apos;echo  dev环境功能测试确定&apos;</span><br><span class="line">                        sendDD(&quot;dev环境发布到rc仓库成功&quot;, &quot;$&#123;params.mobilesGroup&#125;&quot;)</span><br><span class="line">                    &#125; catch (e) &#123;</span><br><span class="line">                        if (isStop(e)) &#123;</span><br><span class="line">                            sendDD(&quot;dev环境发布到rc仓库失败::$&#123;e.getMessage()&#125;&quot;, &quot;$&#123;params.mobilesGroup&#125;&quot;)</span><br><span class="line">                            throw e</span><br><span class="line">                        &#125; else &#123;</span><br><span class="line">                            sendDD(&quot;dev环境发布到rc仓库失败重新执行::$&#123;e.getMessage()&#125;&quot;, &quot;$&#123;params.mobilesGroup&#125;&quot;)</span><br><span class="line">                            call()</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                releaseDev.call()</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            //........  后面都是重复性的节点  直接复制改改就是的</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125; catch (e) &#123;</span><br><span class="line">        print currentBuild.result</span><br><span class="line">        sendDD(&quot;持续集成构建失败&quot; + e.getMessage(), &quot;$&#123;params.mobilesGroup&#125;&quot;)</span><br><span class="line">        throw e</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/** 发送到钉钉  使用 shell脚本发送 因为 jenkins 的groovy不是完整的gdk功能 调jdk 又比较麻烦   干脆直接拼写 shell命令执行算了</span><br><span class="line"> *  默认钉钉 url  发版通知群jenkins 机器人</span><br><span class="line"> * @param info 消息内容</span><br><span class="line"> * @param mobiles 艾特电话号码组&#123;@link *MobilesGroup &#125;</span><br><span class="line"> * @author ming</span><br><span class="line"> * @date 2017-12-22 18:58</span><br><span class="line"> * */</span><br><span class="line">def sendDD(String info, String mobiles</span><br><span class="line">           , String url = &apos;https://oapi.dingtalk.com/robot/send?access_token=&#123;钉钉机器人的token&#125;&apos;) &#123;</span><br><span class="line">    String headers = &apos;Content-Type: application/json&apos;</span><br><span class="line">    String atStr = &quot;&quot;</span><br><span class="line">    String[] mobilesArr = mobiles.split(&quot;,&quot;)</span><br><span class="line">    for (int i = 0; i &lt; mobilesArr.length; i++) &#123;</span><br><span class="line">        //截取 2&lt;=n &lt;13中间11 位电话号码</span><br><span class="line">        String tmp = &quot;$&#123;mobilesArr[i]&#125;&quot;.substring(1, 12)</span><br><span class="line">        atStr = atStr + &quot; @$&#123;tmp&#125;&quot;</span><br><span class="line">    &#125;</span><br><span class="line">    String jsonStr = &quot;&#123; \&quot;msgtype\&quot;: \&quot;markdown\&quot;&quot; +</span><br><span class="line">            &quot;, \&quot;markdown\&quot;: &#123; \&quot;title\&quot;:\&quot;执行结果通知\&quot;, \&quot;text\&quot;: \&quot;#### $&#123;atStr&#125; 执行结果通知:$&#123;params.projectName&#125;项目:$&#123;info&#125;\&quot; &#125;,&quot; +</span><br><span class="line">            &quot; \&quot;at\&quot;: &#123; \&quot;atMobiles\&quot;: [$&#123;mobiles&#125;], \&quot;isAtAll\&quot;: false &#125; &#125;&quot;</span><br><span class="line">    String script = &quot;curl \&apos;$&#123;url&#125;\&apos; -H \&apos;$&#123;headers&#125;\&apos; -d \&apos;$&#123;jsonStr&#125;\&apos; &amp;&amp; exit 0 &quot;</span><br><span class="line">    sh script</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/** 预留方法 发送邮件</span><br><span class="line"> *</span><br><span class="line"> * @author ming</span><br><span class="line"> * @date 2017-12-22 19:01</span><br><span class="line"> * */</span><br><span class="line">def sendMail() &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**根据时间格式化格式 获取当前时间  默认 yyyy-MM-dd HH:mm:ss</span><br><span class="line"> * @param patten</span><br><span class="line"> * @return dateStr</span><br><span class="line"> * @author ming</span><br><span class="line"> * @date 2017-12-22 23:39</span><br><span class="line"> * */</span><br><span class="line">def geFormatterLocalDate(String patten = &quot;yyyy-MM-dd HH:mm:ss&quot;) &#123;</span><br><span class="line">    Date date = new Date()</span><br><span class="line">    SimpleDateFormat formatter = new SimpleDateFormat(patten)</span><br><span class="line">    formatter.format(date)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**流程错误 处理</span><br><span class="line"> *</span><br><span class="line"> * @author ming</span><br><span class="line"> * @date 2017-12-27 22:29</span><br><span class="line"> * */</span><br><span class="line">def boolean isStop(Exception e) &#123;</span><br><span class="line">    print e.getMessage()</span><br><span class="line">    def userInput = input(</span><br><span class="line">            id: &apos;userInput&apos;, message: &apos;是否中止 此次流程:&apos;, parameters: [</span><br><span class="line">            [$class: &apos;TextParameterDefinition&apos;, defaultValue: &apos;true&apos;, description: &apos;是否中止此次流程&apos;, name: &apos;flag&apos;],</span><br><span class="line">    ])</span><br><span class="line">    print userInput</span><br><span class="line">    if (&apos;true&apos;.equalsIgnoreCase(userInput)) &#123;</span><br><span class="line">        return true</span><br><span class="line">    &#125; else if (&apos;false&apos;.equalsIgnoreCase(userInput)) &#123;</span><br><span class="line">        return false</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/** 运行容器</span><br><span class="line"> *</span><br><span class="line"> * @param port</span><br><span class="line"> * @param containerName</span><br><span class="line"> * @param registryImageName</span><br><span class="line"> * @param host</span><br><span class="line"> * @param sshKey</span><br><span class="line"> * @author ming</span><br><span class="line"> * @date 2017-12-26 23:36</span><br><span class="line"> * */</span><br><span class="line">def runSSHDocker(String port, String containerName, String registryImageName, String env, String imagePort,String host, String sshPort, String sshKey) &#123;</span><br><span class="line">    // jenkins 配置的sshkey id</span><br><span class="line">    sshagent([sshKey]) &#123;</span><br><span class="line">        //登陆服务器之后启动容器的命令</span><br><span class="line">        String runCmd = &quot;docker run -d -p $&#123;port&#125;:$&#123;imagePort&#125; $&#123;env&#125; --name $&#123;containerName&#125; $&#123;registryImageName&#125;&quot;</span><br><span class="line">        // 登陆 服务器 运行容器</span><br><span class="line">        sh &quot;ssh -o StrictHostKeyChecking=no -t -t -p $&#123;sshPort&#125; root@$&#123;host&#125; &apos;$&#123;runCmd&#125;&apos;&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/** 删除容器</span><br><span class="line"> *</span><br><span class="line"> * @param containerName</span><br><span class="line"> * @param host</span><br><span class="line"> * @param sshKey</span><br><span class="line"> * @author ming</span><br><span class="line"> * @date 2017-12-26 23:36</span><br><span class="line"> * */</span><br><span class="line">def removeSSHContainer(String containerName, String host, String sshPort, String sshKey) &#123;</span><br><span class="line">    sshagent([sshKey]) &#123;</span><br><span class="line">        //登陆服务器之后启动容器的命令</span><br><span class="line">        String runCmd = &quot;docker rm -f $&#123;containerName&#125;&quot;</span><br><span class="line">        // 登陆 服务器 运行容器</span><br><span class="line">        sh &quot;ssh -o StrictHostKeyChecking=no -t -t -p $&#123;sshPort&#125; root@$&#123;host&#125; &apos;$&#123;runCmd&#125;&apos;&quot;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/** 删除镜像</span><br><span class="line"> *</span><br><span class="line"> * @param registryImageName</span><br><span class="line"> * @param host</span><br><span class="line"> * @param sshKey</span><br><span class="line"> * @author ming</span><br><span class="line"> * @date 2017-12-26 23:36</span><br><span class="line"> * */</span><br><span class="line">def removeSSHImage(String registryImageName, String host, String sshPort, String sshKey) &#123;</span><br><span class="line">    sshagent([sshKey]) &#123;</span><br><span class="line">        //登陆服务器之后启动容器的命令</span><br><span class="line">        String runCmd = &quot;docker rmi $&#123;registryImageName&#125;&quot;</span><br><span class="line">        // 登陆 服务器 运行容器</span><br><span class="line">        sh &quot;ssh -o StrictHostKeyChecking=no -t -t -p $&#123;sshPort&#125; root@$&#123;host&#125; &apos;$&#123;runCmd&#125;&apos;&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**修改远程服务中的 imagename</span><br><span class="line"> * 这里的imagename 必须是 仓库地址/镜像名:tag</span><br><span class="line"> * @param newImageName</span><br><span class="line"> * @param oldImageName</span><br><span class="line"> * @author ming</span><br><span class="line"> * @date 2017-12-27 10:04</span><br><span class="line"> * */</span><br><span class="line">def updateSSHImamgeName(String newImageName, String oldImageName, String host, String sshPort, String sshKey) &#123;</span><br><span class="line">    sshagent([sshKey]) &#123;</span><br><span class="line">        String runCmd = &quot;docker tag $&#123;oldImageName&#125; $&#123;newImageName&#125;&quot;</span><br><span class="line">        sh &quot;ssh -o StrictHostKeyChecking=no -t -t -p $&#123;sshPort&#125;  root@$&#123;host&#125; &apos;$&#123;runCmd&#125;&apos;&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/** 推送远程服务器上的镜像</span><br><span class="line"> * 这里镜像名称 必须是 仓库地址/镜像名:tag 格式</span><br><span class="line"> * @param imageName</span><br><span class="line"> * @author ming</span><br><span class="line"> * @date 2017-12-27 10:08</span><br><span class="line"> * */</span><br><span class="line">def pushSSHImage(String imageName, String host, String sshPort, String sshKey) &#123;</span><br><span class="line">    sshagent([sshKey]) &#123;</span><br><span class="line">        String runCmd = &quot;docker push $&#123;imageName&#125;&quot;</span><br><span class="line">        sh &quot;ssh -o StrictHostKeyChecking=no -t -t -p $&#123;sshPort&#125; root@$&#123;host&#125; &apos;$&#123;runCmd&#125;&apos;&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/** 部署</span><br><span class="line"> * @param host</span><br><span class="line"> * @param port</span><br><span class="line"> * @param containerName</span><br><span class="line"> * @param imageName</span><br><span class="line"> * @author ming</span><br><span class="line"> * @date 2017-12-27 09:43</span><br><span class="line"> * */</span><br><span class="line">def deploy(String host, String port, String containerName, String imageName, String env ,String imagePort, String sshPort = &quot;22&quot;, String sshKey = &apos;efa90668-61e3-47f0-9730-b0e53ea7f97e&apos;) &#123;</span><br><span class="line">    boolean flag = true</span><br><span class="line">    while (flag) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            //运行docker</span><br><span class="line">            runSSHDocker(port, containerName, imageName, env,imagePort, host, sshPort, sshKey)</span><br><span class="line">            flag = false</span><br><span class="line">        &#125; catch (e) &#123;</span><br><span class="line">            print e.getMessage()</span><br><span class="line">            //删除运行中 的容器</span><br><span class="line">            removeSSHContainer(containerName, host, sshPort, sshKey)</span><br><span class="line">            //删除服务器上的image</span><br><span class="line">            removeSSHImage(imageName, host, sshPort, sshKey)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**发布镜像到下一个阶段</span><br><span class="line"> * @param newImageName</span><br><span class="line"> * @param oldImageName</span><br><span class="line"> * @param host</span><br><span class="line"> * @param sshKey</span><br><span class="line"> * @author ming</span><br><span class="line"> * @date 2017-12-27 10:15</span><br><span class="line"> * */</span><br><span class="line">def release(String newImageName, String oldImageName, String host, String sshPort = &quot;22&quot;, String sshKey = &apos;efa90668-61e3-47f0-9730-b0e53ea7f97e&apos;) &#123;</span><br><span class="line">    updateSSHImamgeName(newImageName, oldImageName, host, sshPort, sshKey)</span><br><span class="line">    pushSSHImage(newImageName, host, sshPort, sshKey)</span><br><span class="line">    removeSSHImage(oldImageName, host, sshPort, sshKey)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/** ui自动化测试</span><br><span class="line"> *</span><br><span class="line"> * @author ming</span><br><span class="line"> * @date 2017-12-27 22:12</span><br><span class="line"> * */</span><br><span class="line">def uiAutoTest() &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**代码审查 并且发送报告</span><br><span class="line"> *</span><br><span class="line"> * @author ming</span><br><span class="line"> * @date 2017-12-27 22:12</span><br><span class="line"> * */</span><br><span class="line">def codeReview() &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p>
<p>将其中的用{} 包含的中文 替换成相应的参数即可<br>sshKey 是jenkins配置sshAgent插件的id </p>
<p>3:安装启动 jenkins<br>docker 方式启动 参考: </p>
<p>4: 安装插件<br>主要是要安装 sshAgent 、 docker相关插件、<br>5:jenkins 引入项目定义的Jenkinsfile 形成流水线任务</p>
<p>新增jenkins 流水线任务<br>配置流水线相关配置 定义选择 Pipeline script from SCM 》 scm选择git 配置git地址等相关属性 》script path 选择 Jenkinsfile 即可<br>保存项目 》 启动项目</p>]]></content>
      
        <categories>
            
            <category> 实例 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> docker </tag>
            
            <tag> linux </tag>
            
            <tag> jenkins </tag>
            
            <tag> groovy </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[使用阿里云的oss+cdn搭建高速访问的静态博客]]></title>
      <url>/ming/3c3d59e1.html</url>
      <content type="html"><![CDATA[<p>之前一直想搭建一个博客 但是一直没找到便宜 并且访问速度快的方案 前几种方案<br>1:git pages + cdn<br>国内访问速度简直吃屎 不知道 同行是如何忍受的 cdn从源站拉取资源的时候 慢到无法忍受<br>2:coding pages+cdn<br>不想用 coding pages 还不如直接用git pages<br>3: 购买vps或者静态托管服务器<br>博客初期完全用不起 太特么贵了 穷吊 用不起</p><p>综上所述 我需要的博客大致需要<br>1:源站访问速度快<br>2:cdn 好用<br>3:域名<br>4:https http2访问<br>5:价格相对便宜<br>6:管理相对方便<br>7:增加ca证书方便</p><p>最终选择方案<br>全部使用阿里云的相关资源<br>域名：万网<br>cdn:阿里云 cdn<br>源站:使用阿里云的oss对象存储<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">oss  原本只是 阿里云的一个放文件的一个功能 后来他支持设定首页 就可以用来托管静态页面 </span><br><span class="line">速度不用说 肯定快 而且支持 https</span><br></pre></td></tr></table></figure><p></p>
<p>ca证书:阿里云 ca免费赛门铁克证书<br>静态博客:hexo + next主题</p>
<p>其实这些主要是选择  具体如何使用 直接操作阿里云控制台就是的 没啥难度 </p>
<p>遇到的麻烦的点:<br>1: oss 存储hexo生成的静态资源 路由问题<br>由于oss 里面 文件夹也是可访问的一种资源 这就导致 hexo初始生成的路由 例如/tags/ming/  这个时候他访问的是oss里面的/tags/ming/ 文件夹 然后是空白<br>解决办法: 修改站点配置_config.yaml 中permalink参数<br>我是用abbrlink 来重写url了 如果不用 就是在hexo的permalink中 后面加上.html 即可<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 使用abbrlink 来重写固定url  https://segmentfault.com/a/1190000005799711</span><br><span class="line">permalink: ming/:abbrlink.html</span><br><span class="line">permalink_defaults:</span><br></pre></td></tr></table></figure><p></p>
<p>标签、归档、分页相关路由   调整<br>修改 当前目录下node_modules/hexo/lib/plugins/helper/index.js 中关于 标签、归档、分页相关的插件<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&apos;use strict&apos;;</span><br><span class="line"></span><br><span class="line">module.exports = function (ctx) &#123;</span><br><span class="line">。。。</span><br><span class="line"></span><br><span class="line">//重写 归档 js  增加index.html 路径 配合 oss 访问</span><br><span class="line">//    helper.register(&apos;list_categories&apos;, require(&apos;./list_categories&apos;));</span><br><span class="line">    helper.register(&apos;list_categories&apos;, require(&apos;./ming_list_categories&apos;));</span><br><span class="line">    </span><br><span class="line">。。。   </span><br><span class="line"></span><br><span class="line">//重写分页相关地址 配合oss</span><br><span class="line">//    helper.register(&apos;paginator&apos;, require(&apos;./paginator&apos;));</span><br><span class="line">    helper.register(&apos;paginator&apos;, require(&apos;./ming_paginator&apos;));</span><br><span class="line">    </span><br><span class="line">。。。</span><br><span class="line"></span><br><span class="line">//  var tagcloud = require(&apos;./tagcloud&apos;);</span><br><span class="line">//  helper.register(&apos;tagcloud&apos;, tagcloud);</span><br><span class="line">//  helper.register(&apos;tag_cloud&apos;, tagcloud);</span><br><span class="line">    //引入 自定义 tag cloud 标签  修改生成路径的函数 适应oss</span><br><span class="line">    var ming_tag = require(&apos;./ming_tag&apos;)</span><br><span class="line">    helper.register(&apos;tagcloud&apos;, ming_tag);</span><br><span class="line">    helper.register(&apos;tag_cloud&apos;, ming_tag);</span><br><span class="line">。。。</span><br></pre></td></tr></table></figure><p></p>
<p>在index.js目录下<br>新增下面三个文件 </p>
<p>归档插件的实现<br>新增 ming_list_categories.js文件<br>复制如下内容进去<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><span class="line">&apos;use strict&apos;;</span><br><span class="line"></span><br><span class="line">function listCategoriesHelper(categories, options) &#123;</span><br><span class="line">  if (!options &amp;&amp; (!categories || !categories.hasOwnProperty(&apos;length&apos;))) &#123;</span><br><span class="line">    options = categories;</span><br><span class="line">    categories = this.site.categories;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  if (!categories || !categories.length) return &apos;&apos;;</span><br><span class="line">  options = options || &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  var style = options.hasOwnProperty(&apos;style&apos;) ? options.style : &apos;list&apos;;</span><br><span class="line">  var showCount = options.hasOwnProperty(&apos;show_count&apos;) ? options.show_count : true;</span><br><span class="line">  var className = options.class || &apos;category&apos;;</span><br><span class="line">  var depth = options.depth ? parseInt(options.depth, 10) : 0;</span><br><span class="line">  var orderby = options.orderby || &apos;name&apos;;</span><br><span class="line">  var order = options.order || 1;</span><br><span class="line">  var transform = options.transform;</span><br><span class="line">  var separator = options.hasOwnProperty(&apos;separator&apos;) ? options.separator : &apos;, &apos;;</span><br><span class="line">  var showCurrent = options.show_current || false;</span><br><span class="line">    // 添加 /index.html 配合oss 访问</span><br><span class="line">    //var suffix = options.suffix || &apos;&apos;;</span><br><span class="line">  var suffix = &quot;index.html&quot;;</span><br><span class="line">  var childrenIndicator = options.hasOwnProperty(&apos;children_indicator&apos;) ? options.children_indicator : false;</span><br><span class="line">  var result = &apos;&apos;;</span><br><span class="line">  var self = this;</span><br><span class="line"></span><br><span class="line">  function prepareQuery(parent) &#123;</span><br><span class="line">    var query = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    if (parent) &#123;</span><br><span class="line">      query.parent = parent;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      query.parent = &#123;$exists: false&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return categories.find(query).sort(orderby, order).filter(function(cat) &#123;</span><br><span class="line">      return cat.length;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  function hierarchicalList(level, parent) &#123;</span><br><span class="line">    var result = &apos;&apos;;</span><br><span class="line"></span><br><span class="line">    prepareQuery(parent).forEach(function(cat, i) &#123;</span><br><span class="line">      var child;</span><br><span class="line">      if (!depth || level + 1 &lt; depth) &#123;</span><br><span class="line">        child = hierarchicalList(level + 1, cat._id);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      var isCurrent = false;</span><br><span class="line">      if (showCurrent &amp;&amp; self.page) &#123;</span><br><span class="line">        for (var j = 0; j &lt; cat.length; j++) &#123;</span><br><span class="line">          var post = cat.posts.data[j];</span><br><span class="line">          if (post &amp;&amp; post._id === self.page._id) &#123;</span><br><span class="line">            isCurrent = true;</span><br><span class="line">            break;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // special case: category page</span><br><span class="line">        if (!isCurrent &amp;&amp; self.page.base) &#123;</span><br><span class="line">          if (self.page.base.indexOf(cat.path) === 0) &#123;</span><br><span class="line">            isCurrent = true;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      var additionalClassName = &apos;&apos;;</span><br><span class="line">      if (child &amp;&amp; childrenIndicator) &#123;</span><br><span class="line">        additionalClassName = &apos; &apos; + childrenIndicator;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      result += &apos;&lt;li class=&quot;&apos; + className + &apos;-list-item&apos; + additionalClassName + &apos;&quot;&gt;&apos;;</span><br><span class="line">      result += &apos;&lt;a class=&quot;&apos; + className + &apos;-list-link&apos; + (isCurrent ? &apos; current&apos; : &apos;&apos;) + &apos;&quot; href=&quot;&apos; + self.url_for(cat.path) + suffix + &apos;&quot;&gt;&apos;;</span><br><span class="line">      result += transform ? transform(cat.name) : cat.name;</span><br><span class="line">      result += &apos;&lt;/a&gt;&apos;;</span><br><span class="line"></span><br><span class="line">      if (showCount) &#123;</span><br><span class="line">        result += &apos;&lt;span class=&quot;&apos; + className + &apos;-list-count&quot;&gt;&apos; + cat.length + &apos;&lt;/span&gt;&apos;;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      if (child) &#123;</span><br><span class="line">        result += &apos;&lt;ul class=&quot;&apos; + className + &apos;-list-child&quot;&gt;&apos; + child + &apos;&lt;/ul&gt;&apos;;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      result += &apos;&lt;/li&gt;&apos;;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    return result;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  function flatList(level, parent) &#123;</span><br><span class="line">    var result = &apos;&apos;;</span><br><span class="line"></span><br><span class="line">    prepareQuery(parent).forEach(function(cat, i) &#123;</span><br><span class="line">      if (i || level) result += separator;</span><br><span class="line"></span><br><span class="line">      result += &apos;&lt;a class=&quot;&apos; + className + &apos;-link&quot; href=&quot;&apos; + self.url_for(cat.path) + suffix + &apos;&quot;&gt;&apos;;</span><br><span class="line">      result += transform ? transform(cat.name) : cat.name;</span><br><span class="line"></span><br><span class="line">      if (showCount) &#123;</span><br><span class="line">        result += &apos;&lt;span class=&quot;&apos; + className + &apos;-count&quot;&gt;&apos; + cat.length + &apos;&lt;/span&gt;&apos;;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      result += &apos;&lt;/a&gt;&apos;;</span><br><span class="line"></span><br><span class="line">      if (!depth || level + 1 &lt; depth) &#123;</span><br><span class="line">        result += flatList(level + 1, cat._id);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    return result;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  if (style === &apos;list&apos;) &#123;</span><br><span class="line">    result += &apos;&lt;ul class=&quot;&apos; + className + &apos;-list&quot;&gt;&apos; + hierarchicalList(0) + &apos;&lt;/ul&gt;&apos;;</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    result += flatList(0);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  return result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">module.exports = listCategoriesHelper;</span><br></pre></td></tr></table></figure><p></p>
<p>分页插件的实现<br>新增 ming_paginator.js文件<br>复制如下内容进去<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line">&apos;use strict&apos;;</span><br><span class="line"></span><br><span class="line">function paginatorHelper(options) &#123;</span><br><span class="line">  options = options || &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  var current = options.current || this.page.current || 0;</span><br><span class="line">  var total = options.total || this.page.total || 1;</span><br><span class="line">  var endSize = options.hasOwnProperty(&apos;end_size&apos;) ? +options.end_size : 1;</span><br><span class="line">  var midSize = options.hasOwnProperty(&apos;mid_size&apos;) ? +options.mid_size : 2;</span><br><span class="line">  var space = options.hasOwnProperty(&apos;space&apos;) ? options.space : &apos;&amp;hellip;&apos;;</span><br><span class="line">  var base = options.base || this.page.base || &apos;&apos;;</span><br><span class="line">  var format = options.format || this.config.pagination_dir + &apos;/%d/&apos;;</span><br><span class="line">  var prevText = options.prev_text || &apos;Prev&apos;;</span><br><span class="line">  var nextText = options.next_text || &apos;Next&apos;;</span><br><span class="line">  var prevNext = options.hasOwnProperty(&apos;prev_next&apos;) ? options.prev_next : true;</span><br><span class="line">  var transform = options.transform;</span><br><span class="line">  var self = this;</span><br><span class="line">  var result = &apos;&apos;;</span><br><span class="line">  var i;</span><br><span class="line">  //配合 oss 使用index.html</span><br><span class="line">  var suffix = &quot;index.html&quot;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    if (!current) return &apos;&apos;;</span><br><span class="line"></span><br><span class="line">  var currentPage = &apos;&lt;span class=&quot;page-number current&quot;&gt;&apos; +</span><br><span class="line">    (transform ? transform(current) : current) +</span><br><span class="line">    &apos;&lt;/span&gt;&apos;;</span><br><span class="line"></span><br><span class="line">  function link(i) &#123;</span><br><span class="line">    return self.url_for(i === 1 ? base : base + format.replace(&apos;%d&apos;, i));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  function pageLink(i) &#123;</span><br><span class="line">    return &apos;&lt;a class=&quot;page-number&quot; href=&quot;&apos; + link(i) + suffix +&apos;&quot;&gt;&apos; +</span><br><span class="line">      (transform ? transform(i) : i) +</span><br><span class="line">      &apos;&lt;/a&gt;&apos;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  // Display the link to the previous page</span><br><span class="line">  if (prevNext &amp;&amp; current &gt; 1) &#123;</span><br><span class="line">    result += &apos;&lt;a class=&quot;extend prev&quot; rel=&quot;prev&quot; href=&quot;&apos; + link(current - 1) + suffix +&apos;&quot;&gt;&apos; + prevText + &apos;&lt;/a&gt;&apos;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  if (options.show_all) &#123;</span><br><span class="line">    // Display pages on the left side of the current page</span><br><span class="line">    for (i = 1; i &lt; current; i++) &#123;</span><br><span class="line">      result += pageLink(i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Display the current page</span><br><span class="line">    result += currentPage;</span><br><span class="line"></span><br><span class="line">    // Display pages on the right side of the current page</span><br><span class="line">    for (i = current + 1; i &lt;= total; i++) &#123;</span><br><span class="line">      result += pageLink(i);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    // It&apos;s too complicated. May need refactor.</span><br><span class="line">    var leftEnd = current &lt;= endSize ? current - 1 : endSize;</span><br><span class="line">    var rightEnd = total - current &lt;= endSize ? current + 1 : total - endSize + 1;</span><br><span class="line">    var leftMid = current - midSize &lt;= endSize ? leftEnd + 1 : current - midSize;</span><br><span class="line">    var rightMid = current + midSize + endSize &gt; total ? rightEnd - 1 : current + midSize;</span><br><span class="line">    var spaceHtml = &apos;&lt;span class=&quot;space&quot;&gt;&apos; + space + &apos;&lt;/span&gt;&apos;;</span><br><span class="line"></span><br><span class="line">    // Display pages on the left edge</span><br><span class="line">    for (i = 1; i &lt;= leftEnd; i++) &#123;</span><br><span class="line">      result += pageLink(i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Display spaces between edges and middle pages</span><br><span class="line">    if (space &amp;&amp; current - endSize - midSize &gt; 1) &#123;</span><br><span class="line">      result += spaceHtml;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Display left middle pages</span><br><span class="line">    if (leftMid &gt; leftEnd) &#123;</span><br><span class="line">      for (i = leftMid; i &lt; current; i++) &#123;</span><br><span class="line">        result += pageLink(i);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Display the current page</span><br><span class="line">    result += currentPage;</span><br><span class="line"></span><br><span class="line">    // Display right middle pages</span><br><span class="line">    if (rightMid &lt; rightEnd) &#123;</span><br><span class="line">      for (i = current + 1; i &lt;= rightMid; i++) &#123;</span><br><span class="line">        result += pageLink(i);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Display spaces between edges and middle pages</span><br><span class="line">    if (space &amp;&amp; total - endSize - midSize &gt; current) &#123;</span><br><span class="line">      result += spaceHtml;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Dispaly pages on the right edge</span><br><span class="line">    for (i = rightEnd; i &lt;= total; i++) &#123;</span><br><span class="line">      result += pageLink(i);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  // Display the link to the next page</span><br><span class="line">  if (prevNext &amp;&amp; current &lt; total) &#123;</span><br><span class="line">    result += &apos;&lt;a class=&quot;extend next&quot; rel=&quot;next&quot; href=&quot;&apos; + link(current + 1) + suffix+ &apos;&quot;&gt;&apos; + nextText + &apos;&lt;/a&gt;&apos;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  return result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">module.exports = paginatorHelper;</span><br></pre></td></tr></table></figure><p></p>
<p>标签插件的实现<br>新增 ming_tag.js文件<br>复制如下内容进去<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br></pre></td><td class="code"><pre><span class="line">&apos;use strict&apos;;</span><br><span class="line"></span><br><span class="line">// https://github.com/imathis/hsl-picker/blob/master/assets/javascripts/modules/color.coffee</span><br><span class="line">var rHex3 = /^#([0-9a-f]&#123;3&#125;)$/;</span><br><span class="line">var rHex6 = /^#([0-9a-f]&#123;6&#125;)$/;</span><br><span class="line">var rRGB = /^rgba?\(\s*(\d&#123;1,3&#125;)\s*,\s*(\d&#123;1,3&#125;)\s*,\s*(\d&#123;1,3&#125;)\s*,?\s*(0?\.?\d+)?\s*\)$/;</span><br><span class="line">var rHSL = /^hsla?\(\s*(\d&#123;1,3&#125;)\s*,\s*(\d&#123;1,3&#125;)%\s*,\s*(\d&#123;1,3&#125;)%\s*,?\s*(0?\.?\d+)?\s*\)$/;</span><br><span class="line"></span><br><span class="line">// http://www.w3.org/TR/css3-color/#svg-color</span><br><span class="line">var colorNames = &#123;</span><br><span class="line">    aliceblue: &#123;r: 240, g: 248, b: 255, a: 1&#125;,</span><br><span class="line">    antiquewhite: &#123;r: 250, g: 235, b: 215, a: 1&#125;,</span><br><span class="line">    aqua: &#123;r: 0, g: 255, b: 255, a: 1&#125;,</span><br><span class="line">    aquamarine: &#123;r: 127, g: 255, b: 212, a: 1&#125;,</span><br><span class="line">    azure: &#123;r: 240, g: 255, b: 255, a: 1&#125;,</span><br><span class="line">    beige: &#123;r: 245, g: 245, b: 220, a: 1&#125;,</span><br><span class="line">    bisque: &#123;r: 255, g: 228, b: 196, a: 1&#125;,</span><br><span class="line">    black: &#123;r: 0, g: 0, b: 0, a: 1&#125;,</span><br><span class="line">    blanchedalmond: &#123;r: 255, g: 235, b: 205, a: 1&#125;,</span><br><span class="line">    blue: &#123;r: 0, g: 0, b: 255, a: 1&#125;,</span><br><span class="line">    blueviolet: &#123;r: 138, g: 43, b: 226, a: 1&#125;,</span><br><span class="line">    brown: &#123;r: 165, g: 42, b: 42, a: 1&#125;,</span><br><span class="line">    burlywood: &#123;r: 222, g: 184, b: 135, a: 1&#125;,</span><br><span class="line">    cadetblue: &#123;r: 95, g: 158, b: 160, a: 1&#125;,</span><br><span class="line">    chartreuse: &#123;r: 127, g: 255, b: 0, a: 1&#125;,</span><br><span class="line">    chocolate: &#123;r: 210, g: 105, b: 30, a: 1&#125;,</span><br><span class="line">    coral: &#123;r: 255, g: 127, b: 80, a: 1&#125;,</span><br><span class="line">    cornflowerblue: &#123;r: 100, g: 149, b: 237, a: 1&#125;,</span><br><span class="line">    cornsilk: &#123;r: 255, g: 248, b: 220, a: 1&#125;,</span><br><span class="line">    crimson: &#123;r: 220, g: 20, b: 60, a: 1&#125;,</span><br><span class="line">    cyan: &#123;r: 0, g: 255, b: 255, a: 1&#125;,</span><br><span class="line">    darkblue: &#123;r: 0, g: 0, b: 139, a: 1&#125;,</span><br><span class="line">    darkcyan: &#123;r: 0, g: 139, b: 139, a: 1&#125;,</span><br><span class="line">    darkgoldenrod: &#123;r: 184, g: 134, b: 11, a: 1&#125;,</span><br><span class="line">    darkgray: &#123;r: 169, g: 169, b: 169, a: 1&#125;,</span><br><span class="line">    darkgreen: &#123;r: 0, g: 100, b: 0, a: 1&#125;,</span><br><span class="line">    darkgrey: &#123;r: 169, g: 169, b: 169, a: 1&#125;,</span><br><span class="line">    darkkhaki: &#123;r: 189, g: 183, b: 107, a: 1&#125;,</span><br><span class="line">    darkmagenta: &#123;r: 139, g: 0, b: 139, a: 1&#125;,</span><br><span class="line">    darkolivegreen: &#123;r: 85, g: 107, b: 47, a: 1&#125;,</span><br><span class="line">    darkorange: &#123;r: 255, g: 140, b: 0, a: 1&#125;,</span><br><span class="line">    darkorchid: &#123;r: 153, g: 50, b: 204, a: 1&#125;,</span><br><span class="line">    darkred: &#123;r: 139, g: 0, b: 0, a: 1&#125;,</span><br><span class="line">    darksalmon: &#123;r: 233, g: 150, b: 122, a: 1&#125;,</span><br><span class="line">    darkseagreen: &#123;r: 143, g: 188, b: 143, a: 1&#125;,</span><br><span class="line">    darkslateblue: &#123;r: 72, g: 61, b: 139, a: 1&#125;,</span><br><span class="line">    darkslategray: &#123;r: 47, g: 79, b: 79, a: 1&#125;,</span><br><span class="line">    darkslategrey: &#123;r: 47, g: 79, b: 79, a: 1&#125;,</span><br><span class="line">    darkturquoise: &#123;r: 0, g: 206, b: 209, a: 1&#125;,</span><br><span class="line">    darkviolet: &#123;r: 148, g: 0, b: 211, a: 1&#125;,</span><br><span class="line">    deeppink: &#123;r: 255, g: 20, b: 147, a: 1&#125;,</span><br><span class="line">    deepskyblue: &#123;r: 0, g: 191, b: 255, a: 1&#125;,</span><br><span class="line">    dimgray: &#123;r: 105, g: 105, b: 105, a: 1&#125;,</span><br><span class="line">    dimgrey: &#123;r: 105, g: 105, b: 105, a: 1&#125;,</span><br><span class="line">    dodgerblue: &#123;r: 30, g: 144, b: 255, a: 1&#125;,</span><br><span class="line">    firebrick: &#123;r: 178, g: 34, b: 34, a: 1&#125;,</span><br><span class="line">    floralwhite: &#123;r: 255, g: 250, b: 240, a: 1&#125;,</span><br><span class="line">    forestgreen: &#123;r: 34, g: 139, b: 34, a: 1&#125;,</span><br><span class="line">    fuchsia: &#123;r: 255, g: 0, b: 255, a: 1&#125;,</span><br><span class="line">    gainsboro: &#123;r: 220, g: 220, b: 220, a: 1&#125;,</span><br><span class="line">    ghostwhite: &#123;r: 248, g: 248, b: 255, a: 1&#125;,</span><br><span class="line">    gold: &#123;r: 255, g: 215, b: 0, a: 1&#125;,</span><br><span class="line">    goldenrod: &#123;r: 218, g: 165, b: 32, a: 1&#125;,</span><br><span class="line">    gray: &#123;r: 128, g: 128, b: 128, a: 1&#125;,</span><br><span class="line">    green: &#123;r: 0, g: 128, b: 0, a: 1&#125;,</span><br><span class="line">    greenyellow: &#123;r: 173, g: 255, b: 47, a: 1&#125;,</span><br><span class="line">    grey: &#123;r: 128, g: 128, b: 128, a: 1&#125;,</span><br><span class="line">    honeydew: &#123;r: 240, g: 255, b: 240, a: 1&#125;,</span><br><span class="line">    hotpink: &#123;r: 255, g: 105, b: 180, a: 1&#125;,</span><br><span class="line">    indianred: &#123;r: 205, g: 92, b: 92, a: 1&#125;,</span><br><span class="line">    indigo: &#123;r: 75, g: 0, b: 130, a: 1&#125;,</span><br><span class="line">    ivory: &#123;r: 255, g: 255, b: 240, a: 1&#125;,</span><br><span class="line">    khaki: &#123;r: 240, g: 230, b: 140, a: 1&#125;,</span><br><span class="line">    lavender: &#123;r: 230, g: 230, b: 250, a: 1&#125;,</span><br><span class="line">    lavenderblush: &#123;r: 255, g: 240, b: 245, a: 1&#125;,</span><br><span class="line">    lawngreen: &#123;r: 124, g: 252, b: 0, a: 1&#125;,</span><br><span class="line">    lemonchiffon: &#123;r: 255, g: 250, b: 205, a: 1&#125;,</span><br><span class="line">    lightblue: &#123;r: 173, g: 216, b: 230, a: 1&#125;,</span><br><span class="line">    lightcoral: &#123;r: 240, g: 128, b: 128, a: 1&#125;,</span><br><span class="line">    lightcyan: &#123;r: 224, g: 255, b: 255, a: 1&#125;,</span><br><span class="line">    lightgoldenrodyellow: &#123;r: 250, g: 250, b: 210, a: 1&#125;,</span><br><span class="line">    lightgray: &#123;r: 211, g: 211, b: 211, a: 1&#125;,</span><br><span class="line">    lightgreen: &#123;r: 144, g: 238, b: 144, a: 1&#125;,</span><br><span class="line">    lightgrey: &#123;r: 211, g: 211, b: 211, a: 1&#125;,</span><br><span class="line">    lightpink: &#123;r: 255, g: 182, b: 193, a: 1&#125;,</span><br><span class="line">    lightsalmon: &#123;r: 255, g: 160, b: 122, a: 1&#125;,</span><br><span class="line">    lightseagreen: &#123;r: 32, g: 178, b: 170, a: 1&#125;,</span><br><span class="line">    lightskyblue: &#123;r: 135, g: 206, b: 250, a: 1&#125;,</span><br><span class="line">    lightslategray: &#123;r: 119, g: 136, b: 153, a: 1&#125;,</span><br><span class="line">    lightslategrey: &#123;r: 119, g: 136, b: 153, a: 1&#125;,</span><br><span class="line">    lightsteelblue: &#123;r: 176, g: 196, b: 222, a: 1&#125;,</span><br><span class="line">    lightyellow: &#123;r: 255, g: 255, b: 224, a: 1&#125;,</span><br><span class="line">    lime: &#123;r: 0, g: 255, b: 0, a: 1&#125;,</span><br><span class="line">    limegreen: &#123;r: 50, g: 205, b: 50, a: 1&#125;,</span><br><span class="line">    linen: &#123;r: 250, g: 240, b: 230, a: 1&#125;,</span><br><span class="line">    magenta: &#123;r: 255, g: 0, b: 255, a: 1&#125;,</span><br><span class="line">    maroon: &#123;r: 128, g: 0, b: 0, a: 1&#125;,</span><br><span class="line">    mediumaquamarine: &#123;r: 102, g: 205, b: 170, a: 1&#125;,</span><br><span class="line">    mediumblue: &#123;r: 0, g: 0, b: 205, a: 1&#125;,</span><br><span class="line">    mediumorchid: &#123;r: 186, g: 85, b: 211, a: 1&#125;,</span><br><span class="line">    mediumpurple: &#123;r: 147, g: 112, b: 219, a: 1&#125;,</span><br><span class="line">    mediumseagreen: &#123;r: 60, g: 179, b: 113, a: 1&#125;,</span><br><span class="line">    mediumslateblue: &#123;r: 123, g: 104, b: 238, a: 1&#125;,</span><br><span class="line">    mediumspringgreen: &#123;r: 0, g: 250, b: 154, a: 1&#125;,</span><br><span class="line">    mediumturquoise: &#123;r: 72, g: 209, b: 204, a: 1&#125;,</span><br><span class="line">    mediumvioletred: &#123;r: 199, g: 21, b: 133, a: 1&#125;,</span><br><span class="line">    midnightblue: &#123;r: 25, g: 25, b: 112, a: 1&#125;,</span><br><span class="line">    mintcream: &#123;r: 245, g: 255, b: 250, a: 1&#125;,</span><br><span class="line">    mistyrose: &#123;r: 255, g: 228, b: 225, a: 1&#125;,</span><br><span class="line">    moccasin: &#123;r: 255, g: 228, b: 181, a: 1&#125;,</span><br><span class="line">    navajowhite: &#123;r: 255, g: 222, b: 173, a: 1&#125;,</span><br><span class="line">    navy: &#123;r: 0, g: 0, b: 128, a: 1&#125;,</span><br><span class="line">    oldlace: &#123;r: 253, g: 245, b: 230, a: 1&#125;,</span><br><span class="line">    olive: &#123;r: 128, g: 128, b: 0, a: 1&#125;,</span><br><span class="line">    olivedrab: &#123;r: 107, g: 142, b: 35, a: 1&#125;,</span><br><span class="line">    orange: &#123;r: 255, g: 165, b: 0, a: 1&#125;,</span><br><span class="line">    orangered: &#123;r: 255, g: 69, b: 0, a: 1&#125;,</span><br><span class="line">    orchid: &#123;r: 218, g: 112, b: 214, a: 1&#125;,</span><br><span class="line">    palegoldenrod: &#123;r: 238, g: 232, b: 170, a: 1&#125;,</span><br><span class="line">    palegreen: &#123;r: 152, g: 251, b: 152, a: 1&#125;,</span><br><span class="line">    paleturquoise: &#123;r: 175, g: 238, b: 238, a: 1&#125;,</span><br><span class="line">    palevioletred: &#123;r: 219, g: 112, b: 147, a: 1&#125;,</span><br><span class="line">    papayawhip: &#123;r: 255, g: 239, b: 213, a: 1&#125;,</span><br><span class="line">    peachpuff: &#123;r: 255, g: 218, b: 185, a: 1&#125;,</span><br><span class="line">    peru: &#123;r: 205, g: 133, b: 63, a: 1&#125;,</span><br><span class="line">    pink: &#123;r: 255, g: 192, b: 203, a: 1&#125;,</span><br><span class="line">    plum: &#123;r: 221, g: 160, b: 221, a: 1&#125;,</span><br><span class="line">    powderblue: &#123;r: 176, g: 224, b: 230, a: 1&#125;,</span><br><span class="line">    purple: &#123;r: 128, g: 0, b: 128, a: 1&#125;,</span><br><span class="line">    red: &#123;r: 255, g: 0, b: 0, a: 1&#125;,</span><br><span class="line">    rosybrown: &#123;r: 188, g: 143, b: 143, a: 1&#125;,</span><br><span class="line">    royalblue: &#123;r: 65, g: 105, b: 225, a: 1&#125;,</span><br><span class="line">    saddlebrown: &#123;r: 139, g: 69, b: 19, a: 1&#125;,</span><br><span class="line">    salmon: &#123;r: 250, g: 128, b: 114, a: 1&#125;,</span><br><span class="line">    sandybrown: &#123;r: 244, g: 164, b: 96, a: 1&#125;,</span><br><span class="line">    seagreen: &#123;r: 46, g: 139, b: 87, a: 1&#125;,</span><br><span class="line">    seashell: &#123;r: 255, g: 245, b: 238, a: 1&#125;,</span><br><span class="line">    sienna: &#123;r: 160, g: 82, b: 45, a: 1&#125;,</span><br><span class="line">    silver: &#123;r: 192, g: 192, b: 192, a: 1&#125;,</span><br><span class="line">    skyblue: &#123;r: 135, g: 206, b: 235, a: 1&#125;,</span><br><span class="line">    slateblue: &#123;r: 106, g: 90, b: 205, a: 1&#125;,</span><br><span class="line">    slategray: &#123;r: 112, g: 128, b: 144, a: 1&#125;,</span><br><span class="line">    slategrey: &#123;r: 112, g: 128, b: 144, a: 1&#125;,</span><br><span class="line">    snow: &#123;r: 255, g: 250, b: 250, a: 1&#125;,</span><br><span class="line">    springgreen: &#123;r: 0, g: 255, b: 127, a: 1&#125;,</span><br><span class="line">    steelblue: &#123;r: 70, g: 130, b: 180, a: 1&#125;,</span><br><span class="line">    tan: &#123;r: 210, g: 180, b: 140, a: 1&#125;,</span><br><span class="line">    teal: &#123;r: 0, g: 128, b: 128, a: 1&#125;,</span><br><span class="line">    thistle: &#123;r: 216, g: 191, b: 216, a: 1&#125;,</span><br><span class="line">    tomato: &#123;r: 255, g: 99, b: 71, a: 1&#125;,</span><br><span class="line">    turquoise: &#123;r: 64, g: 224, b: 208, a: 1&#125;,</span><br><span class="line">    violet: &#123;r: 238, g: 130, b: 238, a: 1&#125;,</span><br><span class="line">    wheat: &#123;r: 245, g: 222, b: 179, a: 1&#125;,</span><br><span class="line">    white: &#123;r: 255, g: 255, b: 255, a: 1&#125;,</span><br><span class="line">    whitesmoke: &#123;r: 245, g: 245, b: 245, a: 1&#125;,</span><br><span class="line">    yellow: &#123;r: 255, g: 255, b: 0, a: 1&#125;,</span><br><span class="line">    yellowgreen: &#123;r: 154, g: 205, b: 50, a: 1&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">function tagcloudHelper(tags, options) &#123;</span><br><span class="line">    if (!options &amp;&amp; (!tags || !tags.hasOwnProperty(&apos;length&apos;))) &#123;</span><br><span class="line">        options = tags;</span><br><span class="line">        tags = this.site.tags;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (!tags || !tags.length) return &apos;&apos;;</span><br><span class="line">    options = options || &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    var min = options.min_font || 10;</span><br><span class="line">    var max = options.max_font || 20;</span><br><span class="line">    var orderby = options.orderby || &apos;name&apos;;</span><br><span class="line">    var order = options.order || 1;</span><br><span class="line">    var unit = options.unit || &apos;px&apos;;</span><br><span class="line">    var color = options.color;</span><br><span class="line">    var transform = options.transform;</span><br><span class="line">    var separator = options.separator || &apos; &apos;;</span><br><span class="line">    var result = [];</span><br><span class="line">    var self = this;</span><br><span class="line">    var startColor, endColor;</span><br><span class="line"></span><br><span class="line">    if (color) &#123;</span><br><span class="line">        startColor = new Color(options.start_color);</span><br><span class="line">        endColor = new Color(options.end_color);</span><br><span class="line"></span><br><span class="line">        if (!startColor || !endColor) color = false;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Sort the tags</span><br><span class="line">    if (orderby === &apos;random&apos; || orderby === &apos;rand&apos;) &#123;</span><br><span class="line">        tags = tags.random();</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        tags = tags.sort(orderby, order);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Ignore tags with zero posts</span><br><span class="line">    tags = tags.filter(function(tag) &#123;</span><br><span class="line">        return tag.length;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    // Limit the number of tags</span><br><span class="line">    if (options.amount) &#123;</span><br><span class="line">        tags = tags.limit(options.amount);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    var sizes = [];</span><br><span class="line"></span><br><span class="line">    tags.sort(&apos;length&apos;).forEach(function(tag) &#123;</span><br><span class="line">        var length = tag.length;</span><br><span class="line">        if (~sizes.indexOf(length)) return;</span><br><span class="line"></span><br><span class="line">        sizes.push(length);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    var length = sizes.length - 1;</span><br><span class="line"></span><br><span class="line">    tags.forEach(function(tag) &#123;</span><br><span class="line">        var ratio = length ? sizes.indexOf(tag.length) / length : 0;</span><br><span class="line">        var size = min + ((max - min) * ratio);</span><br><span class="line">        var style = &apos;font-size: &apos; + parseFloat(size.toFixed(2)) + unit + &apos;;&apos;;</span><br><span class="line"></span><br><span class="line">        if (color) &#123;</span><br><span class="line">            var midColor = startColor.mix(endColor, ratio);</span><br><span class="line">            style += &apos; color: &apos; + midColor.toString();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        result.push(</span><br><span class="line">            // 增加/index.html  跳转地址   </span><br><span class="line">            &apos;&lt;a href=&quot;&apos; + self.url_for(tag.path) + &apos;index.html&quot; style=&quot;&apos; + style + &apos;&quot;&gt;&apos; +</span><br><span class="line">            (transform ? transform(tag.name) : tag.name) +</span><br><span class="line">            &apos;&lt;/a&gt;&apos;</span><br><span class="line">        );</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    return result.join(separator);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function Color(color) &#123;</span><br><span class="line">    if (typeof color === &apos;object&apos;) &#123;</span><br><span class="line">        this.r = color.r;</span><br><span class="line">        this.g = color.g;</span><br><span class="line">        this.b = color.b;</span><br><span class="line">        this.a = color.a;</span><br><span class="line">    &#125; else if (typeof color === &apos;string&apos;) &#123;</span><br><span class="line">        this.parse(color);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        throw new TypeError(&apos;color is required!&apos;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (this.r &lt; 0 || this.r &gt; 255 ||</span><br><span class="line">        this.g &lt; 0 || this.g &gt; 255 ||</span><br><span class="line">        this.b &lt; 0 || this.b &gt; 255 ||</span><br><span class="line">        this.a &lt; 0 || this.a &gt; 1) &#123;</span><br><span class="line">        throw new Error(color + &apos; is invalid.&apos;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Color.prototype.parse = function(color) &#123;</span><br><span class="line">    color = color.toLowerCase();</span><br><span class="line"></span><br><span class="line">    if (colorNames.hasOwnProperty(color)) &#123;</span><br><span class="line">        var obj = colorNames[color];</span><br><span class="line"></span><br><span class="line">        this.r = obj.r;</span><br><span class="line">        this.g = obj.g;</span><br><span class="line">        this.b = obj.b;</span><br><span class="line">        this.a = obj.a;</span><br><span class="line"></span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    var match, txt, code;</span><br><span class="line"></span><br><span class="line">    if (rHex3.test(color)) &#123;</span><br><span class="line">        txt = color.substring(1);</span><br><span class="line">        code = parseInt(txt, 16);</span><br><span class="line"></span><br><span class="line">        this.r = ((code &amp; 0xF00) &gt;&gt; 8) * 17;</span><br><span class="line">        this.g = ((code &amp; 0xF0) &gt;&gt; 4) * 17;</span><br><span class="line">        this.b = (code &amp; 0xF) * 17;</span><br><span class="line">        this.a = 1;</span><br><span class="line">    &#125; else if (rHex6.test(color)) &#123;</span><br><span class="line">        txt = color.substring(1);</span><br><span class="line">        code = parseInt(txt, 16);</span><br><span class="line"></span><br><span class="line">        this.r = (code &amp; 0xFF0000) &gt;&gt; 16;</span><br><span class="line">        this.g = (code &amp; 0xFF00) &gt;&gt; 8;</span><br><span class="line">        this.b = code &amp; 0xFF;</span><br><span class="line">        this.a = 1;</span><br><span class="line">    &#125; else if (rRGB.test(color)) &#123;</span><br><span class="line">        match = color.match(rRGB);</span><br><span class="line"></span><br><span class="line">        this.r = match[1] | 0;</span><br><span class="line">        this.g = match[2] | 0;</span><br><span class="line">        this.b = match[3] | 0;</span><br><span class="line">        this.a = match[4] ? +match[4] : 1;</span><br><span class="line">    &#125; else if (rHSL.test(color)) &#123;</span><br><span class="line">        match = color.match(rHSL);</span><br><span class="line"></span><br><span class="line">        var h = +match[1] / 360;</span><br><span class="line">        var s = +match[2] / 100;</span><br><span class="line">        var l = +match[3] / 100;</span><br><span class="line"></span><br><span class="line">        this.a = match[4] ? +match[4] : 1;</span><br><span class="line"></span><br><span class="line">        if (!s) &#123;</span><br><span class="line">            this.r = this.g = this.b = l * 255;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        var q = l &lt; 0.5 ? l * (1 + s) : l + s - (l * s);</span><br><span class="line">        var p = (2 * l) - q;</span><br><span class="line"></span><br><span class="line">        var rt = h + (1 / 3);</span><br><span class="line">        var gt = h;</span><br><span class="line">        var bt = h - (1 / 3);</span><br><span class="line"></span><br><span class="line">        this.r = convertHue(p, q, rt);</span><br><span class="line">        this.g = convertHue(p, q, gt);</span><br><span class="line">        this.b = convertHue(p, q, bt);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        throw new Error(color + &apos; is not a supported color format.&apos;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Color.prototype.toString = function() &#123;</span><br><span class="line">    if (this.a === 1) &#123;</span><br><span class="line">        var r = convertRGB(this.r);</span><br><span class="line">        var g = convertRGB(this.g);</span><br><span class="line">        var b = convertRGB(this.b);</span><br><span class="line"></span><br><span class="line">        if (this.r % 17 || this.g % 17 || this.b % 17) &#123;</span><br><span class="line">            return &apos;#&apos; + r + g + b;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return &apos;#&apos; + r[0] + g[0] + b[0];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return &apos;rgba(&apos; + this.r + &apos;, &apos; + this.g + &apos;, &apos; + this.b + &apos;, &apos; + parseFloat(this.a.toFixed(2)) + &apos;)&apos;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Color.prototype.mix = function(color, ratio) &#123;</span><br><span class="line">    switch (ratio) &#123;</span><br><span class="line">        case 0:</span><br><span class="line">            return new Color(this);</span><br><span class="line"></span><br><span class="line">        case 1:</span><br><span class="line">            return new Color(color);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return new Color(&#123;</span><br><span class="line">        r: Math.round(mixValue(this.r, color.r, ratio)),</span><br><span class="line">        g: Math.round(mixValue(this.g, color.g, ratio)),</span><br><span class="line">        b: Math.round(mixValue(this.b, color.b, ratio)),</span><br><span class="line">        a: mixValue(this.a, color.a, ratio)</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">function convertHue(p, q, h) &#123;</span><br><span class="line">    if (h &lt; 0) h++;</span><br><span class="line">    if (h &gt; 1) h--;</span><br><span class="line"></span><br><span class="line">    var color;</span><br><span class="line"></span><br><span class="line">    if (h * 6 &lt; 1) &#123;</span><br><span class="line">        color = p + ((q - p) * h * 6);</span><br><span class="line">    &#125; else if (h * 2 &lt; 1) &#123;</span><br><span class="line">        color = q;</span><br><span class="line">    &#125; else if (h * 3 &lt; 2) &#123;</span><br><span class="line">        color = p + ((q - p) * ((2 / 3) - h) * 6);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        color = p;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return Math.round(color * 255);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function convertRGB(value) &#123;</span><br><span class="line">    var str = value.toString(16);</span><br><span class="line">    if (value &lt; 16) return &apos;0&apos; + str;</span><br><span class="line"></span><br><span class="line">    return str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function mixValue(a, b, ratio) &#123;</span><br><span class="line">    return a + ((b - a) * ratio);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">module.exports = tagcloudHelper;</span><br></pre></td></tr></table></figure><p></p>
<p>参考地址: <a href="https://github.com/xuxianyu/ming/tree/master/hexo" target="_blank" rel="noopener">https://github.com/xuxianyu/ming/tree/master/hexo</a> </p>
<p>实例地址: <a href="https://www.xujiuming.com">https://www.xujiuming.com</a>  本网站就是采用这种方法实现的</p>]]></content>
      
        <categories>
            
            <category> 骚想法 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> cdn </tag>
            
            <tag> oss </tag>
            
            <tag> http/https </tag>
            
            <tag> 阿里云 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[docker 运行秒退出解决办法]]></title>
      <url>/ming/52ab603.html</url>
      <content type="html"><![CDATA[<p>###在学习docker的时候 遇到一个坑 就是当docker容器中没有前台运行的程序的时候 docker会认为这个容器没有工作内容会自动关闭这个容器<br>解决方法:<br>在写dockerfile的时候 记得留一个在前台执行的任务 特别是在做那种一般在后台运行的服务 如mysql这样的 需要让他在前台运行 mysqld.service</p>]]></content>
      
        <categories>
            
            <category> 坑 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> docker </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[iptables笔记]]></title>
      <url>/ming/5bcc860.html</url>
      <content type="html"><![CDATA[<p>##iptables linux上常用防火墙<br>参考地址：<a href="http://www.cnblogs.com/kevingrace/p/6265113.html" target="_blank" rel="noopener">http://www.cnblogs.com/kevingrace/p/6265113.html</a></p><h4 id="iptables-和netfilter关系"><a href="#iptables-和netfilter关系" class="headerlink" title="iptables 和netfilter关系"></a>iptables 和netfilter关系</h4><p>netfilter 是linux内核中实现的包过滤的函数相关的东西<br>iptables 是一个管理防火墙的工具 真正实现防火墙的还是netfilter</p><h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><p>iptables (选项) (参数)</p><h4 id="选项"><a href="#选项" class="headerlink" title="选项"></a>选项</h4><p>man iptables</p><p>-t&lt;表&gt;：指定要操纵的表；<br>-A：向规则链中添加条目；<br>-D：从规则链中删除条目；<br>-I：向规则链中插入条目；<br>-R：替换规则链中的条目；<br>-L：显示规则链中已有的条目；<br>-F：清楚规则链中已有的条目；<br>-Z：清空规则链中的数据包计算器和字节计数器；<br>-X:删除规则链<br>-N：创建新的用户自定义规则链；<br>-P：定义规则链中的默认目标；<br>-h：显示帮助信息；<br>-p：指定要匹配的数据包协议类型；<br>-s：指定要匹配的数据包源ip地址；<br>-j&lt;目标&gt;：指定要跳转的目标；<br>-i&lt;网络接口&gt;：指定数据包进入本机的网络接口；<br>-o&lt;网络接口&gt;：指定数据包要离开本机所使用的网络接口。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables -t 表名 &lt;-A/I/D/R&gt; 规则链名 [规则号] &lt;-i/o 网卡名&gt; -p 协议名 &lt;-s 源IP/源子网&gt; --sport 源端口 &lt;-d 目标IP/目标子网&gt; --dport 目标端口 -j 动作</span><br></pre></td></tr></table></figure>
<p><img src="http://upload-images.jianshu.io/upload_images/3905525-b576da7a2c520fbc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="iptables用法"><br><img src="http://upload-images.jianshu.io/upload_images/3905525-7e8ee8a4829024de.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="iptables 参数"></p>
<p>####表名<br>提供特定的功能<br>|名称|功能|备注|<br>|:–|:–|:–|<br>|raw|数据跟踪处理|网址过滤|<br>|mangle|数据包修改，包重构|qds|<br>|nat|地址转换,网络地址转换|网关路由|<br>|filter|包过滤|防火墙规则|</p>
<h4 id="链-名"><a href="#链-名" class="headerlink" title="链 名"></a>链 名</h4><table>
<thead>
<tr>
<th style="text-align:left">名称</th>
<th style="text-align:left">功能</th>
<th style="text-align:left">备注</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">INPUT</td>
<td style="text-align:left">输入数据包</td>
<td style="text-align:left">对输入数据包的规则</td>
</tr>
<tr>
<td style="text-align:left">OUTPUT</td>
<td style="text-align:left">输出数据包</td>
<td style="text-align:left">对输出数据包的规则</td>
</tr>
<tr>
<td style="text-align:left">FORWARD</td>
<td style="text-align:left">转发数据包</td>
<td style="text-align:left">对转发数据的规则</td>
</tr>
<tr>
<td style="text-align:left">PREROUTING</td>
<td style="text-align:left">目标地址转换数据包</td>
<td style="text-align:left">DANT</td>
</tr>
<tr>
<td style="text-align:left">POSTOUTING</td>
<td style="text-align:left">源地址转换数据包</td>
<td style="text-align:left">SNAT</td>
</tr>
</tbody>
</table>
<h4 id="表-和-链的关系图"><a href="#表-和-链的关系图" class="headerlink" title="表 和 链的关系图"></a>表 和 链的关系图</h4><p><img src="http://upload-images.jianshu.io/upload_images/3905525-6ca6c7de7205562d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="四表五链"><br><img src="http://upload-images.jianshu.io/upload_images/3905525-fc2f411c47c80d5a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="请求流转流程图"><br><img src="http://upload-images.jianshu.io/upload_images/3905525-d28fca015fec26d2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="请求流转详情流程图"></p>
<p>####动作</p>
<table>
<thead>
<tr>
<th style="text-align:left">名称</th>
<th style="text-align:left">功能</th>
<th style="text-align:left">备注</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">ACCEPT</td>
<td style="text-align:left">接受数据包</td>
<td style="text-align:left">常用  打开某个端口接受数据</td>
</tr>
<tr>
<td style="text-align:left">DROP</td>
<td style="text-align:left">丢弃数据包</td>
<td style="text-align:left">常用  禁止某个端口访问</td>
</tr>
<tr>
<td style="text-align:left">MATCH</td>
<td style="text-align:left">匹配</td>
<td style="text-align:left">符合某个ip 或者端口</td>
</tr>
<tr>
<td style="text-align:left">REJECT</td>
<td style="text-align:left">丢弃数据包</td>
<td style="text-align:left">可以向发送这个包的源主机发送错误消息</td>
</tr>
<tr>
<td style="text-align:left">TARGET</td>
<td style="text-align:left">指定动作</td>
<td style="text-align:left">说明如何处理这个数据包 接受 丢弃 拒绝</td>
</tr>
<tr>
<td style="text-align:left">JUMP</td>
<td style="text-align:left">标识跳转到那个链上</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">RULE</td>
<td style="text-align:left">一个或者多个匹配及其对应目标</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">REDIRECT</td>
<td style="text-align:left">重定向、映射、透明代理</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">SNAT</td>
<td style="text-align:left">源地址转换</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">DNAT</td>
<td style="text-align:left">目标地址转换</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">MASQUERADE</td>
<td style="text-align:left">ip伪装</td>
<td style="text-align:left">nat 用于adsl</td>
</tr>
<tr>
<td style="text-align:left">LOG</td>
<td style="text-align:left">日志记录</td>
</tr>
</tbody>
</table>
<p>####实例</p>
<ul>
<li><p>查看已有的iptables 规则</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//查看iptables 列表 带数字 </span><br><span class="line">iptables -L -n -v </span><br><span class="line">//查看iptables 以序号标记</span><br><span class="line">iptables -L -n --line-numbers</span><br></pre></td></tr></table></figure>
</li>
<li><p>清除已有的iptables 规则</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">iptables -F   --flush ：清楚规则链中已有的条目；</span><br><span class="line">iptables -X    --delete-chain  删除 规则链</span><br><span class="line">iptables -Z    --flush ：清空规则链中的数据包计算器和字节计数器；</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>*删除 INPUT中的序号为num的规则<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables -D INPUT num</span><br></pre></td></tr></table></figure><p></p>
<p>*开放指定端口 就是接受数据包<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># 开启本地回环接口 运行本机访问本机</span><br><span class="line">iptables -A INPUT -s 127.0.0.1 -j ACCEPT </span><br><span class="line"># 允许已建立或相关连的通行</span><br><span class="line">iptables -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT</span><br><span class="line">#允许本机所有向外访问</span><br><span class="line">iptables -A OUTPUT -j ACCEPT</span><br><span class="line">#允许 访问某个端口</span><br><span class="line">iptables -A INPUT -p tcp  --dport 22 -j ACCEPT  允许访问 22端口</span><br><span class="line"># 禁止其他未允许的规则访问</span><br><span class="line">iptables -A INPUT -j reject</span><br><span class="line"># 禁止其他未允许的转发数据包访问</span><br><span class="line">iptables -A FORWARD -j reject</span><br></pre></td></tr></table></figure><p></p>
<ul>
<li>屏蔽ip <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 屏蔽单个ip</span><br><span class="line">iptables -I INPUT -s 123.1.1.1 -j DROP</span><br><span class="line"># 屏蔽整个网段 123.0.0.0 - 123.255.255.254</span><br><span class="line">iptables -I INPUT -s 123.0.0.0/8 -j DROP</span><br><span class="line"># 屏蔽123.1.0.0 - 123.1.255.254网段</span><br><span class="line">iptables -I INPUT -s 123.1.0.0/16 -j DROP</span><br><span class="line"># 屏蔽 123.1.1.0 - 123.1.1.254网段</span><br><span class="line">iptables -i INPUT -s 123.1.1.0/24 -j DROP</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p><em>
</em><br>*</p>]]></content>
      
        <categories>
            
            <category> 笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[alias笔记]]></title>
      <url>/ming/d0a7cd2b.html</url>
      <content type="html"><![CDATA[<p>#####linux alias 别名设置</p><p>####有时候有些命令常用 例如 ‘ls -a’ ‘ps -aux’ 这样的 如果每次输入全部 麻烦的很 通过设置别名 可以快速使用<br>1:设定临时 alias 只能在当前shell可用 退出shell 失效<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">alias  asliasNname=&apos;命令&apos;</span><br><span class="line">例如: alias psa = &apos;ps -aux&apos;</span><br></pre></td></tr></table></figure><p></p>
<p>2:设定永久 alias<br>只需要吧 alias 加入 环境变量配置文件中即可 例如加入 全局环境变量/etc/profile 或者当前用户的环境变量配置中 例如～/.bashrc<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">tee -a /etc/profile</span><br><span class="line">alias psa=&apos;ps -aux&apos;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># ctrl +c  结束录入后 应用 环境变量</span><br><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure><p></p>
<p>注意: psa = ‘ps -aux’ 这样不行 因为shell语法的格式问题 写python写多了 吗买皮</p>
<p>#####总结: linux别名 可以将一些常用的 但是直接输入 比较长的命令封装起来  向文件追加内容 不一定用tee  echo &gt;&gt; 也是可以的 cat都行 不局限命令 能达成功能即可</p>]]></content>
      
        <categories>
            
            <category> 笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[linux操作文本相关命令笔记]]></title>
      <url>/ming/5e3a8086.html</url>
      <content type="html"><![CDATA[<p>#####Linux下 操作文本命令太多了 cat echo tee sed等</p><p>##sed:按行操作文本</p><p>######sed命令是处理文本的工具 属于管道命令 以行为单位 进行操作文本文件</p><h6 id="sed-nefri-‘command’-file"><a href="#sed-nefri-‘command’-file" class="headerlink" title="sed [-nefri] ‘command’ ./file"></a>sed [-nefri] ‘command’ ./file</h6><h6 id="command-类似-vim的指令"><a href="#command-类似-vim的指令" class="headerlink" title="command 类似 vim的指令"></a>command 类似 vim的指令</h6><p>command<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a∶新增， a 的后面可以接字串，而这些字串会在新的一行出现(目前的下一行)～</span><br><span class="line">c∶取代， c 的后面可以接字串，这些字串可以取代 n1,n2 之间的行！</span><br><span class="line">d∶删除，因为是删除啊，所以 d 后面通常不接任何咚咚；</span><br><span class="line">i∶插入， i 的后面可以接字串，而这些字串会在新的一行出现(目前的上一行)；</span><br><span class="line">p∶列印，亦即将某个选择的资料印出。通常 p 会与参数 sed -n 一起运作～</span><br><span class="line">s∶取代，可以直接进行取代的工作哩！通常这个 s 的动作可以搭配正规表示法！例如 1,20s/old/new/g 就是啦！</span><br></pre></td></tr></table></figure><p></p>
<p>1:删除<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 删除第一行 </span><br><span class="line">sed &apos;1d&apos; ./file</span><br><span class="line"># 删除最后一行</span><br><span class="line">sed &apos;$d&apos; ./file</span><br><span class="line"># 删除 1 到最后一行</span><br><span class="line">sed &apos;1,$d&apos; ./file</span><br></pre></td></tr></table></figure><p></p>
<p>######其他用法 参考 man sed</p>]]></content>
      
        <categories>
            
            <category> 笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[常用或者有趣的linux命令]]></title>
      <url>/ming/5e1b0665.html</url>
      <content type="html"><![CDATA[<table><thead><tr><th>linux版本</th><th>命令</th><th>功能描述</th><th>实例</th></tr></thead><tbody><tr><td>ubuntu</td><td>nautilus</td><td>ubuntu下面 从终端打开文件夹</td><td>nautilus .</td></tr><tr><td>*</td><td>traceroute</td><td>跟踪域名解析</td><td>traceroute 域名</td></tr><tr><td>*</td><td>hexdump</td><td>将文件转换成hex码</td><td>hexdump 文件</td></tr><tr><td>*</td><td>tcpdump、wireshark</td><td>抓包工具</td><td></td></tr><tr><td>*</td><td>sl</td><td>一个会动的火车</td><td></td></tr><tr><td>*</td><td>nohup</td><td>忽略退出终端信号</td><td>nohup renwu &amp;</td></tr><tr><td>*</td><td>tmux</td><td>将单个控制台页面切分的工具</td><td>tmux 启动即可 功能巨强大 适合熟悉linux平台并且有一定的精分症的孩子使用 边编译源码边安装二进制包边解压 简直无敌</td></tr><tr><td>*</td><td>netstat</td><td>查看端口占用情况 配合grep可以查看指定端口的占用情况</td><td>sudo netstat -apn</td></tr><tr><td>*</td><td>top</td><td>动态查看系统的相关状态如cpu占用等</td><td>top</td></tr><tr><td>*</td><td>grep</td><td>正则选取</td><td></td></tr><tr><td>*</td><td>cat</td><td>输出某个文件内容 或者往某个文件写入内容</td><td>cat /etc/profile</td></tr><tr><td>*</td><td>tee</td><td>往某个文件中追加内容 以指定字符结尾 未指定 则是EOF结尾</td><td>tee ./a.txt</td></tr><tr><td>*</td><td>alias</td><td>命名别名</td><td>alias psa=‘ps -aux’</td></tr><tr><td>*</td><td>sed</td><td>按行操作文本</td><td>sed ‘$d’ ./file</td></tr><tr><td>ubuntu</td><td>gnome-screenshot -a</td><td>局域截图</td></tr></tbody></table>]]></content>
      
        <categories>
            
            <category> 笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[linux 解压windows文件乱码处理]]></title>
      <url>/ming/5c7769e6.html</url>
      <content type="html"><![CDATA[<ol><li>通过unzip行命令解压，指定字符集<br>unzip -O CP936 xxx.zip (用GBK, GB18030也可以)<br>有趣的是unzip的manual中并无这个选项的说明, unzip –help对这个参数有一行简单的说明。</li><li>在环境变量中，指定unzip参数，总是以指定的字符集显示和解压文件<br>/etc/environment中加入2行<br><a href="http://www.jb51.net/article/113961.htm#" target="_blank" rel="noopener">?</a><br>1<br>2</li></ol><p>UNZIP=”-O CP936”</p><p>ZIPINFO=”-O CP936”</p><p>这样Gnome桌面的归档文件管理器(file-roller)可以正常使用unzip解压中文，但是file-roller本身并不能设置编码传递给unzip。</p>]]></content>
      
        <categories>
            
            <category> 坑 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[linux使用ss笔记]]></title>
      <url>/ming/5624ab1d.html</url>
      <content type="html"><![CDATA[<p>由于有个朋友对于在linux上使用ss翻墙不会 特别写个简单的笔记、</p><p>#######基于ubunut17.04、python3、</p><p>####1:安装pip3<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install pip3</span><br></pre></td></tr></table></figure><p></p>
<p>####2:通过pip3安装shadowsocks<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pip3 install shadowsocks</span><br></pre></td></tr></table></figure><p></p>
<p>####3:设置shadowsocksServer属性配置<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	&quot;server&quot;:&quot;ss服务器ip&quot;,</span><br><span class="line">	&quot;server_port&quot;:端口,</span><br><span class="line">	&quot;local_address&quot;:&quot;127.0.0.1&quot;,(本地socks5地址)</span><br><span class="line">	&quot;local_port&quot;:1080,(本地socks5端口)</span><br><span class="line">	&quot;password&quot;:&quot;ss服务器密码&quot;,</span><br><span class="line">	&quot;timeout&quot;:300,(超时时间 ms),</span><br><span class="line">	“method”:&quot;aes-256-cfb&quot;(加密方式)尽量选择这个 </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p>
<p>####4:启动本地ss<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo sslocal -c 配置文件地址</span><br></pre></td></tr></table></figure><p></p>
<p>####5:设置代理<br>这里设置代理有很多方式  先说两种常用的<br>1:直接设置整个系统的代理 、通过gfwlist生成ip表 去判别国内国外网站选择性加速<br>2:对某部分程序设置代理、如chrome浏览器 下载个switch代理工具 可以自己设定路由规则也可以通过gfwlist生成相应的ip表</p>
<p>######总结:ss翻墙 总的来说就是 发起访问—&gt;从本地服务器代理访问、判断是否需要代理—&gt;需要代理的连接远程ssServer 进行代理—-&gt;访问gfw之外的内容</p>]]></content>
      
        <categories>
            
            <category> 笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[使用docker搭建ssServer]]></title>
      <url>/ming/409db0cf.html</url>
      <content type="html"><![CDATA[<p>由于gfw的存在 经常需要翻墙 自己手动搭建 ssServer又麻烦 使用docker 使用现成的image简单方便快捷</p><p>######docker只能在3.10以上的内核的linux系统或者差不多版本的其他系统中运行 所以在购买vps的时候要看清楚是什么架构 内核是否支持docker</p><p>######docker 下载ssServer镜像 (无法翻墙的请参考 另一篇笔记 docker使用aliyun加速器)<br>···<br>docker pull mritd/shadowsocks<br>···<br>这个镜像是我认识的一个大佬写的、在dockerhub上也是排名第一的shadowsocksServer容器image</p><p>######启动 ssServer镜像(相关文档地址:<a href="https://hub.docker.com/r/mritd/shadowsocks/" target="_blank" rel="noopener">https://hub.docker.com/r/mritd/shadowsocks/</a>)<br>···<br>docker run -dt –name ss -p 6443:6443 mritd/shadowsocks -s “-s 0.0.0.0 -p 6443 -m aes-256-cfb -k test123 –fast-open”<br>···<br>本地的ssClient设置<br>ip是你vpsip<br>端口 6443<br>加密方式是aes-256-cfb<br>密码是test123</p><p>######总结：用已经有的docker容器来做ssServer能够快速的搭建起一个配置好的ssServer 避免自己手工安装配置的繁琐</p><p>感觉这篇要被查水表</p>]]></content>
      
        <categories>
            
            <category> 笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[分屏工具tmux使用笔记]]></title>
      <url>/ming/885dd8c4.html</url>
      <content type="html"><![CDATA[<p>linux中 经常使用 终端 一次打开多个终端 很麻烦 不好用 有个很强悍的工具 tmux 很出名的分屏工具<br>ubuntu安装<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install tmux</span><br></pre></td></tr></table></figure><p></p>
<p>然后 在终端输入<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tmux</span><br></pre></td></tr></table></figure><p></p>
<p>这个时候 终端已经启动tmux  默认是ctrl+b 是快捷键 就是进入tmux切换操作的命令中 例如<br>将当前终端水平分屏  进入 tmux操作 按下双引号<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ctrl+b ----&gt;“</span><br></pre></td></tr></table></figure><p></p>
<p>垂直分屏幕 进入tmux 按下%<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ctrl+b----&gt;%</span><br></pre></td></tr></table></figure><p></p>
<p>可以启动多个不同的窗口 每个窗口可以按照水平垂直分成不同的窗体<br>窗体之间  切换<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ctrl+b ----&gt;方向键</span><br></pre></td></tr></table></figure><p></p>
<p>改变窗体的大小<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ctrl+b----&gt;按住ctrl 然后方向键改变</span><br></pre></td></tr></table></figure><p></p>
<p>#####其他操作 请查阅 man tmux</p>]]></content>
      
        <categories>
            
            <category> 笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[前端包管理工具npm切换国内源]]></title>
      <url>/ming/3ff0ec3c.html</url>
      <content type="html"><![CDATA[<p>##在学ng2的时候接触到npm管理包、插件的方式 但是npm默认的源是国外的如果懒的科学上网 又想快速使用 只能使用国内的镜像站点 例如aliyun</p><p>####当安装npm 完成 可以通过如下的方法去修改npm的源</p><p>####1.通过config命令<br>npm config set registry <a href="https://registry.npm.taobao.org" target="_blank" rel="noopener">https://registry.npm.taobao.org</a><br>npm info underscore （如果上面配置正确这个命令会有字符串response）</p><p>####2.命令行指定<br>npm –registry <a href="https://registry.npm.taobao.org" target="_blank" rel="noopener">https://registry.npm.taobao.org</a> info underscore</p><p>####3.编辑 ~/.npmrc 加入下面内容(linux 在你的用户目录下 没有就创建 windows在c盘下)<br>registry = <a href="https://registry.npm.taobao.org" target="_blank" rel="noopener">https://registry.npm.taobao.org</a></p>]]></content>
      
        <categories>
            
            <category> 笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[树莓派组装运行]]></title>
      <url>/ming/4c838b91.html</url>
      <content type="html"><![CDATA[<p>####自己闲的蛋疼 购买了个树莓派3b 由于不太懂这个 买配件 组装运行起来耗费了好久 特此做个笔记</p><p>#####树莓派配件组成:<br>1:板子:就是生产好的树莓派的电子板<br>2:电源:3b版本需要5v 2.5A的电源 如果外接设备多的话要按需增加电源<br>3:sd卡:做系统启动 存储的sd存储卡<br>4:散热装备:散热片两个(cpu、gpu)、风扇一个<br>5:外壳:还是需要一个外壳的 不然贼丑</p><p>#####树莓派组装<br>1:先把sd卡刷个系统 随便刷 个官方的系统就行<br>2:把散热片贴好 。风扇接好 风扇接46脚 红色4(供电) 黑色6 如果想可关闭电风扇或者控温自动控制 需要一个继电器、一个温度感应模块<br><img src="http://upload-images.jianshu.io/upload_images/3905525-6dca6ffbe2e0fdac.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>3:插上网线<br>4:接上电源<br>5:开机<br>需要会自己搭建内网或者扫描设备ip<br>然后通过ssh协议连接上树莓派即可</p><p>#####总结:成本大概在300-400左右 其实很不错了 这个价位能有这个配置这个玩法 很满足了 就是有点麻烦什么都要自己折腾 树莓派可以做很多东西 据大佬说 树莓派最终梦想就是自己造一架基于树莓派的无人机</p>]]></content>
      
        <categories>
            
            <category> 笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[guava-basic笔记]]></title>
      <url>/ming/d9ddd520.html</url>
      <content type="html"><![CDATA[<p>##guava basic 基本工具</p><h4 id="避免null-optional"><a href="#避免null-optional" class="headerlink" title="避免null optional"></a>避免null optional</h4><p>如果是jdk1.8以上直接使用optional 1.8以下需要使用guava basic工具包</p><h4 id="前置检查-Preconditions"><a href="#前置检查-Preconditions" class="headerlink" title="前置检查 Preconditions"></a>前置检查 Preconditions</h4><table><thead><tr><th>方法声明（不包括额外参数）</th><th>描述</th><th>检查失败时抛出的异常</th></tr></thead><tbody><tr><td>checkArgument(boolean)</td><td>检查boolean是否为true，用来检查传递给方法的参数。</td><td>IllegalArgumentException</td></tr><tr><td>checkNotNull(T)</td><td>检查value是否为null，该方法直接返回value，因此可以内嵌使用checkNotNull。</td><td>NullPointerException</td></tr><tr><td>checkState(boolean)</td><td>用来检查对象的某些状态。</td><td>IllegalStateException</td></tr><tr><td>checkElementIndex(int index, int size)</td><td>检查index作为索引值对某个列表、字符串或数组是否有效。index&gt;=0 &amp;&amp; index&lt;size *</td><td>IndexOutOfBoundsException</td></tr><tr><td>checkPositionIndex(int index, int size)</td><td>检查index作为位置值对某个列表、字符串或数组是否有效。index&gt;=0 &amp;&amp; index&lt;=size *</td><td>IndexOutOfBoundsException</td></tr><tr><td>checkPositionIndexes(int start, int end, int size)</td><td>检查[start, end]表示的位置范围对某个列表、字符串或数组是否有效*</td><td>IndexOutOfBoundsException</td></tr></tbody></table><h4 id="object方法-Objects"><a href="#object方法-Objects" class="headerlink" title="object方法 Objects"></a>object方法 Objects</h4><p>jdk1.7 后提供了相应的方法 可以不用guava<br>提供比较链 ComparisonChain</p><h4 id="排序-Ordering"><a href="#排序-Ordering" class="headerlink" title="排序 Ordering"></a>排序 Ordering</h4><p>排序器</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>natural()</td><td>对可排序类型做自然排序，如数字按大小，日期按先后排序</td></tr><tr><td>usingToString()</td><td>按对象的字符串形式做字典排序[lexicographical ordering]</td></tr><tr><td>from(Comparator)</td><td>把给定的Comparator转化为排序器</td></tr></tbody></table><p>链式调用</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td></td></tr></tbody></table><p>reverse()|获取语义相反的排序器<br>nullsFirst()|使用当前排序器，但额外把null值排到最前面。<br>nullsLast()|使用当前排序器，但额外把null值排到最后面。<br>compound(Comparator)|合成另一个比较器，以处理当前排序器中的相等情况。<br>lexicographical()|基于处理类型T的排序器，返回该类型的可迭代对象Iterable<t>的排序器。<br>onResultOf(Function)|对集合中元素调用Function，再按返回值用当前排序器排序。</t></p><p>排序器</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td></td></tr></tbody></table><p>greatestOf(Iterable iterable, int k)|获取可迭代对象中最大的k个元素。|leastOf<br>isOrdered(Iterable)|判断可迭代对象是否已按排序器排序：允许有排序值相等的元素。|isStrictlyOrdered<br>sortedCopy(Iterable)|判断可迭代对象是否已严格按排序器排序：不允许排序值相等的元素。|immutableSortedCopy<br>min(E, E)|返回两个参数中最小的那个。如果相等，则返回第一个参数。|max(E, E)<br>min(E, E, E, E…)|返回多个参数中最小的那个。如果有超过一个参数都最小，则返回第一个最小的参数。|max(E, E, E, E…)<br>min(Iterable)|返回迭代器中最小的元素。如果可迭代对象中没有元素，则抛出NoSuchElementException。|max(Iterable), min(Iterator), max(Iterator)</p><h4 id="总结-guava的基本工具类用的多的可能就是-Preconditions-来检查参数了-optional-jdk8-已经包含了-比较的方法-也有-或者-jdk8中stream集合提供更加强大的-宝马都有了-还用个毛的guava的自行车"><a href="#总结-guava的基本工具类用的多的可能就是-Preconditions-来检查参数了-optional-jdk8-已经包含了-比较的方法-也有-或者-jdk8中stream集合提供更加强大的-宝马都有了-还用个毛的guava的自行车" class="headerlink" title="总结: guava的基本工具类用的多的可能就是 Preconditions 来检查参数了     optional jdk8 已经包含了 比较的方法 也有   或者 jdk8中stream集合提供更加强大的  宝马都有了 还用个毛的guava的自行车"></a>总结: guava的基本工具类用的多的可能就是 Preconditions 来检查参数了 optional jdk8 已经包含了 比较的方法 也有 或者 jdk8中stream集合提供更加强大的 宝马都有了 还用个毛的guava的自行车</h4>]]></content>
      
        <categories>
            
            <category> 笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> tools </tag>
            
            <tag> guava </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[guava-collections笔记]]></title>
      <url>/ming/54bd928f.html</url>
      <content type="html"><![CDATA[<h2 id="guava-集合工具"><a href="#guava-集合工具" class="headerlink" title="guava 集合工具"></a>guava 集合工具</h2><h4 id="不可变集合"><a href="#不可变集合" class="headerlink" title="不可变集合"></a>不可变集合</h4><ul><li>当对象被不可信的库调用时，不可变形式是安全的；</li><li>不可变对象被多个线程调用时，不存在竞态条件问题</li><li>不可变集合不需要考虑变化，因此可以节省时间和空间。所有不可变的集合都比它们的可变形式有更好的内存利用率（分析和测试细节）；</li><li>不可变对象因为有固定不变，可以作为常量来安全使用<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">guava 不可变集合不接受null   如果需要可使用null使用jdk中的Collections.unmonifiableXXX（）</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h6 id="创建不可变集合"><a href="#创建不可变集合" class="headerlink" title="创建不可变集合"></a>创建不可变集合</h6><ul>
<li>copyOf ImmutableSet.copyOf(set);</li>
<li>of ImmutableSet.of(“1”,”2”);</li>
<li>Builder <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ImmutableSet.&lt;Color&gt;builder()</span><br><span class="line">            .addAll(WEBSAFE_COLORS)</span><br><span class="line">            .add(new Color(0, 191, 255))</span><br><span class="line">            .build();</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>有序的不可变集合 在构建的时候 就排序</p>
<h6 id="asList-视图"><a href="#asList-视图" class="headerlink" title="asList() 视图"></a>asList() 视图</h6><p>所有不可变集合提供 asList() 视图  方便的获取指定值   sortedSet.asList().get(k)从ImmutableSortedSet中读取第k个最小元素。</p>
<h6 id="可变集合和不可变集合对照表"><a href="#可变集合和不可变集合对照表" class="headerlink" title="可变集合和不可变集合对照表"></a>可变集合和不可变集合对照表</h6><table>
<thead>
<tr>
<th>可变集合接口</th>
<th>属于JDK还是Guava</th>
<th>不可变版本</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
</tr>
</tbody>
</table>
<p>Collection|JDK|ImmutableCollection<br>List|JDK|ImmutableList<br>Set|JDK|ImmutableSet<br>SortedSet/NavigableSet|JDK|ImmutableSortedSet<br>Map|JDK|ImmutableMap<br>SortedMap|JDK|ImmutableSortedMap<br>Multiset|Guava|ImmutableMultiset<br>SortedMultiset|Guava|ImmutableSortedMultiset<br>Multimap|Guava|ImmutableMultimap<br>ListMultimap|Guava|ImmutableListMultimap<br>SetMultimap|Guava|ImmutableSetMultimap<br>BiMap|Guava|ImmutableBiMap<br>ClassToInstanceMap|Guava|ImmutableClassToInstanceMap<br>Table|Guava|ImmutableTable</p>
<h4 id="guava-新集合"><a href="#guava-新集合" class="headerlink" title="guava 新集合"></a>guava 新集合</h4><p>1: Multiset</p>
<p>方法|描述<br>|—-|—-|<br>count(E)|给定元素在Multiset中的计数<br>elementSet()|Multiset中不重复元素的集合，类型为Set<e><br>entrySet()|和Map的entrySet类似，返回Set&lt;Multiset.Entry<e>&gt;，其中包含的Entry支持getElement()和getCount()方法<br>add(E, int)|增加给定元素在Multiset中的计数<br>remove(E, int)|减少给定元素在Multiset中的计数<br>setCount(E, int)|设置给定元素在Multiset中的计数，不可以为负数<br>size()|返回集合元素的总个数（包括重复的元素）</e></e></p>
<p>2:Multimap  单键多值map</p>
<p>方法签名|描述|等价于<br>|—-|—-|—|<br>put(K, V)|添加键到单个值的映射|multimap.get(key).add(value)<br>putAll(K, Iterable<v>)|依次添加键到多个值的映射|Iterables.addAll(multimap.get(key), values)<br>remove(K, V)|移除键到值的映射；如果有这样的键值并成功移除，返回true。|multimap.get(key).remove(value)<br>removeAll(K)|清除键对应的所有值，返回的集合包含所有之前映射到K的值，但修改这个集合就不会影响Multimap了。|multimap.get(key).clear()<br>replaceValues(K, Iterable<v>)|清除键对应的所有值，并重新把key关联到Iterable中的每个元素。返回的集合包含所有之前映射到K的值。|multimap.get(key).clear(); Iterables.addAll(multimap.get(key), values)</v></v></p>
<p>3: BiMap 双向映射map </p>
<ul>
<li>通过inverse() 反转键值对</li>
<li>保证值是唯一的 values()返回是set</li>
<li>键映射到已经存在的值 需要使用 forcePut</li>
</ul>
<p>4: Table =&gt; Map&lt;R,Map<c ,v="">&gt; ==》表格 Table<r ,c,v=""></r></c></p>
<ul>
<li>rowMap()：用Map&lt;R, Map<c ,="" v="">&gt;表现Table<r ,="" c,="" v="">。同样的， rowKeySet()返回”行”的集合Set<r>。</r></r></c></li>
<li>row(r) ：用Map<c ,="" v="">返回给定”行”的所有列，对这个map进行的写操作也将写入Table中。</c></li>
<li>类似的列访问方法：columnMap()、columnKeySet()、column(c)。（基于列的访问会比基于的行访问稍微低效点）</li>
<li>cellSet()：用元素类型为Table.Cell<r ,="" c,="" v="">的Set表现Table<r ,="" c,="" v="">。Cell类似于Map.Entry，但它是用行和列两个键区分的。</r></r></li>
</ul>
<p>5: CLassToInstanceMap 它的键是类型，而值是符合键所指类型的对象。<br>Map&lt;Class&lt;? extends B&gt;, B&gt; ==》 ClassToInstanceMap<k ,v=""></k></p>
<h4 id="集合扩展工具类"><a href="#集合扩展工具类" class="headerlink" title="集合扩展工具类"></a>集合扩展工具类</h4><p>1: Forwarding(装饰器)<br>自定义集合的时候可以前后加一些操作　例如日志<br>2: PeekingIterator(将jdk中的Iterator增强提供一个peek()方法)<br>注意：Iterators.peekingIterator返回的PeekingIterator不支持在peek()操作之后调用remove()方法。<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">List&lt;E&gt; result = Lists.newArrayList();</span><br><span class="line">PeekingIterator&lt;E&gt; iter = Iterators.peekingIterator(source.iterator());</span><br><span class="line">while (iter.hasNext()) &#123;</span><br><span class="line">    E current = iter.next();</span><br><span class="line">    while (iter.hasNext() &amp;&amp; iter.peek().equals(current)) &#123;</span><br><span class="line">        //跳过重复的元素</span><br><span class="line">        iter.next();</span><br><span class="line">    &#125;</span><br><span class="line">    result.add(current);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p>
<p>3:AbstractIterator  AbstractSequentialIterator jdk8有更加强大的迭代器<br><a href="http://ifeve.com/google-guava-newcollectiontypes/" target="_blank" rel="noopener">http://ifeve.com/google-guava-newcollectiontypes/</a></p>
<h4 id="总结-guava工具包最出名应该就是集合的相关操作了"><a href="#总结-guava工具包最出名应该就是集合的相关操作了" class="headerlink" title="总结: guava工具包最出名应该就是集合的相关操作了"></a>总结: guava工具包最出名应该就是集合的相关操作了</h4><h4 id="1：提供不可变集合-来提升性能-但是这个用起来要注意-要确定后续肯定不会在向集合添加更新删除操作了，之前在项目中-调用dubbo服务的时候-用不可变集合-直接gg、"><a href="#1：提供不可变集合-来提升性能-但是这个用起来要注意-要确定后续肯定不会在向集合添加更新删除操作了，之前在项目中-调用dubbo服务的时候-用不可变集合-直接gg、" class="headerlink" title="1：提供不可变集合 来提升性能 但是这个用起来要注意 要确定后续肯定不会在向集合添加更新删除操作了，之前在项目中 调用dubbo服务的时候 用不可变集合 直接gg、"></a>1：提供不可变集合 来提升性能 但是这个用起来要注意 要确定后续肯定不会在向集合添加更新删除操作了，之前在项目中 调用dubbo服务的时候 用不可变集合 直接gg、</h4><p>####2：第二大的功能 应该就是他的一些变种集合类了  不过用的比较多的话 也就是table、Multimap  其他有用到 很少</p>]]></content>
      
        <categories>
            
            <category> 笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> tools </tag>
            
            <tag> guava </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[树莓派vnc链接]]></title>
      <url>/ming/52f5e4f0.html</url>
      <content type="html"><![CDATA[<p>###树莓派开启wifi模块后 想看看树莓派的桌面 然后就开启了vnc服务 玩玩</p><p>####安装vnc服务<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install tightvncserver</span><br></pre></td></tr></table></figure><p></p>
<p>####设置vnc链接的密码（最长只能8位 超过的截取前8位）<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vncpasswd</span><br></pre></td></tr></table></figure><p></p>
<p>####添加开机启动<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/init.d/vncserver</span><br></pre></td></tr></table></figure><p></p>
<p>内容:<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/sh</span><br><span class="line">#如果不是 pi用户 请 改这里的user  登录的时候 也用这里的user</span><br><span class="line">export USER=&apos;pi&apos; </span><br><span class="line">eval cd ~$USER</span><br><span class="line"> </span><br><span class="line">case &quot;$1&quot; in</span><br><span class="line">  start)</span><br><span class="line">    # 启动命令行。此处自定义分辨率、控制台号码或其它参数。</span><br><span class="line">    su $USER -c &apos;/usr/bin/vncserver -depth 16 -geometry 1024x768 :1&apos;</span><br><span class="line">    echo &quot;Starting VNC server for $USER &quot;</span><br><span class="line">    ;;</span><br><span class="line">  stop)</span><br><span class="line">    # 终止命令行。此处控制台号码与启动一致。</span><br><span class="line">    su $USER -c &apos;/usr/bin/vncserver -kill :1&apos;</span><br><span class="line">    echo &quot;vncserver stopped&quot;</span><br><span class="line">    ;;</span><br><span class="line">  *)</span><br><span class="line">    echo &quot;Usage: /etc/init.d/vncserver &#123;start|stop&#125;&quot;</span><br><span class="line">    exit 1</span><br><span class="line">    ;;</span><br><span class="line">esac</span><br><span class="line">exit 0</span><br></pre></td></tr></table></figure><p></p>
<p>添加执行权限 更新开机启动<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo chmod 755 /etc/init.d/vncserver</span><br><span class="line">sudo update-rc.d vncserver defaults</span><br></pre></td></tr></table></figure><p></p>
<p>###登录<br>通过vnc工具登录<br>账户 pi(脚本中的user)<br>密码 设置的vnc密码 不是ssh密码</p>
<p>###多个桌面开启<br>默认是端口:5900  如果第一个窗口推荐在5900+1。。。以此类推 不要用默认的 有坑    </p>
<p>####总结: vnc链接树莓派的桌面 感觉卡卡的 玛格及</p>]]></content>
      
        <categories>
            
            <category> 笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[树莓派链接wifi]]></title>
      <url>/ming/8634a6bb.html</url>
      <content type="html"><![CDATA[<p>####买回来好久 一直都是被舍友拿去垫电脑去了 今天有时间 拿出来把wifi模块启动起来 以后 就算垫桌子 也能用起来</p><p>#####前提条件<br>1:pi能正常启动<br>2:能链接pi的shell<br>3:pi的版本必须由无线网卡 pi 3b版本 带了无线网卡了</p><p>#####具体操作<br>1:登录shell<br>2:查看 附近wifi (多个无线网卡的大兄弟 请使用 ifconfig 查看选择一个网卡) 一般一个无线网卡 是wlan0<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo iwlist wlan0 scan</span><br></pre></td></tr></table></figure><p></p>
<p>每一个cell都是一个wifi热点 essid 是名字(中文的wifi名字是显示的\xSS这种忽略即可 反正设置的时候直接输入中文即可)</p>
<p>注意:<br>如果由中文的wifi热点名字 会转成其他格式的字符串 会出现\xAs\xDD….<br>这样的 如果你需要转换成相应的中文 可以尝试用python来转看看<br>具体操作如下:<br>         打开python控制台<br>         输入<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">str=b&apos;乱码的字符串&apos;</span><br><span class="line">print (str.decode(&apos;utf-8&apos;))</span><br></pre></td></tr></table></figure><p></p>
<p>3:编辑 wifi模块的配置文件 /etc/wpa_supplicant/wpa_supoplicant.conf<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">##设置network中的参数</span><br><span class="line">    network=&#123;  </span><br><span class="line">        ssid=&quot;wifi热点名称(中文直接输入 不需要转码)&quot;  </span><br><span class="line">        psk=&quot;wifi密码&quot;  </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p></p>
<p>4:重启<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#重启</span><br><span class="line">shutdown -r now</span><br></pre></td></tr></table></figure><p></p>
<p>5:还是先用线链接pi的shell 然后查看 network的信息<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ifconfig</span><br></pre></td></tr></table></figure><p></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">eth0      Link encap:Ethernet  HWaddr b8:27:eb:43:64:4d  </span><br><span class="line">          UP BROADCAST MULTICAST  MTU:1500  Metric:1</span><br><span class="line">          RX packets:224 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:166 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:1000 </span><br><span class="line">          RX bytes:20583 (20.1 KiB)  TX bytes:23454 (22.9 KiB)</span><br><span class="line"></span><br><span class="line">lo        Link encap:Local Loopback  </span><br><span class="line">          inet addr:127.0.0.1  Mask:255.0.0.0</span><br><span class="line">          inet6 addr: ::1/128 Scope:Host</span><br><span class="line">          UP LOOPBACK RUNNING  MTU:65536  Metric:1</span><br><span class="line">          RX packets:136 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:136 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:1 </span><br><span class="line">          RX bytes:11472 (11.2 KiB)  TX bytes:11472 (11.2 KiB)</span><br><span class="line"></span><br><span class="line">wlan0     Link encap:Ethernet  HWaddr b8:27:eb:16:31:18  </span><br><span class="line">          inet addr:192.168.3.111  Bcast:192.168.3.255  Mask:255.255.255.0</span><br><span class="line">          inet6 addr: fe80::bd80:706f:310d:a21b/64 Scope:Link</span><br><span class="line">          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1</span><br><span class="line">          RX packets:89315 errors:0 dropped:31 overruns:0 frame:0</span><br><span class="line">          TX packets:63804 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:1000 </span><br><span class="line">          RX bytes:125457894 (119.6 MiB)  TX bytes:6884073 (6.5 MiB)</span><br></pre></td></tr></table></figure>
<p>无线网卡的ip是 wlan0中的 第二行 inet addr:192.168.3.111<br>这个时候可以拔掉网线使用 wlan0中的ip链接pi了 </p>
<p>####总结:树莓派 3b版本中已经集成了wifi模块 只需要配置wifi热点信息重启就行了</p>]]></content>
      
        <categories>
            
            <category> 笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[spring boot (一)笔记]]></title>
      <url>/ming/1d0e6366.html</url>
      <content type="html"><![CDATA[<p>##步骤<br>1:安装spring boot cli<br>2:利用spring boot cli初始化项目<br>3:写一个helloworld控制器</p><p>##1:安装spring boot cli<br>spring boot cli是spring boot的一个操作工具 可以直接利用这个工具去生成 管理spribg boot项目<br>在这里去寻找合适的版本下载解压 添加到系统路径<br><a href="http://repo.spring.io/release/org/springframework/boot/spring-boot-cli/" target="_blank" rel="noopener">http://repo.spring.io/release/org/springframework/boot/spring-boot-cli/</a><br>安装方式有两种<br>1:类似jdk安装方法 下载spring boot cli 解压包 将目录下的bin添加到系统路径中<br>2:利用gvm(Groovy的工具去管理):<br>安装gvm 之后<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gvm install springboot</span><br><span class="line">spring --version</span><br></pre></td></tr></table></figure><p></p>
<p>##2:利用spring boot cli 初始化项目<br>spring boot cli 初始化项目 是从网络上下载一个基本demo来初始化的<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">spring init -dweb,data-jpa,h2,thymeleaf</span><br></pre></td></tr></table></figure><p></p>
<p>会初始化spring mvc jpa  h2 等  组成一个基本的spring +mvc+jpa+h2数据库的一个基本项目   默认是maven 如果需要gradle来进行项目管理 在语句后加上 –build gradle即可</p>
<p>##3:hellwworld控制器<br>就是写个spring mvc的控制器<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@RestController</span><br><span class="line">public class TestController &#123;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(&quot;/test&quot;)</span><br><span class="line">    public String test()&#123;</span><br><span class="line">        return &quot;test springboot&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p>
<p>控制器访问地址为:<a href="http://localhost:8080/test" target="_blank" rel="noopener">http://localhost:8080/test</a></p>
<p>###总结:spring boot 就是spring 等相关框架一个快速版  默认设置已经够用 自定义配置覆盖默认配置</p>]]></content>
      
        <categories>
            
            <category> 笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
            <tag> spring </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[spring boot (二)笔记]]></title>
      <url>/ming/64575eaf.html</url>
      <content type="html"><![CDATA[<p>###步骤<br>1:使用spring boot cli 生成基本项目<br>2:写dao、controller层代码<br>3:写thymeleaf 模板</p><p>###1:初始化项目<br>spring init -dweb,data-jpa,h2,thymeleaf<br>下载demo.zip解压 改名springboot (任意名称)<br>刷新maven 下载jar包构建项目</p><p>###2:dao、controller层代码<br>entity<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">@Entity</span><br><span class="line">public class Book &#123;</span><br><span class="line">    @Id</span><br><span class="line">    @GeneratedValue(strategy = GenerationType.AUTO)</span><br><span class="line">    private Long id;</span><br><span class="line">    private String reader;</span><br><span class="line">    private String isbn;</span><br><span class="line">    private String title;</span><br><span class="line">    private String author;</span><br><span class="line">    private String description;</span><br><span class="line">.....省略setter gettter等方法</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p>
<p>定义jpa book实体的 repository<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@Repository</span><br><span class="line">public interface BookRepository extends JpaRepository&lt;Book,Long&gt; &#123;</span><br><span class="line">    List&lt;Book&gt; findByReader(String reader);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p>
<p>正式项目中会设立service层 这里就不写了  就是跟平常写spring 项目一样的玩法<br>定义 controller层 新增和查看控制器<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">@Controller</span><br><span class="line">public class ReadingListController &#123;</span><br><span class="line"></span><br><span class="line">    @Resource</span><br><span class="line">    BookRepository bookRepository;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(value = &quot;/&#123;reader&#125;&quot;,method = RequestMethod.GET)</span><br><span class="line">    public String readersBook(Model model,</span><br><span class="line">                              @PathVariable(value = &quot;reader&quot;,required = false)String reader)&#123;</span><br><span class="line">        List&lt;Book&gt; books= bookRepository.findByReader(reader);</span><br><span class="line">        if (books!=null)&#123;</span><br><span class="line">            model.addAttribute(&quot;books&quot;,books);</span><br><span class="line">        &#125;</span><br><span class="line">        return &quot;readingList&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(value = &quot;/&#123;reader&#125;&quot;,method = RequestMethod.POST)</span><br><span class="line">    public String addToReadingList(@PathVariable(value = &quot;reader&quot;,required = false) String reader,Book book)&#123;</span><br><span class="line">        book.setReader(reader);</span><br><span class="line">        bookRepository.save(book);</span><br><span class="line">        return &quot;redirect:/&#123;reader&#125;&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p>
<p>###thymeleaf 模板引擎代码<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot; xmlns:th=&quot;http://www.w3.org/1999/xhtml&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;/&gt;</span><br><span class="line">    &lt;title&gt;阅读列表&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h2&gt;你的阅读列表&lt;/h2&gt;</span><br><span class="line">&lt;div th:unless=&quot;$&#123;#lists.isEmpty(books)&#125;&quot;&gt;</span><br><span class="line">    &lt;dl th:each=&quot;book : $&#123;books&#125;&quot;&gt;</span><br><span class="line">        &lt;dt class=&quot;bookHeadline&quot;&gt;</span><br><span class="line">            &lt;span th:text=&quot;$&#123;book.title&#125;&quot;&gt;标题&lt;/span&gt;</span><br><span class="line">            &lt;span th:text=&quot;$&#123;book.author&#125;&quot;&gt;作者&lt;/span&gt;</span><br><span class="line">            (ISBN: &lt;span th:text=&quot;$&#123;book.isbn&#125;&quot;&gt;ISBN&lt;/span&gt;)</span><br><span class="line">        &lt;/dt&gt;</span><br><span class="line">        &lt;dd class=&quot;bookDescription&quot;&gt;</span><br><span class="line">&lt;span th:if=&quot;$&#123;book.description&#125;&quot;</span><br><span class="line">      th:text=&quot;$&#123;book.description&#125;&quot;&gt;Description&lt;/span&gt;</span><br><span class="line">            &lt;span th:if=&quot;$&#123;book.description eq null&#125;&quot;&gt;</span><br><span class="line">description为空&lt;/span&gt;</span><br><span class="line">        &lt;/dd&gt;</span><br><span class="line">    &lt;/dl&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div th:if=&quot;$&#123;#lists.isEmpty(books)&#125;&quot;&gt;</span><br><span class="line">    &lt;p&gt;当前没有阅读&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;hr/&gt;</span><br><span class="line">&lt;h3&gt;添加书&lt;/h3&gt;</span><br><span class="line">&lt;!--只需要进控制器即可 直接post当前路径--&gt;</span><br><span class="line">&lt;form method=&quot;POST&quot;&gt;</span><br><span class="line">    &lt;label&gt;标题:&lt;/label&gt;</span><br><span class="line">    &lt;input type=&quot;text&quot; name=&quot;title&quot; size=&quot;50&quot;&gt;&lt;/input&gt;&lt;br/&gt;</span><br><span class="line">    &lt;label&gt;作者:&lt;/label&gt;</span><br><span class="line">    &lt;input type=&quot;text&quot; name=&quot;author&quot; size=&quot;50&quot;&gt;&lt;/input&gt;&lt;br/&gt;</span><br><span class="line">    &lt;label&gt;ISBN:&lt;/label&gt;</span><br><span class="line">    &lt;input type=&quot;text&quot; name=&quot;isbn&quot; size=&quot;15&quot;&gt;&lt;/input&gt;&lt;br/&gt;</span><br><span class="line">    &lt;label&gt;Description:&lt;/label&gt;&lt;br/&gt;</span><br><span class="line">    &lt;textarea name=&quot;description&quot; cols=&quot;80&quot; rows=&quot;5&quot;&gt;</span><br><span class="line">&lt;/textarea&gt;&lt;br/&gt;</span><br><span class="line">    &lt;input type=&quot;submit&quot;&gt;&lt;/input&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p></p>
<p>##浏览器打开<a href="http://localhost:8080/sss(任意字符串" target="_blank" rel="noopener">http://localhost:8080/sss(任意字符串</a> 进 get  /{reader}控制器即可)</p>
<p>###代码地址:<a href="https://github.com/xuxianyu/myGitHub/tree/master/springboot" target="_blank" rel="noopener">https://github.com/xuxianyu/myGitHub/tree/master/springboot</a></p>]]></content>
      
        <categories>
            
            <category> 笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
            <tag> spring </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[spring boot (三)笔记]]></title>
      <url>/ming/241784d.html</url>
      <content type="html"><![CDATA[<p>###spring boot中 在某些配置的时候肯定是需要自定义配置的 spring boot 默认显示配置覆盖默认配置 所以只需要符合spring boot的配置环境</p><p>###能够覆盖默认配置的配置位置<br>1:命令行参数(如直接命令行启动某个jar 后面附带的命令)<br>2:jndi配置<br>3:jvm配置<br>4:操作系统环境变量<br>5:随机生成带random.*的属性(并不是很明白 以后看懂了 在更新)<br>6:应用程序的application.properties 或者 application.yml<br>7:通过@PropertySource注解标注的bean</p><p>######按照顺序覆盖 优先级从1-7 依次降低 就是说 当命令行指定了某个配置 后面在怎么写 也无法改变 因为 命令行的参数优先级最高</p><p>######如果 有的配置上述几个位置没有配置则采用spring boot 的默认配置</p><p>###application文件位置<br>1:外置 应用程序的运行目录的/config目录<br>2:外置 应用程序运行目录<br>3:内置 jar或者war的/config目录内<br>4:内置 jar或者war的根目录</p><p>######也是从1-4 优先级依次降低、yml配置 覆盖 properties中的配置</p><p>###在程序中使用配置中的参数<br>@ConfigurationProperties<br>这个注解可以去配置中寻找某些前缀的参数<br>如 配置中有<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">my.name=xianyu</span><br><span class="line">my.sex=boy</span><br></pre></td></tr></table></figure><p></p>
<p>那么可以在某个bean中注入 通过setter注入<br>···<br>@ConfigurationProperties(prefix=”my”)<br>public class myProperties{<br>  private String name;<br>private String sex;<br>setter.getter 。。。。<br>}<br>···</p>]]></content>
      
        <categories>
            
            <category> 笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
            <tag> spring </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[docker-compose配置笔记]]></title>
      <url>/ming/5f628b10.html</url>
      <content type="html"><![CDATA[<p>####docker-compose 是docker的一个工具 是用来根据配置联合启动多个docker的工具 特别是在启动一些复杂应用的时候 适合用docker-compose来启动 当然 也可以自己写shell脚本启动</p><p>####docker-compose配置文件 部分字段解释</p><p>#####实例 yaml格式<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">version: &apos;3&apos;</span><br><span class="line">services: </span><br><span class="line">  mysql: </span><br><span class="line">    image: mysql</span><br><span class="line">    ports:</span><br><span class="line">      - &apos;3306:3306&apos;</span><br><span class="line">    networks:</span><br><span class="line">      - network1</span><br><span class="line">  redis: </span><br><span class="line">    image: redis</span><br><span class="line">    ports:</span><br><span class="line">      - &apos;6379:6379&apos;</span><br><span class="line">    networks: </span><br><span class="line">      - network1</span><br><span class="line">  nginx:</span><br><span class="line">    image: nginx</span><br><span class="line">    prots:</span><br><span class="line">      - &apos;80:80&apos;</span><br><span class="line">    networks:</span><br><span class="line">      - network1</span><br><span class="line">networks:</span><br><span class="line">  network1:</span><br><span class="line">    driver: bridge</span><br></pre></td></tr></table></figure><p></p>
<p>标准的docker-compose配置需要version、service、networks三部分</p>
<ul>
<li><p>version 配置文件版本</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">不能填写1</span><br></pre></td></tr></table></figure>
</li>
<li><p>service 容器相关启动配置</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">可以指定 image相关的启动参数 例如 -v  --name  -p   等启动信息</span><br><span class="line">在挂在数据卷的时候 也就是 指定-v参数的时候  windows指定的目录无权限 坑的一匹</span><br></pre></td></tr></table></figure>
</li>
<li><p>networks 容器使用的网卡模式</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">主要是设定容器使用的网卡模式</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>####docker-compose 用法<br>用法和docker 的用法差不多<br>例如<br>    up 根据这个yaml启动相应的容器  加上 -f  指定yaml文件  不指定 默认是当前目录的./docker-compose.yaml   -d是后台运行 不指定-d前台运行<br>    build  可以根据dockerfile 去构建生成启动容器<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker-compose -f ./xxx.yaml up</span><br></pre></td></tr></table></figure><p></p>
<p>其他用法 参考man docker-compose </p>
<p>#####学习博客地址:<a href="http://www.jianshu.com/p/2217cfed29d7" target="_blank" rel="noopener">http://www.jianshu.com/p/2217cfed29d7</a></p>]]></content>
      
        <categories>
            
            <category> 笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> docker </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[git glow 笔记]]></title>
      <url>/ming/c67df015.html</url>
      <content type="html"><![CDATA[<p>###gitflow 代码提交规范<br>如下图：<br><img src="http://upload-images.jianshu.io/upload_images/3905525-270696a74d45d27a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p>master:线上分支 这个分支 就是线上代码所在的分支 每个点就是软件的一个版本 打上tag<br>develop:当代码在开发分支上开发完毕经过基本测试 即可推送合并到develop上 这个是一个比较稳定的一个版本了 合并到develop分支上的功能 代表这个是必须上线的一个功能<br>feature:开发分支 这个可以开多个 多个项目组 并行开发 在合适的时机 合并到develop 或者 新的feature分支 进行功能合并<br>release:测试分支 develop上的代码 分开一个release分支进行测试 当测试阶段性完成 就合并到develop分支 当整个测试完成 就将测试完成的代码合并到develop 和master分支上<br>hotfixes:线上bug修复分支 主要处理 master 也就是线上的bug 开的临时分支 当bug处理完成 则将代码推送到develop和master分支</p><p>这几种分支中 develop占用主要地位 几乎所有的分支度基于这个分支 不管是 feature、release、hotfixes、master 度与develop分支有关</p>]]></content>
      
        <categories>
            
            <category> 笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> git </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[java注解笔记]]></title>
      <url>/ming/478f654a.html</url>
      <content type="html"><![CDATA[<p>##java定义的4个标准元数据注解:<br>1 @Target<br>2 @Retention<br>3 @Documented<br>4 @Inherited<br>|名称 | 作用 | 取值 | 备注|<br>|———|:——|:——-|——|<br>|@target | 用来说明annotation修饰对象范围 描述注解使用范围<br>| 1.CONSTRUCTOR:用于描述构造器<br>2.FIELD:用于描述域<br>3.LOCAL_VARIABLE:用于描述局部变量<br>4.METHOD:用于描述方法<br>5.PACKAGE:用于描述包<br>6.PARAMETER:用于描述参数<br>7.TYPE:用于描述类、接口(包括注解类型) 或enum声明<br>|在自定义注解时候 定义注解使用范围<br>@Retention<br>定义annotation保留时间长短 也就是生命周期<br>1.SOURCE:在源文件中有效（即源文件保留）<br>　　　　2.CLASS:在class文件中有效（即class保留）<br>　　　　3.RUNTIME:在运行时有效（即运行时保留）<br>用来定义注解生命周期<br>@Documented<br>标记注解 描述这个类型的注解是作为被标注的程序成员变量的公共api</p><p>就是一个标记 例如javadoc的注解 可用被javadoc这样的工具进行操作生成文档<br>@Inherited<br>标记注解 描述某个被标注的类型是被继承的 如果使用此注解标记一个类 啦么这个注解将用于该类的子类<br>当@Inherited annotation类型标注的annotation的Retention是RetentionPolicy.RUNTIME，则反射API增强了这种继承性。如果我们使用java.lang.reflect去查询一个@Inherited annotation类型的annotation时，反射代码检查将展开工作：检查class和其父类，直到发现指定的annotation类型被发现，或者到达类继承结构的顶层。</p><p>定义注解格式 public @interface 注解名{定义内容}<br>注解参数可支持类型：<br>1.所有基本数据类型（int,float,boolean,byte,double,char,long,short)<br>　　　　2.String类型<br>　　　　3.Class类型<br>　　　　4.enum类型<br>　　　　5.Annotation类型<br>　　　　6.以上所有类型的数组</p><p>annotation类型的参数设定要求：<br>第一,只能用public或默认(default)这两个访问权修饰.例如,String value();这里把方法设为defaul默认类型；　 　<br>　　第二,参数成员只能用基本类型byte,short,char,int,long,float,double,boolean八种基本数据类型和 String,Enum,Class,annotations等数据类型,以及这一些类型的数组.例如,String value();这里的参数成员就为String;　　<br>　　第三,如果只有一个参数成员,最好把参数名称设为”value”,后加小括号.例:下面的例子FruitName注解就只有一个参数成员。</p><p>注解元素必须有默认值 要么默认指定 要么注解时候指定。非基本类型的注解元素不能为null</p><p>注解如果不处理 几乎和注释一样 所以需要注解处理器<br>主要是通过反射来构建自定义注解处理器</p>]]></content>
      
        <categories>
            
            <category> 笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java基础 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[web service笔记]]></title>
      <url>/ming/a451f549.html</url>
      <content type="html"><![CDATA[<p>##web service 三要素 soap、wsdl、uddi</p><p>###soap(Simple Object Access Protocol) 简单对象访问协议<br>soap是一种对象访问通信协议 基于xml的协议 用来访问结构化和固化的信息</p><p>主要特点 制定程序之间的通信、消息格式; 独立平台、语言;基于xml;允许绕过防火墙;w3c标准</p><p>######soap消息是一个xml文档:<br>必须包含Envelope元素 (标识此xml文档为soap消息)<br>必须包含Body元素(包含所有调用和响应的信息)<br>可选Header元素(头部信息)、Fault(处理此消息发生的错误信息)</p><p>语法规则:<br>soap消息必须是xml<br>soap消息必须使用soap Envelope、soap Encoding 命名空间来保证规范<br>soap消息不能包含DTD<br>soap不能包含xml处理指令<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot;&gt;</span><br><span class="line">&lt;soap:Envelope</span><br><span class="line">xmlns:soap=&quot;http://www.w3.org/2001/12/soap-envelope&quot;</span><br><span class="line">soap:encodingStyle=&quot;http://www.w3.org/2001/12/soap-encoding&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;soap:Body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/soap:Body&gt;</span><br><span class="line">&lt;/soap:Envelope&gt;</span><br></pre></td></tr></table></figure><p></p>
<p>soap消息的xml文档 一般包含Header、Body、Fault等三个元素 具体直接查询w3c文档</p>
<p>###wsdl(Web Services Description Language )网络服务描述语言<br>wsdl也是xml文档 用来描述网络服务  不是w3c标准<br>主要元素:<br>portType：web service 执行的操作<br>message：web service 使用消息<br>types：web service使用数据类型<br>binding：web service 使用的通信协议</p>
<p>######portType端口<br>提供四种类型<br>客户端主动<br>One-way:接受消息 不返回<br>Request-response：此服务接受请求返回响应<br>服务端主动<br>Solicit-response:此服务发送请求等待响应<br>Notiication：此服务发送一个请求 不等待响应  </p>
<p>######Request-response类型<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;message name=&quot;myRequest“&gt;</span><br><span class="line">    &lt;part name=&quot;param&quot; type=”xs:string&quot;/&gt;</span><br><span class="line">&lt;/message&gt;</span><br><span class="line"></span><br><span class="line">&lt;message name=&quot;myResponse&quot;&gt;</span><br><span class="line">    &lt;part name=&quot;value&quot; type=&quot;xs:string&quot;/&gt;</span><br><span class="line">&lt;/message&gt;</span><br><span class="line"></span><br><span class="line">&lt;portType name=&quot;myService&quot;&gt;</span><br><span class="line">    &lt;operation name=&quot;myRequestResponse&gt;</span><br><span class="line">        &lt;input message=&quot;myRequest&quot;/&gt;</span><br><span class="line">        &lt;output message=&quot;myResponse&quot;/&gt;</span><br><span class="line">    &lt;/operation&gt;</span><br><span class="line">&lt;/portType&gt;</span><br></pre></td></tr></table></figure><p></p>
<p>上述例子 一个服务myService 定义了一个名字是myRequestResponse的操作<br>myRequestResponse接受一个myRequest的输入消息，返回一个myResponse消息</p>
<p>######binding（并不是特别明白 只知道是seb service 具体细节的 以后明白了在补上)</p>
<p>###uddi(Universal Description, Discovery and Integration) 描述、发现、集成服务<br>看的不是特别明白 感觉就是一个列表 这个列表 里面存在大量的wsdl等相关信息 用来提供给其他调用方看的</p>
<p>##总结:web service 三要素 soap消息、wsdl、uddi soap定义了消息的格式xml文档、wsdl定义了服务调用的xml文档、uddi整理归纳wsdl等相关文档</p>]]></content>
      
        <categories>
            
            <category> 笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
            <tag> web service </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[xml和json的区别及其使用范围笔记]]></title>
      <url>/ming/d61f2d28.html</url>
      <content type="html"><![CDATA[<p>###老是有人问我xml和json区别、 特写此篇记录来列出xml和json区别，懒得每次都解释、网络中很多博客都没提到关键的区别点 自述性、规范性;其他什么解析方法、啥啥的都不是最重要的最主要的就是xml能够由很强的自述性、规范性</p><p>###相同点:<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1:都是一种数据传输格式</span><br><span class="line">2:都和平台没有关系 xml和json都是对平台没有限制 只需要按照他们的规则进行解析即可</span><br><span class="line">3:只要是能序列化和反序列化的数据都能传输 例如图片完全可以转成二进制或者16进制字符串传输然后反序列化成图片 （不推荐这样玩 容易损坏）</span><br></pre></td></tr></table></figure><p></p>
<p>###不同点:<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1:xml具有自述性 就是可以包含自我描述的元数据 例如&lt;name type=&quot;string&quot;&gt;xianyu&lt;/name&gt;</span><br><span class="line">这个就描述了name的值是xianyu类型是string</span><br><span class="line">json就无法这样直观的表述 这样就用来写配置及其方便、准确 </span><br><span class="line">用json也能写配置只要你不怕看的头疼</span><br><span class="line">2:xml具有很强的规范性 你可以自己制定xml schema 来制定规范 json则没有这样的规范 只能间接的通过额外的json来为json定义格式 不方便而且麻烦</span><br></pre></td></tr></table></figure><p></p>
<p>##如何选择<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1:当需要传输具有元数据的数据的时候就肯定要用xml，</span><br><span class="line">2:当需要节省流量、简化数据解析的时候要用json</span><br></pre></td></tr></table></figure><p></p>
<p>##解析难度<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">xml有sax和dom两种解析方式 都差不多 </span><br><span class="line">sax是把xml模拟成一个流然后对其中需要的字段进行解析 这种方法不能修改</span><br><span class="line">dom是按照xml的元素结构进行解析 一般都是直接把xml加载到内存进行分析 可以修改 </span><br><span class="line"></span><br><span class="line">json就是把它当作字符串进行基于json格式的解析</span><br></pre></td></tr></table></figure><p></p>
<p>##总结:</p>
<p>###xml和json都由各自适用的范围不能说那个替代那个 json在做数据传输方面比xml好一点 毕竟没xml冗杂，但是在传输那种能需要自述性、和严格规范的数据的时候xml是无可替代的 在做webservice的时候 两种都会用</p>]]></content>
      
        <categories>
            
            <category> 笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
            <tag> xml </tag>
            
            <tag> json </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[maven 远程部署tomcat 上的java web 项目]]></title>
      <url>/ming/d7957e83.html</url>
      <content type="html"><![CDATA[<p>####由于有朋友不会这个远程部署又懒的百度、google 于是我写这个maven+tomcat远程部署javaweb项目的教程。以后心情好说不定会继续更新项目管理的一些环境搭建:如jenkins+gitlab+项目管理工具(如禅道)这样自动化部署测试环境</p><p>##工具和环境准备<br>1:工具 maven tomcat<br>2:环境maven能下jar即可、tomcat管理员账户和一些安全设置设定(8.5以上需要设定远程管理员访问的配置)<br>3:能访问远程tomcat管理页面</p><p>##maven远程部署配置</p><p>####1: maven工具配置<br>需要在maven的setting.xml中添加如下配置<br>settins.xml 一般在maven安装目录的conf文件夹下 不排除有人更改默认地址了<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;servers&gt;</span><br><span class="line">    &lt;!--maven tomcat远程部署密码帐号密码设置--&gt;</span><br><span class="line">    &lt;server&gt;</span><br><span class="line">        &lt;id&gt;名称 例如“laji” (任意取   pom.xml中需要使用)&lt;/id&gt;</span><br><span class="line">        &lt;username&gt;tomcat管理员用户名&lt;/username&gt;</span><br><span class="line">        &lt;password&gt;tomcat管理员密码&lt;/password&gt;</span><br><span class="line">    &lt;/server&gt;</span><br><span class="line">&lt;/servers&gt;</span><br></pre></td></tr></table></figure><p></p>
<p>####2:maven项目中的pom设置 在build的插件中添加下面这个插件并且配置<br>亲测可以支持8.5tomcat 和7.x的  ,  tomcat 9.x的没测试<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--tomcat远程部署插件--&gt;</span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line">                &lt;groupId&gt;org.apache.tomcat.maven&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;tomcat7-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">                &lt;version&gt;2.1&lt;/version&gt;</span><br><span class="line">                &lt;configuration&gt;</span><br><span class="line">                 &lt;!-- 此处的名字必须和setting.xml中配置的ID一致--&gt;</span><br><span class="line">                    &lt;server&gt;laji&lt;/server&gt;</span><br><span class="line">                    &lt;!-- tomcat远程部署访问页面--&gt;</span><br><span class="line">                    &lt;url&gt;http://服务器ip:8080/manager/text&lt;/url&gt;</span><br><span class="line"> &lt;!-- 此处的名字是项目发布的工程名 可以任意取 访问部署好的项目旧是这个名称--&gt;</span><br><span class="line">                    &lt;path&gt;/lajiproject&lt;/path&gt;</span><br><span class="line">                &lt;/configuration&gt;</span><br><span class="line">            &lt;/plugin&gt;</span><br></pre></td></tr></table></figure><p></p>
<p>##tomcat远程部署配置</p>
<p>####1:需要配置tomcat管理员账户 并且能访问远程tomcat管理员地址例如：localhost:8080/manager/text<br>在tomcat安装目录的conf下面的tomcat-users.xml中修改<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;tomcat-users xmlns=&quot;http://tomcat.apache.org/xml&quot;</span><br><span class="line">              xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">              xsi:schemaLocation=&quot;http://tomcat.apache.org/xml tomcat-users.xsd&quot;</span><br><span class="line">              version=&quot;1.0&quot;&gt;</span><br><span class="line">&lt;role rolename=&quot;admin-gui&quot;/&gt;</span><br><span class="line">&lt;role rolename=&quot;admin-script&quot;/&gt;</span><br><span class="line">&lt;role rolename=&quot;manager-gui&quot;/&gt;</span><br><span class="line">&lt;role rolename=&quot;manager-script&quot;/&gt;</span><br><span class="line">&lt;role rolename=&quot;manager-jmx&quot;/&gt;</span><br><span class="line">&lt;role rolename=&quot;manager-status&quot;/&gt;</span><br><span class="line">&lt;user username=&quot;admin&quot; password=&quot;ideal123&quot; roles=&quot;manager-gui,manager-script,manager-jmx,manager-status,admin-script,admin-gui&quot;/&gt;</span><br><span class="line"></span><br><span class="line">&lt;/tomcat-users&gt;</span><br></pre></td></tr></table></figure><p></p>
<p>####2:tomcat8.5远程需要添加远程管理员用户访问配置步骤</p>
<p>####tomcat 8.5之后呢对安全访问增强了  不仅仅需要配置管理帐号还需要配置允许远程访问管理员账户<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">在conf/Catalina/localhost/manager.xml  </span><br><span class="line">没有就创建这个xml ，然后在manager.xml中添加</span><br><span class="line"></span><br><span class="line">&lt;Context privileged=&quot;true&quot; antiResourceLocking=&quot;false&quot;</span><br><span class="line">         docBase=&quot;$&#123;catalina.home&#125;/webapps/manager&quot;&gt;</span><br><span class="line">    &lt;Valve className=&quot;org.apache.catalina.valves.RemoteAddrValve&quot; allow=&quot;^.*$&quot; /&gt;</span><br><span class="line">&lt;/Context&gt;</span><br><span class="line"></span><br><span class="line">直接生效无须重启</span><br><span class="line">在官方文档中提到：每个web应用应该有自己的安全管理文件（manager.xml）如果没有使用默认值 也就是不能远程访问</span><br><span class="line">所以如果需要远程访问就需要创建manager.xml来指定允许远程访问规则</span><br></pre></td></tr></table></figure><p></p>
<p>##执行远程部署</p>
<p>####例如idea 在你项目的maven配置的地方找到Plugins&gt;tomcat7&gt;tomcat7:redeploy</p>
<p>####尽量使用redeploy  因为你不从新部署有时候会产生乱七八糟的错误</p>
<p>####这个插件具体玩法 向具体了解就需要自行找官方文档 我也没看官方文档</p>
<p>###总结:部署过程： maven编译jar或者war》maven通过远程服务器的支持上传jar或者war</p>
<p>###这个时候需要保证本地编译的jar和war能符合服务器上的tomcat的jre版本</p>]]></content>
      
        <categories>
            
            <category> 笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
            <tag> maven </tag>
            
            <tag> tomcat </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[java1.8笔记]]></title>
      <url>/ming/3e07ee0e.html</url>
      <content type="html"><![CDATA[<p>####最近一直在看 jdk8的书 觉得jdk8和之前的jdk变化还是挺大</p><p>####主要多了如下一些东西</p><p>####1:lambda表达式支持(方法引用 )<br>jdk8增加lambda表达式的支持 可以通过‘-&gt;’ 来传递代码片段<br>和匿名方法很像 但是有一点细微区别<br>java.util.function包下 提供很多常用的function接口<br>方法引用其实也是lambda表达式的一种语法糖</p><p>####2:stream集合<br>这种集合 主要是为了计算 一个是有多种操作符可以很轻松的实现一些数据操作、过滤、扁平化、收集等任务<br>如果条件合适 很方便的实现并行计算 转换成并行stream集合</p><p>####3:新的future实现(completableFuture)<br>新增了一中新的future实现 相应的工具类中 提供很工厂方法去方便将普通任务包装成异步执行的 future任务 可以自定义线程池之类的 来根据不同的环境优化</p><p>####4:新的time包<br>jdk8之前的时间包比较混乱 例如 java.util.Date java.sql.Date 各有各的地方 看起来贼混乱 jdk8 从新整理的time相关的类、包 提供对之前的java.util.Date这样的互相转换方法</p><p>####5:interface default方法<br>java的提供的方法是一直演进的 一般像之前的方法提供兼容性都是从代码上进行兼容 一个是比较麻烦 二个是有点混乱 现在jdk8提供接口中default方法 可以很方便的去兼容之前的代码 但是这个dufault方法 是很麻烦的 各种实现、继承之间的规则变的比较复杂了 相当于换了一种方式实现了多继承 也会遇到其它支持多继承语言中的坑 例如 菱形继承</p><p>####6: Optional<br>这个是学习scala中的optional 可以通过它来实现优雅的防御性编程<br>从设计上来说 是否用optional包装 可以用来表明这个值是否可以为null<br>optional也提供map、flatmap、filter几种操作符 功能类似stream中的用法 其中flatmap用的比较多</p><p>####7:优化自定义注解<br>主要是可重复注解</p><p>#####总结:工作中使用上jdk8的代码 看起来还是蛮骚的 就是出问题 排查难度会上升一点 特别是lambda中出现问题 stream在做一些对集合中数据进行处理的时候 非常方便 性能也强 如果条件允许还可以很方便的使用并行stream集合、但是直接用并行流的话 效率比不上自己优化过线程池的多线程解决方案</p>]]></content>
      
        <categories>
            
            <category> 笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java基础 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[重写eq 必须重写hashcode的必要性]]></title>
      <url>/ming/605805fa.html</url>
      <content type="html"><![CDATA[<p>重写eq 必须重写hashCode的原因<br>之前唆代码 每次都单独重写 eq 方法 hashCode从来不重写 这次遇到一个 Set<t>的内容比较 一直返回的不是理想的结果<br>查看源码 发现 其实 最开始是直接使用 == 方式比较 到最后才会用eq方法比较<br>然后顺手写了一波实例<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * @author ming</span><br><span class="line"> * @date 2017-10-31 11:30</span><br><span class="line"> */</span><br><span class="line">public class Test &#123;</span><br><span class="line">    @org.junit.Test</span><br><span class="line">    public void test() &#123;</span><br><span class="line">        Set&lt;A&gt; aSet1 = new HashSet&lt;&gt;();</span><br><span class="line">        aSet1.add(new A(&quot;a&quot;, 1));</span><br><span class="line">        Set&lt;A&gt; aSet2 = new HashSet&lt;&gt;();</span><br><span class="line">        aSet2.add(new A(&quot;a&quot;, 1));</span><br><span class="line">        System.out.println(&quot;未重写 eq  和hashCode---------&quot;);</span><br><span class="line">        System.out.println(aSet1.equals(aSet2));</span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        Set&lt;B&gt; bSet1 = new HashSet&lt;&gt;();</span><br><span class="line">        bSet1.add(new B(&quot;b&quot;, 1));</span><br><span class="line">        Set&lt;B&gt; bSet2 = new HashSet&lt;&gt;();</span><br><span class="line">        bSet2.add(new B(&quot;b&quot;, 1));</span><br><span class="line">        System.out.println(&quot;重写 eq ----------&quot;);</span><br><span class="line">        System.out.println(bSet1.equals(bSet2));</span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        Set&lt;C&gt; cSet1 = new HashSet&lt;&gt;();</span><br><span class="line">        cSet1.add(new C(&quot;c&quot;, 1));</span><br><span class="line">        Set&lt;C&gt; cSet2 = new HashSet&lt;&gt;();</span><br><span class="line">        cSet2.add(new C(&quot;c&quot;, 1));</span><br><span class="line">        System.out.println(&quot;重写 hashCode ------&quot;);</span><br><span class="line">        System.out.println(cSet1.equals(cSet2));</span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        Set&lt;D&gt; dSet1 = new HashSet&lt;&gt;();</span><br><span class="line">        dSet1.add(new D(&quot;d&quot;, 1));</span><br><span class="line">        Set&lt;D&gt; dSet2 = new HashSet&lt;&gt;();</span><br><span class="line">        dSet2.add(new D(&quot;d&quot;, 1));</span><br><span class="line">        System.out.println(&quot;重写 eq  和hashCode----&quot;);</span><br><span class="line">        System.out.println(dSet1.equals(dSet2));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Getter</span><br><span class="line">@Setter</span><br><span class="line">@NoArgsConstructor</span><br><span class="line">@AllArgsConstructor</span><br><span class="line">class A &#123;</span><br><span class="line">    private String aName;</span><br><span class="line">    private Integer aNum;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Getter</span><br><span class="line">@Setter</span><br><span class="line">@NoArgsConstructor</span><br><span class="line">@AllArgsConstructor</span><br><span class="line">class B &#123;</span><br><span class="line">    private String bName;</span><br><span class="line">    private Integer bNum;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public boolean equals(Object o) &#123;</span><br><span class="line">        if (this == o) return true;</span><br><span class="line">        if (o == null || getClass() != o.getClass()) return false;</span><br><span class="line"></span><br><span class="line">        B b = (B) o;</span><br><span class="line"></span><br><span class="line">        if (bName != null ? !bName.equals(b.bName) : b.bName != null) return false;</span><br><span class="line">        return bNum != null ? bNum.equals(b.bNum) : b.bNum == null;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Getter</span><br><span class="line">@Setter</span><br><span class="line">@NoArgsConstructor</span><br><span class="line">@AllArgsConstructor</span><br><span class="line">class C &#123;</span><br><span class="line">    private String cName;</span><br><span class="line">    private Integer cNum;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public int hashCode() &#123;</span><br><span class="line">        int result = cName != null ? cName.hashCode() : 0;</span><br><span class="line">        result = 31 * result + (cNum != null ? cNum.hashCode() : 0);</span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Getter</span><br><span class="line">@Setter</span><br><span class="line">@NoArgsConstructor</span><br><span class="line">@AllArgsConstructor</span><br><span class="line">class D &#123;</span><br><span class="line">    private String dName;</span><br><span class="line">    private Integer dNum;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public boolean equals(Object o) &#123;</span><br><span class="line">        if (this == o) return true;</span><br><span class="line">        if (o == null || getClass() != o.getClass()) return false;</span><br><span class="line"></span><br><span class="line">        D d = (D) o;</span><br><span class="line"></span><br><span class="line">        if (dName != null ? !dName.equals(d.dName) : d.dName != null) return false;</span><br><span class="line">        return dNum != null ? dNum.equals(d.dNum) : d.dNum == null;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public int hashCode() &#123;</span><br><span class="line">        int result = dName != null ? dName.hashCode() : 0;</span><br><span class="line">        result = 31 * result + (dNum != null ? dNum.hashCode() : 0);</span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></t></p>
<p>此实例看出 对于比较对象是否相同来说 单纯的重写 eq或者 hashCode都是没卵用<br>很多方法底层是包含 == 和eq方法比较的 除非非常熟悉 只用单独写eq或者HashCode<br>否则 都应该重写 避免达不到预期结果</p>]]></content>
      
        <categories>
            
            <category> 笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java基础 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[yml格式笔记]]></title>
      <url>/ming/958a34fe.html</url>
      <content type="html"><![CDATA[<p>####yaml 在学习docker-compose工具中需要用到yaml来做配置</p><p>####yaml语法清晰简洁 适合写配置 但是不适合做数据传输</p><p>####在比较新的技术中 大量应用了yaml去配置 如spring cloud docker-compose等</p><p>######语法规则</p><ul><li>大小写敏感</li><li>缩进表示层级关系</li><li>缩进不允许tab 只允许空格</li><li>空格数量不重要。相同层级左边对齐即可</li><li>#表示注释<br>######支持的数据结构</li><li><p>对象</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">name: xu</span><br></pre></td></tr></table></figure>
</li>
<li><p>数组</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">name: </span><br><span class="line"> - xu</span><br><span class="line"> - xu1</span><br></pre></td></tr></table></figure>
</li>
<li><p>纯量</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">数字</span><br><span class="line">number: 123</span><br><span class="line">boolean </span><br><span class="line">flag: true or false</span><br><span class="line">null值</span><br><span class="line">parent:~</span><br><span class="line"> !!强转类型</span><br><span class="line"> </span><br><span class="line">字符串</span><br><span class="line">1:默认不使用引号   str: xu</span><br><span class="line">2:包含特殊字符串需要引号 str: &apos;xu&apos;</span><br><span class="line">3:双引号不对特殊字符转义 s1: &apos;xu&apos;   s2: &quot;xu&quot;</span><br><span class="line">4:字符串可以写成多行 必须缩进一个空格 换行符转为空格  </span><br><span class="line">str: 多行</span><br><span class="line"> 字符</span><br><span class="line"> 串</span><br><span class="line">5:多行字符串 可以用| 保留换行符 或者&gt; 折叠</span><br><span class="line">6: + 保留文字末尾换行 -删除文字末尾换行</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>######引用<br>允许用&amp;设定锚点 用*引用 用&lt;&lt;合并到当前数据</p>
<p>######学习博客地址:<a href="http://www.ruanyifeng.com/blog/2016/07/yaml.html?f=tt" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2016/07/yaml.html?f=tt</a></p>]]></content>
      
        <categories>
            
            <category> 笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> yml、yaml </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[windows 安装虚拟化工具蓝屏]]></title>
      <url>/ming/5dd0b5a6.html</url>
      <content type="html"><![CDATA[<p>win10 安装vbox的时候蓝屏 经过google 发现是 Hyper-V 和 vbox 冲突 坑爹的微软<br>关闭Hyper-V<br>搜索 windows功能 找到Hyper-v 关闭 重启 即可</p>]]></content>
      
        <categories>
            
            <category> 坑 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> windows </tag>
            
            <tag> vbox </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[乱码处理笔记]]></title>
      <url>/ming/54c825bb.html</url>
      <content type="html"><![CDATA[<p>#编码问题</p><p>##1:各种编码介绍</p><p>###1.1:ascll码<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">共128个,用一个字节的低七位表示，</span><br><span class="line">0～31是控制字符换行、回车、删除相关的字符</span><br><span class="line">32～126是输出字符,就是可以同过键盘输入并且输出的</span><br></pre></td></tr></table></figure><p></p>
<p>###1.2:iso-8859-1<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">共256个字符.是基于ascll来扩展的的。</span><br><span class="line">还是单字节编码</span><br></pre></td></tr></table></figure><p></p>
<p>###1.3:gb2312(信息技术中文编码集)<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">共682个符号、6763个汉字,</span><br><span class="line">编码范围是A1～F7,</span><br><span class="line">A1~A9 共682个，是符号区,</span><br><span class="line">B0~F7 共6763个，是汉字区。</span><br></pre></td></tr></table></figure><p></p>
<p>###1.4:gbk(汉字内码扩展规范)<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">扩展gb2312,编码范围是8140～FEFE(去除XX7F)，</span><br><span class="line">共23940个码位，表示21003个汉字,</span><br><span class="line">完全兼容gb2312.</span><br><span class="line">在系统中应用较为广泛</span><br></pre></td></tr></table></figure><p></p>
<p>###1.5:gb18030<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">是中国的强制标准,</span><br><span class="line">可能是单字节、双字节、四字节.</span><br><span class="line">完美兼容gb2312</span><br></pre></td></tr></table></figure><p></p>
<p>###1.6:utf-16(统一码)<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">iso创建的超语言字典,</span><br><span class="line">世界上所有语言可以通过字典来进行翻译。</span><br><span class="line">utf-16 采用定长表示方法,无论什么字符读用两个字节表示</span><br><span class="line">一个字节8bit,所以叫utf-16 </span><br><span class="line">java内存就是用utf-16来作为内存的字符存储格式</span><br><span class="line">缺点：任何字符都是两个字节，增大存储成本和传输成本</span><br></pre></td></tr></table></figure><p></p>
<p>###1.7:utf-8(最常用编码)<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">    utf-8采用的是变长技术,避免了utf-16缺点,每个编码区域有不同的字码长度。</span><br><span class="line">不同的字符可以由1～6字节组成。</span><br><span class="line">    编码规则:</span><br><span class="line">        1):如果是一个字节,最高位(也就是第8个bit)为0,表示这个字符就是ascll字符</span><br><span class="line">        2):如果是一个字节,开头是11连续的1的个数表示这个字符的字节数,例如1110xxxx就是三个字节的utf-8的首字节</span><br><span class="line">        3):如果是一个字节,以10开始，这个就不是首字节,需要向前查找首字节</span><br></pre></td></tr></table></figure><p></p>
<p>###1.8总结<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">平常使用也就是gb2312、gbk、utf-8常见</span><br><span class="line">为了尽量避免乱码。优先选择utf-8</span><br><span class="line">如果不在乎磁盘可以选择utf-16毕竟解析比utf-8简单</span><br><span class="line">如果是网络IO的话 还是选择utf-8比较好 网络IO 字节流完整性容易遭到破坏 导致乱码</span><br></pre></td></tr></table></figure><p></p>
<p>##2:javaweb常见编码问题</p>
<p>###2.1: http请求前后的乱码<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">  一般一次http请求中涉及到的编解码 存在于 request编码、request解码、response编码、response解码。</span><br><span class="line">这样的可以通过设定http请求头、响应头、服务器编解码设置、客户端编解码设置来处理</span><br><span class="line">例如：tomcat配置文件server.xml</span><br><span class="line">    &lt;Connector port=&quot;8090&quot; protocol=&quot;HTTP/1.1&quot;   </span><br><span class="line">                 maxThreads=&quot;150&quot; connectionTimeout=&quot;20000&quot;   </span><br><span class="line">                 redirectPort=&quot;8443&quot; URIEncoding=&quot;utf-8&quot;  /&gt; </span><br><span class="line">    http中请求报头或者响应报头设置charset=utf-8</span><br><span class="line">    客户端也就是浏览器一般是默认utf-8编码 也可以自己去指定编码</span><br></pre></td></tr></table></figure><p></p>
<p>###2.2: 数据库和项目之间出现乱码<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">主要就是项目中编解码和数据库的编解码、编码设置</span><br><span class="line">一般直接设置链接参数 ：jdbc:mysql://localhost:3306/mydb?characterEncoding=utf8</span><br><span class="line">一般项目直接设置utf-8 数据库也设定utf-8</span><br></pre></td></tr></table></figure><p></p>
<p>###2.3: 总结<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">一般出现乱码肯定是有io的地方要么是各种链接之间 要么是系统内部出现来不同的编码</span><br><span class="line">例如http请求 先确定乱码产生地点是在客户端还是服务端 是在那个环节产生的 </span><br><span class="line">            一般进行一些简单的抓包分析看看旧大概知道是那个地发出现乱码了</span><br><span class="line">            检查报头 和客户端 服务端的解析编码集</span><br><span class="line">            </span><br><span class="line">出现乱码先一步步的缩小范围找到出现乱码的节点 看是那个地发设置出了问题</span><br><span class="line">然后找到是什么导致这个节点这个设置出现问题</span><br><span class="line">如果是有网络IO的话  可以尝试抓包分析</span><br><span class="line">如果是本地IO的话 就看看系统编码、项目编码、等设置</span><br><span class="line">尽量避免使用框架、各种软件、系统的默认设置</span><br></pre></td></tr></table></figure><p></p>
<p>###2.4:form表单提交数据乱码<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">有时候组合页面的时候和遇到类似ie这种变态浏览器的时候 会遭遇form表单乱码问题 其他地方都设置合适编码了</span><br><span class="line">这个时候在form中制定form表单的编码即可 </span><br><span class="line">&lt;form accept-charset=&quot;utf-8&quot; onsubmit=&quot;document.charset=&apos;utf-8&apos;&quot; &gt;</span><br><span class="line">后面那个onsubmit是遇到ie这种变态浏览器需要加的 </span><br><span class="line">最后 可能是服务器uri编码集未设定 例如tomcat的server.xml中的设置</span><br></pre></td></tr></table></figure><p></p>
<p>###笔记参考书籍：深入javaweb技术内幕</p>]]></content>
      
        <categories>
            
            <category> 笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 乱码 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[接口签名笔记]]></title>
      <url>/ming/5e68a67b.html</url>
      <content type="html"><![CDATA[<p>####由于开放型的短信接口受到不明来源的恶意访问 大佬们紧急对整个项目的接口进行加密<br>原理:密钥+参数生成 md5 签名 客户端保存好密钥即可 之前对接苏宁易购的那个支付平台的时候 也是选择这种方式进行访问加密<br>1:生成密钥<br>这个随机定义 例如我选择使用 appId + salt 生成md5 截取前12位作为 指定app应用的密钥 如果发生泄漏 可以通过改变salt 来生成新的密钥<br>2:客户端密钥 存储<br>客户端 拿到密钥不能明文存储 例如 12位 可以拆分三段 然后分别进行偏移 这样如果别人要识别 必须反编译源码 并且读懂相关规则<br>3:签名规则<br>除开签名以外所有参数 按照排序规则排序 然后拼接上密钥 通过md5 或者类似的算法生成md5签名<br>4：服务端验证规则<br>除开签名 也按照客户端同样的排序规则排序 拼接密钥 通过相同的算法生成服务端签名 通过比较客户端签名 和服务端签名 来验证服务是否可靠、</p><h4 id="生成签名-方法示例"><a href="#生成签名-方法示例" class="headerlink" title="生成签名 方法示例"></a>生成签名 方法示例</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env  groovy</span><br><span class="line">/**  groovy 生成md5 签名的算法</span><br><span class="line"> *</span><br><span class="line"> * @author ming</span><br><span class="line"> * @date 2017-11-15 12:45</span><br><span class="line"> */</span><br><span class="line">import java.nio.charset.Charset</span><br><span class="line">import java.security.MessageDigest</span><br><span class="line">import java.security.NoSuchAlgorithmException</span><br><span class="line">import org.apache.commons.codec.binary.Hex;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">static void main(String[] args) &#123;</span><br><span class="line">    Map&lt;String, String[]&gt; map = new HashMap&lt;&gt;()</span><br><span class="line">    map.put(&quot;sign&quot;, [&quot;mkasfasfds&quot;] as String[])</span><br><span class="line">    map.put(&quot;param&quot;, [&quot;ming&quot;] as String[])</span><br><span class="line">    map.put(&quot;b&quot;, [&quot;b&quot;] as String[])</span><br><span class="line">    map.put(&quot;a&quot;, [&quot;a&quot;] as String[])</span><br><span class="line">    print(getSign(&quot;ming&quot;, map))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 生成签名</span><br><span class="line"> * @param accessSecretKey 密钥</span><br><span class="line"> * @param parameterMap 参数map 集合</span><br><span class="line"> * @author ming</span><br><span class="line"> * @date 2017-11-15 11:42</span><br><span class="line"> */</span><br><span class="line">String getSign(String accessSecretKey, Map&lt;String, String[]&gt; parameterMap) &#123;</span><br><span class="line">    //拼接参数</span><br><span class="line">    StringBuffer allNotEncryptString = new StringBuffer();</span><br><span class="line">    String signature = parameterMap.get(&quot;sign&quot;)[0];</span><br><span class="line">    // 获取未加密的请求参数</span><br><span class="line">    String notEncryptString = getRequestParameterString(parameterMap);</span><br><span class="line">    if (notEncryptString == null || notEncryptString.length() == 0) &#123;</span><br><span class="line">        throw new NullPointerException(&quot; 请求参数拼接为空&quot;)</span><br><span class="line">    &#125;</span><br><span class="line">    // 组合所有加密的字符穿</span><br><span class="line">    allNotEncryptString.append(notEncryptString);</span><br><span class="line">    allNotEncryptString.append(&quot;secret&quot; + accessSecretKey);</span><br><span class="line"></span><br><span class="line">    // 本地加密</span><br><span class="line">    String localSignature = md5(allNotEncryptString.toString(), Charset.forName(&quot;UTF-8&quot;)).toLowerCase();</span><br><span class="line">    return localSignature;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 取得未加密的请求参数字符串&lt;br/&gt;</span><br><span class="line"> * 注：1.该字符串的组成规则为：</span><br><span class="line"> * 1.1 请求参数 &apos;key&apos;+&apos;value&apos;成对</span><br><span class="line"> * 1.2 依据字母顺序表：a--&gt;b--&gt;c--&gt;...--&gt;y--&gt;z 对‘请求参数key’排序</span><br><span class="line"> * 2.该字符串中不包括signature</span><br><span class="line"> *</span><br><span class="line"> */</span><br><span class="line">static String getRequestParameterString(Map&lt;String, String[]&gt; parameterMap) &#123;</span><br><span class="line">    if (parameterMap == null || parameterMap.size() == 0) &#123;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line">    List&lt;String&gt; parameterNameList = new ArrayList&lt;&gt;(parameterMap.keySet());</span><br><span class="line">    // 对请求的key 排序</span><br><span class="line">    parameterNameList.sort &#123; a, b -&gt; (a &lt;=&gt; b) &#125;;</span><br><span class="line">    StringBuffer strBuffer = new StringBuffer();</span><br><span class="line">    for (String parameterName : parameterNameList) &#123;</span><br><span class="line">        //排除签名</span><br><span class="line">        if (parameterName == &quot;sign&quot;) &#123;</span><br><span class="line">            continue;</span><br><span class="line">        &#125;</span><br><span class="line">        String[] values = parameterMap.get(parameterName);</span><br><span class="line">        if (values != null) &#123;</span><br><span class="line">            if (values.length == 1) &#123;</span><br><span class="line">                strBuffer.append(parameterName + values[0]);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                //此处规则 省略。。。。</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return strBuffer.toString();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/***</span><br><span class="line"> * MD5加密 生成32位md5码</span><br><span class="line"> *</span><br><span class="line"> * @param inStr 待加密字符串</span><br><span class="line"> * @return 返回32位md5码</span><br><span class="line"> */</span><br><span class="line"> static String md5(String inStr, Charset charset) &#123;</span><br><span class="line">    MessageDigest messageDigest = null;</span><br><span class="line">    try &#123;</span><br><span class="line">        messageDigest = MessageDigest.getInstance(&quot;MD5&quot;);</span><br><span class="line">    &#125; catch (NoSuchAlgorithmException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    if (messageDigest == null) &#123;</span><br><span class="line">        throw new NullPointerException();</span><br><span class="line">    &#125;</span><br><span class="line">    messageDigest.update(inStr.getBytes(charset));</span><br><span class="line">    byte[] digestBytes = messageDigest.digest();</span><br><span class="line">    return Hex.encodeHexString(digestBytes);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
            <tag> 安全 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[spring boot (四)笔记]]></title>
      <url>/ming/68619b43.html</url>
      <content type="html"><![CDATA[<p>###在使用spring boot的时候 spring本身会根据springboot的版本引入依赖包 跟maven一样有隐藏依赖会自动引入这个时候如果不需要其中一些工具包 或者需要指定某些包的版本 可以通过maven的功能去排除依赖和覆盖依赖</p><p>##排除依赖 通过maven的语法排除依赖包 exclusions<br>例如 为项目大小瘦身的时候 排除不需要的jar 例如jackson<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line"> &lt;exclusions&gt;</span><br><span class="line">  &lt;exclusion&gt;</span><br><span class="line">        &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;</span><br><span class="line">    &lt;/exclusion&gt;</span><br><span class="line">  &lt;/exclusions&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">```  </span><br><span class="line">##覆盖依赖 通过maven的最短路径寻包的特性 去覆盖已有依赖</span><br><span class="line">例如 需要指定某个包的版本 直接在spring boot所在的pom中添加这个包的依赖即可 </span><br><span class="line">例如 spring boot 的版本依赖的jackson是2.3.3 但是我们需要2.4.3版本 直接在spring boot 的pom下面添加2.4.3 的jackson即可</span><br></pre></td></tr></table></figure><p></p>
<p><dependency></dependency></p>
<p><groupid>com.fasterxml.jackson.core</groupid></p>
<p><artifactid>jackson-databind</artifactid></p>
<p><version>2.4.3</version><br><br>```</p>]]></content>
      
        <categories>
            
            <category> 笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
            <tag> spring </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[夸域笔记]]></title>
      <url>/ming/38475811.html</url>
      <content type="html"><![CDATA[<p>##在将项目前后端分离的时候，首当其冲的就是跨域问题;此篇笔记 用来记录什么是跨域、如何解决跨域、以及一个实例;免得自己以后忘记了还需要去搜索</p><p>###什么是跨域<br>http为了提高安全，禁止非同域访问<br>什么是同域:满足下三条才是同域 1:同端口 ip，2:同样的协议,3:如果是子域名 也要一样 否则就是非同域 不能直接互相访问，必须通过一些安全设置或者技巧去访问如jsonp、cors等方案</p><p>###解决跨域</p><p>####1:jsonp 方式<br>首先jsonp和json是没有任何关系的 ;<br>由于浏览器对js、图片不会做跨域限制<br>jsonp就是相当于把数据下载下来解析，利用script标签去下载数据 然后解析<br>就是用javascript动态加载一个script文件，如何去解析这个文件 例如json字符串</p><p>######局限性:只能get请求 如果需要post、put等其他请求 无法满足</p><p>###2:cors跨域(重点)<br>cors是w3c定义的一种新的标准 用来适应跨域数据请求的<br>当浏览器发现是跨域请求 会自动在报头添加一些跨域信息 如option等<br>cors跨域分为简单请求和负责请求 但是只要在服务端设定合适 区别不是特别大<br>当满足如下条件就是简单的cors跨域请求 不满足则是复杂cors请求<br>1:请求方式:get、post、head<br>2:报头限制:只能包含如下报头信息 超过则是复杂请求Accept、Accept-Language、Content-Language、Last-Event-ID、Content-Type：只限于三个值application/x-www-form-urlencoded、multipart/form-data、text/plain|<br>也就是意味者如果要自定义报头、发送cookie等功能 都是复杂请求<br>不管是复杂请求还是简单请求 在服务端设置的时候 复杂请求设置是涵盖了简单请求需要的设置的</p><p>######简单cors跨域<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">发送简单请求--&gt;服务端检验请求合法性--&gt;请求合法就和正常请求一样、不合法返回跨域错误提示</span><br></pre></td></tr></table></figure><p></p>
<p>######复杂cors跨域<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">发送预检请求--&gt;服务端检验请求是否合法--&gt;请求合法 发送正式请求、不合法 结束 提示请求不符合服务端检验要求</span><br></pre></td></tr></table></figure><p></p>
<p>学习地址:<a href="http://www.ruanyifeng.com/blog/2016/04/cors.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2016/04/cors.html</a></p>]]></content>
      
        <categories>
            
            <category> 笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 夸域 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[设计模式(一)-六大基本原则]]></title>
      <url>/ming/ae7599d.html</url>
      <content type="html"><![CDATA[<h2 id="开闭原则-open-close-princlple"><a href="#开闭原则-open-close-princlple" class="headerlink" title="开闭原则(open close princlple)"></a>开闭原则(open close princlple)</h2><p>“对扩展开发,对修改关闭”,当程序需要扩展的时候不能去修改源代码，要实现一个热插拔效果。</p><p>通过使用接口和抽象类去设计。这样在以后替换方法实现算法的时候只需要实现接口使用这个类就可以了</p><p>开闭原则关键步骤是抽象</p><p>例如:sf4j 和log4j之间 sf4j定义了日志框架的大部分接口。log4j只是实现sf4j其中一种。</p><h2 id="里氏替换原则-liskov-substitution-princlple"><a href="#里氏替换原则-liskov-substitution-princlple" class="headerlink" title="里氏替换原则(liskov substitution princlple)"></a>里氏替换原则(liskov substitution princlple)</h2><p>任何基础类可以出现的地方.他的子类一定可以出现。只有当派生类可以替换基本类。并且软件不受到影响，基础类才能被真正的复用。</p><p>里氏替换原则 对抽象化的具体步骤实现的规范 。补充了开闭原则</p><p>例如hinernate中orm名称映射规则。如果需要自己制定规则 只需要继承或者实现已有的基础类 就可以把这个类设置成hibernate的orm替换规则</p><p>例如:数据库表要求全部是以T<em>开头 后面采用下划线方式命名 但是entity采用去除T</em> 并且采用驼峰式命名这个时候就实现hibernate的转换接口然后设置成自定义的类就行了</p><p>##依赖倒转原则(dependence lnversion princlple)<br>针对抽象出来的结构编程。依赖抽象出来的类或者接口编程。不依赖具体实现</p><p>就是面向接口编程 例子： list 我可以用arraylist 也可以用linkedlist 但是他们都是list接口的方法</p><h2 id="接口隔离原则-interface-segregation-prinalple"><a href="#接口隔离原则-interface-segregation-prinalple" class="headerlink" title="接口隔离原则(interface segregation prinalple)"></a>接口隔离原则(interface segregation prinalple)</h2><p>使用多个隔离的接口比使用单个接口好,降低接口和实现类之间的耦合</p><h2 id="迪米特法则-demeter-princlple-最少知道法则"><a href="#迪米特法则-demeter-princlple-最少知道法则" class="headerlink" title="迪米特法则(demeter princlple) 最少知道法则"></a>迪米特法则(demeter princlple) 最少知道法则</h2><p>一个类尽量少知道和其它实体之间的相互作用 让系统模块相对独立</p><h2 id="合成复用原则-composite-reuse-princlple"><a href="#合成复用原则-composite-reuse-princlple" class="headerlink" title="合成复用原则(composite reuse princlple)"></a>合成复用原则(composite reuse princlple)</h2><p>尽量使用合成和聚合 尽量少使用继承</p><p>就是一个复杂类应当由很多小类合成聚合而来 不是继承一个类去做增加</p><p>##总结</p><p>####设计模式就是依赖这些基本法则的最佳实现</p><p>#设计模式笔记参考:<a href="http://www.runoob.com/design-pattern/design-pattern-tutorial.html" target="_blank" rel="noopener">http://www.runoob.com/design-pattern/design-pattern-tutorial.html</a></p>]]></content>
      
        <categories>
            
            <category> 笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[设计模式笔记(三)：创建型-工厂模式]]></title>
      <url>/ming/80d0f7f9.html</url>
      <content type="html"><![CDATA[<p>##工厂模式(factory pattern):</p><p>####意图<br>定义一个创建对象的接口。让其子类决定实例化那一个工程类，工厂模式将其创建过程延迟到子类中</p><p>####主要解决<br>主要解决接口选择问题。</p><p>####何时使用<br>在不同条件下创建不同实例。</p><p>####如何解决<br>让其子类实现工厂接口，返回的也是一个抽象的产品。<br>关键代码<br>创建过程在其子类中执行。</p><p>####优点<br>1,一个调用者创建一个对象。只要知道对象名旧可以 。</p><p>2,扩展性高，想增加一个产品，扩展一个工厂类就可以。<br>3,屏蔽产品实现。调用者只需要知道产品接口。</p><p>####缺点<br>每次增加产品，都需要增减一个实现类和对象实现工厂，增加系统复杂度。增加系统具体类依赖</p><p>####使用场景<br>1，日志记录，记录可能记录到硬盘，数据库，用户可以选择记录到哪里<br>2,数据库访问，当用户不知道访问什么类型数据库的时候，hibernate方言就是这<br>3,设计链接服务器的框架，需要三个协议“pop3”，“imap”，“http” 设计成产品类，共同实现一个接口。</p><p>####注意事项<br>当需要生成一个复杂对象的时候使用。如果是简单对象。不要使用工厂模式。会增加系统复杂度</p><p>####个人总结：工厂模式适合在那些大体相同。但是细节不同的相似对象。例如hibernate方言。为了能自动选择方言编写的自动方言工厂类，但是工厂模式不适用于简单对象。</p><p>####代码地址：<a href="https://github.com/xuxianyu/myGitHub/tree/master/DisignPattern/src/main/java/com/xxx/create/factory" target="_blank" rel="noopener">https://github.com/xuxianyu/myGitHub/tree/master/DisignPattern/src/main/java/com/xxx/create/factory</a></p>]]></content>
      
        <categories>
            
            <category> 笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[设计模式笔记(七)：创建型-原型模式]]></title>
      <url>/ming/5a9f0461.html</url>
      <content type="html"><![CDATA[<p>##原型模式：（Prototype Pattern）</p><p>####意图<br>用原型实例来指定创建对象的种类，并且通过拷贝这些原型创建新的对象</p><p>####主要解决<br>在运行期建立和删除原型</p><p>####何时使用<br>1：当一个系统应该独立于它产品创建构成和表示的时候。<br>2：当要实例化的类是在运行时刻指定的时候 ，例如动态装载<br>3：为了避免创建一个与产品类层次平行的工厂类层次<br>4：当一个类的实例智能有几个不同状态组合中的一种时候，建立相应数目的原型并克隆他们 比每次用合适的状态的手工实例化该 类更方便一些</p><p>####如何解决<br>利用已有的一个原型对象，快速生成和原型对象一样的实例</p><p>####关键代码<br>1：实现克隆操作 利用Cloneable 重写clone(),<br>2:原型模式同样用于隔离类对象使用者和具体类型（易变类）之间耦合关系，要求易变类拥有稳定的接口</p><p>####实例<br>1：细胞分裂<br>2：java object clone() 方法</p><p>####优点<br>1：提高性能<br>2：避免构造函数约束</p><p>####缺点<br>1：配备克隆方法需要对类的功能进行通盘考虑，对于全新的类不麻烦，但是对于已经有的类不容易实现，特别是一个类引用不支持串行化的间接对象或者引用含有循环结构的适合<br>2：必须实现Cloneable接口<br>3：逃避构造函数约束</p><p>####使用场景<br>1：资源优化<br>2：类初始化需要很多资源，<br>3：性能和安全要求场景<br>4：通过new产生对象需要非常繁琐的数据准备或者访问权限<br>5：一个对象多个修改者<br>6：一个对象需要提供给其他对象访问，并且多个调用者都需要修改其值，<br>7：实际项目中原型模式常根工厂模式一起，通过clone创建一个对象，如何由工厂方法提供给调用者，</p><p>####注意<br>和对一个类来实例化创建对象不同的是，原型模式是通过一个现有的对象生成一个新的对象，浅拷贝通过Cloneable ，深拷贝通过Serializable读取二进制流</p><p>####总结：通过实现cloneable的clone（） 方法来实现浅克隆 通过序列化获取二进制流 来进行深度克隆 就是自行创建一个可靠安全的原型 通过克隆方式获得该对象</p><p>####代码地址：<a href="https://github.com/xuxianyu/myGitHub/tree/master/DisignPattern/src/main/java/com/xxx/create/Prototype" target="_blank" rel="noopener">https://github.com/xuxianyu/myGitHub/tree/master/DisignPattern/src/main/java/com/xxx/create/Prototype</a></p>]]></content>
      
        <categories>
            
            <category> 笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[设计模式(二)-23种设计模式分类和基本概述]]></title>
      <url>/ming/18dacc63.html</url>
      <content type="html"><![CDATA[<p>##创建型模式：提供在创建对象的时候的逻辑，不是直接使用运算符如new这样的形式来实例化对象，<br>模式名称 | 模式概述 | 备注<br>—–|:————|:—–<br>工厂模式(Factory Pattern) | 就是一个产品加工共厂的套路 负责产生一些大致相似的产品 | 例如生产娃娃的加工厂 生产娃娃 有的是充气的 有的是硅胶的 但是你只需要指定是使用什么材料 就可以通过工厂产生出来<br>抽象工厂模式(Abstract Factory Pattern)| 工厂的工厂 用来生产工厂的工厂| 例如我有建造硅胶产品工厂的能力 我可以拿来建立娃娃工厂、我也可以拿来建立其他硅胶产品工厂<br>单例模式(Singleton Pattern)| 一个类只能有一个对象，并且是需要线程安全的创建 | 在国内一个人名义上是只能有一个老婆的，如果你想两个合法老婆 那就违法了 也就是线程不安全了<br>建造者模式(Builder Pattern)| 在将类组合成复杂对象的时候 被组合的类是变化的 但是组合的方式是固定的 | 例如娃娃工厂 里面需要很多基本的设备 什么融合材料的设备、将材料做成模型的设备、模型组合设备等等。他们大致组合顺序是固定的但是设备选择不一定，可以买国产货也可以使用其他国家的机器。<br>原型模式(Prototype Pattern)| 先创建一个原型 以后在需要这个对象 直接克隆 | 例如生产娃娃 你有一个波多XXX 啥的娃娃 但是她的制作工艺比较复杂 那这个时候可以通过这个娃娃去做一套模具来进行克隆 这样就能保证快速 完整的作出波多XXX样式的娃娃</p><p>##结构型模式：关注类和对象的组合，用继承来组合接口和定义组合对象获取新功能的方式<br>模式名称 | 模式概述 | 备注<br>——–|:———|:—–<br>适配器模式(Adapter Pattern)|就是一个类似转接头的东西 主要是针对类的兼容性做改变 让旧类和新类进行兼容|例如苹果7手机 它本身是不能直接使用ust数据线链接电脑的必须找个type-c转换成usb接口的设备来做个适配<br>桥接模式(Bridge Pattern)||<br>过滤器模式(Filter\Criteria Pattern)||<br>组合模式(Composite Pattern)||<br>装饰器模式(Decorator Pattern)||<br>外观模式(Facade Pattern)||<br>享元模式(Flyweight Pattern)||<br>代理模式(Proxy Pattern)||</p><p>##行为型模式:关注对象之间的通信<br>模式名称 | 模式概述 | 备注<br>——–|:———|:—–<br>责任链模式(Chain of Responsibllity Pattern)||<br>命令模式(Command Pattern)||<br>解释器模式(InterPreTer Pattern)||<br>迭代器模式(Iterator Pattern)||<br>中介者模式(Mediator Pattern)||<br>备忘录模式(Memento Pattern)||<br>观察者模式(Observer Pattern)||<br>状态模式(State Pattern)||<br>空对象模式(null object Pattern)||<br>策略模式(strategy Pattern)||<br>模板模式(Template Pattern)||<br>访问者模式(Visitor Pattern)||</p>]]></content>
      
        <categories>
            
            <category> 笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[设计模式笔记(五)：创建型-单例模式]]></title>
      <url>/ming/b5989355.html</url>
      <content type="html"><![CDATA[<p>##单例模式（Singleton Pattern）</p><p>####注意<br>1：单例类只能有一个实例<br>2：单例类必须自己创建自己唯一的实例<br>3：单例类必须给其他对象提供这个实例</p><p>####意图<br>保证一个类仅有一个实例。并提供一个访问它的全局访问点</p><p>####主要解决<br>一个全局使用的类频繁创建销毁</p><p>####何时使用<br>控制实例数目。节省系统资源</p><p>####如何解决<br>判断系统是否已经有这个单例。如果有返回、没有创建</p><p>####关键代码<br>构造函数私有化</p><p>####应用实例<br>1：一个党只有一个主席<br>2：多线程中对文件的处理必须是唯一的一个实例来进行。<br>3：设备管理器常常被设计为单例模式。比如一个电脑有两台打印机。在输出的适合不能两台打印同一个文件</p><p>####优点<br>1：内存中只有一个实例，减少内存开销，<br>2：避免对资源的多重占用</p><p>####缺点：<br>没有接口、不能继承。和单一职责冲突。</p><p>####使用场景<br>1：产生唯一序列号<br>2：计数器<br>3：创建比较耗费资源的对象比如io 与数据库链接等</p><p>####总结：共有 懒汉式线程不安全、懒汉式线程安全（加锁）、饿汉式、双捡锁、登记式、枚举这些方式来创建单例 其中饿汉式，双捡锁，登记式，枚举比较适合平常用。懒汉式要么不 安全 要么效率低下不建议使用</p><p>####代码地址：<a href="https://github.com/xuxianyu/myGitHub/tree/master/DisignPattern/src/main/java/com/xxx/create/singleton" target="_blank" rel="noopener">https://github.com/xuxianyu/myGitHub/tree/master/DisignPattern/src/main/java/com/xxx/create/singleton</a></p>]]></content>
      
        <categories>
            
            <category> 笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[设计模式笔记(八)：结构型-适配器模式]]></title>
      <url>/ming/6cd7a67e.html</url>
      <content type="html"><![CDATA[<p>##适配器模式(Adapter Pattern)</p><p>####意图<br>当一个类的接口转换成客户希望的另外一个接口的适合，适配器模式使得原本由于接口不兼容不能一起工作的类可以在一起工作</p><p>####主要解决<br>在系统中常常要将一些现存的对象放到新环境中，而新环境接口是现存对象不能满足的</p><p>####何时使用<br>1：系统需要使用现有的类，但是这个类的接口不满足系统需要<br>2：想要建立一个可以重复使用的类，用于一些批次之间没有太大关联的一些类，包括一些可能在将来引进的类一起工作，这些源类不一定有一致的即可<br>3：通过接口转换，将一个类插入到另一个类系中，（比如老虎和飞禽，现在多了一个能飞的老虎，在不增加实体需求下 增加一个适配器，里面包含虎对象，实现飞接口）</p><p>####如何解决<br>继承或者依赖</p><p>####关键代码<br>适配器继承或者依赖已经有的对象，实现想要的目标接口</p><p>####实例<br>1：美国电器110v 中国220v 需要一个适配器来转换<br>2：jdk1.1提供Enumeration接口 现在1.2中提供了iterator接口 ，想要使用1.2jdk 就要把一起系统的Rnumeration接口转换iterator接口<br>3：linux上运行windows程序<br>4：jvm就是一个类似适配器的一个虚拟机</p><p>####优点<br>1：可以让两个没有关联的类一起运行，<br>2：提高类的复用<br>3：增加类的透明<br>4：灵活</p><p>####缺点<br>1：过多使用适配器，让系统显得凌乱 ，不容易把握整体，比如明明调用的是a接口但是内部适配成b接口的实现，一个系统中出现太多这种情况会爆炸，如果不是很有必要不适用适配器，而是对系统重构<br>2：由于java只能继承一个类，所以最多只能适配一个适配类，而且目标类必须是抽象类</p><p>####使用场景<br>有动机的修改一个运行正常的系统接口</p><p>####注意<br>适配器不是详细设计时候设计的 而是解决在系统上线过程中出现问题</p><p>####总结：通过一个中间适配器类来增加已有类的功能，这个只是补救方式 最好的方式还是重构项目</p><p>####代码地址：<a href="https://github.com/xuxianyu/myGitHub/tree/master/DisignPattern/src/main/java/com/xxx/structural/adapter" target="_blank" rel="noopener">https://github.com/xuxianyu/myGitHub/tree/master/DisignPattern/src/main/java/com/xxx/structural/adapter</a></p>]]></content>
      
        <categories>
            
            <category> 笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[设计模式笔记(六)：创建型-建造者模式]]></title>
      <url>/ming/67fc4778.html</url>
      <content type="html"><![CDATA[<p>##建造者模式(builder pattern)</p><p>####意图<br>将一个复杂构建与其标识相分离，使得同样构建过程构建出不一样的标识</p><p>####主要解决<br>在创建复杂对象过程中，通常是各个部分子对象用一定算法构建而成;由于需求变化，这个复杂对象各个部分经常面临剧烈变化，但是组合他们成为一个复杂算法是相对稳定的。</p><p>####何时使用<br>基本部件不变，但是组合经常变化（组合对象不定，算法固定）</p><p>####如何解决<br>变化部分和不变部分分离</p><p>####关键代码<br>1：建造者：创建和提供实例<br>2：导演：管理建造出来的实例依赖关系</p><p>####实例<br>肯德基，有汉堡、可乐、薯条等是不变对象，但是其中他们组合是经常变化的</p><p>####优点<br>1：建造者独立，容易扩展<br>2：便于细节风险控制</p><p>####缺点<br>1：产品必须有共通点，因此限制范围<br>2：内部变化复杂的化会出现很多建造类</p><p>####使用场景<br>1：需要生成复杂对象有复杂的内部结构<br>2：需要生成对象内部属性相互依赖</p><p>####注意事项<br>建造者模式更加关注零件装配的顺序<br>而工厂模式关注的是产品结果</p><p>####个人总结：在组合复杂对象的时候 可以采用建造者模式 这样只需要在构建类中区定义生成对象的依赖就可以了</p><p>####代码地址：<a href="https://github.com/xuxianyu/myGitHub/tree/master/DisignPattern/src/main/java/com/xxx/create/builder" target="_blank" rel="noopener">https://github.com/xuxianyu/myGitHub/tree/master/DisignPattern/src/main/java/com/xxx/create/builder</a></p>]]></content>
      
        <categories>
            
            <category> 笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[设计模式笔记(九)：结构型-桥接模式]]></title>
      <url>/ming/ca9f8bd1.html</url>
      <content type="html"><![CDATA[<p>##桥接模式(Bridge Pattern)</p><p>####意图<br>将抽象部分和实现部分分离，使他们可以独立变化</p><p>####主要解决<br>在多种可能变化的情况下，用继承会造成类爆炸的问题，不好扩展</p><p>####何时使用<br>实现系统可以有多个角度分类，每一个角度都可能变化</p><p>####如何解决<br>把这种多角度分类分离出来，让他们独立变化，减少之间的耦合</p><p>####关键代码<br>抽象类依赖实现类</p><p>####应用实例<br>1：猪八戒从天蓬元帅投胎到猪转世投胎机制将尘世划分为肉体和灵魂 ，前者相当于实现化，后者相当于抽象化，生灵通过功能委派，调用肉体对象，<br>2：开关</p><p>####优点<br>1：抽象和实现分离<br>2：优秀扩展能力<br>3：实现细节对客户透明</p><p>####缺点<br>桥接模式会增加系统理解和设计难度，由于聚合关联关系在抽象层，需要开发者对抽象进行设计和编程</p><p>####使用场景<br>1：如果一个系统需要在组件抽象化角色和具体化角色之间有更多的灵活性，避免在两个层次之间建立静态继承关系，通过桥接模式可以使他们在抽象层建立一个关联关系<br>2：对于不希望因为使用继承或者因为多层次继承导致类中个数急剧增加的系统<br>3：一个类存在两个独立变化的维度 ，并且两个维度都需要进行扩展</p><p>####注意<br>对于两个独立变化的维度 使用桥接模式最合适</p><p>####总结：利用一个中间接口来把多种不同状态的类进行分离</p><p>####代码地址：<a href="https://github.com/xuxianyu/myGitHub/tree/master/DisignPattern/src/main/java/com/xxx/structural/bridge" target="_blank" rel="noopener">https://github.com/xuxianyu/myGitHub/tree/master/DisignPattern/src/main/java/com/xxx/structural/bridge</a></p>]]></content>
      
        <categories>
            
            <category> 笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[设计模式笔记(四)：创建型-抽象工厂模式]]></title>
      <url>/ming/b2f1ab54.html</url>
      <content type="html"><![CDATA[<p>##抽象工厂模式（Abstract Factory Pattern）</p><p>####意图<br>提供一个创建一系列相关或者互相依赖的对象接口，无需指定他们具体类</p><p>####主要解决<br>解决接口选择问题</p><p>####何时使用<br>系统产品多于一个产品族，而系统只消费其中某一族产品</p><p>####如何解决<br>在一个产品族中定义多个产品</p><p>####关键代码<br>在一个工厂里聚合多个同类产品</p><p>####实例<br>假设生产衣服 有商务男装、商务女装、时尚男装、时尚女装等等、都放在各自种类衣柜中。衣柜就承当抽象工厂的作用。其中衣柜中上衣、裤子 都是单独的产品</p><p>####优点<br>当一个产品族中多个对象被设计成一起工作的时候，它能保证客户端始终只使用其中一个产品族 不会乱套</p><p>####缺点<br>产品族扩展困难。要增加一个系列的一个产品 既要在抽象工厂里面加代码又要在具体里面加代码</p><p>####使用场景<br>1：qq换肤2：生成不同操作系统的程序</p><p>####注意事项<br>产品族难维护。等级好扩展</p><p>####个人总结：抽象工厂 用来生成工厂 然后来选择具体的产品</p><p>####代码地址：<a href="https://github.com/xuxianyu/myGitHub/tree/master/DisignPattern/src/main/java/com/xxx/create/abstractfactory" target="_blank" rel="noopener">https://github.com/xuxianyu/myGitHub/tree/master/DisignPattern/src/main/java/com/xxx/create/abstractfactory</a></p>]]></content>
      
        <categories>
            
            <category> 笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[spring bean 加载顺序解决办法]]></title>
      <url>/ming/50d1ed2b.html</url>
      <content type="html"><![CDATA[<p>在使用SpringBeanManager工具类的时候 发现 spring boot 是根据目录取扫描装配bean 的<br>由于我把 这个工具类放在com.ming.core.utils下 导致 这个加载顺序在一些初始化服务之后<br>看了一下相关资料<br>有四种解决方法</p><ul><li><p>在配置中调整顺序<br>先加载的 写在最上面 但是呢 我懒的写配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--bean声明--&gt;</span><br><span class="line">  &lt;bean class=&quot;com.ming.core.utils.SpringBeanManager&quot;/&gt;</span><br><span class="line">  &lt;bean class=&quot;com.ming.base.init.SystemInit&quot; init-method=&quot;init&quot; destroy-method=&quot;destroy&quot; /&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用@Autowired 注入到所需的服务中<br>其实就是跟在配置中写 ref差不多的功能  spring 会解析到这个会依赖springBeanManager 所以会先加载springBeanManager<br>这种方式 有点丑 但是可以解决问题</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">@Component</span><br><span class="line">public class SystemInit &#123;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     *  使 SpringBeanManager在SystemInit之前初始化</span><br><span class="line">     *</span><br><span class="line">     * @author ming</span><br><span class="line">     * @date 2017-11-09 17:52</span><br><span class="line">     */</span><br><span class="line">   @Autowired</span><br><span class="line">    private SpringBeanManager springBeanManager;</span><br><span class="line"></span><br><span class="line">    @PostConstruct</span><br><span class="line">    public void init() &#123;</span><br><span class="line">        //初始化 script job  bean</span><br><span class="line">        GroovyBeanInit.InitScriptJob();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用DependsOn<br>这个是要配置一个或者多个 注册的bean的名称  而不是类的名称</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">// 等待springBeanManager 装载完毕  初始化本类</span><br><span class="line">@DependsOn(value = &quot;springBeanManager&quot;)</span><br><span class="line">@Component</span><br><span class="line">public class SystemInit &#123;</span><br><span class="line"></span><br><span class="line">    @PostConstruct</span><br><span class="line">    public void init() &#123;</span><br><span class="line">        //初始化 script job  bean</span><br><span class="line">        GroovyBeanInit.InitScriptJob();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用@Order注解<br>此方式 在spring boot 中暂时无法使用 等找到相关文档 再看看是什么原因 无法使用<br>####总结：一般来说 对于加载顺序有强烈要求的地方 不是很多 如果有 使用DependsOn 基本能解决了</p></li></ul>]]></content>
      
        <categories>
            
            <category> 坑 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> spring </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[spring cloud 总览]]></title>
      <url>/ming/73f341d0.html</url>
      <content type="html"><![CDATA[<p>公司想切换到spring cloud上所以我找了本书看看 大致上知道了spring cloud的各部分组件 也算是用的比较熟练了<br>但是好记性不如烂笔头 所以写一波笔记 防止遗忘</p><p>####目录</p><ul><li>综述</li><li>注册中心(eureka、consul、zk)</li><li>微服务服务端、客户端(feign)</li><li>容错、负载均衡(ribbon、hystrix)</li><li>配置中心(config)</li><li>网关(zuul)</li><li>消息总线(bus、stream)</li><li>定时任务调度(qz)</li><li>分布式调用链日志(sleuth:基于zipkin的)</li><li>搭建个人基于spring cloud 的脚手架遇到的问题<br>####综述<br>spring cloud 提供一整套分布式微服务的解决方案<br>联系到云原生(cloud native)这个概念<br>我个人觉得 他是把微服务的架构+容器+自动化运维整合到一起提出的概念<br>在基于docker+k8s这样的或者类似的平台下 快速开发、切入到已有的分布式环境中的应用<br>####注册中心<br>在微服务架构中 较为核心的应该就是注册中心了 服务的治理、使用都需要注册中心的协助<br>spring cloud支持比较好的注册中心 大致有三种 eureka、consul、zookeeper<br>这三个 各有各的好 不过现在来说 consul可能功能更加齐全 更加好用一点 这个在后续的详细的笔记详说<br>####微服务的服务端、客户端<br>######服务端:<br>这个就是很普通的http接口 莓什么好说的 现在http大部分还是使用1.0。或者1.1 性能说实话一般 不过差不多够用 如果有特殊需求 完全可以选择其他协议<br>例如我北京的有个大佬朋友 他们也是spring cloud +docker +k8s技术栈 他们就要把http协议切换到tcp协议 照样刚<br>但是后续http2.0出来后 我觉得性能差别应该不会太大了 毕竟 http2.0也是基于二进制 还有其它的功能 我比较看好 http2.0<br>######客户端:<br>简陋点直接用restTemplate也是可以访问调用的 但是不好管理 而且麻烦 建议使用feign去申明接口即可调用<br>但是这个也有点坑<br>举个例子 在spring mvc 4.3 之后 是提供GetMapping这样的封装RequestMapping的接口 但是feign不支持的 还有其他的坑 到详细的笔记细说<br>####容错、负载均衡<br>######容错:<br>spring cloud 是基于hystrix来做容错的 容错其实就是 发现错误 马上关闭停止对错误的节点的访问、有相应的降级措施情况下 进行服务降级 保证服务的可用<br>当然也提供请求缓存、请求合并 turbine也可以基于hystrix、dashboard来进行集群的状态监控<br>######负载均衡:<br>spring cloud 是基于ribbon来做客户端负载均衡的 首先 会去注册中心找到注册列表 通过轮寻方式 去负载均衡 当然可以重写负载均衡器(LoadBalancerClient) 也是可以使用其他更加优越的算法的 毕竟spring cloud 只是提供基础实现<br>####配置中心<br>国内的话 各个大公司基本都有各自的配置中心的实现 我们公司用的是baidu的disconf 用起来也就那回事吧 不如spring cloud config<br>config 是使用 git 或者svn 来做配置仓库 这天生站在巨人肩膀上<br>config 可以实现集中管理各个集群的配置 而且安全性较高 访问安全、数据的加密解密(对称加密需要替换jre、还支持rsa这种非对称加密)<br>还可以通过配合bus组件 进行动态修改集群配置 这一点是很重要的 因为很多参数根据实际情况进行微调是非常需要的<br>####网关<br>就是统一对访问进行管理的地方 例如鉴权、限制等等<br>网关 说实话 如果实力强劲 就不会选择这个来用zuul<br>nginx+lua功能不比这个东西强？<br>####消息总线<br>说的这么高端其实就是一个mq的使用 bus主要是消息传递 stream主要是发布订阅事件没什么特别的<br>spring cloud bus 或者stream 天然支持 rabbit或者kafka 都差不多吧 看具体情况选择 个人比较倾向rabbit<br>####定时任务调度<br>定时任务 是每个系统必须的一个模块<br>一般也就三种方式<br>1:基于jdk的timer timerTask方式 这种方式简单粗暴 但是需要自己实现一些复杂的功能<br>2:基于spring 的 scheduled task 这个也是不太适合企业级使用<br>3:qz(quartz)功能多 支持集群环境下调度 但是需要数据库支持 不用说 肯定qz的 不然要写死<br>####分布式调用链日志<br>sleuth 是基于zipkin的一套分布式调用链跟踪组件<br>说起这个 公司的zipkin还是我们组负责的 老大带我们去引入zipkin 搞死人了<br>调用链呢 是跟踪每个请求从发起 到调用各个服务 一直到db操作一整链<br>记录这些日志 方便优化、跟踪错误<br>这个到详细笔记细说 这个和业务日志、操作日志是不同的<br>####遇到的问题<br>这个说实话还是遇到很多问题的 因为我基于公司已有的架构 使用spirng cloud 从新整合 还是有点坑的 详细笔记再说<br>####总结:spring cloud 基本上就这些组件 spring cloud + docker + k8s 这一套可以说是现在做微服务 云原生的标准套路了</li></ul>]]></content>
      
        <categories>
            
            <category> 笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> spring </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[spring boot 项目打包docker image 插件方式]]></title>
      <url>/ming/dbafeaad.html</url>
      <content type="html"><![CDATA[<p>####spring boot 打包成docker image 会更加方便使用<br>1:配置编译jar选项<br>2:配置maven docker 插件<br>3:上传到私服<br>4:自动化脚本</p><p>####配置编译jar<br>如果是继承spring boot 的pom 直接如下配置即可<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;plugin&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">&lt;/plugin&gt;</span><br></pre></td></tr></table></figure><p></p>
<p>然后  mvn package 即可  这个时候 打包的jar 里面带有main-class的默认配置 也会有需要的依赖包<br>可以直接 java -jar ming.jar 方式运行</p>
<p>####配置 maven docker 插件<br>这个插件略坑  在windows上 docker build比较操蛋  linux下docker又需要root权限运行 略坑<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;plugin&gt;</span><br><span class="line">    &lt;groupId&gt;com.spotify&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;docker-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;$&#123;maven.docker.version&#125;&lt;/version&gt;</span><br><span class="line">    &lt;configuration&gt;</span><br><span class="line">        &lt;!--镜像名称--&gt;</span><br><span class="line">        &lt;imageName&gt;$&#123;docker.image.prefix&#125;/$&#123;project.artifactId&#125;&lt;/imageName&gt;</span><br><span class="line">        &lt;!--docker file位置--&gt;</span><br><span class="line">        &lt;dockerDirectory&gt;src/main/docker&lt;/dockerDirectory&gt;</span><br><span class="line">        &lt;resources&gt;</span><br><span class="line">            &lt;resource&gt;</span><br><span class="line">                &lt;!-- 编译jar路径 --&gt;</span><br><span class="line">                &lt;targetPath&gt;/&lt;/targetPath&gt;</span><br><span class="line">                &lt;!--编译jar 所在文件夹--&gt;</span><br><span class="line">                &lt;directory&gt;$&#123;project.build.directory&#125;&lt;/directory&gt;</span><br><span class="line">                &lt;!--编译的jar 名称--&gt;</span><br><span class="line">                &lt;include&gt;$&#123;project.build.finalName&#125;.jar&lt;/include&gt;</span><br><span class="line">            &lt;/resource&gt;</span><br><span class="line">        &lt;/resources&gt;</span><br><span class="line">    &lt;/configuration&gt;</span><br><span class="line">&lt;/plugin&gt;</span><br></pre></td></tr></table></figure><p></p>
<p>然后使用 mvn package docker:build 编译构建即可  最好是在linux环境下 使用root 权限</p>
<p>####上传到私服<br>我这里选择的是上传到 aliyun 提供的镜像仓库<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker login --username=18120580001@163.com registry.cn-hangzhou.aliyuncs.com</span><br><span class="line">$ sudo docker tag [ImageId] registry.cn-hangzhou.aliyuncs.com/mingimages/ming:[镜像版本号]</span><br><span class="line">$ sudo docker push registry.cn-hangzhou.aliyuncs.com/mingimages/ming:[镜像版本号]</span><br></pre></td></tr></table></figure><p></p>
<p>####参考地址:<a href="https://github.com/xuxianyu/ming" target="_blank" rel="noopener">https://github.com/xuxianyu/ming</a></p>]]></content>
      
        <categories>
            
            <category> 笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> spring </tag>
            
            <tag> docker </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[spring boot  监控模块 actuator笔记]]></title>
      <url>/ming/1a1c1aa1.html</url>
      <content type="html"><![CDATA[<p>###actuator 是spring boot 提供的一个监控的工具<br>直接访问 相应端点(rest 接口)<br>端点分为三种:</p><ul><li>应用配置类<br>/autoconfig 获取应用的自动配置相关参数<br>/beans 获取应用的所有bean<br>/configprops 应用中配置的属性信息 设置enabled = false 关闭这个端点<br>/env 获取应用可以用的环境信息<br>/mappings 返回 mvc控制器 映射关系 也就是接口的信息<br>/info 返回自定义信息 设置 info.app.name=ming info返回ming</li><li>度量指标类<br>/metrics 返回各类重要的度量指标 内存、线程、垃圾回收信息 通过使用 counterServices 来自定义 信息<br>/metrics/{name} 获取指定的信息<br>/health 获取各类健康的指标 磁盘、数据库链接是否可以用、rabbit、solr、redis是否可用<br>/dump 项目线程信息<br>/trace 返回基本http跟踪 保留100条</li><li>操作控制类<br>/shutdown 关闭应用 post请求 需要设定开启endpoints.shutdown.enabled: true</li></ul>]]></content>
      
        <categories>
            
            <category> 笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> spring </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[spring boot data jpa 扩充JpsRepository]]></title>
      <url>/ming/19f1b366.html</url>
      <content type="html"><![CDATA[<p>#####jpa扩充jpaRepository接口的方法<br>1:定义一个接口 继承于 JpaRepository<br>2:定义接口实现类<br>3:定义 接口加载工厂方法<br>4:repository 继承自定义接口<br>5:启动类使用 自定义加载工厂</p><p>####1:定义扩充方法接口<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 基于jpa的默认jpaRepository实现自己的repository接口</span><br><span class="line"> * NoRepositoryBean 不会创建接口的实例  必须要加这个注解</span><br><span class="line"> *</span><br><span class="line"> * @author ming</span><br><span class="line"> * @date 2017-08-28 11点</span><br><span class="line"> */</span><br><span class="line">@NoRepositoryBean</span><br><span class="line">public interface BaseRepository&lt;T, ID extends Serializable&gt; extends JpaRepository&lt;T, ID&gt; &#123;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 使用原生sql 查询 list列表</span><br><span class="line">     *</span><br><span class="line">     * @author ming</span><br><span class="line">     * @date 2017-08-29 16点</span><br><span class="line">     */</span><br><span class="line">    List&lt;T&gt; findListByNativeSql(String sql, Class&lt;T&gt; clzss);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p>
<h4 id="2-定义这个接口的实现类"><a href="#2-定义这个接口的实现类" class="headerlink" title="2:定义这个接口的实现类"></a>2:定义这个接口的实现类</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">public class BaseRepositoryImpl&lt;T, TD extends Serializable&gt; extends SimpleJpaRepository&lt;T, TD&gt; implements BaseRepository&lt;T, TD&gt; &#123;</span><br><span class="line"></span><br><span class="line">    private final EntityManager entityManager; //父类没有不带参数的构造方法，这里手动构造父类</span><br><span class="line"></span><br><span class="line">    public BaseRepositoryImpl(Class&lt;T&gt; domainClass, EntityManager entityManager) &#123;</span><br><span class="line">        super(domainClass, entityManager);</span><br><span class="line">        this.entityManager = entityManager;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    @SuppressWarnings(&quot;unchecked&quot;)</span><br><span class="line">    public List&lt;T&gt; findListByNativeSql(String sql, Class&lt;T&gt; clzss) &#123;</span><br><span class="line">        return entityManager.createNativeQuery(sql, clzss).getResultList();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="3-定义加载自定义repository接口工厂"><a href="#3-定义加载自定义repository接口工厂" class="headerlink" title="3: 定义加载自定义repository接口工厂"></a>3: 定义加载自定义repository接口工厂</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">public class BaseRepositoryFactoryBean&lt;R extends JpaRepository&lt;T, ID&gt;, T, ID extends Serializable&gt; extends JpaRepositoryFactoryBean&lt;R, T, ID&gt; &#123;</span><br><span class="line"></span><br><span class="line">    public BaseRepositoryFactoryBean(Class&lt;? extends R&gt; repositoryInterface) &#123;</span><br><span class="line">        super(repositoryInterface);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected RepositoryFactorySupport createRepositoryFactory(EntityManager entityManager) &#123;</span><br><span class="line">        return new BaseRepositoryFactory(entityManager);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //创建一个内部类，该类不用在外部访问</span><br><span class="line">    private static class BaseRepositoryFactory&lt;T, ID extends Serializable&gt;</span><br><span class="line">            extends JpaRepositoryFactory &#123;</span><br><span class="line"></span><br><span class="line">        private final EntityManager em;</span><br><span class="line"></span><br><span class="line">        public BaseRepositoryFactory(EntityManager em) &#123;</span><br><span class="line">            super(em);</span><br><span class="line">            this.em = em;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        //设置具体的实现类是BaseRepositoryImpl</span><br><span class="line">        @SuppressWarnings(&quot;unchecked&quot;)</span><br><span class="line">        @Override</span><br><span class="line">        protected Object getTargetRepository(RepositoryInformation information) &#123;</span><br><span class="line">            return new BaseRepositoryImpl&lt;T, ID&gt;((Class&lt;T&gt;) information.getDomainType(), em);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        //设置具体的实现类的class</span><br><span class="line">        @Override</span><br><span class="line">        protected Class&lt;?&gt; getRepositoryBaseClass(RepositoryMetadata metadata) &#123;</span><br><span class="line">            return BaseRepositoryImpl.class;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="4-repository继承自定义接口"><a href="#4-repository继承自定义接口" class="headerlink" title="4:repository继承自定义接口"></a>4:repository继承自定义接口</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@Repository</span><br><span class="line">public interface UserRepository extends BaseRepository&lt;User, Long&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="5-启动类使用自定义加载工厂"><a href="#5-启动类使用自定义加载工厂" class="headerlink" title="5:启动类使用自定义加载工厂"></a>5:启动类使用自定义加载工厂</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 启动类 要位于最顶层包  他只会扫描 同级包和子包</span><br><span class="line"> *</span><br><span class="line"> * @author ming</span><br><span class="line"> * @date 2017-06-17</span><br><span class="line"> */</span><br><span class="line">@SpringBootApplication(scanBasePackages = &quot;com.ming&quot;, excludeName = &#123;&quot;classpath*:application.yml&quot;,</span><br><span class="line">        &quot;classpath*:application-aliyun.yml&quot;&#125;)</span><br><span class="line">// jpa使用自定义加载工厂</span><br><span class="line">@EnableJpaRepositories(repositoryFactoryBeanClass = BaseRepositoryFactoryBean.class)</span><br><span class="line">public class Start &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        SpringApplication.run(Start.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="总结-和之前spring中使用jpa差不多套路-主要是自定义一个加载工厂-有点变化"><a href="#总结-和之前spring中使用jpa差不多套路-主要是自定义一个加载工厂-有点变化" class="headerlink" title="总结:和之前spring中使用jpa差不多套路  主要是自定义一个加载工厂 有点变化"></a>总结:和之前spring中使用jpa差不多套路  主要是自定义一个加载工厂 有点变化</h4>]]></content>
      
        <categories>
            
            <category> 笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> spring </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[spring cloud 注册中心模块笔记]]></title>
      <url>/ming/4c352ff0.html</url>
      <content type="html"><![CDATA[<p>eureka客户端:</p><ul><li>服务注册相关配置 注册的中心、心跳、注册信息缓存时间 org.springframework.cloud.netflix.eureka.EurekaClientConfigBean</li><li>服务实列配置信息 服务实列的名称、地址、健康检查路径 org.springframework.cloud.netflix.eureka.EurekaInstanceConfigBean<br>eureka服务端:</li><li>配置相关检测 eureka.server中配置 org.springframework.cloud.netflix.eureka.server.EurekaServerConfigBean 服务端相关配置</li></ul><table><thead><tr><th style="text-align:left">配置名称</th><th style="text-align:left">说明</th><th style="text-align:left">备注</th></tr></thead><tbody><tr><td style="text-align:left">eureka.client.register-with-eureka=true</td><td style="text-align:left">是否向注册中心注册自己</td><td style="text-align:left">true=注册，false=不注册</td></tr><tr><td style="text-align:left">eureka.instance.lease-renewal-interval-in-seconds=30</td><td style="text-align:left">续约服务间隔 心跳间隔</td><td style="text-align:left">心跳间隔 30s</td></tr><tr><td style="text-align:left">eureka.instance.lease-expiration-duration-in-seconds=90</td><td style="text-align:left">服务失效时间，当90s后没有成功续约，服务失效</td><td style="text-align:left">默认失效时间 90s</td></tr><tr><td style="text-align:left">eureka.client.registry-fetch-interval-seconds=30</td><td style="text-align:left">注册信息缓存时间</td><td style="text-align:left">默认30s</td></tr><tr><td style="text-align:left">eureka.instance.hostname=name</td><td style="text-align:left">eureka服务地址</td><td style="text-align:left">域名或者ip</td></tr><tr><td style="text-align:left">eureka.server.enable-self-preservation=false</td><td style="text-align:left">是否开启自我保护 默认true</td><td style="text-align:left">eureka server自我保护机制: 十五分钟内心跳失败低于85% 出现 自我保护机制</td></tr><tr><td style="text-align:left">eureka.client.serviceUrl.defaultZone</td><td style="text-align:left">指定默认zone(可用区)</td><td style="text-align:left">如果没有为region(区域)配置zone(可用区)那么使用默认zone(可用区) 多个用,分割,带安全校验的格式(http://<username>:<password>@localhost:10000/eureka)</password></username></td></tr><tr><td style="text-align:left">eureka.client.availability-zones</td><td style="text-align:left">zone(可用区)列表</td><td style="text-align:left">region一个对应多个zone(可用区) 一个区域可以有多个可用区</td></tr><tr><td style="text-align:left">eureka.instance.instanceId=${spring.application.name}:${random.int}</td><td style="text-align:left">设定 客户端的明名规则防止冲突</td><td style="text-align:left">和server.port=0结合使用</td></tr><tr><td style="text-align:left">management.context-path</td><td style="text-align:left">设置 上下文前缀</td><td style="text-align:left">如果设置了这个 需要再eurekaclient相应设置/health 和/info端点 否则eureka server端无法获取 客户端的健康情况</td></tr><tr><td style="text-align:left">eureka.instance.statusPageUrlPath=${management.context-path}/info</td><td style="text-align:left">设置info端点</td><td style="text-align:left">如果客户端修改了端点相应信息 必须要设置这个</td></tr><tr><td style="text-align:left">eureka.instance.healthCheckUrlPath=${}/health</td><td style="text-align:left">设置health端点</td><td style="text-align:left">如果客户端修改了端点相应信息 必须要设置这个</td></tr></tbody></table>]]></content>
      
        <categories>
            
            <category> 笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> spring </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[spring cloud ribbon 负载均衡笔记]]></title>
      <url>/ming/878fb6fb.html</url>
      <content type="html"><![CDATA[<p>###ribbon负载均衡<br>必须存在<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@Bean</span><br><span class="line">@LoadBalanced//通过再restTemplate中添加拦截器 实现负载均衡、重写uri等功能</span><br><span class="line">RestTemplate restTemplate()&#123;</span><br><span class="line">    return new RestTemplate();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p>
<h4 id="ServiceInstanceChooser-服务实例选择"><a href="#ServiceInstanceChooser-服务实例选择" class="headerlink" title="ServiceInstanceChooser  服务实例选择"></a>ServiceInstanceChooser  服务实例选择</h4><p>choose 根据serviceId选择一个实例</p>
<p>####LoadBalancerClient extends ServiceInstanceChooser 负载均衡客户端<br>execute 获取负载均衡后的实例、服务id之后 执行请求<br>reconstructURI 根据实例重写uri 获取服务实例后 重写uri</p>
<p>####LoadBalancerAutoConfiguration 自动配置类</p>
<ul>
<li>必须存在 restTemplate 通过http请求 添加拦截器来实现负载均衡</li>
<li>必须存在 LoadBalancerClient 的实现<br>核心功能:<br>static class LoadBalancerInterceptorConfig通过这个配置类 配置负载均衡拦截器 向restTemplate添加负载均衡功能<br>ribbonInterceptor(LoadBalancerClient loadBalancerClient,LoadBalancerRequestFactory loadBalancerRequestFactory);  创建 负载均衡拦截器<br>restTemplateCustomizer(LoadBalancerInterceptor loadBalancerInterceptor);为restTemplate设置负载均衡拦截器<br>通过执行 负载均衡器的execute方法来选择实例和重写uri、执行请求</li>
</ul>
<p>static class RetryAutoConfiguration 自动重试机制配置<br>也是通过创建重试拦截器 添加到restTemplate中 来设置自动重试</p>
<p>####ILoadBalancer<br>获取服务实例不是采用serviceInstancerChooser获取的，而是 netflix ribbon中的ILoadBalancer<br>查看 ribbon实现的LoadBalancerClient的getServer方法 就看得到<br>addServers 添加实例<br>chooseServer 根据负载均衡策略获取一个实例<br>markServerDown 标记实例不可用<br>getReachableServers 获取可用实例<br>getAllServers 获取所有实例<br>里面主要就是维护实例列表和获取列表方法、server类定义了一个服务节点的基本信息<br>实现类：</p>
<ul>
<li>AbstractLoadBalancer implements ILoadBalancer 负载均衡器 抽象类<br>抽象定义:<br>serverGroup：ALL(所有)、STATUS_UP(可用)、STATUS_NOT_UP(不可用)<br>实现的方法：<br>chooseServer 调用接口的chooseServer(null)  选择实例的时候忽略key的条件判断<br>抽象方法:<br>abstract getServerList(serverGroup) 根据实例组 枚举来获取 相应实例列表<br>abstract getLoadBalancerStats() 获取负载均衡 统计数据  </li>
<li><p>NoOpLoadBalancer extends AbstractLoadBalancer   </p>
</li>
<li><p>BaseLoadBalancer extends AbstractLoadBalancer   实现了基本的负载均衡器<br>定义可用实例集合 allServerList 、upServerList<br>定义负载均衡统计信息 LoadBalancerStats<br>定义 IPing=null 需要注入<br>定义 IPingStrategy iping执行策略  默认使用 BaseLoadBalancer中的SerialPingStrategy 线性执行策略 通过重写IPingStrategy 来使用更高效率的 ping策略<br>定义 IRule 负载均衡处理规则  默认使用RoundRobinRule  线性负载均衡规则<br>启动 ping任务  默认pingIntervalSeconds=10s  使用Timer 执行定时任务   maxTotalPingTimeSeconds=5s最大执行时间<br>实现 ILoadBalancer 基本操作 addServers 、chooseServer、markServerDown、getReachAbleServers、getAllServers<br>定义 其他附加的的信息 例如 IClientConfig、changeListeners、serverStatusListeners等  </p>
</li>
<li>DynamicServerListLoadBalancer extends AbstractLoadBalancer    动态实例负载均衡器<br>定义 isSecure = false 默认不使用https<br>定义 useTunnel =false  是否使用隧道 估计是是否使用pptp协议隧道的意思<br>定义 ServerList<t> serverListsImpl 实例列表 serverList 有获取初始化服务列表和获取更新的服务列表两个方法  查看实现类 org.springframework.cloud.netflix.ribbon.eureka.EurekaRibbonClientConfiguration#ribbonServerList  DiscoveryEnabledNIWSServerList–》DomainExtractingServerList来构建默认的serverList  获取初始化服务方法、更新服务方法 通过#obtainServersViaDiscovery 方法实现 这个是客户端 获取服务端注册信息 转换成本地缓存 serverList方法<br>定义 ServerListFilter<t> filter 过滤器  根据过滤条件过滤实例<br>定义 ServerListUpdater.UpdateAction   服务更新器具体实现<br>定义 ServerListUpdater 服务更新器 通过updateListOfServers 先获取要更新的列表–》根据过滤条件 过滤 –》 添加到serverList<br>ServerListUpdater 接口:<br>start 启动服务更新器<br>stop 关闭服务更新器<br>getLastUpdate 获取最后更新时间戳<br>getDurationSinceLastUpdateMs 获取上一次到现在的时间间隔<br>getNumberMissedCycles 获取错过的更新期数<br>getCoreThreads 获取核心线程数<br>PollingServerListUpdater实现类:默认实现 使用定时任务 定时从eureka server 拉取<br>EurekaNotificationServerListUpdater实现类:通过eureka事件监听 来驱动 </t></t></li>
<li>ZoneAwareLoadBalancer extends DynamicServerListLoadBalancer 区域感知负载均衡器   <h4 id="RibbonClientConfiguration-ribbon-客户端配置"><a href="#RibbonClientConfiguration-ribbon-客户端配置" class="headerlink" title="RibbonClientConfiguration ribbon 客户端配置"></a>RibbonClientConfiguration ribbon 客户端配置</h4>ribbonClientConfig 设置ribbonClient 配置<br>ribbonRule 设置负载均衡 处理规则 实现<br>ribbonPing  设置负载均衡 ping 方式实现<br>ribbonServerList 设置实例列表<br>static RestClientRibbonConfiguration 配置ribbon的restClient相关参数<br>  ribbonRestClient 根据ribbon相关配置 获取 restClient<br>ribbonLoadBalancer 获取负载均衡器<br>ribbonServerListFilter 设置负载均衡服务的过滤器<br>ribbonLoadBalancerContext 负载均衡器上下文<br>retryHandler 重试处理<br>serverIntrospector 实例拦截器<h4 id="ServiceInstance-服务实例"><a href="#ServiceInstance-服务实例" class="headerlink" title="ServiceInstance  服务实例"></a>ServiceInstance  服务实例</h4>存储实例的 serviceId 、host、port、isSecure(是否使用https)、uri、metaData(元数据map)</li></ul>]]></content>
      
        <categories>
            
            <category> 笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> spring </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[spring boot 全局处理异常笔记]]></title>
      <url>/ming/869ed45a.html</url>
      <content type="html"><![CDATA[<p>####全局异常处理<br>在web中 异常也分为系统异常和业务异常 可以通过增强控制器 来对异常进行全局处理<br>1:创建业务异常类<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">import lombok.Data;</span><br><span class="line"></span><br><span class="line">import java.util.Map;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 自定义服务异常</span><br><span class="line"> *</span><br><span class="line"> * @author ming</span><br><span class="line"> * @date 2017-06-24</span><br><span class="line"> */</span><br><span class="line">@Data</span><br><span class="line">public class ServiceException extends RuntimeException &#123;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 异常编码</span><br><span class="line">     */</span><br><span class="line">    private int code;</span><br><span class="line">    /**</span><br><span class="line">     * 消息</span><br><span class="line">     */</span><br><span class="line">    private String msg;</span><br><span class="line">    /**</span><br><span class="line">     * 扩展参数</span><br><span class="line">     */</span><br><span class="line">    private Map&lt;String, Object&gt; extParams;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p>
<p>2:创建业务异常枚举类<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">import lombok.Getter;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 错误码表</span><br><span class="line"> *</span><br><span class="line"> * @author ming</span><br><span class="line"> * @date 2017-07-16</span><br><span class="line"> */</span><br><span class="line">@Getter</span><br><span class="line">public enum ExceptionConstants &#123;</span><br><span class="line">    ERROR(1,&quot;业务异常&quot;);</span><br><span class="line"></span><br><span class="line">    private Integer num;</span><br><span class="line">    private String content;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    ExceptionConstants(Integer num, String content) &#123;</span><br><span class="line">        this.num = num;</span><br><span class="line">        this.content = content;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p>
<p>3:如何抛出异常<br>这里粗糙的直接抛出枚举值<br>如果有需要 可以建立业务异常服务 统一管理错误码和错误信息  动态的变更业务异常提示<br>也可以继承 细分异常  例如 有的是参数错误 、有的是请求未授权之类的<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">throw new ServiceException(ExceptionConstants.ERROR.getNum(),ExceptionConstants.ERROR.getContent());</span><br></pre></td></tr></table></figure><p></p>
<p>4:建立增强controller 全局异常捕捉<br>这里通过@ControllerAdvice增强<br>通过@ExceptionHandler 捕捉异常<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">import com.ming.base.exception.ServiceException;</span><br><span class="line">import lombok.extern.slf4j.Slf4j;</span><br><span class="line">import org.apache.commons.lang3.exception.ExceptionUtils;</span><br><span class="line">import org.springframework.web.bind.annotation.ControllerAdvice;</span><br><span class="line">import org.springframework.web.bind.annotation.ExceptionHandler;</span><br><span class="line">import org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 全局异常处理</span><br><span class="line"> *</span><br><span class="line"> * @author ming</span><br><span class="line"> * @date 2017-11-10 13:58</span><br><span class="line"> */</span><br><span class="line">@ControllerAdvice</span><br><span class="line">@Slf4j</span><br><span class="line">public class BaseGlobalExceptionHandler &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @ExceptionHandler(value = Exception.class)</span><br><span class="line">    @ResponseBody</span><br><span class="line">    public ReturnJsonBody defaultErrorHandler(HttpServletRequest req, Exception e) throws Exception &#123;</span><br><span class="line">        ReturnJsonBody rb = new ReturnJsonBody();</span><br><span class="line">        if (e instanceof ServiceException) &#123;</span><br><span class="line">            ServiceException se = (ServiceException) e;</span><br><span class="line">            rb.setCode(se.getCode());</span><br><span class="line">            rb.setMsg(se.getMsg());</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            rb.setCode(1);</span><br><span class="line">            rb.setMsg(&quot;系统异常&quot;);</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            rb.setStack(ExceptionUtils.getStackTrace(e));</span><br><span class="line">            /*try &#123;</span><br><span class="line">                addServerExceptionLog(req, e);</span><br><span class="line">            &#125; catch (Exception ex) &#123;</span><br><span class="line">                LOGGER.error(&quot;add server exception error &#123;&#125;&quot;, ExceptionUtils.getStackTrace(ex));</span><br><span class="line">            &#125;</span><br><span class="line">*/</span><br><span class="line">        &#125;</span><br><span class="line">        return rb;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // public abstract void addServerExceptionLog(HttpServletRequest request, Throwable throwable);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p>
<p>####总结:通过增强controller 来捕捉全局mvc异常  这样第一可以返回指定格式错误信息  第二 可以捕捉业务异常</p>]]></content>
      
        <categories>
            
            <category> 笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> spring </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[spring bean manager utils 笔记]]></title>
      <url>/ming/bb781540.html</url>
      <content type="html"><![CDATA[<p>在使用spring 中总有地方要求获取bean或者注册bean 所以找了部分资料 抄袭了几波 合并成如下工具类<br>主要功能 :</p><ul><li>获取bean</li><li>手动注册bean</li><li>删除手工注册的bean<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">import com.google.common.collect.Maps;</span><br><span class="line">import org.springframework.beans.BeansException;</span><br><span class="line">import org.springframework.beans.factory.DisposableBean;</span><br><span class="line">import org.springframework.beans.factory.support.BeanDefinitionBuilder;</span><br><span class="line">import org.springframework.beans.factory.support.DefaultListableBeanFactory;</span><br><span class="line">import org.springframework.context.ApplicationContext;</span><br><span class="line">import org.springframework.context.ApplicationContextAware;</span><br><span class="line">import org.springframework.core.Ordered;</span><br><span class="line">import org.springframework.core.annotation.Order;</span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line">import javax.annotation.PostConstruct;</span><br><span class="line">import java.lang.annotation.Annotation;</span><br><span class="line">import java.util.Map;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 对操作spring applicationcontext提供基本封装  方便使用</span><br><span class="line"> * 使用order 最先加载</span><br><span class="line"> *</span><br><span class="line"> * @author ming</span><br><span class="line"> * @date 11:00</span><br><span class="line"> */</span><br><span class="line">@Component</span><br><span class="line">//预期在容器最开始加载 暂时这个无法生效  如果需要这个bean 优先加载 请调整依赖 来调整bean加载顺序</span><br><span class="line">@Order(Ordered.HIGHEST_PRECEDENCE)</span><br><span class="line">public class SpringBeanManager implements ApplicationContextAware, DisposableBean &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * spring bean上下文</span><br><span class="line">     *</span><br><span class="line">     * @author ming</span><br><span class="line">     * @date 11:00</span><br><span class="line">     */</span><br><span class="line">    private static ApplicationContext applicationContext;</span><br><span class="line">    /**</span><br><span class="line">     * 获取BeanFactory  进行动态注册bean 删除bean</span><br><span class="line">     *</span><br><span class="line">     * @author ming</span><br><span class="line">     * @date 2017-11-10 15:51</span><br><span class="line">     */</span><br><span class="line">    private static DefaultListableBeanFactory defaultListableBeanFactory;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 手动注册的bean 名称列表  必须保证 每个使用它的地方 是一样的</span><br><span class="line">     *</span><br><span class="line">     * @author ming</span><br><span class="line">     * @date 2017-11-10 15:54</span><br><span class="line">     */</span><br><span class="line">    private static volatile Map&lt;String, Class&lt;?&gt;&gt; manualRegisterBeanMap = Maps.newConcurrentMap();</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 初始化 beanFactory</span><br><span class="line">     *</span><br><span class="line">     * @author ming</span><br><span class="line">     * @date 2017-11-10 15:52</span><br><span class="line">     */</span><br><span class="line">    @PostConstruct</span><br><span class="line">    public void init() &#123;</span><br><span class="line">        //获取 bean factory</span><br><span class="line">        defaultListableBeanFactory = (DefaultListableBeanFactory) applicationContext.getAutowireCapableBeanFactory();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 动态注入bean</span><br><span class="line">     *</span><br><span class="line">     * @param beanName</span><br><span class="line">     * @param beanClazz</span><br><span class="line">     * @author ming</span><br><span class="line">     * @date 2017-11-09 16:50</span><br><span class="line">     */</span><br><span class="line">    public static void registerBean(String beanName, Class&lt;?&gt; beanClazz) &#123;</span><br><span class="line">        checkDefaultListableBeanFactory();</span><br><span class="line">        //创建beanBuilder</span><br><span class="line">        BeanDefinitionBuilder beanDefinitionBuilder = BeanDefinitionBuilder.genericBeanDefinition(beanClazz);</span><br><span class="line">        //注册bean</span><br><span class="line">        defaultListableBeanFactory.registerBeanDefinition(beanName, beanDefinitionBuilder.getBeanDefinition());</span><br><span class="line">        //添加手工注册的beanName 到集合</span><br><span class="line">        manualRegisterBeanMap.put(beanName, beanClazz);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 删除bean</span><br><span class="line">     *</span><br><span class="line">     * @param beanName</span><br><span class="line">     * @author ming</span><br><span class="line">     * @date 2017-11-10 15:45</span><br><span class="line">     */</span><br><span class="line">    public static void removeBean(String beanName) &#123;</span><br><span class="line">        //当试图删除 非手动注册的bean的时候</span><br><span class="line">        if (!manualRegisterBeanMap.keySet().contains(beanName)) &#123;</span><br><span class="line">            throw new UnsupportedOperationException(&quot;不能删除非手动注册的bean&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        checkDefaultListableBeanFactory();</span><br><span class="line">        defaultListableBeanFactory.removeBeanDefinition(beanName);</span><br><span class="line">        manualRegisterBeanMap.remove(beanName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 根据名称 获取bean</span><br><span class="line">     *</span><br><span class="line">     * @param name 注册的bean名称</span><br><span class="line">     * @return T</span><br><span class="line">     * @author ming</span><br><span class="line">     * @date 11:19</span><br><span class="line">     */</span><br><span class="line">    @SuppressWarnings(&quot;unchecked&quot;)</span><br><span class="line">    public static &lt;T&gt; T getBeanByName(String name) &#123;</span><br><span class="line">        checkApplicationContext();</span><br><span class="line">        return (T) applicationContext.getBean(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 根据类型 获取bean</span><br><span class="line">     *</span><br><span class="line">     * @param clazz 注册bean的类型</span><br><span class="line">     * @return T</span><br><span class="line">     * @author ming</span><br><span class="line">     * @date 11:20</span><br><span class="line">     */</span><br><span class="line">    public static &lt;T&gt; T getBeanByType(Class&lt;T&gt; clazz) &#123;</span><br><span class="line">        checkApplicationContext();</span><br><span class="line">        return applicationContext.getBean(clazz);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public static &lt;T&gt; T getbeanByNameAndType(String beanName, Class&lt;T&gt; clazz) &#123;</span><br><span class="line">        checkApplicationContext();</span><br><span class="line">        return applicationContext.getBean(beanName, clazz);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 获取application中所有注册的bean 列表</span><br><span class="line">     *</span><br><span class="line">     * @return String[]</span><br><span class="line">     * @author ming</span><br><span class="line">     * @date 2017-08-28 16点</span><br><span class="line">     */</span><br><span class="line">    public static String[] getBeanDefinitionNames() &#123;</span><br><span class="line">        checkApplicationContext();</span><br><span class="line">        return applicationContext.getBeanDefinitionNames();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 统计application中所有bean的数量</span><br><span class="line">     *</span><br><span class="line">     * @return Integer</span><br><span class="line">     * @author ming</span><br><span class="line">     * @date 2017-08-28 17点</span><br><span class="line">     */</span><br><span class="line">    public static Integer getBeanDefinitionCount() &#123;</span><br><span class="line">        checkApplicationContext();</span><br><span class="line">        return applicationContext.getBeanDefinitionCount();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 根据注解获取 beanNameList</span><br><span class="line">     *</span><br><span class="line">     * @param annotation</span><br><span class="line">     * @return String[]</span><br><span class="line">     * @author ming</span><br><span class="line">     * @date 2017-08-28 16点</span><br><span class="line">     */</span><br><span class="line">    public static String[] getBeanNameListByAnnotation(Class&lt;? extends Annotation&gt; annotation) &#123;</span><br><span class="line">        checkApplicationContext();</span><br><span class="line">        return applicationContext.getBeanNamesForAnnotation(annotation);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 根据bean类型获取所有的bean</span><br><span class="line">     *</span><br><span class="line">     * @param clazz</span><br><span class="line">     * @return String[]</span><br><span class="line">     * @author ming</span><br><span class="line">     * @date 2017-08-28 16点</span><br><span class="line">     */</span><br><span class="line">    public static String[] getBeanNamesForType(Class clazz) &#123;</span><br><span class="line">        checkApplicationContext();</span><br><span class="line">        return applicationContext.getBeanNamesForType(clazz);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 根据类型 获取 所有这个类型的bean  map 键为bean名字  值为注册的bean</span><br><span class="line">     *</span><br><span class="line">     * @param clazz</span><br><span class="line">     * @return Map</span><br><span class="line">     * @author ming</span><br><span class="line">     * @date 2017-08-28 16点</span><br><span class="line">     */</span><br><span class="line">    public static &lt;T&gt; Map&lt;String, T&gt; getBeansOfType(Class&lt;T&gt; clazz) &#123;</span><br><span class="line">        checkApplicationContext();</span><br><span class="line">        return applicationContext.getBeansOfType(clazz);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 检测applicationcontext是否可用</span><br><span class="line">     *</span><br><span class="line">     * @author ming</span><br><span class="line">     * @date 2017-08-28 17点</span><br><span class="line">     */</span><br><span class="line">    private static void checkApplicationContext() &#123;</span><br><span class="line">        if (applicationContext == null) &#123;</span><br><span class="line">            throw new NullPointerException(&quot;spring applicationContext is null !!!&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 检测 defaultListableBeanFactory</span><br><span class="line">     *</span><br><span class="line">     * @author ming</span><br><span class="line">     * @date 2017-11-10 15:47</span><br><span class="line">     */</span><br><span class="line">    private static void checkDefaultListableBeanFactory() &#123;</span><br><span class="line">        if (defaultListableBeanFactory == null) &#123;</span><br><span class="line">            throw new NullPointerException(&quot; spring defaultListableBeanFactory is null !!!&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 销毁方法</span><br><span class="line">     *</span><br><span class="line">     * @author ming</span><br><span class="line">     * @date 2017-08-28 17点</span><br><span class="line">     */</span><br><span class="line">    @Override</span><br><span class="line">    public void destroy() throws Exception &#123;</span><br><span class="line">        applicationContext = null;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 设置上下文</span><br><span class="line">     *</span><br><span class="line">     * @author ming</span><br><span class="line">     * @date 11:17</span><br><span class="line">     */</span><br><span class="line">    @Override</span><br><span class="line">    public void setApplicationContext(ApplicationContext applicationContext) throws BeansException &#123;</span><br><span class="line">        SpringBeanManager.applicationContext = applicationContext;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>####总结:看这个工具类的实现 就清晰的知道了 beanFactory的一些功能 和之前学习的applicationContext、beanFactory 联系起来了</p>]]></content>
      
        <categories>
            
            <category> 笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> spring </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[spring boot 全局处理返回数据格式笔记]]></title>
      <url>/ming/ba648708.html</url>
      <content type="html"><![CDATA[<p>####全局处理json数据返回格式<br>在前后端分离中 前后端为了更好的交互 应该指定一个较为通用的数据返回格式<br>基本上都是code+data 方式返回<br>在spring mvc 中通过对controller全局增强 来进行处理</p><p>1:制定 返回json数据返回大致格式<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 返回json 字符串格式</span><br><span class="line"> * json接口 返回的字符串格式</span><br><span class="line"> *</span><br><span class="line"> * @author ming</span><br><span class="line"> * @date 2017-11-10 12:56</span><br><span class="line"> */</span><br><span class="line">@Data</span><br><span class="line">@NoArgsConstructor</span><br><span class="line">public class ReturnJsonBody implements Serializable &#123;</span><br><span class="line">    /**</span><br><span class="line">     * 状态码</span><br><span class="line">     */</span><br><span class="line">    private long code;</span><br><span class="line">    /**</span><br><span class="line">     * 数据</span><br><span class="line">     */</span><br><span class="line">    private Object data;</span><br><span class="line">    /**</span><br><span class="line">     * 附加信息</span><br><span class="line">     */</span><br><span class="line">    private String msg;</span><br><span class="line">    /**</span><br><span class="line">     * 异常信息</span><br><span class="line">     */</span><br><span class="line">    private String stack;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 返回成功的消息使用的构造函数</span><br><span class="line">     *</span><br><span class="line">     * @author ming</span><br><span class="line">     * @date 2017-11-10 17:26</span><br><span class="line">     */</span><br><span class="line">    public ReturnJsonBody(long code, Object data) &#123;</span><br><span class="line">        this.code = code;</span><br><span class="line">        this.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 返回异常的消息使用的构造函数</span><br><span class="line">     *</span><br><span class="line">     * @author ming</span><br><span class="line">     * @date 2017-11-10 17:26</span><br><span class="line">     */</span><br><span class="line">    public ReturnJsonBody(long code, String msg, String stack) &#123;</span><br><span class="line">        this.code = code;</span><br><span class="line">        this.msg = msg;</span><br><span class="line">        this.stack = stack;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p>
<p>2:通过增强控制器来实现对返回数据包装<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 全局json 数据返回处理</span><br><span class="line"> *</span><br><span class="line"> * @author ming</span><br><span class="line"> * @date 2017-11-10 14:02</span><br><span class="line"> */</span><br><span class="line">@ControllerAdvice</span><br><span class="line">public class BaseGlobalResponseBodyAdvice implements ResponseBodyAdvice&lt;Object&gt; &#123;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 需要处理的类型</span><br><span class="line">     *</span><br><span class="line">     * @author ming</span><br><span class="line">     * @date 2017-11-10 14:05</span><br><span class="line">     */</span><br><span class="line">    private final Set&lt;MediaType&gt; jsonMediaType = new ImmutableSet.Builder&lt;MediaType&gt;()</span><br><span class="line">            .add(MediaType.APPLICATION_JSON)</span><br><span class="line">            .add(MediaType.APPLICATION_JSON_UTF8)</span><br><span class="line">            .build();</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public boolean supports(MethodParameter methodParameter, Class&lt;? extends HttpMessageConverter&lt;?&gt;&gt; converterType) &#123;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public Object beforeBodyWrite(</span><br><span class="line">            Object obj, MethodParameter methodParameter, MediaType mediaType,</span><br><span class="line">            Class&lt;? extends HttpMessageConverter&lt;?&gt;&gt; converterType,</span><br><span class="line">            ServerHttpRequest serverHttpRequest, ServerHttpResponse serverHttpResponse) &#123;</span><br><span class="line">        //当类型 不属于 需要处理的包头的时候 直接返回obj</span><br><span class="line">        if (!jsonMediaType.contains(mediaType)) &#123;</span><br><span class="line">            return obj;</span><br><span class="line">        &#125;</span><br><span class="line">        //当类型 是属于需要处理的时候 并且 obj不是ReturnJsonBody的时候 进行格式化处理</span><br><span class="line">        if (obj == null || !(obj instanceof ReturnJsonBody)) &#123;</span><br><span class="line">            obj = new ReturnJsonBody(0L, obj);</span><br><span class="line">        &#125;</span><br><span class="line">        return obj;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p>
<p>####总结: 使用增强控制器返回格式方式 来对json接口进行返回数据格式统一处理 也是必须的 方便和前端交互</p>]]></content>
      
        <categories>
            
            <category> 笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> spring </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[spring boot mvc配置笔记]]></title>
      <url>/ming/cdea8691.html</url>
      <content type="html"><![CDATA[<h4 id="配置mvc相关参数的类"><a href="#配置mvc相关参数的类" class="headerlink" title="配置mvc相关参数的类"></a>配置mvc相关参数的类</h4><p>常用的 也就是如下三种方法 如果需要使用spring boot 中默认实现 请选则第三种方式 避免覆盖spring boot 实现</p><ul><li>@EnableWebMvc+extends WebMvcConfigurationAdapter，在扩展的类中重写父类的方法即可，这种方式会屏蔽springboot的@EnableAutoConfiguration中的设置</li><li>extends WebMvcConfigurationSupport，在扩展的类中重写父类的方法即可，这种方式会屏蔽springboot的@EnableAutoConfiguration中的设置</li><li>extends WebMvcConfigurationAdapter，在扩展的类中重写父类的方法即可，这种方式依旧使用springboot的@EnableAutoConfiguration中的设置<br>以上资料参考博客:<a href="http://www.voidcn.com/article/p-fpvxvkbi-bpb.html" target="_blank" rel="noopener">http://www.voidcn.com/article/p-fpvxvkbi-bpb.html</a><br>####常用方式实现<br>1:拦截器实现<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">import org.springframework.web.servlet.handler.HandlerInterceptorAdapter;</span><br><span class="line"></span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line">import javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 统一设定返回包头</span><br><span class="line"> *</span><br><span class="line"> * @author ming</span><br><span class="line"> * @date 2017-11-06 18:15</span><br><span class="line"> */</span><br><span class="line">public class ResponseHandlerInterceptot extends HandlerInterceptorAdapter &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void afterConcurrentHandlingStarted(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception &#123;</span><br><span class="line">        //统一设定 返回编码集</span><br><span class="line">        response.setCharacterEncoding(&quot;UTF-8&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>2:注册到拦截器链中<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 拦截器配置</span><br><span class="line"> *</span><br><span class="line"> * @author ming</span><br><span class="line"> * @date 2017-08-28 11点</span><br><span class="line"> */</span><br><span class="line">@Configuration</span><br><span class="line">public class WebInterceptors extends WebMvcConfigurerAdapter &#123;</span><br><span class="line">    public WebInterceptors() &#123;</span><br><span class="line">        super();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 添加拦截器</span><br><span class="line">     *</span><br><span class="line">     * @author ming</span><br><span class="line">     * @date 2017-11-07 10:08</span><br><span class="line">     */</span><br><span class="line">    @Override</span><br><span class="line">    public void addInterceptors(InterceptorRegistry registry) &#123;</span><br><span class="line">        //注册统一处理响应包头拦截器</span><br><span class="line">        registry.addInterceptor(new ResponseHandlerInterceptot());</span><br><span class="line">        super.addInterceptors(registry);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 添加允许跨域的请求</span><br><span class="line">     *</span><br><span class="line">     * @author ming</span><br><span class="line">     * @date 2017-11-10 17:07</span><br><span class="line">     */</span><br><span class="line">    @Override</span><br><span class="line">    public void addCorsMappings(CorsRegistry registry) &#123;</span><br><span class="line">        //允许所有请求跨域</span><br><span class="line">        registry.addMapping(&quot;/**&quot;);</span><br><span class="line">        super.addCorsMappings(registry);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p></p>
<p>####总结:追求高度自定义 继承 WebMvcConfigurationSupport  如果想偷懒 那就继承 WebMvcConfigurationAdapter 可以拥有spring boot 默认的配置</p>]]></content>
      
        <categories>
            
            <category> 笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> spring </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[spring boot 自定义mvc MessageConverter 笔记]]></title>
      <url>/ming/de4fca49.html</url>
      <content type="html"><![CDATA[<h4 id="指定前后端传输数据格式"><a href="#指定前后端传输数据格式" class="headerlink" title="指定前后端传输数据格式"></a>指定前后端传输数据格式</h4><p>在前后分离项目中 最麻烦的应该就是 前后端工程师对接<br>后端通过添加mvc消息转换器 返回更加符合前端的数据格式<br>这个数据格式 不是说返回的格式 而是 某些类型的数据的处理 例如 date 可以转换成Long类型的时间戳返回<br>直接继承实现即可 如果是继承WebMvcConfigurerAdapter 实现的mvc 相关配置 可以不用管 这样 它自己会添加到转换器链中<br>如果是继承WebMvcConfigurationSupport 那么 需要重写configureMessageConverters() 手动添加到转换器链中<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 返回数数据格式转换器</span><br><span class="line"> *</span><br><span class="line"> * @author ming</span><br><span class="line"> * @date 2017-11-10 13:57</span><br><span class="line"> */</span><br><span class="line">public class MessageConverter extends AbstractHttpMessageConverter&lt;Object&gt; &#123;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * date 转换为 时间戳</span><br><span class="line">     *</span><br><span class="line">     * @author ming</span><br><span class="line">     * @date 2017-11-10 13:56</span><br><span class="line">     */</span><br><span class="line">    ValueFilter filter = (obj, s, v) -&gt; &#123;</span><br><span class="line">        if (v instanceof Date) &#123;</span><br><span class="line">            return ((Date) v).getTime();</span><br><span class="line">        &#125;</span><br><span class="line">        return v;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    public MessageConverter() &#123;</span><br><span class="line">        super(MediaType.ALL);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected boolean supports(Class&lt;?&gt; clazz) &#123;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected Object readInternal(Class&lt;?&gt; aClass, HttpInputMessage httpInputMessage) throws IOException, HttpMessageNotReadableException &#123;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public boolean canWrite(Class&lt;?&gt; clazz, MediaType mediaType) &#123;</span><br><span class="line">        return this.supports(clazz) &amp;&amp; this.canWrite(mediaType);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void writeInternal(Object o, HttpOutputMessage httpOutputMessage) throws IOException &#123;</span><br><span class="line">        FileCopyUtils.copy(JSON.toJSONString(o, filter, SerializerFeature.DisableCircularReferenceDetect).getBytes(), httpOutputMessage.getBody());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p>
<h4 id="这个只是返回数据中数据的类型的格式化-如果是要对返回数据格式进行格式化需要利用对ResponseBodyAdvice进行继承-进行控制器增强处理返回数据格式"><a href="#这个只是返回数据中数据的类型的格式化-如果是要对返回数据格式进行格式化需要利用对ResponseBodyAdvice进行继承-进行控制器增强处理返回数据格式" class="headerlink" title="这个只是返回数据中数据的类型的格式化 如果是要对返回数据格式进行格式化需要利用对ResponseBodyAdvice进行继承 进行控制器增强处理返回数据格式"></a>这个只是返回数据中数据的类型的格式化 如果是要对返回数据格式进行格式化需要利用对ResponseBodyAdvice进行继承 进行控制器增强处理返回数据格式</h4>]]></content>
      
        <categories>
            
            <category> 笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> spring </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[springboot-thymeleaf模版实现类似jsp的sitemesh]]></title>
      <url>/ming/12183fd8.html</url>
      <content type="html"><![CDATA[<p>####thymeleaf<br>虽然现在大部分项目 更加倾向于前后端分离 但是有时候身为后端工程师 总想手贱写点小东西<br>但是jsp 又比较老 而且需要web容器支撑 spring boot 支持性太差<br>所以还是用spring boot 推荐的thymeleaf<br>可是 jsp中的siteMesh装饰器真的好用 苦于thymeleaf没有这个东西<br>在国外博客看到别人实现了类似功能 特此写这篇笔记 方便后续查阅<br>1:建立layout注解<br>用这个注解标识 那些接口需要被装饰<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">import java.lang.annotation.*;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 样式装饰器 注解  在controller中注解</span><br><span class="line"> *</span><br><span class="line"> * @author ming</span><br><span class="line"> * @date 2017-08-28 11点</span><br><span class="line"> */</span><br><span class="line">@Target(&#123;ElementType.METHOD, ElementType.TYPE&#125;)</span><br><span class="line">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="line">@Documented</span><br><span class="line">public @interface Layout &#123;</span><br><span class="line">    /**</span><br><span class="line">     * no layout will be used</span><br><span class="line">     */</span><br><span class="line">    String none = &quot;none&quot;;</span><br><span class="line">    /**</span><br><span class="line">     * default layout will be used</span><br><span class="line">     */</span><br><span class="line">    String defaultLayOut = &quot;default&quot;;</span><br><span class="line"></span><br><span class="line">    String value() default defaultLayOut;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p>
<p>2:建立 thymeleaf 处理拦截器<br>这个拦截器 就是用来根据layout注解处理相关组装页面的<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * thymeleaf样式拦截器  实现类似 jsp的sitemesh 装饰器功能</span><br><span class="line"> *</span><br><span class="line"> * @author ming</span><br><span class="line"> * @date 2017-08-28 11点</span><br><span class="line"> */</span><br><span class="line">public class ThymeleafLayoutInterceptor extends HandlerInterceptorAdapter &#123;</span><br><span class="line"></span><br><span class="line">    private static final String DEFAULT_LAYOUT = &quot;layouts/default&quot;;</span><br><span class="line">    private static final String DEFAULT_VIEW_ATTRIBUTE_NAME = &quot;view&quot;;</span><br><span class="line"></span><br><span class="line">    private String defaultLayout = DEFAULT_LAYOUT;</span><br><span class="line">    private String viewAttributeName = DEFAULT_VIEW_ATTRIBUTE_NAME;</span><br><span class="line"></span><br><span class="line">    public void setDefaultLayout(String defaultLayout) &#123;</span><br><span class="line">        Assert.hasLength(defaultLayout, &quot;默认样式不存在!&quot;);</span><br><span class="line">        this.defaultLayout = defaultLayout;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setViewAttributeName(String viewAttributeName) &#123;</span><br><span class="line">        Assert.hasLength(defaultLayout, &quot;默认样式不存在!&quot;);</span><br><span class="line">        this.viewAttributeName = viewAttributeName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView) throws Exception &#123;</span><br><span class="line">        if (modelAndView == null || !modelAndView.hasView()) &#123;</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        String originalViewName = modelAndView.getViewName();</span><br><span class="line">        if (isRedirectOrForward(originalViewName)) &#123;</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        String layoutName = getLayoutName(handler);</span><br><span class="line">        if (Layout.none.equals(layoutName)) &#123;</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        modelAndView.setViewName(layoutName);</span><br><span class="line">        modelAndView.addObject(this.viewAttributeName, originalViewName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private boolean isRedirectOrForward(String viewName) &#123;</span><br><span class="line">        return viewName.startsWith(&quot;redirect:&quot;) || viewName.startsWith(&quot;forward:&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private String getLayoutName(Object handler) &#123;</span><br><span class="line">        if (handler instanceof HandlerMethod) &#123;</span><br><span class="line">            HandlerMethod handlerMethod = (HandlerMethod) handler;</span><br><span class="line">            Layout layout = getMethodOrTypeAnnotation(handlerMethod);</span><br><span class="line">            if (layout != null) &#123;</span><br><span class="line">                return layout.value();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return this.defaultLayout;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private Layout getMethodOrTypeAnnotation(HandlerMethod handlerMethod) &#123;</span><br><span class="line">        Layout layout = handlerMethod.getMethodAnnotation(Layout.class);</span><br><span class="line">        if (layout == null) &#123;</span><br><span class="line">            return handlerMethod.getBeanType().getAnnotation(Layout.class);</span><br><span class="line">        &#125;</span><br><span class="line">        return layout;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p>
<p>3:建立样式装饰页面<br>在项目静态页面路径下 创建 layouts文件夹<br>在文件夹目录下建立 装饰配置html 例如default.html<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html xmlns:th=&quot;http://www.thymeleaf.org&quot; lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;utf-8&quot;/&gt;</span><br><span class="line">    &lt;title&gt;ming thymeleaf site mesh&lt;/title&gt;</span><br><span class="line"></span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=&quot;menu-container&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;container&quot; th:replace=&quot;$&#123;view&#125; :: content&quot;&gt;加载中。。。。。&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p></p>
<p>4:在controller中应用<br>layout默认是使用default的 这个看layout实现即可<br>这样 index.html就会嵌入到default.html中 那个th:replace=“{view}”那个位置<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">import com.ming.base.annotations.Layout;</span><br><span class="line">import org.springframework.stereotype.Controller;</span><br><span class="line">import org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 首页 控制器</span><br><span class="line"> *</span><br><span class="line"> * @author ming</span><br><span class="line"> * @date 2017-11-08 10:33</span><br><span class="line"> */</span><br><span class="line">@Controller</span><br><span class="line">@Layout</span><br><span class="line">public class IndexController &#123;</span><br><span class="line"></span><br><span class="line">    @GetMapping(value = &#123;&quot;&quot;, &quot;/&quot;, &quot;/index&quot;&#125;)</span><br><span class="line">    public String index() &#123;</span><br><span class="line">        return &quot;index&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p>
<p>####总结：thymeleaf 总的来说 还行 毕竟简单粗暴 但是有几个比较坑的地方  1:必须是标在的xml结构的html 也就是必须符合xml规范 2：由于技术用的人可能不太多 编辑器支持不是很好 不能做到 jsp 那样可以直接追踪到controller中</p>]]></content>
      
        <categories>
            
            <category> 笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> spring </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[idea 常用插件]]></title>
      <url>/ming/a365393a.html</url>
      <content type="html"><![CDATA[<table><thead><tr><th style="text-align:left">名称</th><th style="text-align:left">功能</th><th style="text-align:left">快捷键</th><th style="text-align:left">备注</th></tr></thead><tbody><tr><td style="text-align:left">ace jump</td><td style="text-align:left">文件中匹配字符串跳转</td><td style="text-align:left">ctrl+;</td><td style="text-align:left">常用在代码中匹配跳转</td></tr><tr><td style="text-align:left">vim</td><td style="text-align:left">使用类似vim方式操作文件内容</td><td style="text-align:left"></td><td style="text-align:left">vim控使用</td></tr><tr><td style="text-align:left">find bugs</td><td style="text-align:left">查找代码中不符合他的规范的代码</td><td style="text-align:left"></td><td style="text-align:left">略坑 但是有点用</td></tr><tr><td style="text-align:left">.ignore</td><td style="text-align:left">git 配置忽略文件的插件</td><td style="text-align:left"></td><td style="text-align:left">可以通过查看是否变灰 来确定配置是否生效</td></tr><tr><td style="text-align:left">bashsupport</td><td style="text-align:left">写bashshell脚本的插件</td><td style="text-align:left"></td><td style="text-align:left">一般用途 shell脚本 不是很需要这个</td></tr><tr><td style="text-align:left">lombok</td><td style="text-align:left">配合lombok.jar使用</td><td style="text-align:left"></td><td style="text-align:left">lombok 很不错 能让代码看起来 更加干净整洁</td></tr><tr><td style="text-align:left">markdown support</td><td style="text-align:left">书写markdown 文件的插件</td><td style="text-align:left"></td><td style="text-align:left">还不错 用起来 和简书上差不多</td></tr><tr><td style="text-align:left">code glance</td><td style="text-align:left">代码试图</td><td style="text-align:left">pgup pgon 上下翻屏</td></tr></tbody></table>]]></content>
      
        <categories>
            
            <category> 工具 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> tools </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[guava-cache笔记]]></title>
      <url>/ming/1be97d35.html</url>
      <content type="html"><![CDATA[<p>##　guava cache工具</p><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">   * 缓存示例</span><br><span class="line">   *</span><br><span class="line">   * @author ming</span><br><span class="line">   * @date 2017/8/7</span><br><span class="line">   */</span><br><span class="line">  @Test</span><br><span class="line">  public void helloWorldTest() throws ExecutionException &#123;</span><br><span class="line">      LoadingCache&lt;Long, String&gt; strCache = CacheBuilder.newBuilder().maximumSize(1000)</span><br><span class="line">              .expireAfterWrite(10, TimeUnit.MINUTES)</span><br><span class="line">              .build(new CacheLoader&lt;Long, String&gt;() &#123;</span><br><span class="line">                  //有这个键就从缓存中去 没有就根据load方法从新获取</span><br><span class="line">                  //如果load没有显示抛出异常 可以用getUnchecked查找缓存 如果显示抛出 就不能使用getUnchecked</span><br><span class="line">                  @Override</span><br><span class="line">                  public String load(Long o) throws Exception &#123;</span><br><span class="line">                      return &quot;缓存:&quot; + o;</span><br><span class="line">                  &#125;</span><br><span class="line"> </span><br><span class="line">                  //批量加载</span><br><span class="line">                  @Override</span><br><span class="line">                  public Map&lt;Long, String&gt; loadAll(Iterable&lt;? extends Long&gt; keys) throws Exception &#123;</span><br><span class="line">                      Map&lt;Long,String&gt; tempMap = Maps.newConcurrentMap();</span><br><span class="line">                      keys.forEach(key-&gt;&#123;</span><br><span class="line">                          tempMap.put(key,&quot;缓存:&quot;+key);</span><br><span class="line">                      &#125;);</span><br><span class="line">                      return tempMap;</span><br><span class="line">                  &#125;</span><br><span class="line">                  //重新加载</span><br><span class="line">                  @Override</span><br><span class="line">                  public ListenableFuture&lt;String&gt; reload(Long key, String oldValue) throws Exception &#123;</span><br><span class="line">                      return super.reload(key, oldValue);</span><br><span class="line">                  &#125;</span><br><span class="line">              &#125;);</span><br><span class="line">      System.out.println(strCache.get(1L));</span><br><span class="line">      System.out.println(strCache.get(1L));</span><br><span class="line">      System.out.println(strCache.get(2L));</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>####适合的场景</p>
<ul>
<li>通过消耗内存提高速度</li>
<li>预料到某些数据会被频繁查询</li>
<li>缓存数量不会超过内存<br>####需要注意的点</li>
<li>如果显示抛出异常 不可使用getUnchecked();</li>
<li>可以通过重写load、loadAll、reload方法来进行单个加载获取、组合加载获取、重新加载</li>
<li>getAll 默认是通过load来加载没有缓存的信息 除非重写loadAll<br>####Callable加载<br>可以通过不同的回调函数 来缓存从不同数据源来的数据 不局限于load方法来缓存数据<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">/** 回调方式 执行获取缓存 方便实现&quot;如果有缓存则返回；否则运算、缓存、然后返回&quot;</span><br><span class="line">     * 可以在同一个cache对象中 通过不同方法获取 源数据</span><br><span class="line">    * @author ming</span><br><span class="line">    * @date 2017/8/7</span><br><span class="line">    */</span><br><span class="line">   @Test</span><br><span class="line">   public void callableTest() throws ExecutionException &#123;</span><br><span class="line">       //创建缓存对象 不重写cacheLoader 利用callable来从源数据获取缓存 不管有没有重写 callable优先</span><br><span class="line">       Cache&lt;Long,String&gt; cache = CacheBuilder.newBuilder().maximumSize(1000).build(new CacheLoader&lt;Long, String&gt;() &#123;</span><br><span class="line">           //使用带回调方式获取缓存 优先执行回调方法获取的缓存</span><br><span class="line">           @Override</span><br><span class="line">           public String load(Long key) throws Exception &#123;</span><br><span class="line">               return &quot;缓存:&quot;+key;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;);</span><br><span class="line"> </span><br><span class="line">       //创建 通过回调获取缓存</span><br><span class="line">       System.out.println(cache.get(1L, new Callable&lt;String&gt;() &#123;</span><br><span class="line">           public String call() throws Exception&#123;</span><br><span class="line">               return &quot;回调缓存:&quot;+1L;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;));</span><br><span class="line"> </span><br><span class="line">       System.out.println(cache.get(2L, new Callable&lt;String&gt;() &#123;</span><br><span class="line">           @Override</span><br><span class="line">           public String call() throws Exception &#123;</span><br><span class="line">               return &quot;回调缓存2：&quot;+2;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;));</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>####缓存回收</p>
<ul>
<li><p>基于容量回收(size-based eviction)<br>如果只是不超过固定值 直接使用maximumSize()构建  如果要通过不同的权重来计算实现Weigher </p>
</li>
<li><p>定时回收(timed eviction)<br>  expireAfterAccess(long, TimeUnit)：缓存项在给定时间内没有被读/写访问，则回收。请注意这种缓存的回收顺序和基于大小回收一样。<br>  expireAfterWrite(long, TimeUnit)：缓存项在给定时间内没有被写访问（创建或覆盖），则回收。如果认为缓存数据总是在固定时候后变得陈旧不可用，这种回收方式是可取的。</p>
</li>
<li>基于引用(Reference-based eviction)<br>  CacheBuilder.weakKeys()：使用弱引用存储键。当键没有其它（强或软）引用时，缓存项可以被垃圾回收。因为垃圾回收仅依赖恒等式（==），使用弱引用键的缓存用==而不是equals比较键。<br>  CacheBuilder.weakValues()：使用弱引用存储值。当值没有其它（强或软）引用时，缓存项可以被垃圾回收。因为垃圾回收仅依赖恒等式（==），使用弱引用值的缓存用==而不是equals比较值。<br>  CacheBuilder.softValues()：使用软引用存储值。软引用只有在响应内存需要时，才按照全局最近最少使用的顺序回收。考虑到使用软引用的性能影响，我们通常建议使用更有性能预测性的缓存大小限定（见上文，基于容量回收）。使用软引用值的缓存同样用==而不是equals比较值。</li>
<li>显示清除<br>  个别清除：Cache.invalidate(key)<br>  批量清除：Cache.invalidateAll(keys)<br>  清除所有缓存项：Cache.invalidateAll()<br>####监听器<br>removalListener默认是同步进行的 可以通过RemovalListeners.asynchronous(RemovalListener,Executor)装饰成 异步<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">/**清除缓存监听器</span><br><span class="line">    * @author ming</span><br><span class="line">    * @date 2017/8/8</span><br><span class="line">    */</span><br><span class="line">    @Test</span><br><span class="line">    public void listenerTest() throws ExecutionException &#123;</span><br><span class="line">        RemovalListener&lt;Long,String&gt; removalListener = new RemovalListener&lt;Long, String&gt;() &#123;</span><br><span class="line">            //移除动作监听器  同步进行</span><br><span class="line">            @Override</span><br><span class="line">            public void onRemoval(RemovalNotification&lt;Long, String&gt; notification) &#123;</span><br><span class="line">                System.out.println(&quot;\n删除缓存:&quot;+notification);</span><br><span class="line">                System.out.println(notification.getKey());</span><br><span class="line">                System.out.println(notification.getValue());</span><br><span class="line">                //清除原因 返回是什么情况下清除的 例如超过大小、手动清除等</span><br><span class="line">                System.out.println(notification.getCause());</span><br><span class="line">                //是否是自动清除</span><br><span class="line">                System.out.println(notification.wasEvicted());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        //装饰成异步的</span><br><span class="line">        //RemovalListeners.asynchronous(removalListener, new Executor&#123;...&#125;);</span><br><span class="line">        Cache&lt;Long,String&gt; cache= CacheBuilder.newBuilder().maximumSize(1000)</span><br><span class="line">                .removalListener(removalListener).build();</span><br><span class="line">        //添加缓存</span><br><span class="line">        cache.get(1L, new Callable&lt;String&gt;() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public String call() throws Exception &#123;</span><br><span class="line">                return &quot;回调缓存:&quot;+1L;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        //显示删除缓存  被removalListener监听到</span><br><span class="line">        cache.invalidate(1L);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>####刷新</p>
<ul>
<li>指定刷新 cache.refresh(key)</li>
<li>定时刷新CacheBuilder.refreshAfterWrite(到时间、访问过期的数据才会触发)、CacheBuilder.expireAfterWrite(到时间直接刷新数据)<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">    * 刷新缓存</span><br><span class="line">    *</span><br><span class="line">    * @author ming</span><br><span class="line">    * @date 2017/8/8</span><br><span class="line">    */</span><br><span class="line">   @Test</span><br><span class="line">   public void refreshTest() throws ExecutionException, InterruptedException &#123;</span><br><span class="line">       //定时执行服务</span><br><span class="line">       ScheduledExecutorService executor = new ScheduledThreadPoolExecutor(10);</span><br><span class="line">       LoadingCache&lt;Integer, String&gt; cache = CacheBuilder.newBuilder()</span><br><span class="line">               .maximumSize(1000)</span><br><span class="line">               //定时刷新 到时间后 访问过期数据后进行刷新 优先级比expireAfterWrite高</span><br><span class="line">               //.refreshAfterWrite(100,TimeUnit.MILLISECONDS)</span><br><span class="line">               //定时刷新 到时间直接刷新</span><br><span class="line">               //.expireAfterWrite(100,TimeUnit.MILLISECONDS)</span><br><span class="line">               .build(new CacheLoader&lt;Integer, String&gt;() &#123;</span><br><span class="line">                   @Override</span><br><span class="line">                   public String load(Integer key) throws Exception &#123;</span><br><span class="line">                       return &quot;load缓存+&quot; + key;</span><br><span class="line">                   &#125;</span><br><span class="line"></span><br><span class="line">                   @Override</span><br><span class="line">                   public ListenableFuture&lt;String&gt; reload(Integer key, String oldValue) throws Exception &#123;</span><br><span class="line">                       //当key &lt;2的时候 直接刷新 当key&gt;=2 异步刷新</span><br><span class="line">                       if (key &lt; 2) &#123;</span><br><span class="line">                           return Futures.immediateFuture(oldValue);</span><br><span class="line">                       &#125; else &#123;</span><br><span class="line">                           //异步</span><br><span class="line">                           ListenableFutureTask&lt;String&gt; task = ListenableFutureTask.create(new Callable&lt;String&gt;() &#123;</span><br><span class="line">                               @Override</span><br><span class="line">                               public String call() throws Exception &#123;</span><br><span class="line">                                   return &quot;异步刷新缓存&quot; + System.currentTimeMillis();</span><br><span class="line">                               &#125;</span><br><span class="line">                           &#125;);</span><br><span class="line">                           executor.execute(task);</span><br><span class="line">                           return task;</span><br><span class="line">                       &#125;</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;);</span><br><span class="line"></span><br><span class="line">       System.out.println(cache.get(1));</span><br><span class="line">       System.out.println(cache.get(3));</span><br><span class="line">       //key&lt;2</span><br><span class="line">       cache.refresh(1);</span><br><span class="line">       System.out.println(cache.get(1));</span><br><span class="line">       //key &gt;= 2 异步刷新</span><br><span class="line">       cache.refresh(3);</span><br><span class="line">       //由于是异步刷新 获取最新数据 主线程休眠1s</span><br><span class="line">       Thread.sleep(1000);</span><br><span class="line">       System.out.println(cache.get(3));</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>####统计缓存信息<br>guava缓存提供统计缓存信息方法 CacheBuilder.recordStats()开启缓存  cache.stats()获取缓存<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">   * 缓存统计信息</span><br><span class="line">   *</span><br><span class="line">   * @author ming</span><br><span class="line">   * @date 2017/8/8</span><br><span class="line">   */</span><br><span class="line">  @Test</span><br><span class="line">  public void statTest() throws ExecutionException &#123;</span><br><span class="line">      LoadingCache&lt;Integer, String&gt; cache = CacheBuilder.newBuilder()</span><br><span class="line">              .maximumSize(1000)</span><br><span class="line">              //开启缓存统计功能</span><br><span class="line">              .recordStats()</span><br><span class="line">              .build(new CacheLoader&lt;Integer, String&gt;() &#123;</span><br><span class="line">                  @Override</span><br><span class="line">                  public String load(Integer key) throws Exception &#123;</span><br><span class="line">                      return &quot;缓存:&quot; + key;</span><br><span class="line">                  &#125;</span><br><span class="line">              &#125;);</span><br><span class="line">      //查询缓存</span><br><span class="line">      for (int i = 0; i &lt; 99; i++) &#123;</span><br><span class="line">          cache.get(i);</span><br><span class="line">      &#125;</span><br><span class="line">      //查询已经缓存的数据 此时命中率 1%</span><br><span class="line">      cache.get(1);</span><br><span class="line">      CacheStats stats = cache.stats();</span><br><span class="line">      //请求次数</span><br><span class="line">      System.out.println(&quot;请求中次数:&quot; + stats.requestCount());</span><br><span class="line">      //命中次数</span><br><span class="line">      System.out.println(&quot;命中次数:&quot; + stats.hitCount());</span><br><span class="line">      //命中率</span><br><span class="line">      System.out.println(&quot;命中率:&quot; + stats.hitRate());</span><br><span class="line">      //miss数量</span><br><span class="line">      System.out.println(&quot;miss数量:&quot; + stats.missCount());</span><br><span class="line">      //miss 比例</span><br><span class="line">      System.out.println(&quot;miss率:&quot; + stats.missRate());</span><br><span class="line">      //加载数量</span><br><span class="line">      System.out.println(&quot;加载总数量:&quot; + stats.loadCount());</span><br><span class="line">      //加载成功数量</span><br><span class="line">      System.out.println(&quot;加载成功数量:&quot; + stats.loadSuccessCount());</span><br><span class="line">      //加载异常数量</span><br><span class="line">      System.out.println(&quot;加载异常数量:&quot; + stats.loadExceptionCount());</span><br><span class="line">      //加载异常比例</span><br><span class="line">      System.out.println(&quot;加载异常比例&quot; + stats.loadExceptionRate());</span><br><span class="line">      //加载总耗时 ns</span><br><span class="line">      System.out.println(&quot;加载总耗时:&quot; + stats.totalLoadTime());</span><br><span class="line">      //加载新值的平均 时间  ns   (ns/1000 = ms)</span><br><span class="line">      System.out.println(&quot;加载源数据平均时间:&quot; + stats.averageLoadPenalty());</span><br><span class="line">      //缓存被回收的总数量 显示清除不算</span><br><span class="line">      System.out.println(&quot;被自动回收的数量:&quot; + stats.evictionCount());</span><br><span class="line">      // 减 本身-other 小于0  返回0</span><br><span class="line">      //System.out.println(stats.minus(new CacheStats(...)));</span><br><span class="line">      // 加 本身+other</span><br><span class="line">      //System.out.println(stats.plus(new CacheStats(...)));</span><br><span class="line">      System.out.println(stats);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p></p>
<h4 id="总结-guava的cache-适合那些微型项目、或者是一些小地方用用-大项目还是得靠-redis或者其他的方式来做"><a href="#总结-guava的cache-适合那些微型项目、或者是一些小地方用用-大项目还是得靠-redis或者其他的方式来做" class="headerlink" title="总结:guava的cache 适合那些微型项目、或者是一些小地方用用 ;大项目还是得靠 redis或者其他的方式来做;"></a>总结:guava的cache 适合那些微型项目、或者是一些小地方用用 ;大项目还是得靠 redis或者其他的方式来做;</h4><h4 id="不过这个guava的cache-真心好用-异步加载、缓存刷新、过期策略-、缓存监控、都相当好用"><a href="#不过这个guava的cache-真心好用-异步加载、缓存刷新、过期策略-、缓存监控、都相当好用" class="headerlink" title="不过这个guava的cache 真心好用  异步加载、缓存刷新、过期策略 、缓存监控、都相当好用"></a>不过这个guava的cache 真心好用  异步加载、缓存刷新、过期策略 、缓存监控、都相当好用</h4>]]></content>
      
        <categories>
            
            <category> 笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> tools </tag>
            
            <tag> guava </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[中文写java]]></title>
      <url>/ming/e8ebc393.html</url>
      <content type="html"><![CDATA[<p>###偶然间发现java底层是采用utf16做编码集的 突发奇想 既然是utf16做底层编码 拿起不是可以拿非英文开发 毕竟编译器可以识别中文那么肯定也可以编译中文</p><p>###代码尝试：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">class  垃圾&#123;</span><br><span class="line">  public void 一个垃圾方法()&#123;</span><br><span class="line">      System.out.println(&quot;真的垃圾&quot;);</span><br><span class="line">  &#125;</span><br><span class="line">  public void 两个垃圾方法(String 垃圾参数)&#123;</span><br><span class="line">      System.out.println(&quot;第二个垃圾方法的垃圾参数:&quot;+垃圾参数);</span><br><span class="line">  &#125;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        垃圾 垃圾的实例=new 垃圾();</span><br><span class="line">        垃圾的实例.一个垃圾方法();</span><br><span class="line">        垃圾的实例.两个垃圾方法(&quot;啦等等单打独斗&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p>
<p>####总结:java真的贼几把神奇、这样看来几乎可以用任何utf16包含的语言去编写java了</p>]]></content>
      
        <categories>
            
            <category> 骚想法 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java基础 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[jsp 自定义标签]]></title>
      <url>/ming/dd01bc67.html</url>
      <content type="html"><![CDATA[<p>###在做jsp项目中除了一些框架的标签如spring、jstl、shiro等标签 可能还需要自定义一些常用标签 如page等</p><p>###自定义jsp标签有两种方式<br>1:java bean+ tld<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">通过tld来调用java中的代码 这种写法 参考http://www.runoob.com/jsp/jsp-custom-tags.html</span><br></pre></td></tr></table></figure><p></p>
<p>2:tag文件<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">直接定义一个后缀为tag的文件 这种方式比 java bean+tld 简单方便 容易使用和定义</span><br><span class="line">tag文件头 如下设置   其他按照jsp使用即可 可以导入其他标签库、java代码、等</span><br><span class="line">//定义tag的编码集合</span><br><span class="line">&lt;%@tag pageEncoding=&quot;UTF-8&quot; %&gt;</span><br><span class="line">//定义一个名字为str 类型为string的必须元素</span><br><span class="line">&lt;%@attribute name=&quot;str&quot; required=&quot;true&quot; type=&quot;java.lang.String&quot; %&gt;</span><br><span class="line">//定义一个名字为flag 类型为boolean 的非必须元素</span><br><span class="line">&lt;%@attribute name=&quot;flag&quot; required=&quot;false&quot; type=&quot;java.lang.Boolean&quot; %&gt;</span><br><span class="line">。。。。。省略业务代码 这里就跟写jsp一样</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">调用:</span><br><span class="line">在jsp头部加上这个标签所在的文件夹  是文件夹不是单个标签  </span><br><span class="line">&lt;%--自定义的标签位置--%&gt;</span><br><span class="line">&lt;%@taglib prefix=&quot;tags&quot; tagdir=&quot;/WEB-INF/tags&quot; %&gt;</span><br><span class="line"></span><br><span class="line">然后使用即可 例如实例代码文件名为 test.tag</span><br><span class="line"> &lt;tags:test str=&quot;test&quot;&gt;&lt;/tags:test&gt;</span><br></pre></td></tr></table></figure><p></p>]]></content>
      
        <categories>
            
            <category> 笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java基础 </tag>
            
            <tag> jsp </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[java操控excel相关(poi,jxl)笔记]]></title>
      <url>/ming/d3259856.html</url>
      <content type="html"><![CDATA[<ol><li><a href="#m1">poi和jxl介绍</a></li><li><a href="#m2">poi和jxl操作excel不同点</a></li><li><a href="#m3">poi读写excel实例</a></li><li><a href="#m4">jxl读写excel实例</a></li><li><a href="#m5">poi读写word实例</a></li><li><a href="#m6">poi和jxl选择</a></li></ol><h3 id="m1">1:poi和jxl介绍</h3><h4 id="1-1-poi"><a href="#1-1-poi" class="headerlink" title="1.1:poi"></a>1.1:poi</h4><pre><code>poi是对所有office资源进行读写的一套工具包、属于apache开源组织。
</code></pre><h4 id="1-2-jxl"><a href="#1-2-jxl" class="headerlink" title="1.2:jxl"></a>1.2:jxl</h4><pre><code>jxl只能对excel进行操作的一套工具包。
</code></pre><h3 id="m2">2:两者操作excel不同点</h3><pre><code>poi和jxl都是封装了对excel操作方法;
poi是把整个文件的属性都封装在HSSFWorkbook 中;
通过HSSFWorkbook来操作单个工作薄。然后通过工作薄来操作行;
在通过行来操控单元格。这样一级一级的分拆下来;
HSSFWorkbook----&gt;HSSFSheet-----&gt;HSSFRow----&gt;HSSFCell;
由于是基于HSSFWorkbook对象一步步创建起来的。所以不用把创建好的单元格添加进这个对象中、
如果需要对部分表格进行设置样式什么的。就可以创立HSSFCellStyle对象来进行设定样式;

 jxl是把整个文件封装在Workbook相关对象中;
 通过Workbook去创建sheet工作薄;但是和poi不一样的地方是
 jxl是通过向sheet中使用label(单元格)来进行读取写入;
 Workbook-----&gt;sheet------&gt;label ;
 jxl是先创建一个工作区域、然后区创立单元格、单元格包含这个单元格的位置、内容等信息;然后把这个单元格加入工作区;
</code></pre><p>###3：poi读写excel文件的实例(代码中fileURL是你存放路径)<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">//写入</span><br><span class="line">public void poiWriteExcel() &#123;</span><br><span class="line">        //创建excel工作薄</span><br><span class="line">        HSSFWorkbook hssfWorkbook = new HSSFWorkbook();</span><br><span class="line">        //在里面创建一个sheet 名字为工作薄1</span><br><span class="line">        HSSFSheet hssfSheet = hssfWorkbook.createSheet(&quot;工作薄1&quot;);</span><br><span class="line">        //在索引为o的位置创建行 也就是第一行</span><br><span class="line">        HSSFRow oneRow = hssfSheet.createRow(0);</span><br><span class="line">        //创建红色字体</span><br><span class="line">        HSSFFont font = hssfWorkbook.createFont();</span><br><span class="line">        font.setColor(HSSFFont.COLOR_RED);</span><br><span class="line">        //创建格式、</span><br><span class="line">        HSSFCellStyle cellStyle = hssfWorkbook.createCellStyle();</span><br><span class="line">        cellStyle.setFont(font);</span><br><span class="line">        //在第o行创建第一个单元格</span><br><span class="line">        HSSFCell cell = oneRow.createCell(0);</span><br><span class="line">        //使用单元格格式</span><br><span class="line">        cell.setCellStyle(cellStyle);</span><br><span class="line">        //在第一个单元格输入内容</span><br><span class="line">        cell.setCellValue(&quot;xu&quot;);</span><br><span class="line">        //创建一个第十行</span><br><span class="line">        HSSFRow tenRow = hssfSheet.createRow(9);</span><br><span class="line">        //创建输出流</span><br><span class="line">        try &#123;</span><br><span class="line">            FileOutputStream fileOutputStream = new FileOutputStream(fileURL + &quot;xianyu.xls&quot;);</span><br><span class="line">            //存储工作博</span><br><span class="line">            hssfWorkbook.write(fileOutputStream);</span><br><span class="line">            fileOutputStream.flush();</span><br><span class="line">            fileOutputStream.close();</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            System.out.println(&quot;无法写入&quot;);</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">//读取</span><br><span class="line">public void poiReadExcel() &#123;</span><br><span class="line"></span><br><span class="line">        HSSFWorkbook hssfWorkBook = null;</span><br><span class="line">        try &#123;</span><br><span class="line">            hssfWorkBook = new HSSFWorkbook(new FileInputStream(fileURL + &quot;xianyu.xls&quot;));</span><br><span class="line">            //获取第一个工作薄</span><br><span class="line">            HSSFSheet hssfSheet = hssfWorkBook.getSheetAt(0);</span><br><span class="line">            //获取第一行</span><br><span class="line">            HSSFRow row = hssfSheet.getRow(0);</span><br><span class="line">            System.out.println(row.getCell(0));</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            System.out.println(&quot;无法读取&quot;);</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p></p>
<p>###4:jxl读写excel<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">//写入</span><br><span class="line">public void jxlWriteExcel() &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            //创建xls</span><br><span class="line">            WritableWorkbook wwb = Workbook.createWorkbook(</span><br><span class="line">                    new FileOutputStream(fileURL + &quot;xianyujxl.xls&quot;));</span><br><span class="line">            //添加工作薄</span><br><span class="line">            WritableSheet sheet = wwb.createSheet(&quot;工作薄1&quot;, 0);</span><br><span class="line">            //添加单元格 Label(x,y,z) x=列 y=行 z=内容</span><br><span class="line">            Label label = new Label(0, 0, &quot;xu&quot;);</span><br><span class="line">            //添加进工作薄</span><br><span class="line">            sheet.addCell(label);</span><br><span class="line">            // 写数据</span><br><span class="line">            wwb.write();</span><br><span class="line">            wwb.close();</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            System.out.println(&quot;写入失败&quot;);</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; catch (WriteException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">//读取</span><br><span class="line">public void jxlReadExcel() &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            //获取excel</span><br><span class="line">            Workbook wb = Workbook.getWorkbook(</span><br><span class="line">                    new FileInputStream(fileURL + &quot;xianyujxl.xls&quot;));</span><br><span class="line">            //获取sheet工作薄</span><br><span class="line">            Sheet sheet = wb.getSheet(0);</span><br><span class="line">            System.out.println(sheet.getCell(0, 0).getContents());</span><br><span class="line">        &#125; catch (IOException | BiffException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p></p>
<p>###5:poi读写word<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">//写入</span><br><span class="line">public void poiWriteWord() &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            //创建word文件</span><br><span class="line">            XWPFDocument xwpfDocument = new XWPFDocument();</span><br><span class="line">            //新建段落</span><br><span class="line">            XWPFParagraph xwpfP = xwpfDocument.createParagraph();</span><br><span class="line">            //创建文本</span><br><span class="line">            XWPFRun xwpfR = xwpfP.createRun();</span><br><span class="line">            xwpfR.setText(&quot;xu&quot;);</span><br><span class="line">            xwpfDocument.write(new FileOutputStream(fileURL + &quot;xianyu.doc&quot;));</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            System.out.println(&quot;无法写入&quot;);</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">//读取</span><br><span class="line">public void poiReadWord() &#123;</span><br><span class="line">        //获取doc对象</span><br><span class="line">        XWPFDocument xwpfDocument;</span><br><span class="line">        try &#123;</span><br><span class="line">            xwpfDocument = new XWPFDocument(new FileInputStream(fileURL + &quot;xianyu.doc&quot;));</span><br><span class="line">            //获取段落并且遍历</span><br><span class="line">            xwpfDocument.getParagraphs().forEach(xwpfParagraph</span><br><span class="line">                    -&gt; System.out.println(xwpfParagraph.getText()));</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            System.out.println(&quot;无法读取&quot;);</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p></p>
<p></p><h3 id="m6">6：poi和jxl选择<h3><br>不用想了、肯定poi  因为jxl很久不更新了。poi现在是apache的项目、前景好、文档全<p></p></h3></h3>]]></content>
      
        <categories>
            
            <category> 笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
            <tag> tools </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[spring boot  + quartz实现 动态定时任务笔记及其想法]]></title>
      <url>/ming/b7d64853.html</url>
      <content type="html"><![CDATA[<h4 id="quartz-集成-到spring-boot-中"><a href="#quartz-集成-到spring-boot-中" class="headerlink" title="quartz 集成 到spring boot 中"></a>quartz 集成 到spring boot 中</h4><p>有个偷懒的方法 直接引用 这个 但是这个不是spring组织搞 的</p><p>1:gradle 依赖配置<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">buildscript &#123;</span><br><span class="line">	ext &#123;</span><br><span class="line">		springBootVersion = &apos;1.5.8.RELEASE&apos;</span><br><span class="line">	&#125;</span><br><span class="line">	repositories &#123;</span><br><span class="line">		mavenCentral()</span><br><span class="line">	&#125;</span><br><span class="line">	dependencies &#123;</span><br><span class="line">		classpath(&quot;org.springframework.boot:spring-boot-gradle-plugin:$&#123;springBootVersion&#125;&quot;)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">apply plugin: &apos;java&apos;</span><br><span class="line">apply plugin: &apos;eclipse&apos;</span><br><span class="line">apply plugin: &apos;org.springframework.boot&apos;</span><br><span class="line"></span><br><span class="line">group = &apos;com.ming&apos;</span><br><span class="line">version = &apos;1.0&apos;</span><br><span class="line">sourceCompatibility = 1.8</span><br><span class="line">targetCompatibility = 1.8</span><br><span class="line">jar &#123;</span><br><span class="line">	//指定 main class</span><br><span class="line">	manifest&#123;</span><br><span class="line">		attributes &apos;Main-Class&apos;: &apos;com.ming.StartMing&apos;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">repositories &#123;</span><br><span class="line"></span><br><span class="line">	maven &#123; url &quot;http://maven.aliyun.com/nexus/content/groups/public/&quot; &#125;</span><br><span class="line">	maven &#123; url &quot;http://repo.maven.apache.org/maven2&quot; &#125;</span><br><span class="line">	mavenCentral()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">	compile(&apos;org.springframework.boot:spring-boot-starter-actuator&apos;)</span><br><span class="line">	compile(&apos;org.springframework.boot:spring-boot-starter-aop&apos;)</span><br><span class="line">	compile(&apos;org.springframework.boot:spring-boot-starter-data-jpa&apos;)</span><br><span class="line">	compile(&apos;org.springframework.boot:spring-boot-starter-mail&apos;)</span><br><span class="line">	compile(&apos;org.springframework.boot:spring-boot-starter-thymeleaf&apos;)</span><br><span class="line">	compile(&apos;org.springframework.boot:spring-boot-starter-validation&apos;)</span><br><span class="line">	compile(&apos;org.springframework.boot:spring-boot-starter-web&apos;)</span><br><span class="line">	runtime(&apos;org.springframework.boot:spring-boot-devtools&apos;)</span><br><span class="line">	runtime(&apos;mysql:mysql-connector-java&apos;)</span><br><span class="line">	//lombok http://blog.csdn.net/victor_cindy1/article/details/72772841</span><br><span class="line">	compile(&apos;org.projectlombok:lombok&apos;)</span><br><span class="line">	testCompile(&apos;org.springframework.boot:spring-boot-starter-test&apos;)</span><br><span class="line">	compile group: &apos;de.chandre.quartz&apos;, name: &apos;spring-boot-starter-quartz&apos;, version: &apos;1.0.1&apos;</span><br><span class="line">	compile group: &apos;org.apache.shiro&apos;, name: &apos;shiro-spring&apos;, version: &apos;1.4.0&apos;</span><br><span class="line">	compile group: &apos;org.apache.shiro&apos;, name: &apos;shiro-core&apos;, version: &apos;1.4.0&apos;</span><br><span class="line">	compile group: &apos;com.google.guava&apos;, name: &apos;guava&apos;, version: &apos;22.0&apos;</span><br><span class="line">	compile group: &apos;com.alibaba&apos;, name: &apos;fastjson&apos;, version: &apos;1.2.33&apos;</span><br><span class="line">	compile group: &apos;org.apache.commons&apos;, name: &apos;commons-lang3&apos;, version: &apos;3.6&apos;</span><br><span class="line">	compile group: &apos;org.apache.httpcomponents&apos;, name: &apos;httpcore&apos;, version: &apos;4.4.6&apos;</span><br><span class="line">	compile(group: &apos;org.apache.httpcomponents&apos;, name: &apos;httpclient&apos;, version: &apos;4.5.3&apos;) &#123;</span><br><span class="line">		exclude(module: &apos;commons-logging&apos;)</span><br><span class="line">	&#125;</span><br><span class="line">	compile group: &apos;commons-io&apos;, name: &apos;commons-io&apos;, version: &apos;2.5&apos;</span><br><span class="line">	compile group: &apos;commons-codec&apos;, name: &apos;commons-codec&apos;, version: &apos;1.8&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p>
<p>2:指明 quartz 配置文件<br>这个是那个starter-quartz中的配置<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">quartz:</span><br><span class="line">  properties-config-location: classpath:/config/application-quatrz.properties</span><br></pre></td></tr></table></figure><p></p>
<p>3:配置 quartz<br>就是从 quartz 中copy出来的 改成jdbc 存储<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">org.quartz.scheduler.instanceName:DefaultQuartzScheduler</span><br><span class="line">org.quartz.scheduler.rmi.export:false</span><br><span class="line">org.quartz.scheduler.rmi.proxy:false</span><br><span class="line">org.quartz.scheduler.wrapJobExecutionInUserTransaction:false</span><br><span class="line">org.quartz.threadPool.class:org.quartz.simpl.SimpleThreadPool</span><br><span class="line">org.quartz.threadPool.threadCount:10</span><br><span class="line">org.quartz.threadPool.threadPriority:5</span><br><span class="line">org.quartz.threadPool.threadsInheritContextClassLoaderOfInitializingThread:true</span><br><span class="line">org.quartz.jobStore.misfireThreshold:60000</span><br><span class="line">#org.quartz.jobStore.class: org.quartz.simpl.RAMJobStore</span><br><span class="line"># jdbc</span><br><span class="line">org.quartz.jobStore.class=org.quartz.impl.jdbcjobstore.JobStoreTX</span><br><span class="line">org.quartz.jobStore.tablePrefix=QRTZ_</span><br><span class="line">org.quartz.jobStore.dataSource=qzDS</span><br><span class="line">org.quartz.dataSource.qzDS.driver=com.mysql.jdbc.Driver</span><br><span class="line">org.quartz.dataSource.qzDS.URL=jdbc:mysql://localhost:3306/ming?useUnicode=true&amp;characterEncoding=UTF-8</span><br><span class="line">org.quartz.dataSource.qzDS.user=root</span><br><span class="line">org.quartz.dataSource.qzDS.password=ming1234</span><br><span class="line">org.quartz.dataSource.qzDS.maxConnections=10</span><br></pre></td></tr></table></figure><p></p>
<p>4:重头戏 代理job  使用spring bean 中定义的job<br>先声明  这个是抄袭的 加上我自己的一点点想法<br>原方案 只能支持spring bean 的 我扩展了一波 可使用groovy 来扩充配置、扩充bean<br>前几个步骤都是集成进来 这一步 是将 quartz 的job 代理执行 使用注册在spring 中的job bean 执行 任务 </p>
<ul>
<li>方便管理</li>
<li>可以使用 groovy 动态注入配置,job</li>
<li>方便嵌入其他业务 如日志 等等<br>4.1:继承spring中QuartzJobBean 实现基础的job抽象类<br>通过建立抽象方法doExecute 将任务执行内容代理到实现这个抽象方法的job中 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">import org.quartz.DisallowConcurrentExecution;</span><br><span class="line">import org.quartz.JobExecutionContext;</span><br><span class="line">import org.quartz.JobExecutionException;</span><br><span class="line">import org.quartz.PersistJobDataAfterExecution;</span><br><span class="line">import org.springframework.scheduling.quartz.QuartzJobBean;</span><br><span class="line"></span><br><span class="line">import java.io.Serializable;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 基础job  抽象类</span><br><span class="line"> *</span><br><span class="line"> * @author ming</span><br><span class="line"> * @date 2017-11-09 16:32</span><br><span class="line"> */</span><br><span class="line">//表示 Quartz 将会在成功执行 execute() 方法后（没有抛出异常）更新 JobDetail 的 JobDataMap，下一次执行相同的任务（JobDetail）将会得到更新后的值，而不是原始的值。</span><br><span class="line">@PersistJobDataAfterExecution</span><br><span class="line">//禁止 并发执行 job</span><br><span class="line">@DisallowConcurrentExecution</span><br><span class="line">public abstract class BaseJob extends QuartzJobBean implements Serializable &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void executeInternal(JobExecutionContext context) throws JobExecutionException &#123;</span><br><span class="line">        doExecute(context);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 使用代理执行</span><br><span class="line">     *</span><br><span class="line">     * @param context</span><br><span class="line">     * @throws JobExecutionException</span><br><span class="line">     * @author ming</span><br><span class="line">     * @date 2017-11-09 16:08</span><br><span class="line">     */</span><br><span class="line">    protected abstract void doExecute(JobExecutionContext context) throws JobExecutionException;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>4.2：建立代理执行类<br>实现doExecute 方法<br>第一 指定 job实例来源于spring 容器<br>第二 可以插入其他业务 例如日志 之类的<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 代理执行 job  前后处理日志</span><br><span class="line"> *</span><br><span class="line"> * @author ming</span><br><span class="line"> * @date 2017-11-09 16:11</span><br><span class="line"> */</span><br><span class="line">@Slf4j</span><br><span class="line">public class ProxyJob extends BaseJob &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void doExecute(JobExecutionContext context) throws JobExecutionException &#123;</span><br><span class="line">       /* if (schedulerManageDao == null) &#123;</span><br><span class="line">            schedulerManageDao = applicationContext.getBean(SchedulerManageDao.class);</span><br><span class="line">        &#125;*/</span><br><span class="line">        // 执行</span><br><span class="line">        JobDetail jobDetail = context.getJobDetail();</span><br><span class="line">        String jobName = jobDetail.getKey().getName();</span><br><span class="line">        BaseProxyJob job;</span><br><span class="line">        Date beginTime = new Date();</span><br><span class="line">        // Long dispatchId = schedulerManageDao.addDispatchLog(ApplicationConfig.SCHEDULER_CLUSTER_NAME,  ApplicationConfig.SCHEDULER_INSTANCE_NAME, beginTime.getTime(), 0L, jobName, ScheduleExecuteLog.STATUS_BEGIN, 0L, &quot;&quot;);</span><br><span class="line">        try &#123;</span><br><span class="line">            job = SpringBeanManager.getbeanByNameAndType(jobName, BaseProxyJob.class);</span><br><span class="line">            job.execute();</span><br><span class="line">            log.info(&quot;[执行成功]&quot; + jobName);</span><br><span class="line">            Date endTime = new Date();</span><br><span class="line">            // 记录任务完成</span><br><span class="line">            //schedulerManageDao.updateDispatchLogById(dispatchId, ScheduleExecuteLog.STATUS_SUCCESS, endTime.getTime(), endTime.getTime() - beginTime.getTime(), null);</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            log.error(&quot;[执行异常]&quot; + jobName + &quot;:::&quot; + e.getMessage());</span><br><span class="line">            Date endTime = new Date();</span><br><span class="line">            // 打印异常并发送异常</span><br><span class="line">            // String exceptionMessage = ExceptionUtils.getStackTrace(e);</span><br><span class="line">            //logger.error(&quot;[doProcess][job(&#123;&#125;) 异常：&#123;&#125;]&quot;, jobName, exceptionMessage);</span><br><span class="line">            //if (dispatchId != null) &#123;</span><br><span class="line">            //    schedulerManageDao.updateDispatchLogById(dispatchId, ScheduleExecuteLog.STATUS_FAILURE, endTime.getTime(), endTime.getTime() - beginTime.getTime(), exceptionMessage);</span><br><span class="line">            //&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p>
<p>4.3:建立基础代理job抽象类<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">import lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 定时器具体任务实现任务基类。所有子类需要继承它.</span><br><span class="line"> * &lt;pre&gt;</span><br><span class="line"> *     2. 使用&#123;@link #setMemo(String)&#125;可以设置任务结束后备注</span><br><span class="line"> *     3. 当任务出现异常时，会被记录到日志里并标记任务失败。所以任务的异常需要抛出来，不要catch掉不抛出。</span><br><span class="line"> *     4. 记得实现类加&#123;@link org.springframework.stereotype.Service&#125;注解，让它可以被spring扫描到</span><br><span class="line"> * &lt;/pre&gt;</span><br><span class="line"> *</span><br><span class="line"> * @author ming</span><br><span class="line"> * @date 2017-11-09 16:32</span><br><span class="line"> */</span><br><span class="line">@Slf4j</span><br><span class="line">public abstract class BaseProxyJob &#123;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 任务执行完之后的备注</span><br><span class="line">     */</span><br><span class="line">    private String memo;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 实现</span><br><span class="line">     */</span><br><span class="line">    public abstract void execute();</span><br><span class="line"></span><br><span class="line">    public String getMemo() &#123;</span><br><span class="line">        return memo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 设置执行后备注</span><br><span class="line">     *</span><br><span class="line">     * @param memo 备注</span><br><span class="line">     */</span><br><span class="line">    public void setMemo(String memo) &#123;</span><br><span class="line">        this.memo = memo;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p>
<p>4.4:细分job类型<br>这个是在上面的基础上继续细化job的来源类型<br>方便针对不同的job来进行处理 例如 groovy 脚本写的抽象类 需要从数据库中读取相关数据 动态注入到spring 容器中<br>所有的来自groovy 脚本的job抽象类<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * groovy job 实现这个接口</span><br><span class="line"> *</span><br><span class="line"> * @author ming</span><br><span class="line"> * @date 2017-11-08 16:59</span><br><span class="line"> */</span><br><span class="line">public abstract class BaseScriptJob extends BaseProxyJob &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p>
<p>所有直接java写的编译好的job抽象类<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * java 实现的 实现这个接口</span><br><span class="line"> *</span><br><span class="line"> * @author ming</span><br><span class="line"> * @date 2017-11-08 16:59</span><br><span class="line"> */</span><br><span class="line">public abstract class BaseSimpleJob extends BaseProxyJob &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p>
<p>具体demo请参考:<a href="http://github.xujiuming.com" target="_blank" rel="noopener">http://github.xujiuming.com</a>  下mingqz项目 </p>
<p>####总结:通过编写抽象类  将 具体要执行的业务 代理执行掉  这样 就可以利用spring 的特性 去用groovy 做动态job 避免每次变更 都要从新部署</p>]]></content>
      
        <categories>
            
            <category> 骚想法 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> spring </tag>
            
            <tag> quartz </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[rocketmq使用docker运行出现重复消费]]></title>
      <url>/ming/814d8f0a.html</url>
      <content type="html"><![CDATA[<h5 id="最近公司网docker切换-现在开发-测试环境切换-我们发现docker环境下-多节点的rocketmq存在一个重复消费的问题-一个消息-被多次消费了"><a href="#最近公司网docker切换-现在开发-测试环境切换-我们发现docker环境下-多节点的rocketmq存在一个重复消费的问题-一个消息-被多次消费了" class="headerlink" title="最近公司网docker切换 现在开发 测试环境切换  我们发现docker环境下 多节点的rocketmq存在一个重复消费的问题 一个消息 被多次消费了"></a>最近公司网docker切换 现在开发 测试环境切换 我们发现docker环境下 多节点的rocketmq存在一个重复消费的问题 一个消息 被多次消费了</h5><hr><p>@author 欢总<br>rocketmq 版本 3.2.6<br>问题描述：测试环境在docker内部署了两个mq consumer，集群消费模式下，消息理应被平均消费，实际情况是每条消息都被消费了两次。<br>线上环境是同样的配置，没有出现这个问题。<br>关掉dokcer内一个consumer节点，本地再启动一个节点，发现也是正常的。<br>猜想是mq consumer instanceName引起的，如果instanceName一样会重复消费，因为集群消费模式是按instanceName做为唯一消费实例的。<br>翻了下源码发现，如果没有指定instanceName默认会把pid做为instanceName<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">if (this.instanceName.equals(&quot;DEFAULT&quot;)) &#123;</span><br><span class="line">    this.instanceName = String.valueOf(UtilAll.getPid());</span><br><span class="line">&#125;</span><br><span class="line">public static int getPid() &#123;</span><br><span class="line">    RuntimeMXBean runtime = ManagementFactory.getRuntimeMXBean();</span><br><span class="line">    String name = runtime.getName(); // format: &quot;pid@hostname&quot;</span><br><span class="line">    try &#123;</span><br><span class="line">        return Integer.parseInt(name.substring(0, name.indexOf(&apos;@&apos;)));</span><br><span class="line">    &#125;</span><br><span class="line">    catch (Exception e) &#123;</span><br><span class="line">        return -1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p>
<p>查看dokcer内consumer的pid发现都是1（由于每台容器都是干净的，只跑一个程序，所以pid都是1），所以导致了重复消费，一般情况下跑在物理机上pid是不一样的（这里略坑，如果真碰巧一样就惨了），所以不会有问题。<br>有两种解决方案：<br>1.手动设置instanceName,使每个consumer节点instanceName不一样<br>2.修改docker容器配置，使它运行时使用宿主机的pid</p>
<p>####总结:这个问题 略坑  mmp 大佬果然厉害</p>
<h4 id="一个是rocketmq-如果没有instanceName会使用pid-做instanceName"><a href="#一个是rocketmq-如果没有instanceName会使用pid-做instanceName" class="headerlink" title="一个是rocketmq 如果没有instanceName会使用pid 做instanceName"></a>一个是rocketmq 如果没有instanceName会使用pid 做instanceName</h4><p>####一个是 docker容器都是纯净的会导致pid相同</p>]]></content>
      
        <categories>
            
            <category> 坑 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> docker </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[docker配置daemon.json(加速、http访问私服仓库)]]></title>
      <url>/ming/3022b6f9.html</url>
      <content type="html"><![CDATA[<h4 id="daemon-json"><a href="#daemon-json" class="headerlink" title="daemon.json"></a>daemon.json</h4><p>daemon.json 在linux下呢一般在/etc/docker/daemon.json 目录<br>这个配置主要配置 docker守护进程的相关参数 例如代理、私服仓库、相关网络配置<br>避免直接配置docker.service<br>官方文档地址:<a href="https://docs.docker.com/engine/reference/commandline/dockerd/#examples" target="_blank" rel="noopener">https://docs.docker.com/engine/reference/commandline/dockerd/#examples</a><br>参考国内博客:<a href="http://blog.51cto.com/nosmoking/1881034" target="_blank" rel="noopener">http://blog.51cto.com/nosmoking/1881034</a></p><p>####常用配置</p><h6 id="1-aliyun的docker加速是可以个人申请一个加速节点的-以下是我自己的加速点做为实例"><a href="#1-aliyun的docker加速是可以个人申请一个加速节点的-以下是我自己的加速点做为实例" class="headerlink" title="1:aliyun的docker加速是可以个人申请一个加速节点的 以下是我自己的加速点做为实例"></a>1:aliyun的docker加速是可以个人申请一个加速节点的 以下是我自己的加速点做为实例</h6><p>当docker版本超过1.10的时候通过修改daemon配置文件/etc/docker/daemon.json来使用加速器：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir -p /etc/docker</span><br><span class="line">sudo tee /etc/docker/daemon.json &lt;&lt;-&apos;EOF&apos;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [&quot;https://o4omo0yw.mirror.aliyuncs.com&quot;]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure><p></p>
<h6 id="2：配置私服仓库地址"><a href="#2：配置私服仓库地址" class="headerlink" title="2：配置私服仓库地址"></a>2：配置私服仓库地址</h6><p>这个配置 可以避免私服仓库没有https访问导致无法使用的问题<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir -p /etc/docker</span><br><span class="line">sudo tee /etc/docker/daemon.json &lt;&lt;-&apos;EOF&apos;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;insecure-registries&quot;:[&quot;&lt;private repository url&gt;&quot;]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure><p></p>]]></content>
      
        <categories>
            
            <category> 实战 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> docker </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[spring resourc笔记]]></title>
      <url>/ming/d7cd3a26.html</url>
      <content type="html"><![CDATA[<p>##1:resource接口</p><h6 id="Resource是spring-中加载资源的顶级接口-主要方法有"><a href="#Resource是spring-中加载资源的顶级接口-主要方法有" class="headerlink" title="Resource是spring 中加载资源的顶级接口 主要方法有:"></a>Resource是spring 中加载资源的顶级接口 主要方法有:</h6><ul><li>boolean exists(); 是否存在资源</li><li>boolean isOpen(); 资源是否打开 是否开启</li><li>URL getURL(); 返回可抽象成url的资源的URL对象</li><li>FIle getFile()；返回底层资源的文件流</li><li>InputStream getInputStream;返回资源的输入流</li></ul><h6 id="resource接口关系图："><a href="#resource接口关系图：" class="headerlink" title="resource接口关系图："></a>resource接口关系图：</h6><p><img src="http://upload-images.jianshu.io/upload_images/3905525-b6f7babb70039c85.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><ul><li>WritableResource： 可写资源接口</li><li>ByteArrayResource:二进制数组表示资源</li><li>ClassPathResource:类路径下资源</li><li>FileSystemResource:文件系统中的资源(绝对路径)</li><li>InputStreamResource：用输入流返回表示资源</li><li>ServletContextResource: web容器上下文资源</li><li>UrlResource:能够访问任何能用URL表示的资源(文件系统、http、ftp等 )</li><li>PathResource:java7.0以上 能够访问任何通过URL、Path、系统文件路径表示的资源</li></ul><h6 id="spring可以通过资源地址的特殊标识符来访问相应资源如下表-支持Ant风格去描述资源地址"><a href="#spring可以通过资源地址的特殊标识符来访问相应资源如下表-支持Ant风格去描述资源地址" class="headerlink" title="spring可以通过资源地址的特殊标识符来访问相应资源如下表 支持Ant风格去描述资源地址"></a>spring可以通过资源地址的特殊标识符来访问相应资源如下表 支持Ant风格去描述资源地址</h6><p><img src="http://upload-images.jianshu.io/upload_images/3905525-c959b0858c8911c5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">在项目中 会出现 &apos;classpath:*.xml&apos; 和&apos;classpath*:*.xml&apos;  在：之前有个* 这个意思是在所有的目录下面寻找  </span><br><span class="line">举个例子: 一个项目分为 a(web模块)、b(common模块)、core(核心模块)</span><br><span class="line">如果不带*  那么只会加载一个模块的配置  其它模块配置就没加载  </span><br><span class="line">所以 写的时候 带上*   比较合适</span><br></pre></td></tr></table></figure><p></p>
<h6 id="资源加载"><a href="#资源加载" class="headerlink" title="资源加载"></a>资源加载</h6><p>spring 提供一套加载资源的方法<br>如下图：<br><img src="http://upload-images.jianshu.io/upload_images/3905525-3da84466dc8b60e0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<ul>
<li>通过ResourceLoader来加载Resource<br>有一个getResource(String location) 只支持按照特殊字符自动匹配 resource类型 但是不支持Ant风格</li>
<li>ResourcePatternResolver  扩展ResourceLoader<br>有一个getResources(String locationPattern) 支持按照特殊字符自动匹配、支持Ant匹配资源</li>
<li>PathMatchingResourcePatternResolver 是spring提供的实现类 如果有必要 可以自己实现 (我觉得自己实现的可能性很小、但是不排除坑爹的地方需要自己实现)<br>##总结:<h6 id="1-特殊字符-classpath、file这样的是spring-提供的-其中classpath-最好使用的时候带上-避免加载不到资源"><a href="#1-特殊字符-classpath、file这样的是spring-提供的-其中classpath-最好使用的时候带上-避免加载不到资源" class="headerlink" title="1:特殊字符 classpath、file这样的是spring 提供的 其中classpath 最好使用的时候带上* 避免加载不到资源"></a>1:特殊字符 classpath、file这样的是spring 提供的 其中classpath 最好使用的时候带上* 避免加载不到资源</h6><h6 id="2-Ant风格-其实就是"><a href="#2-Ant风格-其实就是" class="headerlink" title="2:Ant风格 其实就是"></a>2:Ant风格 其实就是</h6></li>
<li>‘ ? ‘代表一个任意字符 </li>
<li>‘ * ‘代表匹配文件中的任意多个字符  </li>
<li>‘ ** ‘ 代表匹配多层路径<h6 id="3-Resource-系列可以单独抽出来-当作加载资源的utils来用"><a href="#3-Resource-系列可以单独抽出来-当作加载资源的utils来用" class="headerlink" title="3: Resource 系列可以单独抽出来 当作加载资源的utils来用"></a>3: Resource 系列可以单独抽出来 当作加载资源的utils来用</h6><h6 id="4-Resource操作文件的时候-尽量使用getInputStream-因为getFile-不能加载到jar中的资源"><a href="#4-Resource操作文件的时候-尽量使用getInputStream-因为getFile-不能加载到jar中的资源" class="headerlink" title="4: Resource操作文件的时候 尽量使用getInputStream()  因为getFile()不能加载到jar中的资源"></a>4: Resource操作文件的时候 尽量使用getInputStream()  因为getFile()不能加载到jar中的资源</h6></li></ul>]]></content>
      
        <categories>
            
            <category> 笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> spring </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[服务端推送技术及其实现(轮询、长链接、sse、webSocket)]]></title>
      <url>/ming/3a488ac5.html</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><h2 id="服务端推送信息方案及其实现"><a href="#服务端推送信息方案及其实现" class="headerlink" title="服务端推送信息方案及其实现"></a>服务端推送信息方案及其实现</h2><ul><li>轮询 ：就是一直循环访问服务端 服务端压力比较大 利用js的一些定时功能 隔一段时间发起一次请求</li><li>长轮询:一次请求 服务端吧请求保留 等由数据返回的时候 再返回 管理麻烦</li><li>长链接 例如用iframe 维护长链接开销较大 而且页面会显示一直在加载 不利于使用</li><li>flash socket:利用flash插件提供的socket 麻烦 需要会flash flash的缺点无法避免如安全</li><li>WebSocket： html5技术 利用提供的html5本身特性来实现socket ws或者wss协议 现阶段几乎所有的浏览器最新版都支持 除开个别奇葩版本</li><li>sse: server-sent event http协议变通实现的 通过服务端向客户端声明 接下来是要发送的是流信息 本质上就是完成一次耗时长的下载<h3 id="web-socket服务端推送"><a href="#web-socket服务端推送" class="headerlink" title="web socket服务端推送"></a>web socket服务端推送</h3>#####maven依赖<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">    &lt;!-- https://mvnrepository.com/artifact/javax.websocket/javax.websocket-api --&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;javax.websocket&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;javax.websocket-api&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;1.1&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;!-- https://mvnrepository.com/artifact/javax.servlet/javax.servlet-api --&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;javax.servlet&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;javax.servlet-api&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;3.1.0&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>#####页面代码<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;客户端&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">    &lt;input type=&quot;button&quot; id=&quot;bconnection&quot; value=&quot;链接&quot;&gt;</span><br><span class="line">    &lt;input type=&quot;button&quot; id=&quot;bclose&quot; value=&quot;关闭&quot;&gt;</span><br><span class="line">    &lt;input type=&quot;button&quot; id=&quot;bsend&quot; value=&quot;发送&quot;&gt;</span><br><span class="line">        &lt;input type=&quot;text&quot; id=&quot;sessionId&quot; name=&quot;sessionId&quot;&gt;</span><br><span class="line">        &lt;input type=&quot;text&quot; id=&quot;message&quot; name=&quot;message&quot;&gt;</span><br><span class="line">        &lt;input type=&quot;button&quot; onclick=&quot;sendServlet()&quot; value=&quot;jdklsjlfs&quot;&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script src=&quot;http://apps.bdimg.com/libs/jquery/1.6.4/jquery.min.js&quot; type=&quot;text/javascript&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line"></span><br><span class="line">    //模拟另外个客户向服务器发起推送消息服务</span><br><span class="line">    function sendServlet() &#123;</span><br><span class="line">        $.get(&quot;http://localhost:8080/ws/sendServlet?sessionId=&quot;+$(&quot;#sessionId&quot;).val()+&quot;&amp;message=&quot;+$(&quot;#message&quot;).val());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    //设立全局变量方便后续操作</span><br><span class="line">    var socket;</span><br><span class="line">    //判断是否支持WebSocket</span><br><span class="line">    if (typeof (WebSocket)==&quot;undefined&quot;)&#123;</span><br><span class="line">        alert(&quot;浏览器不支持websocket&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    $(&quot;#bconnection&quot;).click(function () &#123;</span><br><span class="line">        //实例化weosocket 制定服务器地址和端口</span><br><span class="line">        socket=new WebSocket(&quot;ws://localhost:8080/ws/websocket/xu&quot;);</span><br><span class="line">        //打开链接</span><br><span class="line">        socket.onopen=function () &#123;</span><br><span class="line">            console.log(&quot;打开weosocket端口&quot;);</span><br><span class="line">            socket.send(&quot;客户端发送打开链接请求成功&quot;)</span><br><span class="line">        &#125;;</span><br><span class="line">        //获取消息事件</span><br><span class="line">        socket.onmessage=function (msg) &#123;</span><br><span class="line">            console.log(&quot;获取的消息&quot;+msg.data);</span><br><span class="line">        &#125;;</span><br><span class="line">        //关闭socket</span><br><span class="line">        socket.onclose=function () &#123;</span><br><span class="line">            console.log(&quot;关闭socket&quot;);</span><br><span class="line">        &#125;;</span><br><span class="line">        //监听错误</span><br><span class="line">        socket.onerror=function () &#123;</span><br><span class="line">            console.log(&quot;socket发生错误&quot;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    //发送消息</span><br><span class="line">    $(&quot;#bsend&quot;).click(function () &#123;</span><br><span class="line">        socket.send(&quot;客户端消息:&quot;+location.href+new Date());</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    //手动关闭socket</span><br><span class="line">    $(&quot;#bclose&quot;).click(function () &#123;</span><br><span class="line">        socket.close();</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p></p>
<p>#####服务端代码</p>
<p>######websocket链接类<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">package com.xxx.websocket;</span><br><span class="line"></span><br><span class="line">import javax.websocket.*;</span><br><span class="line">import javax.websocket.server.PathParam;</span><br><span class="line">import javax.websocket.server.ServerEndpoint;</span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.util.Date;</span><br><span class="line">import java.util.HashMap;</span><br><span class="line">import java.util.Map;</span><br><span class="line">import java.util.Scanner;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Created by xianyu on 17-3-7.</span><br><span class="line"> * websocket 服务端响应</span><br><span class="line"> */</span><br><span class="line">@ServerEndpoint(&quot;/websocket/&#123;user&#125;&quot;)</span><br><span class="line">public class WebSocketService &#123;</span><br><span class="line">    private String socketUser;</span><br><span class="line"></span><br><span class="line">    //记录session列表</span><br><span class="line">    private static Map&lt;String ,Session&gt; sessionMap=new HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    public static void sendMessage(String sessionId,String message)&#123;</span><br><span class="line">        sessionMap.get(sessionId).getAsyncRemote().sendText(&quot;推送消息：&quot;+message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    //打开socket链接的时候操作</span><br><span class="line">    @OnOpen</span><br><span class="line">    public void onOpen(@PathParam(&quot;user&quot;)String user, Session session) throws IOException &#123;</span><br><span class="line">        socketUser=user;</span><br><span class="line">        System.out.println(&quot;链接打开账户为&quot;+user+&quot;sessionid为&quot;+session.getId());</span><br><span class="line">        sessionMap.put(session.getId(),session);</span><br><span class="line">        session.getAsyncRemote().sendText(&quot;服务端成功接受链接;sessionId=&quot;+session.getId());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //接受消息的时候操作</span><br><span class="line">    @OnMessage</span><br><span class="line">    public String onMessage(String message) &#123;</span><br><span class="line">        System.out.println(socketUser+&quot;客户的消息&quot;+message);</span><br><span class="line">        return socketUser+&quot;:&quot;+message;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @OnError</span><br><span class="line">    public void onError(Throwable t) &#123;</span><br><span class="line">        t.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @OnClose</span><br><span class="line">    public void onClose(Session session, CloseReason reason) &#123;</span><br><span class="line">        System.out.println(String.format(&quot;session id 为%s 用户为%s  closeReason%s&quot;,session.getId(),socketUser,reason));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p>
<p>#####模拟发送服务端推送消息servlet<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">package com.xxx.websocket;</span><br><span class="line"></span><br><span class="line">import javax.servlet.ServletException;</span><br><span class="line">import javax.servlet.http.HttpServlet;</span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line">import javax.servlet.http.HttpServletResponse;</span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.util.Date;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Created by xianyu on 17-3-7.</span><br><span class="line"> */</span><br><span class="line">public class SendServlet extends HttpServlet &#123;</span><br><span class="line"></span><br><span class="line">    private String messagePrefix=&quot;servlet:&quot;;</span><br><span class="line">    @Override</span><br><span class="line">    public void init() throws ServletException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;</span><br><span class="line"></span><br><span class="line">        WebSocketService.sendMessage(req.getParameter(&quot;sessionId&quot;),messagePrefix+req.getParameter(&quot;message&quot;)+&quot;||||||||||||&quot;+new Date());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void destroy() &#123;</span><br><span class="line">        super.destroy();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>webscoket是现阶段实现服务端推送、在线聊天、等等需要使用tcp长链接的地比较合适的一个技术 现在市面上的浏览器最新版有不支持的websocket的  ws 和wss区别 相当于http和https区别一样</p>]]></content>
      
        <categories>
            
            <category> 实战 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
            <tag> js </tag>
            
            <tag> 服务端推送 </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
